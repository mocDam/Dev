// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package dev.masterfile_prices_0_37;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.SharedRecipient;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJava_1
//import java.util.List;

@SuppressWarnings("unused")

/**
 * Job: MASTERFILE_PRICES Purpose: <br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 7.3.1.20191031_1204-M3
 * @status
 */
public class MASTERFILE_PRICES implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (IntegrationPath != null) {

				this.setProperty("IntegrationPath", IntegrationPath.toString());

			}

			if (LogPath != null) {

				this.setProperty("LogPath", LogPath.toString());

			}

			if (ExtractPath != null) {

				this.setProperty("ExtractPath", ExtractPath.toString());

			}

			if (ExtractPathPrice != null) {

				this.setProperty("ExtractPathPrice", ExtractPathPrice.toString());

			}

			if (currentFileName != null) {

				this.setProperty("currentFileName", currentFileName.toString());

			}

			if (currentCreationDate != null) {

				this.setProperty("currentCreationDate", currentCreationDate.toString());

			}

			if (dataBase != null) {

				this.setProperty("dataBase", dataBase.toString());

			}

			if (SQLSERVER_LOG_Schema != null) {

				this.setProperty("SQLSERVER_LOG_Schema", SQLSERVER_LOG_Schema.toString());

			}

			if (SQLSERVER_LOG_Server != null) {

				this.setProperty("SQLSERVER_LOG_Server", SQLSERVER_LOG_Server.toString());

			}

			if (SQLSERVER_LOG_AdditionalParams != null) {

				this.setProperty("SQLSERVER_LOG_AdditionalParams", SQLSERVER_LOG_AdditionalParams.toString());

			}

			if (SQLSERVER_LOG_Login != null) {

				this.setProperty("SQLSERVER_LOG_Login", SQLSERVER_LOG_Login.toString());

			}

			if (SQLSERVER_LOG_Port != null) {

				this.setProperty("SQLSERVER_LOG_Port", SQLSERVER_LOG_Port.toString());

			}

			if (SQLSERVER_LOG_Database != null) {

				this.setProperty("SQLSERVER_LOG_Database", SQLSERVER_LOG_Database.toString());

			}

			if (SQLSERVER_LOG_Password != null) {

				this.setProperty("SQLSERVER_LOG_Password", SQLSERVER_LOG_Password.toString());

			}

			if (SQLSERVER_Schema != null) {

				this.setProperty("SQLSERVER_Schema", SQLSERVER_Schema.toString());

			}

			if (SQLSERVER_AdditionalParams != null) {

				this.setProperty("SQLSERVER_AdditionalParams", SQLSERVER_AdditionalParams.toString());

			}

			if (SQLSERVER_Server != null) {

				this.setProperty("SQLSERVER_Server", SQLSERVER_Server.toString());

			}

			if (SQLSERVER_Password != null) {

				this.setProperty("SQLSERVER_Password", SQLSERVER_Password.toString());

			}

			if (SQLSERVER_Database != null) {

				this.setProperty("SQLSERVER_Database", SQLSERVER_Database.toString());

			}

			if (SQLSERVER_Port != null) {

				this.setProperty("SQLSERVER_Port", SQLSERVER_Port.toString());

			}

			if (SQLSERVER_Login != null) {

				this.setProperty("SQLSERVER_Login", SQLSERVER_Login.toString());

			}

		}

		public String IntegrationPath;

		public String getIntegrationPath() {
			return this.IntegrationPath;
		}

		public String LogPath;

		public String getLogPath() {
			return this.LogPath;
		}

		public String ExtractPath;

		public String getExtractPath() {
			return this.ExtractPath;
		}

		public String ExtractPathPrice;

		public String getExtractPathPrice() {
			return this.ExtractPathPrice;
		}

		public String currentFileName;

		public String getCurrentFileName() {
			return this.currentFileName;
		}

		public String currentCreationDate;

		public String getCurrentCreationDate() {
			return this.currentCreationDate;
		}

		public String dataBase;

		public String getDataBase() {
			return this.dataBase;
		}

		public String SQLSERVER_LOG_Schema;

		public String getSQLSERVER_LOG_Schema() {
			return this.SQLSERVER_LOG_Schema;
		}

		public String SQLSERVER_LOG_Server;

		public String getSQLSERVER_LOG_Server() {
			return this.SQLSERVER_LOG_Server;
		}

		public String SQLSERVER_LOG_AdditionalParams;

		public String getSQLSERVER_LOG_AdditionalParams() {
			return this.SQLSERVER_LOG_AdditionalParams;
		}

		public String SQLSERVER_LOG_Login;

		public String getSQLSERVER_LOG_Login() {
			return this.SQLSERVER_LOG_Login;
		}

		public String SQLSERVER_LOG_Port;

		public String getSQLSERVER_LOG_Port() {
			return this.SQLSERVER_LOG_Port;
		}

		public String SQLSERVER_LOG_Database;

		public String getSQLSERVER_LOG_Database() {
			return this.SQLSERVER_LOG_Database;
		}

		public java.lang.String SQLSERVER_LOG_Password;

		public java.lang.String getSQLSERVER_LOG_Password() {
			return this.SQLSERVER_LOG_Password;
		}

		public String SQLSERVER_Schema;

		public String getSQLSERVER_Schema() {
			return this.SQLSERVER_Schema;
		}

		public String SQLSERVER_AdditionalParams;

		public String getSQLSERVER_AdditionalParams() {
			return this.SQLSERVER_AdditionalParams;
		}

		public String SQLSERVER_Server;

		public String getSQLSERVER_Server() {
			return this.SQLSERVER_Server;
		}

		public java.lang.String SQLSERVER_Password;

		public java.lang.String getSQLSERVER_Password() {
			return this.SQLSERVER_Password;
		}

		public String SQLSERVER_Database;

		public String getSQLSERVER_Database() {
			return this.SQLSERVER_Database;
		}

		public String SQLSERVER_Port;

		public String getSQLSERVER_Port() {
			return this.SQLSERVER_Port;
		}

		public String SQLSERVER_Login;

		public String getSQLSERVER_Login() {
			return this.SQLSERVER_Login;
		}
	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.37";
	private final String jobName = "MASTERFILE_PRICES";
	private final String projectName = "DEV";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	LogCatcherUtils talendLogs_LOGS = new LogCatcherUtils();

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					MASTERFILE_PRICES.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(MASTERFILE_PRICES.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
						talendLogs_LOGS.addMessage("Java Exception", currentComponent, 6,
								e.getClass().getName() + ":" + e.getMessage(), 1);
						talendLogs_LOGSProcess(globalMap);
					}
				} catch (TalendException e) {
					// do nothing

				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void preStaLogCon_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		preStaLogCon_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowToIterate_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tWarn_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tWarn_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBConnection_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRow_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tWarn_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tWarn_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBCommit_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBCommit_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tWarn_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tWarn_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tWarn_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tWarn_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostjob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPrejob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tWarn_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tWarn_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void connectionStatsLogs_Commit_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		connectionStatsLogs_Commit_onSubJobError(exception, errorComponent, globalMap);
	}

	public void connectionStatsLogs_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		connectionStatsLogs_onSubJobError(exception, errorComponent, globalMap);
	}

	public void talendLogs_LOGS_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		talendLogs_DB_error(exception, errorComponent, globalMap);

	}

	public void talendLogs_DB_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		talendLogs_CONSOLE_error(exception, errorComponent, globalMap);

	}

	public void talendLogs_CONSOLE_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		talendLogs_LOGS_onSubJobError(exception, errorComponent, globalMap);
	}

	public void preStaLogCon_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tWarn_5_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBRow_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tWarn_7_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBCommit_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tWarn_8_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tWarn_9_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostjob_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPrejob_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tWarn_6_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void connectionStatsLogs_Commit_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void connectionStatsLogs_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void talendLogs_LOGS_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void preStaLogConProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("preStaLogCon_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [preStaLogCon begin ] start
				 */

				ok_Hash.put("preStaLogCon", false);
				start_Hash.put("preStaLogCon", System.currentTimeMillis());

				currentComponent = "preStaLogCon";

				int tos_count_preStaLogCon = 0;

				/**
				 * [preStaLogCon begin ] stop
				 */

				/**
				 * [preStaLogCon main ] start
				 */

				currentComponent = "preStaLogCon";

				tos_count_preStaLogCon++;

				/**
				 * [preStaLogCon main ] stop
				 */

				/**
				 * [preStaLogCon process_data_begin ] start
				 */

				currentComponent = "preStaLogCon";

				/**
				 * [preStaLogCon process_data_begin ] stop
				 */

				/**
				 * [preStaLogCon process_data_end ] start
				 */

				currentComponent = "preStaLogCon";

				/**
				 * [preStaLogCon process_data_end ] stop
				 */

				/**
				 * [preStaLogCon end ] start
				 */

				currentComponent = "preStaLogCon";

				ok_Hash.put("preStaLogCon", true);
				end_Hash.put("preStaLogCon", System.currentTimeMillis());

				connectionStatsLogsProcess(globalMap);

				/**
				 * [preStaLogCon end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [preStaLogCon finally ] start
				 */

				currentComponent = "preStaLogCon";

				/**
				 * [preStaLogCon finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("preStaLogCon_SUBPROCESS_STATE", 1);
	}

	public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_DEV_MASTERFILE_PRICES = new byte[0];
		static byte[] commonByteArray_DEV_MASTERFILE_PRICES = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_MASTERFILE_PRICES) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_DEV_MASTERFILE_PRICES = new byte[0];
		static byte[] commonByteArray_DEV_MASTERFILE_PRICES = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_MASTERFILE_PRICES) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_DEV_MASTERFILE_PRICES = new byte[0];
		static byte[] commonByteArray_DEV_MASTERFILE_PRICES = new byte[0];

		public String fileName;

		public String getFileName() {
			return this.fileName;
		}

		public java.util.Date creationDate;

		public java.util.Date getCreationDate() {
			return this.creationDate;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEV_MASTERFILE_PRICES.length) {
					if (length < 1024 && commonByteArray_DEV_MASTERFILE_PRICES.length == 0) {
						commonByteArray_DEV_MASTERFILE_PRICES = new byte[1024];
					} else {
						commonByteArray_DEV_MASTERFILE_PRICES = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEV_MASTERFILE_PRICES, 0, length);
				strReturn = new String(commonByteArray_DEV_MASTERFILE_PRICES, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_MASTERFILE_PRICES) {

				try {

					int length = 0;

					this.fileName = readString(dis);

					this.creationDate = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.fileName, dos);

				// java.util.Date

				writeDate(this.creationDate, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("fileName=" + fileName);
			sb.append(",creationDate=" + String.valueOf(creationDate));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				row2Struct row2 = new row2Struct();
				row3Struct row3 = new row3Struct();

				/**
				 * [tFlowToIterate_1 begin ] start
				 */

				int NB_ITERATE_tJava_1 = 0; // for statistics

				ok_Hash.put("tFlowToIterate_1", false);
				start_Hash.put("tFlowToIterate_1", System.currentTimeMillis());

				currentComponent = "tFlowToIterate_1";

				int tos_count_tFlowToIterate_1 = 0;

				int nb_line_tFlowToIterate_1 = 0;
				int counter_tFlowToIterate_1 = 0;

				/**
				 * [tFlowToIterate_1 begin ] stop
				 */

				/**
				 * [tDBInput_1 begin ] start
				 */

				ok_Hash.put("tDBInput_1", false);
				start_Hash.put("tDBInput_1", System.currentTimeMillis());

				currentComponent = "tDBInput_1";

				int tos_count_tDBInput_1 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_1 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_1 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_1 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_1, talendToDBArray_tDBInput_1);
				int nb_line_tDBInput_1 = 0;
				java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
				java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = context.SQLSERVER_Login;

				final String decryptedPassword_tDBInput_1 = context.SQLSERVER_Password;

				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;

				String port_tDBInput_1 = context.SQLSERVER_Port;
				String dbname_tDBInput_1 = context.SQLSERVER_Database;
				String url_tDBInput_1 = "jdbc:sqlserver://" + context.SQLSERVER_Server;
				if (!"".equals(port_tDBInput_1)) {
					url_tDBInput_1 += ":" + context.SQLSERVER_Port;
				}
				if (!"".equals(dbname_tDBInput_1)) {
					url_tDBInput_1 += ";databaseName=" + context.SQLSERVER_Database;
				}
				url_tDBInput_1 += ";appName=" + projectName + ";" + context.SQLSERVER_AdditionalParams;
				String dbschema_tDBInput_1 = context.SQLSERVER_Schema;

				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1, dbUser_tDBInput_1,
						dbPwd_tDBInput_1);

				java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

				String dbquery_tDBInput_1 = "\nselect fileName, creationDate  from [masterfile].[Products]\nwhere priceExtractDate is null and productExtractDate is"
						+ " not null \ngroup by fileName, creationDate \norder by creationDate\n";

				globalMap.put("tDBInput_1_QUERY", dbquery_tDBInput_1);
				java.sql.ResultSet rs_tDBInput_1 = null;

				try {
					rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
					java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
					int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

					String tmpContent_tDBInput_1 = null;

					while (rs_tDBInput_1.next()) {
						nb_line_tDBInput_1++;

						if (colQtyInRs_tDBInput_1 < 1) {
							row1.fileName = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(1);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.fileName = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.fileName = tmpContent_tDBInput_1;
								}
							} else {
								row1.fileName = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 2) {
							row1.creationDate = null;
						} else {

							row1.creationDate = mssqlGTU_tDBInput_1.getDate(rsmd_tDBInput_1, rs_tDBInput_1, 2);

						}

						/**
						 * [tDBInput_1 begin ] stop
						 */

						/**
						 * [tDBInput_1 main ] start
						 */

						currentComponent = "tDBInput_1";

						tos_count_tDBInput_1++;

						/**
						 * [tDBInput_1 main ] stop
						 */

						/**
						 * [tDBInput_1 process_data_begin ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_begin ] stop
						 */

						/**
						 * [tFlowToIterate_1 main ] start
						 */

						currentComponent = "tFlowToIterate_1";

						globalMap.put("row1.fileName", row1.fileName);

						globalMap.put("row1.creationDate", row1.creationDate);

						nb_line_tFlowToIterate_1++;
						counter_tFlowToIterate_1++;
						globalMap.put("tFlowToIterate_1_CURRENT_ITERATION", counter_tFlowToIterate_1);

						tos_count_tFlowToIterate_1++;

						/**
						 * [tFlowToIterate_1 main ] stop
						 */

						/**
						 * [tFlowToIterate_1 process_data_begin ] start
						 */

						currentComponent = "tFlowToIterate_1";

						/**
						 * [tFlowToIterate_1 process_data_begin ] stop
						 */
						NB_ITERATE_tJava_1++;

						/**
						 * [tRunJob_3 begin ] start
						 */

						ok_Hash.put("tRunJob_3", false);
						start_Hash.put("tRunJob_3", System.currentTimeMillis());

						currentComponent = "tRunJob_3";

						int tos_count_tRunJob_3 = 0;

						class DealChildJobLibrary_tRunJob_3 {

							public String replaceJarPathsFromCrcMap(String originalClassPathLine)
									throws java.lang.Exception {
								String classPathLine = "";
								String crcMapPath = new java.io.File("../crcMap").getCanonicalPath();
								if (isNeedAddLibsPath(crcMapPath)) {
									java.util.Map<String, String> crcMap = null;
									java.io.ObjectInputStream ois = new ObjectInputStream(
											new java.io.FileInputStream(crcMapPath));
									crcMap = (java.util.Map<String, String>) ois.readObject();
									ois.close();
									classPathLine = addLibsPath(originalClassPathLine, crcMap);
								} else {
									classPathLine = originalClassPathLine;
								}
								return classPathLine;
							}

							private boolean isNeedAddLibsPath(String crcMapPath) {
								if (!(new java.io.File(crcMapPath).exists())) {// when not use cache
									return false;
								}
								return true;
							}

							private String addLibsPath(String line, java.util.Map<String, String> crcMap) {
								for (java.util.Map.Entry<String, String> entry : crcMap.entrySet()) {
									line = adaptLibPaths(line, entry);
								}
								return line;
							}

							private String adaptLibPaths(String line, java.util.Map.Entry<String, String> entry) {
								String jarName = entry.getValue();
								String crc = entry.getKey();
								String libStringFinder = "../lib/" + jarName;
								if (line.contains(libStringFinder)) {
									line = line.replace(libStringFinder, "../../../cache/lib/" + crc + "/" + jarName);
								} else if (line.contains(":$ROOT_PATH/" + jarName + ":")) {
									line = line.replace(":$ROOT_PATH/" + jarName + ":",
											":$ROOT_PATH/../../../cache/lib/" + crc + "/" + jarName + ":");
								} else if (line.contains(";" + jarName + ";")) {
									line = line.replace(";" + jarName + ";",
											";../../../cache/lib/" + crc + "/" + jarName + ";");
								}
								return line;
							}

						}
						DealChildJobLibrary_tRunJob_3 dealChildJobLibrary_tRunJob_3 = new DealChildJobLibrary_tRunJob_3();

						class JVMArgumentHelper_tRunJob_3 {

							public void addArgumentsTo(java.util.List<String> target_argument_list,
									String argument_from_child) {

								target_argument_list.add(argument_from_child);
							}

						}

						JVMArgumentHelper_tRunJob_3 jvm_argument_helper_tRunJob_3 = new JVMArgumentHelper_tRunJob_3();

						/**
						 * [tRunJob_3 begin ] stop
						 */

						/**
						 * [tRunJob_1 begin ] start
						 */

						ok_Hash.put("tRunJob_1", false);
						start_Hash.put("tRunJob_1", System.currentTimeMillis());

						currentComponent = "tRunJob_1";

						int tos_count_tRunJob_1 = 0;

						class DealChildJobLibrary_tRunJob_1 {

							public String replaceJarPathsFromCrcMap(String originalClassPathLine)
									throws java.lang.Exception {
								String classPathLine = "";
								String crcMapPath = new java.io.File("../crcMap").getCanonicalPath();
								if (isNeedAddLibsPath(crcMapPath)) {
									java.util.Map<String, String> crcMap = null;
									java.io.ObjectInputStream ois = new ObjectInputStream(
											new java.io.FileInputStream(crcMapPath));
									crcMap = (java.util.Map<String, String>) ois.readObject();
									ois.close();
									classPathLine = addLibsPath(originalClassPathLine, crcMap);
								} else {
									classPathLine = originalClassPathLine;
								}
								return classPathLine;
							}

							private boolean isNeedAddLibsPath(String crcMapPath) {
								if (!(new java.io.File(crcMapPath).exists())) {// when not use cache
									return false;
								}
								return true;
							}

							private String addLibsPath(String line, java.util.Map<String, String> crcMap) {
								for (java.util.Map.Entry<String, String> entry : crcMap.entrySet()) {
									line = adaptLibPaths(line, entry);
								}
								return line;
							}

							private String adaptLibPaths(String line, java.util.Map.Entry<String, String> entry) {
								String jarName = entry.getValue();
								String crc = entry.getKey();
								String libStringFinder = "../lib/" + jarName;
								if (line.contains(libStringFinder)) {
									line = line.replace(libStringFinder, "../../../cache/lib/" + crc + "/" + jarName);
								} else if (line.contains(":$ROOT_PATH/" + jarName + ":")) {
									line = line.replace(":$ROOT_PATH/" + jarName + ":",
											":$ROOT_PATH/../../../cache/lib/" + crc + "/" + jarName + ":");
								} else if (line.contains(";" + jarName + ";")) {
									line = line.replace(";" + jarName + ";",
											";../../../cache/lib/" + crc + "/" + jarName + ";");
								}
								return line;
							}

						}
						DealChildJobLibrary_tRunJob_1 dealChildJobLibrary_tRunJob_1 = new DealChildJobLibrary_tRunJob_1();

						class JVMArgumentHelper_tRunJob_1 {

							public void addArgumentsTo(java.util.List<String> target_argument_list,
									String argument_from_child) {

								target_argument_list.add(argument_from_child);
							}

						}

						JVMArgumentHelper_tRunJob_1 jvm_argument_helper_tRunJob_1 = new JVMArgumentHelper_tRunJob_1();

						/**
						 * [tRunJob_1 begin ] stop
						 */

						/**
						 * [tJava_1 begin ] start
						 */

						ok_Hash.put("tJava_1", false);
						start_Hash.put("tJava_1", System.currentTimeMillis());

						currentComponent = "tJava_1";

						int tos_count_tJava_1 = 0;

						System.out.println(globalMap.get("row1.fileName"));
						System.out.println(TalendDate.formatDate("yyyy-MM-dd HH:mm:ss.SSS",
								(Date) globalMap.get("row1.creationDate")));

						context.currentFileName = (String) globalMap.get("row1.fileName");
						context.currentCreationDate = TalendDate.formatDate("yyyy-MM-dd HH:mm:ss.SSS",
								(Date) globalMap.get("row1.creationDate"));

						/**
						 * [tJava_1 begin ] stop
						 */

						/**
						 * [tJava_1 main ] start
						 */

						currentComponent = "tJava_1";

						tos_count_tJava_1++;

						/**
						 * [tJava_1 main ] stop
						 */

						/**
						 * [tJava_1 process_data_begin ] start
						 */

						currentComponent = "tJava_1";

						/**
						 * [tJava_1 process_data_begin ] stop
						 */

						/**
						 * [tRunJob_1 main ] start
						 */

						currentComponent = "tRunJob_1";

						java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();

						String osName_tRunJob_1 = System.getProperty("os.name");
						if (osName_tRunJob_1 != null && osName_tRunJob_1.toLowerCase().startsWith("win")) {

							paraList_tRunJob_1.add("C:/Program Files/Java/jre-1.8/bin/java.exe");

							jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xms256M");

							jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xmx1024M");

							jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xmx4096M");

							jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Dfile.encoding=UTF-8");

							jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-cp");

							jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1,
									dealChildJobLibrary_tRunJob_1.replaceJarPathsFromCrcMap(
											"C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/workspace/DEV/poms/jobs/process/masterfile_extract_prices_check_0.13/target/classpath.jar;"));

							jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1,
									"dev.masterfile_extract_prices_check_0_13.MASTERFILE_EXTRACT_PRICES_CHECK");

							jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_pid=" + pid);

							jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--root_pid=" + rootPid);

							jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_node=tRunJob_1");

							jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--context=Default");

							jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "%*");

						} else {

							paraList_tRunJob_1.add("C:/Program Files/Java/jre-1.8/bin/java.exe");

							jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xms256M");

							jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xmx1024M");

							jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xmx4096M");

							jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Dfile.encoding=UTF-8");

							jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-cp");

							jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1,
									dealChildJobLibrary_tRunJob_1.replaceJarPathsFromCrcMap(
											"C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/workspace/DEV/poms/jobs/process/masterfile_extract_prices_check_0.13/target/classes:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/workspace/DEV/poms/jobs/process/masterfile_extract_prices_check_0.13/src/main/ext-resources:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/workspace/DEV/poms/code/routines/target/classes:.:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/talend/libraries/crypto-utils/6.0.0-SNAPSHOT/crypto-utils-6.0.0-SNAPSHOT.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/dom4j/dom4j/1.6.1/dom4j-1.6.1.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/log4j/log4j/1.2.17/log4j-1.2.17.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/talend/libraries/mssql-jdbc/6.0.0/mssql-jdbc-6.0.0.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/talend/libraries/talend_DB_mssqlUtil-1.3-20190523/6.0.0/talend_DB_mssqlUtil-1.3-20190523-6.0.0.jar:")
											.replace("$ROOT_PATH", System.getProperty("user.dir")));

							jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1,
									"dev.masterfile_extract_prices_check_0_13.MASTERFILE_EXTRACT_PRICES_CHECK");

							jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_pid=" + pid);

							jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--root_pid=" + rootPid);

							jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_node=tRunJob_1");

							jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--context=Default");

							jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "$@");

						}

						if (enableLogStash) {
							paraList_tRunJob_1.add("--monitoring=" + enableLogStash);
						}

						// for feature:10589

						paraList_tRunJob_1.add("--stat_port=" + null);

						if (resuming_logs_dir_path != null) {
							paraList_tRunJob_1.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
						}
						String childResumePath_tRunJob_1 = ResumeUtil
								.getChildJobCheckPointPath(resuming_checkpoint_path);
						String tRunJobName_tRunJob_1 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
						if ("tRunJob_1".equals(tRunJobName_tRunJob_1) && childResumePath_tRunJob_1 != null) {
							paraList_tRunJob_1.add("--resuming_checkpoint_path="
									+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
						}
						paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_1");

						java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

						context.synchronizeContext();
						class ContextProcessor_tRunJob_1 {
							private void transmitContext_0() {
								parentContextMap_tRunJob_1.put("IntegrationPath", context.IntegrationPath);
								paraList_tRunJob_1.add("--context_type " + "IntegrationPath" + "=" + "id_String");
								parentContextMap_tRunJob_1.put("LogPath", context.LogPath);
								paraList_tRunJob_1.add("--context_type " + "LogPath" + "=" + "id_String");
								parentContextMap_tRunJob_1.put("ExtractPath", context.ExtractPath);
								paraList_tRunJob_1.add("--context_type " + "ExtractPath" + "=" + "id_String");
								parentContextMap_tRunJob_1.put("ExtractPathPrice", context.ExtractPathPrice);
								paraList_tRunJob_1.add("--context_type " + "ExtractPathPrice" + "=" + "id_String");
								parentContextMap_tRunJob_1.put("currentFileName", context.currentFileName);
								paraList_tRunJob_1.add("--context_type " + "currentFileName" + "=" + "id_String");
								parentContextMap_tRunJob_1.put("currentCreationDate", context.currentCreationDate);
								paraList_tRunJob_1.add("--context_type " + "currentCreationDate" + "=" + "id_String");
								parentContextMap_tRunJob_1.put("dataBase", context.dataBase);
								paraList_tRunJob_1.add("--context_type " + "dataBase" + "=" + "id_String");
								parentContextMap_tRunJob_1.put("SQLSERVER_LOG_Schema", context.SQLSERVER_LOG_Schema);
								paraList_tRunJob_1.add("--context_type " + "SQLSERVER_LOG_Schema" + "=" + "id_String");
								parentContextMap_tRunJob_1.put("SQLSERVER_LOG_Server", context.SQLSERVER_LOG_Server);
								paraList_tRunJob_1.add("--context_type " + "SQLSERVER_LOG_Server" + "=" + "id_String");
								parentContextMap_tRunJob_1.put("SQLSERVER_LOG_AdditionalParams",
										context.SQLSERVER_LOG_AdditionalParams);
								paraList_tRunJob_1
										.add("--context_type " + "SQLSERVER_LOG_AdditionalParams" + "=" + "id_String");
								parentContextMap_tRunJob_1.put("SQLSERVER_LOG_Login", context.SQLSERVER_LOG_Login);
								paraList_tRunJob_1.add("--context_type " + "SQLSERVER_LOG_Login" + "=" + "id_String");
								parentContextMap_tRunJob_1.put("SQLSERVER_LOG_Port", context.SQLSERVER_LOG_Port);
								paraList_tRunJob_1.add("--context_type " + "SQLSERVER_LOG_Port" + "=" + "id_String");
								parentContextMap_tRunJob_1.put("SQLSERVER_LOG_Database",
										context.SQLSERVER_LOG_Database);
								paraList_tRunJob_1
										.add("--context_type " + "SQLSERVER_LOG_Database" + "=" + "id_String");
								parentContextMap_tRunJob_1.put("SQLSERVER_LOG_Password",
										context.SQLSERVER_LOG_Password);
								paraList_tRunJob_1
										.add("--context_type " + "SQLSERVER_LOG_Password" + "=" + "id_Password");
								parentContextMap_tRunJob_1.put("SQLSERVER_Schema", context.SQLSERVER_Schema);
								paraList_tRunJob_1.add("--context_type " + "SQLSERVER_Schema" + "=" + "id_String");
								parentContextMap_tRunJob_1.put("SQLSERVER_AdditionalParams",
										context.SQLSERVER_AdditionalParams);
								paraList_tRunJob_1
										.add("--context_type " + "SQLSERVER_AdditionalParams" + "=" + "id_String");
								parentContextMap_tRunJob_1.put("SQLSERVER_Server", context.SQLSERVER_Server);
								paraList_tRunJob_1.add("--context_type " + "SQLSERVER_Server" + "=" + "id_String");
								parentContextMap_tRunJob_1.put("SQLSERVER_Password", context.SQLSERVER_Password);
								paraList_tRunJob_1.add("--context_type " + "SQLSERVER_Password" + "=" + "id_Password");
								parentContextMap_tRunJob_1.put("SQLSERVER_Database", context.SQLSERVER_Database);
								paraList_tRunJob_1.add("--context_type " + "SQLSERVER_Database" + "=" + "id_String");
								parentContextMap_tRunJob_1.put("SQLSERVER_Port", context.SQLSERVER_Port);
								paraList_tRunJob_1.add("--context_type " + "SQLSERVER_Port" + "=" + "id_String");
								parentContextMap_tRunJob_1.put("SQLSERVER_Login", context.SQLSERVER_Login);
								paraList_tRunJob_1.add("--context_type " + "SQLSERVER_Login" + "=" + "id_String");
							}

							public void transmitAllContext() {
								transmitContext_0();
							}
						}
						new ContextProcessor_tRunJob_1().transmitAllContext();
						java.util.Enumeration<?> propertyNames_tRunJob_1 = context.propertyNames();
						while (propertyNames_tRunJob_1.hasMoreElements()) {
							String key_tRunJob_1 = (String) propertyNames_tRunJob_1.nextElement();
							Object value_tRunJob_1 = (Object) context.get(key_tRunJob_1);
							if (value_tRunJob_1 != null) {
								paraList_tRunJob_1.add("--context_param " + key_tRunJob_1 + "=" + value_tRunJob_1);
							} else {
								paraList_tRunJob_1.add("--context_param " + key_tRunJob_1 + "="
										+ NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
							}

						}

						Object obj_tRunJob_1 = null;

						class ConsoleHelper_tRunJob_1 {
							private Thread getNormalThread(Process process) {
								return new Thread() {
									public void run() {
										try {
											java.io.BufferedReader reader = new java.io.BufferedReader(
													new java.io.InputStreamReader(process.getInputStream()));
											String line = "";
											try {
												while ((line = reader.readLine()) != null) {
													System.out.println(line);
												}
											} finally {
												reader.close();
											}
										} catch (java.io.IOException ioe) {

											ioe.printStackTrace();
										}
									}
								};
							}

							private Thread getErrorThread(Process process, StringBuffer sb) {
								return new Thread() {
									public void run() {
										try {
											java.io.BufferedReader reader = new java.io.BufferedReader(
													new java.io.InputStreamReader(process.getErrorStream()));
											String line = "";
											try {
												while ((line = reader.readLine()) != null) {
													sb.append(line).append("\n");
												}
											} finally {
												reader.close();
											}
										} catch (java.io.IOException ioe) {

											ioe.printStackTrace();
										}
									}
								};
							}
						}
						ConsoleHelper_tRunJob_1 consoleHelper_tRunJob_1 = new ConsoleHelper_tRunJob_1();

						Runtime runtime_tRunJob_1 = Runtime.getRuntime();
						Process ps_tRunJob_1 = null;

						// 0 indicates normal termination
						int result_tRunJob_1;
						StringBuffer errorMsg_tRunJob_1 = new StringBuffer();
						try {
							ps_tRunJob_1 = runtime_tRunJob_1
									.exec((String[]) paraList_tRunJob_1.toArray(new String[paraList_tRunJob_1.size()]));

							Thread normal_tRunJob_1 = consoleHelper_tRunJob_1.getNormalThread(ps_tRunJob_1);
							normal_tRunJob_1.start();

							Thread error_tRunJob_1 = consoleHelper_tRunJob_1.getErrorThread(ps_tRunJob_1,
									errorMsg_tRunJob_1);
							error_tRunJob_1.start();

							result_tRunJob_1 = ps_tRunJob_1.waitFor();
							normal_tRunJob_1.join(10000);
							error_tRunJob_1.join(10000);
						} catch (ThreadDeath tde) {
							ps_tRunJob_1.destroy();
							throw tde;
						}

						globalMap.put("tRunJob_1_CHILD_RETURN_CODE", result_tRunJob_1);
						if (result_tRunJob_1 != 0) {
							globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE", errorMsg_tRunJob_1.toString());

							throw new RuntimeException("Child job returns " + result_tRunJob_1
									+ ". It doesn't terminate normally.\n" + errorMsg_tRunJob_1.toString());

						}

						tos_count_tRunJob_1++;

						/**
						 * [tRunJob_1 main ] stop
						 */

						/**
						 * [tRunJob_1 process_data_begin ] start
						 */

						currentComponent = "tRunJob_1";

						/**
						 * [tRunJob_1 process_data_begin ] stop
						 */

						/**
						 * [tRunJob_3 main ] start
						 */

						currentComponent = "tRunJob_3";

						java.util.List<String> paraList_tRunJob_3 = new java.util.ArrayList<String>();

						String osName_tRunJob_3 = System.getProperty("os.name");
						if (osName_tRunJob_3 != null && osName_tRunJob_3.toLowerCase().startsWith("win")) {

							paraList_tRunJob_3.add("C:/Program Files/Java/jre-1.8/bin/java.exe");

							jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "-Xms256M");

							jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "-Xmx1024M");

							jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "-Xmx4096M");

							jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "-Dfile.encoding=UTF-8");

							jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "-cp");

							jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3,
									dealChildJobLibrary_tRunJob_3.replaceJarPathsFromCrcMap(
											"C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/workspace/DEV/poms/jobs/process/masterfile_extract_prices_1_0.13/target/classpath.jar;"));

							jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3,
									"dev.masterfile_extract_prices_1_0_13.MASTERFILE_EXTRACT_PRICES_1");

							jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "--father_pid=" + pid);

							jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "--root_pid=" + rootPid);

							jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "--father_node=tRunJob_3");

							jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "--context=Default");

							jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "%*");

						} else {

							paraList_tRunJob_3.add("C:/Program Files/Java/jre-1.8/bin/java.exe");

							jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "-Xms256M");

							jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "-Xmx1024M");

							jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "-Xmx4096M");

							jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "-Dfile.encoding=UTF-8");

							jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "-cp");

							jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3,
									dealChildJobLibrary_tRunJob_3.replaceJarPathsFromCrcMap(
											"C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/workspace/DEV/poms/jobs/process/masterfile_extract_prices_1_0.13/target/classes:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/workspace/DEV/poms/jobs/process/masterfile_extract_prices_1_0.13/src/main/ext-resources:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/workspace/DEV/poms/code/routines/target/classes:.:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/talend/libraries/advancedPersistentLookupLib-1.2/6.0.0/advancedPersistentLookupLib-1.2-6.0.0.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/commons-collections/commons-collections/3.2.2/commons-collections-3.2.2.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/talend/libraries/crypto-utils/6.0.0-SNAPSHOT/crypto-utils-6.0.0-SNAPSHOT.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/dom4j/dom4j/1.6.1/dom4j-1.6.1.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/talend/libraries/jboss-serialization/6.0.0/jboss-serialization-6.0.0.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/log4j/log4j/1.2.17/log4j-1.2.17.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/talend/libraries/mssql-jdbc/6.0.0/mssql-jdbc-6.0.0.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/talend/libraries/talend_DB_mssqlUtil-1.3-20190523/6.0.0/talend_DB_mssqlUtil-1.3-20190523-6.0.0.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/talend/libraries/talend_file_enhanced_20070724/6.0.0/talend_file_enhanced_20070724-6.0.0.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/talend/libraries/talendcsv/6.0.0/talendcsv-6.0.0.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/talend/components/lib/thashfile/3.1-20190910/thashfile-3.1-20190910.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/talend/libraries/trove/6.0.0/trove-6.0.0.jar:")
											.replace("$ROOT_PATH", System.getProperty("user.dir")));

							jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3,
									"dev.masterfile_extract_prices_1_0_13.MASTERFILE_EXTRACT_PRICES_1");

							jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "--father_pid=" + pid);

							jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "--root_pid=" + rootPid);

							jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "--father_node=tRunJob_3");

							jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "--context=Default");

							jvm_argument_helper_tRunJob_3.addArgumentsTo(paraList_tRunJob_3, "$@");

						}

						if (enableLogStash) {
							paraList_tRunJob_3.add("--monitoring=" + enableLogStash);
						}

						// for feature:10589

						paraList_tRunJob_3.add("--stat_port=" + null);

						if (resuming_logs_dir_path != null) {
							paraList_tRunJob_3.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
						}
						String childResumePath_tRunJob_3 = ResumeUtil
								.getChildJobCheckPointPath(resuming_checkpoint_path);
						String tRunJobName_tRunJob_3 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
						if ("tRunJob_3".equals(tRunJobName_tRunJob_3) && childResumePath_tRunJob_3 != null) {
							paraList_tRunJob_3.add("--resuming_checkpoint_path="
									+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
						}
						paraList_tRunJob_3.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_3");

						java.util.Map<String, Object> parentContextMap_tRunJob_3 = new java.util.HashMap<String, Object>();

						context.synchronizeContext();
						class ContextProcessor_tRunJob_3 {
							private void transmitContext_0() {
								parentContextMap_tRunJob_3.put("IntegrationPath", context.IntegrationPath);
								paraList_tRunJob_3.add("--context_type " + "IntegrationPath" + "=" + "id_String");
								parentContextMap_tRunJob_3.put("LogPath", context.LogPath);
								paraList_tRunJob_3.add("--context_type " + "LogPath" + "=" + "id_String");
								parentContextMap_tRunJob_3.put("ExtractPath", context.ExtractPath);
								paraList_tRunJob_3.add("--context_type " + "ExtractPath" + "=" + "id_String");
								parentContextMap_tRunJob_3.put("ExtractPathPrice", context.ExtractPathPrice);
								paraList_tRunJob_3.add("--context_type " + "ExtractPathPrice" + "=" + "id_String");
								parentContextMap_tRunJob_3.put("currentFileName", context.currentFileName);
								paraList_tRunJob_3.add("--context_type " + "currentFileName" + "=" + "id_String");
								parentContextMap_tRunJob_3.put("currentCreationDate", context.currentCreationDate);
								paraList_tRunJob_3.add("--context_type " + "currentCreationDate" + "=" + "id_String");
								parentContextMap_tRunJob_3.put("dataBase", context.dataBase);
								paraList_tRunJob_3.add("--context_type " + "dataBase" + "=" + "id_String");
								parentContextMap_tRunJob_3.put("SQLSERVER_LOG_Schema", context.SQLSERVER_LOG_Schema);
								paraList_tRunJob_3.add("--context_type " + "SQLSERVER_LOG_Schema" + "=" + "id_String");
								parentContextMap_tRunJob_3.put("SQLSERVER_LOG_Server", context.SQLSERVER_LOG_Server);
								paraList_tRunJob_3.add("--context_type " + "SQLSERVER_LOG_Server" + "=" + "id_String");
								parentContextMap_tRunJob_3.put("SQLSERVER_LOG_AdditionalParams",
										context.SQLSERVER_LOG_AdditionalParams);
								paraList_tRunJob_3
										.add("--context_type " + "SQLSERVER_LOG_AdditionalParams" + "=" + "id_String");
								parentContextMap_tRunJob_3.put("SQLSERVER_LOG_Login", context.SQLSERVER_LOG_Login);
								paraList_tRunJob_3.add("--context_type " + "SQLSERVER_LOG_Login" + "=" + "id_String");
								parentContextMap_tRunJob_3.put("SQLSERVER_LOG_Port", context.SQLSERVER_LOG_Port);
								paraList_tRunJob_3.add("--context_type " + "SQLSERVER_LOG_Port" + "=" + "id_String");
								parentContextMap_tRunJob_3.put("SQLSERVER_LOG_Database",
										context.SQLSERVER_LOG_Database);
								paraList_tRunJob_3
										.add("--context_type " + "SQLSERVER_LOG_Database" + "=" + "id_String");
								parentContextMap_tRunJob_3.put("SQLSERVER_LOG_Password",
										context.SQLSERVER_LOG_Password);
								paraList_tRunJob_3
										.add("--context_type " + "SQLSERVER_LOG_Password" + "=" + "id_Password");
								parentContextMap_tRunJob_3.put("SQLSERVER_Schema", context.SQLSERVER_Schema);
								paraList_tRunJob_3.add("--context_type " + "SQLSERVER_Schema" + "=" + "id_String");
								parentContextMap_tRunJob_3.put("SQLSERVER_AdditionalParams",
										context.SQLSERVER_AdditionalParams);
								paraList_tRunJob_3
										.add("--context_type " + "SQLSERVER_AdditionalParams" + "=" + "id_String");
								parentContextMap_tRunJob_3.put("SQLSERVER_Server", context.SQLSERVER_Server);
								paraList_tRunJob_3.add("--context_type " + "SQLSERVER_Server" + "=" + "id_String");
								parentContextMap_tRunJob_3.put("SQLSERVER_Password", context.SQLSERVER_Password);
								paraList_tRunJob_3.add("--context_type " + "SQLSERVER_Password" + "=" + "id_Password");
								parentContextMap_tRunJob_3.put("SQLSERVER_Database", context.SQLSERVER_Database);
								paraList_tRunJob_3.add("--context_type " + "SQLSERVER_Database" + "=" + "id_String");
								parentContextMap_tRunJob_3.put("SQLSERVER_Port", context.SQLSERVER_Port);
								paraList_tRunJob_3.add("--context_type " + "SQLSERVER_Port" + "=" + "id_String");
								parentContextMap_tRunJob_3.put("SQLSERVER_Login", context.SQLSERVER_Login);
								paraList_tRunJob_3.add("--context_type " + "SQLSERVER_Login" + "=" + "id_String");
							}

							public void transmitAllContext() {
								transmitContext_0();
							}
						}
						new ContextProcessor_tRunJob_3().transmitAllContext();
						java.util.Enumeration<?> propertyNames_tRunJob_3 = context.propertyNames();
						while (propertyNames_tRunJob_3.hasMoreElements()) {
							String key_tRunJob_3 = (String) propertyNames_tRunJob_3.nextElement();
							Object value_tRunJob_3 = (Object) context.get(key_tRunJob_3);
							if (value_tRunJob_3 != null) {
								paraList_tRunJob_3.add("--context_param " + key_tRunJob_3 + "=" + value_tRunJob_3);
							} else {
								paraList_tRunJob_3.add("--context_param " + key_tRunJob_3 + "="
										+ NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
							}

						}

						Object obj_tRunJob_3 = null;

						obj_tRunJob_3 = context.IntegrationPath;
						if (obj_tRunJob_3 != null) {
							paraList_tRunJob_3.add("--context_param IntegrationExcelPath="
									+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
						} else {
							paraList_tRunJob_3.add("--context_param IntegrationExcelPath="
									+ NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
						}

						parentContextMap_tRunJob_3.put("IntegrationExcelPath", obj_tRunJob_3);

						obj_tRunJob_3 = context.currentFileName;
						if (obj_tRunJob_3 != null) {
							paraList_tRunJob_3.add("--context_param ExcelFileName="
									+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
						} else {
							paraList_tRunJob_3.add("--context_param ExcelFileName="
									+ NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
						}

						parentContextMap_tRunJob_3.put("ExcelFileName", obj_tRunJob_3);

						obj_tRunJob_3 = context.LogPath;
						if (obj_tRunJob_3 != null) {
							paraList_tRunJob_3.add(
									"--context_param LogPath=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
						} else {
							paraList_tRunJob_3.add("--context_param LogPath="
									+ NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
						}

						parentContextMap_tRunJob_3.put("LogPath", obj_tRunJob_3);

						obj_tRunJob_3 = context.ExtractPath;
						if (obj_tRunJob_3 != null) {
							paraList_tRunJob_3.add(
									"--context_param ExtractPath=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
						} else {
							paraList_tRunJob_3.add("--context_param ExtractPath="
									+ NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
						}

						parentContextMap_tRunJob_3.put("ExtractPath", obj_tRunJob_3);

						obj_tRunJob_3 = context.ExtractPathPrice;
						if (obj_tRunJob_3 != null) {
							paraList_tRunJob_3.add("--context_param ExtractPathPrice="
									+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
						} else {
							paraList_tRunJob_3.add("--context_param ExtractPathPrice="
									+ NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
						}

						parentContextMap_tRunJob_3.put("ExtractPathPrice", obj_tRunJob_3);

						obj_tRunJob_3 = context.LogPath + ((String) globalMap.get("LogFile"));
						if (obj_tRunJob_3 != null) {
							paraList_tRunJob_3.add(
									"--context_param errorFile=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
						} else {
							paraList_tRunJob_3.add("--context_param errorFile="
									+ NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
						}

						parentContextMap_tRunJob_3.put("errorFile", obj_tRunJob_3);

						obj_tRunJob_3 = context.currentCreationDate;
						if (obj_tRunJob_3 != null) {
							paraList_tRunJob_3.add("--context_param CreationDate="
									+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
						} else {
							paraList_tRunJob_3.add("--context_param CreationDate="
									+ NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
						}

						parentContextMap_tRunJob_3.put("CreationDate", obj_tRunJob_3);

						class ConsoleHelper_tRunJob_3 {
							private Thread getNormalThread(Process process) {
								return new Thread() {
									public void run() {
										try {
											java.io.BufferedReader reader = new java.io.BufferedReader(
													new java.io.InputStreamReader(process.getInputStream()));
											String line = "";
											try {
												while ((line = reader.readLine()) != null) {
													System.out.println(line);
												}
											} finally {
												reader.close();
											}
										} catch (java.io.IOException ioe) {

											ioe.printStackTrace();
										}
									}
								};
							}

							private Thread getErrorThread(Process process, StringBuffer sb) {
								return new Thread() {
									public void run() {
										try {
											java.io.BufferedReader reader = new java.io.BufferedReader(
													new java.io.InputStreamReader(process.getErrorStream()));
											String line = "";
											try {
												while ((line = reader.readLine()) != null) {
													sb.append(line).append("\n");
												}
											} finally {
												reader.close();
											}
										} catch (java.io.IOException ioe) {

											ioe.printStackTrace();
										}
									}
								};
							}
						}
						ConsoleHelper_tRunJob_3 consoleHelper_tRunJob_3 = new ConsoleHelper_tRunJob_3();

						Runtime runtime_tRunJob_3 = Runtime.getRuntime();
						Process ps_tRunJob_3 = null;

						// 0 indicates normal termination
						int result_tRunJob_3;
						StringBuffer errorMsg_tRunJob_3 = new StringBuffer();
						try {
							ps_tRunJob_3 = runtime_tRunJob_3
									.exec((String[]) paraList_tRunJob_3.toArray(new String[paraList_tRunJob_3.size()]));

							Thread normal_tRunJob_3 = consoleHelper_tRunJob_3.getNormalThread(ps_tRunJob_3);
							normal_tRunJob_3.start();

							Thread error_tRunJob_3 = consoleHelper_tRunJob_3.getErrorThread(ps_tRunJob_3,
									errorMsg_tRunJob_3);
							error_tRunJob_3.start();

							result_tRunJob_3 = ps_tRunJob_3.waitFor();
							normal_tRunJob_3.join(10000);
							error_tRunJob_3.join(10000);
						} catch (ThreadDeath tde) {
							ps_tRunJob_3.destroy();
							throw tde;
						}

						globalMap.put("tRunJob_3_CHILD_RETURN_CODE", result_tRunJob_3);
						if (result_tRunJob_3 != 0) {
							globalMap.put("tRunJob_3_CHILD_EXCEPTION_STACKTRACE", errorMsg_tRunJob_3.toString());

							throw new RuntimeException("Child job returns " + result_tRunJob_3
									+ ". It doesn't terminate normally.\n" + errorMsg_tRunJob_3.toString());

						}

						tos_count_tRunJob_3++;

						/**
						 * [tRunJob_3 main ] stop
						 */

						/**
						 * [tRunJob_3 process_data_begin ] start
						 */

						currentComponent = "tRunJob_3";

						/**
						 * [tRunJob_3 process_data_begin ] stop
						 */

						/**
						 * [tRunJob_3 process_data_end ] start
						 */

						currentComponent = "tRunJob_3";

						/**
						 * [tRunJob_3 process_data_end ] stop
						 */

						/**
						 * [tRunJob_1 process_data_end ] start
						 */

						currentComponent = "tRunJob_1";

						/**
						 * [tRunJob_1 process_data_end ] stop
						 */

						/**
						 * [tJava_1 process_data_end ] start
						 */

						currentComponent = "tJava_1";

						/**
						 * [tJava_1 process_data_end ] stop
						 */

						/**
						 * [tJava_1 end ] start
						 */

						currentComponent = "tJava_1";

						ok_Hash.put("tJava_1", true);
						end_Hash.put("tJava_1", System.currentTimeMillis());

						/**
						 * [tJava_1 end ] stop
						 */

						/**
						 * [tRunJob_1 end ] start
						 */

						currentComponent = "tRunJob_1";

						ok_Hash.put("tRunJob_1", true);
						end_Hash.put("tRunJob_1", System.currentTimeMillis());

						/**
						 * [tRunJob_1 end ] stop
						 */

						/**
						 * [tRunJob_3 end ] start
						 */

						currentComponent = "tRunJob_3";

						ok_Hash.put("tRunJob_3", true);
						end_Hash.put("tRunJob_3", System.currentTimeMillis());

						tWarn_5Process(globalMap);

						/**
						 * [tRunJob_3 end ] stop
						 */

						/**
						 * [tFlowToIterate_1 process_data_end ] start
						 */

						currentComponent = "tFlowToIterate_1";

						/**
						 * [tFlowToIterate_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 process_data_end ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 end ] start
						 */

						currentComponent = "tDBInput_1";

					}
				} finally {
					if (rs_tDBInput_1 != null) {
						rs_tDBInput_1.close();
					}
					if (stmt_tDBInput_1 != null) {
						stmt_tDBInput_1.close();
					}
					if (conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {

						conn_tDBInput_1.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_1_NB_LINE", nb_line_tDBInput_1);

				ok_Hash.put("tDBInput_1", true);
				end_Hash.put("tDBInput_1", System.currentTimeMillis());

				tWarn_8Process(globalMap);

				/**
				 * [tDBInput_1 end ] stop
				 */

				/**
				 * [tFlowToIterate_1 end ] start
				 */

				currentComponent = "tFlowToIterate_1";

				globalMap.put("tFlowToIterate_1_NB_LINE", nb_line_tFlowToIterate_1);

				ok_Hash.put("tFlowToIterate_1", true);
				end_Hash.put("tFlowToIterate_1", System.currentTimeMillis());

				/**
				 * [tFlowToIterate_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_1 finally ] start
				 */

				currentComponent = "tDBInput_1";

				/**
				 * [tDBInput_1 finally ] stop
				 */

				/**
				 * [tFlowToIterate_1 finally ] start
				 */

				currentComponent = "tFlowToIterate_1";

				/**
				 * [tFlowToIterate_1 finally ] stop
				 */

				/**
				 * [tJava_1 finally ] start
				 */

				currentComponent = "tJava_1";

				/**
				 * [tJava_1 finally ] stop
				 */

				/**
				 * [tRunJob_1 finally ] start
				 */

				currentComponent = "tRunJob_1";

				/**
				 * [tRunJob_1 finally ] stop
				 */

				/**
				 * [tRunJob_3 finally ] start
				 */

				currentComponent = "tRunJob_3";

				/**
				 * [tRunJob_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}

	public void tWarn_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tWarn_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tWarn_5 begin ] start
				 */

				ok_Hash.put("tWarn_5", false);
				start_Hash.put("tWarn_5", System.currentTimeMillis());

				currentComponent = "tWarn_5";

				int tos_count_tWarn_5 = 0;

				/**
				 * [tWarn_5 begin ] stop
				 */

				/**
				 * [tWarn_5 main ] start
				 */

				currentComponent = "tWarn_5";

				try {

					resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_5", "", Thread.currentThread().getId() + "", "INFO",
							"", "Extract Price OK", "", "");
					talendLogs_LOGS.addMessage("tWarn", "tWarn_5", 3, "Extract Price OK", 3);
					talendLogs_LOGSProcess(globalMap);
					globalMap.put("tWarn_5_WARN_MESSAGES", "Extract Price OK");
					globalMap.put("tWarn_5_WARN_PRIORITY", 3);
					globalMap.put("tWarn_5_WARN_CODE", 3);

				} catch (Exception e_tWarn_5) {
					logIgnoredError(
							String.format("tWarn_5 - tWarn failed to log message due to internal error: %s", e_tWarn_5),
							e_tWarn_5);
				}

				tos_count_tWarn_5++;

				/**
				 * [tWarn_5 main ] stop
				 */

				/**
				 * [tWarn_5 process_data_begin ] start
				 */

				currentComponent = "tWarn_5";

				/**
				 * [tWarn_5 process_data_begin ] stop
				 */

				/**
				 * [tWarn_5 process_data_end ] start
				 */

				currentComponent = "tWarn_5";

				/**
				 * [tWarn_5 process_data_end ] stop
				 */

				/**
				 * [tWarn_5 end ] start
				 */

				currentComponent = "tWarn_5";

				ok_Hash.put("tWarn_5", true);
				end_Hash.put("tWarn_5", System.currentTimeMillis());

				tDBConnection_1Process(globalMap);

				/**
				 * [tWarn_5 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tWarn_5 finally ] start
				 */

				currentComponent = "tWarn_5";

				/**
				 * [tWarn_5 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tWarn_5_SUBPROCESS_STATE", 1);
	}

	public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBConnection_1 begin ] start
				 */

				ok_Hash.put("tDBConnection_1", false);
				start_Hash.put("tDBConnection_1", System.currentTimeMillis());

				currentComponent = "tDBConnection_1";

				int tos_count_tDBConnection_1 = 0;

				String url_tDBConnection_1 = "jdbc:sqlserver://" + context.SQLSERVER_Server;
				String port_tDBConnection_1 = context.SQLSERVER_Port;
				String dbname_tDBConnection_1 = context.SQLSERVER_Database;
				if (!"".equals(port_tDBConnection_1)) {
					url_tDBConnection_1 += ":" + context.SQLSERVER_Port;
				}
				if (!"".equals(dbname_tDBConnection_1)) {

					url_tDBConnection_1 += ";databaseName=" + context.SQLSERVER_Database;
				}
				url_tDBConnection_1 += ";appName=" + projectName + ";" + context.SQLSERVER_AdditionalParams;
				String dbUser_tDBConnection_1 = context.SQLSERVER_Login;

				final String decryptedPassword_tDBConnection_1 = context.SQLSERVER_Password;
				String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;

				java.sql.Connection conn_tDBConnection_1 = null;

				String driverClass_tDBConnection_1 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
				java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
				globalMap.put("driverClass_tDBConnection_1", driverClass_tDBConnection_1);

				conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1, dbUser_tDBConnection_1,
						dbPwd_tDBConnection_1);

				globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
				if (null != conn_tDBConnection_1) {

					conn_tDBConnection_1.setAutoCommit(false);
				}

				globalMap.put("dbschema_tDBConnection_1", context.SQLSERVER_Schema);

				globalMap.put("db_tDBConnection_1", context.SQLSERVER_Database);

				globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);

				globalMap.put("shareIdentitySetting_tDBConnection_1", false);

				/**
				 * [tDBConnection_1 begin ] stop
				 */

				/**
				 * [tDBConnection_1 main ] start
				 */

				currentComponent = "tDBConnection_1";

				tos_count_tDBConnection_1++;

				/**
				 * [tDBConnection_1 main ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_begin ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_begin ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_end ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_end ] stop
				 */

				/**
				 * [tDBConnection_1 end ] start
				 */

				currentComponent = "tDBConnection_1";

				ok_Hash.put("tDBConnection_1", true);
				end_Hash.put("tDBConnection_1", System.currentTimeMillis());

				/**
				 * [tDBConnection_1 end ] stop
				 */
			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBConnection_1:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			tDBRow_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDBConnection_1 finally ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}

	public void tDBRow_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBRow_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBRow_1 begin ] start
				 */

				ok_Hash.put("tDBRow_1", false);
				start_Hash.put("tDBRow_1", System.currentTimeMillis());

				currentComponent = "tDBRow_1";

				int tos_count_tDBRow_1 = 0;

				java.sql.Connection conn_tDBRow_1 = null;
				String query_tDBRow_1 = "";
				boolean whetherReject_tDBRow_1 = false;
				conn_tDBRow_1 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				resourceMap.put("conn_tDBRow_1", conn_tDBRow_1);
				java.sql.Statement stmt_tDBRow_1 = conn_tDBRow_1.createStatement();
				resourceMap.put("stmt_tDBRow_1", stmt_tDBRow_1);

				/**
				 * [tDBRow_1 begin ] stop
				 */

				/**
				 * [tDBRow_1 main ] start
				 */

				currentComponent = "tDBRow_1";

				query_tDBRow_1 = "\nupdate a\nset a.priceExtractDate = (getdate() at time zone 'UTC') AT TIME ZONE 'Central Europe Standard Time'\nfrom ["
						+ "masterfile].[Products] as a\ninner join [data].D365_Labels c on a.LBL = c.LABELCODE\ninner join [data].[D365_ReleasedPro"
						+ "ductVariantsV2] b on b.itemnumber = a.STYLE and b.productcolorid = a.COLOR and b.productsizeid = a.SIZE and b.productsty"
						+ "leid = c.LABELD365\nwhere a.fileName = " + "'" + context.currentFileName + "'"
						+ " and a.creationDate = " + "'" + context.currentCreationDate + "'";
				whetherReject_tDBRow_1 = false;
				globalMap.put("tDBRow_1_QUERY", query_tDBRow_1);
				try {
					stmt_tDBRow_1.execute(query_tDBRow_1);

				} catch (java.lang.Exception e) {
					whetherReject_tDBRow_1 = true;

					System.err.print(e.getMessage());

				}

				if (!whetherReject_tDBRow_1) {

				}

				tos_count_tDBRow_1++;

				/**
				 * [tDBRow_1 main ] stop
				 */

				/**
				 * [tDBRow_1 process_data_begin ] start
				 */

				currentComponent = "tDBRow_1";

				/**
				 * [tDBRow_1 process_data_begin ] stop
				 */

				/**
				 * [tDBRow_1 process_data_end ] start
				 */

				currentComponent = "tDBRow_1";

				/**
				 * [tDBRow_1 process_data_end ] stop
				 */

				/**
				 * [tDBRow_1 end ] start
				 */

				currentComponent = "tDBRow_1";

				stmt_tDBRow_1.close();
				resourceMap.remove("stmt_tDBRow_1");
				resourceMap.put("statementClosed_tDBRow_1", true);
				resourceMap.put("finish_tDBRow_1", true);

				ok_Hash.put("tDBRow_1", true);
				end_Hash.put("tDBRow_1", System.currentTimeMillis());

				tWarn_7Process(globalMap);

				/**
				 * [tDBRow_1 end ] stop
				 */
			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBRow_1:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			tDBCommit_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDBRow_1 finally ] start
				 */

				currentComponent = "tDBRow_1";

				if (resourceMap.get("statementClosed_tDBRow_1") == null) {
					java.sql.Statement stmtToClose_tDBRow_1 = null;
					if ((stmtToClose_tDBRow_1 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_1")) != null) {
						stmtToClose_tDBRow_1.close();
					}
				}

				/**
				 * [tDBRow_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRow_1_SUBPROCESS_STATE", 1);
	}

	public void tWarn_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tWarn_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tWarn_7 begin ] start
				 */

				ok_Hash.put("tWarn_7", false);
				start_Hash.put("tWarn_7", System.currentTimeMillis());

				currentComponent = "tWarn_7";

				int tos_count_tWarn_7 = 0;

				/**
				 * [tWarn_7 begin ] stop
				 */

				/**
				 * [tWarn_7 main ] start
				 */

				currentComponent = "tWarn_7";

				try {

					resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_7", "", Thread.currentThread().getId() + "", "INFO",
							"", "Job en succès", "", "");
					talendLogs_LOGS.addMessage("tWarn", "tWarn_7", 3, "Job en succès", 3);
					talendLogs_LOGSProcess(globalMap);
					globalMap.put("tWarn_7_WARN_MESSAGES", "Job en succès");
					globalMap.put("tWarn_7_WARN_PRIORITY", 3);
					globalMap.put("tWarn_7_WARN_CODE", 3);

				} catch (Exception e_tWarn_7) {
					logIgnoredError(
							String.format("tWarn_7 - tWarn failed to log message due to internal error: %s", e_tWarn_7),
							e_tWarn_7);
				}

				tos_count_tWarn_7++;

				/**
				 * [tWarn_7 main ] stop
				 */

				/**
				 * [tWarn_7 process_data_begin ] start
				 */

				currentComponent = "tWarn_7";

				/**
				 * [tWarn_7 process_data_begin ] stop
				 */

				/**
				 * [tWarn_7 process_data_end ] start
				 */

				currentComponent = "tWarn_7";

				/**
				 * [tWarn_7 process_data_end ] stop
				 */

				/**
				 * [tWarn_7 end ] start
				 */

				currentComponent = "tWarn_7";

				ok_Hash.put("tWarn_7", true);
				end_Hash.put("tWarn_7", System.currentTimeMillis());

				/**
				 * [tWarn_7 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tWarn_7 finally ] start
				 */

				currentComponent = "tWarn_7";

				/**
				 * [tWarn_7 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tWarn_7_SUBPROCESS_STATE", 1);
	}

	public void tDBCommit_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBCommit_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBCommit_1 begin ] start
				 */

				ok_Hash.put("tDBCommit_1", false);
				start_Hash.put("tDBCommit_1", System.currentTimeMillis());

				currentComponent = "tDBCommit_1";

				int tos_count_tDBCommit_1 = 0;

				/**
				 * [tDBCommit_1 begin ] stop
				 */

				/**
				 * [tDBCommit_1 main ] start
				 */

				currentComponent = "tDBCommit_1";

				java.sql.Connection conn_tDBCommit_1 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");
				if (conn_tDBCommit_1 != null && !conn_tDBCommit_1.isClosed()) {

					try {

						conn_tDBCommit_1.commit();

					} finally {

						conn_tDBCommit_1.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_tDBConnection_1"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}

				tos_count_tDBCommit_1++;

				/**
				 * [tDBCommit_1 main ] stop
				 */

				/**
				 * [tDBCommit_1 process_data_begin ] start
				 */

				currentComponent = "tDBCommit_1";

				/**
				 * [tDBCommit_1 process_data_begin ] stop
				 */

				/**
				 * [tDBCommit_1 process_data_end ] start
				 */

				currentComponent = "tDBCommit_1";

				/**
				 * [tDBCommit_1 process_data_end ] stop
				 */

				/**
				 * [tDBCommit_1 end ] start
				 */

				currentComponent = "tDBCommit_1";

				ok_Hash.put("tDBCommit_1", true);
				end_Hash.put("tDBCommit_1", System.currentTimeMillis());

				/**
				 * [tDBCommit_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDBCommit_1 finally ] start
				 */

				currentComponent = "tDBCommit_1";

				/**
				 * [tDBCommit_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBCommit_1_SUBPROCESS_STATE", 1);
	}

	public void tWarn_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tWarn_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tWarn_8 begin ] start
				 */

				ok_Hash.put("tWarn_8", false);
				start_Hash.put("tWarn_8", System.currentTimeMillis());

				currentComponent = "tWarn_8";

				int tos_count_tWarn_8 = 0;

				/**
				 * [tWarn_8 begin ] stop
				 */

				/**
				 * [tWarn_8 main ] start
				 */

				currentComponent = "tWarn_8";

				try {

					resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_8", "", Thread.currentThread().getId() + "", "INFO",
							"", "Nb masterfile file treated : " + ((Integer) globalMap.get("tDBInput_1_NB_LINE")), "",
							"");
					talendLogs_LOGS.addMessage("tWarn", "tWarn_8", 3,
							"Nb masterfile file treated : " + ((Integer) globalMap.get("tDBInput_1_NB_LINE")), 3);
					talendLogs_LOGSProcess(globalMap);
					globalMap.put("tWarn_8_WARN_MESSAGES",
							"Nb masterfile file treated : " + ((Integer) globalMap.get("tDBInput_1_NB_LINE")));
					globalMap.put("tWarn_8_WARN_PRIORITY", 3);
					globalMap.put("tWarn_8_WARN_CODE", 3);

				} catch (Exception e_tWarn_8) {
					logIgnoredError(
							String.format("tWarn_8 - tWarn failed to log message due to internal error: %s", e_tWarn_8),
							e_tWarn_8);
				}

				tos_count_tWarn_8++;

				/**
				 * [tWarn_8 main ] stop
				 */

				/**
				 * [tWarn_8 process_data_begin ] start
				 */

				currentComponent = "tWarn_8";

				/**
				 * [tWarn_8 process_data_begin ] stop
				 */

				/**
				 * [tWarn_8 process_data_end ] start
				 */

				currentComponent = "tWarn_8";

				/**
				 * [tWarn_8 process_data_end ] stop
				 */

				/**
				 * [tWarn_8 end ] start
				 */

				currentComponent = "tWarn_8";

				ok_Hash.put("tWarn_8", true);
				end_Hash.put("tWarn_8", System.currentTimeMillis());

				if (((Integer) globalMap.get("tDBInput_1_NB_LINE")) == 0) {

					tWarn_9Process(globalMap);
				}

				/**
				 * [tWarn_8 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tWarn_8 finally ] start
				 */

				currentComponent = "tWarn_8";

				/**
				 * [tWarn_8 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tWarn_8_SUBPROCESS_STATE", 1);
	}

	public void tWarn_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tWarn_9_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tWarn_9 begin ] start
				 */

				ok_Hash.put("tWarn_9", false);
				start_Hash.put("tWarn_9", System.currentTimeMillis());

				currentComponent = "tWarn_9";

				int tos_count_tWarn_9 = 0;

				/**
				 * [tWarn_9 begin ] stop
				 */

				/**
				 * [tWarn_9 main ] start
				 */

				currentComponent = "tWarn_9";

				try {

					resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_9", "", Thread.currentThread().getId() + "", "INFO",
							"", "Job en succès", "", "");
					talendLogs_LOGS.addMessage("tWarn", "tWarn_9", 3, "Job en succès", 3);
					talendLogs_LOGSProcess(globalMap);
					globalMap.put("tWarn_9_WARN_MESSAGES", "Job en succès");
					globalMap.put("tWarn_9_WARN_PRIORITY", 3);
					globalMap.put("tWarn_9_WARN_CODE", 3);

				} catch (Exception e_tWarn_9) {
					logIgnoredError(
							String.format("tWarn_9 - tWarn failed to log message due to internal error: %s", e_tWarn_9),
							e_tWarn_9);
				}

				tos_count_tWarn_9++;

				/**
				 * [tWarn_9 main ] stop
				 */

				/**
				 * [tWarn_9 process_data_begin ] start
				 */

				currentComponent = "tWarn_9";

				/**
				 * [tWarn_9 process_data_begin ] stop
				 */

				/**
				 * [tWarn_9 process_data_end ] start
				 */

				currentComponent = "tWarn_9";

				/**
				 * [tWarn_9 process_data_end ] stop
				 */

				/**
				 * [tWarn_9 end ] start
				 */

				currentComponent = "tWarn_9";

				ok_Hash.put("tWarn_9", true);
				end_Hash.put("tWarn_9", System.currentTimeMillis());

				/**
				 * [tWarn_9 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tWarn_9 finally ] start
				 */

				currentComponent = "tWarn_9";

				/**
				 * [tWarn_9 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tWarn_9_SUBPROCESS_STATE", 1);
	}

	public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPostjob_1 begin ] start
				 */

				ok_Hash.put("tPostjob_1", false);
				start_Hash.put("tPostjob_1", System.currentTimeMillis());

				currentComponent = "tPostjob_1";

				int tos_count_tPostjob_1 = 0;

				/**
				 * [tPostjob_1 begin ] stop
				 */

				/**
				 * [tPostjob_1 main ] start
				 */

				currentComponent = "tPostjob_1";

				tos_count_tPostjob_1++;

				/**
				 * [tPostjob_1 main ] stop
				 */

				/**
				 * [tPostjob_1 process_data_begin ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 process_data_begin ] stop
				 */

				/**
				 * [tPostjob_1 process_data_end ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 process_data_end ] stop
				 */

				/**
				 * [tPostjob_1 end ] start
				 */

				currentComponent = "tPostjob_1";

				ok_Hash.put("tPostjob_1", true);
				end_Hash.put("tPostjob_1", System.currentTimeMillis());

				/**
				 * [tPostjob_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPostjob_1 finally ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}

	public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPrejob_1 begin ] start
				 */

				ok_Hash.put("tPrejob_1", false);
				start_Hash.put("tPrejob_1", System.currentTimeMillis());

				currentComponent = "tPrejob_1";

				int tos_count_tPrejob_1 = 0;

				/**
				 * [tPrejob_1 begin ] stop
				 */

				/**
				 * [tPrejob_1 main ] start
				 */

				currentComponent = "tPrejob_1";

				tos_count_tPrejob_1++;

				/**
				 * [tPrejob_1 main ] stop
				 */

				/**
				 * [tPrejob_1 process_data_begin ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_begin ] stop
				 */

				/**
				 * [tPrejob_1 process_data_end ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_end ] stop
				 */

				/**
				 * [tPrejob_1 end ] start
				 */

				currentComponent = "tPrejob_1";

				ok_Hash.put("tPrejob_1", true);
				end_Hash.put("tPrejob_1", System.currentTimeMillis());

				tWarn_6Process(globalMap);

				/**
				 * [tPrejob_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPrejob_1 finally ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}

	public void tWarn_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tWarn_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tWarn_6 begin ] start
				 */

				ok_Hash.put("tWarn_6", false);
				start_Hash.put("tWarn_6", System.currentTimeMillis());

				currentComponent = "tWarn_6";

				int tos_count_tWarn_6 = 0;

				/**
				 * [tWarn_6 begin ] stop
				 */

				/**
				 * [tWarn_6 main ] start
				 */

				currentComponent = "tWarn_6";

				try {

					resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_6", "", Thread.currentThread().getId() + "", "INFO",
							"", "Start job", "", "");
					talendLogs_LOGS.addMessage("tWarn", "tWarn_6", 3, "Start job", 3);
					talendLogs_LOGSProcess(globalMap);
					globalMap.put("tWarn_6_WARN_MESSAGES", "Start job");
					globalMap.put("tWarn_6_WARN_PRIORITY", 3);
					globalMap.put("tWarn_6_WARN_CODE", 3);

				} catch (Exception e_tWarn_6) {
					logIgnoredError(
							String.format("tWarn_6 - tWarn failed to log message due to internal error: %s", e_tWarn_6),
							e_tWarn_6);
				}

				tos_count_tWarn_6++;

				/**
				 * [tWarn_6 main ] stop
				 */

				/**
				 * [tWarn_6 process_data_begin ] start
				 */

				currentComponent = "tWarn_6";

				/**
				 * [tWarn_6 process_data_begin ] stop
				 */

				/**
				 * [tWarn_6 process_data_end ] start
				 */

				currentComponent = "tWarn_6";

				/**
				 * [tWarn_6 process_data_end ] stop
				 */

				/**
				 * [tWarn_6 end ] start
				 */

				currentComponent = "tWarn_6";

				ok_Hash.put("tWarn_6", true);
				end_Hash.put("tWarn_6", System.currentTimeMillis());

				/**
				 * [tWarn_6 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tWarn_6 finally ] start
				 */

				currentComponent = "tWarn_6";

				/**
				 * [tWarn_6 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tWarn_6_SUBPROCESS_STATE", 1);
	}

	public void connectionStatsLogs_CommitProcess(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("connectionStatsLogs_Commit_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [connectionStatsLogs_Commit begin ] start
				 */

				ok_Hash.put("connectionStatsLogs_Commit", false);
				start_Hash.put("connectionStatsLogs_Commit", System.currentTimeMillis());

				currentComponent = "connectionStatsLogs_Commit";

				int tos_count_connectionStatsLogs_Commit = 0;

				/**
				 * [connectionStatsLogs_Commit begin ] stop
				 */

				/**
				 * [connectionStatsLogs_Commit main ] start
				 */

				currentComponent = "connectionStatsLogs_Commit";

				java.sql.Connection conn_connectionStatsLogs_Commit = (java.sql.Connection) globalMap
						.get("conn_connectionStatsLogs");
				if (conn_connectionStatsLogs_Commit != null && !conn_connectionStatsLogs_Commit.isClosed()) {

					conn_connectionStatsLogs_Commit.commit();

				}

				tos_count_connectionStatsLogs_Commit++;

				/**
				 * [connectionStatsLogs_Commit main ] stop
				 */

				/**
				 * [connectionStatsLogs_Commit process_data_begin ] start
				 */

				currentComponent = "connectionStatsLogs_Commit";

				/**
				 * [connectionStatsLogs_Commit process_data_begin ] stop
				 */

				/**
				 * [connectionStatsLogs_Commit process_data_end ] start
				 */

				currentComponent = "connectionStatsLogs_Commit";

				/**
				 * [connectionStatsLogs_Commit process_data_end ] stop
				 */

				/**
				 * [connectionStatsLogs_Commit end ] start
				 */

				currentComponent = "connectionStatsLogs_Commit";

				ok_Hash.put("connectionStatsLogs_Commit", true);
				end_Hash.put("connectionStatsLogs_Commit", System.currentTimeMillis());

				/**
				 * [connectionStatsLogs_Commit end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [connectionStatsLogs_Commit finally ] start
				 */

				currentComponent = "connectionStatsLogs_Commit";

				/**
				 * [connectionStatsLogs_Commit finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("connectionStatsLogs_Commit_SUBPROCESS_STATE", 1);
	}

	public void connectionStatsLogsProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("connectionStatsLogs_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [connectionStatsLogs begin ] start
				 */

				ok_Hash.put("connectionStatsLogs", false);
				start_Hash.put("connectionStatsLogs", System.currentTimeMillis());

				currentComponent = "connectionStatsLogs";

				int tos_count_connectionStatsLogs = 0;

				String url_connectionStatsLogs = "jdbc:sqlserver://" + context.SQLSERVER_LOG_Server;
				String port_connectionStatsLogs = context.SQLSERVER_LOG_Port;
				String dbname_connectionStatsLogs = context.SQLSERVER_LOG_Database;
				if (!"".equals(port_connectionStatsLogs)) {
					url_connectionStatsLogs += ":" + context.SQLSERVER_LOG_Port;
				}
				if (!"".equals(dbname_connectionStatsLogs)) {

					url_connectionStatsLogs += ";databaseName=" + context.SQLSERVER_LOG_Database;
				}
				url_connectionStatsLogs += ";appName=" + projectName + ";" + context.SQLSERVER_LOG_AdditionalParams;
				String dbUser_connectionStatsLogs = context.SQLSERVER_LOG_Login;

				final String decryptedPassword_connectionStatsLogs = context.SQLSERVER_LOG_Password;
				String dbPwd_connectionStatsLogs = decryptedPassword_connectionStatsLogs;

				java.sql.Connection conn_connectionStatsLogs = null;

				String sharedConnectionName_connectionStatsLogs = "jdbc:sqlserver://" + context.SQLSERVER_LOG_Server
						+ ":" + context.SQLSERVER_LOG_Port + ";DatabaseName=" + context.SQLSERVER_LOG_Schema + ";"
						+ context.SQLSERVER_LOG_AdditionalParams + "" + "_StatsAndLog_Shared_Connection";
				conn_connectionStatsLogs = SharedDBConnection.getDBConnection(
						"com.microsoft.sqlserver.jdbc.SQLServerDriver", url_connectionStatsLogs,
						dbUser_connectionStatsLogs, dbPwd_connectionStatsLogs,
						sharedConnectionName_connectionStatsLogs);
				if (null != conn_connectionStatsLogs) {

					conn_connectionStatsLogs.setAutoCommit(false);
				}

				globalMap.put("dbschema_connectionStatsLogs", context.SQLSERVER_LOG_Schema);

				globalMap.put("db_connectionStatsLogs", context.SQLSERVER_LOG_Database);

				globalMap.put("conn_connectionStatsLogs", conn_connectionStatsLogs);

				globalMap.put("shareIdentitySetting_connectionStatsLogs", false);

				/**
				 * [connectionStatsLogs begin ] stop
				 */

				/**
				 * [connectionStatsLogs main ] start
				 */

				currentComponent = "connectionStatsLogs";

				tos_count_connectionStatsLogs++;

				/**
				 * [connectionStatsLogs main ] stop
				 */

				/**
				 * [connectionStatsLogs process_data_begin ] start
				 */

				currentComponent = "connectionStatsLogs";

				/**
				 * [connectionStatsLogs process_data_begin ] stop
				 */

				/**
				 * [connectionStatsLogs process_data_end ] start
				 */

				currentComponent = "connectionStatsLogs";

				/**
				 * [connectionStatsLogs process_data_end ] stop
				 */

				/**
				 * [connectionStatsLogs end ] start
				 */

				currentComponent = "connectionStatsLogs";

				ok_Hash.put("connectionStatsLogs", true);
				end_Hash.put("connectionStatsLogs", System.currentTimeMillis());

				/**
				 * [connectionStatsLogs end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [connectionStatsLogs finally ] start
				 */

				currentComponent = "connectionStatsLogs";

				/**
				 * [connectionStatsLogs finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("connectionStatsLogs_SUBPROCESS_STATE", 1);
	}

	public static class row_talendLogs_DBStruct implements routines.system.IPersistableRow<row_talendLogs_DBStruct> {
		final static byte[] commonByteArrayLock_DEV_MASTERFILE_PRICES = new byte[0];
		static byte[] commonByteArray_DEV_MASTERFILE_PRICES = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public Integer priority;

		public Integer getPriority() {
			return this.priority;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Integer code;

		public Integer getCode() {
			return this.code;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEV_MASTERFILE_PRICES.length) {
					if (length < 1024 && commonByteArray_DEV_MASTERFILE_PRICES.length == 0) {
						commonByteArray_DEV_MASTERFILE_PRICES = new byte[1024];
					} else {
						commonByteArray_DEV_MASTERFILE_PRICES = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEV_MASTERFILE_PRICES, 0, length);
				strReturn = new String(commonByteArray_DEV_MASTERFILE_PRICES, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_MASTERFILE_PRICES) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.root_pid = readString(dis);

					this.father_pid = readString(dis);

					this.project = readString(dis);

					this.job = readString(dis);

					this.context = readString(dis);

					this.priority = readInteger(dis);

					this.type = readString(dis);

					this.origin = readString(dis);

					this.message = readString(dis);

					this.code = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.root_pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.context, dos);

				// Integer

				writeInteger(this.priority, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message, dos);

				// Integer

				writeInteger(this.code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",context=" + context);
			sb.append(",priority=" + String.valueOf(priority));
			sb.append(",type=" + type);
			sb.append(",origin=" + origin);
			sb.append(",message=" + message);
			sb.append(",code=" + String.valueOf(code));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_talendLogs_DBStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row_talendLogs_LOGSStruct
			implements routines.system.IPersistableRow<row_talendLogs_LOGSStruct> {
		final static byte[] commonByteArrayLock_DEV_MASTERFILE_PRICES = new byte[0];
		static byte[] commonByteArray_DEV_MASTERFILE_PRICES = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public Integer priority;

		public Integer getPriority() {
			return this.priority;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Integer code;

		public Integer getCode() {
			return this.code;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEV_MASTERFILE_PRICES.length) {
					if (length < 1024 && commonByteArray_DEV_MASTERFILE_PRICES.length == 0) {
						commonByteArray_DEV_MASTERFILE_PRICES = new byte[1024];
					} else {
						commonByteArray_DEV_MASTERFILE_PRICES = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEV_MASTERFILE_PRICES, 0, length);
				strReturn = new String(commonByteArray_DEV_MASTERFILE_PRICES, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_MASTERFILE_PRICES) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.root_pid = readString(dis);

					this.father_pid = readString(dis);

					this.project = readString(dis);

					this.job = readString(dis);

					this.context = readString(dis);

					this.priority = readInteger(dis);

					this.type = readString(dis);

					this.origin = readString(dis);

					this.message = readString(dis);

					this.code = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.root_pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.context, dos);

				// Integer

				writeInteger(this.priority, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message, dos);

				// Integer

				writeInteger(this.code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",context=" + context);
			sb.append(",priority=" + String.valueOf(priority));
			sb.append(",type=" + type);
			sb.append(",origin=" + origin);
			sb.append(",message=" + message);
			sb.append(",code=" + String.valueOf(code));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_talendLogs_LOGSStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void talendLogs_LOGSProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("talendLogs_LOGS_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row_talendLogs_LOGSStruct row_talendLogs_LOGS = new row_talendLogs_LOGSStruct();
				row_talendLogs_DBStruct row_talendLogs_DB = new row_talendLogs_DBStruct();

				/**
				 * [talendLogs_CONSOLE begin ] start
				 */

				ok_Hash.put("talendLogs_CONSOLE", false);
				start_Hash.put("talendLogs_CONSOLE", System.currentTimeMillis());

				currentVirtualComponent = "talendLogs_CONSOLE";

				currentComponent = "talendLogs_CONSOLE";

				int tos_count_talendLogs_CONSOLE = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_talendLogs_CONSOLE = "|";
				java.io.PrintStream consoleOut_talendLogs_CONSOLE = null;

				StringBuilder strBuffer_talendLogs_CONSOLE = null;
				int nb_line_talendLogs_CONSOLE = 0;
///////////////////////    			

				/**
				 * [talendLogs_CONSOLE begin ] stop
				 */

				/**
				 * [talendLogs_DB begin ] start
				 */

				ok_Hash.put("talendLogs_DB", false);
				start_Hash.put("talendLogs_DB", System.currentTimeMillis());

				currentVirtualComponent = "talendLogs_DB";

				currentComponent = "talendLogs_DB";

				int tos_count_talendLogs_DB = 0;

				int nb_line_talendLogs_DB = 0;
				int nb_line_update_talendLogs_DB = 0;
				int nb_line_inserted_talendLogs_DB = 0;
				int nb_line_deleted_talendLogs_DB = 0;
				int nb_line_rejected_talendLogs_DB = 0;

				int deletedCount_talendLogs_DB = 0;
				int updatedCount_talendLogs_DB = 0;
				int insertedCount_talendLogs_DB = 0;
				int rejectedCount_talendLogs_DB = 0;
				String dbschema_talendLogs_DB = null;
				String tableName_talendLogs_DB = null;
				boolean whetherReject_talendLogs_DB = false;

				java.util.Calendar calendar_talendLogs_DB = java.util.Calendar.getInstance();
				long year1_talendLogs_DB = TalendDate.parseDate("yyyy-MM-dd", "0001-01-01").getTime();
				long year2_talendLogs_DB = TalendDate.parseDate("yyyy-MM-dd", "1753-01-01").getTime();
				long year10000_talendLogs_DB = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss", "9999-12-31 24:00:00")
						.getTime();
				long date_talendLogs_DB;

				java.util.Calendar calendar_datetimeoffset_talendLogs_DB = java.util.Calendar
						.getInstance(java.util.TimeZone.getTimeZone("UTC"));

				java.sql.Connection conn_talendLogs_DB = null;
				String dbUser_talendLogs_DB = null;
				dbschema_talendLogs_DB = (String) globalMap.get("dbschema_connectionStatsLogs");
				conn_talendLogs_DB = (java.sql.Connection) globalMap.get("conn_connectionStatsLogs");

				int batchSize_talendLogs_DB = 10000;
				int batchSizeCounter_talendLogs_DB = 0;

				if (dbschema_talendLogs_DB == null || dbschema_talendLogs_DB.trim().length() == 0) {
					tableName_talendLogs_DB = "Log";
				} else {
					tableName_talendLogs_DB = dbschema_talendLogs_DB + "].[" + "Log";
				}
				int count_talendLogs_DB = 0;

				// [%connection%][checktable][tableName]
				String keyCheckTable_talendLogs_DB = conn_talendLogs_DB + "[checktable]" + "[" + "Log" + "]";

				if (GlobalResource.resourceMap.get(keyCheckTable_talendLogs_DB) == null) {// }

					synchronized (GlobalResource.resourceLockMap.get(keyCheckTable_talendLogs_DB)) {// }
						if (GlobalResource.resourceMap.get(keyCheckTable_talendLogs_DB) == null) {// }
							boolean whetherExist_talendLogs_DB = false;
							try (java.sql.Statement isExistStmt_talendLogs_DB = conn_talendLogs_DB.createStatement()) {
								try {
									isExistStmt_talendLogs_DB
											.execute("SELECT TOP 1 1 FROM [" + tableName_talendLogs_DB + "]");
									whetherExist_talendLogs_DB = true;
								} catch (java.lang.Exception e) {
									whetherExist_talendLogs_DB = false;
								}
							}
							if (!whetherExist_talendLogs_DB) {
								try (java.sql.Statement stmtCreate_talendLogs_DB = conn_talendLogs_DB
										.createStatement()) {
									stmtCreate_talendLogs_DB.execute("CREATE TABLE [" + tableName_talendLogs_DB
											+ "]([moment] DATETIME ,[pid] VARCHAR(20)  ,[root_pid] VARCHAR(20)  ,[father_pid] VARCHAR(20)  ,[project] VARCHAR(50)  ,[job] VARCHAR(255)  ,[context] VARCHAR(50)  ,[priority] INT ,[type] VARCHAR(255)  ,[origin] VARCHAR(255)  ,[message] VARCHAR(255)  ,[code] INT )");
								}
							}
							GlobalResource.resourceMap.put(keyCheckTable_talendLogs_DB, true);
							// {{{
						} // end of if
					} // end synchronized
				}
				String insert_talendLogs_DB = "INSERT INTO [" + tableName_talendLogs_DB
						+ "] ([moment],[pid],[root_pid],[father_pid],[project],[job],[context],[priority],[type],[origin],[message],[code]) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_talendLogs_DB = null;
				String keyPsmt_talendLogs_DB = conn_talendLogs_DB + "[psmt]" + "[" + "Log" + "]";
				pstmt_talendLogs_DB = SharedDBPreparedStatement.getSharedPreparedStatement(conn_talendLogs_DB,
						insert_talendLogs_DB, keyPsmt_talendLogs_DB);
				resourceMap.put("pstmt_talendLogs_DB", pstmt_talendLogs_DB);
				boolean isShareIdentity_talendLogs_DB = globalMap
						.get("shareIdentitySetting_connectionStatsLogs") != null
						&& (Boolean) globalMap.get("shareIdentitySetting_connectionStatsLogs") == true;

				/**
				 * [talendLogs_DB begin ] stop
				 */

				/**
				 * [talendLogs_LOGS begin ] start
				 */

				ok_Hash.put("talendLogs_LOGS", false);
				start_Hash.put("talendLogs_LOGS", System.currentTimeMillis());

				currentVirtualComponent = "talendLogs_LOGS";

				currentComponent = "talendLogs_LOGS";

				int tos_count_talendLogs_LOGS = 0;

				try {
					for (LogCatcherUtils.LogCatcherMessage lcm : talendLogs_LOGS.getMessages()) {
						row_talendLogs_LOGS.type = lcm.getType();
						row_talendLogs_LOGS.origin = (lcm.getOrigin() == null || lcm.getOrigin().length() < 1 ? null
								: lcm.getOrigin());
						row_talendLogs_LOGS.priority = lcm.getPriority();
						row_talendLogs_LOGS.message = lcm.getMessage();
						row_talendLogs_LOGS.code = lcm.getCode();

						row_talendLogs_LOGS.moment = java.util.Calendar.getInstance().getTime();

						row_talendLogs_LOGS.pid = pid;
						row_talendLogs_LOGS.root_pid = rootPid;
						row_talendLogs_LOGS.father_pid = fatherPid;

						row_talendLogs_LOGS.project = projectName;
						row_talendLogs_LOGS.job = jobName;
						row_talendLogs_LOGS.context = contextStr;

						/**
						 * [talendLogs_LOGS begin ] stop
						 */

						/**
						 * [talendLogs_LOGS main ] start
						 */

						currentVirtualComponent = "talendLogs_LOGS";

						currentComponent = "talendLogs_LOGS";

						tos_count_talendLogs_LOGS++;

						/**
						 * [talendLogs_LOGS main ] stop
						 */

						/**
						 * [talendLogs_LOGS process_data_begin ] start
						 */

						currentVirtualComponent = "talendLogs_LOGS";

						currentComponent = "talendLogs_LOGS";

						/**
						 * [talendLogs_LOGS process_data_begin ] stop
						 */

						/**
						 * [talendLogs_DB main ] start
						 */

						currentVirtualComponent = "talendLogs_DB";

						currentComponent = "talendLogs_DB";

						row_talendLogs_DB = null;
						whetherReject_talendLogs_DB = false;
						if (row_talendLogs_LOGS.moment != null) {
							pstmt_talendLogs_DB.setTimestamp(1,
									new java.sql.Timestamp(row_talendLogs_LOGS.moment.getTime()));
						} else {
							pstmt_talendLogs_DB.setNull(1, java.sql.Types.DATE);
						}

						if (row_talendLogs_LOGS.pid == null) {
							pstmt_talendLogs_DB.setNull(2, java.sql.Types.VARCHAR);
						} else {
							pstmt_talendLogs_DB.setString(2, row_talendLogs_LOGS.pid);
						}

						if (row_talendLogs_LOGS.root_pid == null) {
							pstmt_talendLogs_DB.setNull(3, java.sql.Types.VARCHAR);
						} else {
							pstmt_talendLogs_DB.setString(3, row_talendLogs_LOGS.root_pid);
						}

						if (row_talendLogs_LOGS.father_pid == null) {
							pstmt_talendLogs_DB.setNull(4, java.sql.Types.VARCHAR);
						} else {
							pstmt_talendLogs_DB.setString(4, row_talendLogs_LOGS.father_pid);
						}

						if (row_talendLogs_LOGS.project == null) {
							pstmt_talendLogs_DB.setNull(5, java.sql.Types.VARCHAR);
						} else {
							pstmt_talendLogs_DB.setString(5, row_talendLogs_LOGS.project);
						}

						if (row_talendLogs_LOGS.job == null) {
							pstmt_talendLogs_DB.setNull(6, java.sql.Types.VARCHAR);
						} else {
							pstmt_talendLogs_DB.setString(6, row_talendLogs_LOGS.job);
						}

						if (row_talendLogs_LOGS.context == null) {
							pstmt_talendLogs_DB.setNull(7, java.sql.Types.VARCHAR);
						} else {
							pstmt_talendLogs_DB.setString(7, row_talendLogs_LOGS.context);
						}

						if (row_talendLogs_LOGS.priority == null) {
							pstmt_talendLogs_DB.setNull(8, java.sql.Types.INTEGER);
						} else {
							pstmt_talendLogs_DB.setInt(8, row_talendLogs_LOGS.priority);
						}

						if (row_talendLogs_LOGS.type == null) {
							pstmt_talendLogs_DB.setNull(9, java.sql.Types.VARCHAR);
						} else {
							pstmt_talendLogs_DB.setString(9, row_talendLogs_LOGS.type);
						}

						if (row_talendLogs_LOGS.origin == null) {
							pstmt_talendLogs_DB.setNull(10, java.sql.Types.VARCHAR);
						} else {
							pstmt_talendLogs_DB.setString(10, row_talendLogs_LOGS.origin);
						}

						if (row_talendLogs_LOGS.message == null) {
							pstmt_talendLogs_DB.setNull(11, java.sql.Types.VARCHAR);
						} else {
							pstmt_talendLogs_DB.setString(11, row_talendLogs_LOGS.message);
						}

						if (row_talendLogs_LOGS.code == null) {
							pstmt_talendLogs_DB.setNull(12, java.sql.Types.INTEGER);
						} else {
							pstmt_talendLogs_DB.setInt(12, row_talendLogs_LOGS.code);
						}

						pstmt_talendLogs_DB.addBatch();
						nb_line_talendLogs_DB++;

						batchSizeCounter_talendLogs_DB++;

						if (!whetherReject_talendLogs_DB) {
							row_talendLogs_DB = new row_talendLogs_DBStruct();
							row_talendLogs_DB.moment = row_talendLogs_LOGS.moment;
							row_talendLogs_DB.pid = row_talendLogs_LOGS.pid;
							row_talendLogs_DB.root_pid = row_talendLogs_LOGS.root_pid;
							row_talendLogs_DB.father_pid = row_talendLogs_LOGS.father_pid;
							row_talendLogs_DB.project = row_talendLogs_LOGS.project;
							row_talendLogs_DB.job = row_talendLogs_LOGS.job;
							row_talendLogs_DB.context = row_talendLogs_LOGS.context;
							row_talendLogs_DB.priority = row_talendLogs_LOGS.priority;
							row_talendLogs_DB.type = row_talendLogs_LOGS.type;
							row_talendLogs_DB.origin = row_talendLogs_LOGS.origin;
							row_talendLogs_DB.message = row_talendLogs_LOGS.message;
							row_talendLogs_DB.code = row_talendLogs_LOGS.code;
						}
						////////// batch execute by batch size///////
						class LimitBytesHelper_talendLogs_DB {
							public int limitBytePart1(int counter, java.sql.PreparedStatement pstmt_talendLogs_DB)
									throws Exception {
								try {

									for (int countEach_talendLogs_DB : pstmt_talendLogs_DB.executeBatch()) {
										if (countEach_talendLogs_DB == -2 || countEach_talendLogs_DB == -3) {
											break;
										}
										counter += countEach_talendLogs_DB;
									}

								} catch (java.sql.BatchUpdateException e) {

									int countSum_talendLogs_DB = 0;
									for (int countEach_talendLogs_DB : e.getUpdateCounts()) {
										counter += (countEach_talendLogs_DB < 0 ? 0 : countEach_talendLogs_DB);
									}

									System.err.println(e.getMessage());

								}
								return counter;
							}

							public int limitBytePart2(int counter, java.sql.PreparedStatement pstmt_talendLogs_DB)
									throws Exception {
								try {

									for (int countEach_talendLogs_DB : pstmt_talendLogs_DB.executeBatch()) {
										if (countEach_talendLogs_DB == -2 || countEach_talendLogs_DB == -3) {
											break;
										}
										counter += countEach_talendLogs_DB;
									}

								} catch (java.sql.BatchUpdateException e) {

									for (int countEach_talendLogs_DB : e.getUpdateCounts()) {
										counter += (countEach_talendLogs_DB < 0 ? 0 : countEach_talendLogs_DB);
									}

									System.err.println(e.getMessage());

								}
								return counter;
							}
						}
						if ((batchSize_talendLogs_DB > 0)
								&& (batchSize_talendLogs_DB <= batchSizeCounter_talendLogs_DB)) {

							insertedCount_talendLogs_DB = new LimitBytesHelper_talendLogs_DB()
									.limitBytePart1(insertedCount_talendLogs_DB, pstmt_talendLogs_DB);

							batchSizeCounter_talendLogs_DB = 0;
						}

						//////////// commit every////////////

						tos_count_talendLogs_DB++;

						/**
						 * [talendLogs_DB main ] stop
						 */

						/**
						 * [talendLogs_DB process_data_begin ] start
						 */

						currentVirtualComponent = "talendLogs_DB";

						currentComponent = "talendLogs_DB";

						/**
						 * [talendLogs_DB process_data_begin ] stop
						 */
// Start of branch "row_talendLogs_DB"
						if (row_talendLogs_DB != null) {

							/**
							 * [talendLogs_CONSOLE main ] start
							 */

							currentVirtualComponent = "talendLogs_CONSOLE";

							currentComponent = "talendLogs_CONSOLE";

///////////////////////		

							strBuffer_talendLogs_CONSOLE = new StringBuilder();

							if (row_talendLogs_DB.moment != null) { //

								strBuffer_talendLogs_CONSOLE.append(
										FormatterUtils.format_Date(row_talendLogs_DB.moment, "yyyy-MM-dd HH:mm:ss"));

							} //

							strBuffer_talendLogs_CONSOLE.append("|");

							if (row_talendLogs_DB.pid != null) { //

								strBuffer_talendLogs_CONSOLE.append(String.valueOf(row_talendLogs_DB.pid));

							} //

							strBuffer_talendLogs_CONSOLE.append("|");

							if (row_talendLogs_DB.root_pid != null) { //

								strBuffer_talendLogs_CONSOLE.append(String.valueOf(row_talendLogs_DB.root_pid));

							} //

							strBuffer_talendLogs_CONSOLE.append("|");

							if (row_talendLogs_DB.father_pid != null) { //

								strBuffer_talendLogs_CONSOLE.append(String.valueOf(row_talendLogs_DB.father_pid));

							} //

							strBuffer_talendLogs_CONSOLE.append("|");

							if (row_talendLogs_DB.project != null) { //

								strBuffer_talendLogs_CONSOLE.append(String.valueOf(row_talendLogs_DB.project));

							} //

							strBuffer_talendLogs_CONSOLE.append("|");

							if (row_talendLogs_DB.job != null) { //

								strBuffer_talendLogs_CONSOLE.append(String.valueOf(row_talendLogs_DB.job));

							} //

							strBuffer_talendLogs_CONSOLE.append("|");

							if (row_talendLogs_DB.context != null) { //

								strBuffer_talendLogs_CONSOLE.append(String.valueOf(row_talendLogs_DB.context));

							} //

							strBuffer_talendLogs_CONSOLE.append("|");

							if (row_talendLogs_DB.priority != null) { //

								strBuffer_talendLogs_CONSOLE.append(String.valueOf(row_talendLogs_DB.priority));

							} //

							strBuffer_talendLogs_CONSOLE.append("|");

							if (row_talendLogs_DB.type != null) { //

								strBuffer_talendLogs_CONSOLE.append(String.valueOf(row_talendLogs_DB.type));

							} //

							strBuffer_talendLogs_CONSOLE.append("|");

							if (row_talendLogs_DB.origin != null) { //

								strBuffer_talendLogs_CONSOLE.append(String.valueOf(row_talendLogs_DB.origin));

							} //

							strBuffer_talendLogs_CONSOLE.append("|");

							if (row_talendLogs_DB.message != null) { //

								strBuffer_talendLogs_CONSOLE.append(String.valueOf(row_talendLogs_DB.message));

							} //

							strBuffer_talendLogs_CONSOLE.append("|");

							if (row_talendLogs_DB.code != null) { //

								strBuffer_talendLogs_CONSOLE.append(String.valueOf(row_talendLogs_DB.code));

							} //

							if (globalMap.get("tLogRow_CONSOLE") != null) {
								consoleOut_talendLogs_CONSOLE = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
							} else {
								consoleOut_talendLogs_CONSOLE = new java.io.PrintStream(
										new java.io.BufferedOutputStream(System.out));
								globalMap.put("tLogRow_CONSOLE", consoleOut_talendLogs_CONSOLE);
							}
							consoleOut_talendLogs_CONSOLE.println(strBuffer_talendLogs_CONSOLE.toString());
							consoleOut_talendLogs_CONSOLE.flush();
							nb_line_talendLogs_CONSOLE++;
//////

//////                    

///////////////////////    			

							tos_count_talendLogs_CONSOLE++;

							/**
							 * [talendLogs_CONSOLE main ] stop
							 */

							/**
							 * [talendLogs_CONSOLE process_data_begin ] start
							 */

							currentVirtualComponent = "talendLogs_CONSOLE";

							currentComponent = "talendLogs_CONSOLE";

							/**
							 * [talendLogs_CONSOLE process_data_begin ] stop
							 */

							/**
							 * [talendLogs_CONSOLE process_data_end ] start
							 */

							currentVirtualComponent = "talendLogs_CONSOLE";

							currentComponent = "talendLogs_CONSOLE";

							/**
							 * [talendLogs_CONSOLE process_data_end ] stop
							 */

						} // End of branch "row_talendLogs_DB"

						/**
						 * [talendLogs_DB process_data_end ] start
						 */

						currentVirtualComponent = "talendLogs_DB";

						currentComponent = "talendLogs_DB";

						/**
						 * [talendLogs_DB process_data_end ] stop
						 */

						/**
						 * [talendLogs_LOGS process_data_end ] start
						 */

						currentVirtualComponent = "talendLogs_LOGS";

						currentComponent = "talendLogs_LOGS";

						/**
						 * [talendLogs_LOGS process_data_end ] stop
						 */

						/**
						 * [talendLogs_LOGS end ] start
						 */

						currentVirtualComponent = "talendLogs_LOGS";

						currentComponent = "talendLogs_LOGS";

					}
				} catch (Exception e_talendLogs_LOGS) {
					logIgnoredError(String.format(
							"talendLogs_LOGS - tLogCatcher failed to process log message(s) due to internal error: %s",
							e_talendLogs_LOGS), e_talendLogs_LOGS);
				}

				ok_Hash.put("talendLogs_LOGS", true);
				end_Hash.put("talendLogs_LOGS", System.currentTimeMillis());

				/**
				 * [talendLogs_LOGS end ] stop
				 */

				/**
				 * [talendLogs_DB end ] start
				 */

				currentVirtualComponent = "talendLogs_DB";

				currentComponent = "talendLogs_DB";

				try {
					int countSum_talendLogs_DB = 0;
					if (pstmt_talendLogs_DB != null && batchSizeCounter_talendLogs_DB > 0) {

						for (int countEach_talendLogs_DB : pstmt_talendLogs_DB.executeBatch()) {
							if (countEach_talendLogs_DB == -2 || countEach_talendLogs_DB == -3) {
								break;
							}
							countSum_talendLogs_DB += countEach_talendLogs_DB;
						}

					}

					insertedCount_talendLogs_DB += countSum_talendLogs_DB;

				} catch (java.sql.BatchUpdateException e) {

					int countSum_talendLogs_DB = 0;
					for (int countEach_talendLogs_DB : e.getUpdateCounts()) {
						countSum_talendLogs_DB += (countEach_talendLogs_DB < 0 ? 0 : countEach_talendLogs_DB);
					}

					insertedCount_talendLogs_DB += countSum_talendLogs_DB;

					System.err.println(e.getMessage());

				}
				if (pstmt_talendLogs_DB != null) {

					SharedDBPreparedStatement.releasePreparedStatement(keyPsmt_talendLogs_DB);

				}
				resourceMap.put("statementClosed_talendLogs_DB", true);

				nb_line_deleted_talendLogs_DB = nb_line_deleted_talendLogs_DB + deletedCount_talendLogs_DB;
				nb_line_update_talendLogs_DB = nb_line_update_talendLogs_DB + updatedCount_talendLogs_DB;
				nb_line_inserted_talendLogs_DB = nb_line_inserted_talendLogs_DB + insertedCount_talendLogs_DB;
				nb_line_rejected_talendLogs_DB = nb_line_rejected_talendLogs_DB + rejectedCount_talendLogs_DB;

				globalMap.put("talendLogs_DB_NB_LINE", nb_line_talendLogs_DB);
				globalMap.put("talendLogs_DB_NB_LINE_UPDATED", nb_line_update_talendLogs_DB);
				globalMap.put("talendLogs_DB_NB_LINE_INSERTED", nb_line_inserted_talendLogs_DB);
				globalMap.put("talendLogs_DB_NB_LINE_DELETED", nb_line_deleted_talendLogs_DB);
				globalMap.put("talendLogs_DB_NB_LINE_REJECTED", nb_line_rejected_talendLogs_DB);

				ok_Hash.put("talendLogs_DB", true);
				end_Hash.put("talendLogs_DB", System.currentTimeMillis());

				/**
				 * [talendLogs_DB end ] stop
				 */

				/**
				 * [talendLogs_CONSOLE end ] start
				 */

				currentVirtualComponent = "talendLogs_CONSOLE";

				currentComponent = "talendLogs_CONSOLE";

//////
//////
				globalMap.put("talendLogs_CONSOLE_NB_LINE", nb_line_talendLogs_CONSOLE);

///////////////////////    			

				ok_Hash.put("talendLogs_CONSOLE", true);
				end_Hash.put("talendLogs_CONSOLE", System.currentTimeMillis());

				/**
				 * [talendLogs_CONSOLE end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:talendLogs_LOGS:sub_ok_talendLogs_connectionStatsLogs_Commit", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			connectionStatsLogs_CommitProcess(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [talendLogs_LOGS finally ] start
				 */

				currentVirtualComponent = "talendLogs_LOGS";

				currentComponent = "talendLogs_LOGS";

				/**
				 * [talendLogs_LOGS finally ] stop
				 */

				/**
				 * [talendLogs_DB finally ] start
				 */

				currentVirtualComponent = "talendLogs_DB";

				currentComponent = "talendLogs_DB";

				if (resourceMap.get("statementClosed_talendLogs_DB") == null) {
					java.sql.PreparedStatement pstmtToClose_talendLogs_DB = null;
					if ((pstmtToClose_talendLogs_DB = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_talendLogs_DB")) != null) {
						pstmtToClose_talendLogs_DB.close();
					}
				}

				/**
				 * [talendLogs_DB finally ] stop
				 */

				/**
				 * [talendLogs_CONSOLE finally ] start
				 */

				currentVirtualComponent = "talendLogs_CONSOLE";

				currentComponent = "talendLogs_CONSOLE";

				/**
				 * [talendLogs_CONSOLE finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("talendLogs_LOGS_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "PREPROD";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final MASTERFILE_PRICES MASTERFILE_PRICESClass = new MASTERFILE_PRICES();

		int exitCode = MASTERFILE_PRICESClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = MASTERFILE_PRICES.class.getClassLoader()
					.getResourceAsStream("dev/masterfile_prices_0_37/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = MASTERFILE_PRICES.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
					context.setContextType("IntegrationPath", "id_String");
					context.IntegrationPath = (String) context.getProperty("IntegrationPath");
					context.setContextType("LogPath", "id_String");
					context.LogPath = (String) context.getProperty("LogPath");
					context.setContextType("ExtractPath", "id_String");
					context.ExtractPath = (String) context.getProperty("ExtractPath");
					context.setContextType("ExtractPathPrice", "id_String");
					context.ExtractPathPrice = (String) context.getProperty("ExtractPathPrice");
					context.setContextType("currentFileName", "id_String");
					context.currentFileName = (String) context.getProperty("currentFileName");
					context.setContextType("currentCreationDate", "id_String");
					context.currentCreationDate = (String) context.getProperty("currentCreationDate");
					context.setContextType("dataBase", "id_String");
					context.dataBase = (String) context.getProperty("dataBase");
					context.setContextType("SQLSERVER_LOG_Schema", "id_String");
					context.SQLSERVER_LOG_Schema = (String) context.getProperty("SQLSERVER_LOG_Schema");
					context.setContextType("SQLSERVER_LOG_Server", "id_String");
					context.SQLSERVER_LOG_Server = (String) context.getProperty("SQLSERVER_LOG_Server");
					context.setContextType("SQLSERVER_LOG_AdditionalParams", "id_String");
					context.SQLSERVER_LOG_AdditionalParams = (String) context
							.getProperty("SQLSERVER_LOG_AdditionalParams");
					context.setContextType("SQLSERVER_LOG_Login", "id_String");
					context.SQLSERVER_LOG_Login = (String) context.getProperty("SQLSERVER_LOG_Login");
					context.setContextType("SQLSERVER_LOG_Port", "id_String");
					context.SQLSERVER_LOG_Port = (String) context.getProperty("SQLSERVER_LOG_Port");
					context.setContextType("SQLSERVER_LOG_Database", "id_String");
					context.SQLSERVER_LOG_Database = (String) context.getProperty("SQLSERVER_LOG_Database");
					context.setContextType("SQLSERVER_LOG_Password", "id_Password");
					String pwd_SQLSERVER_LOG_Password_value = context.getProperty("SQLSERVER_LOG_Password");
					context.SQLSERVER_LOG_Password = null;
					if (pwd_SQLSERVER_LOG_Password_value != null) {
						if (context_param.containsKey("SQLSERVER_LOG_Password")) {// no need to decrypt if it come from
																					// program argument or parent job
																					// runtime
							context.SQLSERVER_LOG_Password = pwd_SQLSERVER_LOG_Password_value;
						} else if (!pwd_SQLSERVER_LOG_Password_value.isEmpty()) {
							try {
								context.SQLSERVER_LOG_Password = routines.system.PasswordEncryptUtil
										.decryptPassword(pwd_SQLSERVER_LOG_Password_value);
								context.put("SQLSERVER_LOG_Password", context.SQLSERVER_LOG_Password);
							} catch (java.lang.RuntimeException e) {
								// do nothing
							}
						}
					}
					context.setContextType("SQLSERVER_Schema", "id_String");
					context.SQLSERVER_Schema = (String) context.getProperty("SQLSERVER_Schema");
					context.setContextType("SQLSERVER_AdditionalParams", "id_String");
					context.SQLSERVER_AdditionalParams = (String) context.getProperty("SQLSERVER_AdditionalParams");
					context.setContextType("SQLSERVER_Server", "id_String");
					context.SQLSERVER_Server = (String) context.getProperty("SQLSERVER_Server");
					context.setContextType("SQLSERVER_Password", "id_Password");
					String pwd_SQLSERVER_Password_value = context.getProperty("SQLSERVER_Password");
					context.SQLSERVER_Password = null;
					if (pwd_SQLSERVER_Password_value != null) {
						if (context_param.containsKey("SQLSERVER_Password")) {// no need to decrypt if it come from
																				// program argument or parent job
																				// runtime
							context.SQLSERVER_Password = pwd_SQLSERVER_Password_value;
						} else if (!pwd_SQLSERVER_Password_value.isEmpty()) {
							try {
								context.SQLSERVER_Password = routines.system.PasswordEncryptUtil
										.decryptPassword(pwd_SQLSERVER_Password_value);
								context.put("SQLSERVER_Password", context.SQLSERVER_Password);
							} catch (java.lang.RuntimeException e) {
								// do nothing
							}
						}
					}
					context.setContextType("SQLSERVER_Database", "id_String");
					context.SQLSERVER_Database = (String) context.getProperty("SQLSERVER_Database");
					context.setContextType("SQLSERVER_Port", "id_String");
					context.SQLSERVER_Port = (String) context.getProperty("SQLSERVER_Port");
					context.setContextType("SQLSERVER_Login", "id_String");
					context.SQLSERVER_Login = (String) context.getProperty("SQLSERVER_Login");
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("IntegrationPath")) {
				context.IntegrationPath = (String) parentContextMap.get("IntegrationPath");
			}
			if (parentContextMap.containsKey("LogPath")) {
				context.LogPath = (String) parentContextMap.get("LogPath");
			}
			if (parentContextMap.containsKey("ExtractPath")) {
				context.ExtractPath = (String) parentContextMap.get("ExtractPath");
			}
			if (parentContextMap.containsKey("ExtractPathPrice")) {
				context.ExtractPathPrice = (String) parentContextMap.get("ExtractPathPrice");
			}
			if (parentContextMap.containsKey("currentFileName")) {
				context.currentFileName = (String) parentContextMap.get("currentFileName");
			}
			if (parentContextMap.containsKey("currentCreationDate")) {
				context.currentCreationDate = (String) parentContextMap.get("currentCreationDate");
			}
			if (parentContextMap.containsKey("dataBase")) {
				context.dataBase = (String) parentContextMap.get("dataBase");
			}
			if (parentContextMap.containsKey("SQLSERVER_LOG_Schema")) {
				context.SQLSERVER_LOG_Schema = (String) parentContextMap.get("SQLSERVER_LOG_Schema");
			}
			if (parentContextMap.containsKey("SQLSERVER_LOG_Server")) {
				context.SQLSERVER_LOG_Server = (String) parentContextMap.get("SQLSERVER_LOG_Server");
			}
			if (parentContextMap.containsKey("SQLSERVER_LOG_AdditionalParams")) {
				context.SQLSERVER_LOG_AdditionalParams = (String) parentContextMap
						.get("SQLSERVER_LOG_AdditionalParams");
			}
			if (parentContextMap.containsKey("SQLSERVER_LOG_Login")) {
				context.SQLSERVER_LOG_Login = (String) parentContextMap.get("SQLSERVER_LOG_Login");
			}
			if (parentContextMap.containsKey("SQLSERVER_LOG_Port")) {
				context.SQLSERVER_LOG_Port = (String) parentContextMap.get("SQLSERVER_LOG_Port");
			}
			if (parentContextMap.containsKey("SQLSERVER_LOG_Database")) {
				context.SQLSERVER_LOG_Database = (String) parentContextMap.get("SQLSERVER_LOG_Database");
			}
			if (parentContextMap.containsKey("SQLSERVER_LOG_Password")) {
				context.SQLSERVER_LOG_Password = (java.lang.String) parentContextMap.get("SQLSERVER_LOG_Password");
			}
			if (parentContextMap.containsKey("SQLSERVER_Schema")) {
				context.SQLSERVER_Schema = (String) parentContextMap.get("SQLSERVER_Schema");
			}
			if (parentContextMap.containsKey("SQLSERVER_AdditionalParams")) {
				context.SQLSERVER_AdditionalParams = (String) parentContextMap.get("SQLSERVER_AdditionalParams");
			}
			if (parentContextMap.containsKey("SQLSERVER_Server")) {
				context.SQLSERVER_Server = (String) parentContextMap.get("SQLSERVER_Server");
			}
			if (parentContextMap.containsKey("SQLSERVER_Password")) {
				context.SQLSERVER_Password = (java.lang.String) parentContextMap.get("SQLSERVER_Password");
			}
			if (parentContextMap.containsKey("SQLSERVER_Database")) {
				context.SQLSERVER_Database = (String) parentContextMap.get("SQLSERVER_Database");
			}
			if (parentContextMap.containsKey("SQLSERVER_Port")) {
				context.SQLSERVER_Port = (String) parentContextMap.get("SQLSERVER_Port");
			}
			if (parentContextMap.containsKey("SQLSERVER_Login")) {
				context.SQLSERVER_Login = (String) parentContextMap.get("SQLSERVER_Login");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		parametersToEncrypt.add("SQLSERVER_LOG_Password");
		parametersToEncrypt.add("SQLSERVER_Password");
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		try {
			errorCode = null;
			preStaLogConProcess(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_preStaLogCon) {
			globalMap.put("preStaLogCon_SUBPROCESS_STATE", -1);

			e_preStaLogCon.printStackTrace();

		}
		try {
			errorCode = null;
			tPrejob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPrejob_1) {
			globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

			e_tPrejob_1.printStackTrace();

		}

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tDBInput_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_1) {
			globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

			e_tDBInput_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		try {
			errorCode = null;
			tPostjob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPostjob_1) {
			globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

			e_tPostjob_1.printStackTrace();

		}

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println(
					(endUsedMemory - startUsedMemory) + " bytes memory increase when running : MASTERFILE_PRICES");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeSqlDbConnections();

	}

	private void closeSqlDbConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_tDBConnection_1");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
			obj_conn = globalMap.remove("conn_connectionStatsLogs");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));
		connections.put("conn_connectionStatsLogs", globalMap.get("conn_connectionStatsLogs"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 187086 characters generated by Talend Open Studio for Data Integration on the
 * 29 décembre 2023 11:09:11 GMT
 ************************************************************************************************/