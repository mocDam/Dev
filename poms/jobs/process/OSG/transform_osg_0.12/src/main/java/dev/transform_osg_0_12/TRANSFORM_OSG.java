// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package dev.transform_osg_0_12;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.SharedRecipient;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJavaRow_1
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: TRANSFORM_OSG Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.3.1.20191031_1204-M3
 * @status DEV
 */
public class TRANSFORM_OSG implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(IntegrationExcelPath != null){
				
					this.setProperty("IntegrationExcelPath", IntegrationExcelPath.toString());
				
			}
			
			if(SQLSERVER_Server != null){
				
					this.setProperty("SQLSERVER_Server", SQLSERVER_Server.toString());
				
			}
			
			if(SQLSERVER_Password != null){
				
					this.setProperty("SQLSERVER_Password", SQLSERVER_Password.toString());
				
			}
			
			if(SQLSERVER_AdditionalParams != null){
				
					this.setProperty("SQLSERVER_AdditionalParams", SQLSERVER_AdditionalParams.toString());
				
			}
			
			if(SQLSERVER_Database != null){
				
					this.setProperty("SQLSERVER_Database", SQLSERVER_Database.toString());
				
			}
			
			if(SQLSERVER_Port != null){
				
					this.setProperty("SQLSERVER_Port", SQLSERVER_Port.toString());
				
			}
			
			if(SQLSERVER_Schema != null){
				
					this.setProperty("SQLSERVER_Schema", SQLSERVER_Schema.toString());
				
			}
			
			if(SQLSERVER_Login != null){
				
					this.setProperty("SQLSERVER_Login", SQLSERVER_Login.toString());
				
			}
			
			if(fileName != null){
				
					this.setProperty("fileName", fileName.toString());
				
			}
			
			if(ExtractionPath != null){
				
					this.setProperty("ExtractionPath", ExtractionPath.toString());
				
			}
			
			if(TemplateFile != null){
				
					this.setProperty("TemplateFile", TemplateFile.toString());
				
			}
			
			if(OutputFileName != null){
				
					this.setProperty("OutputFileName", OutputFileName.toString());
				
			}
			
		}

public String IntegrationExcelPath;
public String getIntegrationExcelPath(){
	return this.IntegrationExcelPath;
}
public String SQLSERVER_Server;
public String getSQLSERVER_Server(){
	return this.SQLSERVER_Server;
}
public java.lang.String SQLSERVER_Password;
public java.lang.String getSQLSERVER_Password(){
	return this.SQLSERVER_Password;
}
public String SQLSERVER_AdditionalParams;
public String getSQLSERVER_AdditionalParams(){
	return this.SQLSERVER_AdditionalParams;
}
public String SQLSERVER_Database;
public String getSQLSERVER_Database(){
	return this.SQLSERVER_Database;
}
public String SQLSERVER_Port;
public String getSQLSERVER_Port(){
	return this.SQLSERVER_Port;
}
public String SQLSERVER_Schema;
public String getSQLSERVER_Schema(){
	return this.SQLSERVER_Schema;
}
public String SQLSERVER_Login;
public String getSQLSERVER_Login(){
	return this.SQLSERVER_Login;
}
public String fileName;
public String getFileName(){
	return this.fileName;
}
public String ExtractionPath;
public String getExtractionPath(){
	return this.ExtractionPath;
}
public String TemplateFile;
public String getTemplateFile(){
	return this.TemplateFile;
}
public String OutputFileName;
public String getOutputFileName(){
	return this.OutputFileName;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.12";
	private final String jobName = "TRANSFORM_OSG";
	private final String projectName = "DEV";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	LogCatcherUtils talendLogs_LOGS = new LogCatcherUtils();

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				TRANSFORM_OSG.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(TRANSFORM_OSG.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
				talendLogs_LOGS.addMessage("Java Exception", currentComponent, 6, e.getClass().getName() + ":" + e.getMessage(), 1);
				talendLogs_LOGSProcess(globalMap);
			}
			} catch (TalendException e) {
				// do nothing
			
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void preStaLogCon_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					preStaLogCon_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileExist_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileExist_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDie_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileProperties_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileProperties_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileProperties_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileList_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBRow_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void connectionStatsLogs_Commit_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					connectionStatsLogs_Commit_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void connectionStatsLogs_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					connectionStatsLogs_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void talendLogs_LOGS_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							talendLogs_DB_error(exception, errorComponent, globalMap);
						
						}
					
			public void talendLogs_DB_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					talendLogs_LOGS_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void preStaLogCon_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileExist_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDie_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileProperties_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileList_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBRow_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void connectionStatsLogs_Commit_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void connectionStatsLogs_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void talendLogs_LOGS_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	





public void preStaLogConProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("preStaLogCon_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [preStaLogCon begin ] start
	 */

	

	
		
		ok_Hash.put("preStaLogCon", false);
		start_Hash.put("preStaLogCon", System.currentTimeMillis());
		
	
	currentComponent="preStaLogCon";

	
		int tos_count_preStaLogCon = 0;
		

 



/**
 * [preStaLogCon begin ] stop
 */
	
	/**
	 * [preStaLogCon main ] start
	 */

	

	
	
	currentComponent="preStaLogCon";

	

 


	tos_count_preStaLogCon++;

/**
 * [preStaLogCon main ] stop
 */
	
	/**
	 * [preStaLogCon process_data_begin ] start
	 */

	

	
	
	currentComponent="preStaLogCon";

	

 



/**
 * [preStaLogCon process_data_begin ] stop
 */
	
	/**
	 * [preStaLogCon process_data_end ] start
	 */

	

	
	
	currentComponent="preStaLogCon";

	

 



/**
 * [preStaLogCon process_data_end ] stop
 */
	
	/**
	 * [preStaLogCon end ] start
	 */

	

	
	
	currentComponent="preStaLogCon";

	

 

ok_Hash.put("preStaLogCon", true);
end_Hash.put("preStaLogCon", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("after_preStaLogCon_connectionStatsLogs", 0, "ok");
				}
				connectionStatsLogsProcess(globalMap);



/**
 * [preStaLogCon end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [preStaLogCon finally ] start
	 */

	

	
	
	currentComponent="preStaLogCon";

	

 



/**
 * [preStaLogCon finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("preStaLogCon_SUBPROCESS_STATE", 1);
	}
	

public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";

	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tFileExist_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	

public void tFileExist_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileExist_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileExist_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileExist_1", false);
		start_Hash.put("tFileExist_1", System.currentTimeMillis());
		
	
	currentComponent="tFileExist_1";

	
		int tos_count_tFileExist_1 = 0;
		

 



/**
 * [tFileExist_1 begin ] stop
 */
	
	/**
	 * [tFileExist_1 main ] start
	 */

	

	
	
	currentComponent="tFileExist_1";

	



java.io.File file_tFileExist_1 = new java.io.File(context.TemplateFile);
if (!file_tFileExist_1.exists()) {
    globalMap.put("tFileExist_1_EXISTS",false);
}else{
	globalMap.put("tFileExist_1_EXISTS",true);
}

globalMap.put("tFileExist_1_FILENAME",context.TemplateFile);


 


	tos_count_tFileExist_1++;

/**
 * [tFileExist_1 main ] stop
 */
	
	/**
	 * [tFileExist_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileExist_1";

	

 



/**
 * [tFileExist_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileExist_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileExist_1";

	

 



/**
 * [tFileExist_1 process_data_end ] stop
 */
	
	/**
	 * [tFileExist_1 end ] start
	 */

	

	
	
	currentComponent="tFileExist_1";

	

 

ok_Hash.put("tFileExist_1", true);
end_Hash.put("tFileExist_1", System.currentTimeMillis());

   			if (!((Boolean)globalMap.get("tFileExist_1_EXISTS"))) {
   				
					if(execStat){   
   	 					runStat.updateStatOnConnection("If2", 0, "true");
					}
				
    			tDie_1Process(globalMap);
   			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If2", 0, "false");
					}   	 
   				}
   			if (((Boolean)globalMap.get("tFileExist_1_EXISTS"))) {
   				
					if(execStat){   
   	 					runStat.updateStatOnConnection("If1", 0, "true");
					}
				
    			tFileProperties_1Process(globalMap);
   			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If1", 0, "false");
					}   	 
   				}



/**
 * [tFileExist_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileExist_1 finally ] start
	 */

	

	
	
	currentComponent="tFileExist_1";

	

 



/**
 * [tFileExist_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileExist_1_SUBPROCESS_STATE", 1);
	}
	

public void tDie_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_1", false);
		start_Hash.put("tDie_1", System.currentTimeMillis());
		
	
	currentComponent="tDie_1";

	
		int tos_count_tDie_1 = 0;
		

 



/**
 * [tDie_1 begin ] stop
 */
	
	/**
	 * [tDie_1 main ] start
	 */

	

	
	
	currentComponent="tDie_1";

	

	try {
				talendLogs_LOGS.addMessage("tDie", "tDie_1", 5, "Template OSG not exists", 4);
				talendLogs_LOGSProcess(globalMap);
				
	globalMap.put("tDie_1_DIE_PRIORITY", 5);
	System.err.println("Template OSG not exists");
	
	globalMap.put("tDie_1_DIE_MESSAGE", "Template OSG not exists");
	globalMap.put("tDie_1_DIE_MESSAGES", "Template OSG not exists");
	
	} catch (Exception | Error e_tDie_1) {
		logIgnoredError(String.format("tDie_1 - tDie failed to log message due to internal error: %s", e_tDie_1), e_tDie_1);
	}
	
	currentComponent = "tDie_1";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_1_DIE_CODE", errorCode);        
    
	if(true){	
	    throw new TDieException();
	}

 


	tos_count_tDie_1++;

/**
 * [tDie_1 main ] stop
 */
	
	/**
	 * [tDie_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_1";

	

 



/**
 * [tDie_1 process_data_begin ] stop
 */
	
	/**
	 * [tDie_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_1";

	

 



/**
 * [tDie_1 process_data_end ] stop
 */
	
	/**
	 * [tDie_1 end ] start
	 */

	

	
	
	currentComponent="tDie_1";

	

 

ok_Hash.put("tDie_1", true);
end_Hash.put("tDie_1", System.currentTimeMillis());




/**
 * [tDie_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_1 finally ] start
	 */

	

	
	
	currentComponent="tDie_1";

	

 



/**
 * [tDie_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_1_SUBPROCESS_STATE", 1);
	}
	


public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_DEV_TRANSFORM_OSG = new byte[0];
    static byte[] commonByteArray_DEV_TRANSFORM_OSG = new byte[0];

	
			    public String abs_path;

				public String getAbs_path () {
					return this.abs_path;
				}
				
			    public String dirname;

				public String getDirname () {
					return this.dirname;
				}
				
			    public String basename;

				public String getBasename () {
					return this.basename;
				}
				
			    public String mode_string;

				public String getMode_string () {
					return this.mode_string;
				}
				
			    public Long size;

				public Long getSize () {
					return this.size;
				}
				
			    public Long mtime;

				public Long getMtime () {
					return this.mtime;
				}
				
			    public String mtime_string;

				public String getMtime_string () {
					return this.mtime_string;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_TRANSFORM_OSG.length) {
				if(length < 1024 && commonByteArray_DEV_TRANSFORM_OSG.length == 0) {
   					commonByteArray_DEV_TRANSFORM_OSG = new byte[1024];
				} else {
   					commonByteArray_DEV_TRANSFORM_OSG = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_TRANSFORM_OSG, 0, length);
			strReturn = new String(commonByteArray_DEV_TRANSFORM_OSG, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_TRANSFORM_OSG) {

        	try {

        		int length = 0;
		
					this.abs_path = readString(dis);
					
					this.dirname = readString(dis);
					
					this.basename = readString(dis);
					
					this.mode_string = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.size = null;
           				} else {
           			    	this.size = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.mtime = null;
           				} else {
           			    	this.mtime = dis.readLong();
           				}
					
					this.mtime_string = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.abs_path,dos);
					
					// String
				
						writeString(this.dirname,dos);
					
					// String
				
						writeString(this.basename,dos);
					
					// String
				
						writeString(this.mode_string,dos);
					
					// Long
				
						if(this.size == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.size);
		            	}
					
					// Long
				
						if(this.mtime == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.mtime);
		            	}
					
					// String
				
						writeString(this.mtime_string,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("abs_path="+abs_path);
		sb.append(",dirname="+dirname);
		sb.append(",basename="+basename);
		sb.append(",mode_string="+mode_string);
		sb.append(",size="+String.valueOf(size));
		sb.append(",mtime="+String.valueOf(mtime));
		sb.append(",mtime_string="+mtime_string);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileProperties_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileProperties_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();




	
	/**
	 * [tJavaRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_1", false);
		start_Hash.put("tJavaRow_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tJavaRow_1 = 0;
		

int nb_line_tJavaRow_1 = 0;

 



/**
 * [tJavaRow_1 begin ] stop
 */



	
	/**
	 * [tFileProperties_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileProperties_1", false);
		start_Hash.put("tFileProperties_1", System.currentTimeMillis());
		
	
	currentComponent="tFileProperties_1";

	
		int tos_count_tFileProperties_1 = 0;
		



java.io.File file_tFileProperties_1 = new java.io.File(context.TemplateFile);
row3 = new row3Struct();

if(file_tFileProperties_1.exists()) {
    row3.abs_path = file_tFileProperties_1.getAbsolutePath();
    row3.dirname = file_tFileProperties_1.getParent();
    row3.basename = file_tFileProperties_1.getName();
    String r_tFileProperties_1 = (file_tFileProperties_1.canRead())?"r":"-";
	String w_tFileProperties_1 = (file_tFileProperties_1.canWrite())?"w":"-";
	//String x_ = (file_.canExecute())?"x":"-"; /*since JDK1.6*/
    row3.mode_string = r_tFileProperties_1 + w_tFileProperties_1;
    row3.size = file_tFileProperties_1.length();
    row3.mtime = file_tFileProperties_1.lastModified();
    row3.mtime_string =(new java.util.Date(file_tFileProperties_1.lastModified())).toString();
	
	
}
 



/**
 * [tFileProperties_1 begin ] stop
 */
	
	/**
	 * [tFileProperties_1 main ] start
	 */

	

	
	
	currentComponent="tFileProperties_1";

	

 


	tos_count_tFileProperties_1++;

/**
 * [tFileProperties_1 main ] stop
 */
	
	/**
	 * [tFileProperties_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileProperties_1";

	

 



/**
 * [tFileProperties_1 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_1 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row3");
					}
					

    // code sample:
//
// multiply by 2 the row identifier
// output_row.id = row3.id * 2;
//
// lowercase the name
// output_row.name = row3.name.toLowerCase();
 
String fileDate = context.fileName.substring(4, 10);
System.out.println(context.fileName);
System.out.println(fileDate);
String month = fileDate.substring(0, 2);
String day = fileDate.substring(2, 4);
String year = "20" + fileDate.substring(4, 6);
System.out.println("month");
System.out.println(month);
System.out.println("day");
System.out.println(day);
System.out.println("year");
System.out.println(year);
context.OutputFileName = row3.basename.replace("TEMPLATE",day + month + year);

System.out.println(context.OutputFileName);
    nb_line_tJavaRow_1++;   

 


	tos_count_tJavaRow_1++;

/**
 * [tJavaRow_1 main ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 process_data_end ] stop
 */



	
	/**
	 * [tFileProperties_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileProperties_1";

	

 



/**
 * [tFileProperties_1 process_data_end ] stop
 */
	
	/**
	 * [tFileProperties_1 end ] start
	 */

	

	
	
	currentComponent="tFileProperties_1";

	

 

ok_Hash.put("tFileProperties_1", true);
end_Hash.put("tFileProperties_1", System.currentTimeMillis());




/**
 * [tFileProperties_1 end ] stop
 */

	
	/**
	 * [tJavaRow_1 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

globalMap.put("tJavaRow_1_NB_LINE",nb_line_tJavaRow_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tJavaRow_1", true);
end_Hash.put("tJavaRow_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk8", 0, "ok");
				}
				tFileList_1Process(globalMap);



/**
 * [tJavaRow_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileProperties_1 finally ] start
	 */

	

	
	
	currentComponent="tFileProperties_1";

	

 



/**
 * [tFileProperties_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileProperties_1_SUBPROCESS_STATE", 1);
	}
	


public static class out2Struct implements routines.system.IPersistableRow<out2Struct> {
    final static byte[] commonByteArrayLock_DEV_TRANSFORM_OSG = new byte[0];
    static byte[] commonByteArray_DEV_TRANSFORM_OSG = new byte[0];

	
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String ACCT;

				public String getACCT () {
					return this.ACCT;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String FULL_STYLE;

				public String getFULL_STYLE () {
					return this.FULL_STYLE;
				}
				
			    public String STYLE_NAME;

				public String getSTYLE_NAME () {
					return this.STYLE_NAME;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String LABEL;

				public String getLABEL () {
					return this.LABEL;
				}
				
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SUB_BRAND;

				public String getSUB_BRAND () {
					return this.SUB_BRAND;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public Double QTY;

				public Double getQTY () {
					return this.QTY;
				}
				
			    public Double ORIGINAL_COST;

				public Double getORIGINAL_COST () {
					return this.ORIGINAL_COST;
				}
				
			    public Double CURRENT_COST;

				public Double getCURRENT_COST () {
					return this.CURRENT_COST;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE_CONFIGURATION;

				public String getSIZE_CONFIGURATION () {
					return this.SIZE_CONFIGURATION;
				}
				
			    public String SIZE_SCALE;

				public String getSIZE_SCALE () {
					return this.SIZE_SCALE;
				}
				
			    public String FABRIC_CONTENT;

				public String getFABRIC_CONTENT () {
					return this.FABRIC_CONTENT;
				}
				
			    public String WT_CONST;

				public String getWT_CONST () {
					return this.WT_CONST;
				}
				
			    public String KNIT_WOVEN;

				public String getKNIT_WOVEN () {
					return this.KNIT_WOVEN;
				}
				
			    public String ORIGINAL_ETD;

				public String getORIGINAL_ETD () {
					return this.ORIGINAL_ETD;
				}
				
			    public String ACTUAL_ETD;

				public String getACTUAL_ETD () {
					return this.ACTUAL_ETD;
				}
				
			    public String PO_REVISION;

				public String getPO_REVISION () {
					return this.PO_REVISION;
				}
				
			    public String COUNTRY;

				public String getCOUNTRY () {
					return this.COUNTRY;
				}
				
			    public String CONTRACTOR;

				public String getCONTRACTOR () {
					return this.CONTRACTOR;
				}
				
			    public String ETD_PORT;

				public String getETD_PORT () {
					return this.ETD_PORT;
				}
				
			    public String FACTORY_INVOICE;

				public String getFACTORY_INVOICE () {
					return this.FACTORY_INVOICE;
				}
				
			    public String PROFORMA_TO_CUSTOMER;

				public String getPROFORMA_TO_CUSTOMER () {
					return this.PROFORMA_TO_CUSTOMER;
				}
				
			    public String CARGO_READY_DATE;

				public String getCARGO_READY_DATE () {
					return this.CARGO_READY_DATE;
				}
				
			    public String BOOKING_APPROVAL_DATE;

				public String getBOOKING_APPROVAL_DATE () {
					return this.BOOKING_APPROVAL_DATE;
				}
				
			    public String ACTUAL_PICK_UP_DATE;

				public String getACTUAL_PICK_UP_DATE () {
					return this.ACTUAL_PICK_UP_DATE;
				}
				
			    public String COPY_ORG_DOC_TO_CUST;

				public String getCOPY_ORG_DOC_TO_CUST () {
					return this.COPY_ORG_DOC_TO_CUST;
				}
				
			    public String ORG_DOCS_TO_CUST;

				public String getORG_DOCS_TO_CUST () {
					return this.ORG_DOCS_TO_CUST;
				}
				
			    public String QTY_PENDING_SHIP;

				public String getQTY_PENDING_SHIP () {
					return this.QTY_PENDING_SHIP;
				}
				
			    public String QTY_SHIPPED;

				public String getQTY_SHIPPED () {
					return this.QTY_SHIPPED;
				}
				
			    public String BOAT_AIR;

				public String getBOAT_AIR () {
					return this.BOAT_AIR;
				}
				
			    public String FREGHT_TYPE;

				public String getFREGHT_TYPE () {
					return this.FREGHT_TYPE;
				}
				
			    public String PO;

				public String getPO () {
					return this.PO;
				}
				
			    public String PO_COMPLETED;

				public String getPO_COMPLETED () {
					return this.PO_COMPLETED;
				}
				
			    public String PACKING_OF_THE_STYLE;

				public String getPACKING_OF_THE_STYLE () {
					return this.PACKING_OF_THE_STYLE;
				}
				
			    public String COMMENTS1;

				public String getCOMMENTS1 () {
					return this.COMMENTS1;
				}
				
			    public String COMMENTS2;

				public String getCOMMENTS2 () {
					return this.COMMENTS2;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SIZE2;

				public String getSIZE2 () {
					return this.SIZE2;
				}
				
			    public String UPC3;

				public String getUPC3 () {
					return this.UPC3;
				}
				
			    public String SIZE4;

				public String getSIZE4 () {
					return this.SIZE4;
				}
				
			    public String UPC5;

				public String getUPC5 () {
					return this.UPC5;
				}
				
			    public String SIZE6;

				public String getSIZE6 () {
					return this.SIZE6;
				}
				
			    public String UPC7;

				public String getUPC7 () {
					return this.UPC7;
				}
				
			    public String SIZE8;

				public String getSIZE8 () {
					return this.SIZE8;
				}
				
			    public String UPC9;

				public String getUPC9 () {
					return this.UPC9;
				}
				
			    public String SIZE10;

				public String getSIZE10 () {
					return this.SIZE10;
				}
				
			    public String UPC11;

				public String getUPC11 () {
					return this.UPC11;
				}
				
			    public String SIZE12;

				public String getSIZE12 () {
					return this.SIZE12;
				}
				
			    public String UPC13;

				public String getUPC13 () {
					return this.UPC13;
				}
				
			    public String SIZE14;

				public String getSIZE14 () {
					return this.SIZE14;
				}
				
			    public String UPC15;

				public String getUPC15 () {
					return this.UPC15;
				}
				
			    public String SIZE16;

				public String getSIZE16 () {
					return this.SIZE16;
				}
				
			    public String UPC17;

				public String getUPC17 () {
					return this.UPC17;
				}
				
			    public String SIZE18;

				public String getSIZE18 () {
					return this.SIZE18;
				}
				
			    public String UPC19;

				public String getUPC19 () {
					return this.UPC19;
				}
				
			    public String SIZE20;

				public String getSIZE20 () {
					return this.SIZE20;
				}
				
			    public String UPC21;

				public String getUPC21 () {
					return this.UPC21;
				}
				
			    public String SIZE22;

				public String getSIZE22 () {
					return this.SIZE22;
				}
				
			    public String UPC23;

				public String getUPC23 () {
					return this.UPC23;
				}
				
			    public String SIZE_ASSORTED;

				public String getSIZE_ASSORTED () {
					return this.SIZE_ASSORTED;
				}
				
			    public String UPC_ASSORTED;

				public String getUPC_ASSORTED () {
					return this.UPC_ASSORTED;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_TRANSFORM_OSG.length) {
				if(length < 1024 && commonByteArray_DEV_TRANSFORM_OSG.length == 0) {
   					commonByteArray_DEV_TRANSFORM_OSG = new byte[1024];
				} else {
   					commonByteArray_DEV_TRANSFORM_OSG = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_TRANSFORM_OSG, 0, length);
			strReturn = new String(commonByteArray_DEV_TRANSFORM_OSG, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_TRANSFORM_OSG) {

        	try {

        		int length = 0;
		
					this.SEASON = readString(dis);
					
					this.ACCT = readString(dis);
					
					this.REF = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.FULL_STYLE = readString(dis);
					
					this.STYLE_NAME = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.LABEL = readString(dis);
					
					this.BRAND = readString(dis);
					
					this.SUB_BRAND = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.FASHION = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.QTY = null;
           				} else {
           			    	this.QTY = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ORIGINAL_COST = null;
           				} else {
           			    	this.ORIGINAL_COST = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CURRENT_COST = null;
           				} else {
           			    	this.CURRENT_COST = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE_CONFIGURATION = readString(dis);
					
					this.SIZE_SCALE = readString(dis);
					
					this.FABRIC_CONTENT = readString(dis);
					
					this.WT_CONST = readString(dis);
					
					this.KNIT_WOVEN = readString(dis);
					
					this.ORIGINAL_ETD = readString(dis);
					
					this.ACTUAL_ETD = readString(dis);
					
					this.PO_REVISION = readString(dis);
					
					this.COUNTRY = readString(dis);
					
					this.CONTRACTOR = readString(dis);
					
					this.ETD_PORT = readString(dis);
					
					this.FACTORY_INVOICE = readString(dis);
					
					this.PROFORMA_TO_CUSTOMER = readString(dis);
					
					this.CARGO_READY_DATE = readString(dis);
					
					this.BOOKING_APPROVAL_DATE = readString(dis);
					
					this.ACTUAL_PICK_UP_DATE = readString(dis);
					
					this.COPY_ORG_DOC_TO_CUST = readString(dis);
					
					this.ORG_DOCS_TO_CUST = readString(dis);
					
					this.QTY_PENDING_SHIP = readString(dis);
					
					this.QTY_SHIPPED = readString(dis);
					
					this.BOAT_AIR = readString(dis);
					
					this.FREGHT_TYPE = readString(dis);
					
					this.PO = readString(dis);
					
					this.PO_COMPLETED = readString(dis);
					
					this.PACKING_OF_THE_STYLE = readString(dis);
					
					this.COMMENTS1 = readString(dis);
					
					this.COMMENTS2 = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SIZE2 = readString(dis);
					
					this.UPC3 = readString(dis);
					
					this.SIZE4 = readString(dis);
					
					this.UPC5 = readString(dis);
					
					this.SIZE6 = readString(dis);
					
					this.UPC7 = readString(dis);
					
					this.SIZE8 = readString(dis);
					
					this.UPC9 = readString(dis);
					
					this.SIZE10 = readString(dis);
					
					this.UPC11 = readString(dis);
					
					this.SIZE12 = readString(dis);
					
					this.UPC13 = readString(dis);
					
					this.SIZE14 = readString(dis);
					
					this.UPC15 = readString(dis);
					
					this.SIZE16 = readString(dis);
					
					this.UPC17 = readString(dis);
					
					this.SIZE18 = readString(dis);
					
					this.UPC19 = readString(dis);
					
					this.SIZE20 = readString(dis);
					
					this.UPC21 = readString(dis);
					
					this.SIZE22 = readString(dis);
					
					this.UPC23 = readString(dis);
					
					this.SIZE_ASSORTED = readString(dis);
					
					this.UPC_ASSORTED = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.ACCT,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.FULL_STYLE,dos);
					
					// String
				
						writeString(this.STYLE_NAME,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.LABEL,dos);
					
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SUB_BRAND,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// Double
				
						if(this.QTY == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.QTY);
		            	}
					
					// Double
				
						if(this.ORIGINAL_COST == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.ORIGINAL_COST);
		            	}
					
					// Double
				
						if(this.CURRENT_COST == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.CURRENT_COST);
		            	}
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_CONFIGURATION,dos);
					
					// String
				
						writeString(this.SIZE_SCALE,dos);
					
					// String
				
						writeString(this.FABRIC_CONTENT,dos);
					
					// String
				
						writeString(this.WT_CONST,dos);
					
					// String
				
						writeString(this.KNIT_WOVEN,dos);
					
					// String
				
						writeString(this.ORIGINAL_ETD,dos);
					
					// String
				
						writeString(this.ACTUAL_ETD,dos);
					
					// String
				
						writeString(this.PO_REVISION,dos);
					
					// String
				
						writeString(this.COUNTRY,dos);
					
					// String
				
						writeString(this.CONTRACTOR,dos);
					
					// String
				
						writeString(this.ETD_PORT,dos);
					
					// String
				
						writeString(this.FACTORY_INVOICE,dos);
					
					// String
				
						writeString(this.PROFORMA_TO_CUSTOMER,dos);
					
					// String
				
						writeString(this.CARGO_READY_DATE,dos);
					
					// String
				
						writeString(this.BOOKING_APPROVAL_DATE,dos);
					
					// String
				
						writeString(this.ACTUAL_PICK_UP_DATE,dos);
					
					// String
				
						writeString(this.COPY_ORG_DOC_TO_CUST,dos);
					
					// String
				
						writeString(this.ORG_DOCS_TO_CUST,dos);
					
					// String
				
						writeString(this.QTY_PENDING_SHIP,dos);
					
					// String
				
						writeString(this.QTY_SHIPPED,dos);
					
					// String
				
						writeString(this.BOAT_AIR,dos);
					
					// String
				
						writeString(this.FREGHT_TYPE,dos);
					
					// String
				
						writeString(this.PO,dos);
					
					// String
				
						writeString(this.PO_COMPLETED,dos);
					
					// String
				
						writeString(this.PACKING_OF_THE_STYLE,dos);
					
					// String
				
						writeString(this.COMMENTS1,dos);
					
					// String
				
						writeString(this.COMMENTS2,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SIZE2,dos);
					
					// String
				
						writeString(this.UPC3,dos);
					
					// String
				
						writeString(this.SIZE4,dos);
					
					// String
				
						writeString(this.UPC5,dos);
					
					// String
				
						writeString(this.SIZE6,dos);
					
					// String
				
						writeString(this.UPC7,dos);
					
					// String
				
						writeString(this.SIZE8,dos);
					
					// String
				
						writeString(this.UPC9,dos);
					
					// String
				
						writeString(this.SIZE10,dos);
					
					// String
				
						writeString(this.UPC11,dos);
					
					// String
				
						writeString(this.SIZE12,dos);
					
					// String
				
						writeString(this.UPC13,dos);
					
					// String
				
						writeString(this.SIZE14,dos);
					
					// String
				
						writeString(this.UPC15,dos);
					
					// String
				
						writeString(this.SIZE16,dos);
					
					// String
				
						writeString(this.UPC17,dos);
					
					// String
				
						writeString(this.SIZE18,dos);
					
					// String
				
						writeString(this.UPC19,dos);
					
					// String
				
						writeString(this.SIZE20,dos);
					
					// String
				
						writeString(this.UPC21,dos);
					
					// String
				
						writeString(this.SIZE22,dos);
					
					// String
				
						writeString(this.UPC23,dos);
					
					// String
				
						writeString(this.SIZE_ASSORTED,dos);
					
					// String
				
						writeString(this.UPC_ASSORTED,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SEASON="+SEASON);
		sb.append(",ACCT="+ACCT);
		sb.append(",REF="+REF);
		sb.append(",STYLE="+STYLE);
		sb.append(",FULL_STYLE="+FULL_STYLE);
		sb.append(",STYLE_NAME="+STYLE_NAME);
		sb.append(",COLOR="+COLOR);
		sb.append(",LABEL="+LABEL);
		sb.append(",BRAND="+BRAND);
		sb.append(",SUB_BRAND="+SUB_BRAND);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",FASHION="+FASHION);
		sb.append(",QTY="+String.valueOf(QTY));
		sb.append(",ORIGINAL_COST="+String.valueOf(ORIGINAL_COST));
		sb.append(",CURRENT_COST="+String.valueOf(CURRENT_COST));
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE_CONFIGURATION="+SIZE_CONFIGURATION);
		sb.append(",SIZE_SCALE="+SIZE_SCALE);
		sb.append(",FABRIC_CONTENT="+FABRIC_CONTENT);
		sb.append(",WT_CONST="+WT_CONST);
		sb.append(",KNIT_WOVEN="+KNIT_WOVEN);
		sb.append(",ORIGINAL_ETD="+ORIGINAL_ETD);
		sb.append(",ACTUAL_ETD="+ACTUAL_ETD);
		sb.append(",PO_REVISION="+PO_REVISION);
		sb.append(",COUNTRY="+COUNTRY);
		sb.append(",CONTRACTOR="+CONTRACTOR);
		sb.append(",ETD_PORT="+ETD_PORT);
		sb.append(",FACTORY_INVOICE="+FACTORY_INVOICE);
		sb.append(",PROFORMA_TO_CUSTOMER="+PROFORMA_TO_CUSTOMER);
		sb.append(",CARGO_READY_DATE="+CARGO_READY_DATE);
		sb.append(",BOOKING_APPROVAL_DATE="+BOOKING_APPROVAL_DATE);
		sb.append(",ACTUAL_PICK_UP_DATE="+ACTUAL_PICK_UP_DATE);
		sb.append(",COPY_ORG_DOC_TO_CUST="+COPY_ORG_DOC_TO_CUST);
		sb.append(",ORG_DOCS_TO_CUST="+ORG_DOCS_TO_CUST);
		sb.append(",QTY_PENDING_SHIP="+QTY_PENDING_SHIP);
		sb.append(",QTY_SHIPPED="+QTY_SHIPPED);
		sb.append(",BOAT_AIR="+BOAT_AIR);
		sb.append(",FREGHT_TYPE="+FREGHT_TYPE);
		sb.append(",PO="+PO);
		sb.append(",PO_COMPLETED="+PO_COMPLETED);
		sb.append(",PACKING_OF_THE_STYLE="+PACKING_OF_THE_STYLE);
		sb.append(",COMMENTS1="+COMMENTS1);
		sb.append(",COMMENTS2="+COMMENTS2);
		sb.append(",SIZE="+SIZE);
		sb.append(",UPC="+UPC);
		sb.append(",SIZE2="+SIZE2);
		sb.append(",UPC3="+UPC3);
		sb.append(",SIZE4="+SIZE4);
		sb.append(",UPC5="+UPC5);
		sb.append(",SIZE6="+SIZE6);
		sb.append(",UPC7="+UPC7);
		sb.append(",SIZE8="+SIZE8);
		sb.append(",UPC9="+UPC9);
		sb.append(",SIZE10="+SIZE10);
		sb.append(",UPC11="+UPC11);
		sb.append(",SIZE12="+SIZE12);
		sb.append(",UPC13="+UPC13);
		sb.append(",SIZE14="+SIZE14);
		sb.append(",UPC15="+UPC15);
		sb.append(",SIZE16="+SIZE16);
		sb.append(",UPC17="+UPC17);
		sb.append(",SIZE18="+SIZE18);
		sb.append(",UPC19="+UPC19);
		sb.append(",SIZE20="+SIZE20);
		sb.append(",UPC21="+UPC21);
		sb.append(",SIZE22="+SIZE22);
		sb.append(",UPC23="+UPC23);
		sb.append(",SIZE_ASSORTED="+SIZE_ASSORTED);
		sb.append(",UPC_ASSORTED="+UPC_ASSORTED);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_DEV_TRANSFORM_OSG = new byte[0];
    static byte[] commonByteArray_DEV_TRANSFORM_OSG = new byte[0];

	
			    public String SEASON1;

				public String getSEASON1 () {
					return this.SEASON1;
				}
				
			    public Integer SEASON2;

				public Integer getSEASON2 () {
					return this.SEASON2;
				}
				
			    public String ACCT;

				public String getACCT () {
					return this.ACCT;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String STYLE_NAME;

				public String getSTYLE_NAME () {
					return this.STYLE_NAME;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String LABEL;

				public String getLABEL () {
					return this.LABEL;
				}
				
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SUB_BRAND;

				public String getSUB_BRAND () {
					return this.SUB_BRAND;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String QTY;

				public String getQTY () {
					return this.QTY;
				}
				
			    public String ORIGINAL_COST;

				public String getORIGINAL_COST () {
					return this.ORIGINAL_COST;
				}
				
			    public String CURRENT_COST;

				public String getCURRENT_COST () {
					return this.CURRENT_COST;
				}
				
			    public String PRICE;

				public String getPRICE () {
					return this.PRICE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE_CONFIGURATION;

				public String getSIZE_CONFIGURATION () {
					return this.SIZE_CONFIGURATION;
				}
				
			    public String SIZE_SCALE;

				public String getSIZE_SCALE () {
					return this.SIZE_SCALE;
				}
				
			    public String FABRIC_CONTENT;

				public String getFABRIC_CONTENT () {
					return this.FABRIC_CONTENT;
				}
				
			    public String WT_CONST;

				public String getWT_CONST () {
					return this.WT_CONST;
				}
				
			    public String KNIT_WOVEN;

				public String getKNIT_WOVEN () {
					return this.KNIT_WOVEN;
				}
				
			    public String ORIGINAL_ETD;

				public String getORIGINAL_ETD () {
					return this.ORIGINAL_ETD;
				}
				
			    public String ACTUAL_ETD;

				public String getACTUAL_ETD () {
					return this.ACTUAL_ETD;
				}
				
			    public String PO_REVISION;

				public String getPO_REVISION () {
					return this.PO_REVISION;
				}
				
			    public String COUNTRY;

				public String getCOUNTRY () {
					return this.COUNTRY;
				}
				
			    public String CONTRACTOR;

				public String getCONTRACTOR () {
					return this.CONTRACTOR;
				}
				
			    public String ETD_PORT;

				public String getETD_PORT () {
					return this.ETD_PORT;
				}
				
			    public String FACTORY_INVOICE;

				public String getFACTORY_INVOICE () {
					return this.FACTORY_INVOICE;
				}
				
			    public String PROFORMA_TO_CUSTOMER;

				public String getPROFORMA_TO_CUSTOMER () {
					return this.PROFORMA_TO_CUSTOMER;
				}
				
			    public String CARGO_READY_DATE;

				public String getCARGO_READY_DATE () {
					return this.CARGO_READY_DATE;
				}
				
			    public String BOOKING_APPROVAL_DATE;

				public String getBOOKING_APPROVAL_DATE () {
					return this.BOOKING_APPROVAL_DATE;
				}
				
			    public String ACTUAL_PICK_UP_DATE;

				public String getACTUAL_PICK_UP_DATE () {
					return this.ACTUAL_PICK_UP_DATE;
				}
				
			    public String COPY_ORG_DOC_TO_CUST;

				public String getCOPY_ORG_DOC_TO_CUST () {
					return this.COPY_ORG_DOC_TO_CUST;
				}
				
			    public String ORG_DOCS_TO_CUST;

				public String getORG_DOCS_TO_CUST () {
					return this.ORG_DOCS_TO_CUST;
				}
				
			    public String QTY_PENDING_SHIP;

				public String getQTY_PENDING_SHIP () {
					return this.QTY_PENDING_SHIP;
				}
				
			    public String QTY_SHIPPED;

				public String getQTY_SHIPPED () {
					return this.QTY_SHIPPED;
				}
				
			    public String BOAT_AIR;

				public String getBOAT_AIR () {
					return this.BOAT_AIR;
				}
				
			    public String FREGHT_TYPE;

				public String getFREGHT_TYPE () {
					return this.FREGHT_TYPE;
				}
				
			    public String PO;

				public String getPO () {
					return this.PO;
				}
				
			    public String PO_COMPLETED;

				public String getPO_COMPLETED () {
					return this.PO_COMPLETED;
				}
				
			    public String PACKING_OF_THE_STYLE;

				public String getPACKING_OF_THE_STYLE () {
					return this.PACKING_OF_THE_STYLE;
				}
				
			    public String COMMENTS1;

				public String getCOMMENTS1 () {
					return this.COMMENTS1;
				}
				
			    public String COMMENTS2;

				public String getCOMMENTS2 () {
					return this.COMMENTS2;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SIZE2;

				public String getSIZE2 () {
					return this.SIZE2;
				}
				
			    public String UPC3;

				public String getUPC3 () {
					return this.UPC3;
				}
				
			    public String SIZE4;

				public String getSIZE4 () {
					return this.SIZE4;
				}
				
			    public String UPC5;

				public String getUPC5 () {
					return this.UPC5;
				}
				
			    public String SIZE6;

				public String getSIZE6 () {
					return this.SIZE6;
				}
				
			    public String UPC7;

				public String getUPC7 () {
					return this.UPC7;
				}
				
			    public String SIZE8;

				public String getSIZE8 () {
					return this.SIZE8;
				}
				
			    public String UPC9;

				public String getUPC9 () {
					return this.UPC9;
				}
				
			    public String SIZE10;

				public String getSIZE10 () {
					return this.SIZE10;
				}
				
			    public String UPC11;

				public String getUPC11 () {
					return this.UPC11;
				}
				
			    public String SIZE12;

				public String getSIZE12 () {
					return this.SIZE12;
				}
				
			    public String UPC13;

				public String getUPC13 () {
					return this.UPC13;
				}
				
			    public String SIZE14;

				public String getSIZE14 () {
					return this.SIZE14;
				}
				
			    public String UPC15;

				public String getUPC15 () {
					return this.UPC15;
				}
				
			    public String SIZE16;

				public String getSIZE16 () {
					return this.SIZE16;
				}
				
			    public String UPC17;

				public String getUPC17 () {
					return this.UPC17;
				}
				
			    public String SIZE18;

				public String getSIZE18 () {
					return this.SIZE18;
				}
				
			    public String UPC19;

				public String getUPC19 () {
					return this.UPC19;
				}
				
			    public String SIZE20;

				public String getSIZE20 () {
					return this.SIZE20;
				}
				
			    public String UPC21;

				public String getUPC21 () {
					return this.UPC21;
				}
				
			    public String SIZE22;

				public String getSIZE22 () {
					return this.SIZE22;
				}
				
			    public String UPC23;

				public String getUPC23 () {
					return this.UPC23;
				}
				
			    public String SIZE_ASSORTED;

				public String getSIZE_ASSORTED () {
					return this.SIZE_ASSORTED;
				}
				
			    public String UPC_ASSORTED;

				public String getUPC_ASSORTED () {
					return this.UPC_ASSORTED;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_TRANSFORM_OSG.length) {
				if(length < 1024 && commonByteArray_DEV_TRANSFORM_OSG.length == 0) {
   					commonByteArray_DEV_TRANSFORM_OSG = new byte[1024];
				} else {
   					commonByteArray_DEV_TRANSFORM_OSG = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_TRANSFORM_OSG, 0, length);
			strReturn = new String(commonByteArray_DEV_TRANSFORM_OSG, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_TRANSFORM_OSG) {

        	try {

        		int length = 0;
		
					this.SEASON1 = readString(dis);
					
						this.SEASON2 = readInteger(dis);
					
					this.ACCT = readString(dis);
					
					this.REF = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.STYLE_NAME = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.LABEL = readString(dis);
					
					this.BRAND = readString(dis);
					
					this.SUB_BRAND = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.QTY = readString(dis);
					
					this.ORIGINAL_COST = readString(dis);
					
					this.CURRENT_COST = readString(dis);
					
					this.PRICE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE_CONFIGURATION = readString(dis);
					
					this.SIZE_SCALE = readString(dis);
					
					this.FABRIC_CONTENT = readString(dis);
					
					this.WT_CONST = readString(dis);
					
					this.KNIT_WOVEN = readString(dis);
					
					this.ORIGINAL_ETD = readString(dis);
					
					this.ACTUAL_ETD = readString(dis);
					
					this.PO_REVISION = readString(dis);
					
					this.COUNTRY = readString(dis);
					
					this.CONTRACTOR = readString(dis);
					
					this.ETD_PORT = readString(dis);
					
					this.FACTORY_INVOICE = readString(dis);
					
					this.PROFORMA_TO_CUSTOMER = readString(dis);
					
					this.CARGO_READY_DATE = readString(dis);
					
					this.BOOKING_APPROVAL_DATE = readString(dis);
					
					this.ACTUAL_PICK_UP_DATE = readString(dis);
					
					this.COPY_ORG_DOC_TO_CUST = readString(dis);
					
					this.ORG_DOCS_TO_CUST = readString(dis);
					
					this.QTY_PENDING_SHIP = readString(dis);
					
					this.QTY_SHIPPED = readString(dis);
					
					this.BOAT_AIR = readString(dis);
					
					this.FREGHT_TYPE = readString(dis);
					
					this.PO = readString(dis);
					
					this.PO_COMPLETED = readString(dis);
					
					this.PACKING_OF_THE_STYLE = readString(dis);
					
					this.COMMENTS1 = readString(dis);
					
					this.COMMENTS2 = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SIZE2 = readString(dis);
					
					this.UPC3 = readString(dis);
					
					this.SIZE4 = readString(dis);
					
					this.UPC5 = readString(dis);
					
					this.SIZE6 = readString(dis);
					
					this.UPC7 = readString(dis);
					
					this.SIZE8 = readString(dis);
					
					this.UPC9 = readString(dis);
					
					this.SIZE10 = readString(dis);
					
					this.UPC11 = readString(dis);
					
					this.SIZE12 = readString(dis);
					
					this.UPC13 = readString(dis);
					
					this.SIZE14 = readString(dis);
					
					this.UPC15 = readString(dis);
					
					this.SIZE16 = readString(dis);
					
					this.UPC17 = readString(dis);
					
					this.SIZE18 = readString(dis);
					
					this.UPC19 = readString(dis);
					
					this.SIZE20 = readString(dis);
					
					this.UPC21 = readString(dis);
					
					this.SIZE22 = readString(dis);
					
					this.UPC23 = readString(dis);
					
					this.SIZE_ASSORTED = readString(dis);
					
					this.UPC_ASSORTED = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SEASON1,dos);
					
					// Integer
				
						writeInteger(this.SEASON2,dos);
					
					// String
				
						writeString(this.ACCT,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.STYLE_NAME,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.LABEL,dos);
					
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SUB_BRAND,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.QTY,dos);
					
					// String
				
						writeString(this.ORIGINAL_COST,dos);
					
					// String
				
						writeString(this.CURRENT_COST,dos);
					
					// String
				
						writeString(this.PRICE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_CONFIGURATION,dos);
					
					// String
				
						writeString(this.SIZE_SCALE,dos);
					
					// String
				
						writeString(this.FABRIC_CONTENT,dos);
					
					// String
				
						writeString(this.WT_CONST,dos);
					
					// String
				
						writeString(this.KNIT_WOVEN,dos);
					
					// String
				
						writeString(this.ORIGINAL_ETD,dos);
					
					// String
				
						writeString(this.ACTUAL_ETD,dos);
					
					// String
				
						writeString(this.PO_REVISION,dos);
					
					// String
				
						writeString(this.COUNTRY,dos);
					
					// String
				
						writeString(this.CONTRACTOR,dos);
					
					// String
				
						writeString(this.ETD_PORT,dos);
					
					// String
				
						writeString(this.FACTORY_INVOICE,dos);
					
					// String
				
						writeString(this.PROFORMA_TO_CUSTOMER,dos);
					
					// String
				
						writeString(this.CARGO_READY_DATE,dos);
					
					// String
				
						writeString(this.BOOKING_APPROVAL_DATE,dos);
					
					// String
				
						writeString(this.ACTUAL_PICK_UP_DATE,dos);
					
					// String
				
						writeString(this.COPY_ORG_DOC_TO_CUST,dos);
					
					// String
				
						writeString(this.ORG_DOCS_TO_CUST,dos);
					
					// String
				
						writeString(this.QTY_PENDING_SHIP,dos);
					
					// String
				
						writeString(this.QTY_SHIPPED,dos);
					
					// String
				
						writeString(this.BOAT_AIR,dos);
					
					// String
				
						writeString(this.FREGHT_TYPE,dos);
					
					// String
				
						writeString(this.PO,dos);
					
					// String
				
						writeString(this.PO_COMPLETED,dos);
					
					// String
				
						writeString(this.PACKING_OF_THE_STYLE,dos);
					
					// String
				
						writeString(this.COMMENTS1,dos);
					
					// String
				
						writeString(this.COMMENTS2,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SIZE2,dos);
					
					// String
				
						writeString(this.UPC3,dos);
					
					// String
				
						writeString(this.SIZE4,dos);
					
					// String
				
						writeString(this.UPC5,dos);
					
					// String
				
						writeString(this.SIZE6,dos);
					
					// String
				
						writeString(this.UPC7,dos);
					
					// String
				
						writeString(this.SIZE8,dos);
					
					// String
				
						writeString(this.UPC9,dos);
					
					// String
				
						writeString(this.SIZE10,dos);
					
					// String
				
						writeString(this.UPC11,dos);
					
					// String
				
						writeString(this.SIZE12,dos);
					
					// String
				
						writeString(this.UPC13,dos);
					
					// String
				
						writeString(this.SIZE14,dos);
					
					// String
				
						writeString(this.UPC15,dos);
					
					// String
				
						writeString(this.SIZE16,dos);
					
					// String
				
						writeString(this.UPC17,dos);
					
					// String
				
						writeString(this.SIZE18,dos);
					
					// String
				
						writeString(this.UPC19,dos);
					
					// String
				
						writeString(this.SIZE20,dos);
					
					// String
				
						writeString(this.UPC21,dos);
					
					// String
				
						writeString(this.SIZE22,dos);
					
					// String
				
						writeString(this.UPC23,dos);
					
					// String
				
						writeString(this.SIZE_ASSORTED,dos);
					
					// String
				
						writeString(this.UPC_ASSORTED,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SEASON1="+SEASON1);
		sb.append(",SEASON2="+String.valueOf(SEASON2));
		sb.append(",ACCT="+ACCT);
		sb.append(",REF="+REF);
		sb.append(",STYLE="+STYLE);
		sb.append(",STYLE_NAME="+STYLE_NAME);
		sb.append(",COLOR="+COLOR);
		sb.append(",LABEL="+LABEL);
		sb.append(",BRAND="+BRAND);
		sb.append(",SUB_BRAND="+SUB_BRAND);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",FASHION="+FASHION);
		sb.append(",QTY="+QTY);
		sb.append(",ORIGINAL_COST="+ORIGINAL_COST);
		sb.append(",CURRENT_COST="+CURRENT_COST);
		sb.append(",PRICE="+PRICE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE_CONFIGURATION="+SIZE_CONFIGURATION);
		sb.append(",SIZE_SCALE="+SIZE_SCALE);
		sb.append(",FABRIC_CONTENT="+FABRIC_CONTENT);
		sb.append(",WT_CONST="+WT_CONST);
		sb.append(",KNIT_WOVEN="+KNIT_WOVEN);
		sb.append(",ORIGINAL_ETD="+ORIGINAL_ETD);
		sb.append(",ACTUAL_ETD="+ACTUAL_ETD);
		sb.append(",PO_REVISION="+PO_REVISION);
		sb.append(",COUNTRY="+COUNTRY);
		sb.append(",CONTRACTOR="+CONTRACTOR);
		sb.append(",ETD_PORT="+ETD_PORT);
		sb.append(",FACTORY_INVOICE="+FACTORY_INVOICE);
		sb.append(",PROFORMA_TO_CUSTOMER="+PROFORMA_TO_CUSTOMER);
		sb.append(",CARGO_READY_DATE="+CARGO_READY_DATE);
		sb.append(",BOOKING_APPROVAL_DATE="+BOOKING_APPROVAL_DATE);
		sb.append(",ACTUAL_PICK_UP_DATE="+ACTUAL_PICK_UP_DATE);
		sb.append(",COPY_ORG_DOC_TO_CUST="+COPY_ORG_DOC_TO_CUST);
		sb.append(",ORG_DOCS_TO_CUST="+ORG_DOCS_TO_CUST);
		sb.append(",QTY_PENDING_SHIP="+QTY_PENDING_SHIP);
		sb.append(",QTY_SHIPPED="+QTY_SHIPPED);
		sb.append(",BOAT_AIR="+BOAT_AIR);
		sb.append(",FREGHT_TYPE="+FREGHT_TYPE);
		sb.append(",PO="+PO);
		sb.append(",PO_COMPLETED="+PO_COMPLETED);
		sb.append(",PACKING_OF_THE_STYLE="+PACKING_OF_THE_STYLE);
		sb.append(",COMMENTS1="+COMMENTS1);
		sb.append(",COMMENTS2="+COMMENTS2);
		sb.append(",SIZE="+SIZE);
		sb.append(",UPC="+UPC);
		sb.append(",SIZE2="+SIZE2);
		sb.append(",UPC3="+UPC3);
		sb.append(",SIZE4="+SIZE4);
		sb.append(",UPC5="+UPC5);
		sb.append(",SIZE6="+SIZE6);
		sb.append(",UPC7="+UPC7);
		sb.append(",SIZE8="+SIZE8);
		sb.append(",UPC9="+UPC9);
		sb.append(",SIZE10="+SIZE10);
		sb.append(",UPC11="+UPC11);
		sb.append(",SIZE12="+SIZE12);
		sb.append(",UPC13="+UPC13);
		sb.append(",SIZE14="+SIZE14);
		sb.append(",UPC15="+UPC15);
		sb.append(",SIZE16="+SIZE16);
		sb.append(",UPC17="+UPC17);
		sb.append(",SIZE18="+SIZE18);
		sb.append(",UPC19="+UPC19);
		sb.append(",SIZE20="+SIZE20);
		sb.append(",UPC21="+UPC21);
		sb.append(",SIZE22="+SIZE22);
		sb.append(",UPC23="+UPC23);
		sb.append(",SIZE_ASSORTED="+SIZE_ASSORTED);
		sb.append(",UPC_ASSORTED="+UPC_ASSORTED);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
    final static byte[] commonByteArrayLock_DEV_TRANSFORM_OSG = new byte[0];
    static byte[] commonByteArray_DEV_TRANSFORM_OSG = new byte[0];

	
			    public String SEASON1;

				public String getSEASON1 () {
					return this.SEASON1;
				}
				
			    public Integer SEASON2;

				public Integer getSEASON2 () {
					return this.SEASON2;
				}
				
			    public String ACCT;

				public String getACCT () {
					return this.ACCT;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String STYLE_NAME;

				public String getSTYLE_NAME () {
					return this.STYLE_NAME;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String LABEL;

				public String getLABEL () {
					return this.LABEL;
				}
				
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SUB_BRAND;

				public String getSUB_BRAND () {
					return this.SUB_BRAND;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String QTY;

				public String getQTY () {
					return this.QTY;
				}
				
			    public String ORIGINAL_COST;

				public String getORIGINAL_COST () {
					return this.ORIGINAL_COST;
				}
				
			    public String CURRENT_COST;

				public String getCURRENT_COST () {
					return this.CURRENT_COST;
				}
				
			    public String PRICE;

				public String getPRICE () {
					return this.PRICE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE_CONFIGURATION;

				public String getSIZE_CONFIGURATION () {
					return this.SIZE_CONFIGURATION;
				}
				
			    public String SIZE_SCALE;

				public String getSIZE_SCALE () {
					return this.SIZE_SCALE;
				}
				
			    public String FABRIC_CONTENT;

				public String getFABRIC_CONTENT () {
					return this.FABRIC_CONTENT;
				}
				
			    public String WT_CONST;

				public String getWT_CONST () {
					return this.WT_CONST;
				}
				
			    public String KNIT_WOVEN;

				public String getKNIT_WOVEN () {
					return this.KNIT_WOVEN;
				}
				
			    public String ORIGINAL_ETD;

				public String getORIGINAL_ETD () {
					return this.ORIGINAL_ETD;
				}
				
			    public String ACTUAL_ETD;

				public String getACTUAL_ETD () {
					return this.ACTUAL_ETD;
				}
				
			    public String PO_REVISION;

				public String getPO_REVISION () {
					return this.PO_REVISION;
				}
				
			    public String COUNTRY;

				public String getCOUNTRY () {
					return this.COUNTRY;
				}
				
			    public String CONTRACTOR;

				public String getCONTRACTOR () {
					return this.CONTRACTOR;
				}
				
			    public String ETD_PORT;

				public String getETD_PORT () {
					return this.ETD_PORT;
				}
				
			    public String FACTORY_INVOICE;

				public String getFACTORY_INVOICE () {
					return this.FACTORY_INVOICE;
				}
				
			    public String PROFORMA_TO_CUSTOMER;

				public String getPROFORMA_TO_CUSTOMER () {
					return this.PROFORMA_TO_CUSTOMER;
				}
				
			    public String CARGO_READY_DATE;

				public String getCARGO_READY_DATE () {
					return this.CARGO_READY_DATE;
				}
				
			    public String BOOKING_APPROVAL_DATE;

				public String getBOOKING_APPROVAL_DATE () {
					return this.BOOKING_APPROVAL_DATE;
				}
				
			    public String ACTUAL_PICK_UP_DATE;

				public String getACTUAL_PICK_UP_DATE () {
					return this.ACTUAL_PICK_UP_DATE;
				}
				
			    public String COPY_ORG_DOC_TO_CUST;

				public String getCOPY_ORG_DOC_TO_CUST () {
					return this.COPY_ORG_DOC_TO_CUST;
				}
				
			    public String ORG_DOCS_TO_CUST;

				public String getORG_DOCS_TO_CUST () {
					return this.ORG_DOCS_TO_CUST;
				}
				
			    public String QTY_PENDING_SHIP;

				public String getQTY_PENDING_SHIP () {
					return this.QTY_PENDING_SHIP;
				}
				
			    public String QTY_SHIPPED;

				public String getQTY_SHIPPED () {
					return this.QTY_SHIPPED;
				}
				
			    public String BOAT_AIR;

				public String getBOAT_AIR () {
					return this.BOAT_AIR;
				}
				
			    public String FREGHT_TYPE;

				public String getFREGHT_TYPE () {
					return this.FREGHT_TYPE;
				}
				
			    public String PO;

				public String getPO () {
					return this.PO;
				}
				
			    public String PO_COMPLETED;

				public String getPO_COMPLETED () {
					return this.PO_COMPLETED;
				}
				
			    public String PACKING_OF_THE_STYLE;

				public String getPACKING_OF_THE_STYLE () {
					return this.PACKING_OF_THE_STYLE;
				}
				
			    public String COMMENTS1;

				public String getCOMMENTS1 () {
					return this.COMMENTS1;
				}
				
			    public String COMMENTS2;

				public String getCOMMENTS2 () {
					return this.COMMENTS2;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SIZE2;

				public String getSIZE2 () {
					return this.SIZE2;
				}
				
			    public String UPC3;

				public String getUPC3 () {
					return this.UPC3;
				}
				
			    public String SIZE4;

				public String getSIZE4 () {
					return this.SIZE4;
				}
				
			    public String UPC5;

				public String getUPC5 () {
					return this.UPC5;
				}
				
			    public String SIZE6;

				public String getSIZE6 () {
					return this.SIZE6;
				}
				
			    public String UPC7;

				public String getUPC7 () {
					return this.UPC7;
				}
				
			    public String SIZE8;

				public String getSIZE8 () {
					return this.SIZE8;
				}
				
			    public String UPC9;

				public String getUPC9 () {
					return this.UPC9;
				}
				
			    public String SIZE10;

				public String getSIZE10 () {
					return this.SIZE10;
				}
				
			    public String UPC11;

				public String getUPC11 () {
					return this.UPC11;
				}
				
			    public String SIZE12;

				public String getSIZE12 () {
					return this.SIZE12;
				}
				
			    public String UPC13;

				public String getUPC13 () {
					return this.UPC13;
				}
				
			    public String SIZE14;

				public String getSIZE14 () {
					return this.SIZE14;
				}
				
			    public String UPC15;

				public String getUPC15 () {
					return this.UPC15;
				}
				
			    public String SIZE16;

				public String getSIZE16 () {
					return this.SIZE16;
				}
				
			    public String UPC17;

				public String getUPC17 () {
					return this.UPC17;
				}
				
			    public String SIZE18;

				public String getSIZE18 () {
					return this.SIZE18;
				}
				
			    public String UPC19;

				public String getUPC19 () {
					return this.UPC19;
				}
				
			    public String SIZE20;

				public String getSIZE20 () {
					return this.SIZE20;
				}
				
			    public String UPC21;

				public String getUPC21 () {
					return this.UPC21;
				}
				
			    public String SIZE22;

				public String getSIZE22 () {
					return this.SIZE22;
				}
				
			    public String UPC23;

				public String getUPC23 () {
					return this.UPC23;
				}
				
			    public String SIZE_ASSORTED;

				public String getSIZE_ASSORTED () {
					return this.SIZE_ASSORTED;
				}
				
			    public String UPC_ASSORTED;

				public String getUPC_ASSORTED () {
					return this.UPC_ASSORTED;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_TRANSFORM_OSG.length) {
				if(length < 1024 && commonByteArray_DEV_TRANSFORM_OSG.length == 0) {
   					commonByteArray_DEV_TRANSFORM_OSG = new byte[1024];
				} else {
   					commonByteArray_DEV_TRANSFORM_OSG = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_TRANSFORM_OSG, 0, length);
			strReturn = new String(commonByteArray_DEV_TRANSFORM_OSG, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_TRANSFORM_OSG) {

        	try {

        		int length = 0;
		
					this.SEASON1 = readString(dis);
					
						this.SEASON2 = readInteger(dis);
					
					this.ACCT = readString(dis);
					
					this.REF = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.STYLE_NAME = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.LABEL = readString(dis);
					
					this.BRAND = readString(dis);
					
					this.SUB_BRAND = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.QTY = readString(dis);
					
					this.ORIGINAL_COST = readString(dis);
					
					this.CURRENT_COST = readString(dis);
					
					this.PRICE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE_CONFIGURATION = readString(dis);
					
					this.SIZE_SCALE = readString(dis);
					
					this.FABRIC_CONTENT = readString(dis);
					
					this.WT_CONST = readString(dis);
					
					this.KNIT_WOVEN = readString(dis);
					
					this.ORIGINAL_ETD = readString(dis);
					
					this.ACTUAL_ETD = readString(dis);
					
					this.PO_REVISION = readString(dis);
					
					this.COUNTRY = readString(dis);
					
					this.CONTRACTOR = readString(dis);
					
					this.ETD_PORT = readString(dis);
					
					this.FACTORY_INVOICE = readString(dis);
					
					this.PROFORMA_TO_CUSTOMER = readString(dis);
					
					this.CARGO_READY_DATE = readString(dis);
					
					this.BOOKING_APPROVAL_DATE = readString(dis);
					
					this.ACTUAL_PICK_UP_DATE = readString(dis);
					
					this.COPY_ORG_DOC_TO_CUST = readString(dis);
					
					this.ORG_DOCS_TO_CUST = readString(dis);
					
					this.QTY_PENDING_SHIP = readString(dis);
					
					this.QTY_SHIPPED = readString(dis);
					
					this.BOAT_AIR = readString(dis);
					
					this.FREGHT_TYPE = readString(dis);
					
					this.PO = readString(dis);
					
					this.PO_COMPLETED = readString(dis);
					
					this.PACKING_OF_THE_STYLE = readString(dis);
					
					this.COMMENTS1 = readString(dis);
					
					this.COMMENTS2 = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SIZE2 = readString(dis);
					
					this.UPC3 = readString(dis);
					
					this.SIZE4 = readString(dis);
					
					this.UPC5 = readString(dis);
					
					this.SIZE6 = readString(dis);
					
					this.UPC7 = readString(dis);
					
					this.SIZE8 = readString(dis);
					
					this.UPC9 = readString(dis);
					
					this.SIZE10 = readString(dis);
					
					this.UPC11 = readString(dis);
					
					this.SIZE12 = readString(dis);
					
					this.UPC13 = readString(dis);
					
					this.SIZE14 = readString(dis);
					
					this.UPC15 = readString(dis);
					
					this.SIZE16 = readString(dis);
					
					this.UPC17 = readString(dis);
					
					this.SIZE18 = readString(dis);
					
					this.UPC19 = readString(dis);
					
					this.SIZE20 = readString(dis);
					
					this.UPC21 = readString(dis);
					
					this.SIZE22 = readString(dis);
					
					this.UPC23 = readString(dis);
					
					this.SIZE_ASSORTED = readString(dis);
					
					this.UPC_ASSORTED = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SEASON1,dos);
					
					// Integer
				
						writeInteger(this.SEASON2,dos);
					
					// String
				
						writeString(this.ACCT,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.STYLE_NAME,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.LABEL,dos);
					
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SUB_BRAND,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.QTY,dos);
					
					// String
				
						writeString(this.ORIGINAL_COST,dos);
					
					// String
				
						writeString(this.CURRENT_COST,dos);
					
					// String
				
						writeString(this.PRICE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_CONFIGURATION,dos);
					
					// String
				
						writeString(this.SIZE_SCALE,dos);
					
					// String
				
						writeString(this.FABRIC_CONTENT,dos);
					
					// String
				
						writeString(this.WT_CONST,dos);
					
					// String
				
						writeString(this.KNIT_WOVEN,dos);
					
					// String
				
						writeString(this.ORIGINAL_ETD,dos);
					
					// String
				
						writeString(this.ACTUAL_ETD,dos);
					
					// String
				
						writeString(this.PO_REVISION,dos);
					
					// String
				
						writeString(this.COUNTRY,dos);
					
					// String
				
						writeString(this.CONTRACTOR,dos);
					
					// String
				
						writeString(this.ETD_PORT,dos);
					
					// String
				
						writeString(this.FACTORY_INVOICE,dos);
					
					// String
				
						writeString(this.PROFORMA_TO_CUSTOMER,dos);
					
					// String
				
						writeString(this.CARGO_READY_DATE,dos);
					
					// String
				
						writeString(this.BOOKING_APPROVAL_DATE,dos);
					
					// String
				
						writeString(this.ACTUAL_PICK_UP_DATE,dos);
					
					// String
				
						writeString(this.COPY_ORG_DOC_TO_CUST,dos);
					
					// String
				
						writeString(this.ORG_DOCS_TO_CUST,dos);
					
					// String
				
						writeString(this.QTY_PENDING_SHIP,dos);
					
					// String
				
						writeString(this.QTY_SHIPPED,dos);
					
					// String
				
						writeString(this.BOAT_AIR,dos);
					
					// String
				
						writeString(this.FREGHT_TYPE,dos);
					
					// String
				
						writeString(this.PO,dos);
					
					// String
				
						writeString(this.PO_COMPLETED,dos);
					
					// String
				
						writeString(this.PACKING_OF_THE_STYLE,dos);
					
					// String
				
						writeString(this.COMMENTS1,dos);
					
					// String
				
						writeString(this.COMMENTS2,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SIZE2,dos);
					
					// String
				
						writeString(this.UPC3,dos);
					
					// String
				
						writeString(this.SIZE4,dos);
					
					// String
				
						writeString(this.UPC5,dos);
					
					// String
				
						writeString(this.SIZE6,dos);
					
					// String
				
						writeString(this.UPC7,dos);
					
					// String
				
						writeString(this.SIZE8,dos);
					
					// String
				
						writeString(this.UPC9,dos);
					
					// String
				
						writeString(this.SIZE10,dos);
					
					// String
				
						writeString(this.UPC11,dos);
					
					// String
				
						writeString(this.SIZE12,dos);
					
					// String
				
						writeString(this.UPC13,dos);
					
					// String
				
						writeString(this.SIZE14,dos);
					
					// String
				
						writeString(this.UPC15,dos);
					
					// String
				
						writeString(this.SIZE16,dos);
					
					// String
				
						writeString(this.UPC17,dos);
					
					// String
				
						writeString(this.SIZE18,dos);
					
					// String
				
						writeString(this.UPC19,dos);
					
					// String
				
						writeString(this.SIZE20,dos);
					
					// String
				
						writeString(this.UPC21,dos);
					
					// String
				
						writeString(this.SIZE22,dos);
					
					// String
				
						writeString(this.UPC23,dos);
					
					// String
				
						writeString(this.SIZE_ASSORTED,dos);
					
					// String
				
						writeString(this.UPC_ASSORTED,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SEASON1="+SEASON1);
		sb.append(",SEASON2="+String.valueOf(SEASON2));
		sb.append(",ACCT="+ACCT);
		sb.append(",REF="+REF);
		sb.append(",STYLE="+STYLE);
		sb.append(",STYLE_NAME="+STYLE_NAME);
		sb.append(",COLOR="+COLOR);
		sb.append(",LABEL="+LABEL);
		sb.append(",BRAND="+BRAND);
		sb.append(",SUB_BRAND="+SUB_BRAND);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",FASHION="+FASHION);
		sb.append(",QTY="+QTY);
		sb.append(",ORIGINAL_COST="+ORIGINAL_COST);
		sb.append(",CURRENT_COST="+CURRENT_COST);
		sb.append(",PRICE="+PRICE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE_CONFIGURATION="+SIZE_CONFIGURATION);
		sb.append(",SIZE_SCALE="+SIZE_SCALE);
		sb.append(",FABRIC_CONTENT="+FABRIC_CONTENT);
		sb.append(",WT_CONST="+WT_CONST);
		sb.append(",KNIT_WOVEN="+KNIT_WOVEN);
		sb.append(",ORIGINAL_ETD="+ORIGINAL_ETD);
		sb.append(",ACTUAL_ETD="+ACTUAL_ETD);
		sb.append(",PO_REVISION="+PO_REVISION);
		sb.append(",COUNTRY="+COUNTRY);
		sb.append(",CONTRACTOR="+CONTRACTOR);
		sb.append(",ETD_PORT="+ETD_PORT);
		sb.append(",FACTORY_INVOICE="+FACTORY_INVOICE);
		sb.append(",PROFORMA_TO_CUSTOMER="+PROFORMA_TO_CUSTOMER);
		sb.append(",CARGO_READY_DATE="+CARGO_READY_DATE);
		sb.append(",BOOKING_APPROVAL_DATE="+BOOKING_APPROVAL_DATE);
		sb.append(",ACTUAL_PICK_UP_DATE="+ACTUAL_PICK_UP_DATE);
		sb.append(",COPY_ORG_DOC_TO_CUST="+COPY_ORG_DOC_TO_CUST);
		sb.append(",ORG_DOCS_TO_CUST="+ORG_DOCS_TO_CUST);
		sb.append(",QTY_PENDING_SHIP="+QTY_PENDING_SHIP);
		sb.append(",QTY_SHIPPED="+QTY_SHIPPED);
		sb.append(",BOAT_AIR="+BOAT_AIR);
		sb.append(",FREGHT_TYPE="+FREGHT_TYPE);
		sb.append(",PO="+PO);
		sb.append(",PO_COMPLETED="+PO_COMPLETED);
		sb.append(",PACKING_OF_THE_STYLE="+PACKING_OF_THE_STYLE);
		sb.append(",COMMENTS1="+COMMENTS1);
		sb.append(",COMMENTS2="+COMMENTS2);
		sb.append(",SIZE="+SIZE);
		sb.append(",UPC="+UPC);
		sb.append(",SIZE2="+SIZE2);
		sb.append(",UPC3="+UPC3);
		sb.append(",SIZE4="+SIZE4);
		sb.append(",UPC5="+UPC5);
		sb.append(",SIZE6="+SIZE6);
		sb.append(",UPC7="+UPC7);
		sb.append(",SIZE8="+SIZE8);
		sb.append(",UPC9="+UPC9);
		sb.append(",SIZE10="+SIZE10);
		sb.append(",UPC11="+UPC11);
		sb.append(",SIZE12="+SIZE12);
		sb.append(",UPC13="+UPC13);
		sb.append(",SIZE14="+SIZE14);
		sb.append(",UPC15="+UPC15);
		sb.append(",SIZE16="+SIZE16);
		sb.append(",UPC17="+UPC17);
		sb.append(",SIZE18="+SIZE18);
		sb.append(",UPC19="+UPC19);
		sb.append(",SIZE20="+SIZE20);
		sb.append(",UPC21="+UPC21);
		sb.append(",SIZE22="+SIZE22);
		sb.append(",UPC23="+UPC23);
		sb.append(",SIZE_ASSORTED="+SIZE_ASSORTED);
		sb.append(",UPC_ASSORTED="+UPC_ASSORTED);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_DEV_TRANSFORM_OSG = new byte[0];
    static byte[] commonByteArray_DEV_TRANSFORM_OSG = new byte[0];

	
			    public String newColumn;

				public String getNewColumn () {
					return this.newColumn;
				}
				
			    public String newColumn1;

				public String getNewColumn1 () {
					return this.newColumn1;
				}
				
			    public String newColumn2;

				public String getNewColumn2 () {
					return this.newColumn2;
				}
				
			    public String newColumn3;

				public String getNewColumn3 () {
					return this.newColumn3;
				}
				
			    public String newColumn4;

				public String getNewColumn4 () {
					return this.newColumn4;
				}
				
			    public String newColumn5;

				public String getNewColumn5 () {
					return this.newColumn5;
				}
				
			    public String newColumn6;

				public String getNewColumn6 () {
					return this.newColumn6;
				}
				
			    public String newColumn7;

				public String getNewColumn7 () {
					return this.newColumn7;
				}
				
			    public String newColumn8;

				public String getNewColumn8 () {
					return this.newColumn8;
				}
				
			    public String newColumn9;

				public String getNewColumn9 () {
					return this.newColumn9;
				}
				
			    public String newColumn10;

				public String getNewColumn10 () {
					return this.newColumn10;
				}
				
			    public String newColumn11;

				public String getNewColumn11 () {
					return this.newColumn11;
				}
				
			    public String newColumn12;

				public String getNewColumn12 () {
					return this.newColumn12;
				}
				
			    public String newColumn13;

				public String getNewColumn13 () {
					return this.newColumn13;
				}
				
			    public String newColumn14;

				public String getNewColumn14 () {
					return this.newColumn14;
				}
				
			    public String newColumn15;

				public String getNewColumn15 () {
					return this.newColumn15;
				}
				
			    public String newColumn16;

				public String getNewColumn16 () {
					return this.newColumn16;
				}
				
			    public String newColumn17;

				public String getNewColumn17 () {
					return this.newColumn17;
				}
				
			    public String newColumn18;

				public String getNewColumn18 () {
					return this.newColumn18;
				}
				
			    public String newColumn19;

				public String getNewColumn19 () {
					return this.newColumn19;
				}
				
			    public String newColumn20;

				public String getNewColumn20 () {
					return this.newColumn20;
				}
				
			    public String newColumn21;

				public String getNewColumn21 () {
					return this.newColumn21;
				}
				
			    public String newColumn22;

				public String getNewColumn22 () {
					return this.newColumn22;
				}
				
			    public String newColumn23;

				public String getNewColumn23 () {
					return this.newColumn23;
				}
				
			    public String newColumn24;

				public String getNewColumn24 () {
					return this.newColumn24;
				}
				
			    public String newColumn25;

				public String getNewColumn25 () {
					return this.newColumn25;
				}
				
			    public String newColumn26;

				public String getNewColumn26 () {
					return this.newColumn26;
				}
				
			    public String newColumn27;

				public String getNewColumn27 () {
					return this.newColumn27;
				}
				
			    public String newColumn28;

				public String getNewColumn28 () {
					return this.newColumn28;
				}
				
			    public String newColumn29;

				public String getNewColumn29 () {
					return this.newColumn29;
				}
				
			    public String newColumn30;

				public String getNewColumn30 () {
					return this.newColumn30;
				}
				
			    public String newColumn31;

				public String getNewColumn31 () {
					return this.newColumn31;
				}
				
			    public String newColumn32;

				public String getNewColumn32 () {
					return this.newColumn32;
				}
				
			    public String newColumn33;

				public String getNewColumn33 () {
					return this.newColumn33;
				}
				
			    public String newColumn34;

				public String getNewColumn34 () {
					return this.newColumn34;
				}
				
			    public String newColumn35;

				public String getNewColumn35 () {
					return this.newColumn35;
				}
				
			    public String newColumn36;

				public String getNewColumn36 () {
					return this.newColumn36;
				}
				
			    public String newColumn37;

				public String getNewColumn37 () {
					return this.newColumn37;
				}
				
			    public String newColumn38;

				public String getNewColumn38 () {
					return this.newColumn38;
				}
				
			    public String newColumn39;

				public String getNewColumn39 () {
					return this.newColumn39;
				}
				
			    public String newColumn40;

				public String getNewColumn40 () {
					return this.newColumn40;
				}
				
			    public String newColumn41;

				public String getNewColumn41 () {
					return this.newColumn41;
				}
				
			    public String newColumn42;

				public String getNewColumn42 () {
					return this.newColumn42;
				}
				
			    public String newColumn43;

				public String getNewColumn43 () {
					return this.newColumn43;
				}
				
			    public String newColumn44;

				public String getNewColumn44 () {
					return this.newColumn44;
				}
				
			    public String newColumn45;

				public String getNewColumn45 () {
					return this.newColumn45;
				}
				
			    public String newColumn46;

				public String getNewColumn46 () {
					return this.newColumn46;
				}
				
			    public String newColumn47;

				public String getNewColumn47 () {
					return this.newColumn47;
				}
				
			    public String newColumn48;

				public String getNewColumn48 () {
					return this.newColumn48;
				}
				
			    public String newColumn49;

				public String getNewColumn49 () {
					return this.newColumn49;
				}
				
			    public String newColumn50;

				public String getNewColumn50 () {
					return this.newColumn50;
				}
				
			    public String newColumn51;

				public String getNewColumn51 () {
					return this.newColumn51;
				}
				
			    public String newColumn52;

				public String getNewColumn52 () {
					return this.newColumn52;
				}
				
			    public String newColumn53;

				public String getNewColumn53 () {
					return this.newColumn53;
				}
				
			    public String newColumn54;

				public String getNewColumn54 () {
					return this.newColumn54;
				}
				
			    public String newColumn55;

				public String getNewColumn55 () {
					return this.newColumn55;
				}
				
			    public String newColumn56;

				public String getNewColumn56 () {
					return this.newColumn56;
				}
				
			    public String newColumn57;

				public String getNewColumn57 () {
					return this.newColumn57;
				}
				
			    public String newColumn58;

				public String getNewColumn58 () {
					return this.newColumn58;
				}
				
			    public String newColumn59;

				public String getNewColumn59 () {
					return this.newColumn59;
				}
				
			    public String newColumn60;

				public String getNewColumn60 () {
					return this.newColumn60;
				}
				
			    public String newColumn61;

				public String getNewColumn61 () {
					return this.newColumn61;
				}
				
			    public String newColumn62;

				public String getNewColumn62 () {
					return this.newColumn62;
				}
				
			    public String newColumn63;

				public String getNewColumn63 () {
					return this.newColumn63;
				}
				
			    public String newColumn64;

				public String getNewColumn64 () {
					return this.newColumn64;
				}
				
			    public String newColumn65;

				public String getNewColumn65 () {
					return this.newColumn65;
				}
				
			    public String newColumn66;

				public String getNewColumn66 () {
					return this.newColumn66;
				}
				
			    public String newColumn67;

				public String getNewColumn67 () {
					return this.newColumn67;
				}
				
			    public String newColumn68;

				public String getNewColumn68 () {
					return this.newColumn68;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_TRANSFORM_OSG.length) {
				if(length < 1024 && commonByteArray_DEV_TRANSFORM_OSG.length == 0) {
   					commonByteArray_DEV_TRANSFORM_OSG = new byte[1024];
				} else {
   					commonByteArray_DEV_TRANSFORM_OSG = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_TRANSFORM_OSG, 0, length);
			strReturn = new String(commonByteArray_DEV_TRANSFORM_OSG, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_TRANSFORM_OSG) {

        	try {

        		int length = 0;
		
					this.newColumn = readString(dis);
					
					this.newColumn1 = readString(dis);
					
					this.newColumn2 = readString(dis);
					
					this.newColumn3 = readString(dis);
					
					this.newColumn4 = readString(dis);
					
					this.newColumn5 = readString(dis);
					
					this.newColumn6 = readString(dis);
					
					this.newColumn7 = readString(dis);
					
					this.newColumn8 = readString(dis);
					
					this.newColumn9 = readString(dis);
					
					this.newColumn10 = readString(dis);
					
					this.newColumn11 = readString(dis);
					
					this.newColumn12 = readString(dis);
					
					this.newColumn13 = readString(dis);
					
					this.newColumn14 = readString(dis);
					
					this.newColumn15 = readString(dis);
					
					this.newColumn16 = readString(dis);
					
					this.newColumn17 = readString(dis);
					
					this.newColumn18 = readString(dis);
					
					this.newColumn19 = readString(dis);
					
					this.newColumn20 = readString(dis);
					
					this.newColumn21 = readString(dis);
					
					this.newColumn22 = readString(dis);
					
					this.newColumn23 = readString(dis);
					
					this.newColumn24 = readString(dis);
					
					this.newColumn25 = readString(dis);
					
					this.newColumn26 = readString(dis);
					
					this.newColumn27 = readString(dis);
					
					this.newColumn28 = readString(dis);
					
					this.newColumn29 = readString(dis);
					
					this.newColumn30 = readString(dis);
					
					this.newColumn31 = readString(dis);
					
					this.newColumn32 = readString(dis);
					
					this.newColumn33 = readString(dis);
					
					this.newColumn34 = readString(dis);
					
					this.newColumn35 = readString(dis);
					
					this.newColumn36 = readString(dis);
					
					this.newColumn37 = readString(dis);
					
					this.newColumn38 = readString(dis);
					
					this.newColumn39 = readString(dis);
					
					this.newColumn40 = readString(dis);
					
					this.newColumn41 = readString(dis);
					
					this.newColumn42 = readString(dis);
					
					this.newColumn43 = readString(dis);
					
					this.newColumn44 = readString(dis);
					
					this.newColumn45 = readString(dis);
					
					this.newColumn46 = readString(dis);
					
					this.newColumn47 = readString(dis);
					
					this.newColumn48 = readString(dis);
					
					this.newColumn49 = readString(dis);
					
					this.newColumn50 = readString(dis);
					
					this.newColumn51 = readString(dis);
					
					this.newColumn52 = readString(dis);
					
					this.newColumn53 = readString(dis);
					
					this.newColumn54 = readString(dis);
					
					this.newColumn55 = readString(dis);
					
					this.newColumn56 = readString(dis);
					
					this.newColumn57 = readString(dis);
					
					this.newColumn58 = readString(dis);
					
					this.newColumn59 = readString(dis);
					
					this.newColumn60 = readString(dis);
					
					this.newColumn61 = readString(dis);
					
					this.newColumn62 = readString(dis);
					
					this.newColumn63 = readString(dis);
					
					this.newColumn64 = readString(dis);
					
					this.newColumn65 = readString(dis);
					
					this.newColumn66 = readString(dis);
					
					this.newColumn67 = readString(dis);
					
					this.newColumn68 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.newColumn,dos);
					
					// String
				
						writeString(this.newColumn1,dos);
					
					// String
				
						writeString(this.newColumn2,dos);
					
					// String
				
						writeString(this.newColumn3,dos);
					
					// String
				
						writeString(this.newColumn4,dos);
					
					// String
				
						writeString(this.newColumn5,dos);
					
					// String
				
						writeString(this.newColumn6,dos);
					
					// String
				
						writeString(this.newColumn7,dos);
					
					// String
				
						writeString(this.newColumn8,dos);
					
					// String
				
						writeString(this.newColumn9,dos);
					
					// String
				
						writeString(this.newColumn10,dos);
					
					// String
				
						writeString(this.newColumn11,dos);
					
					// String
				
						writeString(this.newColumn12,dos);
					
					// String
				
						writeString(this.newColumn13,dos);
					
					// String
				
						writeString(this.newColumn14,dos);
					
					// String
				
						writeString(this.newColumn15,dos);
					
					// String
				
						writeString(this.newColumn16,dos);
					
					// String
				
						writeString(this.newColumn17,dos);
					
					// String
				
						writeString(this.newColumn18,dos);
					
					// String
				
						writeString(this.newColumn19,dos);
					
					// String
				
						writeString(this.newColumn20,dos);
					
					// String
				
						writeString(this.newColumn21,dos);
					
					// String
				
						writeString(this.newColumn22,dos);
					
					// String
				
						writeString(this.newColumn23,dos);
					
					// String
				
						writeString(this.newColumn24,dos);
					
					// String
				
						writeString(this.newColumn25,dos);
					
					// String
				
						writeString(this.newColumn26,dos);
					
					// String
				
						writeString(this.newColumn27,dos);
					
					// String
				
						writeString(this.newColumn28,dos);
					
					// String
				
						writeString(this.newColumn29,dos);
					
					// String
				
						writeString(this.newColumn30,dos);
					
					// String
				
						writeString(this.newColumn31,dos);
					
					// String
				
						writeString(this.newColumn32,dos);
					
					// String
				
						writeString(this.newColumn33,dos);
					
					// String
				
						writeString(this.newColumn34,dos);
					
					// String
				
						writeString(this.newColumn35,dos);
					
					// String
				
						writeString(this.newColumn36,dos);
					
					// String
				
						writeString(this.newColumn37,dos);
					
					// String
				
						writeString(this.newColumn38,dos);
					
					// String
				
						writeString(this.newColumn39,dos);
					
					// String
				
						writeString(this.newColumn40,dos);
					
					// String
				
						writeString(this.newColumn41,dos);
					
					// String
				
						writeString(this.newColumn42,dos);
					
					// String
				
						writeString(this.newColumn43,dos);
					
					// String
				
						writeString(this.newColumn44,dos);
					
					// String
				
						writeString(this.newColumn45,dos);
					
					// String
				
						writeString(this.newColumn46,dos);
					
					// String
				
						writeString(this.newColumn47,dos);
					
					// String
				
						writeString(this.newColumn48,dos);
					
					// String
				
						writeString(this.newColumn49,dos);
					
					// String
				
						writeString(this.newColumn50,dos);
					
					// String
				
						writeString(this.newColumn51,dos);
					
					// String
				
						writeString(this.newColumn52,dos);
					
					// String
				
						writeString(this.newColumn53,dos);
					
					// String
				
						writeString(this.newColumn54,dos);
					
					// String
				
						writeString(this.newColumn55,dos);
					
					// String
				
						writeString(this.newColumn56,dos);
					
					// String
				
						writeString(this.newColumn57,dos);
					
					// String
				
						writeString(this.newColumn58,dos);
					
					// String
				
						writeString(this.newColumn59,dos);
					
					// String
				
						writeString(this.newColumn60,dos);
					
					// String
				
						writeString(this.newColumn61,dos);
					
					// String
				
						writeString(this.newColumn62,dos);
					
					// String
				
						writeString(this.newColumn63,dos);
					
					// String
				
						writeString(this.newColumn64,dos);
					
					// String
				
						writeString(this.newColumn65,dos);
					
					// String
				
						writeString(this.newColumn66,dos);
					
					// String
				
						writeString(this.newColumn67,dos);
					
					// String
				
						writeString(this.newColumn68,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("newColumn="+newColumn);
		sb.append(",newColumn1="+newColumn1);
		sb.append(",newColumn2="+newColumn2);
		sb.append(",newColumn3="+newColumn3);
		sb.append(",newColumn4="+newColumn4);
		sb.append(",newColumn5="+newColumn5);
		sb.append(",newColumn6="+newColumn6);
		sb.append(",newColumn7="+newColumn7);
		sb.append(",newColumn8="+newColumn8);
		sb.append(",newColumn9="+newColumn9);
		sb.append(",newColumn10="+newColumn10);
		sb.append(",newColumn11="+newColumn11);
		sb.append(",newColumn12="+newColumn12);
		sb.append(",newColumn13="+newColumn13);
		sb.append(",newColumn14="+newColumn14);
		sb.append(",newColumn15="+newColumn15);
		sb.append(",newColumn16="+newColumn16);
		sb.append(",newColumn17="+newColumn17);
		sb.append(",newColumn18="+newColumn18);
		sb.append(",newColumn19="+newColumn19);
		sb.append(",newColumn20="+newColumn20);
		sb.append(",newColumn21="+newColumn21);
		sb.append(",newColumn22="+newColumn22);
		sb.append(",newColumn23="+newColumn23);
		sb.append(",newColumn24="+newColumn24);
		sb.append(",newColumn25="+newColumn25);
		sb.append(",newColumn26="+newColumn26);
		sb.append(",newColumn27="+newColumn27);
		sb.append(",newColumn28="+newColumn28);
		sb.append(",newColumn29="+newColumn29);
		sb.append(",newColumn30="+newColumn30);
		sb.append(",newColumn31="+newColumn31);
		sb.append(",newColumn32="+newColumn32);
		sb.append(",newColumn33="+newColumn33);
		sb.append(",newColumn34="+newColumn34);
		sb.append(",newColumn35="+newColumn35);
		sb.append(",newColumn36="+newColumn36);
		sb.append(",newColumn37="+newColumn37);
		sb.append(",newColumn38="+newColumn38);
		sb.append(",newColumn39="+newColumn39);
		sb.append(",newColumn40="+newColumn40);
		sb.append(",newColumn41="+newColumn41);
		sb.append(",newColumn42="+newColumn42);
		sb.append(",newColumn43="+newColumn43);
		sb.append(",newColumn44="+newColumn44);
		sb.append(",newColumn45="+newColumn45);
		sb.append(",newColumn46="+newColumn46);
		sb.append(",newColumn47="+newColumn47);
		sb.append(",newColumn48="+newColumn48);
		sb.append(",newColumn49="+newColumn49);
		sb.append(",newColumn50="+newColumn50);
		sb.append(",newColumn51="+newColumn51);
		sb.append(",newColumn52="+newColumn52);
		sb.append(",newColumn53="+newColumn53);
		sb.append(",newColumn54="+newColumn54);
		sb.append(",newColumn55="+newColumn55);
		sb.append(",newColumn56="+newColumn56);
		sb.append(",newColumn57="+newColumn57);
		sb.append(",newColumn58="+newColumn58);
		sb.append(",newColumn59="+newColumn59);
		sb.append(",newColumn60="+newColumn60);
		sb.append(",newColumn61="+newColumn61);
		sb.append(",newColumn62="+newColumn62);
		sb.append(",newColumn63="+newColumn63);
		sb.append(",newColumn64="+newColumn64);
		sb.append(",newColumn65="+newColumn65);
		sb.append(",newColumn66="+newColumn66);
		sb.append(",newColumn67="+newColumn67);
		sb.append(",newColumn68="+newColumn68);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileList_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileList_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
out1Struct out1 = new out1Struct();
row2Struct row2 = new row2Struct();
out2Struct out2 = new out2Struct();



	
	/**
	 * [tFileList_1 begin ] start
	 */

				
			int NB_ITERATE_tFileInputDelimited_2 = 0; //for statistics
			

	
		
		ok_Hash.put("tFileList_1", false);
		start_Hash.put("tFileList_1", System.currentTimeMillis());
		
	
	currentComponent="tFileList_1";

	
		int tos_count_tFileList_1 = 0;
		
	
 
     
    
  String directory_tFileList_1 = context.IntegrationExcelPath;
  final java.util.List<String> maskList_tFileList_1 = new java.util.ArrayList<String>();
  final java.util.List<java.util.regex.Pattern> patternList_tFileList_1 = new java.util.ArrayList<java.util.regex.Pattern>(); 
    maskList_tFileList_1.add("TEMP*.csv");  
  for (final String filemask_tFileList_1 : maskList_tFileList_1) {
	String filemask_compile_tFileList_1 = filemask_tFileList_1;
	
		filemask_compile_tFileList_1 = org.apache.oro.text.GlobCompiler.globToPerl5(filemask_tFileList_1.toCharArray(), org.apache.oro.text.GlobCompiler.DEFAULT_MASK);
	
		java.util.regex.Pattern fileNamePattern_tFileList_1 = java.util.regex.Pattern.compile(filemask_compile_tFileList_1, java.util.regex.Pattern.CASE_INSENSITIVE);
	
	patternList_tFileList_1.add(fileNamePattern_tFileList_1);
  }
  int NB_FILEtFileList_1 = 0;

  final boolean case_sensitive_tFileList_1 = false;
    final java.util.List<java.io.File> list_tFileList_1 = new java.util.ArrayList<java.io.File>();
    final java.util.Set<String> filePath_tFileList_1 = new java.util.HashSet<String>();
	java.io.File file_tFileList_1 = new java.io.File(directory_tFileList_1);
     
		file_tFileList_1.listFiles(new java.io.FilenameFilter() {
			public boolean accept(java.io.File dir, String name) {
				java.io.File file = new java.io.File(dir, name);
                if (!file.isDirectory()) {
                	
    	String fileName_tFileList_1 = file.getName();
		for (final java.util.regex.Pattern fileNamePattern_tFileList_1 : patternList_tFileList_1) {
          	if (fileNamePattern_tFileList_1.matcher(fileName_tFileList_1).matches()){
					if(!filePath_tFileList_1.contains(file.getAbsolutePath())) {
			          list_tFileList_1.add(file);
			          filePath_tFileList_1.add(file.getAbsolutePath());
			        }
			}
		}
                }
              return true;
            }
          }
      ); 
      java.util.Collections.sort(list_tFileList_1);
    
    for (int i_tFileList_1 = 0; i_tFileList_1 < list_tFileList_1.size(); i_tFileList_1++){
      java.io.File files_tFileList_1 = list_tFileList_1.get(i_tFileList_1);
      String fileName_tFileList_1 = files_tFileList_1.getName();
      
      String currentFileName_tFileList_1 = files_tFileList_1.getName(); 
      String currentFilePath_tFileList_1 = files_tFileList_1.getAbsolutePath();
      String currentFileDirectory_tFileList_1 = files_tFileList_1.getParent();
      String currentFileExtension_tFileList_1 = null;
      
      if (files_tFileList_1.getName().contains(".") && files_tFileList_1.isFile()){
        currentFileExtension_tFileList_1 = files_tFileList_1.getName().substring(files_tFileList_1.getName().lastIndexOf(".") + 1);
      } else{
        currentFileExtension_tFileList_1 = "";
      }
      
      NB_FILEtFileList_1 ++;
      globalMap.put("tFileList_1_CURRENT_FILE", currentFileName_tFileList_1);
      globalMap.put("tFileList_1_CURRENT_FILEPATH", currentFilePath_tFileList_1);
      globalMap.put("tFileList_1_CURRENT_FILEDIRECTORY", currentFileDirectory_tFileList_1);
      globalMap.put("tFileList_1_CURRENT_FILEEXTENSION", currentFileExtension_tFileList_1);
      globalMap.put("tFileList_1_NB_FILE", NB_FILEtFileList_1);
      
 



/**
 * [tFileList_1 begin ] stop
 */
	
	/**
	 * [tFileList_1 main ] start
	 */

	

	
	
	currentComponent="tFileList_1";

	

 


	tos_count_tFileList_1++;

/**
 * [tFileList_1 main ] stop
 */
	
	/**
	 * [tFileList_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileList_1";

	

 



/**
 * [tFileList_1 process_data_begin ] stop
 */
	NB_ITERATE_tFileInputDelimited_2++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("out2", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row2", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("out1", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate1", 1, "exec" + NB_ITERATE_tFileInputDelimited_2);
					//Thread.sleep(1000);
				}				
			





	
	/**
	 * [tFileOutputExcel_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_1", false);
		start_Hash.put("tFileOutputExcel_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out2");
					}
				
		int tos_count_tFileOutputExcel_1 = 0;
		


		int columnIndex_tFileOutputExcel_1 = 0;
		
		String fileName_tFileOutputExcel_1=context.ExtractionPath + "/" + context.OutputFileName;
		int nb_line_tFileOutputExcel_1 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_1 = new org.talend.ExcelTool();
		
		xlsxTool_tFileOutputExcel_1.setSheet("Sheet1");
		xlsxTool_tFileOutputExcel_1.setAppend(true,true);
		xlsxTool_tFileOutputExcel_1.setRecalculateFormula(false);
		xlsxTool_tFileOutputExcel_1.setXY(false,0,1,false);
		
		java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_1 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap.get("concurrentHashMap");
		java.lang.Object lockObj_tFileOutputExcel_1 = chm_tFileOutputExcel_1.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_1", k -> new Object());
		synchronized (lockObj_tFileOutputExcel_1) {
			
				xlsxTool_tFileOutputExcel_1.prepareXlsxFile(fileName_tFileOutputExcel_1);
			
		}
		
		xlsxTool_tFileOutputExcel_1.setFont("");
		
		if (xlsxTool_tFileOutputExcel_1.getStartRow() == 0){
		
		xlsxTool_tFileOutputExcel_1.addRow();
		
		xlsxTool_tFileOutputExcel_1.addCellValue("SEASON");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("ACCT");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("REF");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("STYLE");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("FULL_STYLE");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("STYLE_NAME");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("COLOR");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("LABEL");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("BRAND");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("SUB_BRAND");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("PRODUCT");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("FASHION");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("QTY");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("ORIGINAL_COST");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("CURRENT_COST");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("PRICE");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("SIZE_RANGE");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("SIZE_CONFIGURATION");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("SIZE_SCALE");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("FABRIC_CONTENT");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("WT_CONST");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("KNIT_WOVEN");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("ORIGINAL_ETD");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("ACTUAL_ETD");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("PO_REVISION");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("COUNTRY");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("CONTRACTOR");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("ETD_PORT");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("FACTORY_INVOICE");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("PROFORMA_TO_CUSTOMER");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("CARGO_READY_DATE");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("BOOKING_APPROVAL_DATE");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("ACTUAL_PICK_UP_DATE");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("COPY_ORG_DOC_TO_CUST");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("ORG_DOCS_TO_CUST");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("QTY_PENDING_SHIP");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("QTY_SHIPPED");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("BOAT_AIR");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("FREGHT_TYPE");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("PO");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("PO_COMPLETED");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("PACKING_OF_THE_STYLE");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("COMMENTS1");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("COMMENTS2");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("SIZE");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("UPC");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("SIZE2");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("UPC3");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("SIZE4");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("UPC5");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("SIZE6");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("UPC7");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("SIZE8");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("UPC9");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("SIZE10");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("UPC11");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("SIZE12");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("UPC13");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("SIZE14");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("UPC15");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("SIZE16");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("UPC17");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("SIZE18");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("UPC19");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("SIZE20");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("UPC21");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("SIZE22");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("UPC23");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("SIZE_ASSORTED");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("UPC_ASSORTED");
		
		nb_line_tFileOutputExcel_1++; 
		
	}
		

 



/**
 * [tFileOutputExcel_1 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
out2Struct out2_tmp = new out2Struct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tFilterRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_1", false);
		start_Hash.put("tFilterRow_1", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out1");
					}
				
		int tos_count_tFilterRow_1 = 0;
		
    int nb_line_tFilterRow_1 = 0;
    int nb_line_ok_tFilterRow_1 = 0;
    int nb_line_reject_tFilterRow_1 = 0;

    class Operator_tFilterRow_1 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_1(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
out1Struct out1_tmp = new out1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_2", false);
		start_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_2";

	
		int tos_count_tFileInputDelimited_2 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_2 = 0;
				int footer_tFileInputDelimited_2 = 0;
				int totalLinetFileInputDelimited_2 = 0;
				int limittFileInputDelimited_2 = -1;
				int lastLinetFileInputDelimited_2 = -1;	
				
				char fieldSeparator_tFileInputDelimited_2[] = null;
				
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)";").length() > 0 ){
					fieldSeparator_tFileInputDelimited_2 = ((String)";").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
			
				char rowSeparator_tFileInputDelimited_2[] = null;
			
				//support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'. 
				if ( ((String)"\n").length() > 0 ){
					rowSeparator_tFileInputDelimited_2 = ((String)"\n").toCharArray();
				}else {
					throw new IllegalArgumentException("Row Separator must be assigned a char."); 
				}
			
				Object filename_tFileInputDelimited_2 = /** Start field tFileInputDelimited_2:FILENAME */((String)globalMap.get("tFileList_1_CURRENT_FILEPATH"))/** End field tFileInputDelimited_2:FILENAME */;		
				com.talend.csv.CSVReader csvReadertFileInputDelimited_2 = null;
	
				try{
					
						String[] rowtFileInputDelimited_2=null;
						int currentLinetFileInputDelimited_2 = 0;
	        			int outputLinetFileInputDelimited_2 = 0;
						try {//TD110 begin
							if(filename_tFileInputDelimited_2 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_2 = 0;
			if(footer_value_tFileInputDelimited_2 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer shouldn't be bigger than 0.");
			}
		
								csvReadertFileInputDelimited_2=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_2, fieldSeparator_tFileInputDelimited_2[0], "ISO-8859-15");
							}else{
								csvReadertFileInputDelimited_2=new com.talend.csv.CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(
		                		new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_2)),"ISO-8859-15")), fieldSeparator_tFileInputDelimited_2[0]);
		        			}
					
					
					csvReadertFileInputDelimited_2.setTrimWhitespace(false);
					if ( (rowSeparator_tFileInputDelimited_2[0] != '\n') && (rowSeparator_tFileInputDelimited_2[0] != '\r') )
	        			csvReadertFileInputDelimited_2.setLineEnd(""+rowSeparator_tFileInputDelimited_2[0]);
						
	        				csvReadertFileInputDelimited_2.setQuoteChar('"');
						
	            				csvReadertFileInputDelimited_2.setEscapeChar(csvReadertFileInputDelimited_2.getQuoteChar());
							      
		
			
						if(footer_tFileInputDelimited_2 > 0){
						for(totalLinetFileInputDelimited_2=0;totalLinetFileInputDelimited_2 < 0; totalLinetFileInputDelimited_2++){
							csvReadertFileInputDelimited_2.readNext();
						}
						csvReadertFileInputDelimited_2.setSkipEmptyRecords(true);
			            while (csvReadertFileInputDelimited_2.readNext()) {
							
								rowtFileInputDelimited_2=csvReadertFileInputDelimited_2.getValues();
								if(!(rowtFileInputDelimited_2.length == 1 && ("\015").equals(rowtFileInputDelimited_2[0]))){//empty line when row separator is '\n'
							
	                
	                		totalLinetFileInputDelimited_2++;
	                
							
								}
							
	                
			            }
	            		int lastLineTemptFileInputDelimited_2 = totalLinetFileInputDelimited_2 - footer_tFileInputDelimited_2   < 0? 0 : totalLinetFileInputDelimited_2 - footer_tFileInputDelimited_2 ;
	            		if(lastLinetFileInputDelimited_2 > 0){
	                		lastLinetFileInputDelimited_2 = lastLinetFileInputDelimited_2 < lastLineTemptFileInputDelimited_2 ? lastLinetFileInputDelimited_2 : lastLineTemptFileInputDelimited_2; 
	            		}else {
	                		lastLinetFileInputDelimited_2 = lastLineTemptFileInputDelimited_2;
	            		}
	         
			          	csvReadertFileInputDelimited_2.close();
				        if(filename_tFileInputDelimited_2 instanceof java.io.InputStream){
				 			csvReadertFileInputDelimited_2=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_2, fieldSeparator_tFileInputDelimited_2[0], "ISO-8859-15");
		        		}else{
				 			csvReadertFileInputDelimited_2=new com.talend.csv.CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(
				          	new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_2)),"ISO-8859-15")), fieldSeparator_tFileInputDelimited_2[0]);
						}
						csvReadertFileInputDelimited_2.setTrimWhitespace(false);
						if ( (rowSeparator_tFileInputDelimited_2[0] != '\n') && (rowSeparator_tFileInputDelimited_2[0] != '\r') )	
	        				csvReadertFileInputDelimited_2.setLineEnd(""+rowSeparator_tFileInputDelimited_2[0]);
						
							csvReadertFileInputDelimited_2.setQuoteChar('"');
						
	        				csvReadertFileInputDelimited_2.setEscapeChar(csvReadertFileInputDelimited_2.getQuoteChar());
							  
	        		}
	        
			        if(limittFileInputDelimited_2 != 0){
			        	for(currentLinetFileInputDelimited_2=0;currentLinetFileInputDelimited_2 < 0;currentLinetFileInputDelimited_2++){
			        		csvReadertFileInputDelimited_2.readNext();
			        	}
			        }
			        csvReadertFileInputDelimited_2.setSkipEmptyRecords(true);
	        
	    		} catch(java.lang.Exception e) {
					
						
						System.err.println(e.getMessage());
					
	    		}//TD110 end
	        
			    
	        	while ( limittFileInputDelimited_2 != 0 && csvReadertFileInputDelimited_2!=null && csvReadertFileInputDelimited_2.readNext() ) { 
	        		rowstate_tFileInputDelimited_2.reset();
	        
		        	rowtFileInputDelimited_2=csvReadertFileInputDelimited_2.getValues();
	        	
					
	        			if(rowtFileInputDelimited_2.length == 1 && ("\015").equals(rowtFileInputDelimited_2[0])){//empty line when row separator is '\n'
	        				continue;
	        			}
					
	        	
	        	
	        		currentLinetFileInputDelimited_2++;
	            
		            if(lastLinetFileInputDelimited_2 > -1 && currentLinetFileInputDelimited_2 > lastLinetFileInputDelimited_2) {
		                break;
	    	        }
	        	    outputLinetFileInputDelimited_2++;
	            	if (limittFileInputDelimited_2 > 0 && outputLinetFileInputDelimited_2 > limittFileInputDelimited_2) {
	                	break;
	            	}  
	                                                                      
					
	    							row1 = null;			
								
								boolean whetherReject_tFileInputDelimited_2 = false;
								row1 = new row1Struct();
								try {			
									
				char fieldSeparator_tFileInputDelimited_2_ListType[] = null;
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)";").length() > 0 ){
					fieldSeparator_tFileInputDelimited_2_ListType = ((String)";").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
				if(rowtFileInputDelimited_2.length == 1 && ("\015").equals(rowtFileInputDelimited_2[0])){//empty line when row separator is '\n'
					
							row1.newColumn = null;
					
							row1.newColumn1 = null;
					
							row1.newColumn2 = null;
					
							row1.newColumn3 = null;
					
							row1.newColumn4 = null;
					
							row1.newColumn5 = null;
					
							row1.newColumn6 = null;
					
							row1.newColumn7 = null;
					
							row1.newColumn8 = null;
					
							row1.newColumn9 = null;
					
							row1.newColumn10 = null;
					
							row1.newColumn11 = null;
					
							row1.newColumn12 = null;
					
							row1.newColumn13 = null;
					
							row1.newColumn14 = null;
					
							row1.newColumn15 = null;
					
							row1.newColumn16 = null;
					
							row1.newColumn17 = null;
					
							row1.newColumn18 = null;
					
							row1.newColumn19 = null;
					
							row1.newColumn20 = null;
					
							row1.newColumn21 = null;
					
							row1.newColumn22 = null;
					
							row1.newColumn23 = null;
					
							row1.newColumn24 = null;
					
							row1.newColumn25 = null;
					
							row1.newColumn26 = null;
					
							row1.newColumn27 = null;
					
							row1.newColumn28 = null;
					
							row1.newColumn29 = null;
					
							row1.newColumn30 = null;
					
							row1.newColumn31 = null;
					
							row1.newColumn32 = null;
					
							row1.newColumn33 = null;
					
							row1.newColumn34 = null;
					
							row1.newColumn35 = null;
					
							row1.newColumn36 = null;
					
							row1.newColumn37 = null;
					
							row1.newColumn38 = null;
					
							row1.newColumn39 = null;
					
							row1.newColumn40 = null;
					
							row1.newColumn41 = null;
					
							row1.newColumn42 = null;
					
							row1.newColumn43 = null;
					
							row1.newColumn44 = null;
					
							row1.newColumn45 = null;
					
							row1.newColumn46 = null;
					
							row1.newColumn47 = null;
					
							row1.newColumn48 = null;
					
							row1.newColumn49 = null;
					
							row1.newColumn50 = null;
					
							row1.newColumn51 = null;
					
							row1.newColumn52 = null;
					
							row1.newColumn53 = null;
					
							row1.newColumn54 = null;
					
							row1.newColumn55 = null;
					
							row1.newColumn56 = null;
					
							row1.newColumn57 = null;
					
							row1.newColumn58 = null;
					
							row1.newColumn59 = null;
					
							row1.newColumn60 = null;
					
							row1.newColumn61 = null;
					
							row1.newColumn62 = null;
					
							row1.newColumn63 = null;
					
							row1.newColumn64 = null;
					
							row1.newColumn65 = null;
					
							row1.newColumn66 = null;
					
							row1.newColumn67 = null;
					
							row1.newColumn68 = null;
					
				}else{
					
	                int columnIndexWithD_tFileInputDelimited_2 = 0; //Column Index 
	                
						columnIndexWithD_tFileInputDelimited_2 = 0;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.newColumn = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.newColumn = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 1;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.newColumn1 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.newColumn1 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 2;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.newColumn2 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.newColumn2 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 3;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.newColumn3 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.newColumn3 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 4;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.newColumn4 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.newColumn4 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 5;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.newColumn5 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.newColumn5 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 6;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.newColumn6 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.newColumn6 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 7;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.newColumn7 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.newColumn7 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 8;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.newColumn8 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.newColumn8 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 9;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.newColumn9 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.newColumn9 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 10;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.newColumn10 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.newColumn10 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 11;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.newColumn11 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.newColumn11 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 12;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.newColumn12 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.newColumn12 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 13;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.newColumn13 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.newColumn13 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 14;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.newColumn14 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.newColumn14 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 15;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.newColumn15 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.newColumn15 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 16;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.newColumn16 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.newColumn16 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 17;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.newColumn17 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.newColumn17 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 18;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.newColumn18 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.newColumn18 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 19;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.newColumn19 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.newColumn19 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 20;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.newColumn20 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.newColumn20 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 21;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.newColumn21 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.newColumn21 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 22;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.newColumn22 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.newColumn22 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 23;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.newColumn23 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.newColumn23 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 24;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.newColumn24 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.newColumn24 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 25;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.newColumn25 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.newColumn25 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 26;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.newColumn26 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.newColumn26 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 27;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.newColumn27 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.newColumn27 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 28;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.newColumn28 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.newColumn28 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 29;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.newColumn29 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.newColumn29 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 30;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.newColumn30 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.newColumn30 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 31;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.newColumn31 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.newColumn31 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 32;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.newColumn32 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.newColumn32 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 33;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.newColumn33 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.newColumn33 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 34;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.newColumn34 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.newColumn34 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 35;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.newColumn35 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.newColumn35 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 36;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.newColumn36 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.newColumn36 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 37;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.newColumn37 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.newColumn37 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 38;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.newColumn38 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.newColumn38 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 39;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.newColumn39 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.newColumn39 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 40;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.newColumn40 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.newColumn40 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 41;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.newColumn41 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.newColumn41 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 42;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.newColumn42 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.newColumn42 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 43;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.newColumn43 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.newColumn43 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 44;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.newColumn44 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.newColumn44 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 45;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.newColumn45 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.newColumn45 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 46;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.newColumn46 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.newColumn46 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 47;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.newColumn47 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.newColumn47 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 48;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.newColumn48 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.newColumn48 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 49;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.newColumn49 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.newColumn49 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 50;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.newColumn50 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.newColumn50 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 51;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.newColumn51 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.newColumn51 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 52;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.newColumn52 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.newColumn52 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 53;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.newColumn53 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.newColumn53 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 54;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.newColumn54 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.newColumn54 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 55;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.newColumn55 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.newColumn55 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 56;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.newColumn56 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.newColumn56 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 57;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.newColumn57 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.newColumn57 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 58;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.newColumn58 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.newColumn58 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 59;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.newColumn59 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.newColumn59 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 60;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.newColumn60 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.newColumn60 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 61;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.newColumn61 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.newColumn61 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 62;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.newColumn62 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.newColumn62 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 63;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.newColumn63 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.newColumn63 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 64;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.newColumn64 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.newColumn64 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 65;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.newColumn65 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.newColumn65 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 66;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.newColumn66 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.newColumn66 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 67;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.newColumn67 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.newColumn67 = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 68;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row1.newColumn68 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
						
							
								row1.newColumn68 = null;
							
						
						}
						
						
					
				}
				
									
									if(rowstate_tFileInputDelimited_2.getException()!=null) {
										throw rowstate_tFileInputDelimited_2.getException();
									}
									
									
	    						} catch (java.lang.Exception e) {
							        whetherReject_tFileInputDelimited_2 = true;
        							
                							System.err.println(e.getMessage());
                							row1 = null;
                						
	    						}
	
							

 



/**
 * [tFileInputDelimited_2 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 


	tos_count_tFileInputDelimited_2++;

/**
 * [tFileInputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 process_data_begin ] stop
 */
// Start of branch "row1"
if(row1 != null) { 



	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row1");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

out1 = null;


// # Output table : 'out1'
out1_tmp.SEASON1 = StringHandling.LEFT(row1.newColumn, 1).equals("F") ? "FA" : 
(
     StringHandling.LEFT(row1.newColumn, 1).equals("M") ? "SU" :
     (
       StringHandling.LEFT(row1.newColumn, 1).equals("H") ? "HO" :
       (
          StringHandling.LEFT(row1.newColumn, 1).equals("S") ? "SU" : "N/A"
       )
     )
) ;
out1_tmp.SEASON2 = Integer.parseInt(StringHandling.RIGHT(row1.newColumn, 2)); ;
out1_tmp.ACCT = row1.newColumn1 != null ? StringHandling.TRIM(row1.newColumn1):"" ;
out1_tmp.REF = row1.newColumn2 != null ? StringHandling.TRIM(row1.newColumn2):"" ;
out1_tmp.STYLE = row1.newColumn3 != null ? StringHandling.TRIM(row1.newColumn3):"" ;
out1_tmp.STYLE_NAME = row1.newColumn4 != null ? StringHandling.TRIM(row1.newColumn4).replaceAll (" ", " ") :"" ;
out1_tmp.COLOR = row1.newColumn5 != null ? StringHandling.TRIM(row1.newColumn5):"" ;
out1_tmp.LABEL = row1.newColumn6 != null ? StringHandling.TRIM(row1.newColumn6):"" ;
out1_tmp.BRAND = row1.newColumn7 != null ? StringHandling.TRIM(row1.newColumn7):"" ;
out1_tmp.SUB_BRAND = row1.newColumn8 != null ? StringHandling.TRIM(row1.newColumn8):"" ;
out1_tmp.PRODUCT = row1.newColumn9 != null ? StringHandling.TRIM(row1.newColumn9):"" ;
out1_tmp.FASHION = row1.newColumn10 != null ? StringHandling.TRIM(row1.newColumn10):"" ;
out1_tmp.QTY = row1.newColumn11 != null ? StringHandling.TRIM(row1.newColumn11):"" ;
out1_tmp.ORIGINAL_COST = row1.newColumn12 != null ? StringHandling.TRIM(row1.newColumn12):"" ;
out1_tmp.CURRENT_COST = row1.newColumn13 != null ? StringHandling.TRIM(row1.newColumn13):"" ;
out1_tmp.PRICE = row1.newColumn14 != null ? StringHandling.TRIM(row1.newColumn14):"" ;
out1_tmp.SIZE_RANGE = row1.newColumn15 != null ? StringHandling.TRIM(row1.newColumn15):"" ;
out1_tmp.SIZE_CONFIGURATION = row1.newColumn16 != null ? StringHandling.TRIM(row1.newColumn16):"" ;
out1_tmp.SIZE_SCALE = row1.newColumn17 != null ? StringHandling.TRIM(row1.newColumn17):"" ;
out1_tmp.FABRIC_CONTENT = row1.newColumn18 != null ? StringHandling.TRIM(row1.newColumn18):"" ;
out1_tmp.WT_CONST = row1.newColumn19 != null ? StringHandling.TRIM(row1.newColumn19):"" ;
out1_tmp.KNIT_WOVEN = row1.newColumn20 != null ? StringHandling.TRIM(row1.newColumn20):"" ;
out1_tmp.ORIGINAL_ETD = row1.newColumn21 != null ? StringHandling.TRIM(row1.newColumn21):"" ;
out1_tmp.ACTUAL_ETD = row1.newColumn22 != null ? StringHandling.TRIM(row1.newColumn22):"" ;
out1_tmp.PO_REVISION = row1.newColumn23 != null ? StringHandling.TRIM(row1.newColumn23):"" ;
out1_tmp.COUNTRY = row1.newColumn24 != null ? StringHandling.TRIM(row1.newColumn24):"" ;
out1_tmp.CONTRACTOR = row1.newColumn25 != null ? StringHandling.TRIM(row1.newColumn25):"" ;
out1_tmp.ETD_PORT = row1.newColumn26 != null ? StringHandling.TRIM(row1.newColumn26):"" ;
out1_tmp.FACTORY_INVOICE = row1.newColumn27 != null ? StringHandling.TRIM(row1.newColumn27):"" ;
out1_tmp.PROFORMA_TO_CUSTOMER = row1.newColumn28 != null ? StringHandling.TRIM(row1.newColumn28):"" ;
out1_tmp.CARGO_READY_DATE = row1.newColumn29 != null ? StringHandling.TRIM(row1.newColumn29):"" ;
out1_tmp.BOOKING_APPROVAL_DATE = row1.newColumn30 != null ? StringHandling.TRIM(row1.newColumn30):"" ;
out1_tmp.ACTUAL_PICK_UP_DATE = row1.newColumn31 != null ? StringHandling.TRIM(row1.newColumn31):"" ;
out1_tmp.COPY_ORG_DOC_TO_CUST = row1.newColumn32 != null ? StringHandling.TRIM(row1.newColumn32):"" ;
out1_tmp.ORG_DOCS_TO_CUST = row1.newColumn33 != null ? StringHandling.TRIM(row1.newColumn33):"" ;
out1_tmp.QTY_PENDING_SHIP = row1.newColumn34 != null ? StringHandling.TRIM(row1.newColumn34):"" ;
out1_tmp.QTY_SHIPPED = row1.newColumn35 != null ? StringHandling.TRIM(row1.newColumn35):"" ;
out1_tmp.BOAT_AIR = row1.newColumn36 != null ? StringHandling.TRIM(row1.newColumn36):"" ;
out1_tmp.FREGHT_TYPE = row1.newColumn37 != null ? StringHandling.TRIM(row1.newColumn37):"" ;
out1_tmp.PO = row1.newColumn38 != null ? StringHandling.TRIM(row1.newColumn38):"" ;
out1_tmp.PO_COMPLETED = row1.newColumn39 != null ? StringHandling.TRIM(row1.newColumn39):"" ;
out1_tmp.PACKING_OF_THE_STYLE = row1.newColumn40 != null ? StringHandling.TRIM(row1.newColumn40):"" ;
out1_tmp.COMMENTS1 = row1.newColumn41 != null ? StringHandling.TRIM(row1.newColumn41):"" ;
out1_tmp.COMMENTS2 = row1.newColumn42 != null ? StringHandling.TRIM(row1.newColumn42):"" ;
out1_tmp.SIZE = row1.newColumn43 != null ? StringHandling.TRIM(row1.newColumn43):"" ;
out1_tmp.UPC = row1.newColumn44 != null ? StringHandling.TRIM(row1.newColumn44):"" ;
out1_tmp.SIZE2 = row1.newColumn45 != null ? StringHandling.TRIM(row1.newColumn45):"" ;
out1_tmp.UPC3 = row1.newColumn46 != null ? StringHandling.TRIM(row1.newColumn46):"" ;
out1_tmp.SIZE4 = row1.newColumn47 != null ? StringHandling.TRIM(row1.newColumn47):"" ;
out1_tmp.UPC5 = row1.newColumn48 != null ? StringHandling.TRIM(row1.newColumn48):"" ;
out1_tmp.SIZE6 = row1.newColumn49 != null ? StringHandling.TRIM(row1.newColumn49):"" ;
out1_tmp.UPC7 = row1.newColumn50 != null ? StringHandling.TRIM(row1.newColumn50):"" ;
out1_tmp.SIZE8 = row1.newColumn51 != null ? StringHandling.TRIM(row1.newColumn51):"" ;
out1_tmp.UPC9 = row1.newColumn52 != null ? StringHandling.TRIM(row1.newColumn52):"" ;
out1_tmp.SIZE10 = row1.newColumn53 != null ? StringHandling.TRIM(row1.newColumn53):"" ;
out1_tmp.UPC11 = row1.newColumn54 != null ? StringHandling.TRIM(row1.newColumn54):"" ;
out1_tmp.SIZE12 = row1.newColumn55 != null ? StringHandling.TRIM(row1.newColumn55):"" ;
out1_tmp.UPC13 = row1.newColumn56 != null ? StringHandling.TRIM(row1.newColumn56):"" ;
out1_tmp.SIZE14 = row1.newColumn57 != null ? StringHandling.TRIM(row1.newColumn57):"" ;
out1_tmp.UPC15 = row1.newColumn58 != null ? StringHandling.TRIM(row1.newColumn58):"" ;
out1_tmp.SIZE16 = row1.newColumn59 != null ? StringHandling.TRIM(row1.newColumn59):"" ;
out1_tmp.UPC17 = row1.newColumn60 != null ? StringHandling.TRIM(row1.newColumn60):"" ;
out1_tmp.SIZE18 = row1.newColumn61 != null ? StringHandling.TRIM(row1.newColumn61):"";
out1_tmp.UPC19 = row1.newColumn62 != null ? StringHandling.TRIM(row1.newColumn62):"" ;
out1_tmp.SIZE20 = row1.newColumn63 != null ? StringHandling.TRIM(row1.newColumn63):"" ;
out1_tmp.UPC21 = row1.newColumn64 != null ? StringHandling.TRIM(row1.newColumn64):"" ;
out1_tmp.SIZE22 = row1.newColumn65 != null ? StringHandling.TRIM(row1.newColumn65):"" ;
out1_tmp.UPC23 = row1.newColumn66 != null ? StringHandling.TRIM(row1.newColumn66):"" ;
out1_tmp.SIZE_ASSORTED = row1.newColumn67 != null ? StringHandling.TRIM(row1.newColumn67):"" ;
out1_tmp.UPC_ASSORTED = row1.newColumn68 != null ? StringHandling.TRIM(row1.newColumn68):"" ;
out1 = out1_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "out1"
if(out1 != null) { 



	
	/**
	 * [tFilterRow_1 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out1");
					}
					

          row2 = null;
    Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1("&&");
            ope_tFilterRow_1.matches((out1.SEASON2 == null? false : out1.SEASON2.compareTo(ParserUtils.parseTo_Integer(String.valueOf(17))) > 0)
                           , "SEASON2.compareTo(17) > 0 failed");
		 	
    
    if (ope_tFilterRow_1.getMatchFlag()) {
              if(row2 == null){ 
                row2 = new row2Struct();
              }
               row2.SEASON1 = out1.SEASON1;
               row2.SEASON2 = out1.SEASON2;
               row2.ACCT = out1.ACCT;
               row2.REF = out1.REF;
               row2.STYLE = out1.STYLE;
               row2.STYLE_NAME = out1.STYLE_NAME;
               row2.COLOR = out1.COLOR;
               row2.LABEL = out1.LABEL;
               row2.BRAND = out1.BRAND;
               row2.SUB_BRAND = out1.SUB_BRAND;
               row2.PRODUCT = out1.PRODUCT;
               row2.FASHION = out1.FASHION;
               row2.QTY = out1.QTY;
               row2.ORIGINAL_COST = out1.ORIGINAL_COST;
               row2.CURRENT_COST = out1.CURRENT_COST;
               row2.PRICE = out1.PRICE;
               row2.SIZE_RANGE = out1.SIZE_RANGE;
               row2.SIZE_CONFIGURATION = out1.SIZE_CONFIGURATION;
               row2.SIZE_SCALE = out1.SIZE_SCALE;
               row2.FABRIC_CONTENT = out1.FABRIC_CONTENT;
               row2.WT_CONST = out1.WT_CONST;
               row2.KNIT_WOVEN = out1.KNIT_WOVEN;
               row2.ORIGINAL_ETD = out1.ORIGINAL_ETD;
               row2.ACTUAL_ETD = out1.ACTUAL_ETD;
               row2.PO_REVISION = out1.PO_REVISION;
               row2.COUNTRY = out1.COUNTRY;
               row2.CONTRACTOR = out1.CONTRACTOR;
               row2.ETD_PORT = out1.ETD_PORT;
               row2.FACTORY_INVOICE = out1.FACTORY_INVOICE;
               row2.PROFORMA_TO_CUSTOMER = out1.PROFORMA_TO_CUSTOMER;
               row2.CARGO_READY_DATE = out1.CARGO_READY_DATE;
               row2.BOOKING_APPROVAL_DATE = out1.BOOKING_APPROVAL_DATE;
               row2.ACTUAL_PICK_UP_DATE = out1.ACTUAL_PICK_UP_DATE;
               row2.COPY_ORG_DOC_TO_CUST = out1.COPY_ORG_DOC_TO_CUST;
               row2.ORG_DOCS_TO_CUST = out1.ORG_DOCS_TO_CUST;
               row2.QTY_PENDING_SHIP = out1.QTY_PENDING_SHIP;
               row2.QTY_SHIPPED = out1.QTY_SHIPPED;
               row2.BOAT_AIR = out1.BOAT_AIR;
               row2.FREGHT_TYPE = out1.FREGHT_TYPE;
               row2.PO = out1.PO;
               row2.PO_COMPLETED = out1.PO_COMPLETED;
               row2.PACKING_OF_THE_STYLE = out1.PACKING_OF_THE_STYLE;
               row2.COMMENTS1 = out1.COMMENTS1;
               row2.COMMENTS2 = out1.COMMENTS2;
               row2.SIZE = out1.SIZE;
               row2.UPC = out1.UPC;
               row2.SIZE2 = out1.SIZE2;
               row2.UPC3 = out1.UPC3;
               row2.SIZE4 = out1.SIZE4;
               row2.UPC5 = out1.UPC5;
               row2.SIZE6 = out1.SIZE6;
               row2.UPC7 = out1.UPC7;
               row2.SIZE8 = out1.SIZE8;
               row2.UPC9 = out1.UPC9;
               row2.SIZE10 = out1.SIZE10;
               row2.UPC11 = out1.UPC11;
               row2.SIZE12 = out1.SIZE12;
               row2.UPC13 = out1.UPC13;
               row2.SIZE14 = out1.SIZE14;
               row2.UPC15 = out1.UPC15;
               row2.SIZE16 = out1.SIZE16;
               row2.UPC17 = out1.UPC17;
               row2.SIZE18 = out1.SIZE18;
               row2.UPC19 = out1.UPC19;
               row2.SIZE20 = out1.SIZE20;
               row2.UPC21 = out1.UPC21;
               row2.SIZE22 = out1.SIZE22;
               row2.UPC23 = out1.UPC23;
               row2.SIZE_ASSORTED = out1.SIZE_ASSORTED;
               row2.UPC_ASSORTED = out1.UPC_ASSORTED;    
      nb_line_ok_tFilterRow_1++;
    } else {
      nb_line_reject_tFilterRow_1++;
    }

nb_line_tFilterRow_1++;

 


	tos_count_tFilterRow_1++;

/**
 * [tFilterRow_1 main ] stop
 */
	
	/**
	 * [tFilterRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

 



/**
 * [tFilterRow_1 process_data_begin ] stop
 */
// Start of branch "row2"
if(row2 != null) { 



	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row2");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

out2 = null;


// # Output table : 'out2'
out2_tmp.SEASON = row2.SEASON1 + row2.SEASON2 ;
out2_tmp.ACCT = row2.ACCT ;
out2_tmp.REF = row2.REF ;
out2_tmp.STYLE = row2.STYLE ;
out2_tmp.FULL_STYLE = row2.STYLE + "-" + StringHandling.LEFT(row2.COLOR, 3) + "-" +  row2.LABEL ;
out2_tmp.STYLE_NAME = row2.STYLE_NAME ;
out2_tmp.COLOR = row2.COLOR ;
out2_tmp.LABEL = row2.LABEL ;
out2_tmp.BRAND = row2.BRAND ;
out2_tmp.SUB_BRAND = row2.SUB_BRAND ;
out2_tmp.PRODUCT = row2.PRODUCT ;
out2_tmp.FASHION = row2.FASHION ;
out2_tmp.QTY = row2.QTY  == null ? 0 : Mathematical.REAL(row2.QTY.replaceAll(",", ".") ) ;
out2_tmp.ORIGINAL_COST = row2.ORIGINAL_COST   == null ? 0 : Mathematical.REAL(row2.ORIGINAL_COST.replaceAll(",", ".") ) ;
out2_tmp.CURRENT_COST = row2.CURRENT_COST   == null ? 0 : Mathematical.REAL(row2.CURRENT_COST.replaceAll(",", ".") ) ;
out2_tmp.PRICE = row2.PRICE   == null ? 0 : Mathematical.REAL(row2.PRICE.replaceAll(",", ".") ) ;
out2_tmp.SIZE_RANGE = row2.SIZE_RANGE ;
out2_tmp.SIZE_CONFIGURATION = row2.SIZE_CONFIGURATION ;
out2_tmp.SIZE_SCALE = row2.SIZE_SCALE ;
out2_tmp.FABRIC_CONTENT = row2.FABRIC_CONTENT ;
out2_tmp.WT_CONST = row2.WT_CONST ;
out2_tmp.KNIT_WOVEN = row2.KNIT_WOVEN ;
out2_tmp.ORIGINAL_ETD = row2.ORIGINAL_ETD ;
out2_tmp.ACTUAL_ETD = row2.ACTUAL_ETD ;
out2_tmp.PO_REVISION = row2.PO_REVISION ;
out2_tmp.COUNTRY = row2.COUNTRY ;
out2_tmp.CONTRACTOR = row2.CONTRACTOR ;
out2_tmp.ETD_PORT = row2.ETD_PORT ;
out2_tmp.FACTORY_INVOICE = row2.FACTORY_INVOICE ;
out2_tmp.PROFORMA_TO_CUSTOMER = row2.PROFORMA_TO_CUSTOMER ;
out2_tmp.CARGO_READY_DATE = row2.CARGO_READY_DATE ;
out2_tmp.BOOKING_APPROVAL_DATE = row2.BOOKING_APPROVAL_DATE ;
out2_tmp.ACTUAL_PICK_UP_DATE = row2.ACTUAL_PICK_UP_DATE ;
out2_tmp.COPY_ORG_DOC_TO_CUST = row2.COPY_ORG_DOC_TO_CUST ;
out2_tmp.ORG_DOCS_TO_CUST = row2.ORG_DOCS_TO_CUST ;
out2_tmp.QTY_PENDING_SHIP = row2.QTY_PENDING_SHIP;
out2_tmp.QTY_SHIPPED = row2.QTY_SHIPPED ;
out2_tmp.BOAT_AIR = row2.BOAT_AIR ;
out2_tmp.FREGHT_TYPE = row2.FREGHT_TYPE ;
out2_tmp.PO = row2.PO ;
out2_tmp.PO_COMPLETED = row2.PO_COMPLETED ;
out2_tmp.PACKING_OF_THE_STYLE = row2.PACKING_OF_THE_STYLE ;
out2_tmp.COMMENTS1 = row2.COMMENTS1 ;
out2_tmp.COMMENTS2 = row2.COMMENTS2 ;
out2_tmp.SIZE = row2.SIZE ;
out2_tmp.UPC = row2.UPC ;
out2_tmp.SIZE2 = row2.SIZE2 ;
out2_tmp.UPC3 = row2.UPC3 ;
out2_tmp.SIZE4 = row2.SIZE4 ;
out2_tmp.UPC5 = row2.UPC5 ;
out2_tmp.SIZE6 = row2.SIZE6 ;
out2_tmp.UPC7 = row2.UPC7 ;
out2_tmp.SIZE8 = row2.SIZE8 ;
out2_tmp.UPC9 = row2.UPC9 ;
out2_tmp.SIZE10 = row2.SIZE10 ;
out2_tmp.UPC11 = row2.UPC11 ;
out2_tmp.SIZE12 = row2.SIZE12 ;
out2_tmp.UPC13 = row2.UPC13 ;
out2_tmp.SIZE14 = row2.SIZE14 ;
out2_tmp.UPC15 = row2.UPC15 ;
out2_tmp.SIZE16 = row2.SIZE16 ;
out2_tmp.UPC17 = row2.UPC17 ;
out2_tmp.SIZE18 = row2.SIZE18 ;
out2_tmp.UPC19 = row2.UPC19 ;
out2_tmp.SIZE20 = row2.SIZE20 ;
out2_tmp.UPC21 = row2.UPC21 ;
out2_tmp.SIZE22 = row2.SIZE22 ;
out2_tmp.UPC23 = row2.UPC23 ;
out2_tmp.SIZE_ASSORTED = row2.SIZE_ASSORTED ;
out2_tmp.UPC_ASSORTED = row2.UPC_ASSORTED ;
out2 = out2_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "out2"
if(out2 != null) { 



	
	/**
	 * [tFileOutputExcel_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out2");
					}
					

				xlsxTool_tFileOutputExcel_1.addRow();
									   				
	    				if(out2.SEASON != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.SEASON));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.ACCT != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.ACCT));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.REF != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.REF));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.STYLE != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.STYLE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.FULL_STYLE != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.FULL_STYLE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.STYLE_NAME != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.STYLE_NAME));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.COLOR != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.COLOR));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.LABEL != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.LABEL));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.BRAND != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.BRAND));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.SUB_BRAND != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.SUB_BRAND));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.PRODUCT != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.PRODUCT));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.FASHION != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.FASHION));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.QTY != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(out2.QTY);
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.ORIGINAL_COST != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(out2.ORIGINAL_COST);
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.CURRENT_COST != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(out2.CURRENT_COST);
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.PRICE != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(out2.PRICE);
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.SIZE_RANGE != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.SIZE_RANGE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.SIZE_CONFIGURATION != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.SIZE_CONFIGURATION));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.SIZE_SCALE != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.SIZE_SCALE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.FABRIC_CONTENT != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.FABRIC_CONTENT));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.WT_CONST != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.WT_CONST));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.KNIT_WOVEN != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.KNIT_WOVEN));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.ORIGINAL_ETD != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.ORIGINAL_ETD));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.ACTUAL_ETD != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.ACTUAL_ETD));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.PO_REVISION != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.PO_REVISION));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.COUNTRY != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.COUNTRY));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.CONTRACTOR != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.CONTRACTOR));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.ETD_PORT != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.ETD_PORT));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.FACTORY_INVOICE != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.FACTORY_INVOICE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.PROFORMA_TO_CUSTOMER != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.PROFORMA_TO_CUSTOMER));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.CARGO_READY_DATE != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.CARGO_READY_DATE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.BOOKING_APPROVAL_DATE != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.BOOKING_APPROVAL_DATE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.ACTUAL_PICK_UP_DATE != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.ACTUAL_PICK_UP_DATE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.COPY_ORG_DOC_TO_CUST != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.COPY_ORG_DOC_TO_CUST));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.ORG_DOCS_TO_CUST != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.ORG_DOCS_TO_CUST));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.QTY_PENDING_SHIP != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.QTY_PENDING_SHIP));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.QTY_SHIPPED != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.QTY_SHIPPED));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.BOAT_AIR != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.BOAT_AIR));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.FREGHT_TYPE != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.FREGHT_TYPE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.PO != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.PO));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.PO_COMPLETED != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.PO_COMPLETED));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.PACKING_OF_THE_STYLE != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.PACKING_OF_THE_STYLE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.COMMENTS1 != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.COMMENTS1));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.COMMENTS2 != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.COMMENTS2));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.SIZE != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.SIZE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.UPC != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.UPC));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.SIZE2 != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.SIZE2));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.UPC3 != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.UPC3));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.SIZE4 != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.SIZE4));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.UPC5 != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.UPC5));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.SIZE6 != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.SIZE6));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.UPC7 != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.UPC7));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.SIZE8 != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.SIZE8));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.UPC9 != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.UPC9));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.SIZE10 != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.SIZE10));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.UPC11 != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.UPC11));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.SIZE12 != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.SIZE12));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.UPC13 != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.UPC13));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.SIZE14 != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.SIZE14));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.UPC15 != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.UPC15));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.SIZE16 != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.SIZE16));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.UPC17 != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.UPC17));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.SIZE18 != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.SIZE18));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.UPC19 != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.UPC19));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.SIZE20 != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.SIZE20));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.UPC21 != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.UPC21));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.SIZE22 != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.SIZE22));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.UPC23 != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.UPC23));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.SIZE_ASSORTED != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.SIZE_ASSORTED));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(out2.UPC_ASSORTED != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(out2.UPC_ASSORTED));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_1++;
				
 


	tos_count_tFileOutputExcel_1++;

/**
 * [tFileOutputExcel_1 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

 



/**
 * [tFileOutputExcel_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

 



/**
 * [tFileOutputExcel_1 process_data_end ] stop
 */

} // End of branch "out2"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */

} // End of branch "row2"




	
	/**
	 * [tFilterRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

 



/**
 * [tFilterRow_1 process_data_end ] stop
 */

} // End of branch "out1"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */

} // End of branch "row1"




	
	/**
	 * [tFileInputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	


				nb_line_tFileInputDelimited_2++;
			}
			
			}finally{
    			if(!(filename_tFileInputDelimited_2 instanceof java.io.InputStream)){
    				if(csvReadertFileInputDelimited_2!=null){
    					csvReadertFileInputDelimited_2.close();
    				}
    			}
    			if(csvReadertFileInputDelimited_2!=null){
    				globalMap.put("tFileInputDelimited_2_NB_LINE",nb_line_tFileInputDelimited_2);
    			}
				
			}
						  

 

ok_Hash.put("tFileInputDelimited_2", true);
end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());




/**
 * [tFileInputDelimited_2 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tFilterRow_1 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	
    globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
    globalMap.put("tFilterRow_1_NB_LINE_OK", nb_line_ok_tFilterRow_1);
    globalMap.put("tFilterRow_1_NB_LINE_REJECT", nb_line_reject_tFilterRow_1);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out1");
			  	}
			  	
 

ok_Hash.put("tFilterRow_1", true);
end_Hash.put("tFilterRow_1", System.currentTimeMillis());




/**
 * [tFilterRow_1 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

	
	
	
			xlsxTool_tFileOutputExcel_1.writeExcel(fileName_tFileOutputExcel_1,true);
	
		
			nb_line_tFileOutputExcel_1 = nb_line_tFileOutputExcel_1 -1;
		
		globalMap.put("tFileOutputExcel_1_NB_LINE",nb_line_tFileOutputExcel_1);
		
		

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out2");
			  	}
			  	
 

ok_Hash.put("tFileOutputExcel_1", true);
end_Hash.put("tFileOutputExcel_1", System.currentTimeMillis());




/**
 * [tFileOutputExcel_1 end ] stop
 */












						if(execStat){
							runStat.updateStatOnConnection("iterate1", 2, "exec" + NB_ITERATE_tFileInputDelimited_2);
						}				
					




	
	/**
	 * [tFileList_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileList_1";

	

 



/**
 * [tFileList_1 process_data_end ] stop
 */
	
	/**
	 * [tFileList_1 end ] start
	 */

	

	
	
	currentComponent="tFileList_1";

	

  
    }
  globalMap.put("tFileList_1_NB_FILE", NB_FILEtFileList_1);
  

  
 

 

ok_Hash.put("tFileList_1", true);
end_Hash.put("tFileList_1", System.currentTimeMillis());




/**
 * [tFileList_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileList_1 finally ] start
	 */

	

	
	
	currentComponent="tFileList_1";

	

 



/**
 * [tFileList_1 finally ] stop
 */

	
	/**
	 * [tFileInputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tFilterRow_1 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

 



/**
 * [tFilterRow_1 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

 



/**
 * [tFileOutputExcel_1 finally ] stop
 */















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileList_1_SUBPROCESS_STATE", 1);
	}
	

public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";

	
		int tos_count_tPostjob_1 = 0;
		

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tDBRow_1Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBRow_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBRow_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRow_1", false);
		start_Hash.put("tDBRow_1", System.currentTimeMillis());
		
	
	currentComponent="tDBRow_1";

	
		int tos_count_tDBRow_1 = 0;
		

	java.sql.Connection conn_tDBRow_1 = null;
	String query_tDBRow_1 = "";
	boolean whetherReject_tDBRow_1 = false;
			String driverClass_tDBRow_1 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
		    java.lang.Class jdbcclazz_tDBRow_1 = java.lang.Class.forName(driverClass_tDBRow_1);
		
			String port_tDBRow_1 = context.SQLSERVER_Port;
		    String dbname_tDBRow_1 = context.SQLSERVER_Database ;
		    		    
		    String url_tDBRow_1 = "jdbc:sqlserver://" + context.SQLSERVER_Server ;
			
		    if (!"".equals(port_tDBRow_1)) {
		    	url_tDBRow_1 += ":" + context.SQLSERVER_Port;
		    }
		    if (!"".equals(dbname_tDBRow_1)) {
		   			    
		    	url_tDBRow_1 += ";databaseName=" + context.SQLSERVER_Database; 
			
		    }
		    url_tDBRow_1 += ";appName=" + projectName + ";" + context.SQLSERVER_AdditionalParams;
		
					String dbUser_tDBRow_1 = context.SQLSERVER_Login;
	        
            		
            		
            		
	final String decryptedPassword_tDBRow_1 = context.SQLSERVER_Password; 
        		   	
        	        String dbPwd_tDBRow_1 = decryptedPassword_tDBRow_1;
	        
					
			conn_tDBRow_1 = java.sql.DriverManager.getConnection(url_tDBRow_1,dbUser_tDBRow_1,dbPwd_tDBRow_1);
		
    resourceMap.put("conn_tDBRow_1", conn_tDBRow_1);
					if(conn_tDBRow_1.getAutoCommit()) {
						
				conn_tDBRow_1.setAutoCommit(false);
			
					}        
					int commitEvery_tDBRow_1 = 10000;
					int commitCounter_tDBRow_1 = 0;
				
        java.sql.Statement stmt_tDBRow_1 = conn_tDBRow_1.createStatement();
        resourceMap.put("stmt_tDBRow_1", stmt_tDBRow_1);

 



/**
 * [tDBRow_1 begin ] stop
 */
	
	/**
	 * [tDBRow_1 main ] start
	 */

	

	
	
	currentComponent="tDBRow_1";

	

query_tDBRow_1 = "\ninsert into [OSG].[treated]\nvalues (getdate(),"+"'" +  context.fileName + "')"
 ;
whetherReject_tDBRow_1 = false;
globalMap.put("tDBRow_1_QUERY",query_tDBRow_1);
try {
		stmt_tDBRow_1.execute(query_tDBRow_1);
		
	} catch (java.lang.Exception e) {
		whetherReject_tDBRow_1 = true;
		
				System.err.print(e.getMessage());
				
	}
	
		commitCounter_tDBRow_1++;
		if(commitEvery_tDBRow_1 <= commitCounter_tDBRow_1) {
			
			conn_tDBRow_1.commit();
			
			commitCounter_tDBRow_1=0;
		}
		

 


	tos_count_tDBRow_1++;

/**
 * [tDBRow_1 main ] stop
 */
	
	/**
	 * [tDBRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRow_1";

	

 



/**
 * [tDBRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRow_1";

	

 



/**
 * [tDBRow_1 process_data_end ] stop
 */
	
	/**
	 * [tDBRow_1 end ] start
	 */

	

	
	
	currentComponent="tDBRow_1";

	

	
        stmt_tDBRow_1.close();
        resourceMap.remove("stmt_tDBRow_1");
    resourceMap.put("statementClosed_tDBRow_1", true);
		if(commitEvery_tDBRow_1>commitCounter_tDBRow_1){

			
			conn_tDBRow_1.commit();
			
	
			commitCounter_tDBRow_1=0;
	
		}
			conn_tDBRow_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
    resourceMap.put("finish_tDBRow_1", true);
 

ok_Hash.put("tDBRow_1", true);
end_Hash.put("tDBRow_1", System.currentTimeMillis());




/**
 * [tDBRow_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBRow_1 finally ] start
	 */

	

	
	
	currentComponent="tDBRow_1";

	

try {
    if (resourceMap.get("statementClosed_tDBRow_1") == null) {
            java.sql.Statement stmtToClose_tDBRow_1 = null;
            if ((stmtToClose_tDBRow_1 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_1")) != null) {
                stmtToClose_tDBRow_1.close();
            }
    }
} finally {
        if(resourceMap.get("finish_tDBRow_1") == null){
            java.sql.Connection ctn_tDBRow_1 = null;
            if((ctn_tDBRow_1 = (java.sql.Connection)resourceMap.get("conn_tDBRow_1")) != null){
                try {
                    ctn_tDBRow_1.close();
                } catch (java.sql.SQLException sqlEx_tDBRow_1) {
                    String errorMessage_tDBRow_1 = "failed to close the connection in tDBRow_1 :" + sqlEx_tDBRow_1.getMessage();
                    System.err.println(errorMessage_tDBRow_1);
                }
            }
        }
    }
 



/**
 * [tDBRow_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBRow_1_SUBPROCESS_STATE", 1);
	}
	

public void connectionStatsLogs_CommitProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("connectionStatsLogs_Commit_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [connectionStatsLogs_Commit begin ] start
	 */

	

	
		
		ok_Hash.put("connectionStatsLogs_Commit", false);
		start_Hash.put("connectionStatsLogs_Commit", System.currentTimeMillis());
		
	
	currentComponent="connectionStatsLogs_Commit";

	
		int tos_count_connectionStatsLogs_Commit = 0;
		

 



/**
 * [connectionStatsLogs_Commit begin ] stop
 */
	
	/**
	 * [connectionStatsLogs_Commit main ] start
	 */

	

	
	
	currentComponent="connectionStatsLogs_Commit";

	

	java.sql.Connection conn_connectionStatsLogs_Commit = (java.sql.Connection)globalMap.get("conn_connectionStatsLogs");
	if(conn_connectionStatsLogs_Commit != null && !conn_connectionStatsLogs_Commit.isClosed())
	{
	
			
			conn_connectionStatsLogs_Commit.commit();
			
	
	}

 


	tos_count_connectionStatsLogs_Commit++;

/**
 * [connectionStatsLogs_Commit main ] stop
 */
	
	/**
	 * [connectionStatsLogs_Commit process_data_begin ] start
	 */

	

	
	
	currentComponent="connectionStatsLogs_Commit";

	

 



/**
 * [connectionStatsLogs_Commit process_data_begin ] stop
 */
	
	/**
	 * [connectionStatsLogs_Commit process_data_end ] start
	 */

	

	
	
	currentComponent="connectionStatsLogs_Commit";

	

 



/**
 * [connectionStatsLogs_Commit process_data_end ] stop
 */
	
	/**
	 * [connectionStatsLogs_Commit end ] start
	 */

	

	
	
	currentComponent="connectionStatsLogs_Commit";

	

 

ok_Hash.put("connectionStatsLogs_Commit", true);
end_Hash.put("connectionStatsLogs_Commit", System.currentTimeMillis());




/**
 * [connectionStatsLogs_Commit end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [connectionStatsLogs_Commit finally ] start
	 */

	

	
	
	currentComponent="connectionStatsLogs_Commit";

	

 



/**
 * [connectionStatsLogs_Commit finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("connectionStatsLogs_Commit_SUBPROCESS_STATE", 1);
	}
	

public void connectionStatsLogsProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("connectionStatsLogs_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [connectionStatsLogs begin ] start
	 */

	

	
		
		ok_Hash.put("connectionStatsLogs", false);
		start_Hash.put("connectionStatsLogs", System.currentTimeMillis());
		
	
	currentComponent="connectionStatsLogs";

	
		int tos_count_connectionStatsLogs = 0;
		
	

			    
		    String url_connectionStatsLogs = "jdbc:sqlserver://" + context.SQLSERVER_Server ;
		String port_connectionStatsLogs = context.SQLSERVER_Port;
		String dbname_connectionStatsLogs = context.SQLSERVER_Database ;
    	if (!"".equals(port_connectionStatsLogs)) {
    		url_connectionStatsLogs += ":" + context.SQLSERVER_Port;
    	}
    	if (!"".equals(dbname_connectionStatsLogs)) {
    				    
		    	url_connectionStatsLogs += ";databaseName=" + context.SQLSERVER_Database; 
    	}
		url_connectionStatsLogs += ";appName=" + projectName + ";" + context.SQLSERVER_AdditionalParams;  
		String dbUser_connectionStatsLogs = context.SQLSERVER_Login;
		
		
			
	final String decryptedPassword_connectionStatsLogs = context.SQLSERVER_Password; 
			String dbPwd_connectionStatsLogs = decryptedPassword_connectionStatsLogs;
		
	java.sql.Connection conn_connectionStatsLogs = null;
	
	
			String sharedConnectionName_connectionStatsLogs = "jdbc:sqlserver://"+context.SQLSERVER_Server+":"+context.SQLSERVER_Port+";DatabaseName="+context.SQLSERVER_Schema+";"+context.SQLSERVER_AdditionalParams+""+"_StatsAndLog_Shared_Connection";
			conn_connectionStatsLogs = SharedDBConnection.getDBConnection("com.microsoft.sqlserver.jdbc.SQLServerDriver",url_connectionStatsLogs,dbUser_connectionStatsLogs , dbPwd_connectionStatsLogs , sharedConnectionName_connectionStatsLogs);
	if (null != conn_connectionStatsLogs) {
		
			conn_connectionStatsLogs.setAutoCommit(false);
	}

	globalMap.put("dbschema_connectionStatsLogs", context.SQLSERVER_Schema);

	globalMap.put("db_connectionStatsLogs",  context.SQLSERVER_Database);

	globalMap.put("conn_connectionStatsLogs",conn_connectionStatsLogs);
	
	globalMap.put("shareIdentitySetting_connectionStatsLogs",  false);

 



/**
 * [connectionStatsLogs begin ] stop
 */
	
	/**
	 * [connectionStatsLogs main ] start
	 */

	

	
	
	currentComponent="connectionStatsLogs";

	

 


	tos_count_connectionStatsLogs++;

/**
 * [connectionStatsLogs main ] stop
 */
	
	/**
	 * [connectionStatsLogs process_data_begin ] start
	 */

	

	
	
	currentComponent="connectionStatsLogs";

	

 



/**
 * [connectionStatsLogs process_data_begin ] stop
 */
	
	/**
	 * [connectionStatsLogs process_data_end ] start
	 */

	

	
	
	currentComponent="connectionStatsLogs";

	

 



/**
 * [connectionStatsLogs process_data_end ] stop
 */
	
	/**
	 * [connectionStatsLogs end ] start
	 */

	

	
	
	currentComponent="connectionStatsLogs";

	

 

ok_Hash.put("connectionStatsLogs", true);
end_Hash.put("connectionStatsLogs", System.currentTimeMillis());




/**
 * [connectionStatsLogs end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [connectionStatsLogs finally ] start
	 */

	

	
	
	currentComponent="connectionStatsLogs";

	

 



/**
 * [connectionStatsLogs finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("connectionStatsLogs_SUBPROCESS_STATE", 1);
	}
	


public static class row_talendLogs_LOGSStruct implements routines.system.IPersistableRow<row_talendLogs_LOGSStruct> {
    final static byte[] commonByteArrayLock_DEV_TRANSFORM_OSG = new byte[0];
    static byte[] commonByteArray_DEV_TRANSFORM_OSG = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_TRANSFORM_OSG.length) {
				if(length < 1024 && commonByteArray_DEV_TRANSFORM_OSG.length == 0) {
   					commonByteArray_DEV_TRANSFORM_OSG = new byte[1024];
				} else {
   					commonByteArray_DEV_TRANSFORM_OSG = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_TRANSFORM_OSG, 0, length);
			strReturn = new String(commonByteArray_DEV_TRANSFORM_OSG, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_TRANSFORM_OSG) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row_talendLogs_LOGSStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void talendLogs_LOGSProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("talendLogs_LOGS_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row_talendLogs_LOGSStruct row_talendLogs_LOGS = new row_talendLogs_LOGSStruct();




	
	/**
	 * [talendLogs_DB begin ] start
	 */

	

	
		
		ok_Hash.put("talendLogs_DB", false);
		start_Hash.put("talendLogs_DB", System.currentTimeMillis());
		
	
		currentVirtualComponent = "talendLogs_DB";
	
	currentComponent="talendLogs_DB";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Main");
					}
				
		int tos_count_talendLogs_DB = 0;
		



int nb_line_talendLogs_DB = 0;
int nb_line_update_talendLogs_DB = 0;
int nb_line_inserted_talendLogs_DB = 0;
int nb_line_deleted_talendLogs_DB = 0;
int nb_line_rejected_talendLogs_DB = 0;

int deletedCount_talendLogs_DB=0;
int updatedCount_talendLogs_DB=0;
int insertedCount_talendLogs_DB=0;
int rejectedCount_talendLogs_DB=0;
String dbschema_talendLogs_DB = null;
String tableName_talendLogs_DB = null;
boolean whetherReject_talendLogs_DB = false;

java.util.Calendar calendar_talendLogs_DB = java.util.Calendar.getInstance();
long year1_talendLogs_DB = TalendDate.parseDate("yyyy-MM-dd","0001-01-01").getTime();
long year2_talendLogs_DB = TalendDate.parseDate("yyyy-MM-dd","1753-01-01").getTime();
long year10000_talendLogs_DB = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss","9999-12-31 24:00:00").getTime();
long date_talendLogs_DB;

java.util.Calendar calendar_datetimeoffset_talendLogs_DB = java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone("UTC"));

	
java.sql.Connection conn_talendLogs_DB = null;
String dbUser_talendLogs_DB = null;
	dbschema_talendLogs_DB = (String)globalMap.get("dbschema_connectionStatsLogs");
	conn_talendLogs_DB = (java.sql.Connection)globalMap.get("conn_connectionStatsLogs");
	
   int batchSize_talendLogs_DB = 10000;
   int batchSizeCounter_talendLogs_DB=0;

if(dbschema_talendLogs_DB == null || dbschema_talendLogs_DB.trim().length() == 0) {
    tableName_talendLogs_DB = "Log";
} else {
    tableName_talendLogs_DB = dbschema_talendLogs_DB + "].[" + "Log";
}
	int count_talendLogs_DB=0;


                    // [%connection%][checktable][tableName]
                    String keyCheckTable_talendLogs_DB = conn_talendLogs_DB + "[checktable]" + "[" + "Log" + "]";

                if(GlobalResource.resourceMap.get(keyCheckTable_talendLogs_DB)== null){//}

                    synchronized (GlobalResource.resourceLockMap.get(keyCheckTable_talendLogs_DB)) {//}
                        if(GlobalResource.resourceMap.get(keyCheckTable_talendLogs_DB)== null){//}
                                boolean whetherExist_talendLogs_DB = false;
                                try (java.sql.Statement isExistStmt_talendLogs_DB = conn_talendLogs_DB.createStatement()) {
                                    try {
                                        isExistStmt_talendLogs_DB.execute("SELECT TOP 1 1 FROM [" + tableName_talendLogs_DB + "]" );
                                        whetherExist_talendLogs_DB = true;
                                    } catch (java.lang.Exception e){
                                        whetherExist_talendLogs_DB = false;
                                    }
                                }
                                if(!whetherExist_talendLogs_DB) {
                                    try (java.sql.Statement stmtCreate_talendLogs_DB = conn_talendLogs_DB.createStatement()) {
                                        stmtCreate_talendLogs_DB.execute("CREATE TABLE [" + tableName_talendLogs_DB + "]([moment] DATETIME ,[pid] VARCHAR(20)  ,[root_pid] VARCHAR(20)  ,[father_pid] VARCHAR(20)  ,[project] VARCHAR(50)  ,[job] VARCHAR(255)  ,[context] VARCHAR(50)  ,[priority] INT ,[type] VARCHAR(255)  ,[origin] VARCHAR(255)  ,[message] VARCHAR(255)  ,[code] INT )");
                                    }
                                }
                            GlobalResource.resourceMap.put(keyCheckTable_talendLogs_DB, true);
            //{{{
                        } // end of if
                    } // end synchronized
                }
        String insert_talendLogs_DB = "INSERT INTO [" + tableName_talendLogs_DB + "] ([moment],[pid],[root_pid],[father_pid],[project],[job],[context],[priority],[type],[origin],[message],[code]) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)";

        java.sql.PreparedStatement pstmt_talendLogs_DB = null;
        String keyPsmt_talendLogs_DB = conn_talendLogs_DB + "[psmt]" + "[" + "Log" + "]";
        pstmt_talendLogs_DB = SharedDBPreparedStatement.getSharedPreparedStatement(conn_talendLogs_DB,insert_talendLogs_DB,keyPsmt_talendLogs_DB);
        resourceMap.put("pstmt_talendLogs_DB", pstmt_talendLogs_DB);
 	boolean isShareIdentity_talendLogs_DB = globalMap.get("shareIdentitySetting_connectionStatsLogs") != null && (Boolean)globalMap.get("shareIdentitySetting_connectionStatsLogs") == true;

 



/**
 * [talendLogs_DB begin ] stop
 */



	
	/**
	 * [talendLogs_LOGS begin ] start
	 */

	

	
		
		ok_Hash.put("talendLogs_LOGS", false);
		start_Hash.put("talendLogs_LOGS", System.currentTimeMillis());
		
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	
		int tos_count_talendLogs_LOGS = 0;
		

try {
	for (LogCatcherUtils.LogCatcherMessage lcm : talendLogs_LOGS.getMessages()) {
		row_talendLogs_LOGS.type = lcm.getType();
		row_talendLogs_LOGS.origin = (lcm.getOrigin()==null || lcm.getOrigin().length()<1 ? null : lcm.getOrigin());
		row_talendLogs_LOGS.priority = lcm.getPriority();
		row_talendLogs_LOGS.message = lcm.getMessage();
		row_talendLogs_LOGS.code = lcm.getCode();
		
		row_talendLogs_LOGS.moment = java.util.Calendar.getInstance().getTime();
	
    	row_talendLogs_LOGS.pid = pid;
		row_talendLogs_LOGS.root_pid = rootPid;
		row_talendLogs_LOGS.father_pid = fatherPid;
	
    	row_talendLogs_LOGS.project = projectName;
    	row_talendLogs_LOGS.job = jobName;
    	row_talendLogs_LOGS.context = contextStr;
    		
 



/**
 * [talendLogs_LOGS begin ] stop
 */
	
	/**
	 * [talendLogs_LOGS main ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	

 


	tos_count_talendLogs_LOGS++;

/**
 * [talendLogs_LOGS main ] stop
 */
	
	/**
	 * [talendLogs_LOGS process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	

 



/**
 * [talendLogs_LOGS process_data_begin ] stop
 */

	
	/**
	 * [talendLogs_DB main ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_DB";
	
	currentComponent="talendLogs_DB";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"Main");
					}
					



        whetherReject_talendLogs_DB = false;
                    if(row_talendLogs_LOGS.moment != null) {
pstmt_talendLogs_DB.setTimestamp(1, new java.sql.Timestamp(row_talendLogs_LOGS.moment.getTime()));
} else {
pstmt_talendLogs_DB.setNull(1, java.sql.Types.DATE);
}

                    if(row_talendLogs_LOGS.pid == null) {
pstmt_talendLogs_DB.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_talendLogs_DB.setString(2, row_talendLogs_LOGS.pid);
}

                    if(row_talendLogs_LOGS.root_pid == null) {
pstmt_talendLogs_DB.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_talendLogs_DB.setString(3, row_talendLogs_LOGS.root_pid);
}

                    if(row_talendLogs_LOGS.father_pid == null) {
pstmt_talendLogs_DB.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_talendLogs_DB.setString(4, row_talendLogs_LOGS.father_pid);
}

                    if(row_talendLogs_LOGS.project == null) {
pstmt_talendLogs_DB.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_talendLogs_DB.setString(5, row_talendLogs_LOGS.project);
}

                    if(row_talendLogs_LOGS.job == null) {
pstmt_talendLogs_DB.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_talendLogs_DB.setString(6, row_talendLogs_LOGS.job);
}

                    if(row_talendLogs_LOGS.context == null) {
pstmt_talendLogs_DB.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_talendLogs_DB.setString(7, row_talendLogs_LOGS.context);
}

                    if(row_talendLogs_LOGS.priority == null) {
pstmt_talendLogs_DB.setNull(8, java.sql.Types.INTEGER);
} else {pstmt_talendLogs_DB.setInt(8, row_talendLogs_LOGS.priority);
}

                    if(row_talendLogs_LOGS.type == null) {
pstmt_talendLogs_DB.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_talendLogs_DB.setString(9, row_talendLogs_LOGS.type);
}

                    if(row_talendLogs_LOGS.origin == null) {
pstmt_talendLogs_DB.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_talendLogs_DB.setString(10, row_talendLogs_LOGS.origin);
}

                    if(row_talendLogs_LOGS.message == null) {
pstmt_talendLogs_DB.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_talendLogs_DB.setString(11, row_talendLogs_LOGS.message);
}

                    if(row_talendLogs_LOGS.code == null) {
pstmt_talendLogs_DB.setNull(12, java.sql.Types.INTEGER);
} else {pstmt_talendLogs_DB.setInt(12, row_talendLogs_LOGS.code);
}


        		pstmt_talendLogs_DB.addBatch();
        		nb_line_talendLogs_DB++;
    		 
    		  batchSizeCounter_talendLogs_DB++;
    		
            	//////////batch execute by batch size///////
            	class LimitBytesHelper_talendLogs_DB{
            		public int limitBytePart1(int counter,java.sql.PreparedStatement pstmt_talendLogs_DB) throws Exception {
                try {
						
						for(int countEach_talendLogs_DB: pstmt_talendLogs_DB.executeBatch()) {
							if(countEach_talendLogs_DB == -2 || countEach_talendLogs_DB == -3) {
								break;
							}
							counter += countEach_talendLogs_DB;
						}
						
                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_talendLogs_DB = 0;
					for(int countEach_talendLogs_DB: e.getUpdateCounts()) {
						counter += (countEach_talendLogs_DB < 0 ? 0 : countEach_talendLogs_DB);
					}
				
            	    	
                		System.err.println(e.getMessage());
                	
               			 }
    				return counter;
            	}
            	
            	public int limitBytePart2(int counter,java.sql.PreparedStatement pstmt_talendLogs_DB) throws Exception {
                try {
                		
						for(int countEach_talendLogs_DB: pstmt_talendLogs_DB.executeBatch()) {
							if(countEach_talendLogs_DB == -2 || countEach_talendLogs_DB == -3) {
								break;
							}
							counter += countEach_talendLogs_DB;
						}
						
                }catch (java.sql.BatchUpdateException e){
                	
                	
					for(int countEach_talendLogs_DB: e.getUpdateCounts()) {
						counter += (countEach_talendLogs_DB < 0 ? 0 : countEach_talendLogs_DB);
					}
					
            	    	
                        System.err.println(e.getMessage());
                	
                		}	
                	return counter;	
            	}
            }
    		if ((batchSize_talendLogs_DB > 0) && (batchSize_talendLogs_DB <= batchSizeCounter_talendLogs_DB)) {
    		
    		            
            	    		insertedCount_talendLogs_DB = new LimitBytesHelper_talendLogs_DB().limitBytePart1(insertedCount_talendLogs_DB,pstmt_talendLogs_DB);
            	    	
    			
			    batchSizeCounter_talendLogs_DB = 0;
			}
    		

    	////////////commit every////////////
    			

 


	tos_count_talendLogs_DB++;

/**
 * [talendLogs_DB main ] stop
 */
	
	/**
	 * [talendLogs_DB process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_DB";
	
	currentComponent="talendLogs_DB";

	

 



/**
 * [talendLogs_DB process_data_begin ] stop
 */
	
	/**
	 * [talendLogs_DB process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_DB";
	
	currentComponent="talendLogs_DB";

	

 



/**
 * [talendLogs_DB process_data_end ] stop
 */



	
	/**
	 * [talendLogs_LOGS process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	

 



/**
 * [talendLogs_LOGS process_data_end ] stop
 */
	
	/**
	 * [talendLogs_LOGS end ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	
	}
} catch (Exception e_talendLogs_LOGS) {
	logIgnoredError(String.format("talendLogs_LOGS - tLogCatcher failed to process log message(s) due to internal error: %s", e_talendLogs_LOGS), e_talendLogs_LOGS);
}

 

ok_Hash.put("talendLogs_LOGS", true);
end_Hash.put("talendLogs_LOGS", System.currentTimeMillis());




/**
 * [talendLogs_LOGS end ] stop
 */

	
	/**
	 * [talendLogs_DB end ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_DB";
	
	currentComponent="talendLogs_DB";

	



                try {
						int countSum_talendLogs_DB = 0;
						if (pstmt_talendLogs_DB != null && batchSizeCounter_talendLogs_DB > 0) {
							
							for(int countEach_talendLogs_DB: pstmt_talendLogs_DB.executeBatch()) {
								if(countEach_talendLogs_DB == -2 || countEach_talendLogs_DB == -3) {
									break;
								}
								countSum_talendLogs_DB += countEach_talendLogs_DB;
							}
							
						}
            	    	
            	    		insertedCount_talendLogs_DB += countSum_talendLogs_DB;
            	    	
                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_talendLogs_DB = 0;
					for(int countEach_talendLogs_DB: e.getUpdateCounts()) {
						countSum_talendLogs_DB += (countEach_talendLogs_DB < 0 ? 0 : countEach_talendLogs_DB);
					}
					
            	    		insertedCount_talendLogs_DB += countSum_talendLogs_DB;
            	    	
                		System.err.println(e.getMessage());
                	
            	}
        if(pstmt_talendLogs_DB != null) {
			
				SharedDBPreparedStatement.releasePreparedStatement(keyPsmt_talendLogs_DB);
			
        }
    resourceMap.put("statementClosed_talendLogs_DB", true);

	nb_line_deleted_talendLogs_DB=nb_line_deleted_talendLogs_DB+ deletedCount_talendLogs_DB;
	nb_line_update_talendLogs_DB=nb_line_update_talendLogs_DB + updatedCount_talendLogs_DB;
	nb_line_inserted_talendLogs_DB=nb_line_inserted_talendLogs_DB + insertedCount_talendLogs_DB;
	nb_line_rejected_talendLogs_DB=nb_line_rejected_talendLogs_DB + rejectedCount_talendLogs_DB;
	
        globalMap.put("talendLogs_DB_NB_LINE",nb_line_talendLogs_DB);
        globalMap.put("talendLogs_DB_NB_LINE_UPDATED",nb_line_update_talendLogs_DB);
        globalMap.put("talendLogs_DB_NB_LINE_INSERTED",nb_line_inserted_talendLogs_DB);
        globalMap.put("talendLogs_DB_NB_LINE_DELETED",nb_line_deleted_talendLogs_DB);
        globalMap.put("talendLogs_DB_NB_LINE_REJECTED", nb_line_rejected_talendLogs_DB);
    
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Main");
			  	}
			  	
 

ok_Hash.put("talendLogs_DB", true);
end_Hash.put("talendLogs_DB", System.currentTimeMillis());




/**
 * [talendLogs_DB end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:talendLogs_LOGS:sub_ok_talendLogs_connectionStatsLogs_Commit", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("sub_ok_talendLogs_connectionStatsLogs_Commit", 0, "ok");
								} 
							
							connectionStatsLogs_CommitProcess(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [talendLogs_LOGS finally ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	

 



/**
 * [talendLogs_LOGS finally ] stop
 */

	
	/**
	 * [talendLogs_DB finally ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_DB";
	
	currentComponent="talendLogs_DB";

	



    if (resourceMap.get("statementClosed_talendLogs_DB") == null) {
                java.sql.PreparedStatement pstmtToClose_talendLogs_DB = null;
                if ((pstmtToClose_talendLogs_DB = (java.sql.PreparedStatement) resourceMap.remove("pstmt_talendLogs_DB")) != null) {
                    pstmtToClose_talendLogs_DB.close();
                }
    }
 



/**
 * [talendLogs_DB finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("talendLogs_LOGS_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final TRANSFORM_OSG TRANSFORM_OSGClass = new TRANSFORM_OSG();

        int exitCode = TRANSFORM_OSGClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = TRANSFORM_OSG.class.getClassLoader().getResourceAsStream("dev/transform_osg_0_12/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = TRANSFORM_OSG.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("IntegrationExcelPath", "id_String");
                            context.IntegrationExcelPath=(String) context.getProperty("IntegrationExcelPath");
                        context.setContextType("SQLSERVER_Server", "id_String");
                            context.SQLSERVER_Server=(String) context.getProperty("SQLSERVER_Server");
                        context.setContextType("SQLSERVER_Password", "id_Password");
                            String pwd_SQLSERVER_Password_value = context.getProperty("SQLSERVER_Password");
                            context.SQLSERVER_Password = null;
                            if(pwd_SQLSERVER_Password_value!=null) {
                                if(context_param.containsKey("SQLSERVER_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.SQLSERVER_Password = pwd_SQLSERVER_Password_value;
                                } else if (!pwd_SQLSERVER_Password_value.isEmpty()) {
                                    try {
                                        context.SQLSERVER_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_SQLSERVER_Password_value);
                                        context.put("SQLSERVER_Password",context.SQLSERVER_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        context.setContextType("SQLSERVER_AdditionalParams", "id_String");
                            context.SQLSERVER_AdditionalParams=(String) context.getProperty("SQLSERVER_AdditionalParams");
                        context.setContextType("SQLSERVER_Database", "id_String");
                            context.SQLSERVER_Database=(String) context.getProperty("SQLSERVER_Database");
                        context.setContextType("SQLSERVER_Port", "id_String");
                            context.SQLSERVER_Port=(String) context.getProperty("SQLSERVER_Port");
                        context.setContextType("SQLSERVER_Schema", "id_String");
                            context.SQLSERVER_Schema=(String) context.getProperty("SQLSERVER_Schema");
                        context.setContextType("SQLSERVER_Login", "id_String");
                            context.SQLSERVER_Login=(String) context.getProperty("SQLSERVER_Login");
                        context.setContextType("fileName", "id_String");
                            context.fileName=(String) context.getProperty("fileName");
                        context.setContextType("ExtractionPath", "id_String");
                            context.ExtractionPath=(String) context.getProperty("ExtractionPath");
                        context.setContextType("TemplateFile", "id_String");
                            context.TemplateFile=(String) context.getProperty("TemplateFile");
                        context.setContextType("OutputFileName", "id_String");
                            context.OutputFileName=(String) context.getProperty("OutputFileName");
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("IntegrationExcelPath")) {
                context.IntegrationExcelPath = (String) parentContextMap.get("IntegrationExcelPath");
            }if (parentContextMap.containsKey("SQLSERVER_Server")) {
                context.SQLSERVER_Server = (String) parentContextMap.get("SQLSERVER_Server");
            }if (parentContextMap.containsKey("SQLSERVER_Password")) {
                context.SQLSERVER_Password = (java.lang.String) parentContextMap.get("SQLSERVER_Password");
            }if (parentContextMap.containsKey("SQLSERVER_AdditionalParams")) {
                context.SQLSERVER_AdditionalParams = (String) parentContextMap.get("SQLSERVER_AdditionalParams");
            }if (parentContextMap.containsKey("SQLSERVER_Database")) {
                context.SQLSERVER_Database = (String) parentContextMap.get("SQLSERVER_Database");
            }if (parentContextMap.containsKey("SQLSERVER_Port")) {
                context.SQLSERVER_Port = (String) parentContextMap.get("SQLSERVER_Port");
            }if (parentContextMap.containsKey("SQLSERVER_Schema")) {
                context.SQLSERVER_Schema = (String) parentContextMap.get("SQLSERVER_Schema");
            }if (parentContextMap.containsKey("SQLSERVER_Login")) {
                context.SQLSERVER_Login = (String) parentContextMap.get("SQLSERVER_Login");
            }if (parentContextMap.containsKey("fileName")) {
                context.fileName = (String) parentContextMap.get("fileName");
            }if (parentContextMap.containsKey("ExtractionPath")) {
                context.ExtractionPath = (String) parentContextMap.get("ExtractionPath");
            }if (parentContextMap.containsKey("TemplateFile")) {
                context.TemplateFile = (String) parentContextMap.get("TemplateFile");
            }if (parentContextMap.containsKey("OutputFileName")) {
                context.OutputFileName = (String) parentContextMap.get("OutputFileName");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("SQLSERVER_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;preStaLogConProcess(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_preStaLogCon) {
globalMap.put("preStaLogCon_SUBPROCESS_STATE", -1);

e_preStaLogCon.printStackTrace();

}
try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}



this.globalResumeTicket = false;//to run others jobs


this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : TRANSFORM_OSG");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_connectionStatsLogs");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_connectionStatsLogs", globalMap.get("conn_connectionStatsLogs"));







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     291022 characters generated by Talend Open Studio for Data Integration 
 *     on the 20 avril 2023 18:25:23 CEST
 ************************************************************************************************/