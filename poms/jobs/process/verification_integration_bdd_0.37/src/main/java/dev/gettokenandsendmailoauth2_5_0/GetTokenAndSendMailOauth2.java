// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package dev.gettokenandsendmailoauth2_5_0;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendEmail;
import routines.TalendString;
import routines.StringHandling;
import routines.SharedRecipient;
import routines.TalendDate;
import routines.Relational;
import routines.Mathematical;
import routines.TalendUtils;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tLibraryLoad_3
	//import java.util.List;

	//the import part of tJava_2
	//import java.util.List;

	//the import part of tJava_1
	//import java.util.List;

	//the import part of tJavaRow_1
	//import java.util.List;

	//the import part of tJavaRow_10
	//import java.util.List;

	//the import part of tJavaRow_11
	//import java.util.List;

	//the import part of tJavaRow_12
	//import java.util.List;

	//the import part of tJavaRow_2
	//import java.util.List;

	//the import part of tJavaRow_3
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: GetTokenAndSendMailOauth2 Purpose: Send an email office 365 OAUTH2<br>
 * Description: Send an email office 365 OAUTH2 <br>
 * @author user@talend.com
 * @version 7.3.1.20191031_1204-M3
 * @status TEST
 */
public class GetTokenAndSendMailOauth2 implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(ResponseStatusCode != null){
				
					this.setProperty("ResponseStatusCode", ResponseStatusCode.toString());
				
			}
			
			if(Subject != null){
				
					this.setProperty("Subject", Subject.toString());
				
			}
			
			if(Content != null){
				
					this.setProperty("Content", Content.toString());
				
			}
			
			if(AttachmentsList != null){
				
					this.setProperty("AttachmentsList", AttachmentsList.toString());
				
			}
			
			if(ErrorAttachmentExists != null){
				
					this.setProperty("ErrorAttachmentExists", ErrorAttachmentExists.toString());
				
			}
			
			if(ErrorAttachmentSize != null){
				
					this.setProperty("ErrorAttachmentSize", ErrorAttachmentSize.toString());
				
			}
			
			if(TotalAttachmentSize != null){
				
					this.setProperty("TotalAttachmentSize", TotalAttachmentSize.toString());
				
			}
			
			if(ToAddress != null){
				
					this.setProperty("ToAddress", ToAddress.toString());
				
			}
			
			if(CCAddress != null){
				
					this.setProperty("CCAddress", CCAddress.toString());
				
			}
			
			if(FromAddress != null){
				
					this.setProperty("FromAddress", FromAddress.toString());
				
			}
			
			if(Office365AuthenticationUrl != null){
				
					this.setProperty("Office365AuthenticationUrl", Office365AuthenticationUrl.toString());
				
			}
			
			if(Office365ClientId != null){
				
					this.setProperty("Office365ClientId", Office365ClientId.toString());
				
			}
			
			if(Office365SecretId != null){
				
					this.setProperty("Office365SecretId", Office365SecretId.toString());
				
			}
			
			if(Office365SendMailUrl != null){
				
					this.setProperty("Office365SendMailUrl", Office365SendMailUrl.toString());
				
			}
			
			if(Office365Tenant != null){
				
					this.setProperty("Office365Tenant", Office365Tenant.toString());
				
			}
			
			if(Office365Token != null){
				
					this.setProperty("Office365Token", Office365Token.toString());
				
			}
			
			if(SQLSERVER_LOG_AdditionalParams != null){
				
					this.setProperty("SQLSERVER_LOG_AdditionalParams", SQLSERVER_LOG_AdditionalParams.toString());
				
			}
			
			if(SQLSERVER_LOG_Database != null){
				
					this.setProperty("SQLSERVER_LOG_Database", SQLSERVER_LOG_Database.toString());
				
			}
			
			if(SQLSERVER_LOG_Login != null){
				
					this.setProperty("SQLSERVER_LOG_Login", SQLSERVER_LOG_Login.toString());
				
			}
			
			if(SQLSERVER_LOG_Password != null){
				
					this.setProperty("SQLSERVER_LOG_Password", SQLSERVER_LOG_Password.toString());
				
			}
			
			if(SQLSERVER_LOG_Port != null){
				
					this.setProperty("SQLSERVER_LOG_Port", SQLSERVER_LOG_Port.toString());
				
			}
			
			if(SQLSERVER_LOG_Schema != null){
				
					this.setProperty("SQLSERVER_LOG_Schema", SQLSERVER_LOG_Schema.toString());
				
			}
			
			if(SQLSERVER_LOG_Server != null){
				
					this.setProperty("SQLSERVER_LOG_Server", SQLSERVER_LOG_Server.toString());
				
			}
			
		}

public Integer ResponseStatusCode;
public Integer getResponseStatusCode(){
	return this.ResponseStatusCode;
}
public String Subject;
public String getSubject(){
	return this.Subject;
}
public String Content;
public String getContent(){
	return this.Content;
}
public String AttachmentsList;
public String getAttachmentsList(){
	return this.AttachmentsList;
}
public Boolean ErrorAttachmentExists;
public Boolean getErrorAttachmentExists(){
	return this.ErrorAttachmentExists;
}
public Boolean ErrorAttachmentSize;
public Boolean getErrorAttachmentSize(){
	return this.ErrorAttachmentSize;
}
public Long TotalAttachmentSize;
public Long getTotalAttachmentSize(){
	return this.TotalAttachmentSize;
}
public String ToAddress;
public String getToAddress(){
	return this.ToAddress;
}
public String CCAddress;
public String getCCAddress(){
	return this.CCAddress;
}
public String FromAddress;
public String getFromAddress(){
	return this.FromAddress;
}
public String Office365AuthenticationUrl;
public String getOffice365AuthenticationUrl(){
	return this.Office365AuthenticationUrl;
}
public java.lang.String Office365ClientId;
public java.lang.String getOffice365ClientId(){
	return this.Office365ClientId;
}
public java.lang.String Office365SecretId;
public java.lang.String getOffice365SecretId(){
	return this.Office365SecretId;
}
public String Office365SendMailUrl;
public String getOffice365SendMailUrl(){
	return this.Office365SendMailUrl;
}
public java.lang.String Office365Tenant;
public java.lang.String getOffice365Tenant(){
	return this.Office365Tenant;
}
public String Office365Token;
public String getOffice365Token(){
	return this.Office365Token;
}
public String SQLSERVER_LOG_AdditionalParams;
public String getSQLSERVER_LOG_AdditionalParams(){
	return this.SQLSERVER_LOG_AdditionalParams;
}
public String SQLSERVER_LOG_Database;
public String getSQLSERVER_LOG_Database(){
	return this.SQLSERVER_LOG_Database;
}
public String SQLSERVER_LOG_Login;
public String getSQLSERVER_LOG_Login(){
	return this.SQLSERVER_LOG_Login;
}
public java.lang.String SQLSERVER_LOG_Password;
public java.lang.String getSQLSERVER_LOG_Password(){
	return this.SQLSERVER_LOG_Password;
}
public String SQLSERVER_LOG_Port;
public String getSQLSERVER_LOG_Port(){
	return this.SQLSERVER_LOG_Port;
}
public String SQLSERVER_LOG_Schema;
public String getSQLSERVER_LOG_Schema(){
	return this.SQLSERVER_LOG_Schema;
}
public String SQLSERVER_LOG_Server;
public String getSQLSERVER_LOG_Server(){
	return this.SQLSERVER_LOG_Server;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "5.0";
	private final String jobName = "GetTokenAndSendMailOauth2";
	private final String projectName = "DEV";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	LogCatcherUtils talendLogs_LOGS = new LogCatcherUtils();

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				GetTokenAndSendMailOauth2.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(GetTokenAndSendMailOauth2.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
				talendLogs_LOGS.addMessage("Java Exception", currentComponent, 6, e.getClass().getName() + ":" + e.getMessage(), 1);
				talendLogs_LOGSProcess(globalMap);
			}
			} catch (TalendException e) {
				// do nothing
			
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void preStaLogCon_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					preStaLogCon_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLibraryLoad_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLibraryLoad_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSleep_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSleep_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDie_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDie_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWarn_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tWarn_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRESTClient_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJSONDocOpen_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJSONDocExtractFields_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRESTClient_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJSONDocOpen_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJSONDocExtractFields_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDie_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDie_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJSONDocOpen_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJSONDocExtractFields_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDie_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void connectionStatsLogs_Commit_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					connectionStatsLogs_Commit_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void connectionStatsLogs_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					connectionStatsLogs_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void talendLogs_LOGS_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							talendLogs_DB_error(exception, errorComponent, globalMap);
						
						}
					
			public void talendLogs_DB_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					talendLogs_LOGS_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void preStaLogCon_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tLibraryLoad_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSleep_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDie_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDie_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWarn_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDie_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDie_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDie_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void connectionStatsLogs_Commit_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void connectionStatsLogs_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void talendLogs_LOGS_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	





public void preStaLogConProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("preStaLogCon_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [preStaLogCon begin ] start
	 */

	

	
		
		ok_Hash.put("preStaLogCon", false);
		start_Hash.put("preStaLogCon", System.currentTimeMillis());
		
	
	currentComponent="preStaLogCon";

	
		int tos_count_preStaLogCon = 0;
		

 



/**
 * [preStaLogCon begin ] stop
 */
	
	/**
	 * [preStaLogCon main ] start
	 */

	

	
	
	currentComponent="preStaLogCon";

	

 


	tos_count_preStaLogCon++;

/**
 * [preStaLogCon main ] stop
 */
	
	/**
	 * [preStaLogCon process_data_begin ] start
	 */

	

	
	
	currentComponent="preStaLogCon";

	

 



/**
 * [preStaLogCon process_data_begin ] stop
 */
	
	/**
	 * [preStaLogCon process_data_end ] start
	 */

	

	
	
	currentComponent="preStaLogCon";

	

 



/**
 * [preStaLogCon process_data_end ] stop
 */
	
	/**
	 * [preStaLogCon end ] start
	 */

	

	
	
	currentComponent="preStaLogCon";

	

 

ok_Hash.put("preStaLogCon", true);
end_Hash.put("preStaLogCon", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("after_preStaLogCon_connectionStatsLogs", 0, "ok");
				}
				connectionStatsLogsProcess(globalMap);



/**
 * [preStaLogCon end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [preStaLogCon finally ] start
	 */

	

	
	
	currentComponent="preStaLogCon";

	

 



/**
 * [preStaLogCon finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("preStaLogCon_SUBPROCESS_STATE", 1);
	}
	

public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";

	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tLibraryLoad_3Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	

public void tLibraryLoad_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tLibraryLoad_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tLibraryLoad_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tLibraryLoad_3", false);
		start_Hash.put("tLibraryLoad_3", System.currentTimeMillis());
		
	
	currentComponent="tLibraryLoad_3";

	
		int tos_count_tLibraryLoad_3 = 0;
		



 



/**
 * [tLibraryLoad_3 begin ] stop
 */
	
	/**
	 * [tLibraryLoad_3 main ] start
	 */

	

	
	
	currentComponent="tLibraryLoad_3";

	

 


	tos_count_tLibraryLoad_3++;

/**
 * [tLibraryLoad_3 main ] stop
 */
	
	/**
	 * [tLibraryLoad_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLibraryLoad_3";

	

 



/**
 * [tLibraryLoad_3 process_data_begin ] stop
 */
	
	/**
	 * [tLibraryLoad_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tLibraryLoad_3";

	

 



/**
 * [tLibraryLoad_3 process_data_end ] stop
 */
	
	/**
	 * [tLibraryLoad_3 end ] start
	 */

	

	
	
	currentComponent="tLibraryLoad_3";

	

 

ok_Hash.put("tLibraryLoad_3", true);
end_Hash.put("tLibraryLoad_3", System.currentTimeMillis());




/**
 * [tLibraryLoad_3 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tLibraryLoad_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tJava_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tLibraryLoad_3 finally ] start
	 */

	

	
	
	currentComponent="tLibraryLoad_3";

	

 



/**
 * [tLibraryLoad_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tLibraryLoad_3_SUBPROCESS_STATE", 1);
	}
	

public void tJava_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_2", false);
		start_Hash.put("tJava_2", System.currentTimeMillis());
		
	
	currentComponent="tJava_2";

	
		int tos_count_tJava_2 = 0;
		


System.out.println(context.CCAddress);

if (context.CCAddress == null || context.CCAddress.equals(""))
{
	context.CCAddress = "";
	System.out.println(context.CCAddress);
}




 



/**
 * [tJava_2 begin ] stop
 */
	
	/**
	 * [tJava_2 main ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 


	tos_count_tJava_2++;

/**
 * [tJava_2 main ] stop
 */
	
	/**
	 * [tJava_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 



/**
 * [tJava_2 process_data_begin ] stop
 */
	
	/**
	 * [tJava_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 



/**
 * [tJava_2 process_data_end ] stop
 */
	
	/**
	 * [tJava_2 end ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 

ok_Hash.put("tJava_2", true);
end_Hash.put("tJava_2", System.currentTimeMillis());




/**
 * [tJava_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
								} 
							
							tSleep_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_2 finally ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 



/**
 * [tJava_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}
	

public void tSleep_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSleep_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tSleep_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tSleep_1", false);
		start_Hash.put("tSleep_1", System.currentTimeMillis());
		
	
	currentComponent="tSleep_1";

	
		int tos_count_tSleep_1 = 0;
		

 



/**
 * [tSleep_1 begin ] stop
 */
	
	/**
	 * [tSleep_1 main ] start
	 */

	

	
	
	currentComponent="tSleep_1";

	

    Thread.sleep((1)*1000);

 


	tos_count_tSleep_1++;

/**
 * [tSleep_1 main ] stop
 */
	
	/**
	 * [tSleep_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSleep_1";

	

 



/**
 * [tSleep_1 process_data_begin ] stop
 */
	
	/**
	 * [tSleep_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tSleep_1";

	

 



/**
 * [tSleep_1 process_data_end ] stop
 */
	
	/**
	 * [tSleep_1 end ] start
	 */

	

	
	
	currentComponent="tSleep_1";

	

 

ok_Hash.put("tSleep_1", true);
end_Hash.put("tSleep_1", System.currentTimeMillis());

   			if (context.FromAddress == null || StringHandling.TRIM( context.FromAddress ).equals("")

) {
   				
					if(execStat){   
   	 					runStat.updateStatOnConnection("If1", 0, "true");
					}
				
    			tDie_1Process(globalMap);
   			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If1", 0, "false");
					}   	 
   				}
   			if (context.Subject == null || StringHandling.TRIM( context.Subject ).equals("")
) {
   				
					if(execStat){   
   	 					runStat.updateStatOnConnection("If2", 0, "true");
					}
				
    			tDie_2Process(globalMap);
   			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If2", 0, "false");
					}   	 
   				}
   			if (! StringHandling.TRIM( context.FromAddress ).equals("") && !StringHandling.TRIM( context.Subject ).equals("")&& !StringHandling.TRIM( context.Content ).equals("") ) {
   				
					if(execStat){   
   	 					runStat.updateStatOnConnection("If3", 0, "true");
					}
				
    			tWarn_1Process(globalMap);
   			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If3", 0, "false");
					}   	 
   				}
   			if (context.Content == null || StringHandling.TRIM( context.Content ).equals("")
) {
   				
					if(execStat){   
   	 					runStat.updateStatOnConnection("If4", 0, "true");
					}
				
    			tDie_3Process(globalMap);
   			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If4", 0, "false");
					}   	 
   				}



/**
 * [tSleep_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSleep_1 finally ] start
	 */

	

	
	
	currentComponent="tSleep_1";

	

 



/**
 * [tSleep_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSleep_1_SUBPROCESS_STATE", 1);
	}
	

public void tDie_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_1", false);
		start_Hash.put("tDie_1", System.currentTimeMillis());
		
	
	currentComponent="tDie_1";

	
		int tos_count_tDie_1 = 0;
		

 



/**
 * [tDie_1 begin ] stop
 */
	
	/**
	 * [tDie_1 main ] start
	 */

	

	
	
	currentComponent="tDie_1";

	

	try {
				talendLogs_LOGS.addMessage("tDie", "tDie_1", 5, "From Address cannot be null.", 4);
				talendLogs_LOGSProcess(globalMap);
				
	globalMap.put("tDie_1_DIE_PRIORITY", 5);
	System.err.println("From Address cannot be null.");
	
	globalMap.put("tDie_1_DIE_MESSAGE", "From Address cannot be null.");
	globalMap.put("tDie_1_DIE_MESSAGES", "From Address cannot be null.");
	
	} catch (Exception | Error e_tDie_1) {
		logIgnoredError(String.format("tDie_1 - tDie failed to log message due to internal error: %s", e_tDie_1), e_tDie_1);
	}
	
	currentComponent = "tDie_1";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_1_DIE_CODE", errorCode);        
    
	if(true){	
	    throw new TDieException();
	}

 


	tos_count_tDie_1++;

/**
 * [tDie_1 main ] stop
 */
	
	/**
	 * [tDie_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_1";

	

 



/**
 * [tDie_1 process_data_begin ] stop
 */
	
	/**
	 * [tDie_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_1";

	

 



/**
 * [tDie_1 process_data_end ] stop
 */
	
	/**
	 * [tDie_1 end ] start
	 */

	

	
	
	currentComponent="tDie_1";

	

 

ok_Hash.put("tDie_1", true);
end_Hash.put("tDie_1", System.currentTimeMillis());




/**
 * [tDie_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_1 finally ] start
	 */

	

	
	
	currentComponent="tDie_1";

	

 



/**
 * [tDie_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_1_SUBPROCESS_STATE", 1);
	}
	

public void tDie_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_2", false);
		start_Hash.put("tDie_2", System.currentTimeMillis());
		
	
	currentComponent="tDie_2";

	
		int tos_count_tDie_2 = 0;
		

 



/**
 * [tDie_2 begin ] stop
 */
	
	/**
	 * [tDie_2 main ] start
	 */

	

	
	
	currentComponent="tDie_2";

	

	try {
				talendLogs_LOGS.addMessage("tDie", "tDie_2", 5, "Subject cannot be null.", 4);
				talendLogs_LOGSProcess(globalMap);
				
	globalMap.put("tDie_2_DIE_PRIORITY", 5);
	System.err.println("Subject cannot be null.");
	
	globalMap.put("tDie_2_DIE_MESSAGE", "Subject cannot be null.");
	globalMap.put("tDie_2_DIE_MESSAGES", "Subject cannot be null.");
	
	} catch (Exception | Error e_tDie_2) {
		logIgnoredError(String.format("tDie_2 - tDie failed to log message due to internal error: %s", e_tDie_2), e_tDie_2);
	}
	
	currentComponent = "tDie_2";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_2_DIE_CODE", errorCode);        
    
	if(true){	
	    throw new TDieException();
	}

 


	tos_count_tDie_2++;

/**
 * [tDie_2 main ] stop
 */
	
	/**
	 * [tDie_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_2";

	

 



/**
 * [tDie_2 process_data_begin ] stop
 */
	
	/**
	 * [tDie_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_2";

	

 



/**
 * [tDie_2 process_data_end ] stop
 */
	
	/**
	 * [tDie_2 end ] start
	 */

	

	
	
	currentComponent="tDie_2";

	

 

ok_Hash.put("tDie_2", true);
end_Hash.put("tDie_2", System.currentTimeMillis());




/**
 * [tDie_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_2 finally ] start
	 */

	

	
	
	currentComponent="tDie_2";

	

 



/**
 * [tDie_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_2_SUBPROCESS_STATE", 1);
	}
	

public void tWarn_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWarn_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tWarn_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tWarn_1", false);
		start_Hash.put("tWarn_1", System.currentTimeMillis());
		
	
	currentComponent="tWarn_1";

	
		int tos_count_tWarn_1 = 0;
		

 



/**
 * [tWarn_1 begin ] stop
 */
	
	/**
	 * [tWarn_1 main ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

		
try {
	
	resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_1", "", Thread.currentThread().getId() + "", "INFO","","Start job","", "");
	talendLogs_LOGS.addMessage("tWarn", "tWarn_1", 3, "Start job", 3);
	talendLogs_LOGSProcess(globalMap);
	globalMap.put("tWarn_1_WARN_MESSAGES", "Start job"); 
	globalMap.put("tWarn_1_WARN_PRIORITY", 3);
	globalMap.put("tWarn_1_WARN_CODE", 3);
	
} catch (Exception e_tWarn_1) {
	logIgnoredError(String.format("tWarn_1 - tWarn failed to log message due to internal error: %s", e_tWarn_1), e_tWarn_1);
}


 


	tos_count_tWarn_1++;

/**
 * [tWarn_1 main ] stop
 */
	
	/**
	 * [tWarn_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

 



/**
 * [tWarn_1 process_data_begin ] stop
 */
	
	/**
	 * [tWarn_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

 



/**
 * [tWarn_1 process_data_end ] stop
 */
	
	/**
	 * [tWarn_1 end ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

 

ok_Hash.put("tWarn_1", true);
end_Hash.put("tWarn_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tJava_1Process(globalMap);



/**
 * [tWarn_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWarn_1 finally ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

 



/**
 * [tWarn_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWarn_1_SUBPROCESS_STATE", 1);
	}
	


public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_DEV_GetTokenAndSendMailOauth2 = new byte[0];
    static byte[] commonByteArray_DEV_GetTokenAndSendMailOauth2 = new byte[0];

	
			    public String error;

				public String getError () {
					return this.error;
				}
				
			    public String error_description;

				public String getError_description () {
					return this.error_description;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_GetTokenAndSendMailOauth2.length) {
				if(length < 1024 && commonByteArray_DEV_GetTokenAndSendMailOauth2.length == 0) {
   					commonByteArray_DEV_GetTokenAndSendMailOauth2 = new byte[1024];
				} else {
   					commonByteArray_DEV_GetTokenAndSendMailOauth2 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_GetTokenAndSendMailOauth2, 0, length);
			strReturn = new String(commonByteArray_DEV_GetTokenAndSendMailOauth2, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_GetTokenAndSendMailOauth2) {

        	try {

        		int length = 0;
		
					this.error = readString(dis);
					
					this.error_description = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.error,dos);
					
					// String
				
						writeString(this.error_description,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("error="+error);
		sb.append(",error_description="+error_description);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_DEV_GetTokenAndSendMailOauth2 = new byte[0];
    static byte[] commonByteArray_DEV_GetTokenAndSendMailOauth2 = new byte[0];

	
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_GetTokenAndSendMailOauth2.length) {
				if(length < 1024 && commonByteArray_DEV_GetTokenAndSendMailOauth2.length == 0) {
   					commonByteArray_DEV_GetTokenAndSendMailOauth2 = new byte[1024];
				} else {
   					commonByteArray_DEV_GetTokenAndSendMailOauth2 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_GetTokenAndSendMailOauth2, 0, length);
			strReturn = new String(commonByteArray_DEV_GetTokenAndSendMailOauth2, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_GetTokenAndSendMailOauth2) {

        	try {

        		int length = 0;
		
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_DEV_GetTokenAndSendMailOauth2 = new byte[0];
    static byte[] commonByteArray_DEV_GetTokenAndSendMailOauth2 = new byte[0];

	
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_GetTokenAndSendMailOauth2.length) {
				if(length < 1024 && commonByteArray_DEV_GetTokenAndSendMailOauth2.length == 0) {
   					commonByteArray_DEV_GetTokenAndSendMailOauth2 = new byte[1024];
				} else {
   					commonByteArray_DEV_GetTokenAndSendMailOauth2 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_GetTokenAndSendMailOauth2, 0, length);
			strReturn = new String(commonByteArray_DEV_GetTokenAndSendMailOauth2, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_GetTokenAndSendMailOauth2) {

        	try {

        		int length = 0;
		
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_DEV_GetTokenAndSendMailOauth2 = new byte[0];
    static byte[] commonByteArray_DEV_GetTokenAndSendMailOauth2 = new byte[0];

	
			    public String access_token;

				public String getAccess_token () {
					return this.access_token;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_GetTokenAndSendMailOauth2.length) {
				if(length < 1024 && commonByteArray_DEV_GetTokenAndSendMailOauth2.length == 0) {
   					commonByteArray_DEV_GetTokenAndSendMailOauth2 = new byte[1024];
				} else {
   					commonByteArray_DEV_GetTokenAndSendMailOauth2 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_GetTokenAndSendMailOauth2, 0, length);
			strReturn = new String(commonByteArray_DEV_GetTokenAndSendMailOauth2, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_GetTokenAndSendMailOauth2) {

        	try {

        		int length = 0;
		
					this.access_token = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.access_token,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("access_token="+access_token);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class jsonDocStruct implements routines.system.IPersistableRow<jsonDocStruct> {
    final static byte[] commonByteArrayLock_DEV_GetTokenAndSendMailOauth2 = new byte[0];
    static byte[] commonByteArray_DEV_GetTokenAndSendMailOauth2 = new byte[0];

	
			    public Integer statusCode;

				public Integer getStatusCode () {
					return this.statusCode;
				}
				
			    public routines.system.Document body;

				public routines.system.Document getBody () {
					return this.body;
				}
				
			    public String string;

				public String getString () {
					return this.string;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_GetTokenAndSendMailOauth2.length) {
				if(length < 1024 && commonByteArray_DEV_GetTokenAndSendMailOauth2.length == 0) {
   					commonByteArray_DEV_GetTokenAndSendMailOauth2 = new byte[1024];
				} else {
   					commonByteArray_DEV_GetTokenAndSendMailOauth2 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_GetTokenAndSendMailOauth2, 0, length);
			strReturn = new String(commonByteArray_DEV_GetTokenAndSendMailOauth2, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_GetTokenAndSendMailOauth2) {

        	try {

        		int length = 0;
		
						this.statusCode = readInteger(dis);
					
						this.body = (routines.system.Document) dis.readObject();
					
					this.string = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.statusCode,dos);
					
					// Document
				
       			    	dos.writeObject(this.body);
					
					// String
				
						writeString(this.string,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("statusCode="+String.valueOf(statusCode));
		sb.append(",body="+String.valueOf(body));
		sb.append(",string="+string);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(jsonDocStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_DEV_GetTokenAndSendMailOauth2 = new byte[0];
    static byte[] commonByteArray_DEV_GetTokenAndSendMailOauth2 = new byte[0];

	
			    public Integer statusCode;

				public Integer getStatusCode () {
					return this.statusCode;
				}
				
			    public routines.system.Document body;

				public routines.system.Document getBody () {
					return this.body;
				}
				
			    public String string;

				public String getString () {
					return this.string;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_GetTokenAndSendMailOauth2.length) {
				if(length < 1024 && commonByteArray_DEV_GetTokenAndSendMailOauth2.length == 0) {
   					commonByteArray_DEV_GetTokenAndSendMailOauth2 = new byte[1024];
				} else {
   					commonByteArray_DEV_GetTokenAndSendMailOauth2 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_GetTokenAndSendMailOauth2, 0, length);
			strReturn = new String(commonByteArray_DEV_GetTokenAndSendMailOauth2, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_GetTokenAndSendMailOauth2) {

        	try {

        		int length = 0;
		
						this.statusCode = readInteger(dis);
					
						this.body = (routines.system.Document) dis.readObject();
					
					this.string = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.statusCode,dos);
					
					// Document
				
       			    	dos.writeObject(this.body);
					
					// String
				
						writeString(this.string,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("statusCode="+String.valueOf(statusCode));
		sb.append(",body="+String.valueOf(body));
		sb.append(",string="+string);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_DEV_GetTokenAndSendMailOauth2 = new byte[0];
    static byte[] commonByteArray_DEV_GetTokenAndSendMailOauth2 = new byte[0];

	
			    public Integer errorCode;

				public Integer getErrorCode () {
					return this.errorCode;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_GetTokenAndSendMailOauth2.length) {
				if(length < 1024 && commonByteArray_DEV_GetTokenAndSendMailOauth2.length == 0) {
   					commonByteArray_DEV_GetTokenAndSendMailOauth2 = new byte[1024];
				} else {
   					commonByteArray_DEV_GetTokenAndSendMailOauth2 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_GetTokenAndSendMailOauth2, 0, length);
			strReturn = new String(commonByteArray_DEV_GetTokenAndSendMailOauth2, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_GetTokenAndSendMailOauth2) {

        	try {

        		int length = 0;
		
						this.errorCode = readInteger(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.errorCode,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("errorCode="+String.valueOf(errorCode));
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_DEV_GetTokenAndSendMailOauth2 = new byte[0];
    static byte[] commonByteArray_DEV_GetTokenAndSendMailOauth2 = new byte[0];

	
			    public Integer statusCode;

				public Integer getStatusCode () {
					return this.statusCode;
				}
				
			    public routines.system.Document body;

				public routines.system.Document getBody () {
					return this.body;
				}
				
			    public String string;

				public String getString () {
					return this.string;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_GetTokenAndSendMailOauth2.length) {
				if(length < 1024 && commonByteArray_DEV_GetTokenAndSendMailOauth2.length == 0) {
   					commonByteArray_DEV_GetTokenAndSendMailOauth2 = new byte[1024];
				} else {
   					commonByteArray_DEV_GetTokenAndSendMailOauth2 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_GetTokenAndSendMailOauth2, 0, length);
			strReturn = new String(commonByteArray_DEV_GetTokenAndSendMailOauth2, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_GetTokenAndSendMailOauth2) {

        	try {

        		int length = 0;
		
						this.statusCode = readInteger(dis);
					
						this.body = (routines.system.Document) dis.readObject();
					
					this.string = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.statusCode,dos);
					
					// Document
				
       			    	dos.writeObject(this.body);
					
					// String
				
						writeString(this.string,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("statusCode="+String.valueOf(statusCode));
		sb.append(",body="+String.valueOf(body));
		sb.append(",string="+string);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();
row6Struct row6 = new row6Struct();
row6Struct jsonDoc = row6;
row1Struct row1 = new row1Struct();
row7Struct row7 = new row7Struct();
row3Struct row3 = new row3Struct();
row3Struct row5 = row3;
row4Struct row4 = new row4Struct();







	
	/**
	 * [tJavaRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_1", false);
		start_Hash.put("tJavaRow_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tJavaRow_1 = 0;
		

int nb_line_tJavaRow_1 = 0;

 



/**
 * [tJavaRow_1 begin ] stop
 */



	
	/**
	 * [tJSONDocExtractFields_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJSONDocExtractFields_1", false);
		start_Hash.put("tJSONDocExtractFields_1", System.currentTimeMillis());
		
	
	currentComponent="tJSONDocExtractFields_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"jsonDoc");
					}
				
		int tos_count_tJSONDocExtractFields_1 = 0;
		

 



/**
 * [tJSONDocExtractFields_1 begin ] stop
 */



	
	/**
	 * [tJSONDocOpen_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJSONDocOpen_1", false);
		start_Hash.put("tJSONDocOpen_1", System.currentTimeMillis());
		
	
	currentComponent="tJSONDocOpen_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tJSONDocOpen_1 = 0;
		


 



/**
 * [tJSONDocOpen_1 begin ] stop
 */







	
	/**
	 * [tJavaRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_3", false);
		start_Hash.put("tJavaRow_3", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tJavaRow_3 = 0;
		

int nb_line_tJavaRow_3 = 0;

 



/**
 * [tJavaRow_3 begin ] stop
 */



	
	/**
	 * [tJSONDocExtractFields_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJSONDocExtractFields_2", false);
		start_Hash.put("tJSONDocExtractFields_2", System.currentTimeMillis());
		
	
	currentComponent="tJSONDocExtractFields_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tJSONDocExtractFields_2 = 0;
		

 



/**
 * [tJSONDocExtractFields_2 begin ] stop
 */



	
	/**
	 * [tJSONDocOpen_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJSONDocOpen_2", false);
		start_Hash.put("tJSONDocOpen_2", System.currentTimeMillis());
		
	
	currentComponent="tJSONDocOpen_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tJSONDocOpen_2 = 0;
		


 



/**
 * [tJSONDocOpen_2 begin ] stop
 */



	
	/**
	 * [tJavaRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_2", false);
		start_Hash.put("tJavaRow_2", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7");
					}
				
		int tos_count_tJavaRow_2 = 0;
		

int nb_line_tJavaRow_2 = 0;

 



/**
 * [tJavaRow_2 begin ] stop
 */



	
	/**
	 * [tRESTClient_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRESTClient_1", false);
		start_Hash.put("tRESTClient_1", System.currentTimeMillis());
		
	
	currentComponent="tRESTClient_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tRESTClient_1 = 0;
		

 



/**
 * [tRESTClient_1 begin ] stop
 */



	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";

	
		int tos_count_tJava_1 = 0;
		


//System.out.println("Authentification URL");
//System.out.println(context.Office365AuthenticationUrl + context.Office365Tenant);
 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_begin ] stop
 */

	
	/**
	 * [tRESTClient_1 main ] start
	 */

	

	
	
	currentComponent="tRESTClient_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row2");
					}
					
	row7 = null;	row6 = null;

// expected response body
javax.ws.rs.core.Response responseDoc_tRESTClient_1 = null;

try {
	// request body
	org.dom4j.Document requestDoc_tRESTClient_1 = null;
	String requestString_tRESTClient_1 = null;
			if (null != row2.body) {
				requestDoc_tRESTClient_1 = row2.body.getDocument();
			}
			requestString_tRESTClient_1 = row2.string;

	Object requestBody_tRESTClient_1 = requestDoc_tRESTClient_1 != null ? requestDoc_tRESTClient_1 : requestString_tRESTClient_1;

	

    //resposne class name
	Class<?> responseClass_tRESTClient_1
		= String.class;

	// create web client instance
	org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean factoryBean_tRESTClient_1 =
			new org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean();

	boolean inOSGi = routines.system.BundleUtils.inOSGi();

	final java.util.List<org.apache.cxf.feature.Feature> features_tRESTClient_1 =
			new java.util.ArrayList<org.apache.cxf.feature.Feature>();

	
		String url = context.Office365AuthenticationUrl + context.Office365Tenant;
		// {baseUri}tRESTClient
		factoryBean_tRESTClient_1.setServiceName(new javax.xml.namespace.QName(url, "tRESTClient"));
		factoryBean_tRESTClient_1.setAddress(url);
	

	

	

	

	factoryBean_tRESTClient_1.setFeatures(features_tRESTClient_1);


	java.util.List<Object> providers_tRESTClient_1 = new java.util.ArrayList<Object>();
	providers_tRESTClient_1.add(new org.apache.cxf.jaxrs.provider.dom4j.DOM4JProvider() {
		// workaround for https://jira.talendforge.org/browse/TESB-7276
		public org.dom4j.Document readFrom(Class<org.dom4j.Document> cls,
											java.lang.reflect.Type type,
											java.lang.annotation.Annotation[] anns,
											javax.ws.rs.core.MediaType mt,
											javax.ws.rs.core.MultivaluedMap<String, String> headers,
											java.io.InputStream is)
				throws IOException, javax.ws.rs.WebApplicationException {
			String contentLength = headers.getFirst("Content-Length");
			if (!org.apache.cxf.common.util.StringUtils.isEmpty(contentLength)
					&& Integer.valueOf(contentLength) <= 0) {
				try {
					return org.dom4j.DocumentHelper.parseText("<root/>");
				} catch (org.dom4j.DocumentException e_tRESTClient_1) {
					e_tRESTClient_1.printStackTrace();
				}
				return null;
			}
			return super.readFrom(cls, type, anns, mt, headers, is);
		}
	});
	org.apache.cxf.jaxrs.provider.json.JSONProvider jsonProvider_tRESTClient_1 =
			new org.apache.cxf.jaxrs.provider.json.JSONProvider();
		jsonProvider_tRESTClient_1.setIgnoreNamespaces(true);
		jsonProvider_tRESTClient_1.setAttributesToElements(true);
	
	
		jsonProvider_tRESTClient_1.setSupportUnwrapped(true);
		jsonProvider_tRESTClient_1.setWrapperName("root");
	
	
		jsonProvider_tRESTClient_1.setDropRootElement(false);
		jsonProvider_tRESTClient_1.setConvertTypesToStrings(false);
	providers_tRESTClient_1.add(jsonProvider_tRESTClient_1);
	factoryBean_tRESTClient_1.setProviders(providers_tRESTClient_1);
	factoryBean_tRESTClient_1.setTransportId("http://cxf.apache.org/transports/http");

	boolean use_auth_tRESTClient_1 = false;
	if (use_auth_tRESTClient_1 && "SAML".equals("BASIC")) {
		if (!inOSGi) {
			throw new IllegalArgumentException("SAML based security scenarios are not supported in Studio (standalone)");
		}
		// set SAML Token authentication
		
		 
	final String decryptedPassword_tRESTClient_1 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[A16b6+SuW/if1a8FkWo3HfiqBco7LD4AisXnMMflHfomelqe]");

		org.apache.cxf.ws.security.trust.STSClient stsClient =
			org.talend.esb.security.saml.STSClientUtils.createSTSClient(factoryBean_tRESTClient_1.getBus(),
				"username", decryptedPassword_tRESTClient_1);
		
		org.talend.esb.security.saml.SAMLRESTUtils.configureClient(factoryBean_tRESTClient_1, stsClient);
	}

	org.apache.cxf.jaxrs.client.WebClient webClient_tRESTClient_1 = factoryBean_tRESTClient_1.createWebClient();

	// set request path
	webClient_tRESTClient_1.path("/oauth2/v2.0/token");

	// set connection properties
	org.apache.cxf.jaxrs.client.ClientConfiguration clientConfig_tRESTClient_1 = org.apache.cxf.jaxrs.client.WebClient.getConfig(webClient_tRESTClient_1);
	org.apache.cxf.transport.http.HTTPConduit conduit_tRESTClient_1 = clientConfig_tRESTClient_1.getHttpConduit();

    if (clientConfig_tRESTClient_1.getEndpoint() != null
            && clientConfig_tRESTClient_1.getEndpoint().getEndpointInfo() != null) {
        clientConfig_tRESTClient_1.getEndpoint().getEndpointInfo().setProperty("enable.webclient.operation.reporting",
                                                                          true);
    }

	

	if (use_auth_tRESTClient_1 && "BASIC".equals("BASIC")) {
		// set BASIC auth
		
		 
	final String decryptedPassword_tRESTClient_1 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[uLR8PgPQNjeajwUiDPl4j/h0MmKAyPPUgwMWeqMRk19T3Fq7]");

		org.apache.cxf.configuration.security.AuthorizationPolicy authPolicy_tRESTClient_1 = new org.apache.cxf.configuration.security.AuthorizationPolicy();
			authPolicy_tRESTClient_1.setAuthorizationType("Basic");
			authPolicy_tRESTClient_1.setUserName("username");
			authPolicy_tRESTClient_1.setPassword(decryptedPassword_tRESTClient_1);
		conduit_tRESTClient_1.setAuthorization(authPolicy_tRESTClient_1);
	} else if (use_auth_tRESTClient_1 && "HTTP Digest".equals("BASIC")) {
		// set Digest auth
		
		 
	final String decryptedPassword_tRESTClient_1 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[/682ncjGa3kg6rnIJq7nPj5TQQcwUq56eLS4/auOsaTCzwf+]");

		org.apache.cxf.configuration.security.AuthorizationPolicy authPolicy_tRESTClient_1 = new org.apache.cxf.configuration.security.AuthorizationPolicy();
		authPolicy_tRESTClient_1.setAuthorizationType("Digest");
		authPolicy_tRESTClient_1.setUserName("username");
		authPolicy_tRESTClient_1.setPassword(decryptedPassword_tRESTClient_1);
		conduit_tRESTClient_1.setAuthorization(authPolicy_tRESTClient_1);
	}

	if (!inOSGi) {
		conduit_tRESTClient_1.getClient().setReceiveTimeout((long)(60 * 1000L));
		conduit_tRESTClient_1.getClient().setConnectionTimeout((long)(30 * 1000L));
		boolean use_proxy_tRESTClient_1 = false;
		if (use_proxy_tRESTClient_1) {
			
			 
	final String decryptedPassword_tRESTClient_1 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[CIW/cxw81fEpCpHtKiHGdTunXKONJ2qOroMJiw==]");

			conduit_tRESTClient_1.getClient().setProxyServer("61.163.92.4");
			conduit_tRESTClient_1.getClient().setProxyServerPort(Integer.valueOf(8080));
			conduit_tRESTClient_1.getProxyAuthorization().setUserName("");
			conduit_tRESTClient_1.getProxyAuthorization().setPassword(decryptedPassword_tRESTClient_1);
		}
	}
	
	

	

	
		// set Content-Type
		webClient_tRESTClient_1.type("application/x-www-form-urlencoded");
	

	
		// set Accept-Type
		webClient_tRESTClient_1.accept("*/*");
	

	
		// set optional query and header properties if any
	
	if (use_auth_tRESTClient_1 && "OAUTH2_BEARER".equals("BASIC")) {
		// set oAuth2 bearer token
		webClient_tRESTClient_1.header("Authorization", "Bearer " + "");
	}
	
	if (use_auth_tRESTClient_1 && "OIDC_PASSWORD_GRANT".equals("BASIC")) {
 
	final String decryptedPassword_tRESTClient_1 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[qoOCEs1UMWWZV5iHlWRoJrYucrHxgxBF3D8PMHYTaJgLBIbX]");

        String username_tRESTClient_1 = "username";
        String password_tRESTClient_1 = decryptedPassword_tRESTClient_1;

        String bearerHeader_tRESTClient_1 = null;

        try {
			if (!inOSGi) {
				org.springframework.context.support.ClassPathXmlApplicationContext context_tRESTClient_1 =
					new org.springframework.context.support.ClassPathXmlApplicationContext("META-INF/tesb/oidc-context.xml");
				org.talend.esb.security.oidc.OidcConfiguration oidcConfiguration_tRESTClient_1 = context_tRESTClient_1.getBean(org.talend.esb.security.oidc.OidcConfiguration.class);
				bearerHeader_tRESTClient_1 = org.talend.esb.security.oidc.OidcClientUtils.oidcClientBearer(username_tRESTClient_1, password_tRESTClient_1, oidcConfiguration_tRESTClient_1);
			}else{
				bearerHeader_tRESTClient_1 = org.talend.esb.security.oidc.OidcClientUtils.oidcClientBearer(username_tRESTClient_1, password_tRESTClient_1);
			}
		} catch (Exception ex) {
            throw new javax.ws.rs.WebApplicationException("Failed to get OIDC access token: ", ex);
        }

		webClient_tRESTClient_1.header("Authorization", bearerHeader_tRESTClient_1);
	}
    
	// if FORM request then capture query parameters into Form, otherwise set them as queries
	
		javax.ws.rs.core.Form form_tRESTClient_1 = new javax.ws.rs.core.Form();
		
			form_tRESTClient_1.param("grant_type" ,"client_credentials");
		
			form_tRESTClient_1.param("client_id" ,context.Office365ClientId);
		
			form_tRESTClient_1.param("client_secret" ,context.Office365SecretId);
		
			form_tRESTClient_1.param("scope" ,"https://graph.microsoft.com/.default");
		
		requestBody_tRESTClient_1 = form_tRESTClient_1;
	


	try {
		// start send request
		
			
				responseDoc_tRESTClient_1 = webClient_tRESTClient_1.post(requestBody_tRESTClient_1);
			
		


		int webClientResponseStatus_tRESTClient_1 = webClient_tRESTClient_1.getResponse().getStatus();
		if (webClientResponseStatus_tRESTClient_1 >= 300) {
			throw new javax.ws.rs.WebApplicationException(webClient_tRESTClient_1.getResponse());
		}

		
			if (row6 == null) {
				row6 = new row6Struct();
			}

			row6.statusCode = webClientResponseStatus_tRESTClient_1;
			
				
				Object responseObj_tRESTClient_1 = null;
				if(responseDoc_tRESTClient_1 != null && responseDoc_tRESTClient_1.hasEntity()){
					responseObj_tRESTClient_1 = responseDoc_tRESTClient_1.readEntity(responseClass_tRESTClient_1);
				
				if(responseObj_tRESTClient_1 != null){
					if (responseClass_tRESTClient_1 == String.class) {
						row6.string = (String) responseObj_tRESTClient_1;
					} else {
						routines.system.Document responseTalendDoc_tRESTClient_1 = null;
						if (null != responseObj_tRESTClient_1) {
							responseTalendDoc_tRESTClient_1 = new routines.system.Document();
							responseTalendDoc_tRESTClient_1.setDocument((org.dom4j.Document) responseObj_tRESTClient_1);
						}
						row6.body = responseTalendDoc_tRESTClient_1;
					}
				}
			}
			


			globalMap.put("tRESTClient_1_HEADERS", webClient_tRESTClient_1.getResponse().getHeaders());
			
			
			
			// handle "oneway" for PUT, POST and PATCH with empty response payload
			if (webClientResponseStatus_tRESTClient_1 == 202 && responseObj_tRESTClient_1 == null){
				row6.string = "";
				return;
			}
			
		

	} catch (javax.ws.rs.WebApplicationException ex_tRESTClient_1) {
		
			if (row7 == null) {
				row7 = new row7Struct();
			}
			row7.errorCode = ex_tRESTClient_1.getResponse().getStatus();

			String errorMessage_tRESTClient_1 = null;
			try {
				errorMessage_tRESTClient_1 = ex_tRESTClient_1.getResponse().readEntity(String.class);
			} catch (Exception exe_tRESTClient_1) {
				// ignore
			}
			if (null == errorMessage_tRESTClient_1 || 0 == errorMessage_tRESTClient_1.trim().length()) {
				errorMessage_tRESTClient_1 = ex_tRESTClient_1.getMessage();
			}
			row7.errorMessage = errorMessage_tRESTClient_1;

			globalMap.put("tRESTClient_1_HEADERS", ex_tRESTClient_1.getResponse().getHeaders());
			
		
	}

} catch(Exception e_tRESTClient_1) {
	
		throw new TalendException(e_tRESTClient_1, currentComponent, globalMap);
	
}


 


	tos_count_tRESTClient_1++;

/**
 * [tRESTClient_1 main ] stop
 */
	
	/**
	 * [tRESTClient_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRESTClient_1";

	

 



/**
 * [tRESTClient_1 process_data_begin ] stop
 */
// Start of branch "row6"
if(row6 != null) { 



	
	/**
	 * [tJSONDocOpen_1 main ] start
	 */

	

	
	
	currentComponent="tJSONDocOpen_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row6");
					}
					
	globalMap.remove("tJSONDocOpen_1_CURRENT_NODE");
	globalMap.put("tJSONDocOpen_1_COUNT_ROOT_OBJECTS", 0);
   	try {
		de.jlo.talendcomp.json.JsonDocument tJSONDocOpen_1 = null;
		if (row6.string == null) {
			throw new Exception("Input row6.string cannot be null!");
		}
		Object tJSONDocOpen_1_input_flow = row6.string;
        if (tJSONDocOpen_1_input_flow instanceof String) {
			tJSONDocOpen_1 = new de.jlo.talendcomp.json.JsonDocument((String) tJSONDocOpen_1_input_flow);
        } else if (tJSONDocOpen_1_input_flow instanceof com.fasterxml.jackson.databind.JsonNode) {
        	tJSONDocOpen_1 = new de.jlo.talendcomp.json.JsonDocument((com.fasterxml.jackson.databind.JsonNode) tJSONDocOpen_1_input_flow);
        } else if (tJSONDocOpen_1_input_flow instanceof java.io.File) {
        	tJSONDocOpen_1 = new de.jlo.talendcomp.json.JsonDocument((java.io.File) tJSONDocOpen_1_input_flow);
        } else if (row6.string != null) {
        	throw new Exception("Invalid input type: " + row6.string.getClass().getName());
        } else {
        	throw new Exception("Null input not allowed!");
        }
		globalMap.put("tJSONDocOpen_1", tJSONDocOpen_1);
		globalMap.put("tJSONDocOpen_1_CURRENT_NODE", tJSONDocOpen_1.getRootNode());
		globalMap.put("tJSONDocOpen_1_CURRENT_PATH", "$");
		globalMap.put("tJSONDocOpen_1_COUNT_ROOT_OBJECTS", tJSONDocOpen_1.getCountRootObjects());	
	} catch (Exception e) {
   		globalMap.put("tJSONDocOpen_1_ERROR_MESSAGE", e.getMessage());
   		throw e;
	}

 
     jsonDoc = row6;


	tos_count_tJSONDocOpen_1++;

/**
 * [tJSONDocOpen_1 main ] stop
 */
	
	/**
	 * [tJSONDocOpen_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJSONDocOpen_1";

	

 



/**
 * [tJSONDocOpen_1 process_data_begin ] stop
 */

	
	/**
	 * [tJSONDocExtractFields_1 main ] start
	 */

	

	
	
	currentComponent="tJSONDocExtractFields_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"jsonDoc");
					}
					
	globalMap.remove("tJSONDocExtractFields_1_CURRENT_NODE");
	globalMap.remove("tJSONDocExtractFields_1_CURRENT_PATH");
	globalMap.put("tJSONDocExtractFields_1_NB_LINE", 0);
	globalMap.put("tJSONDocExtractFields_1_COUNT_OBJECTS", 0);
	globalMap.put("tJSONDocExtractFields_1_PARENT_ATTRIBUTE_EXISTS", false);
	de.jlo.talendcomp.json.JsonDocument tJSONDocExtractFields_1 = (de.jlo.talendcomp.json.JsonDocument) globalMap.get("tJSONDocOpen_1");
	com.fasterxml.jackson.databind.JsonNode parentNode_tJSONDocExtractFields_1 = null;
	if (tJSONDocExtractFields_1 != null) {
		try {
			tJSONDocExtractFields_1 = (de.jlo.talendcomp.json.JsonDocument) globalMap.get("tJSONDocOpen_1");
			globalMap.put("tJSONDocExtractFields_1", tJSONDocExtractFields_1);
	   		String jsonPath = "$";
	   		// build path to enhance the error messages
	   		String path = null;
	   		if (jsonPath != null && jsonPath.isEmpty() == false) {
	   			if (jsonPath.startsWith("$")) {
	   				path = jsonPath;
	   			} else if (".".equals(jsonPath)) {
	   				path = (String) globalMap.get("tJSONDocOpen_1_CURRENT_PATH");
	   			} else {
	   				path = (String) globalMap.get("tJSONDocOpen_1_CURRENT_PATH") + "." + jsonPath;
	   			}
	   		} else {
   				path = (String) globalMap.get("tJSONDocOpen_1_CURRENT_PATH");
	   		}
	   		globalMap.put("tJSONDocExtractFields_1_CURRENT_PATH", path);
	   		tJSONDocExtractFields_1.setCurrentPath(path);
			// get the parent object we have to dock on
	   		com.fasterxml.jackson.databind.JsonNode entryNode_tJSONDocExtractFields_1 = (com.fasterxml.jackson.databind.JsonNode) globalMap.get("tJSONDocOpen_1_CURRENT_NODE");
			parentNode_tJSONDocExtractFields_1 = tJSONDocExtractFields_1.getNode(entryNode_tJSONDocExtractFields_1, jsonPath, false);
			if (parentNode_tJSONDocExtractFields_1 == null) {
				globalMap.put("tJSONDocExtractFields_1_PARENT_ATTRIBUTE_EXISTS", false);
			} else {
				globalMap.put("tJSONDocExtractFields_1_PARENT_ATTRIBUTE_EXISTS", true);
			}
			globalMap.put("parent_node_tJSONDocExtractFields_1", parentNode_tJSONDocExtractFields_1);
			globalMap.put("tJSONDocExtractFields_1_NB_LINE", 0);
		} catch (Exception e) {
			globalMap.put("tJSONDocExtractFields_1_ERROR_MESSAGE", e.getMessage());
			throw e;
		}
	} else {
   		throw new Exception("No JSON document received from the parent component: tJSONDocOpen_1. This is a misconfiguration within the job!");
	}
	java.util.List<com.fasterxml.jackson.databind.JsonNode> listNodes_tJSONDocExtractFields_1 = tJSONDocExtractFields_1.getArrayValuesAsList(parentNode_tJSONDocExtractFields_1, false, true);
	globalMap.put("tJSONDocExtractFields_1_COUNT_OBJECTS", listNodes_tJSONDocExtractFields_1.size());
	if (listNodes_tJSONDocExtractFields_1.isEmpty()) {
		listNodes_tJSONDocExtractFields_1.add(tJSONDocExtractFields_1.createEmptyObjectNode());
	}
	globalMap.put("tJSONDocExtractFields_1_NB_NOT_NULL_ATTRIBUTES", 0);
	tJSONDocExtractFields_1.setDefaultLocale("en_UK");
	for (com.fasterxml.jackson.databind.JsonNode currentNode_tJSONDocExtractFields_1 : listNodes_tJSONDocExtractFields_1) {
		// loop over the given children of the parent node or the values of the array
		int countNotNullAttributes_tJSONDocExtractFields_1 = 0;
		try {
			{
				String position = "$.access_token";
				if (position == null || position.trim().isEmpty()) {
					position = "access_token";
				}
				String var = tJSONDocExtractFields_1.getValueAsString(currentNode_tJSONDocExtractFields_1, position, true, false, (String) null);
				globalMap.put("tJSONDocExtractFields_1.access_token", var);
				row1.access_token = var;
				if (var != null) {
					countNotNullAttributes_tJSONDocExtractFields_1++;
				}
			}
			globalMap.put("tJSONDocExtractFields_1_CURRENT_NODE", currentNode_tJSONDocExtractFields_1);
			Integer counter_tJSONDocExtractFields_1 = (Integer) globalMap.get("tJSONDocExtractFields_1_NB_LINE");
			globalMap.put("tJSONDocExtractFields_1_NB_LINE", counter_tJSONDocExtractFields_1.intValue() + 1);
			globalMap.put("tJSONDocExtractFields_1_NB_NOT_NULL_ATTRIBUTES", countNotNullAttributes_tJSONDocExtractFields_1);
		} catch (Exception e) {
			globalMap.put("tJSONDocExtractFields_1_ERROR_MESSAGE", e.getMessage());
			throw e;
		}

 


	tos_count_tJSONDocExtractFields_1++;

/**
 * [tJSONDocExtractFields_1 main ] stop
 */
	
	/**
	 * [tJSONDocExtractFields_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJSONDocExtractFields_1";

	

 



/**
 * [tJSONDocExtractFields_1 process_data_begin ] stop
 */
// Start of branch "row1"
if(row1 != null) { 



	
	/**
	 * [tJavaRow_1 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row1");
					}
					

    System.out.println(row1.access_token);
context.Office365Token = row1.access_token;

    nb_line_tJavaRow_1++;   

 


	tos_count_tJavaRow_1++;

/**
 * [tJavaRow_1 main ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 process_data_end ] stop
 */

} // End of branch "row1"

		// end for
	}



	
	/**
	 * [tJSONDocExtractFields_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJSONDocExtractFields_1";

	

 



/**
 * [tJSONDocExtractFields_1 process_data_end ] stop
 */



	
	/**
	 * [tJSONDocOpen_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJSONDocOpen_1";

	

 



/**
 * [tJSONDocOpen_1 process_data_end ] stop
 */

} // End of branch "row6"




// Start of branch "row7"
if(row7 != null) { 



	
	/**
	 * [tJavaRow_2 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row7");
					}
					

    context.ResponseStatusCode = row7.errorCode;

row3.errorMessage = row7.errorMessage;

    nb_line_tJavaRow_2++;   

 


	tos_count_tJavaRow_2++;

/**
 * [tJavaRow_2 main ] stop
 */
	
	/**
	 * [tJavaRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";

	

 



/**
 * [tJavaRow_2 process_data_begin ] stop
 */

	
	/**
	 * [tJSONDocOpen_2 main ] start
	 */

	

	
	
	currentComponent="tJSONDocOpen_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row3");
					}
					
	globalMap.remove("tJSONDocOpen_2_CURRENT_NODE");
	globalMap.put("tJSONDocOpen_2_COUNT_ROOT_OBJECTS", 0);
   	try {
		de.jlo.talendcomp.json.JsonDocument tJSONDocOpen_2 = null;
		if (row3.errorMessage == null) {
			throw new Exception("Input row3.errorMessage cannot be null!");
		}
		Object tJSONDocOpen_2_input_flow = row3.errorMessage;
        if (tJSONDocOpen_2_input_flow instanceof String) {
			tJSONDocOpen_2 = new de.jlo.talendcomp.json.JsonDocument((String) tJSONDocOpen_2_input_flow);
        } else if (tJSONDocOpen_2_input_flow instanceof com.fasterxml.jackson.databind.JsonNode) {
        	tJSONDocOpen_2 = new de.jlo.talendcomp.json.JsonDocument((com.fasterxml.jackson.databind.JsonNode) tJSONDocOpen_2_input_flow);
        } else if (tJSONDocOpen_2_input_flow instanceof java.io.File) {
        	tJSONDocOpen_2 = new de.jlo.talendcomp.json.JsonDocument((java.io.File) tJSONDocOpen_2_input_flow);
        } else if (row3.errorMessage != null) {
        	throw new Exception("Invalid input type: " + row3.errorMessage.getClass().getName());
        } else {
        	throw new Exception("Null input not allowed!");
        }
		globalMap.put("tJSONDocOpen_2", tJSONDocOpen_2);
		globalMap.put("tJSONDocOpen_2_CURRENT_NODE", tJSONDocOpen_2.getRootNode());
		globalMap.put("tJSONDocOpen_2_CURRENT_PATH", "$");
		globalMap.put("tJSONDocOpen_2_COUNT_ROOT_OBJECTS", tJSONDocOpen_2.getCountRootObjects());	
	} catch (Exception e) {
   		globalMap.put("tJSONDocOpen_2_ERROR_MESSAGE", e.getMessage());
   		throw e;
	}

 
     row5 = row3;


	tos_count_tJSONDocOpen_2++;

/**
 * [tJSONDocOpen_2 main ] stop
 */
	
	/**
	 * [tJSONDocOpen_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJSONDocOpen_2";

	

 



/**
 * [tJSONDocOpen_2 process_data_begin ] stop
 */

	
	/**
	 * [tJSONDocExtractFields_2 main ] start
	 */

	

	
	
	currentComponent="tJSONDocExtractFields_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row5");
					}
					
	globalMap.remove("tJSONDocExtractFields_2_CURRENT_NODE");
	globalMap.remove("tJSONDocExtractFields_2_CURRENT_PATH");
	globalMap.put("tJSONDocExtractFields_2_NB_LINE", 0);
	globalMap.put("tJSONDocExtractFields_2_COUNT_OBJECTS", 0);
	globalMap.put("tJSONDocExtractFields_2_PARENT_ATTRIBUTE_EXISTS", false);
	de.jlo.talendcomp.json.JsonDocument tJSONDocExtractFields_2 = (de.jlo.talendcomp.json.JsonDocument) globalMap.get("tJSONDocOpen_2");
	com.fasterxml.jackson.databind.JsonNode parentNode_tJSONDocExtractFields_2 = null;
	if (tJSONDocExtractFields_2 != null) {
		try {
			tJSONDocExtractFields_2 = (de.jlo.talendcomp.json.JsonDocument) globalMap.get("tJSONDocOpen_2");
			globalMap.put("tJSONDocExtractFields_2", tJSONDocExtractFields_2);
	   		String jsonPath = "$";
	   		// build path to enhance the error messages
	   		String path = null;
	   		if (jsonPath != null && jsonPath.isEmpty() == false) {
	   			if (jsonPath.startsWith("$")) {
	   				path = jsonPath;
	   			} else if (".".equals(jsonPath)) {
	   				path = (String) globalMap.get("tJSONDocOpen_2_CURRENT_PATH");
	   			} else {
	   				path = (String) globalMap.get("tJSONDocOpen_2_CURRENT_PATH") + "." + jsonPath;
	   			}
	   		} else {
   				path = (String) globalMap.get("tJSONDocOpen_2_CURRENT_PATH");
	   		}
	   		globalMap.put("tJSONDocExtractFields_2_CURRENT_PATH", path);
	   		tJSONDocExtractFields_2.setCurrentPath(path);
			// get the parent object we have to dock on
	   		com.fasterxml.jackson.databind.JsonNode entryNode_tJSONDocExtractFields_2 = (com.fasterxml.jackson.databind.JsonNode) globalMap.get("tJSONDocOpen_2_CURRENT_NODE");
			parentNode_tJSONDocExtractFields_2 = tJSONDocExtractFields_2.getNode(entryNode_tJSONDocExtractFields_2, jsonPath, false);
			if (parentNode_tJSONDocExtractFields_2 == null) {
				globalMap.put("tJSONDocExtractFields_2_PARENT_ATTRIBUTE_EXISTS", false);
			} else {
				globalMap.put("tJSONDocExtractFields_2_PARENT_ATTRIBUTE_EXISTS", true);
			}
			globalMap.put("parent_node_tJSONDocExtractFields_2", parentNode_tJSONDocExtractFields_2);
			globalMap.put("tJSONDocExtractFields_2_NB_LINE", 0);
		} catch (Exception e) {
			globalMap.put("tJSONDocExtractFields_2_ERROR_MESSAGE", e.getMessage());
			throw e;
		}
	} else {
   		throw new Exception("No JSON document received from the parent component: tJSONDocOpen_2. This is a misconfiguration within the job!");
	}
	java.util.List<com.fasterxml.jackson.databind.JsonNode> listNodes_tJSONDocExtractFields_2 = tJSONDocExtractFields_2.getArrayValuesAsList(parentNode_tJSONDocExtractFields_2, false, true);
	globalMap.put("tJSONDocExtractFields_2_COUNT_OBJECTS", listNodes_tJSONDocExtractFields_2.size());
	if (listNodes_tJSONDocExtractFields_2.isEmpty()) {
		listNodes_tJSONDocExtractFields_2.add(tJSONDocExtractFields_2.createEmptyObjectNode());
	}
	globalMap.put("tJSONDocExtractFields_2_NB_NOT_NULL_ATTRIBUTES", 0);
	tJSONDocExtractFields_2.setDefaultLocale("en_UK");
	for (com.fasterxml.jackson.databind.JsonNode currentNode_tJSONDocExtractFields_2 : listNodes_tJSONDocExtractFields_2) {
		// loop over the given children of the parent node or the values of the array
		int countNotNullAttributes_tJSONDocExtractFields_2 = 0;
		try {
			{
				String position = "$.error";
				if (position == null || position.trim().isEmpty()) {
					position = "error";
				}
				String var = tJSONDocExtractFields_2.getValueAsString(currentNode_tJSONDocExtractFields_2, position, true, false, (String) null);
				globalMap.put("tJSONDocExtractFields_2.error", var);
				row4.error = var;
				if (var != null) {
					countNotNullAttributes_tJSONDocExtractFields_2++;
				}
			}
			{
				String position = "$.error_description";
				if (position == null || position.trim().isEmpty()) {
					position = "error_description";
				}
				String var = tJSONDocExtractFields_2.getValueAsString(currentNode_tJSONDocExtractFields_2, position, true, false, (String) null);
				globalMap.put("tJSONDocExtractFields_2.error_description", var);
				row4.error_description = var;
				if (var != null) {
					countNotNullAttributes_tJSONDocExtractFields_2++;
				}
			}
			globalMap.put("tJSONDocExtractFields_2_CURRENT_NODE", currentNode_tJSONDocExtractFields_2);
			Integer counter_tJSONDocExtractFields_2 = (Integer) globalMap.get("tJSONDocExtractFields_2_NB_LINE");
			globalMap.put("tJSONDocExtractFields_2_NB_LINE", counter_tJSONDocExtractFields_2.intValue() + 1);
			globalMap.put("tJSONDocExtractFields_2_NB_NOT_NULL_ATTRIBUTES", countNotNullAttributes_tJSONDocExtractFields_2);
		} catch (Exception e) {
			globalMap.put("tJSONDocExtractFields_2_ERROR_MESSAGE", e.getMessage());
			throw e;
		}

 


	tos_count_tJSONDocExtractFields_2++;

/**
 * [tJSONDocExtractFields_2 main ] stop
 */
	
	/**
	 * [tJSONDocExtractFields_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJSONDocExtractFields_2";

	

 



/**
 * [tJSONDocExtractFields_2 process_data_begin ] stop
 */
// Start of branch "row4"
if(row4 != null) { 



	
	/**
	 * [tJavaRow_3 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row4");
					}
					

    System.out.println("Unable to send Email");
System.out.println("Error Status Code : " + context.ResponseStatusCode);
System.out.println(row4.error);
System.out.println(row4.error_description);

    nb_line_tJavaRow_3++;   

 


	tos_count_tJavaRow_3++;

/**
 * [tJavaRow_3 main ] stop
 */
	
	/**
	 * [tJavaRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";

	

 



/**
 * [tJavaRow_3 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";

	

 



/**
 * [tJavaRow_3 process_data_end ] stop
 */

} // End of branch "row4"

		// end for
	}



	
	/**
	 * [tJSONDocExtractFields_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJSONDocExtractFields_2";

	

 



/**
 * [tJSONDocExtractFields_2 process_data_end ] stop
 */



	
	/**
	 * [tJSONDocOpen_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJSONDocOpen_2";

	

 



/**
 * [tJSONDocOpen_2 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";

	

 



/**
 * [tJavaRow_2 process_data_end ] stop
 */

} // End of branch "row7"




	
	/**
	 * [tRESTClient_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tRESTClient_1";

	

 



/**
 * [tRESTClient_1 process_data_end ] stop
 */



	
	/**
	 * [tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_end ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());




/**
 * [tJava_1 end ] stop
 */

	
	/**
	 * [tRESTClient_1 end ] start
	 */

	

	
	
	currentComponent="tRESTClient_1";

	


if (globalMap.get("tRESTClient_1_NB_LINE") == null) {
	globalMap.put("tRESTClient_1_NB_LINE", 1);
}

// [tRESTCliend_end]
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tRESTClient_1", true);
end_Hash.put("tRESTClient_1", System.currentTimeMillis());




/**
 * [tRESTClient_1 end ] stop
 */

	
	/**
	 * [tJSONDocOpen_1 end ] start
	 */

	

	
	
	currentComponent="tJSONDocOpen_1";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tJSONDocOpen_1", true);
end_Hash.put("tJSONDocOpen_1", System.currentTimeMillis());




/**
 * [tJSONDocOpen_1 end ] stop
 */

	
	/**
	 * [tJSONDocExtractFields_1 end ] start
	 */

	

	
	
	currentComponent="tJSONDocExtractFields_1";

	
	
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"jsonDoc");
			  	}
			  	
 

ok_Hash.put("tJSONDocExtractFields_1", true);
end_Hash.put("tJSONDocExtractFields_1", System.currentTimeMillis());




/**
 * [tJSONDocExtractFields_1 end ] stop
 */

	
	/**
	 * [tJavaRow_1 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

globalMap.put("tJavaRow_1_NB_LINE",nb_line_tJavaRow_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tJavaRow_1", true);
end_Hash.put("tJavaRow_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tFixedFlowInput_1Process(globalMap);



/**
 * [tJavaRow_1 end ] stop
 */










	
	/**
	 * [tJavaRow_2 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";

	

globalMap.put("tJavaRow_2_NB_LINE",nb_line_tJavaRow_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7");
			  	}
			  	
 

ok_Hash.put("tJavaRow_2", true);
end_Hash.put("tJavaRow_2", System.currentTimeMillis());




/**
 * [tJavaRow_2 end ] stop
 */

	
	/**
	 * [tJSONDocOpen_2 end ] start
	 */

	

	
	
	currentComponent="tJSONDocOpen_2";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tJSONDocOpen_2", true);
end_Hash.put("tJSONDocOpen_2", System.currentTimeMillis());




/**
 * [tJSONDocOpen_2 end ] stop
 */

	
	/**
	 * [tJSONDocExtractFields_2 end ] start
	 */

	

	
	
	currentComponent="tJSONDocExtractFields_2";

	
	
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tJSONDocExtractFields_2", true);
end_Hash.put("tJSONDocExtractFields_2", System.currentTimeMillis());




/**
 * [tJSONDocExtractFields_2 end ] stop
 */

	
	/**
	 * [tJavaRow_3 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";

	

globalMap.put("tJavaRow_3_NB_LINE",nb_line_tJavaRow_3);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tJavaRow_3", true);
end_Hash.put("tJavaRow_3", System.currentTimeMillis());




/**
 * [tJavaRow_3 end ] stop
 */















				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 finally ] stop
 */

	
	/**
	 * [tRESTClient_1 finally ] start
	 */

	

	
	
	currentComponent="tRESTClient_1";

	

 



/**
 * [tRESTClient_1 finally ] stop
 */

	
	/**
	 * [tJSONDocOpen_1 finally ] start
	 */

	

	
	
	currentComponent="tJSONDocOpen_1";

	

 



/**
 * [tJSONDocOpen_1 finally ] stop
 */

	
	/**
	 * [tJSONDocExtractFields_1 finally ] start
	 */

	

	
	
	currentComponent="tJSONDocExtractFields_1";

	

 



/**
 * [tJSONDocExtractFields_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 finally ] stop
 */










	
	/**
	 * [tJavaRow_2 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";

	

 



/**
 * [tJavaRow_2 finally ] stop
 */

	
	/**
	 * [tJSONDocOpen_2 finally ] start
	 */

	

	
	
	currentComponent="tJSONDocOpen_2";

	

 



/**
 * [tJSONDocOpen_2 finally ] stop
 */

	
	/**
	 * [tJSONDocExtractFields_2 finally ] start
	 */

	

	
	
	currentComponent="tJSONDocExtractFields_2";

	

 



/**
 * [tJSONDocExtractFields_2 finally ] stop
 */

	
	/**
	 * [tJavaRow_3 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";

	

 



/**
 * [tJavaRow_3 finally ] stop
 */















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	


public static class row33Struct implements routines.system.IPersistableRow<row33Struct> {
    final static byte[] commonByteArrayLock_DEV_GetTokenAndSendMailOauth2 = new byte[0];
    static byte[] commonByteArray_DEV_GetTokenAndSendMailOauth2 = new byte[0];

	
			    public String error;

				public String getError () {
					return this.error;
				}
				
			    public String error_description;

				public String getError_description () {
					return this.error_description;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_GetTokenAndSendMailOauth2.length) {
				if(length < 1024 && commonByteArray_DEV_GetTokenAndSendMailOauth2.length == 0) {
   					commonByteArray_DEV_GetTokenAndSendMailOauth2 = new byte[1024];
				} else {
   					commonByteArray_DEV_GetTokenAndSendMailOauth2 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_GetTokenAndSendMailOauth2, 0, length);
			strReturn = new String(commonByteArray_DEV_GetTokenAndSendMailOauth2, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_GetTokenAndSendMailOauth2) {

        	try {

        		int length = 0;
		
					this.error = readString(dis);
					
					this.error_description = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.error,dos);
					
					// String
				
						writeString(this.error_description,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("error="+error);
		sb.append(",error_description="+error_description);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row33Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row32Struct implements routines.system.IPersistableRow<row32Struct> {
    final static byte[] commonByteArrayLock_DEV_GetTokenAndSendMailOauth2 = new byte[0];
    static byte[] commonByteArray_DEV_GetTokenAndSendMailOauth2 = new byte[0];

	
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_GetTokenAndSendMailOauth2.length) {
				if(length < 1024 && commonByteArray_DEV_GetTokenAndSendMailOauth2.length == 0) {
   					commonByteArray_DEV_GetTokenAndSendMailOauth2 = new byte[1024];
				} else {
   					commonByteArray_DEV_GetTokenAndSendMailOauth2 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_GetTokenAndSendMailOauth2, 0, length);
			strReturn = new String(commonByteArray_DEV_GetTokenAndSendMailOauth2, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_GetTokenAndSendMailOauth2) {

        	try {

        		int length = 0;
		
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row32Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row31Struct implements routines.system.IPersistableRow<row31Struct> {
    final static byte[] commonByteArrayLock_DEV_GetTokenAndSendMailOauth2 = new byte[0];
    static byte[] commonByteArray_DEV_GetTokenAndSendMailOauth2 = new byte[0];

	
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_GetTokenAndSendMailOauth2.length) {
				if(length < 1024 && commonByteArray_DEV_GetTokenAndSendMailOauth2.length == 0) {
   					commonByteArray_DEV_GetTokenAndSendMailOauth2 = new byte[1024];
				} else {
   					commonByteArray_DEV_GetTokenAndSendMailOauth2 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_GetTokenAndSendMailOauth2, 0, length);
			strReturn = new String(commonByteArray_DEV_GetTokenAndSendMailOauth2, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_GetTokenAndSendMailOauth2) {

        	try {

        		int length = 0;
		
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row31Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row30Struct implements routines.system.IPersistableRow<row30Struct> {
    final static byte[] commonByteArrayLock_DEV_GetTokenAndSendMailOauth2 = new byte[0];
    static byte[] commonByteArray_DEV_GetTokenAndSendMailOauth2 = new byte[0];

	
			    public Integer errorCode;

				public Integer getErrorCode () {
					return this.errorCode;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_GetTokenAndSendMailOauth2.length) {
				if(length < 1024 && commonByteArray_DEV_GetTokenAndSendMailOauth2.length == 0) {
   					commonByteArray_DEV_GetTokenAndSendMailOauth2 = new byte[1024];
				} else {
   					commonByteArray_DEV_GetTokenAndSendMailOauth2 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_GetTokenAndSendMailOauth2, 0, length);
			strReturn = new String(commonByteArray_DEV_GetTokenAndSendMailOauth2, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_GetTokenAndSendMailOauth2) {

        	try {

        		int length = 0;
		
						this.errorCode = readInteger(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.errorCode,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("errorCode="+String.valueOf(errorCode));
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row30Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_rest_mainStruct implements routines.system.IPersistableRow<sortie_rest_mainStruct> {
    final static byte[] commonByteArrayLock_DEV_GetTokenAndSendMailOauth2 = new byte[0];
    static byte[] commonByteArray_DEV_GetTokenAndSendMailOauth2 = new byte[0];

	
			    public routines.system.Document body;

				public routines.system.Document getBody () {
					return this.body;
				}
				
			    public String string;

				public String getString () {
					return this.string;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_GetTokenAndSendMailOauth2.length) {
				if(length < 1024 && commonByteArray_DEV_GetTokenAndSendMailOauth2.length == 0) {
   					commonByteArray_DEV_GetTokenAndSendMailOauth2 = new byte[1024];
				} else {
   					commonByteArray_DEV_GetTokenAndSendMailOauth2 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_GetTokenAndSendMailOauth2, 0, length);
			strReturn = new String(commonByteArray_DEV_GetTokenAndSendMailOauth2, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_GetTokenAndSendMailOauth2) {

        	try {

        		int length = 0;
		
						this.body = (routines.system.Document) dis.readObject();
					
					this.string = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Document
				
       			    	dos.writeObject(this.body);
					
					// String
				
						writeString(this.string,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("body="+String.valueOf(body));
		sb.append(",string="+string);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_rest_mainStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row34Struct implements routines.system.IPersistableRow<row34Struct> {
    final static byte[] commonByteArrayLock_DEV_GetTokenAndSendMailOauth2 = new byte[0];
    static byte[] commonByteArray_DEV_GetTokenAndSendMailOauth2 = new byte[0];

	
			    public String output;

				public String getOutput () {
					return this.output;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_GetTokenAndSendMailOauth2.length) {
				if(length < 1024 && commonByteArray_DEV_GetTokenAndSendMailOauth2.length == 0) {
   					commonByteArray_DEV_GetTokenAndSendMailOauth2 = new byte[1024];
				} else {
   					commonByteArray_DEV_GetTokenAndSendMailOauth2 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_GetTokenAndSendMailOauth2, 0, length);
			strReturn = new String(commonByteArray_DEV_GetTokenAndSendMailOauth2, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_GetTokenAndSendMailOauth2) {

        	try {

        		int length = 0;
		
					this.output = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.output,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("output="+output);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row34Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row25Struct implements routines.system.IPersistableRow<row25Struct> {
    final static byte[] commonByteArrayLock_DEV_GetTokenAndSendMailOauth2 = new byte[0];
    static byte[] commonByteArray_DEV_GetTokenAndSendMailOauth2 = new byte[0];

	
			    public String output;

				public String getOutput () {
					return this.output;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_GetTokenAndSendMailOauth2.length) {
				if(length < 1024 && commonByteArray_DEV_GetTokenAndSendMailOauth2.length == 0) {
   					commonByteArray_DEV_GetTokenAndSendMailOauth2 = new byte[1024];
				} else {
   					commonByteArray_DEV_GetTokenAndSendMailOauth2 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_GetTokenAndSendMailOauth2, 0, length);
			strReturn = new String(commonByteArray_DEV_GetTokenAndSendMailOauth2, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_GetTokenAndSendMailOauth2) {

        	try {

        		int length = 0;
		
					this.output = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.output,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("output="+output);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row25Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_DEV_GetTokenAndSendMailOauth2 = new byte[0];
    static byte[] commonByteArray_DEV_GetTokenAndSendMailOauth2 = new byte[0];

	
			    public String output;

				public String getOutput () {
					return this.output;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_GetTokenAndSendMailOauth2.length) {
				if(length < 1024 && commonByteArray_DEV_GetTokenAndSendMailOauth2.length == 0) {
   					commonByteArray_DEV_GetTokenAndSendMailOauth2 = new byte[1024];
				} else {
   					commonByteArray_DEV_GetTokenAndSendMailOauth2 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_GetTokenAndSendMailOauth2, 0, length);
			strReturn = new String(commonByteArray_DEV_GetTokenAndSendMailOauth2, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_GetTokenAndSendMailOauth2) {

        	try {

        		int length = 0;
		
					this.output = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.output,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("output="+output);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFixedFlowInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row8Struct row8 = new row8Struct();
row25Struct row25 = new row25Struct();
row25Struct row34 = row25;
sortie_rest_mainStruct sortie_rest_main = new sortie_rest_mainStruct();
row30Struct row30 = new row30Struct();
row31Struct row31 = new row31Struct();
row31Struct row32 = row31;
row33Struct row33 = new row33Struct();











	
	/**
	 * [tJavaRow_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_12", false);
		start_Hash.put("tJavaRow_12", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_12";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row33");
					}
				
		int tos_count_tJavaRow_12 = 0;
		

int nb_line_tJavaRow_12 = 0;

 



/**
 * [tJavaRow_12 begin ] stop
 */



	
	/**
	 * [tJSONDocExtractFields_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tJSONDocExtractFields_5", false);
		start_Hash.put("tJSONDocExtractFields_5", System.currentTimeMillis());
		
	
	currentComponent="tJSONDocExtractFields_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row32");
					}
				
		int tos_count_tJSONDocExtractFields_5 = 0;
		

 



/**
 * [tJSONDocExtractFields_5 begin ] stop
 */



	
	/**
	 * [tJSONDocOpen_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tJSONDocOpen_5", false);
		start_Hash.put("tJSONDocOpen_5", System.currentTimeMillis());
		
	
	currentComponent="tJSONDocOpen_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row31");
					}
				
		int tos_count_tJSONDocOpen_5 = 0;
		


 



/**
 * [tJSONDocOpen_5 begin ] stop
 */



	
	/**
	 * [tJavaRow_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_11", false);
		start_Hash.put("tJavaRow_11", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_11";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row30");
					}
				
		int tos_count_tJavaRow_11 = 0;
		

int nb_line_tJavaRow_11 = 0;

 



/**
 * [tJavaRow_11 begin ] stop
 */



	
	/**
	 * [tRESTClient_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tRESTClient_4", false);
		start_Hash.put("tRESTClient_4", System.currentTimeMillis());
		
	
	currentComponent="tRESTClient_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_rest_main");
					}
				
		int tos_count_tRESTClient_4 = 0;
		

 



/**
 * [tRESTClient_4 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row34");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
sortie_rest_mainStruct sortie_rest_main_tmp = new sortie_rest_mainStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tLogRow_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_5", false);
		start_Hash.put("tLogRow_5", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row25");
					}
				
		int tos_count_tLogRow_5 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_5 = "|";
		java.io.PrintStream consoleOut_tLogRow_5 = null;	

 		StringBuilder strBuffer_tLogRow_5 = null;
		int nb_line_tLogRow_5 = 0;
///////////////////////    			



 



/**
 * [tLogRow_5 begin ] stop
 */



	
	/**
	 * [tJavaRow_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_10", false);
		start_Hash.put("tJavaRow_10", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_10";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tJavaRow_10 = 0;
		

int nb_line_tJavaRow_10 = 0;

 



/**
 * [tJavaRow_10 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_1", false);
		start_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_1";

	
		int tos_count_tFixedFlowInput_1 = 0;
		

	    for (int i_tFixedFlowInput_1 = 0 ; i_tFixedFlowInput_1 < 1 ; i_tFixedFlowInput_1++) {
	                	            	
    	            		row8.output = null;        	            	
    	            	
 



/**
 * [tFixedFlowInput_1 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";

	

 


	tos_count_tFixedFlowInput_1++;

/**
 * [tFixedFlowInput_1 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";

	

 



/**
 * [tFixedFlowInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_10 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_10";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row8");
					}
					

    context.TotalAttachmentSize = (long)0;
context.ErrorAttachmentExists = false;
context.ErrorAttachmentSize = false;

// Subject
org.json.JSONObject nodeMessage = new org.json.JSONObject();
nodeMessage.put("Subject", context.Subject);

// Body
org.json.JSONObject nodeBody = new org.json.JSONObject();
nodeBody.put("ContentType", "Html");
nodeBody.put("Content", context.Content);
nodeMessage.put("Body", nodeBody);

// To
if(context.ToAddress != null && !context.ToAddress.equals("")){
	org.json.JSONArray nodeToRecipients = new org.json.JSONArray();
	for (String part : context.ToAddress.split(";")) 
	{ 
		org.json.JSONObject nodeToRecipient = new org.json.JSONObject("{\"EmailAddress\": {\"Address\": \"" + part + "\"}}");
		nodeToRecipients.put(nodeToRecipient);
	}
	nodeMessage.put("ToRecipients", nodeToRecipients);
}

// Cc
if(context.CCAddress != null && !context.CCAddress.equals("")){
	org.json.JSONArray nodeCcRecipients = new org.json.JSONArray();
	for (String part : context.CCAddress.split(";")) 
	{ 
		org.json.JSONObject nodeCcRecipient = new org.json.JSONObject("{\"EmailAddress\": {\"Address\": \"" + part + "\"}}");
		nodeCcRecipients.put(nodeCcRecipient);
	}
	nodeMessage.put("ccRecipients", nodeCcRecipients);
}

// Attachments
org.json.JSONArray nodeAttachments = new org.json.JSONArray();
if (context.AttachmentsList != null && !context.AttachmentsList.equals("")){
	String[] lstAttachments =  context.AttachmentsList.split(";") ;

	for (int iLst=0;iLst<lstAttachments.length;iLst++)
	{
		if (lstAttachments[iLst] == null || lstAttachments[iLst].equals("")) {
			continue;
		}
		
		java.io.File f = new java.io.File(lstAttachments[iLst]);
		if(!f.exists() || f.isDirectory())
		{
			context.ErrorAttachmentExists = true;
			System.out.println("File not exists : " + lstAttachments[iLst] ); 
		}
		else
		{
			context.TotalAttachmentSize += f.length();
			if (context.TotalAttachmentSize > (long) 3000000)
			{
				context.ErrorAttachmentSize = true;
			}

			org.json.JSONObject nodeAttachment = new org.json.JSONObject();
			nodeAttachment.put("@odata.type", "#microsoft.graph.fileAttachment");
			nodeAttachment.put("Name", f.getName());

            byte[] buffer = new byte[(int) f.length() + 100];
            int length = new java.io.FileInputStream(f).read(buffer);
            String base64 = new String(java.util.Base64.getEncoder().encode(buffer));
            nodeAttachment.put("ContentBytes", base64);
			nodeAttachments.put(nodeAttachment);
		}
	}

	if(nodeAttachments.length() > 0){
		nodeMessage.put("Attachments", nodeAttachments);
	}
}

org.json.JSONObject json = new org.json.JSONObject();
json.put("Message", nodeMessage);
row25.output = json.toString();
    nb_line_tJavaRow_10++;   

 


	tos_count_tJavaRow_10++;

/**
 * [tJavaRow_10 main ] stop
 */
	
	/**
	 * [tJavaRow_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_10";

	

 



/**
 * [tJavaRow_10 process_data_begin ] stop
 */

	
	/**
	 * [tLogRow_5 main ] start
	 */

	

	
	
	currentComponent="tLogRow_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row25");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_5 = new StringBuilder();




   				
	    		if(row25.output != null) { //              
                    							
       
				strBuffer_tLogRow_5.append(
				                String.valueOf(row25.output)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_5 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_5 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_5);
                    }
                    consoleOut_tLogRow_5.println(strBuffer_tLogRow_5.toString());
                    consoleOut_tLogRow_5.flush();
                    nb_line_tLogRow_5++;
//////

//////                    
                    
///////////////////////    			

 
     row34 = row25;


	tos_count_tLogRow_5++;

/**
 * [tLogRow_5 main ] stop
 */
	
	/**
	 * [tLogRow_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_5";

	

 



/**
 * [tLogRow_5 process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row34");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_3 = false;
		  boolean mainRowRejected_tMap_3 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

sortie_rest_main = null;


// # Output table : 'sortie_rest_main'
sortie_rest_main_tmp.body = null;
sortie_rest_main_tmp.string = row34.output ;
sortie_rest_main = sortie_rest_main_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "sortie_rest_main"
if(sortie_rest_main != null) { 



	
	/**
	 * [tRESTClient_4 main ] start
	 */

	

	
	
	currentComponent="tRESTClient_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_rest_main");
					}
					
	row30 = null;

// expected response body
javax.ws.rs.core.Response responseDoc_tRESTClient_4 = null;

try {
	// request body
	org.dom4j.Document requestDoc_tRESTClient_4 = null;
	String requestString_tRESTClient_4 = null;
			if (null != sortie_rest_main.body) {
				requestDoc_tRESTClient_4 = sortie_rest_main.body.getDocument();
			}
			requestString_tRESTClient_4 = sortie_rest_main.string;

	Object requestBody_tRESTClient_4 = requestDoc_tRESTClient_4 != null ? requestDoc_tRESTClient_4 : requestString_tRESTClient_4;

	

    //resposne class name
	Class<?> responseClass_tRESTClient_4
		= String.class;

	// create web client instance
	org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean factoryBean_tRESTClient_4 =
			new org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean();

	boolean inOSGi = routines.system.BundleUtils.inOSGi();

	final java.util.List<org.apache.cxf.feature.Feature> features_tRESTClient_4 =
			new java.util.ArrayList<org.apache.cxf.feature.Feature>();

	
		String url = context.Office365SendMailUrl;
		// {baseUri}tRESTClient
		factoryBean_tRESTClient_4.setServiceName(new javax.xml.namespace.QName(url, "tRESTClient"));
		factoryBean_tRESTClient_4.setAddress(url);
	

	

	

	

	factoryBean_tRESTClient_4.setFeatures(features_tRESTClient_4);


	java.util.List<Object> providers_tRESTClient_4 = new java.util.ArrayList<Object>();
	providers_tRESTClient_4.add(new org.apache.cxf.jaxrs.provider.dom4j.DOM4JProvider() {
		// workaround for https://jira.talendforge.org/browse/TESB-7276
		public org.dom4j.Document readFrom(Class<org.dom4j.Document> cls,
											java.lang.reflect.Type type,
											java.lang.annotation.Annotation[] anns,
											javax.ws.rs.core.MediaType mt,
											javax.ws.rs.core.MultivaluedMap<String, String> headers,
											java.io.InputStream is)
				throws IOException, javax.ws.rs.WebApplicationException {
			String contentLength = headers.getFirst("Content-Length");
			if (!org.apache.cxf.common.util.StringUtils.isEmpty(contentLength)
					&& Integer.valueOf(contentLength) <= 0) {
				try {
					return org.dom4j.DocumentHelper.parseText("<root/>");
				} catch (org.dom4j.DocumentException e_tRESTClient_4) {
					e_tRESTClient_4.printStackTrace();
				}
				return null;
			}
			return super.readFrom(cls, type, anns, mt, headers, is);
		}
	});
	org.apache.cxf.jaxrs.provider.json.JSONProvider jsonProvider_tRESTClient_4 =
			new org.apache.cxf.jaxrs.provider.json.JSONProvider();
		jsonProvider_tRESTClient_4.setIgnoreNamespaces(true);
		jsonProvider_tRESTClient_4.setAttributesToElements(true);
	
	
		jsonProvider_tRESTClient_4.setSupportUnwrapped(true);
		jsonProvider_tRESTClient_4.setWrapperName("root");
	
	
		jsonProvider_tRESTClient_4.setDropRootElement(false);
		jsonProvider_tRESTClient_4.setConvertTypesToStrings(false);
	providers_tRESTClient_4.add(jsonProvider_tRESTClient_4);
	factoryBean_tRESTClient_4.setProviders(providers_tRESTClient_4);
	factoryBean_tRESTClient_4.setTransportId("http://cxf.apache.org/transports/http");

	boolean use_auth_tRESTClient_4 = true;
	if (use_auth_tRESTClient_4 && "SAML".equals("OAUTH2_BEARER")) {
		if (!inOSGi) {
			throw new IllegalArgumentException("SAML based security scenarios are not supported in Studio (standalone)");
		}
		// set SAML Token authentication
		
		 
	final String decryptedPassword_tRESTClient_4 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[jzA/b2klSucKTjMNggejfWqFoQFkmTbzvPjTaUqGW2+e8I7m]");

		org.apache.cxf.ws.security.trust.STSClient stsClient =
			org.talend.esb.security.saml.STSClientUtils.createSTSClient(factoryBean_tRESTClient_4.getBus(),
				"username", decryptedPassword_tRESTClient_4);
		
		org.talend.esb.security.saml.SAMLRESTUtils.configureClient(factoryBean_tRESTClient_4, stsClient);
	}

	org.apache.cxf.jaxrs.client.WebClient webClient_tRESTClient_4 = factoryBean_tRESTClient_4.createWebClient();

	// set request path
	webClient_tRESTClient_4.path(context.FromAddress + "/sendMail");

	// set connection properties
	org.apache.cxf.jaxrs.client.ClientConfiguration clientConfig_tRESTClient_4 = org.apache.cxf.jaxrs.client.WebClient.getConfig(webClient_tRESTClient_4);
	org.apache.cxf.transport.http.HTTPConduit conduit_tRESTClient_4 = clientConfig_tRESTClient_4.getHttpConduit();

    if (clientConfig_tRESTClient_4.getEndpoint() != null
            && clientConfig_tRESTClient_4.getEndpoint().getEndpointInfo() != null) {
        clientConfig_tRESTClient_4.getEndpoint().getEndpointInfo().setProperty("enable.webclient.operation.reporting",
                                                                          true);
    }

	

	if (use_auth_tRESTClient_4 && "BASIC".equals("OAUTH2_BEARER")) {
		// set BASIC auth
		
		 
	final String decryptedPassword_tRESTClient_4 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[onyTPGTxHuMcColE3wteA5G2YrnVxxdzySxeBdwYapMO2YYR]");

		org.apache.cxf.configuration.security.AuthorizationPolicy authPolicy_tRESTClient_4 = new org.apache.cxf.configuration.security.AuthorizationPolicy();
			authPolicy_tRESTClient_4.setAuthorizationType("Basic");
			authPolicy_tRESTClient_4.setUserName("username");
			authPolicy_tRESTClient_4.setPassword(decryptedPassword_tRESTClient_4);
		conduit_tRESTClient_4.setAuthorization(authPolicy_tRESTClient_4);
	} else if (use_auth_tRESTClient_4 && "HTTP Digest".equals("OAUTH2_BEARER")) {
		// set Digest auth
		
		 
	final String decryptedPassword_tRESTClient_4 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[5yqnECkCkwL2ECWDuQTeRlfEBiu2leRw4s6aepQPEBKppWbN]");

		org.apache.cxf.configuration.security.AuthorizationPolicy authPolicy_tRESTClient_4 = new org.apache.cxf.configuration.security.AuthorizationPolicy();
		authPolicy_tRESTClient_4.setAuthorizationType("Digest");
		authPolicy_tRESTClient_4.setUserName("username");
		authPolicy_tRESTClient_4.setPassword(decryptedPassword_tRESTClient_4);
		conduit_tRESTClient_4.setAuthorization(authPolicy_tRESTClient_4);
	}

	if (!inOSGi) {
		conduit_tRESTClient_4.getClient().setReceiveTimeout((long)(60 * 1000L));
		conduit_tRESTClient_4.getClient().setConnectionTimeout((long)(30 * 1000L));
		boolean use_proxy_tRESTClient_4 = false;
		if (use_proxy_tRESTClient_4) {
			
			 
	final String decryptedPassword_tRESTClient_4 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[CjY2BzFD7T9EVaxB6MF7/Jz6zePwigzqkK8NnA==]");

			conduit_tRESTClient_4.getClient().setProxyServer("61.163.92.4");
			conduit_tRESTClient_4.getClient().setProxyServerPort(Integer.valueOf(8080));
			conduit_tRESTClient_4.getProxyAuthorization().setUserName("");
			conduit_tRESTClient_4.getProxyAuthorization().setPassword(decryptedPassword_tRESTClient_4);
		}
	}
	
	

	

	
		// set Content-Type
		webClient_tRESTClient_4.type("application/json");
	

	
		// set Accept-Type
		webClient_tRESTClient_4.accept("*/*");
	

	
		// set optional query and header properties if any
	
	if (use_auth_tRESTClient_4 && "OAUTH2_BEARER".equals("OAUTH2_BEARER")) {
		// set oAuth2 bearer token
		webClient_tRESTClient_4.header("Authorization", "Bearer " + context.Office365Token);
	}
	
	if (use_auth_tRESTClient_4 && "OIDC_PASSWORD_GRANT".equals("OAUTH2_BEARER")) {
 
	final String decryptedPassword_tRESTClient_4 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[WfS2GOTmvRrm9V0ekE+1n8MS2IYfmWg25mwE/dDbqdr/L/J6]");

        String username_tRESTClient_4 = "username";
        String password_tRESTClient_4 = decryptedPassword_tRESTClient_4;

        String bearerHeader_tRESTClient_4 = null;

        try {
			if (!inOSGi) {
				org.springframework.context.support.ClassPathXmlApplicationContext context_tRESTClient_4 =
					new org.springframework.context.support.ClassPathXmlApplicationContext("META-INF/tesb/oidc-context.xml");
				org.talend.esb.security.oidc.OidcConfiguration oidcConfiguration_tRESTClient_4 = context_tRESTClient_4.getBean(org.talend.esb.security.oidc.OidcConfiguration.class);
				bearerHeader_tRESTClient_4 = org.talend.esb.security.oidc.OidcClientUtils.oidcClientBearer(username_tRESTClient_4, password_tRESTClient_4, oidcConfiguration_tRESTClient_4);
			}else{
				bearerHeader_tRESTClient_4 = org.talend.esb.security.oidc.OidcClientUtils.oidcClientBearer(username_tRESTClient_4, password_tRESTClient_4);
			}
		} catch (Exception ex) {
            throw new javax.ws.rs.WebApplicationException("Failed to get OIDC access token: ", ex);
        }

		webClient_tRESTClient_4.header("Authorization", bearerHeader_tRESTClient_4);
	}
    
	// if FORM request then capture query parameters into Form, otherwise set them as queries
	
		
	


	try {
		// start send request
		
			
				responseDoc_tRESTClient_4 = webClient_tRESTClient_4.post(requestBody_tRESTClient_4);
			
		


		int webClientResponseStatus_tRESTClient_4 = webClient_tRESTClient_4.getResponse().getStatus();
		if (webClientResponseStatus_tRESTClient_4 >= 300) {
			throw new javax.ws.rs.WebApplicationException(webClient_tRESTClient_4.getResponse());
		}

		

	} catch (javax.ws.rs.WebApplicationException ex_tRESTClient_4) {
		
			if (row30 == null) {
				row30 = new row30Struct();
			}
			row30.errorCode = ex_tRESTClient_4.getResponse().getStatus();

			String errorMessage_tRESTClient_4 = null;
			try {
				errorMessage_tRESTClient_4 = ex_tRESTClient_4.getResponse().readEntity(String.class);
			} catch (Exception exe_tRESTClient_4) {
				// ignore
			}
			if (null == errorMessage_tRESTClient_4 || 0 == errorMessage_tRESTClient_4.trim().length()) {
				errorMessage_tRESTClient_4 = ex_tRESTClient_4.getMessage();
			}
			row30.errorMessage = errorMessage_tRESTClient_4;

			globalMap.put("tRESTClient_4_HEADERS", ex_tRESTClient_4.getResponse().getHeaders());
			
		
	}

} catch(Exception e_tRESTClient_4) {
	
		throw new TalendException(e_tRESTClient_4, currentComponent, globalMap);
	
}


 


	tos_count_tRESTClient_4++;

/**
 * [tRESTClient_4 main ] stop
 */
	
	/**
	 * [tRESTClient_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRESTClient_4";

	

 



/**
 * [tRESTClient_4 process_data_begin ] stop
 */
// Start of branch "row30"
if(row30 != null) { 



	
	/**
	 * [tJavaRow_11 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_11";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row30");
					}
					

    context.ResponseStatusCode = row30.errorCode;

row31.errorMessage = row30.errorMessage;

    nb_line_tJavaRow_11++;   

 


	tos_count_tJavaRow_11++;

/**
 * [tJavaRow_11 main ] stop
 */
	
	/**
	 * [tJavaRow_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_11";

	

 



/**
 * [tJavaRow_11 process_data_begin ] stop
 */

	
	/**
	 * [tJSONDocOpen_5 main ] start
	 */

	

	
	
	currentComponent="tJSONDocOpen_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row31");
					}
					
	globalMap.remove("tJSONDocOpen_5_CURRENT_NODE");
	globalMap.put("tJSONDocOpen_5_COUNT_ROOT_OBJECTS", 0);
   	try {
		de.jlo.talendcomp.json.JsonDocument tJSONDocOpen_5 = null;
		if (row31.errorMessage == null) {
			throw new Exception("Input row31.errorMessage cannot be null!");
		}
		Object tJSONDocOpen_5_input_flow = row31.errorMessage;
        if (tJSONDocOpen_5_input_flow instanceof String) {
			tJSONDocOpen_5 = new de.jlo.talendcomp.json.JsonDocument((String) tJSONDocOpen_5_input_flow);
        } else if (tJSONDocOpen_5_input_flow instanceof com.fasterxml.jackson.databind.JsonNode) {
        	tJSONDocOpen_5 = new de.jlo.talendcomp.json.JsonDocument((com.fasterxml.jackson.databind.JsonNode) tJSONDocOpen_5_input_flow);
        } else if (tJSONDocOpen_5_input_flow instanceof java.io.File) {
        	tJSONDocOpen_5 = new de.jlo.talendcomp.json.JsonDocument((java.io.File) tJSONDocOpen_5_input_flow);
        } else if (row31.errorMessage != null) {
        	throw new Exception("Invalid input type: " + row31.errorMessage.getClass().getName());
        } else {
        	throw new Exception("Null input not allowed!");
        }
		globalMap.put("tJSONDocOpen_5", tJSONDocOpen_5);
		globalMap.put("tJSONDocOpen_5_CURRENT_NODE", tJSONDocOpen_5.getRootNode());
		globalMap.put("tJSONDocOpen_5_CURRENT_PATH", "$");
		globalMap.put("tJSONDocOpen_5_COUNT_ROOT_OBJECTS", tJSONDocOpen_5.getCountRootObjects());	
	} catch (Exception e) {
   		globalMap.put("tJSONDocOpen_5_ERROR_MESSAGE", e.getMessage());
   		throw e;
	}

 
     row32 = row31;


	tos_count_tJSONDocOpen_5++;

/**
 * [tJSONDocOpen_5 main ] stop
 */
	
	/**
	 * [tJSONDocOpen_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJSONDocOpen_5";

	

 



/**
 * [tJSONDocOpen_5 process_data_begin ] stop
 */

	
	/**
	 * [tJSONDocExtractFields_5 main ] start
	 */

	

	
	
	currentComponent="tJSONDocExtractFields_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row32");
					}
					
	globalMap.remove("tJSONDocExtractFields_5_CURRENT_NODE");
	globalMap.remove("tJSONDocExtractFields_5_CURRENT_PATH");
	globalMap.put("tJSONDocExtractFields_5_NB_LINE", 0);
	globalMap.put("tJSONDocExtractFields_5_COUNT_OBJECTS", 0);
	globalMap.put("tJSONDocExtractFields_5_PARENT_ATTRIBUTE_EXISTS", false);
	de.jlo.talendcomp.json.JsonDocument tJSONDocExtractFields_5 = (de.jlo.talendcomp.json.JsonDocument) globalMap.get("tJSONDocOpen_1");
	com.fasterxml.jackson.databind.JsonNode parentNode_tJSONDocExtractFields_5 = null;
	if (tJSONDocExtractFields_5 != null) {
		try {
			tJSONDocExtractFields_5 = (de.jlo.talendcomp.json.JsonDocument) globalMap.get("tJSONDocOpen_1");
			globalMap.put("tJSONDocExtractFields_5", tJSONDocExtractFields_5);
	   		String jsonPath = "$";
	   		// build path to enhance the error messages
	   		String path = null;
	   		if (jsonPath != null && jsonPath.isEmpty() == false) {
	   			if (jsonPath.startsWith("$")) {
	   				path = jsonPath;
	   			} else if (".".equals(jsonPath)) {
	   				path = (String) globalMap.get("tJSONDocOpen_1_CURRENT_PATH");
	   			} else {
	   				path = (String) globalMap.get("tJSONDocOpen_1_CURRENT_PATH") + "." + jsonPath;
	   			}
	   		} else {
   				path = (String) globalMap.get("tJSONDocOpen_1_CURRENT_PATH");
	   		}
	   		globalMap.put("tJSONDocExtractFields_5_CURRENT_PATH", path);
	   		tJSONDocExtractFields_5.setCurrentPath(path);
			// get the parent object we have to dock on
	   		com.fasterxml.jackson.databind.JsonNode entryNode_tJSONDocExtractFields_5 = (com.fasterxml.jackson.databind.JsonNode) globalMap.get("tJSONDocOpen_1_CURRENT_NODE");
			parentNode_tJSONDocExtractFields_5 = tJSONDocExtractFields_5.getNode(entryNode_tJSONDocExtractFields_5, jsonPath, false);
			if (parentNode_tJSONDocExtractFields_5 == null) {
				globalMap.put("tJSONDocExtractFields_5_PARENT_ATTRIBUTE_EXISTS", false);
			} else {
				globalMap.put("tJSONDocExtractFields_5_PARENT_ATTRIBUTE_EXISTS", true);
			}
			globalMap.put("parent_node_tJSONDocExtractFields_5", parentNode_tJSONDocExtractFields_5);
			globalMap.put("tJSONDocExtractFields_5_NB_LINE", 0);
		} catch (Exception e) {
			globalMap.put("tJSONDocExtractFields_5_ERROR_MESSAGE", e.getMessage());
			throw e;
		}
	} else {
   		throw new Exception("No JSON document received from the parent component: tJSONDocOpen_1. This is a misconfiguration within the job!");
	}
	java.util.List<com.fasterxml.jackson.databind.JsonNode> listNodes_tJSONDocExtractFields_5 = tJSONDocExtractFields_5.getArrayValuesAsList(parentNode_tJSONDocExtractFields_5, false, true);
	globalMap.put("tJSONDocExtractFields_5_COUNT_OBJECTS", listNodes_tJSONDocExtractFields_5.size());
	if (listNodes_tJSONDocExtractFields_5.isEmpty()) {
		listNodes_tJSONDocExtractFields_5.add(tJSONDocExtractFields_5.createEmptyObjectNode());
	}
	globalMap.put("tJSONDocExtractFields_5_NB_NOT_NULL_ATTRIBUTES", 0);
	tJSONDocExtractFields_5.setDefaultLocale("en_UK");
	for (com.fasterxml.jackson.databind.JsonNode currentNode_tJSONDocExtractFields_5 : listNodes_tJSONDocExtractFields_5) {
		// loop over the given children of the parent node or the values of the array
		int countNotNullAttributes_tJSONDocExtractFields_5 = 0;
		try {
			{
				String position = "$.error.code";
				if (position == null || position.trim().isEmpty()) {
					position = "error";
				}
				String var = tJSONDocExtractFields_5.getValueAsString(currentNode_tJSONDocExtractFields_5, position, true, false, (String) null);
				globalMap.put("tJSONDocExtractFields_5.error", var);
				row33.error = var;
				if (var != null) {
					countNotNullAttributes_tJSONDocExtractFields_5++;
				}
			}
			{
				String position = "$.error.message";
				if (position == null || position.trim().isEmpty()) {
					position = "error_description";
				}
				String var = tJSONDocExtractFields_5.getValueAsString(currentNode_tJSONDocExtractFields_5, position, true, false, (String) null);
				globalMap.put("tJSONDocExtractFields_5.error_description", var);
				row33.error_description = var;
				if (var != null) {
					countNotNullAttributes_tJSONDocExtractFields_5++;
				}
			}
			globalMap.put("tJSONDocExtractFields_5_CURRENT_NODE", currentNode_tJSONDocExtractFields_5);
			Integer counter_tJSONDocExtractFields_5 = (Integer) globalMap.get("tJSONDocExtractFields_5_NB_LINE");
			globalMap.put("tJSONDocExtractFields_5_NB_LINE", counter_tJSONDocExtractFields_5.intValue() + 1);
			globalMap.put("tJSONDocExtractFields_5_NB_NOT_NULL_ATTRIBUTES", countNotNullAttributes_tJSONDocExtractFields_5);
		} catch (Exception e) {
			globalMap.put("tJSONDocExtractFields_5_ERROR_MESSAGE", e.getMessage());
			throw e;
		}

 


	tos_count_tJSONDocExtractFields_5++;

/**
 * [tJSONDocExtractFields_5 main ] stop
 */
	
	/**
	 * [tJSONDocExtractFields_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJSONDocExtractFields_5";

	

 



/**
 * [tJSONDocExtractFields_5 process_data_begin ] stop
 */
// Start of branch "row33"
if(row33 != null) { 



	
	/**
	 * [tJavaRow_12 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_12";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row33");
					}
					

    System.out.println("Unable to send Email");
System.out.println("Error Status Code : " + context.ResponseStatusCode);
System.out.println(row33.error);
System.out.println(row33.error_description);

    nb_line_tJavaRow_12++;   

 


	tos_count_tJavaRow_12++;

/**
 * [tJavaRow_12 main ] stop
 */
	
	/**
	 * [tJavaRow_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_12";

	

 



/**
 * [tJavaRow_12 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_12";

	

 



/**
 * [tJavaRow_12 process_data_end ] stop
 */

} // End of branch "row33"

		// end for
	}



	
	/**
	 * [tJSONDocExtractFields_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tJSONDocExtractFields_5";

	

 



/**
 * [tJSONDocExtractFields_5 process_data_end ] stop
 */



	
	/**
	 * [tJSONDocOpen_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tJSONDocOpen_5";

	

 



/**
 * [tJSONDocOpen_5 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_11";

	

 



/**
 * [tJavaRow_11 process_data_end ] stop
 */

} // End of branch "row30"




	
	/**
	 * [tRESTClient_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tRESTClient_4";

	

 



/**
 * [tRESTClient_4 process_data_end ] stop
 */

} // End of branch "sortie_rest_main"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_5";

	

 



/**
 * [tLogRow_5 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_10";

	

 



/**
 * [tJavaRow_10 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";

	

 



/**
 * [tFixedFlowInput_1 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";

	

        }
        globalMap.put("tFixedFlowInput_1_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_1", true);
end_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());




/**
 * [tFixedFlowInput_1 end ] stop
 */

	
	/**
	 * [tJavaRow_10 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_10";

	

globalMap.put("tJavaRow_10_NB_LINE",nb_line_tJavaRow_10);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 

ok_Hash.put("tJavaRow_10", true);
end_Hash.put("tJavaRow_10", System.currentTimeMillis());

   			if (context.ErrorAttachmentSize) {
   				
					if(execStat){   
   	 					runStat.updateStatOnConnection("If9", 0, "true");
					}
				
    			tDie_5Process(globalMap);
   			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If9", 0, "false");
					}   	 
   				}
   			if (context.ErrorAttachmentExists) {
   				
					if(execStat){   
   	 					runStat.updateStatOnConnection("If10", 0, "true");
					}
				
    			tDie_4Process(globalMap);
   			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If10", 0, "false");
					}   	 
   				}



/**
 * [tJavaRow_10 end ] stop
 */

	
	/**
	 * [tLogRow_5 end ] start
	 */

	

	
	
	currentComponent="tLogRow_5";

	


//////
//////
globalMap.put("tLogRow_5_NB_LINE",nb_line_tLogRow_5);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row25");
			  	}
			  	
 

ok_Hash.put("tLogRow_5", true);
end_Hash.put("tLogRow_5", System.currentTimeMillis());




/**
 * [tLogRow_5 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row34");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tRESTClient_4 end ] start
	 */

	

	
	
	currentComponent="tRESTClient_4";

	


if (globalMap.get("tRESTClient_4_NB_LINE") == null) {
	globalMap.put("tRESTClient_4_NB_LINE", 1);
}

// [tRESTCliend_end]
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_rest_main");
			  	}
			  	
 

ok_Hash.put("tRESTClient_4", true);
end_Hash.put("tRESTClient_4", System.currentTimeMillis());




/**
 * [tRESTClient_4 end ] stop
 */

	
	/**
	 * [tJavaRow_11 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_11";

	

globalMap.put("tJavaRow_11_NB_LINE",nb_line_tJavaRow_11);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row30");
			  	}
			  	
 

ok_Hash.put("tJavaRow_11", true);
end_Hash.put("tJavaRow_11", System.currentTimeMillis());




/**
 * [tJavaRow_11 end ] stop
 */

	
	/**
	 * [tJSONDocOpen_5 end ] start
	 */

	

	
	
	currentComponent="tJSONDocOpen_5";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row31");
			  	}
			  	
 

ok_Hash.put("tJSONDocOpen_5", true);
end_Hash.put("tJSONDocOpen_5", System.currentTimeMillis());




/**
 * [tJSONDocOpen_5 end ] stop
 */

	
	/**
	 * [tJSONDocExtractFields_5 end ] start
	 */

	

	
	
	currentComponent="tJSONDocExtractFields_5";

	
	
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row32");
			  	}
			  	
 

ok_Hash.put("tJSONDocExtractFields_5", true);
end_Hash.put("tJSONDocExtractFields_5", System.currentTimeMillis());




/**
 * [tJSONDocExtractFields_5 end ] stop
 */

	
	/**
	 * [tJavaRow_12 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_12";

	

globalMap.put("tJavaRow_12_NB_LINE",nb_line_tJavaRow_12);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row33");
			  	}
			  	
 

ok_Hash.put("tJavaRow_12", true);
end_Hash.put("tJavaRow_12", System.currentTimeMillis());




/**
 * [tJavaRow_12 end ] stop
 */
























				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_1 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";

	

 



/**
 * [tFixedFlowInput_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_10 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_10";

	

 



/**
 * [tJavaRow_10 finally ] stop
 */

	
	/**
	 * [tLogRow_5 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_5";

	

 



/**
 * [tLogRow_5 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tRESTClient_4 finally ] start
	 */

	

	
	
	currentComponent="tRESTClient_4";

	

 



/**
 * [tRESTClient_4 finally ] stop
 */

	
	/**
	 * [tJavaRow_11 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_11";

	

 



/**
 * [tJavaRow_11 finally ] stop
 */

	
	/**
	 * [tJSONDocOpen_5 finally ] start
	 */

	

	
	
	currentComponent="tJSONDocOpen_5";

	

 



/**
 * [tJSONDocOpen_5 finally ] stop
 */

	
	/**
	 * [tJSONDocExtractFields_5 finally ] start
	 */

	

	
	
	currentComponent="tJSONDocExtractFields_5";

	

 



/**
 * [tJSONDocExtractFields_5 finally ] stop
 */

	
	/**
	 * [tJavaRow_12 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_12";

	

 



/**
 * [tJavaRow_12 finally ] stop
 */
























				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 1);
	}
	

public void tDie_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_5", false);
		start_Hash.put("tDie_5", System.currentTimeMillis());
		
	
	currentComponent="tDie_5";

	
		int tos_count_tDie_5 = 0;
		

 



/**
 * [tDie_5 begin ] stop
 */
	
	/**
	 * [tDie_5 main ] start
	 */

	

	
	
	currentComponent="tDie_5";

	

	try {
				talendLogs_LOGS.addMessage("tDie", "tDie_5", 5, "Total attachments cannot exceed 3Mo.", 4);
				talendLogs_LOGSProcess(globalMap);
				
	globalMap.put("tDie_5_DIE_PRIORITY", 5);
	System.err.println("Total attachments cannot exceed 3Mo.");
	
	globalMap.put("tDie_5_DIE_MESSAGE", "Total attachments cannot exceed 3Mo.");
	globalMap.put("tDie_5_DIE_MESSAGES", "Total attachments cannot exceed 3Mo.");
	
	} catch (Exception | Error e_tDie_5) {
		logIgnoredError(String.format("tDie_5 - tDie failed to log message due to internal error: %s", e_tDie_5), e_tDie_5);
	}
	
	currentComponent = "tDie_5";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_5_DIE_CODE", errorCode);        
    
	if(true){	
	    throw new TDieException();
	}

 


	tos_count_tDie_5++;

/**
 * [tDie_5 main ] stop
 */
	
	/**
	 * [tDie_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_5";

	

 



/**
 * [tDie_5 process_data_begin ] stop
 */
	
	/**
	 * [tDie_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_5";

	

 



/**
 * [tDie_5 process_data_end ] stop
 */
	
	/**
	 * [tDie_5 end ] start
	 */

	

	
	
	currentComponent="tDie_5";

	

 

ok_Hash.put("tDie_5", true);
end_Hash.put("tDie_5", System.currentTimeMillis());




/**
 * [tDie_5 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_5 finally ] start
	 */

	

	
	
	currentComponent="tDie_5";

	

 



/**
 * [tDie_5 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_5_SUBPROCESS_STATE", 1);
	}
	

public void tDie_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_4", false);
		start_Hash.put("tDie_4", System.currentTimeMillis());
		
	
	currentComponent="tDie_4";

	
		int tos_count_tDie_4 = 0;
		

 



/**
 * [tDie_4 begin ] stop
 */
	
	/**
	 * [tDie_4 main ] start
	 */

	

	
	
	currentComponent="tDie_4";

	

	try {
				talendLogs_LOGS.addMessage("tDie", "tDie_4", 5, "Attachment file not found", 4);
				talendLogs_LOGSProcess(globalMap);
				
	globalMap.put("tDie_4_DIE_PRIORITY", 5);
	System.err.println("Attachment file not found");
	
	globalMap.put("tDie_4_DIE_MESSAGE", "Attachment file not found");
	globalMap.put("tDie_4_DIE_MESSAGES", "Attachment file not found");
	
	} catch (Exception | Error e_tDie_4) {
		logIgnoredError(String.format("tDie_4 - tDie failed to log message due to internal error: %s", e_tDie_4), e_tDie_4);
	}
	
	currentComponent = "tDie_4";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_4_DIE_CODE", errorCode);        
    
	if(true){	
	    throw new TDieException();
	}

 


	tos_count_tDie_4++;

/**
 * [tDie_4 main ] stop
 */
	
	/**
	 * [tDie_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_4";

	

 



/**
 * [tDie_4 process_data_begin ] stop
 */
	
	/**
	 * [tDie_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_4";

	

 



/**
 * [tDie_4 process_data_end ] stop
 */
	
	/**
	 * [tDie_4 end ] start
	 */

	

	
	
	currentComponent="tDie_4";

	

 

ok_Hash.put("tDie_4", true);
end_Hash.put("tDie_4", System.currentTimeMillis());




/**
 * [tDie_4 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_4 finally ] start
	 */

	

	
	
	currentComponent="tDie_4";

	

 



/**
 * [tDie_4 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_4_SUBPROCESS_STATE", 1);
	}
	

public void tDie_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_3", false);
		start_Hash.put("tDie_3", System.currentTimeMillis());
		
	
	currentComponent="tDie_3";

	
		int tos_count_tDie_3 = 0;
		

 



/**
 * [tDie_3 begin ] stop
 */
	
	/**
	 * [tDie_3 main ] start
	 */

	

	
	
	currentComponent="tDie_3";

	

	try {
				talendLogs_LOGS.addMessage("tDie", "tDie_3", 5, "Body cannot be null.", 4);
				talendLogs_LOGSProcess(globalMap);
				
	globalMap.put("tDie_3_DIE_PRIORITY", 5);
	System.err.println("Body cannot be null.");
	
	globalMap.put("tDie_3_DIE_MESSAGE", "Body cannot be null.");
	globalMap.put("tDie_3_DIE_MESSAGES", "Body cannot be null.");
	
	} catch (Exception | Error e_tDie_3) {
		logIgnoredError(String.format("tDie_3 - tDie failed to log message due to internal error: %s", e_tDie_3), e_tDie_3);
	}
	
	currentComponent = "tDie_3";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_3_DIE_CODE", errorCode);        
    
	if(true){	
	    throw new TDieException();
	}

 


	tos_count_tDie_3++;

/**
 * [tDie_3 main ] stop
 */
	
	/**
	 * [tDie_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_3";

	

 



/**
 * [tDie_3 process_data_begin ] stop
 */
	
	/**
	 * [tDie_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_3";

	

 



/**
 * [tDie_3 process_data_end ] stop
 */
	
	/**
	 * [tDie_3 end ] start
	 */

	

	
	
	currentComponent="tDie_3";

	

 

ok_Hash.put("tDie_3", true);
end_Hash.put("tDie_3", System.currentTimeMillis());




/**
 * [tDie_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_3 finally ] start
	 */

	

	
	
	currentComponent="tDie_3";

	

 



/**
 * [tDie_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_3_SUBPROCESS_STATE", 1);
	}
	

public void connectionStatsLogs_CommitProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("connectionStatsLogs_Commit_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [connectionStatsLogs_Commit begin ] start
	 */

	

	
		
		ok_Hash.put("connectionStatsLogs_Commit", false);
		start_Hash.put("connectionStatsLogs_Commit", System.currentTimeMillis());
		
	
	currentComponent="connectionStatsLogs_Commit";

	
		int tos_count_connectionStatsLogs_Commit = 0;
		

 



/**
 * [connectionStatsLogs_Commit begin ] stop
 */
	
	/**
	 * [connectionStatsLogs_Commit main ] start
	 */

	

	
	
	currentComponent="connectionStatsLogs_Commit";

	

	java.sql.Connection conn_connectionStatsLogs_Commit = (java.sql.Connection)globalMap.get("conn_connectionStatsLogs");
	if(conn_connectionStatsLogs_Commit != null && !conn_connectionStatsLogs_Commit.isClosed())
	{
	
			
			conn_connectionStatsLogs_Commit.commit();
			
	
	}

 


	tos_count_connectionStatsLogs_Commit++;

/**
 * [connectionStatsLogs_Commit main ] stop
 */
	
	/**
	 * [connectionStatsLogs_Commit process_data_begin ] start
	 */

	

	
	
	currentComponent="connectionStatsLogs_Commit";

	

 



/**
 * [connectionStatsLogs_Commit process_data_begin ] stop
 */
	
	/**
	 * [connectionStatsLogs_Commit process_data_end ] start
	 */

	

	
	
	currentComponent="connectionStatsLogs_Commit";

	

 



/**
 * [connectionStatsLogs_Commit process_data_end ] stop
 */
	
	/**
	 * [connectionStatsLogs_Commit end ] start
	 */

	

	
	
	currentComponent="connectionStatsLogs_Commit";

	

 

ok_Hash.put("connectionStatsLogs_Commit", true);
end_Hash.put("connectionStatsLogs_Commit", System.currentTimeMillis());




/**
 * [connectionStatsLogs_Commit end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [connectionStatsLogs_Commit finally ] start
	 */

	

	
	
	currentComponent="connectionStatsLogs_Commit";

	

 



/**
 * [connectionStatsLogs_Commit finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("connectionStatsLogs_Commit_SUBPROCESS_STATE", 1);
	}
	

public void connectionStatsLogsProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("connectionStatsLogs_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [connectionStatsLogs begin ] start
	 */

	

	
		
		ok_Hash.put("connectionStatsLogs", false);
		start_Hash.put("connectionStatsLogs", System.currentTimeMillis());
		
	
	currentComponent="connectionStatsLogs";

	
		int tos_count_connectionStatsLogs = 0;
		
	

			    
		    String url_connectionStatsLogs = "jdbc:sqlserver://" + context.SQLSERVER_LOG_Server ;
		String port_connectionStatsLogs = context.SQLSERVER_LOG_Port;
		String dbname_connectionStatsLogs = context.SQLSERVER_LOG_Database ;
    	if (!"".equals(port_connectionStatsLogs)) {
    		url_connectionStatsLogs += ":" + context.SQLSERVER_LOG_Port;
    	}
    	if (!"".equals(dbname_connectionStatsLogs)) {
    				    
		    	url_connectionStatsLogs += ";databaseName=" + context.SQLSERVER_LOG_Database; 
    	}
		url_connectionStatsLogs += ";appName=" + projectName + ";" + context.SQLSERVER_LOG_AdditionalParams;  
		String dbUser_connectionStatsLogs = context.SQLSERVER_LOG_Login;
		
		
			
	final String decryptedPassword_connectionStatsLogs = context.SQLSERVER_LOG_Password; 
			String dbPwd_connectionStatsLogs = decryptedPassword_connectionStatsLogs;
		
	java.sql.Connection conn_connectionStatsLogs = null;
	
	
			String sharedConnectionName_connectionStatsLogs = "jdbc:sqlserver://"+context.SQLSERVER_LOG_Server+":"+context.SQLSERVER_LOG_Port+";DatabaseName="+context.SQLSERVER_LOG_Schema+";"+context.SQLSERVER_LOG_AdditionalParams+""+"_StatsAndLog_Shared_Connection";
			conn_connectionStatsLogs = SharedDBConnection.getDBConnection("com.microsoft.sqlserver.jdbc.SQLServerDriver",url_connectionStatsLogs,dbUser_connectionStatsLogs , dbPwd_connectionStatsLogs , sharedConnectionName_connectionStatsLogs);
	if (null != conn_connectionStatsLogs) {
		
			conn_connectionStatsLogs.setAutoCommit(false);
	}

	globalMap.put("dbschema_connectionStatsLogs", context.SQLSERVER_LOG_Schema);

	globalMap.put("db_connectionStatsLogs",  context.SQLSERVER_LOG_Database);

	globalMap.put("conn_connectionStatsLogs",conn_connectionStatsLogs);
	
	globalMap.put("shareIdentitySetting_connectionStatsLogs",  false);

 



/**
 * [connectionStatsLogs begin ] stop
 */
	
	/**
	 * [connectionStatsLogs main ] start
	 */

	

	
	
	currentComponent="connectionStatsLogs";

	

 


	tos_count_connectionStatsLogs++;

/**
 * [connectionStatsLogs main ] stop
 */
	
	/**
	 * [connectionStatsLogs process_data_begin ] start
	 */

	

	
	
	currentComponent="connectionStatsLogs";

	

 



/**
 * [connectionStatsLogs process_data_begin ] stop
 */
	
	/**
	 * [connectionStatsLogs process_data_end ] start
	 */

	

	
	
	currentComponent="connectionStatsLogs";

	

 



/**
 * [connectionStatsLogs process_data_end ] stop
 */
	
	/**
	 * [connectionStatsLogs end ] start
	 */

	

	
	
	currentComponent="connectionStatsLogs";

	

 

ok_Hash.put("connectionStatsLogs", true);
end_Hash.put("connectionStatsLogs", System.currentTimeMillis());




/**
 * [connectionStatsLogs end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [connectionStatsLogs finally ] start
	 */

	

	
	
	currentComponent="connectionStatsLogs";

	

 



/**
 * [connectionStatsLogs finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("connectionStatsLogs_SUBPROCESS_STATE", 1);
	}
	


public static class row_talendLogs_LOGSStruct implements routines.system.IPersistableRow<row_talendLogs_LOGSStruct> {
    final static byte[] commonByteArrayLock_DEV_GetTokenAndSendMailOauth2 = new byte[0];
    static byte[] commonByteArray_DEV_GetTokenAndSendMailOauth2 = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_GetTokenAndSendMailOauth2.length) {
				if(length < 1024 && commonByteArray_DEV_GetTokenAndSendMailOauth2.length == 0) {
   					commonByteArray_DEV_GetTokenAndSendMailOauth2 = new byte[1024];
				} else {
   					commonByteArray_DEV_GetTokenAndSendMailOauth2 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_GetTokenAndSendMailOauth2, 0, length);
			strReturn = new String(commonByteArray_DEV_GetTokenAndSendMailOauth2, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_GetTokenAndSendMailOauth2) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row_talendLogs_LOGSStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void talendLogs_LOGSProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("talendLogs_LOGS_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row_talendLogs_LOGSStruct row_talendLogs_LOGS = new row_talendLogs_LOGSStruct();




	
	/**
	 * [talendLogs_DB begin ] start
	 */

	

	
		
		ok_Hash.put("talendLogs_DB", false);
		start_Hash.put("talendLogs_DB", System.currentTimeMillis());
		
	
		currentVirtualComponent = "talendLogs_DB";
	
	currentComponent="talendLogs_DB";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Main");
					}
				
		int tos_count_talendLogs_DB = 0;
		



int nb_line_talendLogs_DB = 0;
int nb_line_update_talendLogs_DB = 0;
int nb_line_inserted_talendLogs_DB = 0;
int nb_line_deleted_talendLogs_DB = 0;
int nb_line_rejected_talendLogs_DB = 0;

int deletedCount_talendLogs_DB=0;
int updatedCount_talendLogs_DB=0;
int insertedCount_talendLogs_DB=0;
int rejectedCount_talendLogs_DB=0;
String dbschema_talendLogs_DB = null;
String tableName_talendLogs_DB = null;
boolean whetherReject_talendLogs_DB = false;

java.util.Calendar calendar_talendLogs_DB = java.util.Calendar.getInstance();
long year1_talendLogs_DB = TalendDate.parseDate("yyyy-MM-dd","0001-01-01").getTime();
long year2_talendLogs_DB = TalendDate.parseDate("yyyy-MM-dd","1753-01-01").getTime();
long year10000_talendLogs_DB = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss","9999-12-31 24:00:00").getTime();
long date_talendLogs_DB;

java.util.Calendar calendar_datetimeoffset_talendLogs_DB = java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone("UTC"));

	
java.sql.Connection conn_talendLogs_DB = null;
String dbUser_talendLogs_DB = null;
	dbschema_talendLogs_DB = (String)globalMap.get("dbschema_connectionStatsLogs");
	conn_talendLogs_DB = (java.sql.Connection)globalMap.get("conn_connectionStatsLogs");
	
   int batchSize_talendLogs_DB = 10000;
   int batchSizeCounter_talendLogs_DB=0;

if(dbschema_talendLogs_DB == null || dbschema_talendLogs_DB.trim().length() == 0) {
    tableName_talendLogs_DB = "log";
} else {
    tableName_talendLogs_DB = dbschema_talendLogs_DB + "].[" + "log";
}
	int count_talendLogs_DB=0;


                    // [%connection%][checktable][tableName]
                    String keyCheckTable_talendLogs_DB = conn_talendLogs_DB + "[checktable]" + "[" + "log" + "]";

                if(GlobalResource.resourceMap.get(keyCheckTable_talendLogs_DB)== null){//}

                    synchronized (GlobalResource.resourceLockMap.get(keyCheckTable_talendLogs_DB)) {//}
                        if(GlobalResource.resourceMap.get(keyCheckTable_talendLogs_DB)== null){//}
                                boolean whetherExist_talendLogs_DB = false;
                                try (java.sql.Statement isExistStmt_talendLogs_DB = conn_talendLogs_DB.createStatement()) {
                                    try {
                                        isExistStmt_talendLogs_DB.execute("SELECT TOP 1 1 FROM [" + tableName_talendLogs_DB + "]" );
                                        whetherExist_talendLogs_DB = true;
                                    } catch (java.lang.Exception e){
                                        whetherExist_talendLogs_DB = false;
                                    }
                                }
                                if(!whetherExist_talendLogs_DB) {
                                    try (java.sql.Statement stmtCreate_talendLogs_DB = conn_talendLogs_DB.createStatement()) {
                                        stmtCreate_talendLogs_DB.execute("CREATE TABLE [" + tableName_talendLogs_DB + "]([moment] DATETIME ,[pid] VARCHAR(20)  ,[root_pid] VARCHAR(20)  ,[father_pid] VARCHAR(20)  ,[project] VARCHAR(50)  ,[job] VARCHAR(255)  ,[context] VARCHAR(50)  ,[priority] INT ,[type] VARCHAR(255)  ,[origin] VARCHAR(255)  ,[message] VARCHAR(255)  ,[code] INT )");
                                    }
                                }
                            GlobalResource.resourceMap.put(keyCheckTable_talendLogs_DB, true);
            //{{{
                        } // end of if
                    } // end synchronized
                }
        String insert_talendLogs_DB = "INSERT INTO [" + tableName_talendLogs_DB + "] ([moment],[pid],[root_pid],[father_pid],[project],[job],[context],[priority],[type],[origin],[message],[code]) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)";

        java.sql.PreparedStatement pstmt_talendLogs_DB = null;
        String keyPsmt_talendLogs_DB = conn_talendLogs_DB + "[psmt]" + "[" + "log" + "]";
        pstmt_talendLogs_DB = SharedDBPreparedStatement.getSharedPreparedStatement(conn_talendLogs_DB,insert_talendLogs_DB,keyPsmt_talendLogs_DB);
        resourceMap.put("pstmt_talendLogs_DB", pstmt_talendLogs_DB);
 	boolean isShareIdentity_talendLogs_DB = globalMap.get("shareIdentitySetting_connectionStatsLogs") != null && (Boolean)globalMap.get("shareIdentitySetting_connectionStatsLogs") == true;

 



/**
 * [talendLogs_DB begin ] stop
 */



	
	/**
	 * [talendLogs_LOGS begin ] start
	 */

	

	
		
		ok_Hash.put("talendLogs_LOGS", false);
		start_Hash.put("talendLogs_LOGS", System.currentTimeMillis());
		
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	
		int tos_count_talendLogs_LOGS = 0;
		

try {
	for (LogCatcherUtils.LogCatcherMessage lcm : talendLogs_LOGS.getMessages()) {
		row_talendLogs_LOGS.type = lcm.getType();
		row_talendLogs_LOGS.origin = (lcm.getOrigin()==null || lcm.getOrigin().length()<1 ? null : lcm.getOrigin());
		row_talendLogs_LOGS.priority = lcm.getPriority();
		row_talendLogs_LOGS.message = lcm.getMessage();
		row_talendLogs_LOGS.code = lcm.getCode();
		
		row_talendLogs_LOGS.moment = java.util.Calendar.getInstance().getTime();
	
    	row_talendLogs_LOGS.pid = pid;
		row_talendLogs_LOGS.root_pid = rootPid;
		row_talendLogs_LOGS.father_pid = fatherPid;
	
    	row_talendLogs_LOGS.project = projectName;
    	row_talendLogs_LOGS.job = jobName;
    	row_talendLogs_LOGS.context = contextStr;
    		
 



/**
 * [talendLogs_LOGS begin ] stop
 */
	
	/**
	 * [talendLogs_LOGS main ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	

 


	tos_count_talendLogs_LOGS++;

/**
 * [talendLogs_LOGS main ] stop
 */
	
	/**
	 * [talendLogs_LOGS process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	

 



/**
 * [talendLogs_LOGS process_data_begin ] stop
 */

	
	/**
	 * [talendLogs_DB main ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_DB";
	
	currentComponent="talendLogs_DB";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"Main");
					}
					



        whetherReject_talendLogs_DB = false;
                    if(row_talendLogs_LOGS.moment != null) {
pstmt_talendLogs_DB.setTimestamp(1, new java.sql.Timestamp(row_talendLogs_LOGS.moment.getTime()));
} else {
pstmt_talendLogs_DB.setNull(1, java.sql.Types.DATE);
}

                    if(row_talendLogs_LOGS.pid == null) {
pstmt_talendLogs_DB.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_talendLogs_DB.setString(2, row_talendLogs_LOGS.pid);
}

                    if(row_talendLogs_LOGS.root_pid == null) {
pstmt_talendLogs_DB.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_talendLogs_DB.setString(3, row_talendLogs_LOGS.root_pid);
}

                    if(row_talendLogs_LOGS.father_pid == null) {
pstmt_talendLogs_DB.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_talendLogs_DB.setString(4, row_talendLogs_LOGS.father_pid);
}

                    if(row_talendLogs_LOGS.project == null) {
pstmt_talendLogs_DB.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_talendLogs_DB.setString(5, row_talendLogs_LOGS.project);
}

                    if(row_talendLogs_LOGS.job == null) {
pstmt_talendLogs_DB.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_talendLogs_DB.setString(6, row_talendLogs_LOGS.job);
}

                    if(row_talendLogs_LOGS.context == null) {
pstmt_talendLogs_DB.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_talendLogs_DB.setString(7, row_talendLogs_LOGS.context);
}

                    if(row_talendLogs_LOGS.priority == null) {
pstmt_talendLogs_DB.setNull(8, java.sql.Types.INTEGER);
} else {pstmt_talendLogs_DB.setInt(8, row_talendLogs_LOGS.priority);
}

                    if(row_talendLogs_LOGS.type == null) {
pstmt_talendLogs_DB.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_talendLogs_DB.setString(9, row_talendLogs_LOGS.type);
}

                    if(row_talendLogs_LOGS.origin == null) {
pstmt_talendLogs_DB.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_talendLogs_DB.setString(10, row_talendLogs_LOGS.origin);
}

                    if(row_talendLogs_LOGS.message == null) {
pstmt_talendLogs_DB.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_talendLogs_DB.setString(11, row_talendLogs_LOGS.message);
}

                    if(row_talendLogs_LOGS.code == null) {
pstmt_talendLogs_DB.setNull(12, java.sql.Types.INTEGER);
} else {pstmt_talendLogs_DB.setInt(12, row_talendLogs_LOGS.code);
}


        		pstmt_talendLogs_DB.addBatch();
        		nb_line_talendLogs_DB++;
    		 
    		  batchSizeCounter_talendLogs_DB++;
    		
            	//////////batch execute by batch size///////
            	class LimitBytesHelper_talendLogs_DB{
            		public int limitBytePart1(int counter,java.sql.PreparedStatement pstmt_talendLogs_DB) throws Exception {
                try {
						
						for(int countEach_talendLogs_DB: pstmt_talendLogs_DB.executeBatch()) {
							if(countEach_talendLogs_DB == -2 || countEach_talendLogs_DB == -3) {
								break;
							}
							counter += countEach_talendLogs_DB;
						}
						
                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_talendLogs_DB = 0;
					for(int countEach_talendLogs_DB: e.getUpdateCounts()) {
						counter += (countEach_talendLogs_DB < 0 ? 0 : countEach_talendLogs_DB);
					}
				
            	    	
                		System.err.println(e.getMessage());
                	
               			 }
    				return counter;
            	}
            	
            	public int limitBytePart2(int counter,java.sql.PreparedStatement pstmt_talendLogs_DB) throws Exception {
                try {
                		
						for(int countEach_talendLogs_DB: pstmt_talendLogs_DB.executeBatch()) {
							if(countEach_talendLogs_DB == -2 || countEach_talendLogs_DB == -3) {
								break;
							}
							counter += countEach_talendLogs_DB;
						}
						
                }catch (java.sql.BatchUpdateException e){
                	
                	
					for(int countEach_talendLogs_DB: e.getUpdateCounts()) {
						counter += (countEach_talendLogs_DB < 0 ? 0 : countEach_talendLogs_DB);
					}
					
            	    	
                        System.err.println(e.getMessage());
                	
                		}	
                	return counter;	
            	}
            }
    		if ((batchSize_talendLogs_DB > 0) && (batchSize_talendLogs_DB <= batchSizeCounter_talendLogs_DB)) {
    		
    		            
            	    		insertedCount_talendLogs_DB = new LimitBytesHelper_talendLogs_DB().limitBytePart1(insertedCount_talendLogs_DB,pstmt_talendLogs_DB);
            	    	
    			
			    batchSizeCounter_talendLogs_DB = 0;
			}
    		

    	////////////commit every////////////
    			

 


	tos_count_talendLogs_DB++;

/**
 * [talendLogs_DB main ] stop
 */
	
	/**
	 * [talendLogs_DB process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_DB";
	
	currentComponent="talendLogs_DB";

	

 



/**
 * [talendLogs_DB process_data_begin ] stop
 */
	
	/**
	 * [talendLogs_DB process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_DB";
	
	currentComponent="talendLogs_DB";

	

 



/**
 * [talendLogs_DB process_data_end ] stop
 */



	
	/**
	 * [talendLogs_LOGS process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	

 



/**
 * [talendLogs_LOGS process_data_end ] stop
 */
	
	/**
	 * [talendLogs_LOGS end ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	
	}
} catch (Exception e_talendLogs_LOGS) {
	logIgnoredError(String.format("talendLogs_LOGS - tLogCatcher failed to process log message(s) due to internal error: %s", e_talendLogs_LOGS), e_talendLogs_LOGS);
}

 

ok_Hash.put("talendLogs_LOGS", true);
end_Hash.put("talendLogs_LOGS", System.currentTimeMillis());




/**
 * [talendLogs_LOGS end ] stop
 */

	
	/**
	 * [talendLogs_DB end ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_DB";
	
	currentComponent="talendLogs_DB";

	



                try {
						int countSum_talendLogs_DB = 0;
						if (pstmt_talendLogs_DB != null && batchSizeCounter_talendLogs_DB > 0) {
							
							for(int countEach_talendLogs_DB: pstmt_talendLogs_DB.executeBatch()) {
								if(countEach_talendLogs_DB == -2 || countEach_talendLogs_DB == -3) {
									break;
								}
								countSum_talendLogs_DB += countEach_talendLogs_DB;
							}
							
						}
            	    	
            	    		insertedCount_talendLogs_DB += countSum_talendLogs_DB;
            	    	
                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_talendLogs_DB = 0;
					for(int countEach_talendLogs_DB: e.getUpdateCounts()) {
						countSum_talendLogs_DB += (countEach_talendLogs_DB < 0 ? 0 : countEach_talendLogs_DB);
					}
					
            	    		insertedCount_talendLogs_DB += countSum_talendLogs_DB;
            	    	
                		System.err.println(e.getMessage());
                	
            	}
        if(pstmt_talendLogs_DB != null) {
			
				SharedDBPreparedStatement.releasePreparedStatement(keyPsmt_talendLogs_DB);
			
        }
    resourceMap.put("statementClosed_talendLogs_DB", true);

	nb_line_deleted_talendLogs_DB=nb_line_deleted_talendLogs_DB+ deletedCount_talendLogs_DB;
	nb_line_update_talendLogs_DB=nb_line_update_talendLogs_DB + updatedCount_talendLogs_DB;
	nb_line_inserted_talendLogs_DB=nb_line_inserted_talendLogs_DB + insertedCount_talendLogs_DB;
	nb_line_rejected_talendLogs_DB=nb_line_rejected_talendLogs_DB + rejectedCount_talendLogs_DB;
	
        globalMap.put("talendLogs_DB_NB_LINE",nb_line_talendLogs_DB);
        globalMap.put("talendLogs_DB_NB_LINE_UPDATED",nb_line_update_talendLogs_DB);
        globalMap.put("talendLogs_DB_NB_LINE_INSERTED",nb_line_inserted_talendLogs_DB);
        globalMap.put("talendLogs_DB_NB_LINE_DELETED",nb_line_deleted_talendLogs_DB);
        globalMap.put("talendLogs_DB_NB_LINE_REJECTED", nb_line_rejected_talendLogs_DB);
    
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Main");
			  	}
			  	
 

ok_Hash.put("talendLogs_DB", true);
end_Hash.put("talendLogs_DB", System.currentTimeMillis());




/**
 * [talendLogs_DB end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:talendLogs_LOGS:sub_ok_talendLogs_connectionStatsLogs_Commit", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("sub_ok_talendLogs_connectionStatsLogs_Commit", 0, "ok");
								} 
							
							connectionStatsLogs_CommitProcess(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [talendLogs_LOGS finally ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	

 



/**
 * [talendLogs_LOGS finally ] stop
 */

	
	/**
	 * [talendLogs_DB finally ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_DB";
	
	currentComponent="talendLogs_DB";

	



    if (resourceMap.get("statementClosed_talendLogs_DB") == null) {
                java.sql.PreparedStatement pstmtToClose_talendLogs_DB = null;
                if ((pstmtToClose_talendLogs_DB = (java.sql.PreparedStatement) resourceMap.remove("pstmt_talendLogs_DB")) != null) {
                    pstmtToClose_talendLogs_DB.close();
                }
    }
 



/**
 * [talendLogs_DB finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("talendLogs_LOGS_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final GetTokenAndSendMailOauth2 GetTokenAndSendMailOauth2Class = new GetTokenAndSendMailOauth2();

        int exitCode = GetTokenAndSendMailOauth2Class.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = GetTokenAndSendMailOauth2.class.getClassLoader().getResourceAsStream("dev/gettokenandsendmailoauth2_5_0/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = GetTokenAndSendMailOauth2.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("ResponseStatusCode", "id_Integer");
                            try{
                                context.ResponseStatusCode=routines.system.ParserUtils.parseTo_Integer (context.getProperty("ResponseStatusCode"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "ResponseStatusCode", e.getMessage()));
                                context.ResponseStatusCode=null;
                            }
                        context.setContextType("Subject", "id_String");
                            context.Subject=(String) context.getProperty("Subject");
                        context.setContextType("Content", "id_String");
                            context.Content=(String) context.getProperty("Content");
                        context.setContextType("AttachmentsList", "id_String");
                            context.AttachmentsList=(String) context.getProperty("AttachmentsList");
                        context.setContextType("ErrorAttachmentExists", "id_Boolean");
                            try{
                                context.ErrorAttachmentExists=routines.system.ParserUtils.parseTo_Boolean (context.getProperty("ErrorAttachmentExists"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "ErrorAttachmentExists", e.getMessage()));
                                context.ErrorAttachmentExists=null;
                            }
                        context.setContextType("ErrorAttachmentSize", "id_Boolean");
                            try{
                                context.ErrorAttachmentSize=routines.system.ParserUtils.parseTo_Boolean (context.getProperty("ErrorAttachmentSize"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "ErrorAttachmentSize", e.getMessage()));
                                context.ErrorAttachmentSize=null;
                            }
                        context.setContextType("TotalAttachmentSize", "id_Long");
                            try{
                                context.TotalAttachmentSize=routines.system.ParserUtils.parseTo_Long (context.getProperty("TotalAttachmentSize"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "TotalAttachmentSize", e.getMessage()));
                                context.TotalAttachmentSize=null;
                            }
                        context.setContextType("ToAddress", "id_String");
                            context.ToAddress=(String) context.getProperty("ToAddress");
                        context.setContextType("CCAddress", "id_String");
                            context.CCAddress=(String) context.getProperty("CCAddress");
                        context.setContextType("FromAddress", "id_String");
                            context.FromAddress=(String) context.getProperty("FromAddress");
                        context.setContextType("Office365AuthenticationUrl", "id_String");
                            context.Office365AuthenticationUrl=(String) context.getProperty("Office365AuthenticationUrl");
                        context.setContextType("Office365ClientId", "id_Password");
                            String pwd_Office365ClientId_value = context.getProperty("Office365ClientId");
                            context.Office365ClientId = null;
                            if(pwd_Office365ClientId_value!=null) {
                                if(context_param.containsKey("Office365ClientId")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.Office365ClientId = pwd_Office365ClientId_value;
                                } else if (!pwd_Office365ClientId_value.isEmpty()) {
                                    try {
                                        context.Office365ClientId = routines.system.PasswordEncryptUtil.decryptPassword(pwd_Office365ClientId_value);
                                        context.put("Office365ClientId",context.Office365ClientId);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        context.setContextType("Office365SecretId", "id_Password");
                            String pwd_Office365SecretId_value = context.getProperty("Office365SecretId");
                            context.Office365SecretId = null;
                            if(pwd_Office365SecretId_value!=null) {
                                if(context_param.containsKey("Office365SecretId")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.Office365SecretId = pwd_Office365SecretId_value;
                                } else if (!pwd_Office365SecretId_value.isEmpty()) {
                                    try {
                                        context.Office365SecretId = routines.system.PasswordEncryptUtil.decryptPassword(pwd_Office365SecretId_value);
                                        context.put("Office365SecretId",context.Office365SecretId);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        context.setContextType("Office365SendMailUrl", "id_String");
                            context.Office365SendMailUrl=(String) context.getProperty("Office365SendMailUrl");
                        context.setContextType("Office365Tenant", "id_Password");
                            String pwd_Office365Tenant_value = context.getProperty("Office365Tenant");
                            context.Office365Tenant = null;
                            if(pwd_Office365Tenant_value!=null) {
                                if(context_param.containsKey("Office365Tenant")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.Office365Tenant = pwd_Office365Tenant_value;
                                } else if (!pwd_Office365Tenant_value.isEmpty()) {
                                    try {
                                        context.Office365Tenant = routines.system.PasswordEncryptUtil.decryptPassword(pwd_Office365Tenant_value);
                                        context.put("Office365Tenant",context.Office365Tenant);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        context.setContextType("Office365Token", "id_String");
                            context.Office365Token=(String) context.getProperty("Office365Token");
                        context.setContextType("SQLSERVER_LOG_AdditionalParams", "id_String");
                            context.SQLSERVER_LOG_AdditionalParams=(String) context.getProperty("SQLSERVER_LOG_AdditionalParams");
                        context.setContextType("SQLSERVER_LOG_Database", "id_String");
                            context.SQLSERVER_LOG_Database=(String) context.getProperty("SQLSERVER_LOG_Database");
                        context.setContextType("SQLSERVER_LOG_Login", "id_String");
                            context.SQLSERVER_LOG_Login=(String) context.getProperty("SQLSERVER_LOG_Login");
                        context.setContextType("SQLSERVER_LOG_Password", "id_Password");
                            String pwd_SQLSERVER_LOG_Password_value = context.getProperty("SQLSERVER_LOG_Password");
                            context.SQLSERVER_LOG_Password = null;
                            if(pwd_SQLSERVER_LOG_Password_value!=null) {
                                if(context_param.containsKey("SQLSERVER_LOG_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.SQLSERVER_LOG_Password = pwd_SQLSERVER_LOG_Password_value;
                                } else if (!pwd_SQLSERVER_LOG_Password_value.isEmpty()) {
                                    try {
                                        context.SQLSERVER_LOG_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_SQLSERVER_LOG_Password_value);
                                        context.put("SQLSERVER_LOG_Password",context.SQLSERVER_LOG_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        context.setContextType("SQLSERVER_LOG_Port", "id_String");
                            context.SQLSERVER_LOG_Port=(String) context.getProperty("SQLSERVER_LOG_Port");
                        context.setContextType("SQLSERVER_LOG_Schema", "id_String");
                            context.SQLSERVER_LOG_Schema=(String) context.getProperty("SQLSERVER_LOG_Schema");
                        context.setContextType("SQLSERVER_LOG_Server", "id_String");
                            context.SQLSERVER_LOG_Server=(String) context.getProperty("SQLSERVER_LOG_Server");
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("ResponseStatusCode")) {
                context.ResponseStatusCode = (Integer) parentContextMap.get("ResponseStatusCode");
            }if (parentContextMap.containsKey("Subject")) {
                context.Subject = (String) parentContextMap.get("Subject");
            }if (parentContextMap.containsKey("Content")) {
                context.Content = (String) parentContextMap.get("Content");
            }if (parentContextMap.containsKey("AttachmentsList")) {
                context.AttachmentsList = (String) parentContextMap.get("AttachmentsList");
            }if (parentContextMap.containsKey("ErrorAttachmentExists")) {
                context.ErrorAttachmentExists = (Boolean) parentContextMap.get("ErrorAttachmentExists");
            }if (parentContextMap.containsKey("ErrorAttachmentSize")) {
                context.ErrorAttachmentSize = (Boolean) parentContextMap.get("ErrorAttachmentSize");
            }if (parentContextMap.containsKey("TotalAttachmentSize")) {
                context.TotalAttachmentSize = (Long) parentContextMap.get("TotalAttachmentSize");
            }if (parentContextMap.containsKey("ToAddress")) {
                context.ToAddress = (String) parentContextMap.get("ToAddress");
            }if (parentContextMap.containsKey("CCAddress")) {
                context.CCAddress = (String) parentContextMap.get("CCAddress");
            }if (parentContextMap.containsKey("FromAddress")) {
                context.FromAddress = (String) parentContextMap.get("FromAddress");
            }if (parentContextMap.containsKey("Office365AuthenticationUrl")) {
                context.Office365AuthenticationUrl = (String) parentContextMap.get("Office365AuthenticationUrl");
            }if (parentContextMap.containsKey("Office365ClientId")) {
                context.Office365ClientId = (java.lang.String) parentContextMap.get("Office365ClientId");
            }if (parentContextMap.containsKey("Office365SecretId")) {
                context.Office365SecretId = (java.lang.String) parentContextMap.get("Office365SecretId");
            }if (parentContextMap.containsKey("Office365SendMailUrl")) {
                context.Office365SendMailUrl = (String) parentContextMap.get("Office365SendMailUrl");
            }if (parentContextMap.containsKey("Office365Tenant")) {
                context.Office365Tenant = (java.lang.String) parentContextMap.get("Office365Tenant");
            }if (parentContextMap.containsKey("Office365Token")) {
                context.Office365Token = (String) parentContextMap.get("Office365Token");
            }if (parentContextMap.containsKey("SQLSERVER_LOG_AdditionalParams")) {
                context.SQLSERVER_LOG_AdditionalParams = (String) parentContextMap.get("SQLSERVER_LOG_AdditionalParams");
            }if (parentContextMap.containsKey("SQLSERVER_LOG_Database")) {
                context.SQLSERVER_LOG_Database = (String) parentContextMap.get("SQLSERVER_LOG_Database");
            }if (parentContextMap.containsKey("SQLSERVER_LOG_Login")) {
                context.SQLSERVER_LOG_Login = (String) parentContextMap.get("SQLSERVER_LOG_Login");
            }if (parentContextMap.containsKey("SQLSERVER_LOG_Password")) {
                context.SQLSERVER_LOG_Password = (java.lang.String) parentContextMap.get("SQLSERVER_LOG_Password");
            }if (parentContextMap.containsKey("SQLSERVER_LOG_Port")) {
                context.SQLSERVER_LOG_Port = (String) parentContextMap.get("SQLSERVER_LOG_Port");
            }if (parentContextMap.containsKey("SQLSERVER_LOG_Schema")) {
                context.SQLSERVER_LOG_Schema = (String) parentContextMap.get("SQLSERVER_LOG_Schema");
            }if (parentContextMap.containsKey("SQLSERVER_LOG_Server")) {
                context.SQLSERVER_LOG_Server = (String) parentContextMap.get("SQLSERVER_LOG_Server");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("Office365ClientId");
			parametersToEncrypt.add("Office365SecretId");
			parametersToEncrypt.add("Office365Tenant");
			parametersToEncrypt.add("SQLSERVER_LOG_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;preStaLogConProcess(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_preStaLogCon) {
globalMap.put("preStaLogCon_SUBPROCESS_STATE", -1);

e_preStaLogCon.printStackTrace();

}
try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}



this.globalResumeTicket = false;//to run others jobs


this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : GetTokenAndSendMailOauth2");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_connectionStatsLogs");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_connectionStatsLogs", globalMap.get("conn_connectionStatsLogs"));







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     265605 characters generated by Talend Open Studio for Data Integration 
 *     on the 14 février 2023 09:31:39 CET
 ************************************************************************************************/