// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package dev.buy_validation_0_9;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJavaRow_1
	//import java.util.List;
import java.util.*;
import java.lang.reflect.*;

	//the import part of tJavaRow_2
	//import java.util.List;
//import java.util.List;
import java.util.*;
import java.lang.reflect.*;

	//the import part of tJavaFlex_1
	//import java.util.List;

	//the import part of tJavaRow_4
	//import java.util.List;

	//the import part of tJava_1
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: BUY_VALIDATION Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.3.1.20191031_1204-M3
 * @status DEV
 */
public class BUY_VALIDATION implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(ErrorHeader != null){
				
					this.setProperty("ErrorHeader", ErrorHeader.toString());
				
			}
			
			if(hasErrorHeader != null){
				
					this.setProperty("hasErrorHeader", hasErrorHeader.toString());
				
			}
			
			if(dateValidation != null){
				
					this.setProperty("dateValidation", dateValidation.toString());
				
			}
			
			if(timeValidation != null){
				
					this.setProperty("timeValidation", timeValidation.toString());
				
			}
			
			if(ReferentielPath != null){
				
					this.setProperty("ReferentielPath", ReferentielPath.toString());
				
			}
			
			if(IntegrationExcelPath != null){
				
					this.setProperty("IntegrationExcelPath", IntegrationExcelPath.toString());
				
			}
			
			if(ExcelFileName != null){
				
					this.setProperty("ExcelFileName", ExcelFileName.toString());
				
			}
			
			if(LogPath != null){
				
					this.setProperty("LogPath", LogPath.toString());
				
			}
			
			if(isNike != null){
				
					this.setProperty("isNike", isNike.toString());
				
			}
			
			if(recipientEmail != null){
				
					this.setProperty("recipientEmail", recipientEmail.toString());
				
			}
			
		}

public String ErrorHeader;
public String getErrorHeader(){
	return this.ErrorHeader;
}
public Boolean hasErrorHeader;
public Boolean getHasErrorHeader(){
	return this.hasErrorHeader;
}
public String dateValidation;
public String getDateValidation(){
	return this.dateValidation;
}
public String timeValidation;
public String getTimeValidation(){
	return this.timeValidation;
}
public String ReferentielPath;
public String getReferentielPath(){
	return this.ReferentielPath;
}
public String IntegrationExcelPath;
public String getIntegrationExcelPath(){
	return this.IntegrationExcelPath;
}
public String ExcelFileName;
public String getExcelFileName(){
	return this.ExcelFileName;
}
public String LogPath;
public String getLogPath(){
	return this.LogPath;
}
public Boolean isNike;
public Boolean getIsNike(){
	return this.isNike;
}
public String recipientEmail;
public String getRecipientEmail(){
	return this.recipientEmail;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.9";
	private final String jobName = "BUY_VALIDATION";
	private final String projectName = "DEV";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				BUY_VALIDATION.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(BUY_VALIDATION.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tFileInputExcel_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputExcel_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_24_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_26_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_28_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_30_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_31_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaFlex_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJavaFlex_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJavaFlex_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSetGlobalVar_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSetGlobalVar_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_29_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_32_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_25_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_23_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_20_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_21_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_22_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileDelete_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileDelete_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileCopy_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileCopy_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSleep_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSendMail_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_sortie_fashion_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_copyOfsortie_fashion_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row30_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row28_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row23_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_sortie_product_status_file_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_sortie_size_map_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row19_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_sortie_season_map_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_sortie_brand_map_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_sortie_color_map_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputExcel_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputExcel_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJavaFlex_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSetGlobalVar_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_10_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_11_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_12_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileDelete_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileCopy_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_DEV_BUY_VALIDATION = new byte[0];
    static byte[] commonByteArray_DEV_BUY_VALIDATION = new byte[0];

	
			    public Object ExcelSchema;

				public Object getExcelSchema () {
					return this.ExcelSchema;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_BUY_VALIDATION) {

        	try {

        		int length = 0;
		
						this.ExcelSchema = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.ExcelSchema);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ExcelSchema="+String.valueOf(ExcelSchema));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_DEV_BUY_VALIDATION = new byte[0];
    static byte[] commonByteArray_DEV_BUY_VALIDATION = new byte[0];

	
			    public Object ExcelSchema;

				public Object getExcelSchema () {
					return this.ExcelSchema;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_BUY_VALIDATION) {

        	try {

        		int length = 0;
		
						this.ExcelSchema = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.ExcelSchema);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ExcelSchema="+String.valueOf(ExcelSchema));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_DEV_BUY_VALIDATION = new byte[0];
    static byte[] commonByteArray_DEV_BUY_VALIDATION = new byte[0];

	
			    public String newColumn;

				public String getNewColumn () {
					return this.newColumn;
				}
				
			    public String newColumn1;

				public String getNewColumn1 () {
					return this.newColumn1;
				}
				
			    public String newColumn2;

				public String getNewColumn2 () {
					return this.newColumn2;
				}
				
			    public String newColumn3;

				public String getNewColumn3 () {
					return this.newColumn3;
				}
				
			    public String newColumn4;

				public String getNewColumn4 () {
					return this.newColumn4;
				}
				
			    public String newColumn5;

				public String getNewColumn5 () {
					return this.newColumn5;
				}
				
			    public String newColumn6;

				public String getNewColumn6 () {
					return this.newColumn6;
				}
				
			    public String newColumn7;

				public String getNewColumn7 () {
					return this.newColumn7;
				}
				
			    public String newColumn8;

				public String getNewColumn8 () {
					return this.newColumn8;
				}
				
			    public String newColumn9;

				public String getNewColumn9 () {
					return this.newColumn9;
				}
				
			    public String newColumn10;

				public String getNewColumn10 () {
					return this.newColumn10;
				}
				
			    public String newColumn11;

				public String getNewColumn11 () {
					return this.newColumn11;
				}
				
			    public String newColumn12;

				public String getNewColumn12 () {
					return this.newColumn12;
				}
				
			    public String newColumn13;

				public String getNewColumn13 () {
					return this.newColumn13;
				}
				
			    public String newColumn14;

				public String getNewColumn14 () {
					return this.newColumn14;
				}
				
			    public String newColumn15;

				public String getNewColumn15 () {
					return this.newColumn15;
				}
				
			    public String newColumn16;

				public String getNewColumn16 () {
					return this.newColumn16;
				}
				
			    public String newColumn17;

				public String getNewColumn17 () {
					return this.newColumn17;
				}
				
			    public String newColumn18;

				public String getNewColumn18 () {
					return this.newColumn18;
				}
				
			    public String newColumn19;

				public String getNewColumn19 () {
					return this.newColumn19;
				}
				
			    public String newColumn20;

				public String getNewColumn20 () {
					return this.newColumn20;
				}
				
			    public String newColumn21;

				public String getNewColumn21 () {
					return this.newColumn21;
				}
				
			    public String newColumn22;

				public String getNewColumn22 () {
					return this.newColumn22;
				}
				
			    public String newColumn23;

				public String getNewColumn23 () {
					return this.newColumn23;
				}
				
			    public String newColumn24;

				public String getNewColumn24 () {
					return this.newColumn24;
				}
				
			    public String newColumn25;

				public String getNewColumn25 () {
					return this.newColumn25;
				}
				
			    public String newColumn26;

				public String getNewColumn26 () {
					return this.newColumn26;
				}
				
			    public String newColumn27;

				public String getNewColumn27 () {
					return this.newColumn27;
				}
				
			    public String newColumn28;

				public String getNewColumn28 () {
					return this.newColumn28;
				}
				
			    public String newColumn29;

				public String getNewColumn29 () {
					return this.newColumn29;
				}
				
			    public String newColumn30;

				public String getNewColumn30 () {
					return this.newColumn30;
				}
				
			    public String newColumn31;

				public String getNewColumn31 () {
					return this.newColumn31;
				}
				
			    public String newColumn32;

				public String getNewColumn32 () {
					return this.newColumn32;
				}
				
			    public String newColumn33;

				public String getNewColumn33 () {
					return this.newColumn33;
				}
				
			    public String newColumn34;

				public String getNewColumn34 () {
					return this.newColumn34;
				}
				
			    public String newColumn35;

				public String getNewColumn35 () {
					return this.newColumn35;
				}
				
			    public String newColumn36;

				public String getNewColumn36 () {
					return this.newColumn36;
				}
				
			    public String newColumn37;

				public String getNewColumn37 () {
					return this.newColumn37;
				}
				
			    public String newColumn38;

				public String getNewColumn38 () {
					return this.newColumn38;
				}
				
			    public String newColumn39;

				public String getNewColumn39 () {
					return this.newColumn39;
				}
				
			    public String newColumn40;

				public String getNewColumn40 () {
					return this.newColumn40;
				}
				
			    public String newColumn41;

				public String getNewColumn41 () {
					return this.newColumn41;
				}
				
			    public String newColumn42;

				public String getNewColumn42 () {
					return this.newColumn42;
				}
				
			    public String newColumn43;

				public String getNewColumn43 () {
					return this.newColumn43;
				}
				
			    public String newColumn44;

				public String getNewColumn44 () {
					return this.newColumn44;
				}
				
			    public String newColumn45;

				public String getNewColumn45 () {
					return this.newColumn45;
				}
				
			    public String newColumn46;

				public String getNewColumn46 () {
					return this.newColumn46;
				}
				
			    public String newColumn47;

				public String getNewColumn47 () {
					return this.newColumn47;
				}
				
			    public String newColumn48;

				public String getNewColumn48 () {
					return this.newColumn48;
				}
				
			    public String newColumn49;

				public String getNewColumn49 () {
					return this.newColumn49;
				}
				
			    public String newColumn50;

				public String getNewColumn50 () {
					return this.newColumn50;
				}
				
			    public String newColumn51;

				public String getNewColumn51 () {
					return this.newColumn51;
				}
				
			    public String newColumn52;

				public String getNewColumn52 () {
					return this.newColumn52;
				}
				
			    public String newColumn53;

				public String getNewColumn53 () {
					return this.newColumn53;
				}
				
			    public String newColumn54;

				public String getNewColumn54 () {
					return this.newColumn54;
				}
				
			    public String newColumn55;

				public String getNewColumn55 () {
					return this.newColumn55;
				}
				
			    public String newColumn56;

				public String getNewColumn56 () {
					return this.newColumn56;
				}
				
			    public String newColumn57;

				public String getNewColumn57 () {
					return this.newColumn57;
				}
				
			    public String newColumn58;

				public String getNewColumn58 () {
					return this.newColumn58;
				}
				
			    public String newColumn59;

				public String getNewColumn59 () {
					return this.newColumn59;
				}
				
			    public String newColumn60;

				public String getNewColumn60 () {
					return this.newColumn60;
				}
				
			    public String newColumn61;

				public String getNewColumn61 () {
					return this.newColumn61;
				}
				
			    public String newColumn62;

				public String getNewColumn62 () {
					return this.newColumn62;
				}
				
			    public String newColumn63;

				public String getNewColumn63 () {
					return this.newColumn63;
				}
				
			    public String newColumn64;

				public String getNewColumn64 () {
					return this.newColumn64;
				}
				
			    public String newColumn65;

				public String getNewColumn65 () {
					return this.newColumn65;
				}
				
			    public String newColumn66;

				public String getNewColumn66 () {
					return this.newColumn66;
				}
				
			    public String newColumn67;

				public String getNewColumn67 () {
					return this.newColumn67;
				}
				
			    public String newColumn68;

				public String getNewColumn68 () {
					return this.newColumn68;
				}
				
			    public String newColumn69;

				public String getNewColumn69 () {
					return this.newColumn69;
				}
				
			    public String newColumn70;

				public String getNewColumn70 () {
					return this.newColumn70;
				}
				
			    public String newColumn71;

				public String getNewColumn71 () {
					return this.newColumn71;
				}
				
			    public String newColumn72;

				public String getNewColumn72 () {
					return this.newColumn72;
				}
				
			    public String newColumn73;

				public String getNewColumn73 () {
					return this.newColumn73;
				}
				
			    public String newColumn74;

				public String getNewColumn74 () {
					return this.newColumn74;
				}
				
			    public String newColumn75;

				public String getNewColumn75 () {
					return this.newColumn75;
				}
				
			    public String newColumn76;

				public String getNewColumn76 () {
					return this.newColumn76;
				}
				
			    public String newColumn77;

				public String getNewColumn77 () {
					return this.newColumn77;
				}
				
			    public String newColumn78;

				public String getNewColumn78 () {
					return this.newColumn78;
				}
				
			    public String newColumn79;

				public String getNewColumn79 () {
					return this.newColumn79;
				}
				
			    public String newColumn80;

				public String getNewColumn80 () {
					return this.newColumn80;
				}
				
			    public String newColumn81;

				public String getNewColumn81 () {
					return this.newColumn81;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_BUY_VALIDATION.length) {
				if(length < 1024 && commonByteArray_DEV_BUY_VALIDATION.length == 0) {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[1024];
				} else {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_BUY_VALIDATION, 0, length);
			strReturn = new String(commonByteArray_DEV_BUY_VALIDATION, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_BUY_VALIDATION) {

        	try {

        		int length = 0;
		
					this.newColumn = readString(dis);
					
					this.newColumn1 = readString(dis);
					
					this.newColumn2 = readString(dis);
					
					this.newColumn3 = readString(dis);
					
					this.newColumn4 = readString(dis);
					
					this.newColumn5 = readString(dis);
					
					this.newColumn6 = readString(dis);
					
					this.newColumn7 = readString(dis);
					
					this.newColumn8 = readString(dis);
					
					this.newColumn9 = readString(dis);
					
					this.newColumn10 = readString(dis);
					
					this.newColumn11 = readString(dis);
					
					this.newColumn12 = readString(dis);
					
					this.newColumn13 = readString(dis);
					
					this.newColumn14 = readString(dis);
					
					this.newColumn15 = readString(dis);
					
					this.newColumn16 = readString(dis);
					
					this.newColumn17 = readString(dis);
					
					this.newColumn18 = readString(dis);
					
					this.newColumn19 = readString(dis);
					
					this.newColumn20 = readString(dis);
					
					this.newColumn21 = readString(dis);
					
					this.newColumn22 = readString(dis);
					
					this.newColumn23 = readString(dis);
					
					this.newColumn24 = readString(dis);
					
					this.newColumn25 = readString(dis);
					
					this.newColumn26 = readString(dis);
					
					this.newColumn27 = readString(dis);
					
					this.newColumn28 = readString(dis);
					
					this.newColumn29 = readString(dis);
					
					this.newColumn30 = readString(dis);
					
					this.newColumn31 = readString(dis);
					
					this.newColumn32 = readString(dis);
					
					this.newColumn33 = readString(dis);
					
					this.newColumn34 = readString(dis);
					
					this.newColumn35 = readString(dis);
					
					this.newColumn36 = readString(dis);
					
					this.newColumn37 = readString(dis);
					
					this.newColumn38 = readString(dis);
					
					this.newColumn39 = readString(dis);
					
					this.newColumn40 = readString(dis);
					
					this.newColumn41 = readString(dis);
					
					this.newColumn42 = readString(dis);
					
					this.newColumn43 = readString(dis);
					
					this.newColumn44 = readString(dis);
					
					this.newColumn45 = readString(dis);
					
					this.newColumn46 = readString(dis);
					
					this.newColumn47 = readString(dis);
					
					this.newColumn48 = readString(dis);
					
					this.newColumn49 = readString(dis);
					
					this.newColumn50 = readString(dis);
					
					this.newColumn51 = readString(dis);
					
					this.newColumn52 = readString(dis);
					
					this.newColumn53 = readString(dis);
					
					this.newColumn54 = readString(dis);
					
					this.newColumn55 = readString(dis);
					
					this.newColumn56 = readString(dis);
					
					this.newColumn57 = readString(dis);
					
					this.newColumn58 = readString(dis);
					
					this.newColumn59 = readString(dis);
					
					this.newColumn60 = readString(dis);
					
					this.newColumn61 = readString(dis);
					
					this.newColumn62 = readString(dis);
					
					this.newColumn63 = readString(dis);
					
					this.newColumn64 = readString(dis);
					
					this.newColumn65 = readString(dis);
					
					this.newColumn66 = readString(dis);
					
					this.newColumn67 = readString(dis);
					
					this.newColumn68 = readString(dis);
					
					this.newColumn69 = readString(dis);
					
					this.newColumn70 = readString(dis);
					
					this.newColumn71 = readString(dis);
					
					this.newColumn72 = readString(dis);
					
					this.newColumn73 = readString(dis);
					
					this.newColumn74 = readString(dis);
					
					this.newColumn75 = readString(dis);
					
					this.newColumn76 = readString(dis);
					
					this.newColumn77 = readString(dis);
					
					this.newColumn78 = readString(dis);
					
					this.newColumn79 = readString(dis);
					
					this.newColumn80 = readString(dis);
					
					this.newColumn81 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.newColumn,dos);
					
					// String
				
						writeString(this.newColumn1,dos);
					
					// String
				
						writeString(this.newColumn2,dos);
					
					// String
				
						writeString(this.newColumn3,dos);
					
					// String
				
						writeString(this.newColumn4,dos);
					
					// String
				
						writeString(this.newColumn5,dos);
					
					// String
				
						writeString(this.newColumn6,dos);
					
					// String
				
						writeString(this.newColumn7,dos);
					
					// String
				
						writeString(this.newColumn8,dos);
					
					// String
				
						writeString(this.newColumn9,dos);
					
					// String
				
						writeString(this.newColumn10,dos);
					
					// String
				
						writeString(this.newColumn11,dos);
					
					// String
				
						writeString(this.newColumn12,dos);
					
					// String
				
						writeString(this.newColumn13,dos);
					
					// String
				
						writeString(this.newColumn14,dos);
					
					// String
				
						writeString(this.newColumn15,dos);
					
					// String
				
						writeString(this.newColumn16,dos);
					
					// String
				
						writeString(this.newColumn17,dos);
					
					// String
				
						writeString(this.newColumn18,dos);
					
					// String
				
						writeString(this.newColumn19,dos);
					
					// String
				
						writeString(this.newColumn20,dos);
					
					// String
				
						writeString(this.newColumn21,dos);
					
					// String
				
						writeString(this.newColumn22,dos);
					
					// String
				
						writeString(this.newColumn23,dos);
					
					// String
				
						writeString(this.newColumn24,dos);
					
					// String
				
						writeString(this.newColumn25,dos);
					
					// String
				
						writeString(this.newColumn26,dos);
					
					// String
				
						writeString(this.newColumn27,dos);
					
					// String
				
						writeString(this.newColumn28,dos);
					
					// String
				
						writeString(this.newColumn29,dos);
					
					// String
				
						writeString(this.newColumn30,dos);
					
					// String
				
						writeString(this.newColumn31,dos);
					
					// String
				
						writeString(this.newColumn32,dos);
					
					// String
				
						writeString(this.newColumn33,dos);
					
					// String
				
						writeString(this.newColumn34,dos);
					
					// String
				
						writeString(this.newColumn35,dos);
					
					// String
				
						writeString(this.newColumn36,dos);
					
					// String
				
						writeString(this.newColumn37,dos);
					
					// String
				
						writeString(this.newColumn38,dos);
					
					// String
				
						writeString(this.newColumn39,dos);
					
					// String
				
						writeString(this.newColumn40,dos);
					
					// String
				
						writeString(this.newColumn41,dos);
					
					// String
				
						writeString(this.newColumn42,dos);
					
					// String
				
						writeString(this.newColumn43,dos);
					
					// String
				
						writeString(this.newColumn44,dos);
					
					// String
				
						writeString(this.newColumn45,dos);
					
					// String
				
						writeString(this.newColumn46,dos);
					
					// String
				
						writeString(this.newColumn47,dos);
					
					// String
				
						writeString(this.newColumn48,dos);
					
					// String
				
						writeString(this.newColumn49,dos);
					
					// String
				
						writeString(this.newColumn50,dos);
					
					// String
				
						writeString(this.newColumn51,dos);
					
					// String
				
						writeString(this.newColumn52,dos);
					
					// String
				
						writeString(this.newColumn53,dos);
					
					// String
				
						writeString(this.newColumn54,dos);
					
					// String
				
						writeString(this.newColumn55,dos);
					
					// String
				
						writeString(this.newColumn56,dos);
					
					// String
				
						writeString(this.newColumn57,dos);
					
					// String
				
						writeString(this.newColumn58,dos);
					
					// String
				
						writeString(this.newColumn59,dos);
					
					// String
				
						writeString(this.newColumn60,dos);
					
					// String
				
						writeString(this.newColumn61,dos);
					
					// String
				
						writeString(this.newColumn62,dos);
					
					// String
				
						writeString(this.newColumn63,dos);
					
					// String
				
						writeString(this.newColumn64,dos);
					
					// String
				
						writeString(this.newColumn65,dos);
					
					// String
				
						writeString(this.newColumn66,dos);
					
					// String
				
						writeString(this.newColumn67,dos);
					
					// String
				
						writeString(this.newColumn68,dos);
					
					// String
				
						writeString(this.newColumn69,dos);
					
					// String
				
						writeString(this.newColumn70,dos);
					
					// String
				
						writeString(this.newColumn71,dos);
					
					// String
				
						writeString(this.newColumn72,dos);
					
					// String
				
						writeString(this.newColumn73,dos);
					
					// String
				
						writeString(this.newColumn74,dos);
					
					// String
				
						writeString(this.newColumn75,dos);
					
					// String
				
						writeString(this.newColumn76,dos);
					
					// String
				
						writeString(this.newColumn77,dos);
					
					// String
				
						writeString(this.newColumn78,dos);
					
					// String
				
						writeString(this.newColumn79,dos);
					
					// String
				
						writeString(this.newColumn80,dos);
					
					// String
				
						writeString(this.newColumn81,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("newColumn="+newColumn);
		sb.append(",newColumn1="+newColumn1);
		sb.append(",newColumn2="+newColumn2);
		sb.append(",newColumn3="+newColumn3);
		sb.append(",newColumn4="+newColumn4);
		sb.append(",newColumn5="+newColumn5);
		sb.append(",newColumn6="+newColumn6);
		sb.append(",newColumn7="+newColumn7);
		sb.append(",newColumn8="+newColumn8);
		sb.append(",newColumn9="+newColumn9);
		sb.append(",newColumn10="+newColumn10);
		sb.append(",newColumn11="+newColumn11);
		sb.append(",newColumn12="+newColumn12);
		sb.append(",newColumn13="+newColumn13);
		sb.append(",newColumn14="+newColumn14);
		sb.append(",newColumn15="+newColumn15);
		sb.append(",newColumn16="+newColumn16);
		sb.append(",newColumn17="+newColumn17);
		sb.append(",newColumn18="+newColumn18);
		sb.append(",newColumn19="+newColumn19);
		sb.append(",newColumn20="+newColumn20);
		sb.append(",newColumn21="+newColumn21);
		sb.append(",newColumn22="+newColumn22);
		sb.append(",newColumn23="+newColumn23);
		sb.append(",newColumn24="+newColumn24);
		sb.append(",newColumn25="+newColumn25);
		sb.append(",newColumn26="+newColumn26);
		sb.append(",newColumn27="+newColumn27);
		sb.append(",newColumn28="+newColumn28);
		sb.append(",newColumn29="+newColumn29);
		sb.append(",newColumn30="+newColumn30);
		sb.append(",newColumn31="+newColumn31);
		sb.append(",newColumn32="+newColumn32);
		sb.append(",newColumn33="+newColumn33);
		sb.append(",newColumn34="+newColumn34);
		sb.append(",newColumn35="+newColumn35);
		sb.append(",newColumn36="+newColumn36);
		sb.append(",newColumn37="+newColumn37);
		sb.append(",newColumn38="+newColumn38);
		sb.append(",newColumn39="+newColumn39);
		sb.append(",newColumn40="+newColumn40);
		sb.append(",newColumn41="+newColumn41);
		sb.append(",newColumn42="+newColumn42);
		sb.append(",newColumn43="+newColumn43);
		sb.append(",newColumn44="+newColumn44);
		sb.append(",newColumn45="+newColumn45);
		sb.append(",newColumn46="+newColumn46);
		sb.append(",newColumn47="+newColumn47);
		sb.append(",newColumn48="+newColumn48);
		sb.append(",newColumn49="+newColumn49);
		sb.append(",newColumn50="+newColumn50);
		sb.append(",newColumn51="+newColumn51);
		sb.append(",newColumn52="+newColumn52);
		sb.append(",newColumn53="+newColumn53);
		sb.append(",newColumn54="+newColumn54);
		sb.append(",newColumn55="+newColumn55);
		sb.append(",newColumn56="+newColumn56);
		sb.append(",newColumn57="+newColumn57);
		sb.append(",newColumn58="+newColumn58);
		sb.append(",newColumn59="+newColumn59);
		sb.append(",newColumn60="+newColumn60);
		sb.append(",newColumn61="+newColumn61);
		sb.append(",newColumn62="+newColumn62);
		sb.append(",newColumn63="+newColumn63);
		sb.append(",newColumn64="+newColumn64);
		sb.append(",newColumn65="+newColumn65);
		sb.append(",newColumn66="+newColumn66);
		sb.append(",newColumn67="+newColumn67);
		sb.append(",newColumn68="+newColumn68);
		sb.append(",newColumn69="+newColumn69);
		sb.append(",newColumn70="+newColumn70);
		sb.append(",newColumn71="+newColumn71);
		sb.append(",newColumn72="+newColumn72);
		sb.append(",newColumn73="+newColumn73);
		sb.append(",newColumn74="+newColumn74);
		sb.append(",newColumn75="+newColumn75);
		sb.append(",newColumn76="+newColumn76);
		sb.append(",newColumn77="+newColumn77);
		sb.append(",newColumn78="+newColumn78);
		sb.append(",newColumn79="+newColumn79);
		sb.append(",newColumn80="+newColumn80);
		sb.append(",newColumn81="+newColumn81);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputExcel_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
row2Struct row2 = new row2Struct();
row2Struct row4 = row2;






	
	/**
	 * [tJavaRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_2", false);
		start_Hash.put("tJavaRow_2", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tJavaRow_2 = 0;
		

int nb_line_tJavaRow_2 = 0;

 



/**
 * [tJavaRow_2 begin ] stop
 */



	
	/**
	 * [tLogRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_1", false);
		start_Hash.put("tLogRow_1", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tLogRow_1 = 0;
		

	///////////////////////
	
         class Util_tLogRow_1 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[1];

        public void addRow(String[] row) {

            for (int i = 0; i < 1; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 0 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 0 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);	                

                  
                    //last column
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() - fillChars[1].length()+2; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_1 util_tLogRow_1 = new Util_tLogRow_1();
        util_tLogRow_1.setTableName("tLogRow_1");
        util_tLogRow_1.addRow(new String[]{"ExcelSchema",});        
 		StringBuilder strBuffer_tLogRow_1 = null;
		int nb_line_tLogRow_1 = 0;
///////////////////////    			



 



/**
 * [tLogRow_1 begin ] stop
 */



	
	/**
	 * [tJavaRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_1", false);
		start_Hash.put("tJavaRow_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tJavaRow_1 = 0;
		

int nb_line_tJavaRow_1 = 0;

 



/**
 * [tJavaRow_1 begin ] stop
 */



	
	/**
	 * [tFileInputExcel_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputExcel_1", false);
		start_Hash.put("tFileInputExcel_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputExcel_1";

	
		int tos_count_tFileInputExcel_1 = 0;
		

 
	final String decryptedPassword_tFileInputExcel_1 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[G+F/EKPkVTUojwDq0lmfv+B8toMgq9UiWtlDpA==]");
        String password_tFileInputExcel_1 = decryptedPassword_tFileInputExcel_1;
        if (password_tFileInputExcel_1.isEmpty()){
            password_tFileInputExcel_1 = null;
        }
			class RegexUtil_tFileInputExcel_1 {

		    	public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, String oneSheetName, boolean useRegex) {

			        java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();

			        if(useRegex){//this part process the regex issue

				        java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(oneSheetName);
				        for (org.apache.poi.ss.usermodel.Sheet sheet : workbook) {
				            String sheetName = sheet.getSheetName();
				            java.util.regex.Matcher matcher = pattern.matcher(sheetName);
				            if (matcher.matches()) {
				            	if(sheet != null){
				                	list.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet);
				                }
				            }
				        }

			        }else{
			        	org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook.getSheet(oneSheetName);
		            	if(sheet != null){
		                	list.add(sheet);
		                }

			        }

			        return list;
			    }

			    public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, int index, boolean useRegex) {
			    	java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list =  new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
			    	org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook.getSheetAt(index);
	            	if(sheet != null){
	                	list.add(sheet);
	                }
			    	return list;
			    }

			}
		RegexUtil_tFileInputExcel_1 regexUtil_tFileInputExcel_1 = new RegexUtil_tFileInputExcel_1();

		Object source_tFileInputExcel_1 = context.IntegrationExcelPath + context.ExcelFileName;
		org.apache.poi.xssf.usermodel.XSSFWorkbook workbook_tFileInputExcel_1 = null;

		if(source_tFileInputExcel_1 instanceof String){
			workbook_tFileInputExcel_1 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory.create(new java.io.File((String)source_tFileInputExcel_1), password_tFileInputExcel_1);
		} else if(source_tFileInputExcel_1 instanceof java.io.InputStream) {
     		workbook_tFileInputExcel_1 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory.create((java.io.InputStream)source_tFileInputExcel_1, password_tFileInputExcel_1);
		} else{
			workbook_tFileInputExcel_1 = null;
			throw new java.lang.Exception("The data source should be specified as Inputstream or File Path!");
		}
		try {

		java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_tFileInputExcel_1 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
        sheetList_tFileInputExcel_1.addAll(regexUtil_tFileInputExcel_1.getSheets(workbook_tFileInputExcel_1, 0, false));
    	if(sheetList_tFileInputExcel_1.size() <= 0){
            throw new RuntimeException("Special sheets not exist!");
        }

		java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_FilterNull_tFileInputExcel_1 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
		for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_FilterNull_tFileInputExcel_1 : sheetList_tFileInputExcel_1) {
			if(sheet_FilterNull_tFileInputExcel_1!=null && sheetList_FilterNull_tFileInputExcel_1.iterator()!=null && sheet_FilterNull_tFileInputExcel_1.iterator().hasNext()){
				sheetList_FilterNull_tFileInputExcel_1.add(sheet_FilterNull_tFileInputExcel_1);
			}
		}
		sheetList_tFileInputExcel_1 = sheetList_FilterNull_tFileInputExcel_1;
	if(sheetList_tFileInputExcel_1.size()>0){
		int nb_line_tFileInputExcel_1 = 0;

        int begin_line_tFileInputExcel_1 = 0;

        int footer_input_tFileInputExcel_1 = 0;

        int end_line_tFileInputExcel_1=0;
        for(org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_1:sheetList_tFileInputExcel_1){
			end_line_tFileInputExcel_1+=(sheet_tFileInputExcel_1.getLastRowNum()+1);
        }
        end_line_tFileInputExcel_1 -= footer_input_tFileInputExcel_1;
        int limit_tFileInputExcel_1 = 1;
        int start_column_tFileInputExcel_1 = 1-1;
        int end_column_tFileInputExcel_1 = -1;
        Integer lastColumn_tFileInputExcel_1 = 80;
        if(lastColumn_tFileInputExcel_1!=null){
        	end_column_tFileInputExcel_1 = lastColumn_tFileInputExcel_1.intValue();
        }

        org.apache.poi.xssf.usermodel.XSSFRow row_tFileInputExcel_1 = null;
        org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_1 = sheetList_tFileInputExcel_1.get(0);
        int rowCount_tFileInputExcel_1 = 0;
        int sheetIndex_tFileInputExcel_1 = 0;
        int currentRows_tFileInputExcel_1 = (sheetList_tFileInputExcel_1.get(0).getLastRowNum()+1);

		//for the number format
        java.text.DecimalFormat df_tFileInputExcel_1 = new java.text.DecimalFormat("#.####################################");
        char decimalChar_tFileInputExcel_1 = df_tFileInputExcel_1.getDecimalFormatSymbols().getDecimalSeparator();
		
        for(int i_tFileInputExcel_1 = begin_line_tFileInputExcel_1; i_tFileInputExcel_1 < end_line_tFileInputExcel_1; i_tFileInputExcel_1++){

        	int emptyColumnCount_tFileInputExcel_1 = 0;

        	if (limit_tFileInputExcel_1 != -1 && nb_line_tFileInputExcel_1 >= limit_tFileInputExcel_1) {
        		break;
        	}

            while (i_tFileInputExcel_1 >= rowCount_tFileInputExcel_1 + currentRows_tFileInputExcel_1) {
                rowCount_tFileInputExcel_1 += currentRows_tFileInputExcel_1;
                sheet_tFileInputExcel_1 = sheetList_tFileInputExcel_1.get(++sheetIndex_tFileInputExcel_1);
                currentRows_tFileInputExcel_1 = (sheet_tFileInputExcel_1.getLastRowNum()+1);
            }
            globalMap.put("tFileInputExcel_1_CURRENT_SHEET",sheet_tFileInputExcel_1.getSheetName());
            if (rowCount_tFileInputExcel_1 <= i_tFileInputExcel_1) {
                row_tFileInputExcel_1 = sheet_tFileInputExcel_1.getRow(i_tFileInputExcel_1 - rowCount_tFileInputExcel_1);
            }
		    row1 = null;
					int tempRowLength_tFileInputExcel_1 = 82;
				
				int columnIndex_tFileInputExcel_1 = 0;
			
			String[] temp_row_tFileInputExcel_1 = new String[tempRowLength_tFileInputExcel_1];
			int excel_end_column_tFileInputExcel_1;
			if(row_tFileInputExcel_1==null){
				excel_end_column_tFileInputExcel_1=0;
			}else{
				excel_end_column_tFileInputExcel_1=row_tFileInputExcel_1.getLastCellNum();
			}
			int actual_end_column_tFileInputExcel_1;
			if(end_column_tFileInputExcel_1 == -1){
				actual_end_column_tFileInputExcel_1 = excel_end_column_tFileInputExcel_1;
			}
			else{
				actual_end_column_tFileInputExcel_1 = end_column_tFileInputExcel_1 >	excel_end_column_tFileInputExcel_1 ? excel_end_column_tFileInputExcel_1 : end_column_tFileInputExcel_1;
			}
			org.apache.poi.ss.formula.eval.NumberEval ne_tFileInputExcel_1 = null;
			for(int i=0;i<tempRowLength_tFileInputExcel_1;i++){
				if(i + start_column_tFileInputExcel_1 < actual_end_column_tFileInputExcel_1){
					org.apache.poi.ss.usermodel.Cell cell_tFileInputExcel_1 = row_tFileInputExcel_1.getCell(i + start_column_tFileInputExcel_1);
					if(cell_tFileInputExcel_1!=null){
					switch (cell_tFileInputExcel_1.getCellType()) {
                        case STRING:
                            temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1.getRichStringCellValue().getString();
                            break;
                        case NUMERIC:
                            if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell_tFileInputExcel_1)) {
									temp_row_tFileInputExcel_1[i] =cell_tFileInputExcel_1.getDateCellValue().toString();
                            } else {
                                temp_row_tFileInputExcel_1[i] = df_tFileInputExcel_1.format(cell_tFileInputExcel_1.getNumericCellValue());
                            }
                            break;
                        case BOOLEAN:
                            temp_row_tFileInputExcel_1[i] =String.valueOf(cell_tFileInputExcel_1.getBooleanCellValue());
                            break;
                        case FORMULA:
        					switch (cell_tFileInputExcel_1.getCachedFormulaResultType()) {
                                case STRING:
                                    temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1.getRichStringCellValue().getString();
                                    break;
                                case NUMERIC:
                                    if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell_tFileInputExcel_1)) {
											temp_row_tFileInputExcel_1[i] =cell_tFileInputExcel_1.getDateCellValue().toString();
                                    } else {
	                                    ne_tFileInputExcel_1 = new org.apache.poi.ss.formula.eval.NumberEval(cell_tFileInputExcel_1.getNumericCellValue());
										temp_row_tFileInputExcel_1[i] = ne_tFileInputExcel_1.getStringValue();
                                    }
                                    break;
                                case BOOLEAN:
                                    temp_row_tFileInputExcel_1[i] =String.valueOf(cell_tFileInputExcel_1.getBooleanCellValue());
                                    break;
                                default:
                            		temp_row_tFileInputExcel_1[i] = "";
                            }
                            break;
                        default:
                            temp_row_tFileInputExcel_1[i] = "";
                        }
                	}
                	else{
                		temp_row_tFileInputExcel_1[i]="";
                	}

				}else{
					temp_row_tFileInputExcel_1[i]="";
				}
			}
			boolean whetherReject_tFileInputExcel_1 = false;
			row1 = new row1Struct();
			int curColNum_tFileInputExcel_1 = -1;
			String curColName_tFileInputExcel_1 = "";
			try{
							columnIndex_tFileInputExcel_1 = 0;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn";

				row1.newColumn = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 1;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn1";

				row1.newColumn1 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn1 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 2;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn2";

				row1.newColumn2 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn2 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 3;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn3";

				row1.newColumn3 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn3 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 4;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn4";

				row1.newColumn4 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn4 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 5;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn5";

				row1.newColumn5 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn5 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 6;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn6";

				row1.newColumn6 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn6 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 7;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn7";

				row1.newColumn7 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn7 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 8;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn8";

				row1.newColumn8 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn8 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 9;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn9";

				row1.newColumn9 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn9 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 10;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn10";

				row1.newColumn10 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn10 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 11;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn11";

				row1.newColumn11 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn11 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 12;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn12";

				row1.newColumn12 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn12 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 13;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn13";

				row1.newColumn13 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn13 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 14;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn14";

				row1.newColumn14 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn14 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 15;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn15";

				row1.newColumn15 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn15 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 16;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn16";

				row1.newColumn16 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn16 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 17;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn17";

				row1.newColumn17 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn17 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 18;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn18";

				row1.newColumn18 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn18 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 19;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn19";

				row1.newColumn19 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn19 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 20;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn20";

				row1.newColumn20 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn20 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 21;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn21";

				row1.newColumn21 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn21 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 22;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn22";

				row1.newColumn22 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn22 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 23;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn23";

				row1.newColumn23 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn23 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 24;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn24";

				row1.newColumn24 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn24 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 25;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn25";

				row1.newColumn25 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn25 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 26;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn26";

				row1.newColumn26 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn26 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 27;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn27";

				row1.newColumn27 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn27 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 28;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn28";

				row1.newColumn28 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn28 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 29;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn29";

				row1.newColumn29 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn29 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 30;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn30";

				row1.newColumn30 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn30 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 31;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn31";

				row1.newColumn31 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn31 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 32;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn32";

				row1.newColumn32 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn32 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 33;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn33";

				row1.newColumn33 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn33 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 34;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn34";

				row1.newColumn34 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn34 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 35;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn35";

				row1.newColumn35 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn35 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 36;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn36";

				row1.newColumn36 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn36 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 37;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn37";

				row1.newColumn37 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn37 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 38;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn38";

				row1.newColumn38 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn38 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 39;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn39";

				row1.newColumn39 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn39 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 40;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn40";

				row1.newColumn40 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn40 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 41;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn41";

				row1.newColumn41 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn41 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 42;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn42";

				row1.newColumn42 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn42 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 43;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn43";

				row1.newColumn43 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn43 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 44;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn44";

				row1.newColumn44 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn44 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 45;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn45";

				row1.newColumn45 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn45 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 46;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn46";

				row1.newColumn46 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn46 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 47;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn47";

				row1.newColumn47 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn47 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 48;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn48";

				row1.newColumn48 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn48 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 49;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn49";

				row1.newColumn49 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn49 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 50;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn50";

				row1.newColumn50 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn50 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 51;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn51";

				row1.newColumn51 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn51 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 52;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn52";

				row1.newColumn52 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn52 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 53;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn53";

				row1.newColumn53 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn53 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 54;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn54";

				row1.newColumn54 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn54 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 55;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn55";

				row1.newColumn55 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn55 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 56;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn56";

				row1.newColumn56 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn56 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 57;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn57";

				row1.newColumn57 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn57 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 58;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn58";

				row1.newColumn58 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn58 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 59;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn59";

				row1.newColumn59 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn59 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 60;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn60";

				row1.newColumn60 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn60 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 61;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn61";

				row1.newColumn61 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn61 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 62;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn62";

				row1.newColumn62 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn62 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 63;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn63";

				row1.newColumn63 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn63 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 64;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn64";

				row1.newColumn64 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn64 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 65;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn65";

				row1.newColumn65 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn65 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 66;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn66";

				row1.newColumn66 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn66 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 67;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn67";

				row1.newColumn67 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn67 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 68;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn68";

				row1.newColumn68 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn68 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 69;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn69";

				row1.newColumn69 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn69 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 70;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn70";

				row1.newColumn70 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn70 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 71;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn71";

				row1.newColumn71 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn71 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 72;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn72";

				row1.newColumn72 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn72 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 73;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn73";

				row1.newColumn73 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn73 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 74;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn74";

				row1.newColumn74 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn74 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 75;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn75";

				row1.newColumn75 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn75 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 76;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn76";

				row1.newColumn76 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn76 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 77;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn77";

				row1.newColumn77 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn77 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 78;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn78";

				row1.newColumn78 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn78 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 79;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn79";

				row1.newColumn79 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn79 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 80;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn80";

				row1.newColumn80 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn80 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 81;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn81";

				row1.newColumn81 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn81 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}

				nb_line_tFileInputExcel_1++;
				
			}catch(java.lang.Exception e){
			whetherReject_tFileInputExcel_1 = true;
					 System.err.println(e.getMessage());
					 row1 = null;
			}


		



 



/**
 * [tFileInputExcel_1 begin ] stop
 */
	
	/**
	 * [tFileInputExcel_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_1";

	

 


	tos_count_tFileInputExcel_1++;

/**
 * [tFileInputExcel_1 main ] stop
 */
	
	/**
	 * [tFileInputExcel_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_1";

	

 



/**
 * [tFileInputExcel_1 process_data_begin ] stop
 */
// Start of branch "row1"
if(row1 != null) { 



	
	/**
	 * [tJavaRow_1 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row1");
					}
					

    // code sample:
//
// multiply by 2 the row identifier
// row2.id = row1.id * 2;
//
// lowercase the name
// row2.name = row1.name.toLowerCase();

Map<String, String> fieldMap = (Map<String, String>)globalMap.get("fieldMap");

for( Field f : row1.getClass().getFields() ) {
	if (f.get(row1) != null)
	{
		fieldMap.put((String)f.get(row1), f.getName());
		System.out.println( f.getName());
	}
   
}


row2.ExcelSchema = fieldMap;
    nb_line_tJavaRow_1++;   

 


	tos_count_tJavaRow_1++;

/**
 * [tJavaRow_1 main ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 process_data_begin ] stop
 */

	
	/**
	 * [tLogRow_1 main ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row2");
					}
					
///////////////////////		
						

				
				String[] row_tLogRow_1 = new String[1];
   				
	    		if(row2.ExcelSchema != null) { //              
                 row_tLogRow_1[0]=    						    
				                String.valueOf(row2.ExcelSchema)			
					          ;	
							
	    		} //			
    			 

				util_tLogRow_1.addRow(row_tLogRow_1);	
				nb_line_tLogRow_1++;
//////

//////                    
                    
///////////////////////    			

 
     row4 = row2;


	tos_count_tLogRow_1++;

/**
 * [tLogRow_1 main ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_2 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row4");
					}
					

    // code sample:
//
// multiply by 2 the row identifier
// output_row.id = row4.id * 2;
//
// lowercase the name
// output_row.name = row4.name.toLowerCase();


Map<String, String> fieldsMap = (Map<String, String>)globalMap.get("fieldMap");

if (fieldsMap.get("BRAND") == null) 
{
	context.ErrorHeader += "Column BRAND not found \n";
	context.hasErrorHeader = true;
}

if (fieldsMap.get("SEASON") == null) 
{
	context.ErrorHeader += "Column SEASON not found \n";
	context.hasErrorHeader = true;
}
if (fieldsMap.get("CATEGORY") == null) 
{
	context.ErrorHeader += "Column CATEGORY not found \n";
	context.hasErrorHeader = true;
}
if (fieldsMap.get("REF") == null) 
{
	context.ErrorHeader += "Column REF not found \n";
	context.hasErrorHeader = true;
}
if (fieldsMap.get("DESCRIPTION") == null) 
{
	context.ErrorHeader += "Column DESCRIPTION not found \n";
	context.hasErrorHeader = true;
}
if (fieldsMap.get("STYLE") == null) 
{
	context.ErrorHeader += "Column STYLE not found \n";
	context.hasErrorHeader = true;
}
if (fieldsMap.get("COLOR") == null) 
{
	context.ErrorHeader += "Column COLOR not found \n";
	context.hasErrorHeader = true;
}
if (fieldsMap.get("COLOR NAME") == null) 
{
	context.ErrorHeader += "Column COLOR NAME not found \n";
	context.hasErrorHeader = true;
}
if (fieldsMap.get("LBL") == null) 
{
	context.ErrorHeader += "Column LBL not found \n";
	context.hasErrorHeader = true;
}
if (fieldsMap.get("STYLE-COLOR") == null) 
{
	context.ErrorHeader += "Column STYLE-COLOR not found \n";
	context.hasErrorHeader = true;
}
if (fieldsMap.get("STYLE-COLOR-LABEL") == null) 
{
	context.ErrorHeader += "Column STYLE-COLOR-LABEL not found \n";
	context.hasErrorHeader = true;
}
if (fieldsMap.get("GENDER") == null) 
{
	context.ErrorHeader += "Column GENDER not found \n";
	context.hasErrorHeader = true;
}
if (fieldsMap.get("AGE RANGE") == null) 
{
	context.ErrorHeader += "Column AGE RANGE not found \n";
	context.hasErrorHeader = true;
}
if (fieldsMap.get("SIZE RANGE") == null) 
{
	context.ErrorHeader += "Column SIZE RANGE not found \n";
	context.hasErrorHeader = true;
}
if (fieldsMap.get("SIZE") == null) 
{
	context.ErrorHeader += "Column SIZE not found \n";
	context.hasErrorHeader = true;
}
if (fieldsMap.get("US SIZE") == null) 
{
	context.ErrorHeader += "Column US SIZE not found \n";
	context.hasErrorHeader = true;
}
if (fieldsMap.get("CM SIZE") == null) 
{
	context.ErrorHeader += "Column CM SIZE not found \n";
	context.hasErrorHeader = true;
}
if (fieldsMap.get("PRODUCT") == null) 
{
	context.ErrorHeader += "Column PRODUCT not found \n";
	context.hasErrorHeader = true;
}
if (fieldsMap.get("FASHION") == null) 
{
	context.ErrorHeader += "Column FASHION not found \n";
	context.hasErrorHeader = true;
}
if (fieldsMap.get("PRODUCT STATUS") == null) 
{
	context.ErrorHeader += "Column PRODUCT STATUS not found \n";
	context.hasErrorHeader = true;
}
if (fieldsMap.get("PRODUCT TIER") == null) 
{
	context.ErrorHeader += "Column PRODUCT TIER not found \n";
	context.hasErrorHeader = true;
}
if (fieldsMap.get("ACCT EXCLUS") == null) 
{
	context.ErrorHeader += "Column ACCT EXCLUS not found \n";
	context.hasErrorHeader = true;
}
if (fieldsMap.get("% SIZE RATIO SPLIT") == null) 
{
	context.ErrorHeader += "Column % SIZE RATIO SPLIT not found \n";
	context.hasErrorHeader = true;
}
if (fieldsMap.get("CARTON QTY") == null) 
{
	context.ErrorHeader += "Column CARTON QTY not found \n";
	context.hasErrorHeader = true;
}
if (fieldsMap.get("ATTRIBUT") == null) 
{
	context.ErrorHeader += "Column ATTRIBUT not found \n";
	context.hasErrorHeader = true;
}
if (fieldsMap.get("UNITS") == null) 
{
	context.ErrorHeader += "Column UNITS not found \n";
	context.hasErrorHeader = true;
}
if (fieldsMap.get("EUR RRP") == null) 
{
	context.ErrorHeader += "Column EUR RRP not found \n";
	context.hasErrorHeader = true;
}
if (fieldsMap.get("EUR WSP") == null) 
{
	context.ErrorHeader += "Column EUR WSP not found \n";
	context.hasErrorHeader = true;
}
if (fieldsMap.get("GBP RRP") == null) 
{
	context.ErrorHeader += "Column EUR GBP not found \n";
	context.hasErrorHeader = true;
}
if (fieldsMap.get("GBP WSP") == null) 
{
	context.ErrorHeader += "Column GBP WSP not found \n";
	context.hasErrorHeader = true;
}
if (fieldsMap.get("CHF RRP") == null) 
{
	context.ErrorHeader += "Column CHF RRP not found \n";
	context.hasErrorHeader = true;
}
if (fieldsMap.get("CHF WSP") == null) 
{
	context.ErrorHeader += "Column CHF WSP not found \n";
	context.hasErrorHeader = true;
}
if (fieldsMap.get("NOK RRP") == null) 
{
	context.ErrorHeader += "Column NOK RRP not found \n";
	context.hasErrorHeader = true;
}
if (fieldsMap.get("NOK WSP") == null) 
{
	context.ErrorHeader += "Column NOK WSP not found \n";
	context.hasErrorHeader = true;
}
if (fieldsMap.get("DKK RRP") == null) 
{
	context.ErrorHeader += "Column DKK RRP not found \n";
	context.hasErrorHeader = true;
}
if (fieldsMap.get("DKK WSP") == null) 
{
	context.ErrorHeader += "Column DKK WSP not found \n";
	context.hasErrorHeader = true;
}
if (fieldsMap.get("SEK RRP") == null) 
{
	context.ErrorHeader += "Column SEK RRP not found \n";
	context.hasErrorHeader = true;
}
if (fieldsMap.get("SEK WSP") == null) 
{
	context.ErrorHeader += "Column SEK WSP not found \n";
	context.hasErrorHeader = true;
}
if (fieldsMap.get("EURO (FINN) RRP") == null) 
{
	context.ErrorHeader += "Column EURO (FINN) RRP not found \n";
	context.hasErrorHeader = true;
}
if (fieldsMap.get("EURO (FINN) WSP") == null) 
{
	context.ErrorHeader += "Column EURO (FINN) WSP not found \n";
	context.hasErrorHeader = true;
}
if (fieldsMap.get("FABRICATION") == null) 
{
	context.ErrorHeader += "Column FABRICATION not found \n";
	context.hasErrorHeader = true;
}
if (fieldsMap.get("COO") == null) 
{
	context.ErrorHeader += "Column COO not found \n";
	context.hasErrorHeader = true;
}
if (fieldsMap.get("UPC") == null) 
{
	context.ErrorHeader += "Column UPC not found \n";
	context.hasErrorHeader = true;
}
if (fieldsMap.get("CUSTOM TARIFF CODE") == null) 
{
	context.ErrorHeader += "Column CUSTOM TARIFF CODE not found \n";
	context.hasErrorHeader = true;
}
if (fieldsMap.get("SMU TYPE") == null) 
{
	context.ErrorHeader += "Column SMU TYPE not found \n";
	context.hasErrorHeader = true;
}
if (fieldsMap.get("REC SIZE SPLIT") == null) 
{
	context.ErrorHeader += "Column REC SIZE SPLIT not found \n";
	context.hasErrorHeader = true;
}
if (fieldsMap.get("EAN") == null) 
{
	context.ErrorHeader += "Column EAN not found \n";
	context.hasErrorHeader = true;
}
System.out.print(context.ErrorHeader);
    nb_line_tJavaRow_2++;   

 


	tos_count_tJavaRow_2++;

/**
 * [tJavaRow_2 main ] stop
 */
	
	/**
	 * [tJavaRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";

	

 



/**
 * [tJavaRow_2 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";

	

 



/**
 * [tJavaRow_2 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 process_data_end ] stop
 */

} // End of branch "row1"




	
	/**
	 * [tFileInputExcel_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_1";

	

 



/**
 * [tFileInputExcel_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputExcel_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_1";

	

			}
			
			
			
			globalMap.put("tFileInputExcel_1_NB_LINE",nb_line_tFileInputExcel_1);
			
				}
			
		} finally { 
				
  				if(!(source_tFileInputExcel_1 instanceof java.io.InputStream)){
  					workbook_tFileInputExcel_1.getPackage().revert();
  				}
				
		}	
		
 

ok_Hash.put("tFileInputExcel_1", true);
end_Hash.put("tFileInputExcel_1", System.currentTimeMillis());

   			if (context.hasErrorHeader == false) {
   				
					if(execStat){   
   	 					runStat.updateStatOnConnection("No_Error", 0, "true");
					}
				
    			tFileInputExcel_2Process(globalMap);
   			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("No_Error", 0, "false");
					}   	 
   				}
   			if (context.hasErrorHeader == true) {
   				
					if(execStat){   
   	 					runStat.updateStatOnConnection("If1", 0, "true");
					}
				
    			tJavaFlex_1Process(globalMap);
   			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If1", 0, "false");
					}   	 
   				}



/**
 * [tFileInputExcel_1 end ] stop
 */

	
	/**
	 * [tJavaRow_1 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

globalMap.put("tJavaRow_1_NB_LINE",nb_line_tJavaRow_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tJavaRow_1", true);
end_Hash.put("tJavaRow_1", System.currentTimeMillis());




/**
 * [tJavaRow_1 end ] stop
 */

	
	/**
	 * [tLogRow_1 end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_1 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_1);
                    }
                    
                    consoleOut_tLogRow_1.println(util_tLogRow_1.format().toString());
                    consoleOut_tLogRow_1.flush();
//////
globalMap.put("tLogRow_1_NB_LINE",nb_line_tLogRow_1);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tLogRow_1", true);
end_Hash.put("tLogRow_1", System.currentTimeMillis());




/**
 * [tLogRow_1 end ] stop
 */

	
	/**
	 * [tJavaRow_2 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";

	

globalMap.put("tJavaRow_2_NB_LINE",nb_line_tJavaRow_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tJavaRow_2", true);
end_Hash.put("tJavaRow_2", System.currentTimeMillis());




/**
 * [tJavaRow_2 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputExcel_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_1";

	

 



/**
 * [tFileInputExcel_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 finally ] stop
 */

	
	/**
	 * [tLogRow_1 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_2 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";

	

 



/**
 * [tJavaRow_2 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", 1);
	}
	


public static class sortie_errorStruct implements routines.system.IPersistableRow<sortie_errorStruct> {
    final static byte[] commonByteArrayLock_DEV_BUY_VALIDATION = new byte[0];
    static byte[] commonByteArray_DEV_BUY_VALIDATION = new byte[0];

	
			    public Integer LINE_NUMBER;

				public Integer getLINE_NUMBER () {
					return this.LINE_NUMBER;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String BRAND_NOT_FOUND;

				public String getBRAND_NOT_FOUND () {
					return this.BRAND_NOT_FOUND;
				}
				
			    public String SEASON_NOT_FOUND;

				public String getSEASON_NOT_FOUND () {
					return this.SEASON_NOT_FOUND;
				}
				
			    public String COLOR_NOT_FOUND;

				public String getCOLOR_NOT_FOUND () {
					return this.COLOR_NOT_FOUND;
				}
				
			    public String CATEGORY_NOT_FOUND;

				public String getCATEGORY_NOT_FOUND () {
					return this.CATEGORY_NOT_FOUND;
				}
				
			    public String REF_NOT_FOUND;

				public String getREF_NOT_FOUND () {
					return this.REF_NOT_FOUND;
				}
				
			    public String DESCRIPTION_NOT_FOUND;

				public String getDESCRIPTION_NOT_FOUND () {
					return this.DESCRIPTION_NOT_FOUND;
				}
				
			    public String STYLE_NOT_FOUND;

				public String getSTYLE_NOT_FOUND () {
					return this.STYLE_NOT_FOUND;
				}
				
			    public String COLOR_NAME_NOT_FOUND;

				public String getCOLOR_NAME_NOT_FOUND () {
					return this.COLOR_NAME_NOT_FOUND;
				}
				
			    public String LBL_NOT_FOUND;

				public String getLBL_NOT_FOUND () {
					return this.LBL_NOT_FOUND;
				}
				
			    public String STYLE_COLOR_NOT_FOUND;

				public String getSTYLE_COLOR_NOT_FOUND () {
					return this.STYLE_COLOR_NOT_FOUND;
				}
				
			    public String STYLECOLORLABEL_NOT_FOUND;

				public String getSTYLECOLORLABEL_NOT_FOUND () {
					return this.STYLECOLORLABEL_NOT_FOUND;
				}
				
			    public String GENDER_NOT_FOUND;

				public String getGENDER_NOT_FOUND () {
					return this.GENDER_NOT_FOUND;
				}
				
			    public String AGE_RANGE_NOT_FOUND;

				public String getAGE_RANGE_NOT_FOUND () {
					return this.AGE_RANGE_NOT_FOUND;
				}
				
			    public String SIZE_RANGE_NOT_FOUND;

				public String getSIZE_RANGE_NOT_FOUND () {
					return this.SIZE_RANGE_NOT_FOUND;
				}
				
			    public String SIZE_NOT_FOUND;

				public String getSIZE_NOT_FOUND () {
					return this.SIZE_NOT_FOUND;
				}
				
			    public String US_SIZE_NOT_FOUND;

				public String getUS_SIZE_NOT_FOUND () {
					return this.US_SIZE_NOT_FOUND;
				}
				
			    public String PRODUCT_NOT_FOUND;

				public String getPRODUCT_NOT_FOUND () {
					return this.PRODUCT_NOT_FOUND;
				}
				
			    public String FASHION_NOT_FOUND;

				public String getFASHION_NOT_FOUND () {
					return this.FASHION_NOT_FOUND;
				}
				
			    public String PRODUCT_STATUS_NOT_FOUND;

				public String getPRODUCT_STATUS_NOT_FOUND () {
					return this.PRODUCT_STATUS_NOT_FOUND;
				}
				
			    public String PRODUCT_TIER_NOT_FOUND;

				public String getPRODUCT_TIER_NOT_FOUND () {
					return this.PRODUCT_TIER_NOT_FOUND;
				}
				
			    public String SIZE_RATIO_SPLIT_NOT_FOUND;

				public String getSIZE_RATIO_SPLIT_NOT_FOUND () {
					return this.SIZE_RATIO_SPLIT_NOT_FOUND;
				}
				
			    public String ATTRIBUTE_NOT_FOUND;

				public String getATTRIBUTE_NOT_FOUND () {
					return this.ATTRIBUTE_NOT_FOUND;
				}
				
			    public String UNITS_NOT_FOUND;

				public String getUNITS_NOT_FOUND () {
					return this.UNITS_NOT_FOUND;
				}
				
			    public String COO_NOT_FOUND;

				public String getCOO_NOT_FOUND () {
					return this.COO_NOT_FOUND;
				}
				
			    public String EUR_RRP_NOT_FOUND;

				public String getEUR_RRP_NOT_FOUND () {
					return this.EUR_RRP_NOT_FOUND;
				}
				
			    public String GBP_RRP_WSP_NOT_FOUND;

				public String getGBP_RRP_WSP_NOT_FOUND () {
					return this.GBP_RRP_WSP_NOT_FOUND;
				}
				
			    public String CHF_RRP_WSP_NOT_FOUND;

				public String getCHF_RRP_WSP_NOT_FOUND () {
					return this.CHF_RRP_WSP_NOT_FOUND;
				}
				
			    public String NOK_RRP_WSP_NOT_FOUND;

				public String getNOK_RRP_WSP_NOT_FOUND () {
					return this.NOK_RRP_WSP_NOT_FOUND;
				}
				
			    public String DKK_RRP_WSP_NOT_FOUND;

				public String getDKK_RRP_WSP_NOT_FOUND () {
					return this.DKK_RRP_WSP_NOT_FOUND;
				}
				
			    public String SEK_RRP_WSP_NOT_FOUND;

				public String getSEK_RRP_WSP_NOT_FOUND () {
					return this.SEK_RRP_WSP_NOT_FOUND;
				}
				
			    public String EUR_FINN_RRP_WSP_NOT_FOUND;

				public String getEUR_FINN_RRP_WSP_NOT_FOUND () {
					return this.EUR_FINN_RRP_WSP_NOT_FOUND;
				}
				
			    public String CM_SIZE_NOT_FOUND;

				public String getCM_SIZE_NOT_FOUND () {
					return this.CM_SIZE_NOT_FOUND;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_BUY_VALIDATION.length) {
				if(length < 1024 && commonByteArray_DEV_BUY_VALIDATION.length == 0) {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[1024];
				} else {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_BUY_VALIDATION, 0, length);
			strReturn = new String(commonByteArray_DEV_BUY_VALIDATION, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_BUY_VALIDATION) {

        	try {

        		int length = 0;
		
						this.LINE_NUMBER = readInteger(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.BRAND_NOT_FOUND = readString(dis);
					
					this.SEASON_NOT_FOUND = readString(dis);
					
					this.COLOR_NOT_FOUND = readString(dis);
					
					this.CATEGORY_NOT_FOUND = readString(dis);
					
					this.REF_NOT_FOUND = readString(dis);
					
					this.DESCRIPTION_NOT_FOUND = readString(dis);
					
					this.STYLE_NOT_FOUND = readString(dis);
					
					this.COLOR_NAME_NOT_FOUND = readString(dis);
					
					this.LBL_NOT_FOUND = readString(dis);
					
					this.STYLE_COLOR_NOT_FOUND = readString(dis);
					
					this.STYLECOLORLABEL_NOT_FOUND = readString(dis);
					
					this.GENDER_NOT_FOUND = readString(dis);
					
					this.AGE_RANGE_NOT_FOUND = readString(dis);
					
					this.SIZE_RANGE_NOT_FOUND = readString(dis);
					
					this.SIZE_NOT_FOUND = readString(dis);
					
					this.US_SIZE_NOT_FOUND = readString(dis);
					
					this.PRODUCT_NOT_FOUND = readString(dis);
					
					this.FASHION_NOT_FOUND = readString(dis);
					
					this.PRODUCT_STATUS_NOT_FOUND = readString(dis);
					
					this.PRODUCT_TIER_NOT_FOUND = readString(dis);
					
					this.SIZE_RATIO_SPLIT_NOT_FOUND = readString(dis);
					
					this.ATTRIBUTE_NOT_FOUND = readString(dis);
					
					this.UNITS_NOT_FOUND = readString(dis);
					
					this.COO_NOT_FOUND = readString(dis);
					
					this.EUR_RRP_NOT_FOUND = readString(dis);
					
					this.GBP_RRP_WSP_NOT_FOUND = readString(dis);
					
					this.CHF_RRP_WSP_NOT_FOUND = readString(dis);
					
					this.NOK_RRP_WSP_NOT_FOUND = readString(dis);
					
					this.DKK_RRP_WSP_NOT_FOUND = readString(dis);
					
					this.SEK_RRP_WSP_NOT_FOUND = readString(dis);
					
					this.EUR_FINN_RRP_WSP_NOT_FOUND = readString(dis);
					
					this.CM_SIZE_NOT_FOUND = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.LINE_NUMBER,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.BRAND_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SEASON_NOT_FOUND,dos);
					
					// String
				
						writeString(this.COLOR_NOT_FOUND,dos);
					
					// String
				
						writeString(this.CATEGORY_NOT_FOUND,dos);
					
					// String
				
						writeString(this.REF_NOT_FOUND,dos);
					
					// String
				
						writeString(this.DESCRIPTION_NOT_FOUND,dos);
					
					// String
				
						writeString(this.STYLE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.COLOR_NAME_NOT_FOUND,dos);
					
					// String
				
						writeString(this.LBL_NOT_FOUND,dos);
					
					// String
				
						writeString(this.STYLE_COLOR_NOT_FOUND,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL_NOT_FOUND,dos);
					
					// String
				
						writeString(this.GENDER_NOT_FOUND,dos);
					
					// String
				
						writeString(this.AGE_RANGE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SIZE_RANGE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SIZE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.US_SIZE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.PRODUCT_NOT_FOUND,dos);
					
					// String
				
						writeString(this.FASHION_NOT_FOUND,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS_NOT_FOUND,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT_NOT_FOUND,dos);
					
					// String
				
						writeString(this.ATTRIBUTE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.UNITS_NOT_FOUND,dos);
					
					// String
				
						writeString(this.COO_NOT_FOUND,dos);
					
					// String
				
						writeString(this.EUR_RRP_NOT_FOUND,dos);
					
					// String
				
						writeString(this.GBP_RRP_WSP_NOT_FOUND,dos);
					
					// String
				
						writeString(this.CHF_RRP_WSP_NOT_FOUND,dos);
					
					// String
				
						writeString(this.NOK_RRP_WSP_NOT_FOUND,dos);
					
					// String
				
						writeString(this.DKK_RRP_WSP_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SEK_RRP_WSP_NOT_FOUND,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP_WSP_NOT_FOUND,dos);
					
					// String
				
						writeString(this.CM_SIZE_NOT_FOUND,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("LINE_NUMBER="+String.valueOf(LINE_NUMBER));
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",BRAND_NOT_FOUND="+BRAND_NOT_FOUND);
		sb.append(",SEASON_NOT_FOUND="+SEASON_NOT_FOUND);
		sb.append(",COLOR_NOT_FOUND="+COLOR_NOT_FOUND);
		sb.append(",CATEGORY_NOT_FOUND="+CATEGORY_NOT_FOUND);
		sb.append(",REF_NOT_FOUND="+REF_NOT_FOUND);
		sb.append(",DESCRIPTION_NOT_FOUND="+DESCRIPTION_NOT_FOUND);
		sb.append(",STYLE_NOT_FOUND="+STYLE_NOT_FOUND);
		sb.append(",COLOR_NAME_NOT_FOUND="+COLOR_NAME_NOT_FOUND);
		sb.append(",LBL_NOT_FOUND="+LBL_NOT_FOUND);
		sb.append(",STYLE_COLOR_NOT_FOUND="+STYLE_COLOR_NOT_FOUND);
		sb.append(",STYLECOLORLABEL_NOT_FOUND="+STYLECOLORLABEL_NOT_FOUND);
		sb.append(",GENDER_NOT_FOUND="+GENDER_NOT_FOUND);
		sb.append(",AGE_RANGE_NOT_FOUND="+AGE_RANGE_NOT_FOUND);
		sb.append(",SIZE_RANGE_NOT_FOUND="+SIZE_RANGE_NOT_FOUND);
		sb.append(",SIZE_NOT_FOUND="+SIZE_NOT_FOUND);
		sb.append(",US_SIZE_NOT_FOUND="+US_SIZE_NOT_FOUND);
		sb.append(",PRODUCT_NOT_FOUND="+PRODUCT_NOT_FOUND);
		sb.append(",FASHION_NOT_FOUND="+FASHION_NOT_FOUND);
		sb.append(",PRODUCT_STATUS_NOT_FOUND="+PRODUCT_STATUS_NOT_FOUND);
		sb.append(",PRODUCT_TIER_NOT_FOUND="+PRODUCT_TIER_NOT_FOUND);
		sb.append(",SIZE_RATIO_SPLIT_NOT_FOUND="+SIZE_RATIO_SPLIT_NOT_FOUND);
		sb.append(",ATTRIBUTE_NOT_FOUND="+ATTRIBUTE_NOT_FOUND);
		sb.append(",UNITS_NOT_FOUND="+UNITS_NOT_FOUND);
		sb.append(",COO_NOT_FOUND="+COO_NOT_FOUND);
		sb.append(",EUR_RRP_NOT_FOUND="+EUR_RRP_NOT_FOUND);
		sb.append(",GBP_RRP_WSP_NOT_FOUND="+GBP_RRP_WSP_NOT_FOUND);
		sb.append(",CHF_RRP_WSP_NOT_FOUND="+CHF_RRP_WSP_NOT_FOUND);
		sb.append(",NOK_RRP_WSP_NOT_FOUND="+NOK_RRP_WSP_NOT_FOUND);
		sb.append(",DKK_RRP_WSP_NOT_FOUND="+DKK_RRP_WSP_NOT_FOUND);
		sb.append(",SEK_RRP_WSP_NOT_FOUND="+SEK_RRP_WSP_NOT_FOUND);
		sb.append(",EUR_FINN_RRP_WSP_NOT_FOUND="+EUR_FINN_RRP_WSP_NOT_FOUND);
		sb.append(",CM_SIZE_NOT_FOUND="+CM_SIZE_NOT_FOUND);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_errorStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_DEV_BUY_VALIDATION = new byte[0];
    static byte[] commonByteArray_DEV_BUY_VALIDATION = new byte[0];

	
			    public Integer LINE_NUMBER;

				public Integer getLINE_NUMBER () {
					return this.LINE_NUMBER;
				}
				
			    public String DYNAMICS_COLOR;

				public String getDYNAMICS_COLOR () {
					return this.DYNAMICS_COLOR;
				}
				
			    public String DYNAMICS_BRAND;

				public String getDYNAMICS_BRAND () {
					return this.DYNAMICS_BRAND;
				}
				
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				
			    public String BRAND_NOT_FOUND;

				public String getBRAND_NOT_FOUND () {
					return this.BRAND_NOT_FOUND;
				}
				
			    public String SEASON_NOT_FOUND;

				public String getSEASON_NOT_FOUND () {
					return this.SEASON_NOT_FOUND;
				}
				
			    public String COLOR_NOT_FOUND;

				public String getCOLOR_NOT_FOUND () {
					return this.COLOR_NOT_FOUND;
				}
				
			    public String CATEGORY_NOT_FOUND;

				public String getCATEGORY_NOT_FOUND () {
					return this.CATEGORY_NOT_FOUND;
				}
				
			    public String REF_NOT_FOUND;

				public String getREF_NOT_FOUND () {
					return this.REF_NOT_FOUND;
				}
				
			    public String DESCRIPTION_NOT_FOUND;

				public String getDESCRIPTION_NOT_FOUND () {
					return this.DESCRIPTION_NOT_FOUND;
				}
				
			    public String STYLE_NOT_FOUND;

				public String getSTYLE_NOT_FOUND () {
					return this.STYLE_NOT_FOUND;
				}
				
			    public String COLOR_NAME_NOT_FOUND;

				public String getCOLOR_NAME_NOT_FOUND () {
					return this.COLOR_NAME_NOT_FOUND;
				}
				
			    public String LBL_NOT_FOUND;

				public String getLBL_NOT_FOUND () {
					return this.LBL_NOT_FOUND;
				}
				
			    public String STYLE_COLOR_NOT_FOUND;

				public String getSTYLE_COLOR_NOT_FOUND () {
					return this.STYLE_COLOR_NOT_FOUND;
				}
				
			    public String STYLECOLORLABEL_NOT_FOUND;

				public String getSTYLECOLORLABEL_NOT_FOUND () {
					return this.STYLECOLORLABEL_NOT_FOUND;
				}
				
			    public String GENDER_NOT_FOUND;

				public String getGENDER_NOT_FOUND () {
					return this.GENDER_NOT_FOUND;
				}
				
			    public String AGE_RANGE_NOT_FOUND;

				public String getAGE_RANGE_NOT_FOUND () {
					return this.AGE_RANGE_NOT_FOUND;
				}
				
			    public String SIZE_RANGE_NOT_FOUND;

				public String getSIZE_RANGE_NOT_FOUND () {
					return this.SIZE_RANGE_NOT_FOUND;
				}
				
			    public String SIZE_NOT_FOUND;

				public String getSIZE_NOT_FOUND () {
					return this.SIZE_NOT_FOUND;
				}
				
			    public String US_SIZE_NOT_FOUND;

				public String getUS_SIZE_NOT_FOUND () {
					return this.US_SIZE_NOT_FOUND;
				}
				
			    public String PRODUCT_NOT_FOUND;

				public String getPRODUCT_NOT_FOUND () {
					return this.PRODUCT_NOT_FOUND;
				}
				
			    public String FASHION_NOT_FOUND;

				public String getFASHION_NOT_FOUND () {
					return this.FASHION_NOT_FOUND;
				}
				
			    public String PRODUCT_STATUS_NOT_FOUND;

				public String getPRODUCT_STATUS_NOT_FOUND () {
					return this.PRODUCT_STATUS_NOT_FOUND;
				}
				
			    public String PRODUCT_TIER_NOT_FOUND;

				public String getPRODUCT_TIER_NOT_FOUND () {
					return this.PRODUCT_TIER_NOT_FOUND;
				}
				
			    public String SIZE_RATIO_SPLIT_NOT_FOUND;

				public String getSIZE_RATIO_SPLIT_NOT_FOUND () {
					return this.SIZE_RATIO_SPLIT_NOT_FOUND;
				}
				
			    public String ATTRIBUTE_NOT_FOUND;

				public String getATTRIBUTE_NOT_FOUND () {
					return this.ATTRIBUTE_NOT_FOUND;
				}
				
			    public String UNITS_NOT_FOUND;

				public String getUNITS_NOT_FOUND () {
					return this.UNITS_NOT_FOUND;
				}
				
			    public String COO_NOT_FOUND;

				public String getCOO_NOT_FOUND () {
					return this.COO_NOT_FOUND;
				}
				
			    public String EUR_RRP_WSP_NOT_FOUND;

				public String getEUR_RRP_WSP_NOT_FOUND () {
					return this.EUR_RRP_WSP_NOT_FOUND;
				}
				
			    public String GBP_RRP_WSP_NOT_FOUND;

				public String getGBP_RRP_WSP_NOT_FOUND () {
					return this.GBP_RRP_WSP_NOT_FOUND;
				}
				
			    public String CHF_RRP_WSP_NOT_FOUND;

				public String getCHF_RRP_WSP_NOT_FOUND () {
					return this.CHF_RRP_WSP_NOT_FOUND;
				}
				
			    public String NOK_RRP_WSP_NOT_FOUND;

				public String getNOK_RRP_WSP_NOT_FOUND () {
					return this.NOK_RRP_WSP_NOT_FOUND;
				}
				
			    public String DKK_RRP_WSP_NOT_FOUND;

				public String getDKK_RRP_WSP_NOT_FOUND () {
					return this.DKK_RRP_WSP_NOT_FOUND;
				}
				
			    public String SEK_RRP_WSP_NOT_FOUND;

				public String getSEK_RRP_WSP_NOT_FOUND () {
					return this.SEK_RRP_WSP_NOT_FOUND;
				}
				
			    public String EUR_FINN_RRP_WSP_NOT_FOUND;

				public String getEUR_FINN_RRP_WSP_NOT_FOUND () {
					return this.EUR_FINN_RRP_WSP_NOT_FOUND;
				}
				
			    public String CM_SIZE_NOT_FOUND;

				public String getCM_SIZE_NOT_FOUND () {
					return this.CM_SIZE_NOT_FOUND;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_BUY_VALIDATION.length) {
				if(length < 1024 && commonByteArray_DEV_BUY_VALIDATION.length == 0) {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[1024];
				} else {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_BUY_VALIDATION, 0, length);
			strReturn = new String(commonByteArray_DEV_BUY_VALIDATION, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_BUY_VALIDATION) {

        	try {

        		int length = 0;
		
						this.LINE_NUMBER = readInteger(dis);
					
					this.DYNAMICS_COLOR = readString(dis);
					
					this.DYNAMICS_BRAND = readString(dis);
					
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
					this.BRAND_NOT_FOUND = readString(dis);
					
					this.SEASON_NOT_FOUND = readString(dis);
					
					this.COLOR_NOT_FOUND = readString(dis);
					
					this.CATEGORY_NOT_FOUND = readString(dis);
					
					this.REF_NOT_FOUND = readString(dis);
					
					this.DESCRIPTION_NOT_FOUND = readString(dis);
					
					this.STYLE_NOT_FOUND = readString(dis);
					
					this.COLOR_NAME_NOT_FOUND = readString(dis);
					
					this.LBL_NOT_FOUND = readString(dis);
					
					this.STYLE_COLOR_NOT_FOUND = readString(dis);
					
					this.STYLECOLORLABEL_NOT_FOUND = readString(dis);
					
					this.GENDER_NOT_FOUND = readString(dis);
					
					this.AGE_RANGE_NOT_FOUND = readString(dis);
					
					this.SIZE_RANGE_NOT_FOUND = readString(dis);
					
					this.SIZE_NOT_FOUND = readString(dis);
					
					this.US_SIZE_NOT_FOUND = readString(dis);
					
					this.PRODUCT_NOT_FOUND = readString(dis);
					
					this.FASHION_NOT_FOUND = readString(dis);
					
					this.PRODUCT_STATUS_NOT_FOUND = readString(dis);
					
					this.PRODUCT_TIER_NOT_FOUND = readString(dis);
					
					this.SIZE_RATIO_SPLIT_NOT_FOUND = readString(dis);
					
					this.ATTRIBUTE_NOT_FOUND = readString(dis);
					
					this.UNITS_NOT_FOUND = readString(dis);
					
					this.COO_NOT_FOUND = readString(dis);
					
					this.EUR_RRP_WSP_NOT_FOUND = readString(dis);
					
					this.GBP_RRP_WSP_NOT_FOUND = readString(dis);
					
					this.CHF_RRP_WSP_NOT_FOUND = readString(dis);
					
					this.NOK_RRP_WSP_NOT_FOUND = readString(dis);
					
					this.DKK_RRP_WSP_NOT_FOUND = readString(dis);
					
					this.SEK_RRP_WSP_NOT_FOUND = readString(dis);
					
					this.EUR_FINN_RRP_WSP_NOT_FOUND = readString(dis);
					
					this.CM_SIZE_NOT_FOUND = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.LINE_NUMBER,dos);
					
					// String
				
						writeString(this.DYNAMICS_COLOR,dos);
					
					// String
				
						writeString(this.DYNAMICS_BRAND,dos);
					
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
					// String
				
						writeString(this.BRAND_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SEASON_NOT_FOUND,dos);
					
					// String
				
						writeString(this.COLOR_NOT_FOUND,dos);
					
					// String
				
						writeString(this.CATEGORY_NOT_FOUND,dos);
					
					// String
				
						writeString(this.REF_NOT_FOUND,dos);
					
					// String
				
						writeString(this.DESCRIPTION_NOT_FOUND,dos);
					
					// String
				
						writeString(this.STYLE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.COLOR_NAME_NOT_FOUND,dos);
					
					// String
				
						writeString(this.LBL_NOT_FOUND,dos);
					
					// String
				
						writeString(this.STYLE_COLOR_NOT_FOUND,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL_NOT_FOUND,dos);
					
					// String
				
						writeString(this.GENDER_NOT_FOUND,dos);
					
					// String
				
						writeString(this.AGE_RANGE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SIZE_RANGE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SIZE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.US_SIZE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.PRODUCT_NOT_FOUND,dos);
					
					// String
				
						writeString(this.FASHION_NOT_FOUND,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS_NOT_FOUND,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT_NOT_FOUND,dos);
					
					// String
				
						writeString(this.ATTRIBUTE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.UNITS_NOT_FOUND,dos);
					
					// String
				
						writeString(this.COO_NOT_FOUND,dos);
					
					// String
				
						writeString(this.EUR_RRP_WSP_NOT_FOUND,dos);
					
					// String
				
						writeString(this.GBP_RRP_WSP_NOT_FOUND,dos);
					
					// String
				
						writeString(this.CHF_RRP_WSP_NOT_FOUND,dos);
					
					// String
				
						writeString(this.NOK_RRP_WSP_NOT_FOUND,dos);
					
					// String
				
						writeString(this.DKK_RRP_WSP_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SEK_RRP_WSP_NOT_FOUND,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP_WSP_NOT_FOUND,dos);
					
					// String
				
						writeString(this.CM_SIZE_NOT_FOUND,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("LINE_NUMBER="+String.valueOf(LINE_NUMBER));
		sb.append(",DYNAMICS_COLOR="+DYNAMICS_COLOR);
		sb.append(",DYNAMICS_BRAND="+DYNAMICS_BRAND);
		sb.append(",BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
		sb.append(",BRAND_NOT_FOUND="+BRAND_NOT_FOUND);
		sb.append(",SEASON_NOT_FOUND="+SEASON_NOT_FOUND);
		sb.append(",COLOR_NOT_FOUND="+COLOR_NOT_FOUND);
		sb.append(",CATEGORY_NOT_FOUND="+CATEGORY_NOT_FOUND);
		sb.append(",REF_NOT_FOUND="+REF_NOT_FOUND);
		sb.append(",DESCRIPTION_NOT_FOUND="+DESCRIPTION_NOT_FOUND);
		sb.append(",STYLE_NOT_FOUND="+STYLE_NOT_FOUND);
		sb.append(",COLOR_NAME_NOT_FOUND="+COLOR_NAME_NOT_FOUND);
		sb.append(",LBL_NOT_FOUND="+LBL_NOT_FOUND);
		sb.append(",STYLE_COLOR_NOT_FOUND="+STYLE_COLOR_NOT_FOUND);
		sb.append(",STYLECOLORLABEL_NOT_FOUND="+STYLECOLORLABEL_NOT_FOUND);
		sb.append(",GENDER_NOT_FOUND="+GENDER_NOT_FOUND);
		sb.append(",AGE_RANGE_NOT_FOUND="+AGE_RANGE_NOT_FOUND);
		sb.append(",SIZE_RANGE_NOT_FOUND="+SIZE_RANGE_NOT_FOUND);
		sb.append(",SIZE_NOT_FOUND="+SIZE_NOT_FOUND);
		sb.append(",US_SIZE_NOT_FOUND="+US_SIZE_NOT_FOUND);
		sb.append(",PRODUCT_NOT_FOUND="+PRODUCT_NOT_FOUND);
		sb.append(",FASHION_NOT_FOUND="+FASHION_NOT_FOUND);
		sb.append(",PRODUCT_STATUS_NOT_FOUND="+PRODUCT_STATUS_NOT_FOUND);
		sb.append(",PRODUCT_TIER_NOT_FOUND="+PRODUCT_TIER_NOT_FOUND);
		sb.append(",SIZE_RATIO_SPLIT_NOT_FOUND="+SIZE_RATIO_SPLIT_NOT_FOUND);
		sb.append(",ATTRIBUTE_NOT_FOUND="+ATTRIBUTE_NOT_FOUND);
		sb.append(",UNITS_NOT_FOUND="+UNITS_NOT_FOUND);
		sb.append(",COO_NOT_FOUND="+COO_NOT_FOUND);
		sb.append(",EUR_RRP_WSP_NOT_FOUND="+EUR_RRP_WSP_NOT_FOUND);
		sb.append(",GBP_RRP_WSP_NOT_FOUND="+GBP_RRP_WSP_NOT_FOUND);
		sb.append(",CHF_RRP_WSP_NOT_FOUND="+CHF_RRP_WSP_NOT_FOUND);
		sb.append(",NOK_RRP_WSP_NOT_FOUND="+NOK_RRP_WSP_NOT_FOUND);
		sb.append(",DKK_RRP_WSP_NOT_FOUND="+DKK_RRP_WSP_NOT_FOUND);
		sb.append(",SEK_RRP_WSP_NOT_FOUND="+SEK_RRP_WSP_NOT_FOUND);
		sb.append(",EUR_FINN_RRP_WSP_NOT_FOUND="+EUR_FINN_RRP_WSP_NOT_FOUND);
		sb.append(",CM_SIZE_NOT_FOUND="+CM_SIZE_NOT_FOUND);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_DEV_BUY_VALIDATION = new byte[0];
    static byte[] commonByteArray_DEV_BUY_VALIDATION = new byte[0];

	
			    public Integer LINE_NUMBER;

				public Integer getLINE_NUMBER () {
					return this.LINE_NUMBER;
				}
				
			    public String DYNAMICS_COLOR;

				public String getDYNAMICS_COLOR () {
					return this.DYNAMICS_COLOR;
				}
				
			    public String DYNAMICS_BRAND;

				public String getDYNAMICS_BRAND () {
					return this.DYNAMICS_BRAND;
				}
				
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				
			    public String BRAND_NOT_FOUND;

				public String getBRAND_NOT_FOUND () {
					return this.BRAND_NOT_FOUND;
				}
				
			    public String SEASON_NOT_FOUND;

				public String getSEASON_NOT_FOUND () {
					return this.SEASON_NOT_FOUND;
				}
				
			    public String COLOR_NOT_FOUND;

				public String getCOLOR_NOT_FOUND () {
					return this.COLOR_NOT_FOUND;
				}
				
			    public String CATEGORY_NOT_FOUND;

				public String getCATEGORY_NOT_FOUND () {
					return this.CATEGORY_NOT_FOUND;
				}
				
			    public String REF_NOT_FOUND;

				public String getREF_NOT_FOUND () {
					return this.REF_NOT_FOUND;
				}
				
			    public String DESCRIPTION_NOT_FOUND;

				public String getDESCRIPTION_NOT_FOUND () {
					return this.DESCRIPTION_NOT_FOUND;
				}
				
			    public String STYLE_NOT_FOUND;

				public String getSTYLE_NOT_FOUND () {
					return this.STYLE_NOT_FOUND;
				}
				
			    public String COLOR_NAME_NOT_FOUND;

				public String getCOLOR_NAME_NOT_FOUND () {
					return this.COLOR_NAME_NOT_FOUND;
				}
				
			    public String LBL_NOT_FOUND;

				public String getLBL_NOT_FOUND () {
					return this.LBL_NOT_FOUND;
				}
				
			    public String STYLE_COLOR_NOT_FOUND;

				public String getSTYLE_COLOR_NOT_FOUND () {
					return this.STYLE_COLOR_NOT_FOUND;
				}
				
			    public String STYLECOLORLABEL_NOT_FOUND;

				public String getSTYLECOLORLABEL_NOT_FOUND () {
					return this.STYLECOLORLABEL_NOT_FOUND;
				}
				
			    public String GENDER_NOT_FOUND;

				public String getGENDER_NOT_FOUND () {
					return this.GENDER_NOT_FOUND;
				}
				
			    public String AGE_RANGE_NOT_FOUND;

				public String getAGE_RANGE_NOT_FOUND () {
					return this.AGE_RANGE_NOT_FOUND;
				}
				
			    public String SIZE_RANGE_NOT_FOUND;

				public String getSIZE_RANGE_NOT_FOUND () {
					return this.SIZE_RANGE_NOT_FOUND;
				}
				
			    public String SIZE_NOT_FOUND;

				public String getSIZE_NOT_FOUND () {
					return this.SIZE_NOT_FOUND;
				}
				
			    public String US_SIZE_NOT_FOUND;

				public String getUS_SIZE_NOT_FOUND () {
					return this.US_SIZE_NOT_FOUND;
				}
				
			    public String PRODUCT_NOT_FOUND;

				public String getPRODUCT_NOT_FOUND () {
					return this.PRODUCT_NOT_FOUND;
				}
				
			    public String FASHION_NOT_FOUND;

				public String getFASHION_NOT_FOUND () {
					return this.FASHION_NOT_FOUND;
				}
				
			    public String PRODUCT_STATUS_NOT_FOUND;

				public String getPRODUCT_STATUS_NOT_FOUND () {
					return this.PRODUCT_STATUS_NOT_FOUND;
				}
				
			    public String PRODUCT_TIER_NOT_FOUND;

				public String getPRODUCT_TIER_NOT_FOUND () {
					return this.PRODUCT_TIER_NOT_FOUND;
				}
				
			    public String SIZE_RATIO_SPLIT_NOT_FOUND;

				public String getSIZE_RATIO_SPLIT_NOT_FOUND () {
					return this.SIZE_RATIO_SPLIT_NOT_FOUND;
				}
				
			    public String ATTRIBUTE_NOT_FOUND;

				public String getATTRIBUTE_NOT_FOUND () {
					return this.ATTRIBUTE_NOT_FOUND;
				}
				
			    public String UNITS_NOT_FOUND;

				public String getUNITS_NOT_FOUND () {
					return this.UNITS_NOT_FOUND;
				}
				
			    public String COO_NOT_FOUND;

				public String getCOO_NOT_FOUND () {
					return this.COO_NOT_FOUND;
				}
				
			    public String EUR_RRP_WSP_NOT_FOUND;

				public String getEUR_RRP_WSP_NOT_FOUND () {
					return this.EUR_RRP_WSP_NOT_FOUND;
				}
				
			    public String GBP_RRP_WSP_NOT_FOUND;

				public String getGBP_RRP_WSP_NOT_FOUND () {
					return this.GBP_RRP_WSP_NOT_FOUND;
				}
				
			    public String CHF_RRP_WSP_NOT_FOUND;

				public String getCHF_RRP_WSP_NOT_FOUND () {
					return this.CHF_RRP_WSP_NOT_FOUND;
				}
				
			    public String NOK_RRP_WSP_NOT_FOUND;

				public String getNOK_RRP_WSP_NOT_FOUND () {
					return this.NOK_RRP_WSP_NOT_FOUND;
				}
				
			    public String DKK_RRP_WSP_NOT_FOUND;

				public String getDKK_RRP_WSP_NOT_FOUND () {
					return this.DKK_RRP_WSP_NOT_FOUND;
				}
				
			    public String SEK_RRP_WSP_NOT_FOUND;

				public String getSEK_RRP_WSP_NOT_FOUND () {
					return this.SEK_RRP_WSP_NOT_FOUND;
				}
				
			    public String EUR_FINN_RRP_WSP_NOT_FOUND;

				public String getEUR_FINN_RRP_WSP_NOT_FOUND () {
					return this.EUR_FINN_RRP_WSP_NOT_FOUND;
				}
				
			    public String CM_SIZE_NOT_FOUND;

				public String getCM_SIZE_NOT_FOUND () {
					return this.CM_SIZE_NOT_FOUND;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_BUY_VALIDATION.length) {
				if(length < 1024 && commonByteArray_DEV_BUY_VALIDATION.length == 0) {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[1024];
				} else {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_BUY_VALIDATION, 0, length);
			strReturn = new String(commonByteArray_DEV_BUY_VALIDATION, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_BUY_VALIDATION) {

        	try {

        		int length = 0;
		
						this.LINE_NUMBER = readInteger(dis);
					
					this.DYNAMICS_COLOR = readString(dis);
					
					this.DYNAMICS_BRAND = readString(dis);
					
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
					this.BRAND_NOT_FOUND = readString(dis);
					
					this.SEASON_NOT_FOUND = readString(dis);
					
					this.COLOR_NOT_FOUND = readString(dis);
					
					this.CATEGORY_NOT_FOUND = readString(dis);
					
					this.REF_NOT_FOUND = readString(dis);
					
					this.DESCRIPTION_NOT_FOUND = readString(dis);
					
					this.STYLE_NOT_FOUND = readString(dis);
					
					this.COLOR_NAME_NOT_FOUND = readString(dis);
					
					this.LBL_NOT_FOUND = readString(dis);
					
					this.STYLE_COLOR_NOT_FOUND = readString(dis);
					
					this.STYLECOLORLABEL_NOT_FOUND = readString(dis);
					
					this.GENDER_NOT_FOUND = readString(dis);
					
					this.AGE_RANGE_NOT_FOUND = readString(dis);
					
					this.SIZE_RANGE_NOT_FOUND = readString(dis);
					
					this.SIZE_NOT_FOUND = readString(dis);
					
					this.US_SIZE_NOT_FOUND = readString(dis);
					
					this.PRODUCT_NOT_FOUND = readString(dis);
					
					this.FASHION_NOT_FOUND = readString(dis);
					
					this.PRODUCT_STATUS_NOT_FOUND = readString(dis);
					
					this.PRODUCT_TIER_NOT_FOUND = readString(dis);
					
					this.SIZE_RATIO_SPLIT_NOT_FOUND = readString(dis);
					
					this.ATTRIBUTE_NOT_FOUND = readString(dis);
					
					this.UNITS_NOT_FOUND = readString(dis);
					
					this.COO_NOT_FOUND = readString(dis);
					
					this.EUR_RRP_WSP_NOT_FOUND = readString(dis);
					
					this.GBP_RRP_WSP_NOT_FOUND = readString(dis);
					
					this.CHF_RRP_WSP_NOT_FOUND = readString(dis);
					
					this.NOK_RRP_WSP_NOT_FOUND = readString(dis);
					
					this.DKK_RRP_WSP_NOT_FOUND = readString(dis);
					
					this.SEK_RRP_WSP_NOT_FOUND = readString(dis);
					
					this.EUR_FINN_RRP_WSP_NOT_FOUND = readString(dis);
					
					this.CM_SIZE_NOT_FOUND = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.LINE_NUMBER,dos);
					
					// String
				
						writeString(this.DYNAMICS_COLOR,dos);
					
					// String
				
						writeString(this.DYNAMICS_BRAND,dos);
					
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
					// String
				
						writeString(this.BRAND_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SEASON_NOT_FOUND,dos);
					
					// String
				
						writeString(this.COLOR_NOT_FOUND,dos);
					
					// String
				
						writeString(this.CATEGORY_NOT_FOUND,dos);
					
					// String
				
						writeString(this.REF_NOT_FOUND,dos);
					
					// String
				
						writeString(this.DESCRIPTION_NOT_FOUND,dos);
					
					// String
				
						writeString(this.STYLE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.COLOR_NAME_NOT_FOUND,dos);
					
					// String
				
						writeString(this.LBL_NOT_FOUND,dos);
					
					// String
				
						writeString(this.STYLE_COLOR_NOT_FOUND,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL_NOT_FOUND,dos);
					
					// String
				
						writeString(this.GENDER_NOT_FOUND,dos);
					
					// String
				
						writeString(this.AGE_RANGE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SIZE_RANGE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SIZE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.US_SIZE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.PRODUCT_NOT_FOUND,dos);
					
					// String
				
						writeString(this.FASHION_NOT_FOUND,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS_NOT_FOUND,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT_NOT_FOUND,dos);
					
					// String
				
						writeString(this.ATTRIBUTE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.UNITS_NOT_FOUND,dos);
					
					// String
				
						writeString(this.COO_NOT_FOUND,dos);
					
					// String
				
						writeString(this.EUR_RRP_WSP_NOT_FOUND,dos);
					
					// String
				
						writeString(this.GBP_RRP_WSP_NOT_FOUND,dos);
					
					// String
				
						writeString(this.CHF_RRP_WSP_NOT_FOUND,dos);
					
					// String
				
						writeString(this.NOK_RRP_WSP_NOT_FOUND,dos);
					
					// String
				
						writeString(this.DKK_RRP_WSP_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SEK_RRP_WSP_NOT_FOUND,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP_WSP_NOT_FOUND,dos);
					
					// String
				
						writeString(this.CM_SIZE_NOT_FOUND,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("LINE_NUMBER="+String.valueOf(LINE_NUMBER));
		sb.append(",DYNAMICS_COLOR="+DYNAMICS_COLOR);
		sb.append(",DYNAMICS_BRAND="+DYNAMICS_BRAND);
		sb.append(",BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
		sb.append(",BRAND_NOT_FOUND="+BRAND_NOT_FOUND);
		sb.append(",SEASON_NOT_FOUND="+SEASON_NOT_FOUND);
		sb.append(",COLOR_NOT_FOUND="+COLOR_NOT_FOUND);
		sb.append(",CATEGORY_NOT_FOUND="+CATEGORY_NOT_FOUND);
		sb.append(",REF_NOT_FOUND="+REF_NOT_FOUND);
		sb.append(",DESCRIPTION_NOT_FOUND="+DESCRIPTION_NOT_FOUND);
		sb.append(",STYLE_NOT_FOUND="+STYLE_NOT_FOUND);
		sb.append(",COLOR_NAME_NOT_FOUND="+COLOR_NAME_NOT_FOUND);
		sb.append(",LBL_NOT_FOUND="+LBL_NOT_FOUND);
		sb.append(",STYLE_COLOR_NOT_FOUND="+STYLE_COLOR_NOT_FOUND);
		sb.append(",STYLECOLORLABEL_NOT_FOUND="+STYLECOLORLABEL_NOT_FOUND);
		sb.append(",GENDER_NOT_FOUND="+GENDER_NOT_FOUND);
		sb.append(",AGE_RANGE_NOT_FOUND="+AGE_RANGE_NOT_FOUND);
		sb.append(",SIZE_RANGE_NOT_FOUND="+SIZE_RANGE_NOT_FOUND);
		sb.append(",SIZE_NOT_FOUND="+SIZE_NOT_FOUND);
		sb.append(",US_SIZE_NOT_FOUND="+US_SIZE_NOT_FOUND);
		sb.append(",PRODUCT_NOT_FOUND="+PRODUCT_NOT_FOUND);
		sb.append(",FASHION_NOT_FOUND="+FASHION_NOT_FOUND);
		sb.append(",PRODUCT_STATUS_NOT_FOUND="+PRODUCT_STATUS_NOT_FOUND);
		sb.append(",PRODUCT_TIER_NOT_FOUND="+PRODUCT_TIER_NOT_FOUND);
		sb.append(",SIZE_RATIO_SPLIT_NOT_FOUND="+SIZE_RATIO_SPLIT_NOT_FOUND);
		sb.append(",ATTRIBUTE_NOT_FOUND="+ATTRIBUTE_NOT_FOUND);
		sb.append(",UNITS_NOT_FOUND="+UNITS_NOT_FOUND);
		sb.append(",COO_NOT_FOUND="+COO_NOT_FOUND);
		sb.append(",EUR_RRP_WSP_NOT_FOUND="+EUR_RRP_WSP_NOT_FOUND);
		sb.append(",GBP_RRP_WSP_NOT_FOUND="+GBP_RRP_WSP_NOT_FOUND);
		sb.append(",CHF_RRP_WSP_NOT_FOUND="+CHF_RRP_WSP_NOT_FOUND);
		sb.append(",NOK_RRP_WSP_NOT_FOUND="+NOK_RRP_WSP_NOT_FOUND);
		sb.append(",DKK_RRP_WSP_NOT_FOUND="+DKK_RRP_WSP_NOT_FOUND);
		sb.append(",SEK_RRP_WSP_NOT_FOUND="+SEK_RRP_WSP_NOT_FOUND);
		sb.append(",EUR_FINN_RRP_WSP_NOT_FOUND="+EUR_FINN_RRP_WSP_NOT_FOUND);
		sb.append(",CM_SIZE_NOT_FOUND="+CM_SIZE_NOT_FOUND);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_eurpriceStruct implements routines.system.IPersistableRow<sortie_eurpriceStruct> {
    final static byte[] commonByteArrayLock_DEV_BUY_VALIDATION = new byte[0];
    static byte[] commonByteArray_DEV_BUY_VALIDATION = new byte[0];

	
			    public Integer LINE_NUMBER;

				public Integer getLINE_NUMBER () {
					return this.LINE_NUMBER;
				}
				
			    public String DYNAMICS_COLOR;

				public String getDYNAMICS_COLOR () {
					return this.DYNAMICS_COLOR;
				}
				
			    public String DYNAMICS_BRAND;

				public String getDYNAMICS_BRAND () {
					return this.DYNAMICS_BRAND;
				}
				
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				
			    public String BRAND_NOT_FOUND;

				public String getBRAND_NOT_FOUND () {
					return this.BRAND_NOT_FOUND;
				}
				
			    public String SEASON_NOT_FOUND;

				public String getSEASON_NOT_FOUND () {
					return this.SEASON_NOT_FOUND;
				}
				
			    public String COLOR_NOT_FOUND;

				public String getCOLOR_NOT_FOUND () {
					return this.COLOR_NOT_FOUND;
				}
				
			    public String CATEGORY_NOT_FOUND;

				public String getCATEGORY_NOT_FOUND () {
					return this.CATEGORY_NOT_FOUND;
				}
				
			    public String REF_NOT_FOUND;

				public String getREF_NOT_FOUND () {
					return this.REF_NOT_FOUND;
				}
				
			    public String DESCRIPTION_NOT_FOUND;

				public String getDESCRIPTION_NOT_FOUND () {
					return this.DESCRIPTION_NOT_FOUND;
				}
				
			    public String STYLE_NOT_FOUND;

				public String getSTYLE_NOT_FOUND () {
					return this.STYLE_NOT_FOUND;
				}
				
			    public String COLOR_NAME_NOT_FOUND;

				public String getCOLOR_NAME_NOT_FOUND () {
					return this.COLOR_NAME_NOT_FOUND;
				}
				
			    public String LBL_NOT_FOUND;

				public String getLBL_NOT_FOUND () {
					return this.LBL_NOT_FOUND;
				}
				
			    public String STYLE_COLOR_NOT_FOUND;

				public String getSTYLE_COLOR_NOT_FOUND () {
					return this.STYLE_COLOR_NOT_FOUND;
				}
				
			    public String STYLECOLORLABEL_NOT_FOUND;

				public String getSTYLECOLORLABEL_NOT_FOUND () {
					return this.STYLECOLORLABEL_NOT_FOUND;
				}
				
			    public String GENDER_NOT_FOUND;

				public String getGENDER_NOT_FOUND () {
					return this.GENDER_NOT_FOUND;
				}
				
			    public String AGE_RANGE_NOT_FOUND;

				public String getAGE_RANGE_NOT_FOUND () {
					return this.AGE_RANGE_NOT_FOUND;
				}
				
			    public String SIZE_RANGE_NOT_FOUND;

				public String getSIZE_RANGE_NOT_FOUND () {
					return this.SIZE_RANGE_NOT_FOUND;
				}
				
			    public String SIZE_NOT_FOUND;

				public String getSIZE_NOT_FOUND () {
					return this.SIZE_NOT_FOUND;
				}
				
			    public String US_SIZE_NOT_FOUND;

				public String getUS_SIZE_NOT_FOUND () {
					return this.US_SIZE_NOT_FOUND;
				}
				
			    public String PRODUCT_NOT_FOUND;

				public String getPRODUCT_NOT_FOUND () {
					return this.PRODUCT_NOT_FOUND;
				}
				
			    public String FASHION_NOT_FOUND;

				public String getFASHION_NOT_FOUND () {
					return this.FASHION_NOT_FOUND;
				}
				
			    public String PRODUCT_STATUS_NOT_FOUND;

				public String getPRODUCT_STATUS_NOT_FOUND () {
					return this.PRODUCT_STATUS_NOT_FOUND;
				}
				
			    public String PRODUCT_TIER_NOT_FOUND;

				public String getPRODUCT_TIER_NOT_FOUND () {
					return this.PRODUCT_TIER_NOT_FOUND;
				}
				
			    public String SIZE_RATIO_SPLIT_NOT_FOUND;

				public String getSIZE_RATIO_SPLIT_NOT_FOUND () {
					return this.SIZE_RATIO_SPLIT_NOT_FOUND;
				}
				
			    public String ATTRIBUTE_NOT_FOUND;

				public String getATTRIBUTE_NOT_FOUND () {
					return this.ATTRIBUTE_NOT_FOUND;
				}
				
			    public String UNITS_NOT_FOUND;

				public String getUNITS_NOT_FOUND () {
					return this.UNITS_NOT_FOUND;
				}
				
			    public String COO_NOT_FOUND;

				public String getCOO_NOT_FOUND () {
					return this.COO_NOT_FOUND;
				}
				
			    public String EUR_RRP_WSP_NOT_FOUND;

				public String getEUR_RRP_WSP_NOT_FOUND () {
					return this.EUR_RRP_WSP_NOT_FOUND;
				}
				
			    public String GBP_RRP_WSP_NOT_FOUND;

				public String getGBP_RRP_WSP_NOT_FOUND () {
					return this.GBP_RRP_WSP_NOT_FOUND;
				}
				
			    public String CHF_RRP_WSP_NOT_FOUND;

				public String getCHF_RRP_WSP_NOT_FOUND () {
					return this.CHF_RRP_WSP_NOT_FOUND;
				}
				
			    public String NOK_RRP_WSP_NOT_FOUND;

				public String getNOK_RRP_WSP_NOT_FOUND () {
					return this.NOK_RRP_WSP_NOT_FOUND;
				}
				
			    public String DKK_RRP_WSP_NOT_FOUND;

				public String getDKK_RRP_WSP_NOT_FOUND () {
					return this.DKK_RRP_WSP_NOT_FOUND;
				}
				
			    public String SEK_RRP_WSP_NOT_FOUND;

				public String getSEK_RRP_WSP_NOT_FOUND () {
					return this.SEK_RRP_WSP_NOT_FOUND;
				}
				
			    public String EUR_FINN_RRP_WSP_NOT_FOUND;

				public String getEUR_FINN_RRP_WSP_NOT_FOUND () {
					return this.EUR_FINN_RRP_WSP_NOT_FOUND;
				}
				
			    public String CM_SIZE_NOT_FOUND;

				public String getCM_SIZE_NOT_FOUND () {
					return this.CM_SIZE_NOT_FOUND;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_BUY_VALIDATION.length) {
				if(length < 1024 && commonByteArray_DEV_BUY_VALIDATION.length == 0) {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[1024];
				} else {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_BUY_VALIDATION, 0, length);
			strReturn = new String(commonByteArray_DEV_BUY_VALIDATION, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_BUY_VALIDATION) {

        	try {

        		int length = 0;
		
						this.LINE_NUMBER = readInteger(dis);
					
					this.DYNAMICS_COLOR = readString(dis);
					
					this.DYNAMICS_BRAND = readString(dis);
					
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
					this.BRAND_NOT_FOUND = readString(dis);
					
					this.SEASON_NOT_FOUND = readString(dis);
					
					this.COLOR_NOT_FOUND = readString(dis);
					
					this.CATEGORY_NOT_FOUND = readString(dis);
					
					this.REF_NOT_FOUND = readString(dis);
					
					this.DESCRIPTION_NOT_FOUND = readString(dis);
					
					this.STYLE_NOT_FOUND = readString(dis);
					
					this.COLOR_NAME_NOT_FOUND = readString(dis);
					
					this.LBL_NOT_FOUND = readString(dis);
					
					this.STYLE_COLOR_NOT_FOUND = readString(dis);
					
					this.STYLECOLORLABEL_NOT_FOUND = readString(dis);
					
					this.GENDER_NOT_FOUND = readString(dis);
					
					this.AGE_RANGE_NOT_FOUND = readString(dis);
					
					this.SIZE_RANGE_NOT_FOUND = readString(dis);
					
					this.SIZE_NOT_FOUND = readString(dis);
					
					this.US_SIZE_NOT_FOUND = readString(dis);
					
					this.PRODUCT_NOT_FOUND = readString(dis);
					
					this.FASHION_NOT_FOUND = readString(dis);
					
					this.PRODUCT_STATUS_NOT_FOUND = readString(dis);
					
					this.PRODUCT_TIER_NOT_FOUND = readString(dis);
					
					this.SIZE_RATIO_SPLIT_NOT_FOUND = readString(dis);
					
					this.ATTRIBUTE_NOT_FOUND = readString(dis);
					
					this.UNITS_NOT_FOUND = readString(dis);
					
					this.COO_NOT_FOUND = readString(dis);
					
					this.EUR_RRP_WSP_NOT_FOUND = readString(dis);
					
					this.GBP_RRP_WSP_NOT_FOUND = readString(dis);
					
					this.CHF_RRP_WSP_NOT_FOUND = readString(dis);
					
					this.NOK_RRP_WSP_NOT_FOUND = readString(dis);
					
					this.DKK_RRP_WSP_NOT_FOUND = readString(dis);
					
					this.SEK_RRP_WSP_NOT_FOUND = readString(dis);
					
					this.EUR_FINN_RRP_WSP_NOT_FOUND = readString(dis);
					
					this.CM_SIZE_NOT_FOUND = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.LINE_NUMBER,dos);
					
					// String
				
						writeString(this.DYNAMICS_COLOR,dos);
					
					// String
				
						writeString(this.DYNAMICS_BRAND,dos);
					
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
					// String
				
						writeString(this.BRAND_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SEASON_NOT_FOUND,dos);
					
					// String
				
						writeString(this.COLOR_NOT_FOUND,dos);
					
					// String
				
						writeString(this.CATEGORY_NOT_FOUND,dos);
					
					// String
				
						writeString(this.REF_NOT_FOUND,dos);
					
					// String
				
						writeString(this.DESCRIPTION_NOT_FOUND,dos);
					
					// String
				
						writeString(this.STYLE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.COLOR_NAME_NOT_FOUND,dos);
					
					// String
				
						writeString(this.LBL_NOT_FOUND,dos);
					
					// String
				
						writeString(this.STYLE_COLOR_NOT_FOUND,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL_NOT_FOUND,dos);
					
					// String
				
						writeString(this.GENDER_NOT_FOUND,dos);
					
					// String
				
						writeString(this.AGE_RANGE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SIZE_RANGE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SIZE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.US_SIZE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.PRODUCT_NOT_FOUND,dos);
					
					// String
				
						writeString(this.FASHION_NOT_FOUND,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS_NOT_FOUND,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT_NOT_FOUND,dos);
					
					// String
				
						writeString(this.ATTRIBUTE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.UNITS_NOT_FOUND,dos);
					
					// String
				
						writeString(this.COO_NOT_FOUND,dos);
					
					// String
				
						writeString(this.EUR_RRP_WSP_NOT_FOUND,dos);
					
					// String
				
						writeString(this.GBP_RRP_WSP_NOT_FOUND,dos);
					
					// String
				
						writeString(this.CHF_RRP_WSP_NOT_FOUND,dos);
					
					// String
				
						writeString(this.NOK_RRP_WSP_NOT_FOUND,dos);
					
					// String
				
						writeString(this.DKK_RRP_WSP_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SEK_RRP_WSP_NOT_FOUND,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP_WSP_NOT_FOUND,dos);
					
					// String
				
						writeString(this.CM_SIZE_NOT_FOUND,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("LINE_NUMBER="+String.valueOf(LINE_NUMBER));
		sb.append(",DYNAMICS_COLOR="+DYNAMICS_COLOR);
		sb.append(",DYNAMICS_BRAND="+DYNAMICS_BRAND);
		sb.append(",BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
		sb.append(",BRAND_NOT_FOUND="+BRAND_NOT_FOUND);
		sb.append(",SEASON_NOT_FOUND="+SEASON_NOT_FOUND);
		sb.append(",COLOR_NOT_FOUND="+COLOR_NOT_FOUND);
		sb.append(",CATEGORY_NOT_FOUND="+CATEGORY_NOT_FOUND);
		sb.append(",REF_NOT_FOUND="+REF_NOT_FOUND);
		sb.append(",DESCRIPTION_NOT_FOUND="+DESCRIPTION_NOT_FOUND);
		sb.append(",STYLE_NOT_FOUND="+STYLE_NOT_FOUND);
		sb.append(",COLOR_NAME_NOT_FOUND="+COLOR_NAME_NOT_FOUND);
		sb.append(",LBL_NOT_FOUND="+LBL_NOT_FOUND);
		sb.append(",STYLE_COLOR_NOT_FOUND="+STYLE_COLOR_NOT_FOUND);
		sb.append(",STYLECOLORLABEL_NOT_FOUND="+STYLECOLORLABEL_NOT_FOUND);
		sb.append(",GENDER_NOT_FOUND="+GENDER_NOT_FOUND);
		sb.append(",AGE_RANGE_NOT_FOUND="+AGE_RANGE_NOT_FOUND);
		sb.append(",SIZE_RANGE_NOT_FOUND="+SIZE_RANGE_NOT_FOUND);
		sb.append(",SIZE_NOT_FOUND="+SIZE_NOT_FOUND);
		sb.append(",US_SIZE_NOT_FOUND="+US_SIZE_NOT_FOUND);
		sb.append(",PRODUCT_NOT_FOUND="+PRODUCT_NOT_FOUND);
		sb.append(",FASHION_NOT_FOUND="+FASHION_NOT_FOUND);
		sb.append(",PRODUCT_STATUS_NOT_FOUND="+PRODUCT_STATUS_NOT_FOUND);
		sb.append(",PRODUCT_TIER_NOT_FOUND="+PRODUCT_TIER_NOT_FOUND);
		sb.append(",SIZE_RATIO_SPLIT_NOT_FOUND="+SIZE_RATIO_SPLIT_NOT_FOUND);
		sb.append(",ATTRIBUTE_NOT_FOUND="+ATTRIBUTE_NOT_FOUND);
		sb.append(",UNITS_NOT_FOUND="+UNITS_NOT_FOUND);
		sb.append(",COO_NOT_FOUND="+COO_NOT_FOUND);
		sb.append(",EUR_RRP_WSP_NOT_FOUND="+EUR_RRP_WSP_NOT_FOUND);
		sb.append(",GBP_RRP_WSP_NOT_FOUND="+GBP_RRP_WSP_NOT_FOUND);
		sb.append(",CHF_RRP_WSP_NOT_FOUND="+CHF_RRP_WSP_NOT_FOUND);
		sb.append(",NOK_RRP_WSP_NOT_FOUND="+NOK_RRP_WSP_NOT_FOUND);
		sb.append(",DKK_RRP_WSP_NOT_FOUND="+DKK_RRP_WSP_NOT_FOUND);
		sb.append(",SEK_RRP_WSP_NOT_FOUND="+SEK_RRP_WSP_NOT_FOUND);
		sb.append(",EUR_FINN_RRP_WSP_NOT_FOUND="+EUR_FINN_RRP_WSP_NOT_FOUND);
		sb.append(",CM_SIZE_NOT_FOUND="+CM_SIZE_NOT_FOUND);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_eurpriceStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_cm_size_Struct implements routines.system.IPersistableRow<sortie_cm_size_Struct> {
    final static byte[] commonByteArrayLock_DEV_BUY_VALIDATION = new byte[0];
    static byte[] commonByteArray_DEV_BUY_VALIDATION = new byte[0];

	
			    public Integer LINE_NUMBER;

				public Integer getLINE_NUMBER () {
					return this.LINE_NUMBER;
				}
				
			    public String DYNAMICS_COLOR;

				public String getDYNAMICS_COLOR () {
					return this.DYNAMICS_COLOR;
				}
				
			    public String DYNAMICS_BRAND;

				public String getDYNAMICS_BRAND () {
					return this.DYNAMICS_BRAND;
				}
				
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				
			    public String BRAND_NOT_FOUND;

				public String getBRAND_NOT_FOUND () {
					return this.BRAND_NOT_FOUND;
				}
				
			    public String SEASON_NOT_FOUND;

				public String getSEASON_NOT_FOUND () {
					return this.SEASON_NOT_FOUND;
				}
				
			    public String COLOR_NOT_FOUND;

				public String getCOLOR_NOT_FOUND () {
					return this.COLOR_NOT_FOUND;
				}
				
			    public String CATEGORY_NOT_FOUND;

				public String getCATEGORY_NOT_FOUND () {
					return this.CATEGORY_NOT_FOUND;
				}
				
			    public String REF_NOT_FOUND;

				public String getREF_NOT_FOUND () {
					return this.REF_NOT_FOUND;
				}
				
			    public String DESCRIPTION_NOT_FOUND;

				public String getDESCRIPTION_NOT_FOUND () {
					return this.DESCRIPTION_NOT_FOUND;
				}
				
			    public String STYLE_NOT_FOUND;

				public String getSTYLE_NOT_FOUND () {
					return this.STYLE_NOT_FOUND;
				}
				
			    public String COLOR_NAME_NOT_FOUND;

				public String getCOLOR_NAME_NOT_FOUND () {
					return this.COLOR_NAME_NOT_FOUND;
				}
				
			    public String LBL_NOT_FOUND;

				public String getLBL_NOT_FOUND () {
					return this.LBL_NOT_FOUND;
				}
				
			    public String STYLE_COLOR_NOT_FOUND;

				public String getSTYLE_COLOR_NOT_FOUND () {
					return this.STYLE_COLOR_NOT_FOUND;
				}
				
			    public String STYLECOLORLABEL_NOT_FOUND;

				public String getSTYLECOLORLABEL_NOT_FOUND () {
					return this.STYLECOLORLABEL_NOT_FOUND;
				}
				
			    public String GENDER_NOT_FOUND;

				public String getGENDER_NOT_FOUND () {
					return this.GENDER_NOT_FOUND;
				}
				
			    public String AGE_RANGE_NOT_FOUND;

				public String getAGE_RANGE_NOT_FOUND () {
					return this.AGE_RANGE_NOT_FOUND;
				}
				
			    public String SIZE_RANGE_NOT_FOUND;

				public String getSIZE_RANGE_NOT_FOUND () {
					return this.SIZE_RANGE_NOT_FOUND;
				}
				
			    public String SIZE_NOT_FOUND;

				public String getSIZE_NOT_FOUND () {
					return this.SIZE_NOT_FOUND;
				}
				
			    public String US_SIZE_NOT_FOUND;

				public String getUS_SIZE_NOT_FOUND () {
					return this.US_SIZE_NOT_FOUND;
				}
				
			    public String PRODUCT_NOT_FOUND;

				public String getPRODUCT_NOT_FOUND () {
					return this.PRODUCT_NOT_FOUND;
				}
				
			    public String FASHION_NOT_FOUND;

				public String getFASHION_NOT_FOUND () {
					return this.FASHION_NOT_FOUND;
				}
				
			    public String PRODUCT_STATUS_NOT_FOUND;

				public String getPRODUCT_STATUS_NOT_FOUND () {
					return this.PRODUCT_STATUS_NOT_FOUND;
				}
				
			    public String PRODUCT_TIER_NOT_FOUND;

				public String getPRODUCT_TIER_NOT_FOUND () {
					return this.PRODUCT_TIER_NOT_FOUND;
				}
				
			    public String SIZE_RATIO_SPLIT_NOT_FOUND;

				public String getSIZE_RATIO_SPLIT_NOT_FOUND () {
					return this.SIZE_RATIO_SPLIT_NOT_FOUND;
				}
				
			    public String ATTRIBUTE_NOT_FOUND;

				public String getATTRIBUTE_NOT_FOUND () {
					return this.ATTRIBUTE_NOT_FOUND;
				}
				
			    public String UNITS_NOT_FOUND;

				public String getUNITS_NOT_FOUND () {
					return this.UNITS_NOT_FOUND;
				}
				
			    public String COO_NOT_FOUND;

				public String getCOO_NOT_FOUND () {
					return this.COO_NOT_FOUND;
				}
				
			    public String CM_SIZE_NOT_FOUND;

				public String getCM_SIZE_NOT_FOUND () {
					return this.CM_SIZE_NOT_FOUND;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_BUY_VALIDATION.length) {
				if(length < 1024 && commonByteArray_DEV_BUY_VALIDATION.length == 0) {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[1024];
				} else {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_BUY_VALIDATION, 0, length);
			strReturn = new String(commonByteArray_DEV_BUY_VALIDATION, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_BUY_VALIDATION) {

        	try {

        		int length = 0;
		
						this.LINE_NUMBER = readInteger(dis);
					
					this.DYNAMICS_COLOR = readString(dis);
					
					this.DYNAMICS_BRAND = readString(dis);
					
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
					this.BRAND_NOT_FOUND = readString(dis);
					
					this.SEASON_NOT_FOUND = readString(dis);
					
					this.COLOR_NOT_FOUND = readString(dis);
					
					this.CATEGORY_NOT_FOUND = readString(dis);
					
					this.REF_NOT_FOUND = readString(dis);
					
					this.DESCRIPTION_NOT_FOUND = readString(dis);
					
					this.STYLE_NOT_FOUND = readString(dis);
					
					this.COLOR_NAME_NOT_FOUND = readString(dis);
					
					this.LBL_NOT_FOUND = readString(dis);
					
					this.STYLE_COLOR_NOT_FOUND = readString(dis);
					
					this.STYLECOLORLABEL_NOT_FOUND = readString(dis);
					
					this.GENDER_NOT_FOUND = readString(dis);
					
					this.AGE_RANGE_NOT_FOUND = readString(dis);
					
					this.SIZE_RANGE_NOT_FOUND = readString(dis);
					
					this.SIZE_NOT_FOUND = readString(dis);
					
					this.US_SIZE_NOT_FOUND = readString(dis);
					
					this.PRODUCT_NOT_FOUND = readString(dis);
					
					this.FASHION_NOT_FOUND = readString(dis);
					
					this.PRODUCT_STATUS_NOT_FOUND = readString(dis);
					
					this.PRODUCT_TIER_NOT_FOUND = readString(dis);
					
					this.SIZE_RATIO_SPLIT_NOT_FOUND = readString(dis);
					
					this.ATTRIBUTE_NOT_FOUND = readString(dis);
					
					this.UNITS_NOT_FOUND = readString(dis);
					
					this.COO_NOT_FOUND = readString(dis);
					
					this.CM_SIZE_NOT_FOUND = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.LINE_NUMBER,dos);
					
					// String
				
						writeString(this.DYNAMICS_COLOR,dos);
					
					// String
				
						writeString(this.DYNAMICS_BRAND,dos);
					
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
					// String
				
						writeString(this.BRAND_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SEASON_NOT_FOUND,dos);
					
					// String
				
						writeString(this.COLOR_NOT_FOUND,dos);
					
					// String
				
						writeString(this.CATEGORY_NOT_FOUND,dos);
					
					// String
				
						writeString(this.REF_NOT_FOUND,dos);
					
					// String
				
						writeString(this.DESCRIPTION_NOT_FOUND,dos);
					
					// String
				
						writeString(this.STYLE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.COLOR_NAME_NOT_FOUND,dos);
					
					// String
				
						writeString(this.LBL_NOT_FOUND,dos);
					
					// String
				
						writeString(this.STYLE_COLOR_NOT_FOUND,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL_NOT_FOUND,dos);
					
					// String
				
						writeString(this.GENDER_NOT_FOUND,dos);
					
					// String
				
						writeString(this.AGE_RANGE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SIZE_RANGE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SIZE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.US_SIZE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.PRODUCT_NOT_FOUND,dos);
					
					// String
				
						writeString(this.FASHION_NOT_FOUND,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS_NOT_FOUND,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT_NOT_FOUND,dos);
					
					// String
				
						writeString(this.ATTRIBUTE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.UNITS_NOT_FOUND,dos);
					
					// String
				
						writeString(this.COO_NOT_FOUND,dos);
					
					// String
				
						writeString(this.CM_SIZE_NOT_FOUND,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("LINE_NUMBER="+String.valueOf(LINE_NUMBER));
		sb.append(",DYNAMICS_COLOR="+DYNAMICS_COLOR);
		sb.append(",DYNAMICS_BRAND="+DYNAMICS_BRAND);
		sb.append(",BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
		sb.append(",BRAND_NOT_FOUND="+BRAND_NOT_FOUND);
		sb.append(",SEASON_NOT_FOUND="+SEASON_NOT_FOUND);
		sb.append(",COLOR_NOT_FOUND="+COLOR_NOT_FOUND);
		sb.append(",CATEGORY_NOT_FOUND="+CATEGORY_NOT_FOUND);
		sb.append(",REF_NOT_FOUND="+REF_NOT_FOUND);
		sb.append(",DESCRIPTION_NOT_FOUND="+DESCRIPTION_NOT_FOUND);
		sb.append(",STYLE_NOT_FOUND="+STYLE_NOT_FOUND);
		sb.append(",COLOR_NAME_NOT_FOUND="+COLOR_NAME_NOT_FOUND);
		sb.append(",LBL_NOT_FOUND="+LBL_NOT_FOUND);
		sb.append(",STYLE_COLOR_NOT_FOUND="+STYLE_COLOR_NOT_FOUND);
		sb.append(",STYLECOLORLABEL_NOT_FOUND="+STYLECOLORLABEL_NOT_FOUND);
		sb.append(",GENDER_NOT_FOUND="+GENDER_NOT_FOUND);
		sb.append(",AGE_RANGE_NOT_FOUND="+AGE_RANGE_NOT_FOUND);
		sb.append(",SIZE_RANGE_NOT_FOUND="+SIZE_RANGE_NOT_FOUND);
		sb.append(",SIZE_NOT_FOUND="+SIZE_NOT_FOUND);
		sb.append(",US_SIZE_NOT_FOUND="+US_SIZE_NOT_FOUND);
		sb.append(",PRODUCT_NOT_FOUND="+PRODUCT_NOT_FOUND);
		sb.append(",FASHION_NOT_FOUND="+FASHION_NOT_FOUND);
		sb.append(",PRODUCT_STATUS_NOT_FOUND="+PRODUCT_STATUS_NOT_FOUND);
		sb.append(",PRODUCT_TIER_NOT_FOUND="+PRODUCT_TIER_NOT_FOUND);
		sb.append(",SIZE_RATIO_SPLIT_NOT_FOUND="+SIZE_RATIO_SPLIT_NOT_FOUND);
		sb.append(",ATTRIBUTE_NOT_FOUND="+ATTRIBUTE_NOT_FOUND);
		sb.append(",UNITS_NOT_FOUND="+UNITS_NOT_FOUND);
		sb.append(",COO_NOT_FOUND="+COO_NOT_FOUND);
		sb.append(",CM_SIZE_NOT_FOUND="+CM_SIZE_NOT_FOUND);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_cm_size_Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_cm_size_1Struct implements routines.system.IPersistableRow<sortie_cm_size_1Struct> {
    final static byte[] commonByteArrayLock_DEV_BUY_VALIDATION = new byte[0];
    static byte[] commonByteArray_DEV_BUY_VALIDATION = new byte[0];

	
			    public Integer LINE_NUMBER;

				public Integer getLINE_NUMBER () {
					return this.LINE_NUMBER;
				}
				
			    public String DYNAMICS_COLOR;

				public String getDYNAMICS_COLOR () {
					return this.DYNAMICS_COLOR;
				}
				
			    public String DYNAMICS_BRAND;

				public String getDYNAMICS_BRAND () {
					return this.DYNAMICS_BRAND;
				}
				
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				
			    public String BRAND_NOT_FOUND;

				public String getBRAND_NOT_FOUND () {
					return this.BRAND_NOT_FOUND;
				}
				
			    public String SEASON_NOT_FOUND;

				public String getSEASON_NOT_FOUND () {
					return this.SEASON_NOT_FOUND;
				}
				
			    public String COLOR_NOT_FOUND;

				public String getCOLOR_NOT_FOUND () {
					return this.COLOR_NOT_FOUND;
				}
				
			    public String CATEGORY_NOT_FOUND;

				public String getCATEGORY_NOT_FOUND () {
					return this.CATEGORY_NOT_FOUND;
				}
				
			    public String REF_NOT_FOUND;

				public String getREF_NOT_FOUND () {
					return this.REF_NOT_FOUND;
				}
				
			    public String DESCRIPTION_NOT_FOUND;

				public String getDESCRIPTION_NOT_FOUND () {
					return this.DESCRIPTION_NOT_FOUND;
				}
				
			    public String STYLE_NOT_FOUND;

				public String getSTYLE_NOT_FOUND () {
					return this.STYLE_NOT_FOUND;
				}
				
			    public String COLOR_NAME_NOT_FOUND;

				public String getCOLOR_NAME_NOT_FOUND () {
					return this.COLOR_NAME_NOT_FOUND;
				}
				
			    public String LBL_NOT_FOUND;

				public String getLBL_NOT_FOUND () {
					return this.LBL_NOT_FOUND;
				}
				
			    public String STYLE_COLOR_NOT_FOUND;

				public String getSTYLE_COLOR_NOT_FOUND () {
					return this.STYLE_COLOR_NOT_FOUND;
				}
				
			    public String STYLECOLORLABEL_NOT_FOUND;

				public String getSTYLECOLORLABEL_NOT_FOUND () {
					return this.STYLECOLORLABEL_NOT_FOUND;
				}
				
			    public String GENDER_NOT_FOUND;

				public String getGENDER_NOT_FOUND () {
					return this.GENDER_NOT_FOUND;
				}
				
			    public String AGE_RANGE_NOT_FOUND;

				public String getAGE_RANGE_NOT_FOUND () {
					return this.AGE_RANGE_NOT_FOUND;
				}
				
			    public String SIZE_RANGE_NOT_FOUND;

				public String getSIZE_RANGE_NOT_FOUND () {
					return this.SIZE_RANGE_NOT_FOUND;
				}
				
			    public String SIZE_NOT_FOUND;

				public String getSIZE_NOT_FOUND () {
					return this.SIZE_NOT_FOUND;
				}
				
			    public String US_SIZE_NOT_FOUND;

				public String getUS_SIZE_NOT_FOUND () {
					return this.US_SIZE_NOT_FOUND;
				}
				
			    public String PRODUCT_NOT_FOUND;

				public String getPRODUCT_NOT_FOUND () {
					return this.PRODUCT_NOT_FOUND;
				}
				
			    public String FASHION_NOT_FOUND;

				public String getFASHION_NOT_FOUND () {
					return this.FASHION_NOT_FOUND;
				}
				
			    public String PRODUCT_STATUS_NOT_FOUND;

				public String getPRODUCT_STATUS_NOT_FOUND () {
					return this.PRODUCT_STATUS_NOT_FOUND;
				}
				
			    public String PRODUCT_TIER_NOT_FOUND;

				public String getPRODUCT_TIER_NOT_FOUND () {
					return this.PRODUCT_TIER_NOT_FOUND;
				}
				
			    public String SIZE_RATIO_SPLIT_NOT_FOUND;

				public String getSIZE_RATIO_SPLIT_NOT_FOUND () {
					return this.SIZE_RATIO_SPLIT_NOT_FOUND;
				}
				
			    public String ATTRIBUTE_NOT_FOUND;

				public String getATTRIBUTE_NOT_FOUND () {
					return this.ATTRIBUTE_NOT_FOUND;
				}
				
			    public String UNITS_NOT_FOUND;

				public String getUNITS_NOT_FOUND () {
					return this.UNITS_NOT_FOUND;
				}
				
			    public String COO_NOT_FOUND;

				public String getCOO_NOT_FOUND () {
					return this.COO_NOT_FOUND;
				}
				
			    public String CM_SIZE_NOT_FOUND;

				public String getCM_SIZE_NOT_FOUND () {
					return this.CM_SIZE_NOT_FOUND;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_BUY_VALIDATION.length) {
				if(length < 1024 && commonByteArray_DEV_BUY_VALIDATION.length == 0) {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[1024];
				} else {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_BUY_VALIDATION, 0, length);
			strReturn = new String(commonByteArray_DEV_BUY_VALIDATION, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_BUY_VALIDATION) {

        	try {

        		int length = 0;
		
						this.LINE_NUMBER = readInteger(dis);
					
					this.DYNAMICS_COLOR = readString(dis);
					
					this.DYNAMICS_BRAND = readString(dis);
					
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
					this.BRAND_NOT_FOUND = readString(dis);
					
					this.SEASON_NOT_FOUND = readString(dis);
					
					this.COLOR_NOT_FOUND = readString(dis);
					
					this.CATEGORY_NOT_FOUND = readString(dis);
					
					this.REF_NOT_FOUND = readString(dis);
					
					this.DESCRIPTION_NOT_FOUND = readString(dis);
					
					this.STYLE_NOT_FOUND = readString(dis);
					
					this.COLOR_NAME_NOT_FOUND = readString(dis);
					
					this.LBL_NOT_FOUND = readString(dis);
					
					this.STYLE_COLOR_NOT_FOUND = readString(dis);
					
					this.STYLECOLORLABEL_NOT_FOUND = readString(dis);
					
					this.GENDER_NOT_FOUND = readString(dis);
					
					this.AGE_RANGE_NOT_FOUND = readString(dis);
					
					this.SIZE_RANGE_NOT_FOUND = readString(dis);
					
					this.SIZE_NOT_FOUND = readString(dis);
					
					this.US_SIZE_NOT_FOUND = readString(dis);
					
					this.PRODUCT_NOT_FOUND = readString(dis);
					
					this.FASHION_NOT_FOUND = readString(dis);
					
					this.PRODUCT_STATUS_NOT_FOUND = readString(dis);
					
					this.PRODUCT_TIER_NOT_FOUND = readString(dis);
					
					this.SIZE_RATIO_SPLIT_NOT_FOUND = readString(dis);
					
					this.ATTRIBUTE_NOT_FOUND = readString(dis);
					
					this.UNITS_NOT_FOUND = readString(dis);
					
					this.COO_NOT_FOUND = readString(dis);
					
					this.CM_SIZE_NOT_FOUND = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.LINE_NUMBER,dos);
					
					// String
				
						writeString(this.DYNAMICS_COLOR,dos);
					
					// String
				
						writeString(this.DYNAMICS_BRAND,dos);
					
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
					// String
				
						writeString(this.BRAND_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SEASON_NOT_FOUND,dos);
					
					// String
				
						writeString(this.COLOR_NOT_FOUND,dos);
					
					// String
				
						writeString(this.CATEGORY_NOT_FOUND,dos);
					
					// String
				
						writeString(this.REF_NOT_FOUND,dos);
					
					// String
				
						writeString(this.DESCRIPTION_NOT_FOUND,dos);
					
					// String
				
						writeString(this.STYLE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.COLOR_NAME_NOT_FOUND,dos);
					
					// String
				
						writeString(this.LBL_NOT_FOUND,dos);
					
					// String
				
						writeString(this.STYLE_COLOR_NOT_FOUND,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL_NOT_FOUND,dos);
					
					// String
				
						writeString(this.GENDER_NOT_FOUND,dos);
					
					// String
				
						writeString(this.AGE_RANGE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SIZE_RANGE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SIZE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.US_SIZE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.PRODUCT_NOT_FOUND,dos);
					
					// String
				
						writeString(this.FASHION_NOT_FOUND,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS_NOT_FOUND,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT_NOT_FOUND,dos);
					
					// String
				
						writeString(this.ATTRIBUTE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.UNITS_NOT_FOUND,dos);
					
					// String
				
						writeString(this.COO_NOT_FOUND,dos);
					
					// String
				
						writeString(this.CM_SIZE_NOT_FOUND,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("LINE_NUMBER="+String.valueOf(LINE_NUMBER));
		sb.append(",DYNAMICS_COLOR="+DYNAMICS_COLOR);
		sb.append(",DYNAMICS_BRAND="+DYNAMICS_BRAND);
		sb.append(",BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
		sb.append(",BRAND_NOT_FOUND="+BRAND_NOT_FOUND);
		sb.append(",SEASON_NOT_FOUND="+SEASON_NOT_FOUND);
		sb.append(",COLOR_NOT_FOUND="+COLOR_NOT_FOUND);
		sb.append(",CATEGORY_NOT_FOUND="+CATEGORY_NOT_FOUND);
		sb.append(",REF_NOT_FOUND="+REF_NOT_FOUND);
		sb.append(",DESCRIPTION_NOT_FOUND="+DESCRIPTION_NOT_FOUND);
		sb.append(",STYLE_NOT_FOUND="+STYLE_NOT_FOUND);
		sb.append(",COLOR_NAME_NOT_FOUND="+COLOR_NAME_NOT_FOUND);
		sb.append(",LBL_NOT_FOUND="+LBL_NOT_FOUND);
		sb.append(",STYLE_COLOR_NOT_FOUND="+STYLE_COLOR_NOT_FOUND);
		sb.append(",STYLECOLORLABEL_NOT_FOUND="+STYLECOLORLABEL_NOT_FOUND);
		sb.append(",GENDER_NOT_FOUND="+GENDER_NOT_FOUND);
		sb.append(",AGE_RANGE_NOT_FOUND="+AGE_RANGE_NOT_FOUND);
		sb.append(",SIZE_RANGE_NOT_FOUND="+SIZE_RANGE_NOT_FOUND);
		sb.append(",SIZE_NOT_FOUND="+SIZE_NOT_FOUND);
		sb.append(",US_SIZE_NOT_FOUND="+US_SIZE_NOT_FOUND);
		sb.append(",PRODUCT_NOT_FOUND="+PRODUCT_NOT_FOUND);
		sb.append(",FASHION_NOT_FOUND="+FASHION_NOT_FOUND);
		sb.append(",PRODUCT_STATUS_NOT_FOUND="+PRODUCT_STATUS_NOT_FOUND);
		sb.append(",PRODUCT_TIER_NOT_FOUND="+PRODUCT_TIER_NOT_FOUND);
		sb.append(",SIZE_RATIO_SPLIT_NOT_FOUND="+SIZE_RATIO_SPLIT_NOT_FOUND);
		sb.append(",ATTRIBUTE_NOT_FOUND="+ATTRIBUTE_NOT_FOUND);
		sb.append(",UNITS_NOT_FOUND="+UNITS_NOT_FOUND);
		sb.append(",COO_NOT_FOUND="+COO_NOT_FOUND);
		sb.append(",CM_SIZE_NOT_FOUND="+CM_SIZE_NOT_FOUND);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_cm_size_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_cmStruct implements routines.system.IPersistableRow<sortie_cmStruct> {
    final static byte[] commonByteArrayLock_DEV_BUY_VALIDATION = new byte[0];
    static byte[] commonByteArray_DEV_BUY_VALIDATION = new byte[0];

	
			    public Integer LINE_NUMBER;

				public Integer getLINE_NUMBER () {
					return this.LINE_NUMBER;
				}
				
			    public String DYNAMICS_COLOR;

				public String getDYNAMICS_COLOR () {
					return this.DYNAMICS_COLOR;
				}
				
			    public String DYNAMICS_BRAND;

				public String getDYNAMICS_BRAND () {
					return this.DYNAMICS_BRAND;
				}
				
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				
			    public String BRAND_NOT_FOUND;

				public String getBRAND_NOT_FOUND () {
					return this.BRAND_NOT_FOUND;
				}
				
			    public String SEASON_NOT_FOUND;

				public String getSEASON_NOT_FOUND () {
					return this.SEASON_NOT_FOUND;
				}
				
			    public String COLOR_NOT_FOUND;

				public String getCOLOR_NOT_FOUND () {
					return this.COLOR_NOT_FOUND;
				}
				
			    public String CATEGORY_NOT_FOUND;

				public String getCATEGORY_NOT_FOUND () {
					return this.CATEGORY_NOT_FOUND;
				}
				
			    public String REF_NOT_FOUND;

				public String getREF_NOT_FOUND () {
					return this.REF_NOT_FOUND;
				}
				
			    public String DESCRIPTION_NOT_FOUND;

				public String getDESCRIPTION_NOT_FOUND () {
					return this.DESCRIPTION_NOT_FOUND;
				}
				
			    public String STYLE_NOT_FOUND;

				public String getSTYLE_NOT_FOUND () {
					return this.STYLE_NOT_FOUND;
				}
				
			    public String COLOR_NAME_NOT_FOUND;

				public String getCOLOR_NAME_NOT_FOUND () {
					return this.COLOR_NAME_NOT_FOUND;
				}
				
			    public String LBL_NOT_FOUND;

				public String getLBL_NOT_FOUND () {
					return this.LBL_NOT_FOUND;
				}
				
			    public String STYLE_COLOR_NOT_FOUND;

				public String getSTYLE_COLOR_NOT_FOUND () {
					return this.STYLE_COLOR_NOT_FOUND;
				}
				
			    public String STYLECOLORLABEL_NOT_FOUND;

				public String getSTYLECOLORLABEL_NOT_FOUND () {
					return this.STYLECOLORLABEL_NOT_FOUND;
				}
				
			    public String GENDER_NOT_FOUND;

				public String getGENDER_NOT_FOUND () {
					return this.GENDER_NOT_FOUND;
				}
				
			    public String AGE_RANGE_NOT_FOUND;

				public String getAGE_RANGE_NOT_FOUND () {
					return this.AGE_RANGE_NOT_FOUND;
				}
				
			    public String SIZE_RANGE_NOT_FOUND;

				public String getSIZE_RANGE_NOT_FOUND () {
					return this.SIZE_RANGE_NOT_FOUND;
				}
				
			    public String SIZE_NOT_FOUND;

				public String getSIZE_NOT_FOUND () {
					return this.SIZE_NOT_FOUND;
				}
				
			    public String US_SIZE_NOT_FOUND;

				public String getUS_SIZE_NOT_FOUND () {
					return this.US_SIZE_NOT_FOUND;
				}
				
			    public String PRODUCT_NOT_FOUND;

				public String getPRODUCT_NOT_FOUND () {
					return this.PRODUCT_NOT_FOUND;
				}
				
			    public String FASHION_NOT_FOUND;

				public String getFASHION_NOT_FOUND () {
					return this.FASHION_NOT_FOUND;
				}
				
			    public String PRODUCT_STATUS_NOT_FOUND;

				public String getPRODUCT_STATUS_NOT_FOUND () {
					return this.PRODUCT_STATUS_NOT_FOUND;
				}
				
			    public String PRODUCT_TIER_NOT_FOUND;

				public String getPRODUCT_TIER_NOT_FOUND () {
					return this.PRODUCT_TIER_NOT_FOUND;
				}
				
			    public String SIZE_RATIO_SPLIT_NOT_FOUND;

				public String getSIZE_RATIO_SPLIT_NOT_FOUND () {
					return this.SIZE_RATIO_SPLIT_NOT_FOUND;
				}
				
			    public String ATTRIBUTE_NOT_FOUND;

				public String getATTRIBUTE_NOT_FOUND () {
					return this.ATTRIBUTE_NOT_FOUND;
				}
				
			    public String UNITS_NOT_FOUND;

				public String getUNITS_NOT_FOUND () {
					return this.UNITS_NOT_FOUND;
				}
				
			    public String COO_NOT_FOUND;

				public String getCOO_NOT_FOUND () {
					return this.COO_NOT_FOUND;
				}
				
			    public String CM_SIZE_NOT_FOUND;

				public String getCM_SIZE_NOT_FOUND () {
					return this.CM_SIZE_NOT_FOUND;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_BUY_VALIDATION.length) {
				if(length < 1024 && commonByteArray_DEV_BUY_VALIDATION.length == 0) {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[1024];
				} else {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_BUY_VALIDATION, 0, length);
			strReturn = new String(commonByteArray_DEV_BUY_VALIDATION, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_BUY_VALIDATION) {

        	try {

        		int length = 0;
		
						this.LINE_NUMBER = readInteger(dis);
					
					this.DYNAMICS_COLOR = readString(dis);
					
					this.DYNAMICS_BRAND = readString(dis);
					
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
					this.BRAND_NOT_FOUND = readString(dis);
					
					this.SEASON_NOT_FOUND = readString(dis);
					
					this.COLOR_NOT_FOUND = readString(dis);
					
					this.CATEGORY_NOT_FOUND = readString(dis);
					
					this.REF_NOT_FOUND = readString(dis);
					
					this.DESCRIPTION_NOT_FOUND = readString(dis);
					
					this.STYLE_NOT_FOUND = readString(dis);
					
					this.COLOR_NAME_NOT_FOUND = readString(dis);
					
					this.LBL_NOT_FOUND = readString(dis);
					
					this.STYLE_COLOR_NOT_FOUND = readString(dis);
					
					this.STYLECOLORLABEL_NOT_FOUND = readString(dis);
					
					this.GENDER_NOT_FOUND = readString(dis);
					
					this.AGE_RANGE_NOT_FOUND = readString(dis);
					
					this.SIZE_RANGE_NOT_FOUND = readString(dis);
					
					this.SIZE_NOT_FOUND = readString(dis);
					
					this.US_SIZE_NOT_FOUND = readString(dis);
					
					this.PRODUCT_NOT_FOUND = readString(dis);
					
					this.FASHION_NOT_FOUND = readString(dis);
					
					this.PRODUCT_STATUS_NOT_FOUND = readString(dis);
					
					this.PRODUCT_TIER_NOT_FOUND = readString(dis);
					
					this.SIZE_RATIO_SPLIT_NOT_FOUND = readString(dis);
					
					this.ATTRIBUTE_NOT_FOUND = readString(dis);
					
					this.UNITS_NOT_FOUND = readString(dis);
					
					this.COO_NOT_FOUND = readString(dis);
					
					this.CM_SIZE_NOT_FOUND = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.LINE_NUMBER,dos);
					
					// String
				
						writeString(this.DYNAMICS_COLOR,dos);
					
					// String
				
						writeString(this.DYNAMICS_BRAND,dos);
					
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
					// String
				
						writeString(this.BRAND_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SEASON_NOT_FOUND,dos);
					
					// String
				
						writeString(this.COLOR_NOT_FOUND,dos);
					
					// String
				
						writeString(this.CATEGORY_NOT_FOUND,dos);
					
					// String
				
						writeString(this.REF_NOT_FOUND,dos);
					
					// String
				
						writeString(this.DESCRIPTION_NOT_FOUND,dos);
					
					// String
				
						writeString(this.STYLE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.COLOR_NAME_NOT_FOUND,dos);
					
					// String
				
						writeString(this.LBL_NOT_FOUND,dos);
					
					// String
				
						writeString(this.STYLE_COLOR_NOT_FOUND,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL_NOT_FOUND,dos);
					
					// String
				
						writeString(this.GENDER_NOT_FOUND,dos);
					
					// String
				
						writeString(this.AGE_RANGE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SIZE_RANGE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SIZE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.US_SIZE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.PRODUCT_NOT_FOUND,dos);
					
					// String
				
						writeString(this.FASHION_NOT_FOUND,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS_NOT_FOUND,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT_NOT_FOUND,dos);
					
					// String
				
						writeString(this.ATTRIBUTE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.UNITS_NOT_FOUND,dos);
					
					// String
				
						writeString(this.COO_NOT_FOUND,dos);
					
					// String
				
						writeString(this.CM_SIZE_NOT_FOUND,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("LINE_NUMBER="+String.valueOf(LINE_NUMBER));
		sb.append(",DYNAMICS_COLOR="+DYNAMICS_COLOR);
		sb.append(",DYNAMICS_BRAND="+DYNAMICS_BRAND);
		sb.append(",BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
		sb.append(",BRAND_NOT_FOUND="+BRAND_NOT_FOUND);
		sb.append(",SEASON_NOT_FOUND="+SEASON_NOT_FOUND);
		sb.append(",COLOR_NOT_FOUND="+COLOR_NOT_FOUND);
		sb.append(",CATEGORY_NOT_FOUND="+CATEGORY_NOT_FOUND);
		sb.append(",REF_NOT_FOUND="+REF_NOT_FOUND);
		sb.append(",DESCRIPTION_NOT_FOUND="+DESCRIPTION_NOT_FOUND);
		sb.append(",STYLE_NOT_FOUND="+STYLE_NOT_FOUND);
		sb.append(",COLOR_NAME_NOT_FOUND="+COLOR_NAME_NOT_FOUND);
		sb.append(",LBL_NOT_FOUND="+LBL_NOT_FOUND);
		sb.append(",STYLE_COLOR_NOT_FOUND="+STYLE_COLOR_NOT_FOUND);
		sb.append(",STYLECOLORLABEL_NOT_FOUND="+STYLECOLORLABEL_NOT_FOUND);
		sb.append(",GENDER_NOT_FOUND="+GENDER_NOT_FOUND);
		sb.append(",AGE_RANGE_NOT_FOUND="+AGE_RANGE_NOT_FOUND);
		sb.append(",SIZE_RANGE_NOT_FOUND="+SIZE_RANGE_NOT_FOUND);
		sb.append(",SIZE_NOT_FOUND="+SIZE_NOT_FOUND);
		sb.append(",US_SIZE_NOT_FOUND="+US_SIZE_NOT_FOUND);
		sb.append(",PRODUCT_NOT_FOUND="+PRODUCT_NOT_FOUND);
		sb.append(",FASHION_NOT_FOUND="+FASHION_NOT_FOUND);
		sb.append(",PRODUCT_STATUS_NOT_FOUND="+PRODUCT_STATUS_NOT_FOUND);
		sb.append(",PRODUCT_TIER_NOT_FOUND="+PRODUCT_TIER_NOT_FOUND);
		sb.append(",SIZE_RATIO_SPLIT_NOT_FOUND="+SIZE_RATIO_SPLIT_NOT_FOUND);
		sb.append(",ATTRIBUTE_NOT_FOUND="+ATTRIBUTE_NOT_FOUND);
		sb.append(",UNITS_NOT_FOUND="+UNITS_NOT_FOUND);
		sb.append(",COO_NOT_FOUND="+COO_NOT_FOUND);
		sb.append(",CM_SIZE_NOT_FOUND="+CM_SIZE_NOT_FOUND);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_cmStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_size_range_Struct implements routines.system.IPersistableRow<sortie_size_range_Struct> {
    final static byte[] commonByteArrayLock_DEV_BUY_VALIDATION = new byte[0];
    static byte[] commonByteArray_DEV_BUY_VALIDATION = new byte[0];

	
			    public Integer LINE_NUMBER;

				public Integer getLINE_NUMBER () {
					return this.LINE_NUMBER;
				}
				
			    public String DYNAMICS_COLOR;

				public String getDYNAMICS_COLOR () {
					return this.DYNAMICS_COLOR;
				}
				
			    public String DYNAMICS_BRAND;

				public String getDYNAMICS_BRAND () {
					return this.DYNAMICS_BRAND;
				}
				
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				
			    public String BRAND_NOT_FOUND;

				public String getBRAND_NOT_FOUND () {
					return this.BRAND_NOT_FOUND;
				}
				
			    public String SEASON_NOT_FOUND;

				public String getSEASON_NOT_FOUND () {
					return this.SEASON_NOT_FOUND;
				}
				
			    public String COLOR_NOT_FOUND;

				public String getCOLOR_NOT_FOUND () {
					return this.COLOR_NOT_FOUND;
				}
				
			    public String CATEGORY_NOT_FOUND;

				public String getCATEGORY_NOT_FOUND () {
					return this.CATEGORY_NOT_FOUND;
				}
				
			    public String REF_NOT_FOUND;

				public String getREF_NOT_FOUND () {
					return this.REF_NOT_FOUND;
				}
				
			    public String DESCRIPTION_NOT_FOUND;

				public String getDESCRIPTION_NOT_FOUND () {
					return this.DESCRIPTION_NOT_FOUND;
				}
				
			    public String STYLE_NOT_FOUND;

				public String getSTYLE_NOT_FOUND () {
					return this.STYLE_NOT_FOUND;
				}
				
			    public String COLOR_NAME_NOT_FOUND;

				public String getCOLOR_NAME_NOT_FOUND () {
					return this.COLOR_NAME_NOT_FOUND;
				}
				
			    public String LBL_NOT_FOUND;

				public String getLBL_NOT_FOUND () {
					return this.LBL_NOT_FOUND;
				}
				
			    public String STYLE_COLOR_NOT_FOUND;

				public String getSTYLE_COLOR_NOT_FOUND () {
					return this.STYLE_COLOR_NOT_FOUND;
				}
				
			    public String STYLECOLORLABEL_NOT_FOUND;

				public String getSTYLECOLORLABEL_NOT_FOUND () {
					return this.STYLECOLORLABEL_NOT_FOUND;
				}
				
			    public String GENDER_NOT_FOUND;

				public String getGENDER_NOT_FOUND () {
					return this.GENDER_NOT_FOUND;
				}
				
			    public String AGE_RANGE_NOT_FOUND;

				public String getAGE_RANGE_NOT_FOUND () {
					return this.AGE_RANGE_NOT_FOUND;
				}
				
			    public String SIZE_RANGE_NOT_FOUND;

				public String getSIZE_RANGE_NOT_FOUND () {
					return this.SIZE_RANGE_NOT_FOUND;
				}
				
			    public String SIZE_NOT_FOUND;

				public String getSIZE_NOT_FOUND () {
					return this.SIZE_NOT_FOUND;
				}
				
			    public String US_SIZE_NOT_FOUND;

				public String getUS_SIZE_NOT_FOUND () {
					return this.US_SIZE_NOT_FOUND;
				}
				
			    public String PRODUCT_NOT_FOUND;

				public String getPRODUCT_NOT_FOUND () {
					return this.PRODUCT_NOT_FOUND;
				}
				
			    public String FASHION_NOT_FOUND;

				public String getFASHION_NOT_FOUND () {
					return this.FASHION_NOT_FOUND;
				}
				
			    public String PRODUCT_STATUS_NOT_FOUND;

				public String getPRODUCT_STATUS_NOT_FOUND () {
					return this.PRODUCT_STATUS_NOT_FOUND;
				}
				
			    public String PRODUCT_TIER_NOT_FOUND;

				public String getPRODUCT_TIER_NOT_FOUND () {
					return this.PRODUCT_TIER_NOT_FOUND;
				}
				
			    public String SIZE_RATIO_SPLIT_NOT_FOUND;

				public String getSIZE_RATIO_SPLIT_NOT_FOUND () {
					return this.SIZE_RATIO_SPLIT_NOT_FOUND;
				}
				
			    public String ATTRIBUTE_NOT_FOUND;

				public String getATTRIBUTE_NOT_FOUND () {
					return this.ATTRIBUTE_NOT_FOUND;
				}
				
			    public String UNITS_NOT_FOUND;

				public String getUNITS_NOT_FOUND () {
					return this.UNITS_NOT_FOUND;
				}
				
			    public String COO_NOT_FOUND;

				public String getCOO_NOT_FOUND () {
					return this.COO_NOT_FOUND;
				}
				
			    public String CM_SIZE_NOT_FOUND;

				public String getCM_SIZE_NOT_FOUND () {
					return this.CM_SIZE_NOT_FOUND;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_BUY_VALIDATION.length) {
				if(length < 1024 && commonByteArray_DEV_BUY_VALIDATION.length == 0) {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[1024];
				} else {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_BUY_VALIDATION, 0, length);
			strReturn = new String(commonByteArray_DEV_BUY_VALIDATION, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_BUY_VALIDATION) {

        	try {

        		int length = 0;
		
						this.LINE_NUMBER = readInteger(dis);
					
					this.DYNAMICS_COLOR = readString(dis);
					
					this.DYNAMICS_BRAND = readString(dis);
					
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
					this.BRAND_NOT_FOUND = readString(dis);
					
					this.SEASON_NOT_FOUND = readString(dis);
					
					this.COLOR_NOT_FOUND = readString(dis);
					
					this.CATEGORY_NOT_FOUND = readString(dis);
					
					this.REF_NOT_FOUND = readString(dis);
					
					this.DESCRIPTION_NOT_FOUND = readString(dis);
					
					this.STYLE_NOT_FOUND = readString(dis);
					
					this.COLOR_NAME_NOT_FOUND = readString(dis);
					
					this.LBL_NOT_FOUND = readString(dis);
					
					this.STYLE_COLOR_NOT_FOUND = readString(dis);
					
					this.STYLECOLORLABEL_NOT_FOUND = readString(dis);
					
					this.GENDER_NOT_FOUND = readString(dis);
					
					this.AGE_RANGE_NOT_FOUND = readString(dis);
					
					this.SIZE_RANGE_NOT_FOUND = readString(dis);
					
					this.SIZE_NOT_FOUND = readString(dis);
					
					this.US_SIZE_NOT_FOUND = readString(dis);
					
					this.PRODUCT_NOT_FOUND = readString(dis);
					
					this.FASHION_NOT_FOUND = readString(dis);
					
					this.PRODUCT_STATUS_NOT_FOUND = readString(dis);
					
					this.PRODUCT_TIER_NOT_FOUND = readString(dis);
					
					this.SIZE_RATIO_SPLIT_NOT_FOUND = readString(dis);
					
					this.ATTRIBUTE_NOT_FOUND = readString(dis);
					
					this.UNITS_NOT_FOUND = readString(dis);
					
					this.COO_NOT_FOUND = readString(dis);
					
					this.CM_SIZE_NOT_FOUND = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.LINE_NUMBER,dos);
					
					// String
				
						writeString(this.DYNAMICS_COLOR,dos);
					
					// String
				
						writeString(this.DYNAMICS_BRAND,dos);
					
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
					// String
				
						writeString(this.BRAND_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SEASON_NOT_FOUND,dos);
					
					// String
				
						writeString(this.COLOR_NOT_FOUND,dos);
					
					// String
				
						writeString(this.CATEGORY_NOT_FOUND,dos);
					
					// String
				
						writeString(this.REF_NOT_FOUND,dos);
					
					// String
				
						writeString(this.DESCRIPTION_NOT_FOUND,dos);
					
					// String
				
						writeString(this.STYLE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.COLOR_NAME_NOT_FOUND,dos);
					
					// String
				
						writeString(this.LBL_NOT_FOUND,dos);
					
					// String
				
						writeString(this.STYLE_COLOR_NOT_FOUND,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL_NOT_FOUND,dos);
					
					// String
				
						writeString(this.GENDER_NOT_FOUND,dos);
					
					// String
				
						writeString(this.AGE_RANGE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SIZE_RANGE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SIZE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.US_SIZE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.PRODUCT_NOT_FOUND,dos);
					
					// String
				
						writeString(this.FASHION_NOT_FOUND,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS_NOT_FOUND,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT_NOT_FOUND,dos);
					
					// String
				
						writeString(this.ATTRIBUTE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.UNITS_NOT_FOUND,dos);
					
					// String
				
						writeString(this.COO_NOT_FOUND,dos);
					
					// String
				
						writeString(this.CM_SIZE_NOT_FOUND,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("LINE_NUMBER="+String.valueOf(LINE_NUMBER));
		sb.append(",DYNAMICS_COLOR="+DYNAMICS_COLOR);
		sb.append(",DYNAMICS_BRAND="+DYNAMICS_BRAND);
		sb.append(",BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
		sb.append(",BRAND_NOT_FOUND="+BRAND_NOT_FOUND);
		sb.append(",SEASON_NOT_FOUND="+SEASON_NOT_FOUND);
		sb.append(",COLOR_NOT_FOUND="+COLOR_NOT_FOUND);
		sb.append(",CATEGORY_NOT_FOUND="+CATEGORY_NOT_FOUND);
		sb.append(",REF_NOT_FOUND="+REF_NOT_FOUND);
		sb.append(",DESCRIPTION_NOT_FOUND="+DESCRIPTION_NOT_FOUND);
		sb.append(",STYLE_NOT_FOUND="+STYLE_NOT_FOUND);
		sb.append(",COLOR_NAME_NOT_FOUND="+COLOR_NAME_NOT_FOUND);
		sb.append(",LBL_NOT_FOUND="+LBL_NOT_FOUND);
		sb.append(",STYLE_COLOR_NOT_FOUND="+STYLE_COLOR_NOT_FOUND);
		sb.append(",STYLECOLORLABEL_NOT_FOUND="+STYLECOLORLABEL_NOT_FOUND);
		sb.append(",GENDER_NOT_FOUND="+GENDER_NOT_FOUND);
		sb.append(",AGE_RANGE_NOT_FOUND="+AGE_RANGE_NOT_FOUND);
		sb.append(",SIZE_RANGE_NOT_FOUND="+SIZE_RANGE_NOT_FOUND);
		sb.append(",SIZE_NOT_FOUND="+SIZE_NOT_FOUND);
		sb.append(",US_SIZE_NOT_FOUND="+US_SIZE_NOT_FOUND);
		sb.append(",PRODUCT_NOT_FOUND="+PRODUCT_NOT_FOUND);
		sb.append(",FASHION_NOT_FOUND="+FASHION_NOT_FOUND);
		sb.append(",PRODUCT_STATUS_NOT_FOUND="+PRODUCT_STATUS_NOT_FOUND);
		sb.append(",PRODUCT_TIER_NOT_FOUND="+PRODUCT_TIER_NOT_FOUND);
		sb.append(",SIZE_RATIO_SPLIT_NOT_FOUND="+SIZE_RATIO_SPLIT_NOT_FOUND);
		sb.append(",ATTRIBUTE_NOT_FOUND="+ATTRIBUTE_NOT_FOUND);
		sb.append(",UNITS_NOT_FOUND="+UNITS_NOT_FOUND);
		sb.append(",COO_NOT_FOUND="+COO_NOT_FOUND);
		sb.append(",CM_SIZE_NOT_FOUND="+CM_SIZE_NOT_FOUND);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_size_range_Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_age_range_Struct implements routines.system.IPersistableRow<sortie_age_range_Struct> {
    final static byte[] commonByteArrayLock_DEV_BUY_VALIDATION = new byte[0];
    static byte[] commonByteArray_DEV_BUY_VALIDATION = new byte[0];

	
			    public Integer LINE_NUMBER;

				public Integer getLINE_NUMBER () {
					return this.LINE_NUMBER;
				}
				
			    public String DYNAMICS_COLOR;

				public String getDYNAMICS_COLOR () {
					return this.DYNAMICS_COLOR;
				}
				
			    public String DYNAMICS_BRAND;

				public String getDYNAMICS_BRAND () {
					return this.DYNAMICS_BRAND;
				}
				
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				
			    public String BRAND_NOT_FOUND;

				public String getBRAND_NOT_FOUND () {
					return this.BRAND_NOT_FOUND;
				}
				
			    public String SEASON_NOT_FOUND;

				public String getSEASON_NOT_FOUND () {
					return this.SEASON_NOT_FOUND;
				}
				
			    public String COLOR_NOT_FOUND;

				public String getCOLOR_NOT_FOUND () {
					return this.COLOR_NOT_FOUND;
				}
				
			    public String CATEGORY_NOT_FOUND;

				public String getCATEGORY_NOT_FOUND () {
					return this.CATEGORY_NOT_FOUND;
				}
				
			    public String REF_NOT_FOUND;

				public String getREF_NOT_FOUND () {
					return this.REF_NOT_FOUND;
				}
				
			    public String DESCRIPTION_NOT_FOUND;

				public String getDESCRIPTION_NOT_FOUND () {
					return this.DESCRIPTION_NOT_FOUND;
				}
				
			    public String STYLE_NOT_FOUND;

				public String getSTYLE_NOT_FOUND () {
					return this.STYLE_NOT_FOUND;
				}
				
			    public String COLOR_NAME_NOT_FOUND;

				public String getCOLOR_NAME_NOT_FOUND () {
					return this.COLOR_NAME_NOT_FOUND;
				}
				
			    public String LBL_NOT_FOUND;

				public String getLBL_NOT_FOUND () {
					return this.LBL_NOT_FOUND;
				}
				
			    public String STYLE_COLOR_NOT_FOUND;

				public String getSTYLE_COLOR_NOT_FOUND () {
					return this.STYLE_COLOR_NOT_FOUND;
				}
				
			    public String STYLECOLORLABEL_NOT_FOUND;

				public String getSTYLECOLORLABEL_NOT_FOUND () {
					return this.STYLECOLORLABEL_NOT_FOUND;
				}
				
			    public String GENDER_NOT_FOUND;

				public String getGENDER_NOT_FOUND () {
					return this.GENDER_NOT_FOUND;
				}
				
			    public String AGE_RANGE_NOT_FOUND;

				public String getAGE_RANGE_NOT_FOUND () {
					return this.AGE_RANGE_NOT_FOUND;
				}
				
			    public String SIZE_RANGE_NOT_FOUND;

				public String getSIZE_RANGE_NOT_FOUND () {
					return this.SIZE_RANGE_NOT_FOUND;
				}
				
			    public String SIZE_NOT_FOUND;

				public String getSIZE_NOT_FOUND () {
					return this.SIZE_NOT_FOUND;
				}
				
			    public String US_SIZE_NOT_FOUND;

				public String getUS_SIZE_NOT_FOUND () {
					return this.US_SIZE_NOT_FOUND;
				}
				
			    public String PRODUCT_NOT_FOUND;

				public String getPRODUCT_NOT_FOUND () {
					return this.PRODUCT_NOT_FOUND;
				}
				
			    public String FASHION_NOT_FOUND;

				public String getFASHION_NOT_FOUND () {
					return this.FASHION_NOT_FOUND;
				}
				
			    public String PRODUCT_STATUS_NOT_FOUND;

				public String getPRODUCT_STATUS_NOT_FOUND () {
					return this.PRODUCT_STATUS_NOT_FOUND;
				}
				
			    public String PRODUCT_TIER_NOT_FOUND;

				public String getPRODUCT_TIER_NOT_FOUND () {
					return this.PRODUCT_TIER_NOT_FOUND;
				}
				
			    public String SIZE_RATIO_SPLIT_NOT_FOUND;

				public String getSIZE_RATIO_SPLIT_NOT_FOUND () {
					return this.SIZE_RATIO_SPLIT_NOT_FOUND;
				}
				
			    public String ATTRIBUTE_NOT_FOUND;

				public String getATTRIBUTE_NOT_FOUND () {
					return this.ATTRIBUTE_NOT_FOUND;
				}
				
			    public String UNITS_NOT_FOUND;

				public String getUNITS_NOT_FOUND () {
					return this.UNITS_NOT_FOUND;
				}
				
			    public String COO_NOT_FOUND;

				public String getCOO_NOT_FOUND () {
					return this.COO_NOT_FOUND;
				}
				
			    public String CM_SIZE_NOT_FOUND;

				public String getCM_SIZE_NOT_FOUND () {
					return this.CM_SIZE_NOT_FOUND;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_BUY_VALIDATION.length) {
				if(length < 1024 && commonByteArray_DEV_BUY_VALIDATION.length == 0) {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[1024];
				} else {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_BUY_VALIDATION, 0, length);
			strReturn = new String(commonByteArray_DEV_BUY_VALIDATION, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_BUY_VALIDATION) {

        	try {

        		int length = 0;
		
						this.LINE_NUMBER = readInteger(dis);
					
					this.DYNAMICS_COLOR = readString(dis);
					
					this.DYNAMICS_BRAND = readString(dis);
					
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
					this.BRAND_NOT_FOUND = readString(dis);
					
					this.SEASON_NOT_FOUND = readString(dis);
					
					this.COLOR_NOT_FOUND = readString(dis);
					
					this.CATEGORY_NOT_FOUND = readString(dis);
					
					this.REF_NOT_FOUND = readString(dis);
					
					this.DESCRIPTION_NOT_FOUND = readString(dis);
					
					this.STYLE_NOT_FOUND = readString(dis);
					
					this.COLOR_NAME_NOT_FOUND = readString(dis);
					
					this.LBL_NOT_FOUND = readString(dis);
					
					this.STYLE_COLOR_NOT_FOUND = readString(dis);
					
					this.STYLECOLORLABEL_NOT_FOUND = readString(dis);
					
					this.GENDER_NOT_FOUND = readString(dis);
					
					this.AGE_RANGE_NOT_FOUND = readString(dis);
					
					this.SIZE_RANGE_NOT_FOUND = readString(dis);
					
					this.SIZE_NOT_FOUND = readString(dis);
					
					this.US_SIZE_NOT_FOUND = readString(dis);
					
					this.PRODUCT_NOT_FOUND = readString(dis);
					
					this.FASHION_NOT_FOUND = readString(dis);
					
					this.PRODUCT_STATUS_NOT_FOUND = readString(dis);
					
					this.PRODUCT_TIER_NOT_FOUND = readString(dis);
					
					this.SIZE_RATIO_SPLIT_NOT_FOUND = readString(dis);
					
					this.ATTRIBUTE_NOT_FOUND = readString(dis);
					
					this.UNITS_NOT_FOUND = readString(dis);
					
					this.COO_NOT_FOUND = readString(dis);
					
					this.CM_SIZE_NOT_FOUND = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.LINE_NUMBER,dos);
					
					// String
				
						writeString(this.DYNAMICS_COLOR,dos);
					
					// String
				
						writeString(this.DYNAMICS_BRAND,dos);
					
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
					// String
				
						writeString(this.BRAND_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SEASON_NOT_FOUND,dos);
					
					// String
				
						writeString(this.COLOR_NOT_FOUND,dos);
					
					// String
				
						writeString(this.CATEGORY_NOT_FOUND,dos);
					
					// String
				
						writeString(this.REF_NOT_FOUND,dos);
					
					// String
				
						writeString(this.DESCRIPTION_NOT_FOUND,dos);
					
					// String
				
						writeString(this.STYLE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.COLOR_NAME_NOT_FOUND,dos);
					
					// String
				
						writeString(this.LBL_NOT_FOUND,dos);
					
					// String
				
						writeString(this.STYLE_COLOR_NOT_FOUND,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL_NOT_FOUND,dos);
					
					// String
				
						writeString(this.GENDER_NOT_FOUND,dos);
					
					// String
				
						writeString(this.AGE_RANGE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SIZE_RANGE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SIZE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.US_SIZE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.PRODUCT_NOT_FOUND,dos);
					
					// String
				
						writeString(this.FASHION_NOT_FOUND,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS_NOT_FOUND,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT_NOT_FOUND,dos);
					
					// String
				
						writeString(this.ATTRIBUTE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.UNITS_NOT_FOUND,dos);
					
					// String
				
						writeString(this.COO_NOT_FOUND,dos);
					
					// String
				
						writeString(this.CM_SIZE_NOT_FOUND,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("LINE_NUMBER="+String.valueOf(LINE_NUMBER));
		sb.append(",DYNAMICS_COLOR="+DYNAMICS_COLOR);
		sb.append(",DYNAMICS_BRAND="+DYNAMICS_BRAND);
		sb.append(",BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
		sb.append(",BRAND_NOT_FOUND="+BRAND_NOT_FOUND);
		sb.append(",SEASON_NOT_FOUND="+SEASON_NOT_FOUND);
		sb.append(",COLOR_NOT_FOUND="+COLOR_NOT_FOUND);
		sb.append(",CATEGORY_NOT_FOUND="+CATEGORY_NOT_FOUND);
		sb.append(",REF_NOT_FOUND="+REF_NOT_FOUND);
		sb.append(",DESCRIPTION_NOT_FOUND="+DESCRIPTION_NOT_FOUND);
		sb.append(",STYLE_NOT_FOUND="+STYLE_NOT_FOUND);
		sb.append(",COLOR_NAME_NOT_FOUND="+COLOR_NAME_NOT_FOUND);
		sb.append(",LBL_NOT_FOUND="+LBL_NOT_FOUND);
		sb.append(",STYLE_COLOR_NOT_FOUND="+STYLE_COLOR_NOT_FOUND);
		sb.append(",STYLECOLORLABEL_NOT_FOUND="+STYLECOLORLABEL_NOT_FOUND);
		sb.append(",GENDER_NOT_FOUND="+GENDER_NOT_FOUND);
		sb.append(",AGE_RANGE_NOT_FOUND="+AGE_RANGE_NOT_FOUND);
		sb.append(",SIZE_RANGE_NOT_FOUND="+SIZE_RANGE_NOT_FOUND);
		sb.append(",SIZE_NOT_FOUND="+SIZE_NOT_FOUND);
		sb.append(",US_SIZE_NOT_FOUND="+US_SIZE_NOT_FOUND);
		sb.append(",PRODUCT_NOT_FOUND="+PRODUCT_NOT_FOUND);
		sb.append(",FASHION_NOT_FOUND="+FASHION_NOT_FOUND);
		sb.append(",PRODUCT_STATUS_NOT_FOUND="+PRODUCT_STATUS_NOT_FOUND);
		sb.append(",PRODUCT_TIER_NOT_FOUND="+PRODUCT_TIER_NOT_FOUND);
		sb.append(",SIZE_RATIO_SPLIT_NOT_FOUND="+SIZE_RATIO_SPLIT_NOT_FOUND);
		sb.append(",ATTRIBUTE_NOT_FOUND="+ATTRIBUTE_NOT_FOUND);
		sb.append(",UNITS_NOT_FOUND="+UNITS_NOT_FOUND);
		sb.append(",COO_NOT_FOUND="+COO_NOT_FOUND);
		sb.append(",CM_SIZE_NOT_FOUND="+CM_SIZE_NOT_FOUND);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_age_range_Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_cooStruct implements routines.system.IPersistableRow<sortie_cooStruct> {
    final static byte[] commonByteArrayLock_DEV_BUY_VALIDATION = new byte[0];
    static byte[] commonByteArray_DEV_BUY_VALIDATION = new byte[0];

	
			    public Integer LINE_NUMBER;

				public Integer getLINE_NUMBER () {
					return this.LINE_NUMBER;
				}
				
			    public String DYNAMICS_COLOR;

				public String getDYNAMICS_COLOR () {
					return this.DYNAMICS_COLOR;
				}
				
			    public String DYNAMICS_BRAND;

				public String getDYNAMICS_BRAND () {
					return this.DYNAMICS_BRAND;
				}
				
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				
			    public String BRAND_NOT_FOUND;

				public String getBRAND_NOT_FOUND () {
					return this.BRAND_NOT_FOUND;
				}
				
			    public String SEASON_NOT_FOUND;

				public String getSEASON_NOT_FOUND () {
					return this.SEASON_NOT_FOUND;
				}
				
			    public String COLOR_NOT_FOUND;

				public String getCOLOR_NOT_FOUND () {
					return this.COLOR_NOT_FOUND;
				}
				
			    public String CATEGORY_NOT_FOUND;

				public String getCATEGORY_NOT_FOUND () {
					return this.CATEGORY_NOT_FOUND;
				}
				
			    public String REF_NOT_FOUND;

				public String getREF_NOT_FOUND () {
					return this.REF_NOT_FOUND;
				}
				
			    public String DESCRIPTION_NOT_FOUND;

				public String getDESCRIPTION_NOT_FOUND () {
					return this.DESCRIPTION_NOT_FOUND;
				}
				
			    public String STYLE_NOT_FOUND;

				public String getSTYLE_NOT_FOUND () {
					return this.STYLE_NOT_FOUND;
				}
				
			    public String COLOR_NAME_NOT_FOUND;

				public String getCOLOR_NAME_NOT_FOUND () {
					return this.COLOR_NAME_NOT_FOUND;
				}
				
			    public String LBL_NOT_FOUND;

				public String getLBL_NOT_FOUND () {
					return this.LBL_NOT_FOUND;
				}
				
			    public String STYLE_COLOR_NOT_FOUND;

				public String getSTYLE_COLOR_NOT_FOUND () {
					return this.STYLE_COLOR_NOT_FOUND;
				}
				
			    public String STYLECOLORLABEL_NOT_FOUND;

				public String getSTYLECOLORLABEL_NOT_FOUND () {
					return this.STYLECOLORLABEL_NOT_FOUND;
				}
				
			    public String GENDER_NOT_FOUND;

				public String getGENDER_NOT_FOUND () {
					return this.GENDER_NOT_FOUND;
				}
				
			    public String AGE_RANGE_NOT_FOUND;

				public String getAGE_RANGE_NOT_FOUND () {
					return this.AGE_RANGE_NOT_FOUND;
				}
				
			    public String SIZE_RANGE_NOT_FOUND;

				public String getSIZE_RANGE_NOT_FOUND () {
					return this.SIZE_RANGE_NOT_FOUND;
				}
				
			    public String SIZE_NOT_FOUND;

				public String getSIZE_NOT_FOUND () {
					return this.SIZE_NOT_FOUND;
				}
				
			    public String US_SIZE_NOT_FOUND;

				public String getUS_SIZE_NOT_FOUND () {
					return this.US_SIZE_NOT_FOUND;
				}
				
			    public String PRODUCT_NOT_FOUND;

				public String getPRODUCT_NOT_FOUND () {
					return this.PRODUCT_NOT_FOUND;
				}
				
			    public String FASHION_NOT_FOUND;

				public String getFASHION_NOT_FOUND () {
					return this.FASHION_NOT_FOUND;
				}
				
			    public String PRODUCT_STATUS_NOT_FOUND;

				public String getPRODUCT_STATUS_NOT_FOUND () {
					return this.PRODUCT_STATUS_NOT_FOUND;
				}
				
			    public String PRODUCT_TIER_NOT_FOUND;

				public String getPRODUCT_TIER_NOT_FOUND () {
					return this.PRODUCT_TIER_NOT_FOUND;
				}
				
			    public String SIZE_RATIO_SPLIT_NOT_FOUND;

				public String getSIZE_RATIO_SPLIT_NOT_FOUND () {
					return this.SIZE_RATIO_SPLIT_NOT_FOUND;
				}
				
			    public String ATTRIBUTE_NOT_FOUND;

				public String getATTRIBUTE_NOT_FOUND () {
					return this.ATTRIBUTE_NOT_FOUND;
				}
				
			    public String UNITS_NOT_FOUND;

				public String getUNITS_NOT_FOUND () {
					return this.UNITS_NOT_FOUND;
				}
				
			    public String COO_NOT_FOUND;

				public String getCOO_NOT_FOUND () {
					return this.COO_NOT_FOUND;
				}
				
			    public String CM_SIZE_NOT_FOUND;

				public String getCM_SIZE_NOT_FOUND () {
					return this.CM_SIZE_NOT_FOUND;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_BUY_VALIDATION.length) {
				if(length < 1024 && commonByteArray_DEV_BUY_VALIDATION.length == 0) {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[1024];
				} else {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_BUY_VALIDATION, 0, length);
			strReturn = new String(commonByteArray_DEV_BUY_VALIDATION, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_BUY_VALIDATION) {

        	try {

        		int length = 0;
		
						this.LINE_NUMBER = readInteger(dis);
					
					this.DYNAMICS_COLOR = readString(dis);
					
					this.DYNAMICS_BRAND = readString(dis);
					
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
					this.BRAND_NOT_FOUND = readString(dis);
					
					this.SEASON_NOT_FOUND = readString(dis);
					
					this.COLOR_NOT_FOUND = readString(dis);
					
					this.CATEGORY_NOT_FOUND = readString(dis);
					
					this.REF_NOT_FOUND = readString(dis);
					
					this.DESCRIPTION_NOT_FOUND = readString(dis);
					
					this.STYLE_NOT_FOUND = readString(dis);
					
					this.COLOR_NAME_NOT_FOUND = readString(dis);
					
					this.LBL_NOT_FOUND = readString(dis);
					
					this.STYLE_COLOR_NOT_FOUND = readString(dis);
					
					this.STYLECOLORLABEL_NOT_FOUND = readString(dis);
					
					this.GENDER_NOT_FOUND = readString(dis);
					
					this.AGE_RANGE_NOT_FOUND = readString(dis);
					
					this.SIZE_RANGE_NOT_FOUND = readString(dis);
					
					this.SIZE_NOT_FOUND = readString(dis);
					
					this.US_SIZE_NOT_FOUND = readString(dis);
					
					this.PRODUCT_NOT_FOUND = readString(dis);
					
					this.FASHION_NOT_FOUND = readString(dis);
					
					this.PRODUCT_STATUS_NOT_FOUND = readString(dis);
					
					this.PRODUCT_TIER_NOT_FOUND = readString(dis);
					
					this.SIZE_RATIO_SPLIT_NOT_FOUND = readString(dis);
					
					this.ATTRIBUTE_NOT_FOUND = readString(dis);
					
					this.UNITS_NOT_FOUND = readString(dis);
					
					this.COO_NOT_FOUND = readString(dis);
					
					this.CM_SIZE_NOT_FOUND = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.LINE_NUMBER,dos);
					
					// String
				
						writeString(this.DYNAMICS_COLOR,dos);
					
					// String
				
						writeString(this.DYNAMICS_BRAND,dos);
					
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
					// String
				
						writeString(this.BRAND_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SEASON_NOT_FOUND,dos);
					
					// String
				
						writeString(this.COLOR_NOT_FOUND,dos);
					
					// String
				
						writeString(this.CATEGORY_NOT_FOUND,dos);
					
					// String
				
						writeString(this.REF_NOT_FOUND,dos);
					
					// String
				
						writeString(this.DESCRIPTION_NOT_FOUND,dos);
					
					// String
				
						writeString(this.STYLE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.COLOR_NAME_NOT_FOUND,dos);
					
					// String
				
						writeString(this.LBL_NOT_FOUND,dos);
					
					// String
				
						writeString(this.STYLE_COLOR_NOT_FOUND,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL_NOT_FOUND,dos);
					
					// String
				
						writeString(this.GENDER_NOT_FOUND,dos);
					
					// String
				
						writeString(this.AGE_RANGE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SIZE_RANGE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SIZE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.US_SIZE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.PRODUCT_NOT_FOUND,dos);
					
					// String
				
						writeString(this.FASHION_NOT_FOUND,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS_NOT_FOUND,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT_NOT_FOUND,dos);
					
					// String
				
						writeString(this.ATTRIBUTE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.UNITS_NOT_FOUND,dos);
					
					// String
				
						writeString(this.COO_NOT_FOUND,dos);
					
					// String
				
						writeString(this.CM_SIZE_NOT_FOUND,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("LINE_NUMBER="+String.valueOf(LINE_NUMBER));
		sb.append(",DYNAMICS_COLOR="+DYNAMICS_COLOR);
		sb.append(",DYNAMICS_BRAND="+DYNAMICS_BRAND);
		sb.append(",BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
		sb.append(",BRAND_NOT_FOUND="+BRAND_NOT_FOUND);
		sb.append(",SEASON_NOT_FOUND="+SEASON_NOT_FOUND);
		sb.append(",COLOR_NOT_FOUND="+COLOR_NOT_FOUND);
		sb.append(",CATEGORY_NOT_FOUND="+CATEGORY_NOT_FOUND);
		sb.append(",REF_NOT_FOUND="+REF_NOT_FOUND);
		sb.append(",DESCRIPTION_NOT_FOUND="+DESCRIPTION_NOT_FOUND);
		sb.append(",STYLE_NOT_FOUND="+STYLE_NOT_FOUND);
		sb.append(",COLOR_NAME_NOT_FOUND="+COLOR_NAME_NOT_FOUND);
		sb.append(",LBL_NOT_FOUND="+LBL_NOT_FOUND);
		sb.append(",STYLE_COLOR_NOT_FOUND="+STYLE_COLOR_NOT_FOUND);
		sb.append(",STYLECOLORLABEL_NOT_FOUND="+STYLECOLORLABEL_NOT_FOUND);
		sb.append(",GENDER_NOT_FOUND="+GENDER_NOT_FOUND);
		sb.append(",AGE_RANGE_NOT_FOUND="+AGE_RANGE_NOT_FOUND);
		sb.append(",SIZE_RANGE_NOT_FOUND="+SIZE_RANGE_NOT_FOUND);
		sb.append(",SIZE_NOT_FOUND="+SIZE_NOT_FOUND);
		sb.append(",US_SIZE_NOT_FOUND="+US_SIZE_NOT_FOUND);
		sb.append(",PRODUCT_NOT_FOUND="+PRODUCT_NOT_FOUND);
		sb.append(",FASHION_NOT_FOUND="+FASHION_NOT_FOUND);
		sb.append(",PRODUCT_STATUS_NOT_FOUND="+PRODUCT_STATUS_NOT_FOUND);
		sb.append(",PRODUCT_TIER_NOT_FOUND="+PRODUCT_TIER_NOT_FOUND);
		sb.append(",SIZE_RATIO_SPLIT_NOT_FOUND="+SIZE_RATIO_SPLIT_NOT_FOUND);
		sb.append(",ATTRIBUTE_NOT_FOUND="+ATTRIBUTE_NOT_FOUND);
		sb.append(",UNITS_NOT_FOUND="+UNITS_NOT_FOUND);
		sb.append(",COO_NOT_FOUND="+COO_NOT_FOUND);
		sb.append(",CM_SIZE_NOT_FOUND="+CM_SIZE_NOT_FOUND);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_cooStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_product_tierStruct implements routines.system.IPersistableRow<sortie_product_tierStruct> {
    final static byte[] commonByteArrayLock_DEV_BUY_VALIDATION = new byte[0];
    static byte[] commonByteArray_DEV_BUY_VALIDATION = new byte[0];

	
			    public Integer LINE_NUMBER;

				public Integer getLINE_NUMBER () {
					return this.LINE_NUMBER;
				}
				
			    public String DYNAMICS_COLOR;

				public String getDYNAMICS_COLOR () {
					return this.DYNAMICS_COLOR;
				}
				
			    public String DYNAMICS_BRAND;

				public String getDYNAMICS_BRAND () {
					return this.DYNAMICS_BRAND;
				}
				
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				
			    public String BRAND_NOT_FOUND;

				public String getBRAND_NOT_FOUND () {
					return this.BRAND_NOT_FOUND;
				}
				
			    public String SEASON_NOT_FOUND;

				public String getSEASON_NOT_FOUND () {
					return this.SEASON_NOT_FOUND;
				}
				
			    public String COLOR_NOT_FOUND;

				public String getCOLOR_NOT_FOUND () {
					return this.COLOR_NOT_FOUND;
				}
				
			    public String CATEGORY_NOT_FOUND;

				public String getCATEGORY_NOT_FOUND () {
					return this.CATEGORY_NOT_FOUND;
				}
				
			    public String REF_NOT_FOUND;

				public String getREF_NOT_FOUND () {
					return this.REF_NOT_FOUND;
				}
				
			    public String DESCRIPTION_NOT_FOUND;

				public String getDESCRIPTION_NOT_FOUND () {
					return this.DESCRIPTION_NOT_FOUND;
				}
				
			    public String STYLE_NOT_FOUND;

				public String getSTYLE_NOT_FOUND () {
					return this.STYLE_NOT_FOUND;
				}
				
			    public String COLOR_NAME_NOT_FOUND;

				public String getCOLOR_NAME_NOT_FOUND () {
					return this.COLOR_NAME_NOT_FOUND;
				}
				
			    public String LBL_NOT_FOUND;

				public String getLBL_NOT_FOUND () {
					return this.LBL_NOT_FOUND;
				}
				
			    public String STYLE_COLOR_NOT_FOUND;

				public String getSTYLE_COLOR_NOT_FOUND () {
					return this.STYLE_COLOR_NOT_FOUND;
				}
				
			    public String STYLECOLORLABEL_NOT_FOUND;

				public String getSTYLECOLORLABEL_NOT_FOUND () {
					return this.STYLECOLORLABEL_NOT_FOUND;
				}
				
			    public String GENDER_NOT_FOUND;

				public String getGENDER_NOT_FOUND () {
					return this.GENDER_NOT_FOUND;
				}
				
			    public String AGE_RANGE_NOT_FOUND;

				public String getAGE_RANGE_NOT_FOUND () {
					return this.AGE_RANGE_NOT_FOUND;
				}
				
			    public String SIZE_RANGE_NOT_FOUND;

				public String getSIZE_RANGE_NOT_FOUND () {
					return this.SIZE_RANGE_NOT_FOUND;
				}
				
			    public String SIZE_NOT_FOUND;

				public String getSIZE_NOT_FOUND () {
					return this.SIZE_NOT_FOUND;
				}
				
			    public String US_SIZE_NOT_FOUND;

				public String getUS_SIZE_NOT_FOUND () {
					return this.US_SIZE_NOT_FOUND;
				}
				
			    public String PRODUCT_NOT_FOUND;

				public String getPRODUCT_NOT_FOUND () {
					return this.PRODUCT_NOT_FOUND;
				}
				
			    public String FASHION_NOT_FOUND;

				public String getFASHION_NOT_FOUND () {
					return this.FASHION_NOT_FOUND;
				}
				
			    public String PRODUCT_STATUS_NOT_FOUND;

				public String getPRODUCT_STATUS_NOT_FOUND () {
					return this.PRODUCT_STATUS_NOT_FOUND;
				}
				
			    public String PRODUCT_TIER_NOT_FOUND;

				public String getPRODUCT_TIER_NOT_FOUND () {
					return this.PRODUCT_TIER_NOT_FOUND;
				}
				
			    public String SIZE_RATIO_SPLIT_NOT_FOUND;

				public String getSIZE_RATIO_SPLIT_NOT_FOUND () {
					return this.SIZE_RATIO_SPLIT_NOT_FOUND;
				}
				
			    public String ATTRIBUTE_NOT_FOUND;

				public String getATTRIBUTE_NOT_FOUND () {
					return this.ATTRIBUTE_NOT_FOUND;
				}
				
			    public String UNITS_NOT_FOUND;

				public String getUNITS_NOT_FOUND () {
					return this.UNITS_NOT_FOUND;
				}
				
			    public String COO_NOT_FOUND;

				public String getCOO_NOT_FOUND () {
					return this.COO_NOT_FOUND;
				}
				
			    public String CM_SIZE_NOT_FOUND;

				public String getCM_SIZE_NOT_FOUND () {
					return this.CM_SIZE_NOT_FOUND;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_BUY_VALIDATION.length) {
				if(length < 1024 && commonByteArray_DEV_BUY_VALIDATION.length == 0) {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[1024];
				} else {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_BUY_VALIDATION, 0, length);
			strReturn = new String(commonByteArray_DEV_BUY_VALIDATION, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_BUY_VALIDATION) {

        	try {

        		int length = 0;
		
						this.LINE_NUMBER = readInteger(dis);
					
					this.DYNAMICS_COLOR = readString(dis);
					
					this.DYNAMICS_BRAND = readString(dis);
					
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
					this.BRAND_NOT_FOUND = readString(dis);
					
					this.SEASON_NOT_FOUND = readString(dis);
					
					this.COLOR_NOT_FOUND = readString(dis);
					
					this.CATEGORY_NOT_FOUND = readString(dis);
					
					this.REF_NOT_FOUND = readString(dis);
					
					this.DESCRIPTION_NOT_FOUND = readString(dis);
					
					this.STYLE_NOT_FOUND = readString(dis);
					
					this.COLOR_NAME_NOT_FOUND = readString(dis);
					
					this.LBL_NOT_FOUND = readString(dis);
					
					this.STYLE_COLOR_NOT_FOUND = readString(dis);
					
					this.STYLECOLORLABEL_NOT_FOUND = readString(dis);
					
					this.GENDER_NOT_FOUND = readString(dis);
					
					this.AGE_RANGE_NOT_FOUND = readString(dis);
					
					this.SIZE_RANGE_NOT_FOUND = readString(dis);
					
					this.SIZE_NOT_FOUND = readString(dis);
					
					this.US_SIZE_NOT_FOUND = readString(dis);
					
					this.PRODUCT_NOT_FOUND = readString(dis);
					
					this.FASHION_NOT_FOUND = readString(dis);
					
					this.PRODUCT_STATUS_NOT_FOUND = readString(dis);
					
					this.PRODUCT_TIER_NOT_FOUND = readString(dis);
					
					this.SIZE_RATIO_SPLIT_NOT_FOUND = readString(dis);
					
					this.ATTRIBUTE_NOT_FOUND = readString(dis);
					
					this.UNITS_NOT_FOUND = readString(dis);
					
					this.COO_NOT_FOUND = readString(dis);
					
					this.CM_SIZE_NOT_FOUND = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.LINE_NUMBER,dos);
					
					// String
				
						writeString(this.DYNAMICS_COLOR,dos);
					
					// String
				
						writeString(this.DYNAMICS_BRAND,dos);
					
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
					// String
				
						writeString(this.BRAND_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SEASON_NOT_FOUND,dos);
					
					// String
				
						writeString(this.COLOR_NOT_FOUND,dos);
					
					// String
				
						writeString(this.CATEGORY_NOT_FOUND,dos);
					
					// String
				
						writeString(this.REF_NOT_FOUND,dos);
					
					// String
				
						writeString(this.DESCRIPTION_NOT_FOUND,dos);
					
					// String
				
						writeString(this.STYLE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.COLOR_NAME_NOT_FOUND,dos);
					
					// String
				
						writeString(this.LBL_NOT_FOUND,dos);
					
					// String
				
						writeString(this.STYLE_COLOR_NOT_FOUND,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL_NOT_FOUND,dos);
					
					// String
				
						writeString(this.GENDER_NOT_FOUND,dos);
					
					// String
				
						writeString(this.AGE_RANGE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SIZE_RANGE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SIZE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.US_SIZE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.PRODUCT_NOT_FOUND,dos);
					
					// String
				
						writeString(this.FASHION_NOT_FOUND,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS_NOT_FOUND,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT_NOT_FOUND,dos);
					
					// String
				
						writeString(this.ATTRIBUTE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.UNITS_NOT_FOUND,dos);
					
					// String
				
						writeString(this.COO_NOT_FOUND,dos);
					
					// String
				
						writeString(this.CM_SIZE_NOT_FOUND,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("LINE_NUMBER="+String.valueOf(LINE_NUMBER));
		sb.append(",DYNAMICS_COLOR="+DYNAMICS_COLOR);
		sb.append(",DYNAMICS_BRAND="+DYNAMICS_BRAND);
		sb.append(",BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
		sb.append(",BRAND_NOT_FOUND="+BRAND_NOT_FOUND);
		sb.append(",SEASON_NOT_FOUND="+SEASON_NOT_FOUND);
		sb.append(",COLOR_NOT_FOUND="+COLOR_NOT_FOUND);
		sb.append(",CATEGORY_NOT_FOUND="+CATEGORY_NOT_FOUND);
		sb.append(",REF_NOT_FOUND="+REF_NOT_FOUND);
		sb.append(",DESCRIPTION_NOT_FOUND="+DESCRIPTION_NOT_FOUND);
		sb.append(",STYLE_NOT_FOUND="+STYLE_NOT_FOUND);
		sb.append(",COLOR_NAME_NOT_FOUND="+COLOR_NAME_NOT_FOUND);
		sb.append(",LBL_NOT_FOUND="+LBL_NOT_FOUND);
		sb.append(",STYLE_COLOR_NOT_FOUND="+STYLE_COLOR_NOT_FOUND);
		sb.append(",STYLECOLORLABEL_NOT_FOUND="+STYLECOLORLABEL_NOT_FOUND);
		sb.append(",GENDER_NOT_FOUND="+GENDER_NOT_FOUND);
		sb.append(",AGE_RANGE_NOT_FOUND="+AGE_RANGE_NOT_FOUND);
		sb.append(",SIZE_RANGE_NOT_FOUND="+SIZE_RANGE_NOT_FOUND);
		sb.append(",SIZE_NOT_FOUND="+SIZE_NOT_FOUND);
		sb.append(",US_SIZE_NOT_FOUND="+US_SIZE_NOT_FOUND);
		sb.append(",PRODUCT_NOT_FOUND="+PRODUCT_NOT_FOUND);
		sb.append(",FASHION_NOT_FOUND="+FASHION_NOT_FOUND);
		sb.append(",PRODUCT_STATUS_NOT_FOUND="+PRODUCT_STATUS_NOT_FOUND);
		sb.append(",PRODUCT_TIER_NOT_FOUND="+PRODUCT_TIER_NOT_FOUND);
		sb.append(",SIZE_RATIO_SPLIT_NOT_FOUND="+SIZE_RATIO_SPLIT_NOT_FOUND);
		sb.append(",ATTRIBUTE_NOT_FOUND="+ATTRIBUTE_NOT_FOUND);
		sb.append(",UNITS_NOT_FOUND="+UNITS_NOT_FOUND);
		sb.append(",COO_NOT_FOUND="+COO_NOT_FOUND);
		sb.append(",CM_SIZE_NOT_FOUND="+CM_SIZE_NOT_FOUND);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_product_tierStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_product_statusStruct implements routines.system.IPersistableRow<sortie_product_statusStruct> {
    final static byte[] commonByteArrayLock_DEV_BUY_VALIDATION = new byte[0];
    static byte[] commonByteArray_DEV_BUY_VALIDATION = new byte[0];

	
			    public Integer LINE_NUMBER;

				public Integer getLINE_NUMBER () {
					return this.LINE_NUMBER;
				}
				
			    public String DYNAMICS_COLOR;

				public String getDYNAMICS_COLOR () {
					return this.DYNAMICS_COLOR;
				}
				
			    public String DYNAMICS_BRAND;

				public String getDYNAMICS_BRAND () {
					return this.DYNAMICS_BRAND;
				}
				
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				
			    public String BRAND_NOT_FOUND;

				public String getBRAND_NOT_FOUND () {
					return this.BRAND_NOT_FOUND;
				}
				
			    public String SEASON_NOT_FOUND;

				public String getSEASON_NOT_FOUND () {
					return this.SEASON_NOT_FOUND;
				}
				
			    public String COLOR_NOT_FOUND;

				public String getCOLOR_NOT_FOUND () {
					return this.COLOR_NOT_FOUND;
				}
				
			    public String CATEGORY_NOT_FOUND;

				public String getCATEGORY_NOT_FOUND () {
					return this.CATEGORY_NOT_FOUND;
				}
				
			    public String REF_NOT_FOUND;

				public String getREF_NOT_FOUND () {
					return this.REF_NOT_FOUND;
				}
				
			    public String DESCRIPTION_NOT_FOUND;

				public String getDESCRIPTION_NOT_FOUND () {
					return this.DESCRIPTION_NOT_FOUND;
				}
				
			    public String STYLE_NOT_FOUND;

				public String getSTYLE_NOT_FOUND () {
					return this.STYLE_NOT_FOUND;
				}
				
			    public String COLOR_NAME_NOT_FOUND;

				public String getCOLOR_NAME_NOT_FOUND () {
					return this.COLOR_NAME_NOT_FOUND;
				}
				
			    public String LBL_NOT_FOUND;

				public String getLBL_NOT_FOUND () {
					return this.LBL_NOT_FOUND;
				}
				
			    public String STYLE_COLOR_NOT_FOUND;

				public String getSTYLE_COLOR_NOT_FOUND () {
					return this.STYLE_COLOR_NOT_FOUND;
				}
				
			    public String STYLECOLORLABEL_NOT_FOUND;

				public String getSTYLECOLORLABEL_NOT_FOUND () {
					return this.STYLECOLORLABEL_NOT_FOUND;
				}
				
			    public String GENDER_NOT_FOUND;

				public String getGENDER_NOT_FOUND () {
					return this.GENDER_NOT_FOUND;
				}
				
			    public String AGE_RANGE_NOT_FOUND;

				public String getAGE_RANGE_NOT_FOUND () {
					return this.AGE_RANGE_NOT_FOUND;
				}
				
			    public String SIZE_RANGE_NOT_FOUND;

				public String getSIZE_RANGE_NOT_FOUND () {
					return this.SIZE_RANGE_NOT_FOUND;
				}
				
			    public String SIZE_NOT_FOUND;

				public String getSIZE_NOT_FOUND () {
					return this.SIZE_NOT_FOUND;
				}
				
			    public String US_SIZE_NOT_FOUND;

				public String getUS_SIZE_NOT_FOUND () {
					return this.US_SIZE_NOT_FOUND;
				}
				
			    public String PRODUCT_NOT_FOUND;

				public String getPRODUCT_NOT_FOUND () {
					return this.PRODUCT_NOT_FOUND;
				}
				
			    public String FASHION_NOT_FOUND;

				public String getFASHION_NOT_FOUND () {
					return this.FASHION_NOT_FOUND;
				}
				
			    public String PRODUCT_STATUS_NOT_FOUND;

				public String getPRODUCT_STATUS_NOT_FOUND () {
					return this.PRODUCT_STATUS_NOT_FOUND;
				}
				
			    public String PRODUCT_TIER_NOT_FOUND;

				public String getPRODUCT_TIER_NOT_FOUND () {
					return this.PRODUCT_TIER_NOT_FOUND;
				}
				
			    public String SIZE_RATIO_SPLIT_NOT_FOUND;

				public String getSIZE_RATIO_SPLIT_NOT_FOUND () {
					return this.SIZE_RATIO_SPLIT_NOT_FOUND;
				}
				
			    public String ATTRIBUTE_NOT_FOUND;

				public String getATTRIBUTE_NOT_FOUND () {
					return this.ATTRIBUTE_NOT_FOUND;
				}
				
			    public String UNITS_NOT_FOUND;

				public String getUNITS_NOT_FOUND () {
					return this.UNITS_NOT_FOUND;
				}
				
			    public String COO_NOT_FOUND;

				public String getCOO_NOT_FOUND () {
					return this.COO_NOT_FOUND;
				}
				
			    public String CM_SIZE_NOT_FOUND;

				public String getCM_SIZE_NOT_FOUND () {
					return this.CM_SIZE_NOT_FOUND;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_BUY_VALIDATION.length) {
				if(length < 1024 && commonByteArray_DEV_BUY_VALIDATION.length == 0) {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[1024];
				} else {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_BUY_VALIDATION, 0, length);
			strReturn = new String(commonByteArray_DEV_BUY_VALIDATION, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_BUY_VALIDATION) {

        	try {

        		int length = 0;
		
						this.LINE_NUMBER = readInteger(dis);
					
					this.DYNAMICS_COLOR = readString(dis);
					
					this.DYNAMICS_BRAND = readString(dis);
					
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
					this.BRAND_NOT_FOUND = readString(dis);
					
					this.SEASON_NOT_FOUND = readString(dis);
					
					this.COLOR_NOT_FOUND = readString(dis);
					
					this.CATEGORY_NOT_FOUND = readString(dis);
					
					this.REF_NOT_FOUND = readString(dis);
					
					this.DESCRIPTION_NOT_FOUND = readString(dis);
					
					this.STYLE_NOT_FOUND = readString(dis);
					
					this.COLOR_NAME_NOT_FOUND = readString(dis);
					
					this.LBL_NOT_FOUND = readString(dis);
					
					this.STYLE_COLOR_NOT_FOUND = readString(dis);
					
					this.STYLECOLORLABEL_NOT_FOUND = readString(dis);
					
					this.GENDER_NOT_FOUND = readString(dis);
					
					this.AGE_RANGE_NOT_FOUND = readString(dis);
					
					this.SIZE_RANGE_NOT_FOUND = readString(dis);
					
					this.SIZE_NOT_FOUND = readString(dis);
					
					this.US_SIZE_NOT_FOUND = readString(dis);
					
					this.PRODUCT_NOT_FOUND = readString(dis);
					
					this.FASHION_NOT_FOUND = readString(dis);
					
					this.PRODUCT_STATUS_NOT_FOUND = readString(dis);
					
					this.PRODUCT_TIER_NOT_FOUND = readString(dis);
					
					this.SIZE_RATIO_SPLIT_NOT_FOUND = readString(dis);
					
					this.ATTRIBUTE_NOT_FOUND = readString(dis);
					
					this.UNITS_NOT_FOUND = readString(dis);
					
					this.COO_NOT_FOUND = readString(dis);
					
					this.CM_SIZE_NOT_FOUND = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.LINE_NUMBER,dos);
					
					// String
				
						writeString(this.DYNAMICS_COLOR,dos);
					
					// String
				
						writeString(this.DYNAMICS_BRAND,dos);
					
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
					// String
				
						writeString(this.BRAND_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SEASON_NOT_FOUND,dos);
					
					// String
				
						writeString(this.COLOR_NOT_FOUND,dos);
					
					// String
				
						writeString(this.CATEGORY_NOT_FOUND,dos);
					
					// String
				
						writeString(this.REF_NOT_FOUND,dos);
					
					// String
				
						writeString(this.DESCRIPTION_NOT_FOUND,dos);
					
					// String
				
						writeString(this.STYLE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.COLOR_NAME_NOT_FOUND,dos);
					
					// String
				
						writeString(this.LBL_NOT_FOUND,dos);
					
					// String
				
						writeString(this.STYLE_COLOR_NOT_FOUND,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL_NOT_FOUND,dos);
					
					// String
				
						writeString(this.GENDER_NOT_FOUND,dos);
					
					// String
				
						writeString(this.AGE_RANGE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SIZE_RANGE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SIZE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.US_SIZE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.PRODUCT_NOT_FOUND,dos);
					
					// String
				
						writeString(this.FASHION_NOT_FOUND,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS_NOT_FOUND,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT_NOT_FOUND,dos);
					
					// String
				
						writeString(this.ATTRIBUTE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.UNITS_NOT_FOUND,dos);
					
					// String
				
						writeString(this.COO_NOT_FOUND,dos);
					
					// String
				
						writeString(this.CM_SIZE_NOT_FOUND,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("LINE_NUMBER="+String.valueOf(LINE_NUMBER));
		sb.append(",DYNAMICS_COLOR="+DYNAMICS_COLOR);
		sb.append(",DYNAMICS_BRAND="+DYNAMICS_BRAND);
		sb.append(",BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
		sb.append(",BRAND_NOT_FOUND="+BRAND_NOT_FOUND);
		sb.append(",SEASON_NOT_FOUND="+SEASON_NOT_FOUND);
		sb.append(",COLOR_NOT_FOUND="+COLOR_NOT_FOUND);
		sb.append(",CATEGORY_NOT_FOUND="+CATEGORY_NOT_FOUND);
		sb.append(",REF_NOT_FOUND="+REF_NOT_FOUND);
		sb.append(",DESCRIPTION_NOT_FOUND="+DESCRIPTION_NOT_FOUND);
		sb.append(",STYLE_NOT_FOUND="+STYLE_NOT_FOUND);
		sb.append(",COLOR_NAME_NOT_FOUND="+COLOR_NAME_NOT_FOUND);
		sb.append(",LBL_NOT_FOUND="+LBL_NOT_FOUND);
		sb.append(",STYLE_COLOR_NOT_FOUND="+STYLE_COLOR_NOT_FOUND);
		sb.append(",STYLECOLORLABEL_NOT_FOUND="+STYLECOLORLABEL_NOT_FOUND);
		sb.append(",GENDER_NOT_FOUND="+GENDER_NOT_FOUND);
		sb.append(",AGE_RANGE_NOT_FOUND="+AGE_RANGE_NOT_FOUND);
		sb.append(",SIZE_RANGE_NOT_FOUND="+SIZE_RANGE_NOT_FOUND);
		sb.append(",SIZE_NOT_FOUND="+SIZE_NOT_FOUND);
		sb.append(",US_SIZE_NOT_FOUND="+US_SIZE_NOT_FOUND);
		sb.append(",PRODUCT_NOT_FOUND="+PRODUCT_NOT_FOUND);
		sb.append(",FASHION_NOT_FOUND="+FASHION_NOT_FOUND);
		sb.append(",PRODUCT_STATUS_NOT_FOUND="+PRODUCT_STATUS_NOT_FOUND);
		sb.append(",PRODUCT_TIER_NOT_FOUND="+PRODUCT_TIER_NOT_FOUND);
		sb.append(",SIZE_RATIO_SPLIT_NOT_FOUND="+SIZE_RATIO_SPLIT_NOT_FOUND);
		sb.append(",ATTRIBUTE_NOT_FOUND="+ATTRIBUTE_NOT_FOUND);
		sb.append(",UNITS_NOT_FOUND="+UNITS_NOT_FOUND);
		sb.append(",COO_NOT_FOUND="+COO_NOT_FOUND);
		sb.append(",CM_SIZE_NOT_FOUND="+CM_SIZE_NOT_FOUND);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_product_statusStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_sizeStruct implements routines.system.IPersistableRow<sortie_sizeStruct> {
    final static byte[] commonByteArrayLock_DEV_BUY_VALIDATION = new byte[0];
    static byte[] commonByteArray_DEV_BUY_VALIDATION = new byte[0];

	
			    public Integer LINE_NUMBER;

				public Integer getLINE_NUMBER () {
					return this.LINE_NUMBER;
				}
				
			    public String DYNAMICS_COLOR;

				public String getDYNAMICS_COLOR () {
					return this.DYNAMICS_COLOR;
				}
				
			    public String DYNAMICS_BRAND;

				public String getDYNAMICS_BRAND () {
					return this.DYNAMICS_BRAND;
				}
				
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				
			    public String BRAND_NOT_FOUND;

				public String getBRAND_NOT_FOUND () {
					return this.BRAND_NOT_FOUND;
				}
				
			    public String SEASON_NOT_FOUND;

				public String getSEASON_NOT_FOUND () {
					return this.SEASON_NOT_FOUND;
				}
				
			    public String COLOR_NOT_FOUND;

				public String getCOLOR_NOT_FOUND () {
					return this.COLOR_NOT_FOUND;
				}
				
			    public String CATEGORY_NOT_FOUND;

				public String getCATEGORY_NOT_FOUND () {
					return this.CATEGORY_NOT_FOUND;
				}
				
			    public String REF_NOT_FOUND;

				public String getREF_NOT_FOUND () {
					return this.REF_NOT_FOUND;
				}
				
			    public String DESCRIPTION_NOT_FOUND;

				public String getDESCRIPTION_NOT_FOUND () {
					return this.DESCRIPTION_NOT_FOUND;
				}
				
			    public String STYLE_NOT_FOUND;

				public String getSTYLE_NOT_FOUND () {
					return this.STYLE_NOT_FOUND;
				}
				
			    public String COLOR_NAME_NOT_FOUND;

				public String getCOLOR_NAME_NOT_FOUND () {
					return this.COLOR_NAME_NOT_FOUND;
				}
				
			    public String LBL_NOT_FOUND;

				public String getLBL_NOT_FOUND () {
					return this.LBL_NOT_FOUND;
				}
				
			    public String STYLE_COLOR_NOT_FOUND;

				public String getSTYLE_COLOR_NOT_FOUND () {
					return this.STYLE_COLOR_NOT_FOUND;
				}
				
			    public String STYLECOLORLABEL_NOT_FOUND;

				public String getSTYLECOLORLABEL_NOT_FOUND () {
					return this.STYLECOLORLABEL_NOT_FOUND;
				}
				
			    public String GENDER_NOT_FOUND;

				public String getGENDER_NOT_FOUND () {
					return this.GENDER_NOT_FOUND;
				}
				
			    public String AGE_RANGE_NOT_FOUND;

				public String getAGE_RANGE_NOT_FOUND () {
					return this.AGE_RANGE_NOT_FOUND;
				}
				
			    public String SIZE_RANGE_NOT_FOUND;

				public String getSIZE_RANGE_NOT_FOUND () {
					return this.SIZE_RANGE_NOT_FOUND;
				}
				
			    public String SIZE_NOT_FOUND;

				public String getSIZE_NOT_FOUND () {
					return this.SIZE_NOT_FOUND;
				}
				
			    public String US_SIZE_NOT_FOUND;

				public String getUS_SIZE_NOT_FOUND () {
					return this.US_SIZE_NOT_FOUND;
				}
				
			    public String PRODUCT_NOT_FOUND;

				public String getPRODUCT_NOT_FOUND () {
					return this.PRODUCT_NOT_FOUND;
				}
				
			    public String FASHION_NOT_FOUND;

				public String getFASHION_NOT_FOUND () {
					return this.FASHION_NOT_FOUND;
				}
				
			    public String PRODUCT_STATUS_NOT_FOUND;

				public String getPRODUCT_STATUS_NOT_FOUND () {
					return this.PRODUCT_STATUS_NOT_FOUND;
				}
				
			    public String PRODUCT_TIER_NOT_FOUND;

				public String getPRODUCT_TIER_NOT_FOUND () {
					return this.PRODUCT_TIER_NOT_FOUND;
				}
				
			    public String SIZE_RATIO_SPLIT_NOT_FOUND;

				public String getSIZE_RATIO_SPLIT_NOT_FOUND () {
					return this.SIZE_RATIO_SPLIT_NOT_FOUND;
				}
				
			    public String ATTRIBUTE_NOT_FOUND;

				public String getATTRIBUTE_NOT_FOUND () {
					return this.ATTRIBUTE_NOT_FOUND;
				}
				
			    public String UNITS_NOT_FOUND;

				public String getUNITS_NOT_FOUND () {
					return this.UNITS_NOT_FOUND;
				}
				
			    public String COO_NOT_FOUND;

				public String getCOO_NOT_FOUND () {
					return this.COO_NOT_FOUND;
				}
				
			    public String CM_SIZE_NOT_FOUND;

				public String getCM_SIZE_NOT_FOUND () {
					return this.CM_SIZE_NOT_FOUND;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_BUY_VALIDATION.length) {
				if(length < 1024 && commonByteArray_DEV_BUY_VALIDATION.length == 0) {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[1024];
				} else {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_BUY_VALIDATION, 0, length);
			strReturn = new String(commonByteArray_DEV_BUY_VALIDATION, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_BUY_VALIDATION) {

        	try {

        		int length = 0;
		
						this.LINE_NUMBER = readInteger(dis);
					
					this.DYNAMICS_COLOR = readString(dis);
					
					this.DYNAMICS_BRAND = readString(dis);
					
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
					this.BRAND_NOT_FOUND = readString(dis);
					
					this.SEASON_NOT_FOUND = readString(dis);
					
					this.COLOR_NOT_FOUND = readString(dis);
					
					this.CATEGORY_NOT_FOUND = readString(dis);
					
					this.REF_NOT_FOUND = readString(dis);
					
					this.DESCRIPTION_NOT_FOUND = readString(dis);
					
					this.STYLE_NOT_FOUND = readString(dis);
					
					this.COLOR_NAME_NOT_FOUND = readString(dis);
					
					this.LBL_NOT_FOUND = readString(dis);
					
					this.STYLE_COLOR_NOT_FOUND = readString(dis);
					
					this.STYLECOLORLABEL_NOT_FOUND = readString(dis);
					
					this.GENDER_NOT_FOUND = readString(dis);
					
					this.AGE_RANGE_NOT_FOUND = readString(dis);
					
					this.SIZE_RANGE_NOT_FOUND = readString(dis);
					
					this.SIZE_NOT_FOUND = readString(dis);
					
					this.US_SIZE_NOT_FOUND = readString(dis);
					
					this.PRODUCT_NOT_FOUND = readString(dis);
					
					this.FASHION_NOT_FOUND = readString(dis);
					
					this.PRODUCT_STATUS_NOT_FOUND = readString(dis);
					
					this.PRODUCT_TIER_NOT_FOUND = readString(dis);
					
					this.SIZE_RATIO_SPLIT_NOT_FOUND = readString(dis);
					
					this.ATTRIBUTE_NOT_FOUND = readString(dis);
					
					this.UNITS_NOT_FOUND = readString(dis);
					
					this.COO_NOT_FOUND = readString(dis);
					
					this.CM_SIZE_NOT_FOUND = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.LINE_NUMBER,dos);
					
					// String
				
						writeString(this.DYNAMICS_COLOR,dos);
					
					// String
				
						writeString(this.DYNAMICS_BRAND,dos);
					
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
					// String
				
						writeString(this.BRAND_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SEASON_NOT_FOUND,dos);
					
					// String
				
						writeString(this.COLOR_NOT_FOUND,dos);
					
					// String
				
						writeString(this.CATEGORY_NOT_FOUND,dos);
					
					// String
				
						writeString(this.REF_NOT_FOUND,dos);
					
					// String
				
						writeString(this.DESCRIPTION_NOT_FOUND,dos);
					
					// String
				
						writeString(this.STYLE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.COLOR_NAME_NOT_FOUND,dos);
					
					// String
				
						writeString(this.LBL_NOT_FOUND,dos);
					
					// String
				
						writeString(this.STYLE_COLOR_NOT_FOUND,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL_NOT_FOUND,dos);
					
					// String
				
						writeString(this.GENDER_NOT_FOUND,dos);
					
					// String
				
						writeString(this.AGE_RANGE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SIZE_RANGE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SIZE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.US_SIZE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.PRODUCT_NOT_FOUND,dos);
					
					// String
				
						writeString(this.FASHION_NOT_FOUND,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS_NOT_FOUND,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT_NOT_FOUND,dos);
					
					// String
				
						writeString(this.ATTRIBUTE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.UNITS_NOT_FOUND,dos);
					
					// String
				
						writeString(this.COO_NOT_FOUND,dos);
					
					// String
				
						writeString(this.CM_SIZE_NOT_FOUND,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("LINE_NUMBER="+String.valueOf(LINE_NUMBER));
		sb.append(",DYNAMICS_COLOR="+DYNAMICS_COLOR);
		sb.append(",DYNAMICS_BRAND="+DYNAMICS_BRAND);
		sb.append(",BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
		sb.append(",BRAND_NOT_FOUND="+BRAND_NOT_FOUND);
		sb.append(",SEASON_NOT_FOUND="+SEASON_NOT_FOUND);
		sb.append(",COLOR_NOT_FOUND="+COLOR_NOT_FOUND);
		sb.append(",CATEGORY_NOT_FOUND="+CATEGORY_NOT_FOUND);
		sb.append(",REF_NOT_FOUND="+REF_NOT_FOUND);
		sb.append(",DESCRIPTION_NOT_FOUND="+DESCRIPTION_NOT_FOUND);
		sb.append(",STYLE_NOT_FOUND="+STYLE_NOT_FOUND);
		sb.append(",COLOR_NAME_NOT_FOUND="+COLOR_NAME_NOT_FOUND);
		sb.append(",LBL_NOT_FOUND="+LBL_NOT_FOUND);
		sb.append(",STYLE_COLOR_NOT_FOUND="+STYLE_COLOR_NOT_FOUND);
		sb.append(",STYLECOLORLABEL_NOT_FOUND="+STYLECOLORLABEL_NOT_FOUND);
		sb.append(",GENDER_NOT_FOUND="+GENDER_NOT_FOUND);
		sb.append(",AGE_RANGE_NOT_FOUND="+AGE_RANGE_NOT_FOUND);
		sb.append(",SIZE_RANGE_NOT_FOUND="+SIZE_RANGE_NOT_FOUND);
		sb.append(",SIZE_NOT_FOUND="+SIZE_NOT_FOUND);
		sb.append(",US_SIZE_NOT_FOUND="+US_SIZE_NOT_FOUND);
		sb.append(",PRODUCT_NOT_FOUND="+PRODUCT_NOT_FOUND);
		sb.append(",FASHION_NOT_FOUND="+FASHION_NOT_FOUND);
		sb.append(",PRODUCT_STATUS_NOT_FOUND="+PRODUCT_STATUS_NOT_FOUND);
		sb.append(",PRODUCT_TIER_NOT_FOUND="+PRODUCT_TIER_NOT_FOUND);
		sb.append(",SIZE_RATIO_SPLIT_NOT_FOUND="+SIZE_RATIO_SPLIT_NOT_FOUND);
		sb.append(",ATTRIBUTE_NOT_FOUND="+ATTRIBUTE_NOT_FOUND);
		sb.append(",UNITS_NOT_FOUND="+UNITS_NOT_FOUND);
		sb.append(",COO_NOT_FOUND="+COO_NOT_FOUND);
		sb.append(",CM_SIZE_NOT_FOUND="+CM_SIZE_NOT_FOUND);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_sizeStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_genderStruct implements routines.system.IPersistableRow<sortie_genderStruct> {
    final static byte[] commonByteArrayLock_DEV_BUY_VALIDATION = new byte[0];
    static byte[] commonByteArray_DEV_BUY_VALIDATION = new byte[0];

	
			    public Integer LINE_NUMBER;

				public Integer getLINE_NUMBER () {
					return this.LINE_NUMBER;
				}
				
			    public String DYNAMICS_COLOR;

				public String getDYNAMICS_COLOR () {
					return this.DYNAMICS_COLOR;
				}
				
			    public String DYNAMICS_BRAND;

				public String getDYNAMICS_BRAND () {
					return this.DYNAMICS_BRAND;
				}
				
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				
			    public String BRAND_NOT_FOUND;

				public String getBRAND_NOT_FOUND () {
					return this.BRAND_NOT_FOUND;
				}
				
			    public String SEASON_NOT_FOUND;

				public String getSEASON_NOT_FOUND () {
					return this.SEASON_NOT_FOUND;
				}
				
			    public String COLOR_NOT_FOUND;

				public String getCOLOR_NOT_FOUND () {
					return this.COLOR_NOT_FOUND;
				}
				
			    public String CATEGORY_NOT_FOUND;

				public String getCATEGORY_NOT_FOUND () {
					return this.CATEGORY_NOT_FOUND;
				}
				
			    public String REF_NOT_FOUND;

				public String getREF_NOT_FOUND () {
					return this.REF_NOT_FOUND;
				}
				
			    public String DESCRIPTION_NOT_FOUND;

				public String getDESCRIPTION_NOT_FOUND () {
					return this.DESCRIPTION_NOT_FOUND;
				}
				
			    public String STYLE_NOT_FOUND;

				public String getSTYLE_NOT_FOUND () {
					return this.STYLE_NOT_FOUND;
				}
				
			    public String COLOR_NAME_NOT_FOUND;

				public String getCOLOR_NAME_NOT_FOUND () {
					return this.COLOR_NAME_NOT_FOUND;
				}
				
			    public String LBL_NOT_FOUND;

				public String getLBL_NOT_FOUND () {
					return this.LBL_NOT_FOUND;
				}
				
			    public String STYLE_COLOR_NOT_FOUND;

				public String getSTYLE_COLOR_NOT_FOUND () {
					return this.STYLE_COLOR_NOT_FOUND;
				}
				
			    public String STYLECOLORLABEL_NOT_FOUND;

				public String getSTYLECOLORLABEL_NOT_FOUND () {
					return this.STYLECOLORLABEL_NOT_FOUND;
				}
				
			    public String GENDER_NOT_FOUND;

				public String getGENDER_NOT_FOUND () {
					return this.GENDER_NOT_FOUND;
				}
				
			    public String AGE_RANGE_NOT_FOUND;

				public String getAGE_RANGE_NOT_FOUND () {
					return this.AGE_RANGE_NOT_FOUND;
				}
				
			    public String SIZE_RANGE_NOT_FOUND;

				public String getSIZE_RANGE_NOT_FOUND () {
					return this.SIZE_RANGE_NOT_FOUND;
				}
				
			    public String SIZE_NOT_FOUND;

				public String getSIZE_NOT_FOUND () {
					return this.SIZE_NOT_FOUND;
				}
				
			    public String US_SIZE_NOT_FOUND;

				public String getUS_SIZE_NOT_FOUND () {
					return this.US_SIZE_NOT_FOUND;
				}
				
			    public String PRODUCT_NOT_FOUND;

				public String getPRODUCT_NOT_FOUND () {
					return this.PRODUCT_NOT_FOUND;
				}
				
			    public String FASHION_NOT_FOUND;

				public String getFASHION_NOT_FOUND () {
					return this.FASHION_NOT_FOUND;
				}
				
			    public String PRODUCT_STATUS_NOT_FOUND;

				public String getPRODUCT_STATUS_NOT_FOUND () {
					return this.PRODUCT_STATUS_NOT_FOUND;
				}
				
			    public String PRODUCT_TIER_NOT_FOUND;

				public String getPRODUCT_TIER_NOT_FOUND () {
					return this.PRODUCT_TIER_NOT_FOUND;
				}
				
			    public String SIZE_RATIO_SPLIT_NOT_FOUND;

				public String getSIZE_RATIO_SPLIT_NOT_FOUND () {
					return this.SIZE_RATIO_SPLIT_NOT_FOUND;
				}
				
			    public String ATTRIBUTE_NOT_FOUND;

				public String getATTRIBUTE_NOT_FOUND () {
					return this.ATTRIBUTE_NOT_FOUND;
				}
				
			    public String UNITS_NOT_FOUND;

				public String getUNITS_NOT_FOUND () {
					return this.UNITS_NOT_FOUND;
				}
				
			    public String COO_NOT_FOUND;

				public String getCOO_NOT_FOUND () {
					return this.COO_NOT_FOUND;
				}
				
			    public String CM_SIZE_NOT_FOUND;

				public String getCM_SIZE_NOT_FOUND () {
					return this.CM_SIZE_NOT_FOUND;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_BUY_VALIDATION.length) {
				if(length < 1024 && commonByteArray_DEV_BUY_VALIDATION.length == 0) {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[1024];
				} else {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_BUY_VALIDATION, 0, length);
			strReturn = new String(commonByteArray_DEV_BUY_VALIDATION, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_BUY_VALIDATION) {

        	try {

        		int length = 0;
		
						this.LINE_NUMBER = readInteger(dis);
					
					this.DYNAMICS_COLOR = readString(dis);
					
					this.DYNAMICS_BRAND = readString(dis);
					
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
					this.BRAND_NOT_FOUND = readString(dis);
					
					this.SEASON_NOT_FOUND = readString(dis);
					
					this.COLOR_NOT_FOUND = readString(dis);
					
					this.CATEGORY_NOT_FOUND = readString(dis);
					
					this.REF_NOT_FOUND = readString(dis);
					
					this.DESCRIPTION_NOT_FOUND = readString(dis);
					
					this.STYLE_NOT_FOUND = readString(dis);
					
					this.COLOR_NAME_NOT_FOUND = readString(dis);
					
					this.LBL_NOT_FOUND = readString(dis);
					
					this.STYLE_COLOR_NOT_FOUND = readString(dis);
					
					this.STYLECOLORLABEL_NOT_FOUND = readString(dis);
					
					this.GENDER_NOT_FOUND = readString(dis);
					
					this.AGE_RANGE_NOT_FOUND = readString(dis);
					
					this.SIZE_RANGE_NOT_FOUND = readString(dis);
					
					this.SIZE_NOT_FOUND = readString(dis);
					
					this.US_SIZE_NOT_FOUND = readString(dis);
					
					this.PRODUCT_NOT_FOUND = readString(dis);
					
					this.FASHION_NOT_FOUND = readString(dis);
					
					this.PRODUCT_STATUS_NOT_FOUND = readString(dis);
					
					this.PRODUCT_TIER_NOT_FOUND = readString(dis);
					
					this.SIZE_RATIO_SPLIT_NOT_FOUND = readString(dis);
					
					this.ATTRIBUTE_NOT_FOUND = readString(dis);
					
					this.UNITS_NOT_FOUND = readString(dis);
					
					this.COO_NOT_FOUND = readString(dis);
					
					this.CM_SIZE_NOT_FOUND = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.LINE_NUMBER,dos);
					
					// String
				
						writeString(this.DYNAMICS_COLOR,dos);
					
					// String
				
						writeString(this.DYNAMICS_BRAND,dos);
					
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
					// String
				
						writeString(this.BRAND_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SEASON_NOT_FOUND,dos);
					
					// String
				
						writeString(this.COLOR_NOT_FOUND,dos);
					
					// String
				
						writeString(this.CATEGORY_NOT_FOUND,dos);
					
					// String
				
						writeString(this.REF_NOT_FOUND,dos);
					
					// String
				
						writeString(this.DESCRIPTION_NOT_FOUND,dos);
					
					// String
				
						writeString(this.STYLE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.COLOR_NAME_NOT_FOUND,dos);
					
					// String
				
						writeString(this.LBL_NOT_FOUND,dos);
					
					// String
				
						writeString(this.STYLE_COLOR_NOT_FOUND,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL_NOT_FOUND,dos);
					
					// String
				
						writeString(this.GENDER_NOT_FOUND,dos);
					
					// String
				
						writeString(this.AGE_RANGE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SIZE_RANGE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SIZE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.US_SIZE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.PRODUCT_NOT_FOUND,dos);
					
					// String
				
						writeString(this.FASHION_NOT_FOUND,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS_NOT_FOUND,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT_NOT_FOUND,dos);
					
					// String
				
						writeString(this.ATTRIBUTE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.UNITS_NOT_FOUND,dos);
					
					// String
				
						writeString(this.COO_NOT_FOUND,dos);
					
					// String
				
						writeString(this.CM_SIZE_NOT_FOUND,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("LINE_NUMBER="+String.valueOf(LINE_NUMBER));
		sb.append(",DYNAMICS_COLOR="+DYNAMICS_COLOR);
		sb.append(",DYNAMICS_BRAND="+DYNAMICS_BRAND);
		sb.append(",BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
		sb.append(",BRAND_NOT_FOUND="+BRAND_NOT_FOUND);
		sb.append(",SEASON_NOT_FOUND="+SEASON_NOT_FOUND);
		sb.append(",COLOR_NOT_FOUND="+COLOR_NOT_FOUND);
		sb.append(",CATEGORY_NOT_FOUND="+CATEGORY_NOT_FOUND);
		sb.append(",REF_NOT_FOUND="+REF_NOT_FOUND);
		sb.append(",DESCRIPTION_NOT_FOUND="+DESCRIPTION_NOT_FOUND);
		sb.append(",STYLE_NOT_FOUND="+STYLE_NOT_FOUND);
		sb.append(",COLOR_NAME_NOT_FOUND="+COLOR_NAME_NOT_FOUND);
		sb.append(",LBL_NOT_FOUND="+LBL_NOT_FOUND);
		sb.append(",STYLE_COLOR_NOT_FOUND="+STYLE_COLOR_NOT_FOUND);
		sb.append(",STYLECOLORLABEL_NOT_FOUND="+STYLECOLORLABEL_NOT_FOUND);
		sb.append(",GENDER_NOT_FOUND="+GENDER_NOT_FOUND);
		sb.append(",AGE_RANGE_NOT_FOUND="+AGE_RANGE_NOT_FOUND);
		sb.append(",SIZE_RANGE_NOT_FOUND="+SIZE_RANGE_NOT_FOUND);
		sb.append(",SIZE_NOT_FOUND="+SIZE_NOT_FOUND);
		sb.append(",US_SIZE_NOT_FOUND="+US_SIZE_NOT_FOUND);
		sb.append(",PRODUCT_NOT_FOUND="+PRODUCT_NOT_FOUND);
		sb.append(",FASHION_NOT_FOUND="+FASHION_NOT_FOUND);
		sb.append(",PRODUCT_STATUS_NOT_FOUND="+PRODUCT_STATUS_NOT_FOUND);
		sb.append(",PRODUCT_TIER_NOT_FOUND="+PRODUCT_TIER_NOT_FOUND);
		sb.append(",SIZE_RATIO_SPLIT_NOT_FOUND="+SIZE_RATIO_SPLIT_NOT_FOUND);
		sb.append(",ATTRIBUTE_NOT_FOUND="+ATTRIBUTE_NOT_FOUND);
		sb.append(",UNITS_NOT_FOUND="+UNITS_NOT_FOUND);
		sb.append(",COO_NOT_FOUND="+COO_NOT_FOUND);
		sb.append(",CM_SIZE_NOT_FOUND="+CM_SIZE_NOT_FOUND);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_genderStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_categoryStruct implements routines.system.IPersistableRow<sortie_categoryStruct> {
    final static byte[] commonByteArrayLock_DEV_BUY_VALIDATION = new byte[0];
    static byte[] commonByteArray_DEV_BUY_VALIDATION = new byte[0];

	
			    public Integer LINE_NUMBER;

				public Integer getLINE_NUMBER () {
					return this.LINE_NUMBER;
				}
				
			    public String DYNAMICS_COLOR;

				public String getDYNAMICS_COLOR () {
					return this.DYNAMICS_COLOR;
				}
				
			    public String DYNAMICS_BRAND;

				public String getDYNAMICS_BRAND () {
					return this.DYNAMICS_BRAND;
				}
				
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				
			    public String BRAND_NOT_FOUND;

				public String getBRAND_NOT_FOUND () {
					return this.BRAND_NOT_FOUND;
				}
				
			    public String SEASON_NOT_FOUND;

				public String getSEASON_NOT_FOUND () {
					return this.SEASON_NOT_FOUND;
				}
				
			    public String COLOR_NOT_FOUND;

				public String getCOLOR_NOT_FOUND () {
					return this.COLOR_NOT_FOUND;
				}
				
			    public String CATEGORY_NOT_FOUND;

				public String getCATEGORY_NOT_FOUND () {
					return this.CATEGORY_NOT_FOUND;
				}
				
			    public String REF_NOT_FOUND;

				public String getREF_NOT_FOUND () {
					return this.REF_NOT_FOUND;
				}
				
			    public String DESCRIPTION_NOT_FOUND;

				public String getDESCRIPTION_NOT_FOUND () {
					return this.DESCRIPTION_NOT_FOUND;
				}
				
			    public String STYLE_NOT_FOUND;

				public String getSTYLE_NOT_FOUND () {
					return this.STYLE_NOT_FOUND;
				}
				
			    public String COLOR_NAME_NOT_FOUND;

				public String getCOLOR_NAME_NOT_FOUND () {
					return this.COLOR_NAME_NOT_FOUND;
				}
				
			    public String LBL_NOT_FOUND;

				public String getLBL_NOT_FOUND () {
					return this.LBL_NOT_FOUND;
				}
				
			    public String STYLE_COLOR_NOT_FOUND;

				public String getSTYLE_COLOR_NOT_FOUND () {
					return this.STYLE_COLOR_NOT_FOUND;
				}
				
			    public String STYLECOLORLABEL_NOT_FOUND;

				public String getSTYLECOLORLABEL_NOT_FOUND () {
					return this.STYLECOLORLABEL_NOT_FOUND;
				}
				
			    public String GENDER_NOT_FOUND;

				public String getGENDER_NOT_FOUND () {
					return this.GENDER_NOT_FOUND;
				}
				
			    public String AGE_RANGE_NOT_FOUND;

				public String getAGE_RANGE_NOT_FOUND () {
					return this.AGE_RANGE_NOT_FOUND;
				}
				
			    public String SIZE_RANGE_NOT_FOUND;

				public String getSIZE_RANGE_NOT_FOUND () {
					return this.SIZE_RANGE_NOT_FOUND;
				}
				
			    public String SIZE_NOT_FOUND;

				public String getSIZE_NOT_FOUND () {
					return this.SIZE_NOT_FOUND;
				}
				
			    public String US_SIZE_NOT_FOUND;

				public String getUS_SIZE_NOT_FOUND () {
					return this.US_SIZE_NOT_FOUND;
				}
				
			    public String PRODUCT_NOT_FOUND;

				public String getPRODUCT_NOT_FOUND () {
					return this.PRODUCT_NOT_FOUND;
				}
				
			    public String FASHION_NOT_FOUND;

				public String getFASHION_NOT_FOUND () {
					return this.FASHION_NOT_FOUND;
				}
				
			    public String PRODUCT_STATUS_NOT_FOUND;

				public String getPRODUCT_STATUS_NOT_FOUND () {
					return this.PRODUCT_STATUS_NOT_FOUND;
				}
				
			    public String PRODUCT_TIER_NOT_FOUND;

				public String getPRODUCT_TIER_NOT_FOUND () {
					return this.PRODUCT_TIER_NOT_FOUND;
				}
				
			    public String SIZE_RATIO_SPLIT_NOT_FOUND;

				public String getSIZE_RATIO_SPLIT_NOT_FOUND () {
					return this.SIZE_RATIO_SPLIT_NOT_FOUND;
				}
				
			    public String ATTRIBUTE_NOT_FOUND;

				public String getATTRIBUTE_NOT_FOUND () {
					return this.ATTRIBUTE_NOT_FOUND;
				}
				
			    public String UNITS_NOT_FOUND;

				public String getUNITS_NOT_FOUND () {
					return this.UNITS_NOT_FOUND;
				}
				
			    public String COO_NOT_FOUND;

				public String getCOO_NOT_FOUND () {
					return this.COO_NOT_FOUND;
				}
				
			    public String CM_SIZE_NOT_FOUND;

				public String getCM_SIZE_NOT_FOUND () {
					return this.CM_SIZE_NOT_FOUND;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_BUY_VALIDATION.length) {
				if(length < 1024 && commonByteArray_DEV_BUY_VALIDATION.length == 0) {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[1024];
				} else {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_BUY_VALIDATION, 0, length);
			strReturn = new String(commonByteArray_DEV_BUY_VALIDATION, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_BUY_VALIDATION) {

        	try {

        		int length = 0;
		
						this.LINE_NUMBER = readInteger(dis);
					
					this.DYNAMICS_COLOR = readString(dis);
					
					this.DYNAMICS_BRAND = readString(dis);
					
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
					this.BRAND_NOT_FOUND = readString(dis);
					
					this.SEASON_NOT_FOUND = readString(dis);
					
					this.COLOR_NOT_FOUND = readString(dis);
					
					this.CATEGORY_NOT_FOUND = readString(dis);
					
					this.REF_NOT_FOUND = readString(dis);
					
					this.DESCRIPTION_NOT_FOUND = readString(dis);
					
					this.STYLE_NOT_FOUND = readString(dis);
					
					this.COLOR_NAME_NOT_FOUND = readString(dis);
					
					this.LBL_NOT_FOUND = readString(dis);
					
					this.STYLE_COLOR_NOT_FOUND = readString(dis);
					
					this.STYLECOLORLABEL_NOT_FOUND = readString(dis);
					
					this.GENDER_NOT_FOUND = readString(dis);
					
					this.AGE_RANGE_NOT_FOUND = readString(dis);
					
					this.SIZE_RANGE_NOT_FOUND = readString(dis);
					
					this.SIZE_NOT_FOUND = readString(dis);
					
					this.US_SIZE_NOT_FOUND = readString(dis);
					
					this.PRODUCT_NOT_FOUND = readString(dis);
					
					this.FASHION_NOT_FOUND = readString(dis);
					
					this.PRODUCT_STATUS_NOT_FOUND = readString(dis);
					
					this.PRODUCT_TIER_NOT_FOUND = readString(dis);
					
					this.SIZE_RATIO_SPLIT_NOT_FOUND = readString(dis);
					
					this.ATTRIBUTE_NOT_FOUND = readString(dis);
					
					this.UNITS_NOT_FOUND = readString(dis);
					
					this.COO_NOT_FOUND = readString(dis);
					
					this.CM_SIZE_NOT_FOUND = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.LINE_NUMBER,dos);
					
					// String
				
						writeString(this.DYNAMICS_COLOR,dos);
					
					// String
				
						writeString(this.DYNAMICS_BRAND,dos);
					
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
					// String
				
						writeString(this.BRAND_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SEASON_NOT_FOUND,dos);
					
					// String
				
						writeString(this.COLOR_NOT_FOUND,dos);
					
					// String
				
						writeString(this.CATEGORY_NOT_FOUND,dos);
					
					// String
				
						writeString(this.REF_NOT_FOUND,dos);
					
					// String
				
						writeString(this.DESCRIPTION_NOT_FOUND,dos);
					
					// String
				
						writeString(this.STYLE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.COLOR_NAME_NOT_FOUND,dos);
					
					// String
				
						writeString(this.LBL_NOT_FOUND,dos);
					
					// String
				
						writeString(this.STYLE_COLOR_NOT_FOUND,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL_NOT_FOUND,dos);
					
					// String
				
						writeString(this.GENDER_NOT_FOUND,dos);
					
					// String
				
						writeString(this.AGE_RANGE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SIZE_RANGE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SIZE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.US_SIZE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.PRODUCT_NOT_FOUND,dos);
					
					// String
				
						writeString(this.FASHION_NOT_FOUND,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS_NOT_FOUND,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT_NOT_FOUND,dos);
					
					// String
				
						writeString(this.ATTRIBUTE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.UNITS_NOT_FOUND,dos);
					
					// String
				
						writeString(this.COO_NOT_FOUND,dos);
					
					// String
				
						writeString(this.CM_SIZE_NOT_FOUND,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("LINE_NUMBER="+String.valueOf(LINE_NUMBER));
		sb.append(",DYNAMICS_COLOR="+DYNAMICS_COLOR);
		sb.append(",DYNAMICS_BRAND="+DYNAMICS_BRAND);
		sb.append(",BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
		sb.append(",BRAND_NOT_FOUND="+BRAND_NOT_FOUND);
		sb.append(",SEASON_NOT_FOUND="+SEASON_NOT_FOUND);
		sb.append(",COLOR_NOT_FOUND="+COLOR_NOT_FOUND);
		sb.append(",CATEGORY_NOT_FOUND="+CATEGORY_NOT_FOUND);
		sb.append(",REF_NOT_FOUND="+REF_NOT_FOUND);
		sb.append(",DESCRIPTION_NOT_FOUND="+DESCRIPTION_NOT_FOUND);
		sb.append(",STYLE_NOT_FOUND="+STYLE_NOT_FOUND);
		sb.append(",COLOR_NAME_NOT_FOUND="+COLOR_NAME_NOT_FOUND);
		sb.append(",LBL_NOT_FOUND="+LBL_NOT_FOUND);
		sb.append(",STYLE_COLOR_NOT_FOUND="+STYLE_COLOR_NOT_FOUND);
		sb.append(",STYLECOLORLABEL_NOT_FOUND="+STYLECOLORLABEL_NOT_FOUND);
		sb.append(",GENDER_NOT_FOUND="+GENDER_NOT_FOUND);
		sb.append(",AGE_RANGE_NOT_FOUND="+AGE_RANGE_NOT_FOUND);
		sb.append(",SIZE_RANGE_NOT_FOUND="+SIZE_RANGE_NOT_FOUND);
		sb.append(",SIZE_NOT_FOUND="+SIZE_NOT_FOUND);
		sb.append(",US_SIZE_NOT_FOUND="+US_SIZE_NOT_FOUND);
		sb.append(",PRODUCT_NOT_FOUND="+PRODUCT_NOT_FOUND);
		sb.append(",FASHION_NOT_FOUND="+FASHION_NOT_FOUND);
		sb.append(",PRODUCT_STATUS_NOT_FOUND="+PRODUCT_STATUS_NOT_FOUND);
		sb.append(",PRODUCT_TIER_NOT_FOUND="+PRODUCT_TIER_NOT_FOUND);
		sb.append(",SIZE_RATIO_SPLIT_NOT_FOUND="+SIZE_RATIO_SPLIT_NOT_FOUND);
		sb.append(",ATTRIBUTE_NOT_FOUND="+ATTRIBUTE_NOT_FOUND);
		sb.append(",UNITS_NOT_FOUND="+UNITS_NOT_FOUND);
		sb.append(",COO_NOT_FOUND="+COO_NOT_FOUND);
		sb.append(",CM_SIZE_NOT_FOUND="+CM_SIZE_NOT_FOUND);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_categoryStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_seasonStruct implements routines.system.IPersistableRow<sortie_seasonStruct> {
    final static byte[] commonByteArrayLock_DEV_BUY_VALIDATION = new byte[0];
    static byte[] commonByteArray_DEV_BUY_VALIDATION = new byte[0];

	
			    public Integer LINE_NUMBER;

				public Integer getLINE_NUMBER () {
					return this.LINE_NUMBER;
				}
				
			    public String DYNAMICS_COLOR;

				public String getDYNAMICS_COLOR () {
					return this.DYNAMICS_COLOR;
				}
				
			    public String DYNAMICS_BRAND;

				public String getDYNAMICS_BRAND () {
					return this.DYNAMICS_BRAND;
				}
				
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				
			    public String BRAND_NOT_FOUND;

				public String getBRAND_NOT_FOUND () {
					return this.BRAND_NOT_FOUND;
				}
				
			    public String SEASON_NOT_FOUND;

				public String getSEASON_NOT_FOUND () {
					return this.SEASON_NOT_FOUND;
				}
				
			    public String COLOR_NOT_FOUND;

				public String getCOLOR_NOT_FOUND () {
					return this.COLOR_NOT_FOUND;
				}
				
			    public String CATEGORY_NOT_FOUND;

				public String getCATEGORY_NOT_FOUND () {
					return this.CATEGORY_NOT_FOUND;
				}
				
			    public String REF_NOT_FOUND;

				public String getREF_NOT_FOUND () {
					return this.REF_NOT_FOUND;
				}
				
			    public String DESCRIPTION_NOT_FOUND;

				public String getDESCRIPTION_NOT_FOUND () {
					return this.DESCRIPTION_NOT_FOUND;
				}
				
			    public String STYLE_NOT_FOUND;

				public String getSTYLE_NOT_FOUND () {
					return this.STYLE_NOT_FOUND;
				}
				
			    public String COLOR_NAME_NOT_FOUND;

				public String getCOLOR_NAME_NOT_FOUND () {
					return this.COLOR_NAME_NOT_FOUND;
				}
				
			    public String LBL_NOT_FOUND;

				public String getLBL_NOT_FOUND () {
					return this.LBL_NOT_FOUND;
				}
				
			    public String STYLE_COLOR_NOT_FOUND;

				public String getSTYLE_COLOR_NOT_FOUND () {
					return this.STYLE_COLOR_NOT_FOUND;
				}
				
			    public String STYLECOLORLABEL_NOT_FOUND;

				public String getSTYLECOLORLABEL_NOT_FOUND () {
					return this.STYLECOLORLABEL_NOT_FOUND;
				}
				
			    public String GENDER_NOT_FOUND;

				public String getGENDER_NOT_FOUND () {
					return this.GENDER_NOT_FOUND;
				}
				
			    public String AGE_RANGE_NOT_FOUND;

				public String getAGE_RANGE_NOT_FOUND () {
					return this.AGE_RANGE_NOT_FOUND;
				}
				
			    public String SIZE_RANGE_NOT_FOUND;

				public String getSIZE_RANGE_NOT_FOUND () {
					return this.SIZE_RANGE_NOT_FOUND;
				}
				
			    public String SIZE_NOT_FOUND;

				public String getSIZE_NOT_FOUND () {
					return this.SIZE_NOT_FOUND;
				}
				
			    public String US_SIZE_NOT_FOUND;

				public String getUS_SIZE_NOT_FOUND () {
					return this.US_SIZE_NOT_FOUND;
				}
				
			    public String PRODUCT_NOT_FOUND;

				public String getPRODUCT_NOT_FOUND () {
					return this.PRODUCT_NOT_FOUND;
				}
				
			    public String FASHION_NOT_FOUND;

				public String getFASHION_NOT_FOUND () {
					return this.FASHION_NOT_FOUND;
				}
				
			    public String PRODUCT_STATUS_NOT_FOUND;

				public String getPRODUCT_STATUS_NOT_FOUND () {
					return this.PRODUCT_STATUS_NOT_FOUND;
				}
				
			    public String PRODUCT_TIER_NOT_FOUND;

				public String getPRODUCT_TIER_NOT_FOUND () {
					return this.PRODUCT_TIER_NOT_FOUND;
				}
				
			    public String SIZE_RATIO_SPLIT_NOT_FOUND;

				public String getSIZE_RATIO_SPLIT_NOT_FOUND () {
					return this.SIZE_RATIO_SPLIT_NOT_FOUND;
				}
				
			    public String ATTRIBUTE_NOT_FOUND;

				public String getATTRIBUTE_NOT_FOUND () {
					return this.ATTRIBUTE_NOT_FOUND;
				}
				
			    public String UNITS_NOT_FOUND;

				public String getUNITS_NOT_FOUND () {
					return this.UNITS_NOT_FOUND;
				}
				
			    public String COO_NOT_FOUND;

				public String getCOO_NOT_FOUND () {
					return this.COO_NOT_FOUND;
				}
				
			    public String CM_SIZE_NOT_FOUND;

				public String getCM_SIZE_NOT_FOUND () {
					return this.CM_SIZE_NOT_FOUND;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_BUY_VALIDATION.length) {
				if(length < 1024 && commonByteArray_DEV_BUY_VALIDATION.length == 0) {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[1024];
				} else {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_BUY_VALIDATION, 0, length);
			strReturn = new String(commonByteArray_DEV_BUY_VALIDATION, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_BUY_VALIDATION) {

        	try {

        		int length = 0;
		
						this.LINE_NUMBER = readInteger(dis);
					
					this.DYNAMICS_COLOR = readString(dis);
					
					this.DYNAMICS_BRAND = readString(dis);
					
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
					this.BRAND_NOT_FOUND = readString(dis);
					
					this.SEASON_NOT_FOUND = readString(dis);
					
					this.COLOR_NOT_FOUND = readString(dis);
					
					this.CATEGORY_NOT_FOUND = readString(dis);
					
					this.REF_NOT_FOUND = readString(dis);
					
					this.DESCRIPTION_NOT_FOUND = readString(dis);
					
					this.STYLE_NOT_FOUND = readString(dis);
					
					this.COLOR_NAME_NOT_FOUND = readString(dis);
					
					this.LBL_NOT_FOUND = readString(dis);
					
					this.STYLE_COLOR_NOT_FOUND = readString(dis);
					
					this.STYLECOLORLABEL_NOT_FOUND = readString(dis);
					
					this.GENDER_NOT_FOUND = readString(dis);
					
					this.AGE_RANGE_NOT_FOUND = readString(dis);
					
					this.SIZE_RANGE_NOT_FOUND = readString(dis);
					
					this.SIZE_NOT_FOUND = readString(dis);
					
					this.US_SIZE_NOT_FOUND = readString(dis);
					
					this.PRODUCT_NOT_FOUND = readString(dis);
					
					this.FASHION_NOT_FOUND = readString(dis);
					
					this.PRODUCT_STATUS_NOT_FOUND = readString(dis);
					
					this.PRODUCT_TIER_NOT_FOUND = readString(dis);
					
					this.SIZE_RATIO_SPLIT_NOT_FOUND = readString(dis);
					
					this.ATTRIBUTE_NOT_FOUND = readString(dis);
					
					this.UNITS_NOT_FOUND = readString(dis);
					
					this.COO_NOT_FOUND = readString(dis);
					
					this.CM_SIZE_NOT_FOUND = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.LINE_NUMBER,dos);
					
					// String
				
						writeString(this.DYNAMICS_COLOR,dos);
					
					// String
				
						writeString(this.DYNAMICS_BRAND,dos);
					
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
					// String
				
						writeString(this.BRAND_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SEASON_NOT_FOUND,dos);
					
					// String
				
						writeString(this.COLOR_NOT_FOUND,dos);
					
					// String
				
						writeString(this.CATEGORY_NOT_FOUND,dos);
					
					// String
				
						writeString(this.REF_NOT_FOUND,dos);
					
					// String
				
						writeString(this.DESCRIPTION_NOT_FOUND,dos);
					
					// String
				
						writeString(this.STYLE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.COLOR_NAME_NOT_FOUND,dos);
					
					// String
				
						writeString(this.LBL_NOT_FOUND,dos);
					
					// String
				
						writeString(this.STYLE_COLOR_NOT_FOUND,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL_NOT_FOUND,dos);
					
					// String
				
						writeString(this.GENDER_NOT_FOUND,dos);
					
					// String
				
						writeString(this.AGE_RANGE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SIZE_RANGE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SIZE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.US_SIZE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.PRODUCT_NOT_FOUND,dos);
					
					// String
				
						writeString(this.FASHION_NOT_FOUND,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS_NOT_FOUND,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT_NOT_FOUND,dos);
					
					// String
				
						writeString(this.ATTRIBUTE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.UNITS_NOT_FOUND,dos);
					
					// String
				
						writeString(this.COO_NOT_FOUND,dos);
					
					// String
				
						writeString(this.CM_SIZE_NOT_FOUND,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("LINE_NUMBER="+String.valueOf(LINE_NUMBER));
		sb.append(",DYNAMICS_COLOR="+DYNAMICS_COLOR);
		sb.append(",DYNAMICS_BRAND="+DYNAMICS_BRAND);
		sb.append(",BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
		sb.append(",BRAND_NOT_FOUND="+BRAND_NOT_FOUND);
		sb.append(",SEASON_NOT_FOUND="+SEASON_NOT_FOUND);
		sb.append(",COLOR_NOT_FOUND="+COLOR_NOT_FOUND);
		sb.append(",CATEGORY_NOT_FOUND="+CATEGORY_NOT_FOUND);
		sb.append(",REF_NOT_FOUND="+REF_NOT_FOUND);
		sb.append(",DESCRIPTION_NOT_FOUND="+DESCRIPTION_NOT_FOUND);
		sb.append(",STYLE_NOT_FOUND="+STYLE_NOT_FOUND);
		sb.append(",COLOR_NAME_NOT_FOUND="+COLOR_NAME_NOT_FOUND);
		sb.append(",LBL_NOT_FOUND="+LBL_NOT_FOUND);
		sb.append(",STYLE_COLOR_NOT_FOUND="+STYLE_COLOR_NOT_FOUND);
		sb.append(",STYLECOLORLABEL_NOT_FOUND="+STYLECOLORLABEL_NOT_FOUND);
		sb.append(",GENDER_NOT_FOUND="+GENDER_NOT_FOUND);
		sb.append(",AGE_RANGE_NOT_FOUND="+AGE_RANGE_NOT_FOUND);
		sb.append(",SIZE_RANGE_NOT_FOUND="+SIZE_RANGE_NOT_FOUND);
		sb.append(",SIZE_NOT_FOUND="+SIZE_NOT_FOUND);
		sb.append(",US_SIZE_NOT_FOUND="+US_SIZE_NOT_FOUND);
		sb.append(",PRODUCT_NOT_FOUND="+PRODUCT_NOT_FOUND);
		sb.append(",FASHION_NOT_FOUND="+FASHION_NOT_FOUND);
		sb.append(",PRODUCT_STATUS_NOT_FOUND="+PRODUCT_STATUS_NOT_FOUND);
		sb.append(",PRODUCT_TIER_NOT_FOUND="+PRODUCT_TIER_NOT_FOUND);
		sb.append(",SIZE_RATIO_SPLIT_NOT_FOUND="+SIZE_RATIO_SPLIT_NOT_FOUND);
		sb.append(",ATTRIBUTE_NOT_FOUND="+ATTRIBUTE_NOT_FOUND);
		sb.append(",UNITS_NOT_FOUND="+UNITS_NOT_FOUND);
		sb.append(",COO_NOT_FOUND="+COO_NOT_FOUND);
		sb.append(",CM_SIZE_NOT_FOUND="+CM_SIZE_NOT_FOUND);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_seasonStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_BrandStruct implements routines.system.IPersistableRow<sortie_BrandStruct> {
    final static byte[] commonByteArrayLock_DEV_BUY_VALIDATION = new byte[0];
    static byte[] commonByteArray_DEV_BUY_VALIDATION = new byte[0];

	
			    public Integer LINE_NUMBER;

				public Integer getLINE_NUMBER () {
					return this.LINE_NUMBER;
				}
				
			    public String DYNAMICS_COLOR;

				public String getDYNAMICS_COLOR () {
					return this.DYNAMICS_COLOR;
				}
				
			    public String DYNAMICS_BRAND;

				public String getDYNAMICS_BRAND () {
					return this.DYNAMICS_BRAND;
				}
				
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				
			    public String BRAND_NOT_FOUND;

				public String getBRAND_NOT_FOUND () {
					return this.BRAND_NOT_FOUND;
				}
				
			    public String SEASON_NOT_FOUND;

				public String getSEASON_NOT_FOUND () {
					return this.SEASON_NOT_FOUND;
				}
				
			    public String COLOR_NOT_FOUND;

				public String getCOLOR_NOT_FOUND () {
					return this.COLOR_NOT_FOUND;
				}
				
			    public String CATEGORY_NOT_FOUND;

				public String getCATEGORY_NOT_FOUND () {
					return this.CATEGORY_NOT_FOUND;
				}
				
			    public String REF_NOT_FOUND;

				public String getREF_NOT_FOUND () {
					return this.REF_NOT_FOUND;
				}
				
			    public String DESCRIPTION_NOT_FOUND;

				public String getDESCRIPTION_NOT_FOUND () {
					return this.DESCRIPTION_NOT_FOUND;
				}
				
			    public String STYLE_NOT_FOUND;

				public String getSTYLE_NOT_FOUND () {
					return this.STYLE_NOT_FOUND;
				}
				
			    public String COLOR_NAME_NOT_FOUND;

				public String getCOLOR_NAME_NOT_FOUND () {
					return this.COLOR_NAME_NOT_FOUND;
				}
				
			    public String LBL_NOT_FOUND;

				public String getLBL_NOT_FOUND () {
					return this.LBL_NOT_FOUND;
				}
				
			    public String STYLE_COLOR_NOT_FOUND;

				public String getSTYLE_COLOR_NOT_FOUND () {
					return this.STYLE_COLOR_NOT_FOUND;
				}
				
			    public String STYLECOLORLABEL_NOT_FOUND;

				public String getSTYLECOLORLABEL_NOT_FOUND () {
					return this.STYLECOLORLABEL_NOT_FOUND;
				}
				
			    public String GENDER_NOT_FOUND;

				public String getGENDER_NOT_FOUND () {
					return this.GENDER_NOT_FOUND;
				}
				
			    public String AGE_RANGE_NOT_FOUND;

				public String getAGE_RANGE_NOT_FOUND () {
					return this.AGE_RANGE_NOT_FOUND;
				}
				
			    public String SIZE_RANGE_NOT_FOUND;

				public String getSIZE_RANGE_NOT_FOUND () {
					return this.SIZE_RANGE_NOT_FOUND;
				}
				
			    public String SIZE_NOT_FOUND;

				public String getSIZE_NOT_FOUND () {
					return this.SIZE_NOT_FOUND;
				}
				
			    public String US_SIZE_NOT_FOUND;

				public String getUS_SIZE_NOT_FOUND () {
					return this.US_SIZE_NOT_FOUND;
				}
				
			    public String PRODUCT_NOT_FOUND;

				public String getPRODUCT_NOT_FOUND () {
					return this.PRODUCT_NOT_FOUND;
				}
				
			    public String FASHION_NOT_FOUND;

				public String getFASHION_NOT_FOUND () {
					return this.FASHION_NOT_FOUND;
				}
				
			    public String PRODUCT_STATUS_NOT_FOUND;

				public String getPRODUCT_STATUS_NOT_FOUND () {
					return this.PRODUCT_STATUS_NOT_FOUND;
				}
				
			    public String PRODUCT_TIER_NOT_FOUND;

				public String getPRODUCT_TIER_NOT_FOUND () {
					return this.PRODUCT_TIER_NOT_FOUND;
				}
				
			    public String SIZE_RATIO_SPLIT_NOT_FOUND;

				public String getSIZE_RATIO_SPLIT_NOT_FOUND () {
					return this.SIZE_RATIO_SPLIT_NOT_FOUND;
				}
				
			    public String ATTRIBUTE_NOT_FOUND;

				public String getATTRIBUTE_NOT_FOUND () {
					return this.ATTRIBUTE_NOT_FOUND;
				}
				
			    public String UNITS_NOT_FOUND;

				public String getUNITS_NOT_FOUND () {
					return this.UNITS_NOT_FOUND;
				}
				
			    public String COO_NOT_FOUND;

				public String getCOO_NOT_FOUND () {
					return this.COO_NOT_FOUND;
				}
				
			    public String CM_SIZE_NOT_FOUND;

				public String getCM_SIZE_NOT_FOUND () {
					return this.CM_SIZE_NOT_FOUND;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_BUY_VALIDATION.length) {
				if(length < 1024 && commonByteArray_DEV_BUY_VALIDATION.length == 0) {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[1024];
				} else {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_BUY_VALIDATION, 0, length);
			strReturn = new String(commonByteArray_DEV_BUY_VALIDATION, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_BUY_VALIDATION) {

        	try {

        		int length = 0;
		
						this.LINE_NUMBER = readInteger(dis);
					
					this.DYNAMICS_COLOR = readString(dis);
					
					this.DYNAMICS_BRAND = readString(dis);
					
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
					this.BRAND_NOT_FOUND = readString(dis);
					
					this.SEASON_NOT_FOUND = readString(dis);
					
					this.COLOR_NOT_FOUND = readString(dis);
					
					this.CATEGORY_NOT_FOUND = readString(dis);
					
					this.REF_NOT_FOUND = readString(dis);
					
					this.DESCRIPTION_NOT_FOUND = readString(dis);
					
					this.STYLE_NOT_FOUND = readString(dis);
					
					this.COLOR_NAME_NOT_FOUND = readString(dis);
					
					this.LBL_NOT_FOUND = readString(dis);
					
					this.STYLE_COLOR_NOT_FOUND = readString(dis);
					
					this.STYLECOLORLABEL_NOT_FOUND = readString(dis);
					
					this.GENDER_NOT_FOUND = readString(dis);
					
					this.AGE_RANGE_NOT_FOUND = readString(dis);
					
					this.SIZE_RANGE_NOT_FOUND = readString(dis);
					
					this.SIZE_NOT_FOUND = readString(dis);
					
					this.US_SIZE_NOT_FOUND = readString(dis);
					
					this.PRODUCT_NOT_FOUND = readString(dis);
					
					this.FASHION_NOT_FOUND = readString(dis);
					
					this.PRODUCT_STATUS_NOT_FOUND = readString(dis);
					
					this.PRODUCT_TIER_NOT_FOUND = readString(dis);
					
					this.SIZE_RATIO_SPLIT_NOT_FOUND = readString(dis);
					
					this.ATTRIBUTE_NOT_FOUND = readString(dis);
					
					this.UNITS_NOT_FOUND = readString(dis);
					
					this.COO_NOT_FOUND = readString(dis);
					
					this.CM_SIZE_NOT_FOUND = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.LINE_NUMBER,dos);
					
					// String
				
						writeString(this.DYNAMICS_COLOR,dos);
					
					// String
				
						writeString(this.DYNAMICS_BRAND,dos);
					
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
					// String
				
						writeString(this.BRAND_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SEASON_NOT_FOUND,dos);
					
					// String
				
						writeString(this.COLOR_NOT_FOUND,dos);
					
					// String
				
						writeString(this.CATEGORY_NOT_FOUND,dos);
					
					// String
				
						writeString(this.REF_NOT_FOUND,dos);
					
					// String
				
						writeString(this.DESCRIPTION_NOT_FOUND,dos);
					
					// String
				
						writeString(this.STYLE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.COLOR_NAME_NOT_FOUND,dos);
					
					// String
				
						writeString(this.LBL_NOT_FOUND,dos);
					
					// String
				
						writeString(this.STYLE_COLOR_NOT_FOUND,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL_NOT_FOUND,dos);
					
					// String
				
						writeString(this.GENDER_NOT_FOUND,dos);
					
					// String
				
						writeString(this.AGE_RANGE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SIZE_RANGE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SIZE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.US_SIZE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.PRODUCT_NOT_FOUND,dos);
					
					// String
				
						writeString(this.FASHION_NOT_FOUND,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS_NOT_FOUND,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT_NOT_FOUND,dos);
					
					// String
				
						writeString(this.ATTRIBUTE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.UNITS_NOT_FOUND,dos);
					
					// String
				
						writeString(this.COO_NOT_FOUND,dos);
					
					// String
				
						writeString(this.CM_SIZE_NOT_FOUND,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("LINE_NUMBER="+String.valueOf(LINE_NUMBER));
		sb.append(",DYNAMICS_COLOR="+DYNAMICS_COLOR);
		sb.append(",DYNAMICS_BRAND="+DYNAMICS_BRAND);
		sb.append(",BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
		sb.append(",BRAND_NOT_FOUND="+BRAND_NOT_FOUND);
		sb.append(",SEASON_NOT_FOUND="+SEASON_NOT_FOUND);
		sb.append(",COLOR_NOT_FOUND="+COLOR_NOT_FOUND);
		sb.append(",CATEGORY_NOT_FOUND="+CATEGORY_NOT_FOUND);
		sb.append(",REF_NOT_FOUND="+REF_NOT_FOUND);
		sb.append(",DESCRIPTION_NOT_FOUND="+DESCRIPTION_NOT_FOUND);
		sb.append(",STYLE_NOT_FOUND="+STYLE_NOT_FOUND);
		sb.append(",COLOR_NAME_NOT_FOUND="+COLOR_NAME_NOT_FOUND);
		sb.append(",LBL_NOT_FOUND="+LBL_NOT_FOUND);
		sb.append(",STYLE_COLOR_NOT_FOUND="+STYLE_COLOR_NOT_FOUND);
		sb.append(",STYLECOLORLABEL_NOT_FOUND="+STYLECOLORLABEL_NOT_FOUND);
		sb.append(",GENDER_NOT_FOUND="+GENDER_NOT_FOUND);
		sb.append(",AGE_RANGE_NOT_FOUND="+AGE_RANGE_NOT_FOUND);
		sb.append(",SIZE_RANGE_NOT_FOUND="+SIZE_RANGE_NOT_FOUND);
		sb.append(",SIZE_NOT_FOUND="+SIZE_NOT_FOUND);
		sb.append(",US_SIZE_NOT_FOUND="+US_SIZE_NOT_FOUND);
		sb.append(",PRODUCT_NOT_FOUND="+PRODUCT_NOT_FOUND);
		sb.append(",FASHION_NOT_FOUND="+FASHION_NOT_FOUND);
		sb.append(",PRODUCT_STATUS_NOT_FOUND="+PRODUCT_STATUS_NOT_FOUND);
		sb.append(",PRODUCT_TIER_NOT_FOUND="+PRODUCT_TIER_NOT_FOUND);
		sb.append(",SIZE_RATIO_SPLIT_NOT_FOUND="+SIZE_RATIO_SPLIT_NOT_FOUND);
		sb.append(",ATTRIBUTE_NOT_FOUND="+ATTRIBUTE_NOT_FOUND);
		sb.append(",UNITS_NOT_FOUND="+UNITS_NOT_FOUND);
		sb.append(",COO_NOT_FOUND="+COO_NOT_FOUND);
		sb.append(",CM_SIZE_NOT_FOUND="+CM_SIZE_NOT_FOUND);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_BrandStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
    final static byte[] commonByteArrayLock_DEV_BUY_VALIDATION = new byte[0];
    static byte[] commonByteArray_DEV_BUY_VALIDATION = new byte[0];

	
			    public Integer LINE_NUMBER;

				public Integer getLINE_NUMBER () {
					return this.LINE_NUMBER;
				}
				
			    public String DYNAMICS_COLOR;

				public String getDYNAMICS_COLOR () {
					return this.DYNAMICS_COLOR;
				}
				
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				
			    public String BRAND_NOT_FOUND;

				public String getBRAND_NOT_FOUND () {
					return this.BRAND_NOT_FOUND;
				}
				
			    public String SEASON_NOT_FOUND;

				public String getSEASON_NOT_FOUND () {
					return this.SEASON_NOT_FOUND;
				}
				
			    public String COLOR_NOT_FOUND;

				public String getCOLOR_NOT_FOUND () {
					return this.COLOR_NOT_FOUND;
				}
				
			    public String CATEGORY_NOT_FOUND;

				public String getCATEGORY_NOT_FOUND () {
					return this.CATEGORY_NOT_FOUND;
				}
				
			    public String REF_NOT_FOUND;

				public String getREF_NOT_FOUND () {
					return this.REF_NOT_FOUND;
				}
				
			    public String DESCRIPTION_NOT_FOUND;

				public String getDESCRIPTION_NOT_FOUND () {
					return this.DESCRIPTION_NOT_FOUND;
				}
				
			    public String STYLE_NOT_FOUND;

				public String getSTYLE_NOT_FOUND () {
					return this.STYLE_NOT_FOUND;
				}
				
			    public String COLOR_NAME_NOT_FOUND;

				public String getCOLOR_NAME_NOT_FOUND () {
					return this.COLOR_NAME_NOT_FOUND;
				}
				
			    public String LBL_NOT_FOUND;

				public String getLBL_NOT_FOUND () {
					return this.LBL_NOT_FOUND;
				}
				
			    public String STYLE_COLOR_NOT_FOUND;

				public String getSTYLE_COLOR_NOT_FOUND () {
					return this.STYLE_COLOR_NOT_FOUND;
				}
				
			    public String STYLECOLORLABEL_NOT_FOUND;

				public String getSTYLECOLORLABEL_NOT_FOUND () {
					return this.STYLECOLORLABEL_NOT_FOUND;
				}
				
			    public String GENDER_NOT_FOUND;

				public String getGENDER_NOT_FOUND () {
					return this.GENDER_NOT_FOUND;
				}
				
			    public String AGE_RANGE_NOT_FOUND;

				public String getAGE_RANGE_NOT_FOUND () {
					return this.AGE_RANGE_NOT_FOUND;
				}
				
			    public String SIZE_RANGE_NOT_FOUND;

				public String getSIZE_RANGE_NOT_FOUND () {
					return this.SIZE_RANGE_NOT_FOUND;
				}
				
			    public String SIZE_NOT_FOUND;

				public String getSIZE_NOT_FOUND () {
					return this.SIZE_NOT_FOUND;
				}
				
			    public String US_SIZE_NOT_FOUND;

				public String getUS_SIZE_NOT_FOUND () {
					return this.US_SIZE_NOT_FOUND;
				}
				
			    public String PRODUCT_NOT_FOUND;

				public String getPRODUCT_NOT_FOUND () {
					return this.PRODUCT_NOT_FOUND;
				}
				
			    public String FASHION_NOT_FOUND;

				public String getFASHION_NOT_FOUND () {
					return this.FASHION_NOT_FOUND;
				}
				
			    public String PRODUCT_STATUS_NOT_FOUND;

				public String getPRODUCT_STATUS_NOT_FOUND () {
					return this.PRODUCT_STATUS_NOT_FOUND;
				}
				
			    public String PRODUCT_TIER_NOT_FOUND;

				public String getPRODUCT_TIER_NOT_FOUND () {
					return this.PRODUCT_TIER_NOT_FOUND;
				}
				
			    public String SIZE_RATIO_SPLIT_NOT_FOUND;

				public String getSIZE_RATIO_SPLIT_NOT_FOUND () {
					return this.SIZE_RATIO_SPLIT_NOT_FOUND;
				}
				
			    public String ATTRIBUTE_NOT_FOUND;

				public String getATTRIBUTE_NOT_FOUND () {
					return this.ATTRIBUTE_NOT_FOUND;
				}
				
			    public String UNITS_NOT_FOUND;

				public String getUNITS_NOT_FOUND () {
					return this.UNITS_NOT_FOUND;
				}
				
			    public String COO_NOT_FOUND;

				public String getCOO_NOT_FOUND () {
					return this.COO_NOT_FOUND;
				}
				
			    public String CM_SIZE_NOT_FOUND;

				public String getCM_SIZE_NOT_FOUND () {
					return this.CM_SIZE_NOT_FOUND;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_BUY_VALIDATION.length) {
				if(length < 1024 && commonByteArray_DEV_BUY_VALIDATION.length == 0) {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[1024];
				} else {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_BUY_VALIDATION, 0, length);
			strReturn = new String(commonByteArray_DEV_BUY_VALIDATION, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_BUY_VALIDATION) {

        	try {

        		int length = 0;
		
						this.LINE_NUMBER = readInteger(dis);
					
					this.DYNAMICS_COLOR = readString(dis);
					
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
					this.BRAND_NOT_FOUND = readString(dis);
					
					this.SEASON_NOT_FOUND = readString(dis);
					
					this.COLOR_NOT_FOUND = readString(dis);
					
					this.CATEGORY_NOT_FOUND = readString(dis);
					
					this.REF_NOT_FOUND = readString(dis);
					
					this.DESCRIPTION_NOT_FOUND = readString(dis);
					
					this.STYLE_NOT_FOUND = readString(dis);
					
					this.COLOR_NAME_NOT_FOUND = readString(dis);
					
					this.LBL_NOT_FOUND = readString(dis);
					
					this.STYLE_COLOR_NOT_FOUND = readString(dis);
					
					this.STYLECOLORLABEL_NOT_FOUND = readString(dis);
					
					this.GENDER_NOT_FOUND = readString(dis);
					
					this.AGE_RANGE_NOT_FOUND = readString(dis);
					
					this.SIZE_RANGE_NOT_FOUND = readString(dis);
					
					this.SIZE_NOT_FOUND = readString(dis);
					
					this.US_SIZE_NOT_FOUND = readString(dis);
					
					this.PRODUCT_NOT_FOUND = readString(dis);
					
					this.FASHION_NOT_FOUND = readString(dis);
					
					this.PRODUCT_STATUS_NOT_FOUND = readString(dis);
					
					this.PRODUCT_TIER_NOT_FOUND = readString(dis);
					
					this.SIZE_RATIO_SPLIT_NOT_FOUND = readString(dis);
					
					this.ATTRIBUTE_NOT_FOUND = readString(dis);
					
					this.UNITS_NOT_FOUND = readString(dis);
					
					this.COO_NOT_FOUND = readString(dis);
					
					this.CM_SIZE_NOT_FOUND = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.LINE_NUMBER,dos);
					
					// String
				
						writeString(this.DYNAMICS_COLOR,dos);
					
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
					// String
				
						writeString(this.BRAND_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SEASON_NOT_FOUND,dos);
					
					// String
				
						writeString(this.COLOR_NOT_FOUND,dos);
					
					// String
				
						writeString(this.CATEGORY_NOT_FOUND,dos);
					
					// String
				
						writeString(this.REF_NOT_FOUND,dos);
					
					// String
				
						writeString(this.DESCRIPTION_NOT_FOUND,dos);
					
					// String
				
						writeString(this.STYLE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.COLOR_NAME_NOT_FOUND,dos);
					
					// String
				
						writeString(this.LBL_NOT_FOUND,dos);
					
					// String
				
						writeString(this.STYLE_COLOR_NOT_FOUND,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL_NOT_FOUND,dos);
					
					// String
				
						writeString(this.GENDER_NOT_FOUND,dos);
					
					// String
				
						writeString(this.AGE_RANGE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SIZE_RANGE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SIZE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.US_SIZE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.PRODUCT_NOT_FOUND,dos);
					
					// String
				
						writeString(this.FASHION_NOT_FOUND,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS_NOT_FOUND,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT_NOT_FOUND,dos);
					
					// String
				
						writeString(this.ATTRIBUTE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.UNITS_NOT_FOUND,dos);
					
					// String
				
						writeString(this.COO_NOT_FOUND,dos);
					
					// String
				
						writeString(this.CM_SIZE_NOT_FOUND,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("LINE_NUMBER="+String.valueOf(LINE_NUMBER));
		sb.append(",DYNAMICS_COLOR="+DYNAMICS_COLOR);
		sb.append(",BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
		sb.append(",BRAND_NOT_FOUND="+BRAND_NOT_FOUND);
		sb.append(",SEASON_NOT_FOUND="+SEASON_NOT_FOUND);
		sb.append(",COLOR_NOT_FOUND="+COLOR_NOT_FOUND);
		sb.append(",CATEGORY_NOT_FOUND="+CATEGORY_NOT_FOUND);
		sb.append(",REF_NOT_FOUND="+REF_NOT_FOUND);
		sb.append(",DESCRIPTION_NOT_FOUND="+DESCRIPTION_NOT_FOUND);
		sb.append(",STYLE_NOT_FOUND="+STYLE_NOT_FOUND);
		sb.append(",COLOR_NAME_NOT_FOUND="+COLOR_NAME_NOT_FOUND);
		sb.append(",LBL_NOT_FOUND="+LBL_NOT_FOUND);
		sb.append(",STYLE_COLOR_NOT_FOUND="+STYLE_COLOR_NOT_FOUND);
		sb.append(",STYLECOLORLABEL_NOT_FOUND="+STYLECOLORLABEL_NOT_FOUND);
		sb.append(",GENDER_NOT_FOUND="+GENDER_NOT_FOUND);
		sb.append(",AGE_RANGE_NOT_FOUND="+AGE_RANGE_NOT_FOUND);
		sb.append(",SIZE_RANGE_NOT_FOUND="+SIZE_RANGE_NOT_FOUND);
		sb.append(",SIZE_NOT_FOUND="+SIZE_NOT_FOUND);
		sb.append(",US_SIZE_NOT_FOUND="+US_SIZE_NOT_FOUND);
		sb.append(",PRODUCT_NOT_FOUND="+PRODUCT_NOT_FOUND);
		sb.append(",FASHION_NOT_FOUND="+FASHION_NOT_FOUND);
		sb.append(",PRODUCT_STATUS_NOT_FOUND="+PRODUCT_STATUS_NOT_FOUND);
		sb.append(",PRODUCT_TIER_NOT_FOUND="+PRODUCT_TIER_NOT_FOUND);
		sb.append(",SIZE_RATIO_SPLIT_NOT_FOUND="+SIZE_RATIO_SPLIT_NOT_FOUND);
		sb.append(",ATTRIBUTE_NOT_FOUND="+ATTRIBUTE_NOT_FOUND);
		sb.append(",UNITS_NOT_FOUND="+UNITS_NOT_FOUND);
		sb.append(",COO_NOT_FOUND="+COO_NOT_FOUND);
		sb.append(",CM_SIZE_NOT_FOUND="+CM_SIZE_NOT_FOUND);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row12Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortieStruct implements routines.system.IPersistableRow<sortieStruct> {
    final static byte[] commonByteArrayLock_DEV_BUY_VALIDATION = new byte[0];
    static byte[] commonByteArray_DEV_BUY_VALIDATION = new byte[0];

	
			    public Integer LINE_NUMBER;

				public Integer getLINE_NUMBER () {
					return this.LINE_NUMBER;
				}
				
			    public String DYNAMICS_COLOR;

				public String getDYNAMICS_COLOR () {
					return this.DYNAMICS_COLOR;
				}
				
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				
			    public String BRAND_NOT_FOUND;

				public String getBRAND_NOT_FOUND () {
					return this.BRAND_NOT_FOUND;
				}
				
			    public String SEASON_NOT_FOUND;

				public String getSEASON_NOT_FOUND () {
					return this.SEASON_NOT_FOUND;
				}
				
			    public String COLOR_NOT_FOUND;

				public String getCOLOR_NOT_FOUND () {
					return this.COLOR_NOT_FOUND;
				}
				
			    public String CATEGORY_NOT_FOUND;

				public String getCATEGORY_NOT_FOUND () {
					return this.CATEGORY_NOT_FOUND;
				}
				
			    public String REF_NOT_FOUND;

				public String getREF_NOT_FOUND () {
					return this.REF_NOT_FOUND;
				}
				
			    public String DESCRIPTION_NOT_FOUND;

				public String getDESCRIPTION_NOT_FOUND () {
					return this.DESCRIPTION_NOT_FOUND;
				}
				
			    public String STYLE_NOT_FOUND;

				public String getSTYLE_NOT_FOUND () {
					return this.STYLE_NOT_FOUND;
				}
				
			    public String COLOR_NAME_NOT_FOUND;

				public String getCOLOR_NAME_NOT_FOUND () {
					return this.COLOR_NAME_NOT_FOUND;
				}
				
			    public String LBL_NOT_FOUND;

				public String getLBL_NOT_FOUND () {
					return this.LBL_NOT_FOUND;
				}
				
			    public String STYLE_COLOR_NOT_FOUND;

				public String getSTYLE_COLOR_NOT_FOUND () {
					return this.STYLE_COLOR_NOT_FOUND;
				}
				
			    public String STYLECOLORLABEL_NOT_FOUND;

				public String getSTYLECOLORLABEL_NOT_FOUND () {
					return this.STYLECOLORLABEL_NOT_FOUND;
				}
				
			    public String GENDER_NOT_FOUND;

				public String getGENDER_NOT_FOUND () {
					return this.GENDER_NOT_FOUND;
				}
				
			    public String AGE_RANGE_NOT_FOUND;

				public String getAGE_RANGE_NOT_FOUND () {
					return this.AGE_RANGE_NOT_FOUND;
				}
				
			    public String SIZE_RANGE_NOT_FOUND;

				public String getSIZE_RANGE_NOT_FOUND () {
					return this.SIZE_RANGE_NOT_FOUND;
				}
				
			    public String SIZE_NOT_FOUND;

				public String getSIZE_NOT_FOUND () {
					return this.SIZE_NOT_FOUND;
				}
				
			    public String US_SIZE_NOT_FOUND;

				public String getUS_SIZE_NOT_FOUND () {
					return this.US_SIZE_NOT_FOUND;
				}
				
			    public String PRODUCT_NOT_FOUND;

				public String getPRODUCT_NOT_FOUND () {
					return this.PRODUCT_NOT_FOUND;
				}
				
			    public String FASHION_NOT_FOUND;

				public String getFASHION_NOT_FOUND () {
					return this.FASHION_NOT_FOUND;
				}
				
			    public String PRODUCT_STATUS_NOT_FOUND;

				public String getPRODUCT_STATUS_NOT_FOUND () {
					return this.PRODUCT_STATUS_NOT_FOUND;
				}
				
			    public String PRODUCT_TIER_NOT_FOUND;

				public String getPRODUCT_TIER_NOT_FOUND () {
					return this.PRODUCT_TIER_NOT_FOUND;
				}
				
			    public String SIZE_RATIO_SPLIT_NOT_FOUND;

				public String getSIZE_RATIO_SPLIT_NOT_FOUND () {
					return this.SIZE_RATIO_SPLIT_NOT_FOUND;
				}
				
			    public String ATTRIBUTE_NOT_FOUND;

				public String getATTRIBUTE_NOT_FOUND () {
					return this.ATTRIBUTE_NOT_FOUND;
				}
				
			    public String UNITS_NOT_FOUND;

				public String getUNITS_NOT_FOUND () {
					return this.UNITS_NOT_FOUND;
				}
				
			    public String COO_NOT_FOUND;

				public String getCOO_NOT_FOUND () {
					return this.COO_NOT_FOUND;
				}
				
			    public String CM_SIZE_NOT_FOUND;

				public String getCM_SIZE_NOT_FOUND () {
					return this.CM_SIZE_NOT_FOUND;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_BUY_VALIDATION.length) {
				if(length < 1024 && commonByteArray_DEV_BUY_VALIDATION.length == 0) {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[1024];
				} else {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_BUY_VALIDATION, 0, length);
			strReturn = new String(commonByteArray_DEV_BUY_VALIDATION, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_BUY_VALIDATION) {

        	try {

        		int length = 0;
		
						this.LINE_NUMBER = readInteger(dis);
					
					this.DYNAMICS_COLOR = readString(dis);
					
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
					this.BRAND_NOT_FOUND = readString(dis);
					
					this.SEASON_NOT_FOUND = readString(dis);
					
					this.COLOR_NOT_FOUND = readString(dis);
					
					this.CATEGORY_NOT_FOUND = readString(dis);
					
					this.REF_NOT_FOUND = readString(dis);
					
					this.DESCRIPTION_NOT_FOUND = readString(dis);
					
					this.STYLE_NOT_FOUND = readString(dis);
					
					this.COLOR_NAME_NOT_FOUND = readString(dis);
					
					this.LBL_NOT_FOUND = readString(dis);
					
					this.STYLE_COLOR_NOT_FOUND = readString(dis);
					
					this.STYLECOLORLABEL_NOT_FOUND = readString(dis);
					
					this.GENDER_NOT_FOUND = readString(dis);
					
					this.AGE_RANGE_NOT_FOUND = readString(dis);
					
					this.SIZE_RANGE_NOT_FOUND = readString(dis);
					
					this.SIZE_NOT_FOUND = readString(dis);
					
					this.US_SIZE_NOT_FOUND = readString(dis);
					
					this.PRODUCT_NOT_FOUND = readString(dis);
					
					this.FASHION_NOT_FOUND = readString(dis);
					
					this.PRODUCT_STATUS_NOT_FOUND = readString(dis);
					
					this.PRODUCT_TIER_NOT_FOUND = readString(dis);
					
					this.SIZE_RATIO_SPLIT_NOT_FOUND = readString(dis);
					
					this.ATTRIBUTE_NOT_FOUND = readString(dis);
					
					this.UNITS_NOT_FOUND = readString(dis);
					
					this.COO_NOT_FOUND = readString(dis);
					
					this.CM_SIZE_NOT_FOUND = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.LINE_NUMBER,dos);
					
					// String
				
						writeString(this.DYNAMICS_COLOR,dos);
					
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
					// String
				
						writeString(this.BRAND_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SEASON_NOT_FOUND,dos);
					
					// String
				
						writeString(this.COLOR_NOT_FOUND,dos);
					
					// String
				
						writeString(this.CATEGORY_NOT_FOUND,dos);
					
					// String
				
						writeString(this.REF_NOT_FOUND,dos);
					
					// String
				
						writeString(this.DESCRIPTION_NOT_FOUND,dos);
					
					// String
				
						writeString(this.STYLE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.COLOR_NAME_NOT_FOUND,dos);
					
					// String
				
						writeString(this.LBL_NOT_FOUND,dos);
					
					// String
				
						writeString(this.STYLE_COLOR_NOT_FOUND,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL_NOT_FOUND,dos);
					
					// String
				
						writeString(this.GENDER_NOT_FOUND,dos);
					
					// String
				
						writeString(this.AGE_RANGE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SIZE_RANGE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SIZE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.US_SIZE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.PRODUCT_NOT_FOUND,dos);
					
					// String
				
						writeString(this.FASHION_NOT_FOUND,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS_NOT_FOUND,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT_NOT_FOUND,dos);
					
					// String
				
						writeString(this.ATTRIBUTE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.UNITS_NOT_FOUND,dos);
					
					// String
				
						writeString(this.COO_NOT_FOUND,dos);
					
					// String
				
						writeString(this.CM_SIZE_NOT_FOUND,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("LINE_NUMBER="+String.valueOf(LINE_NUMBER));
		sb.append(",DYNAMICS_COLOR="+DYNAMICS_COLOR);
		sb.append(",BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
		sb.append(",BRAND_NOT_FOUND="+BRAND_NOT_FOUND);
		sb.append(",SEASON_NOT_FOUND="+SEASON_NOT_FOUND);
		sb.append(",COLOR_NOT_FOUND="+COLOR_NOT_FOUND);
		sb.append(",CATEGORY_NOT_FOUND="+CATEGORY_NOT_FOUND);
		sb.append(",REF_NOT_FOUND="+REF_NOT_FOUND);
		sb.append(",DESCRIPTION_NOT_FOUND="+DESCRIPTION_NOT_FOUND);
		sb.append(",STYLE_NOT_FOUND="+STYLE_NOT_FOUND);
		sb.append(",COLOR_NAME_NOT_FOUND="+COLOR_NAME_NOT_FOUND);
		sb.append(",LBL_NOT_FOUND="+LBL_NOT_FOUND);
		sb.append(",STYLE_COLOR_NOT_FOUND="+STYLE_COLOR_NOT_FOUND);
		sb.append(",STYLECOLORLABEL_NOT_FOUND="+STYLECOLORLABEL_NOT_FOUND);
		sb.append(",GENDER_NOT_FOUND="+GENDER_NOT_FOUND);
		sb.append(",AGE_RANGE_NOT_FOUND="+AGE_RANGE_NOT_FOUND);
		sb.append(",SIZE_RANGE_NOT_FOUND="+SIZE_RANGE_NOT_FOUND);
		sb.append(",SIZE_NOT_FOUND="+SIZE_NOT_FOUND);
		sb.append(",US_SIZE_NOT_FOUND="+US_SIZE_NOT_FOUND);
		sb.append(",PRODUCT_NOT_FOUND="+PRODUCT_NOT_FOUND);
		sb.append(",FASHION_NOT_FOUND="+FASHION_NOT_FOUND);
		sb.append(",PRODUCT_STATUS_NOT_FOUND="+PRODUCT_STATUS_NOT_FOUND);
		sb.append(",PRODUCT_TIER_NOT_FOUND="+PRODUCT_TIER_NOT_FOUND);
		sb.append(",SIZE_RATIO_SPLIT_NOT_FOUND="+SIZE_RATIO_SPLIT_NOT_FOUND);
		sb.append(",ATTRIBUTE_NOT_FOUND="+ATTRIBUTE_NOT_FOUND);
		sb.append(",UNITS_NOT_FOUND="+UNITS_NOT_FOUND);
		sb.append(",COO_NOT_FOUND="+COO_NOT_FOUND);
		sb.append(",CM_SIZE_NOT_FOUND="+CM_SIZE_NOT_FOUND);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortieStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
    final static byte[] commonByteArrayLock_DEV_BUY_VALIDATION = new byte[0];
    static byte[] commonByteArray_DEV_BUY_VALIDATION = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				
			    public String BRAND_NOT_FOUND;

				public String getBRAND_NOT_FOUND () {
					return this.BRAND_NOT_FOUND;
				}
				
			    public String SEASON_NOT_FOUND;

				public String getSEASON_NOT_FOUND () {
					return this.SEASON_NOT_FOUND;
				}
				
			    public String COLOR_NOT_FOUND;

				public String getCOLOR_NOT_FOUND () {
					return this.COLOR_NOT_FOUND;
				}
				
			    public String CATEGORY_NOT_FOUND;

				public String getCATEGORY_NOT_FOUND () {
					return this.CATEGORY_NOT_FOUND;
				}
				
			    public String REF_NOT_FOUND;

				public String getREF_NOT_FOUND () {
					return this.REF_NOT_FOUND;
				}
				
			    public String DESCRIPTION_NOT_FOUND;

				public String getDESCRIPTION_NOT_FOUND () {
					return this.DESCRIPTION_NOT_FOUND;
				}
				
			    public String STYLE_NOT_FOUND;

				public String getSTYLE_NOT_FOUND () {
					return this.STYLE_NOT_FOUND;
				}
				
			    public String COLOR_NAME_NOT_FOUND;

				public String getCOLOR_NAME_NOT_FOUND () {
					return this.COLOR_NAME_NOT_FOUND;
				}
				
			    public String LBL_NOT_FOUND;

				public String getLBL_NOT_FOUND () {
					return this.LBL_NOT_FOUND;
				}
				
			    public String STYLE_COLOR_NOT_FOUND;

				public String getSTYLE_COLOR_NOT_FOUND () {
					return this.STYLE_COLOR_NOT_FOUND;
				}
				
			    public String STYLECOLORLABEL_NOT_FOUND;

				public String getSTYLECOLORLABEL_NOT_FOUND () {
					return this.STYLECOLORLABEL_NOT_FOUND;
				}
				
			    public String GENDER_NOT_FOUND;

				public String getGENDER_NOT_FOUND () {
					return this.GENDER_NOT_FOUND;
				}
				
			    public String AGE_RANGE_NOT_FOUND;

				public String getAGE_RANGE_NOT_FOUND () {
					return this.AGE_RANGE_NOT_FOUND;
				}
				
			    public String SIZE_RANGE_NOT_FOUND;

				public String getSIZE_RANGE_NOT_FOUND () {
					return this.SIZE_RANGE_NOT_FOUND;
				}
				
			    public String SIZE_NOT_FOUND;

				public String getSIZE_NOT_FOUND () {
					return this.SIZE_NOT_FOUND;
				}
				
			    public String US_SIZE_NOT_FOUND;

				public String getUS_SIZE_NOT_FOUND () {
					return this.US_SIZE_NOT_FOUND;
				}
				
			    public String PRODUCT_NOT_FOUND;

				public String getPRODUCT_NOT_FOUND () {
					return this.PRODUCT_NOT_FOUND;
				}
				
			    public String FASHION_NOT_FOUND;

				public String getFASHION_NOT_FOUND () {
					return this.FASHION_NOT_FOUND;
				}
				
			    public String PRODUCT_STATUS_NOT_FOUND;

				public String getPRODUCT_STATUS_NOT_FOUND () {
					return this.PRODUCT_STATUS_NOT_FOUND;
				}
				
			    public String PRODUCT_TIER_NOT_FOUND;

				public String getPRODUCT_TIER_NOT_FOUND () {
					return this.PRODUCT_TIER_NOT_FOUND;
				}
				
			    public String SIZE_RATIO_SPLIT_NOT_FOUND;

				public String getSIZE_RATIO_SPLIT_NOT_FOUND () {
					return this.SIZE_RATIO_SPLIT_NOT_FOUND;
				}
				
			    public String ATTRIBUTE_NOT_FOUND;

				public String getATTRIBUTE_NOT_FOUND () {
					return this.ATTRIBUTE_NOT_FOUND;
				}
				
			    public String UNITS_NOT_FOUND;

				public String getUNITS_NOT_FOUND () {
					return this.UNITS_NOT_FOUND;
				}
				
			    public String COO_NOT_FOUND;

				public String getCOO_NOT_FOUND () {
					return this.COO_NOT_FOUND;
				}
				
			    public String CM_SIZE_NOT_FOUND;

				public String getCM_SIZE_NOT_FOUND () {
					return this.CM_SIZE_NOT_FOUND;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_BUY_VALIDATION.length) {
				if(length < 1024 && commonByteArray_DEV_BUY_VALIDATION.length == 0) {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[1024];
				} else {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_BUY_VALIDATION, 0, length);
			strReturn = new String(commonByteArray_DEV_BUY_VALIDATION, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_BUY_VALIDATION) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
					this.BRAND_NOT_FOUND = readString(dis);
					
					this.SEASON_NOT_FOUND = readString(dis);
					
					this.COLOR_NOT_FOUND = readString(dis);
					
					this.CATEGORY_NOT_FOUND = readString(dis);
					
					this.REF_NOT_FOUND = readString(dis);
					
					this.DESCRIPTION_NOT_FOUND = readString(dis);
					
					this.STYLE_NOT_FOUND = readString(dis);
					
					this.COLOR_NAME_NOT_FOUND = readString(dis);
					
					this.LBL_NOT_FOUND = readString(dis);
					
					this.STYLE_COLOR_NOT_FOUND = readString(dis);
					
					this.STYLECOLORLABEL_NOT_FOUND = readString(dis);
					
					this.GENDER_NOT_FOUND = readString(dis);
					
					this.AGE_RANGE_NOT_FOUND = readString(dis);
					
					this.SIZE_RANGE_NOT_FOUND = readString(dis);
					
					this.SIZE_NOT_FOUND = readString(dis);
					
					this.US_SIZE_NOT_FOUND = readString(dis);
					
					this.PRODUCT_NOT_FOUND = readString(dis);
					
					this.FASHION_NOT_FOUND = readString(dis);
					
					this.PRODUCT_STATUS_NOT_FOUND = readString(dis);
					
					this.PRODUCT_TIER_NOT_FOUND = readString(dis);
					
					this.SIZE_RATIO_SPLIT_NOT_FOUND = readString(dis);
					
					this.ATTRIBUTE_NOT_FOUND = readString(dis);
					
					this.UNITS_NOT_FOUND = readString(dis);
					
					this.COO_NOT_FOUND = readString(dis);
					
					this.CM_SIZE_NOT_FOUND = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
					// String
				
						writeString(this.BRAND_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SEASON_NOT_FOUND,dos);
					
					// String
				
						writeString(this.COLOR_NOT_FOUND,dos);
					
					// String
				
						writeString(this.CATEGORY_NOT_FOUND,dos);
					
					// String
				
						writeString(this.REF_NOT_FOUND,dos);
					
					// String
				
						writeString(this.DESCRIPTION_NOT_FOUND,dos);
					
					// String
				
						writeString(this.STYLE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.COLOR_NAME_NOT_FOUND,dos);
					
					// String
				
						writeString(this.LBL_NOT_FOUND,dos);
					
					// String
				
						writeString(this.STYLE_COLOR_NOT_FOUND,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL_NOT_FOUND,dos);
					
					// String
				
						writeString(this.GENDER_NOT_FOUND,dos);
					
					// String
				
						writeString(this.AGE_RANGE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SIZE_RANGE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SIZE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.US_SIZE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.PRODUCT_NOT_FOUND,dos);
					
					// String
				
						writeString(this.FASHION_NOT_FOUND,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS_NOT_FOUND,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT_NOT_FOUND,dos);
					
					// String
				
						writeString(this.ATTRIBUTE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.UNITS_NOT_FOUND,dos);
					
					// String
				
						writeString(this.COO_NOT_FOUND,dos);
					
					// String
				
						writeString(this.CM_SIZE_NOT_FOUND,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
		sb.append(",BRAND_NOT_FOUND="+BRAND_NOT_FOUND);
		sb.append(",SEASON_NOT_FOUND="+SEASON_NOT_FOUND);
		sb.append(",COLOR_NOT_FOUND="+COLOR_NOT_FOUND);
		sb.append(",CATEGORY_NOT_FOUND="+CATEGORY_NOT_FOUND);
		sb.append(",REF_NOT_FOUND="+REF_NOT_FOUND);
		sb.append(",DESCRIPTION_NOT_FOUND="+DESCRIPTION_NOT_FOUND);
		sb.append(",STYLE_NOT_FOUND="+STYLE_NOT_FOUND);
		sb.append(",COLOR_NAME_NOT_FOUND="+COLOR_NAME_NOT_FOUND);
		sb.append(",LBL_NOT_FOUND="+LBL_NOT_FOUND);
		sb.append(",STYLE_COLOR_NOT_FOUND="+STYLE_COLOR_NOT_FOUND);
		sb.append(",STYLECOLORLABEL_NOT_FOUND="+STYLECOLORLABEL_NOT_FOUND);
		sb.append(",GENDER_NOT_FOUND="+GENDER_NOT_FOUND);
		sb.append(",AGE_RANGE_NOT_FOUND="+AGE_RANGE_NOT_FOUND);
		sb.append(",SIZE_RANGE_NOT_FOUND="+SIZE_RANGE_NOT_FOUND);
		sb.append(",SIZE_NOT_FOUND="+SIZE_NOT_FOUND);
		sb.append(",US_SIZE_NOT_FOUND="+US_SIZE_NOT_FOUND);
		sb.append(",PRODUCT_NOT_FOUND="+PRODUCT_NOT_FOUND);
		sb.append(",FASHION_NOT_FOUND="+FASHION_NOT_FOUND);
		sb.append(",PRODUCT_STATUS_NOT_FOUND="+PRODUCT_STATUS_NOT_FOUND);
		sb.append(",PRODUCT_TIER_NOT_FOUND="+PRODUCT_TIER_NOT_FOUND);
		sb.append(",SIZE_RATIO_SPLIT_NOT_FOUND="+SIZE_RATIO_SPLIT_NOT_FOUND);
		sb.append(",ATTRIBUTE_NOT_FOUND="+ATTRIBUTE_NOT_FOUND);
		sb.append(",UNITS_NOT_FOUND="+UNITS_NOT_FOUND);
		sb.append(",COO_NOT_FOUND="+COO_NOT_FOUND);
		sb.append(",CM_SIZE_NOT_FOUND="+CM_SIZE_NOT_FOUND);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row32Struct implements routines.system.IPersistableRow<row32Struct> {
    final static byte[] commonByteArrayLock_DEV_BUY_VALIDATION = new byte[0];
    static byte[] commonByteArray_DEV_BUY_VALIDATION = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				
			    public String BRAND_NOT_FOUND;

				public String getBRAND_NOT_FOUND () {
					return this.BRAND_NOT_FOUND;
				}
				
			    public String SEASON_NOT_FOUND;

				public String getSEASON_NOT_FOUND () {
					return this.SEASON_NOT_FOUND;
				}
				
			    public String COLOR_NOT_FOUND;

				public String getCOLOR_NOT_FOUND () {
					return this.COLOR_NOT_FOUND;
				}
				
			    public String CATEGORY_NOT_FOUND;

				public String getCATEGORY_NOT_FOUND () {
					return this.CATEGORY_NOT_FOUND;
				}
				
			    public String REF_NOT_FOUND;

				public String getREF_NOT_FOUND () {
					return this.REF_NOT_FOUND;
				}
				
			    public String DESCRIPTION_NOT_FOUND;

				public String getDESCRIPTION_NOT_FOUND () {
					return this.DESCRIPTION_NOT_FOUND;
				}
				
			    public String STYLE_NOT_FOUND;

				public String getSTYLE_NOT_FOUND () {
					return this.STYLE_NOT_FOUND;
				}
				
			    public String COLOR_NAME_NOT_FOUND;

				public String getCOLOR_NAME_NOT_FOUND () {
					return this.COLOR_NAME_NOT_FOUND;
				}
				
			    public String LBL_NOT_FOUND;

				public String getLBL_NOT_FOUND () {
					return this.LBL_NOT_FOUND;
				}
				
			    public String STYLE_COLOR_NOT_FOUND;

				public String getSTYLE_COLOR_NOT_FOUND () {
					return this.STYLE_COLOR_NOT_FOUND;
				}
				
			    public String STYLECOLORLABEL_NOT_FOUND;

				public String getSTYLECOLORLABEL_NOT_FOUND () {
					return this.STYLECOLORLABEL_NOT_FOUND;
				}
				
			    public String GENDER_NOT_FOUND;

				public String getGENDER_NOT_FOUND () {
					return this.GENDER_NOT_FOUND;
				}
				
			    public String AGE_RANGE_NOT_FOUND;

				public String getAGE_RANGE_NOT_FOUND () {
					return this.AGE_RANGE_NOT_FOUND;
				}
				
			    public String SIZE_RANGE_NOT_FOUND;

				public String getSIZE_RANGE_NOT_FOUND () {
					return this.SIZE_RANGE_NOT_FOUND;
				}
				
			    public String SIZE_NOT_FOUND;

				public String getSIZE_NOT_FOUND () {
					return this.SIZE_NOT_FOUND;
				}
				
			    public String US_SIZE_NOT_FOUND;

				public String getUS_SIZE_NOT_FOUND () {
					return this.US_SIZE_NOT_FOUND;
				}
				
			    public String PRODUCT_NOT_FOUND;

				public String getPRODUCT_NOT_FOUND () {
					return this.PRODUCT_NOT_FOUND;
				}
				
			    public String FASHION_NOT_FOUND;

				public String getFASHION_NOT_FOUND () {
					return this.FASHION_NOT_FOUND;
				}
				
			    public String PRODUCT_STATUS_NOT_FOUND;

				public String getPRODUCT_STATUS_NOT_FOUND () {
					return this.PRODUCT_STATUS_NOT_FOUND;
				}
				
			    public String PRODUCT_TIER_NOT_FOUND;

				public String getPRODUCT_TIER_NOT_FOUND () {
					return this.PRODUCT_TIER_NOT_FOUND;
				}
				
			    public String SIZE_RATIO_SPLIT_NOT_FOUND;

				public String getSIZE_RATIO_SPLIT_NOT_FOUND () {
					return this.SIZE_RATIO_SPLIT_NOT_FOUND;
				}
				
			    public String ATTRIBUTE_NOT_FOUND;

				public String getATTRIBUTE_NOT_FOUND () {
					return this.ATTRIBUTE_NOT_FOUND;
				}
				
			    public String UNITS_NOT_FOUND;

				public String getUNITS_NOT_FOUND () {
					return this.UNITS_NOT_FOUND;
				}
				
			    public String COO_NOT_FOUND;

				public String getCOO_NOT_FOUND () {
					return this.COO_NOT_FOUND;
				}
				
			    public String CM_SIZE_NOT_FOUND;

				public String getCM_SIZE_NOT_FOUND () {
					return this.CM_SIZE_NOT_FOUND;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_BUY_VALIDATION.length) {
				if(length < 1024 && commonByteArray_DEV_BUY_VALIDATION.length == 0) {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[1024];
				} else {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_BUY_VALIDATION, 0, length);
			strReturn = new String(commonByteArray_DEV_BUY_VALIDATION, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_BUY_VALIDATION) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
					this.BRAND_NOT_FOUND = readString(dis);
					
					this.SEASON_NOT_FOUND = readString(dis);
					
					this.COLOR_NOT_FOUND = readString(dis);
					
					this.CATEGORY_NOT_FOUND = readString(dis);
					
					this.REF_NOT_FOUND = readString(dis);
					
					this.DESCRIPTION_NOT_FOUND = readString(dis);
					
					this.STYLE_NOT_FOUND = readString(dis);
					
					this.COLOR_NAME_NOT_FOUND = readString(dis);
					
					this.LBL_NOT_FOUND = readString(dis);
					
					this.STYLE_COLOR_NOT_FOUND = readString(dis);
					
					this.STYLECOLORLABEL_NOT_FOUND = readString(dis);
					
					this.GENDER_NOT_FOUND = readString(dis);
					
					this.AGE_RANGE_NOT_FOUND = readString(dis);
					
					this.SIZE_RANGE_NOT_FOUND = readString(dis);
					
					this.SIZE_NOT_FOUND = readString(dis);
					
					this.US_SIZE_NOT_FOUND = readString(dis);
					
					this.PRODUCT_NOT_FOUND = readString(dis);
					
					this.FASHION_NOT_FOUND = readString(dis);
					
					this.PRODUCT_STATUS_NOT_FOUND = readString(dis);
					
					this.PRODUCT_TIER_NOT_FOUND = readString(dis);
					
					this.SIZE_RATIO_SPLIT_NOT_FOUND = readString(dis);
					
					this.ATTRIBUTE_NOT_FOUND = readString(dis);
					
					this.UNITS_NOT_FOUND = readString(dis);
					
					this.COO_NOT_FOUND = readString(dis);
					
					this.CM_SIZE_NOT_FOUND = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
					// String
				
						writeString(this.BRAND_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SEASON_NOT_FOUND,dos);
					
					// String
				
						writeString(this.COLOR_NOT_FOUND,dos);
					
					// String
				
						writeString(this.CATEGORY_NOT_FOUND,dos);
					
					// String
				
						writeString(this.REF_NOT_FOUND,dos);
					
					// String
				
						writeString(this.DESCRIPTION_NOT_FOUND,dos);
					
					// String
				
						writeString(this.STYLE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.COLOR_NAME_NOT_FOUND,dos);
					
					// String
				
						writeString(this.LBL_NOT_FOUND,dos);
					
					// String
				
						writeString(this.STYLE_COLOR_NOT_FOUND,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL_NOT_FOUND,dos);
					
					// String
				
						writeString(this.GENDER_NOT_FOUND,dos);
					
					// String
				
						writeString(this.AGE_RANGE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SIZE_RANGE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SIZE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.US_SIZE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.PRODUCT_NOT_FOUND,dos);
					
					// String
				
						writeString(this.FASHION_NOT_FOUND,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS_NOT_FOUND,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT_NOT_FOUND,dos);
					
					// String
				
						writeString(this.ATTRIBUTE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.UNITS_NOT_FOUND,dos);
					
					// String
				
						writeString(this.COO_NOT_FOUND,dos);
					
					// String
				
						writeString(this.CM_SIZE_NOT_FOUND,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
		sb.append(",BRAND_NOT_FOUND="+BRAND_NOT_FOUND);
		sb.append(",SEASON_NOT_FOUND="+SEASON_NOT_FOUND);
		sb.append(",COLOR_NOT_FOUND="+COLOR_NOT_FOUND);
		sb.append(",CATEGORY_NOT_FOUND="+CATEGORY_NOT_FOUND);
		sb.append(",REF_NOT_FOUND="+REF_NOT_FOUND);
		sb.append(",DESCRIPTION_NOT_FOUND="+DESCRIPTION_NOT_FOUND);
		sb.append(",STYLE_NOT_FOUND="+STYLE_NOT_FOUND);
		sb.append(",COLOR_NAME_NOT_FOUND="+COLOR_NAME_NOT_FOUND);
		sb.append(",LBL_NOT_FOUND="+LBL_NOT_FOUND);
		sb.append(",STYLE_COLOR_NOT_FOUND="+STYLE_COLOR_NOT_FOUND);
		sb.append(",STYLECOLORLABEL_NOT_FOUND="+STYLECOLORLABEL_NOT_FOUND);
		sb.append(",GENDER_NOT_FOUND="+GENDER_NOT_FOUND);
		sb.append(",AGE_RANGE_NOT_FOUND="+AGE_RANGE_NOT_FOUND);
		sb.append(",SIZE_RANGE_NOT_FOUND="+SIZE_RANGE_NOT_FOUND);
		sb.append(",SIZE_NOT_FOUND="+SIZE_NOT_FOUND);
		sb.append(",US_SIZE_NOT_FOUND="+US_SIZE_NOT_FOUND);
		sb.append(",PRODUCT_NOT_FOUND="+PRODUCT_NOT_FOUND);
		sb.append(",FASHION_NOT_FOUND="+FASHION_NOT_FOUND);
		sb.append(",PRODUCT_STATUS_NOT_FOUND="+PRODUCT_STATUS_NOT_FOUND);
		sb.append(",PRODUCT_TIER_NOT_FOUND="+PRODUCT_TIER_NOT_FOUND);
		sb.append(",SIZE_RATIO_SPLIT_NOT_FOUND="+SIZE_RATIO_SPLIT_NOT_FOUND);
		sb.append(",ATTRIBUTE_NOT_FOUND="+ATTRIBUTE_NOT_FOUND);
		sb.append(",UNITS_NOT_FOUND="+UNITS_NOT_FOUND);
		sb.append(",COO_NOT_FOUND="+COO_NOT_FOUND);
		sb.append(",CM_SIZE_NOT_FOUND="+CM_SIZE_NOT_FOUND);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row32Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class validate_fieldsStruct implements routines.system.IPersistableRow<validate_fieldsStruct> {
    final static byte[] commonByteArrayLock_DEV_BUY_VALIDATION = new byte[0];
    static byte[] commonByteArray_DEV_BUY_VALIDATION = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				
			    public String BRAND_NOT_FOUND;

				public String getBRAND_NOT_FOUND () {
					return this.BRAND_NOT_FOUND;
				}
				
			    public String SEASON_NOT_FOUND;

				public String getSEASON_NOT_FOUND () {
					return this.SEASON_NOT_FOUND;
				}
				
			    public String COLOR_NOT_FOUND;

				public String getCOLOR_NOT_FOUND () {
					return this.COLOR_NOT_FOUND;
				}
				
			    public String CATEGORY_NOT_FOUND;

				public String getCATEGORY_NOT_FOUND () {
					return this.CATEGORY_NOT_FOUND;
				}
				
			    public String REF_NOT_FOUND;

				public String getREF_NOT_FOUND () {
					return this.REF_NOT_FOUND;
				}
				
			    public String DESCRIPTION_NOT_FOUND;

				public String getDESCRIPTION_NOT_FOUND () {
					return this.DESCRIPTION_NOT_FOUND;
				}
				
			    public String STYLE_NOT_FOUND;

				public String getSTYLE_NOT_FOUND () {
					return this.STYLE_NOT_FOUND;
				}
				
			    public String COLOR_NAME_NOT_FOUND;

				public String getCOLOR_NAME_NOT_FOUND () {
					return this.COLOR_NAME_NOT_FOUND;
				}
				
			    public String LBL_NOT_FOUND;

				public String getLBL_NOT_FOUND () {
					return this.LBL_NOT_FOUND;
				}
				
			    public String STYLE_COLOR_NOT_FOUND;

				public String getSTYLE_COLOR_NOT_FOUND () {
					return this.STYLE_COLOR_NOT_FOUND;
				}
				
			    public String STYLECOLORLABEL_NOT_FOUND;

				public String getSTYLECOLORLABEL_NOT_FOUND () {
					return this.STYLECOLORLABEL_NOT_FOUND;
				}
				
			    public String GENDER_NOT_FOUND;

				public String getGENDER_NOT_FOUND () {
					return this.GENDER_NOT_FOUND;
				}
				
			    public String AGE_RANGE_NOT_FOUND;

				public String getAGE_RANGE_NOT_FOUND () {
					return this.AGE_RANGE_NOT_FOUND;
				}
				
			    public String SIZE_RANGE_NOT_FOUND;

				public String getSIZE_RANGE_NOT_FOUND () {
					return this.SIZE_RANGE_NOT_FOUND;
				}
				
			    public String SIZE_NOT_FOUND;

				public String getSIZE_NOT_FOUND () {
					return this.SIZE_NOT_FOUND;
				}
				
			    public String US_SIZE_NOT_FOUND;

				public String getUS_SIZE_NOT_FOUND () {
					return this.US_SIZE_NOT_FOUND;
				}
				
			    public String PRODUCT_NOT_FOUND;

				public String getPRODUCT_NOT_FOUND () {
					return this.PRODUCT_NOT_FOUND;
				}
				
			    public String FASHION_NOT_FOUND;

				public String getFASHION_NOT_FOUND () {
					return this.FASHION_NOT_FOUND;
				}
				
			    public String PRODUCT_STATUS_NOT_FOUND;

				public String getPRODUCT_STATUS_NOT_FOUND () {
					return this.PRODUCT_STATUS_NOT_FOUND;
				}
				
			    public String PRODUCT_TIER_NOT_FOUND;

				public String getPRODUCT_TIER_NOT_FOUND () {
					return this.PRODUCT_TIER_NOT_FOUND;
				}
				
			    public String SIZE_RATIO_SPLIT_NOT_FOUND;

				public String getSIZE_RATIO_SPLIT_NOT_FOUND () {
					return this.SIZE_RATIO_SPLIT_NOT_FOUND;
				}
				
			    public String ATTRIBUTE_NOT_FOUND;

				public String getATTRIBUTE_NOT_FOUND () {
					return this.ATTRIBUTE_NOT_FOUND;
				}
				
			    public String UNITS_NOT_FOUND;

				public String getUNITS_NOT_FOUND () {
					return this.UNITS_NOT_FOUND;
				}
				
			    public String COO_NOT_FOUND;

				public String getCOO_NOT_FOUND () {
					return this.COO_NOT_FOUND;
				}
				
			    public String CM_SIZE_NOT_FOUND;

				public String getCM_SIZE_NOT_FOUND () {
					return this.CM_SIZE_NOT_FOUND;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_BUY_VALIDATION.length) {
				if(length < 1024 && commonByteArray_DEV_BUY_VALIDATION.length == 0) {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[1024];
				} else {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_BUY_VALIDATION, 0, length);
			strReturn = new String(commonByteArray_DEV_BUY_VALIDATION, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_BUY_VALIDATION) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
					this.BRAND_NOT_FOUND = readString(dis);
					
					this.SEASON_NOT_FOUND = readString(dis);
					
					this.COLOR_NOT_FOUND = readString(dis);
					
					this.CATEGORY_NOT_FOUND = readString(dis);
					
					this.REF_NOT_FOUND = readString(dis);
					
					this.DESCRIPTION_NOT_FOUND = readString(dis);
					
					this.STYLE_NOT_FOUND = readString(dis);
					
					this.COLOR_NAME_NOT_FOUND = readString(dis);
					
					this.LBL_NOT_FOUND = readString(dis);
					
					this.STYLE_COLOR_NOT_FOUND = readString(dis);
					
					this.STYLECOLORLABEL_NOT_FOUND = readString(dis);
					
					this.GENDER_NOT_FOUND = readString(dis);
					
					this.AGE_RANGE_NOT_FOUND = readString(dis);
					
					this.SIZE_RANGE_NOT_FOUND = readString(dis);
					
					this.SIZE_NOT_FOUND = readString(dis);
					
					this.US_SIZE_NOT_FOUND = readString(dis);
					
					this.PRODUCT_NOT_FOUND = readString(dis);
					
					this.FASHION_NOT_FOUND = readString(dis);
					
					this.PRODUCT_STATUS_NOT_FOUND = readString(dis);
					
					this.PRODUCT_TIER_NOT_FOUND = readString(dis);
					
					this.SIZE_RATIO_SPLIT_NOT_FOUND = readString(dis);
					
					this.ATTRIBUTE_NOT_FOUND = readString(dis);
					
					this.UNITS_NOT_FOUND = readString(dis);
					
					this.COO_NOT_FOUND = readString(dis);
					
					this.CM_SIZE_NOT_FOUND = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
					// String
				
						writeString(this.BRAND_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SEASON_NOT_FOUND,dos);
					
					// String
				
						writeString(this.COLOR_NOT_FOUND,dos);
					
					// String
				
						writeString(this.CATEGORY_NOT_FOUND,dos);
					
					// String
				
						writeString(this.REF_NOT_FOUND,dos);
					
					// String
				
						writeString(this.DESCRIPTION_NOT_FOUND,dos);
					
					// String
				
						writeString(this.STYLE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.COLOR_NAME_NOT_FOUND,dos);
					
					// String
				
						writeString(this.LBL_NOT_FOUND,dos);
					
					// String
				
						writeString(this.STYLE_COLOR_NOT_FOUND,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL_NOT_FOUND,dos);
					
					// String
				
						writeString(this.GENDER_NOT_FOUND,dos);
					
					// String
				
						writeString(this.AGE_RANGE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SIZE_RANGE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SIZE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.US_SIZE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.PRODUCT_NOT_FOUND,dos);
					
					// String
				
						writeString(this.FASHION_NOT_FOUND,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS_NOT_FOUND,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER_NOT_FOUND,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT_NOT_FOUND,dos);
					
					// String
				
						writeString(this.ATTRIBUTE_NOT_FOUND,dos);
					
					// String
				
						writeString(this.UNITS_NOT_FOUND,dos);
					
					// String
				
						writeString(this.COO_NOT_FOUND,dos);
					
					// String
				
						writeString(this.CM_SIZE_NOT_FOUND,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
		sb.append(",BRAND_NOT_FOUND="+BRAND_NOT_FOUND);
		sb.append(",SEASON_NOT_FOUND="+SEASON_NOT_FOUND);
		sb.append(",COLOR_NOT_FOUND="+COLOR_NOT_FOUND);
		sb.append(",CATEGORY_NOT_FOUND="+CATEGORY_NOT_FOUND);
		sb.append(",REF_NOT_FOUND="+REF_NOT_FOUND);
		sb.append(",DESCRIPTION_NOT_FOUND="+DESCRIPTION_NOT_FOUND);
		sb.append(",STYLE_NOT_FOUND="+STYLE_NOT_FOUND);
		sb.append(",COLOR_NAME_NOT_FOUND="+COLOR_NAME_NOT_FOUND);
		sb.append(",LBL_NOT_FOUND="+LBL_NOT_FOUND);
		sb.append(",STYLE_COLOR_NOT_FOUND="+STYLE_COLOR_NOT_FOUND);
		sb.append(",STYLECOLORLABEL_NOT_FOUND="+STYLECOLORLABEL_NOT_FOUND);
		sb.append(",GENDER_NOT_FOUND="+GENDER_NOT_FOUND);
		sb.append(",AGE_RANGE_NOT_FOUND="+AGE_RANGE_NOT_FOUND);
		sb.append(",SIZE_RANGE_NOT_FOUND="+SIZE_RANGE_NOT_FOUND);
		sb.append(",SIZE_NOT_FOUND="+SIZE_NOT_FOUND);
		sb.append(",US_SIZE_NOT_FOUND="+US_SIZE_NOT_FOUND);
		sb.append(",PRODUCT_NOT_FOUND="+PRODUCT_NOT_FOUND);
		sb.append(",FASHION_NOT_FOUND="+FASHION_NOT_FOUND);
		sb.append(",PRODUCT_STATUS_NOT_FOUND="+PRODUCT_STATUS_NOT_FOUND);
		sb.append(",PRODUCT_TIER_NOT_FOUND="+PRODUCT_TIER_NOT_FOUND);
		sb.append(",SIZE_RATIO_SPLIT_NOT_FOUND="+SIZE_RATIO_SPLIT_NOT_FOUND);
		sb.append(",ATTRIBUTE_NOT_FOUND="+ATTRIBUTE_NOT_FOUND);
		sb.append(",UNITS_NOT_FOUND="+UNITS_NOT_FOUND);
		sb.append(",COO_NOT_FOUND="+COO_NOT_FOUND);
		sb.append(",CM_SIZE_NOT_FOUND="+CM_SIZE_NOT_FOUND);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(validate_fieldsStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_ExcelStruct implements routines.system.IPersistableRow<sortie_ExcelStruct> {
    final static byte[] commonByteArrayLock_DEV_BUY_VALIDATION = new byte[0];
    static byte[] commonByteArray_DEV_BUY_VALIDATION = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				
			    public String EAN;

				public String getEAN () {
					return this.EAN;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_BUY_VALIDATION.length) {
				if(length < 1024 && commonByteArray_DEV_BUY_VALIDATION.length == 0) {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[1024];
				} else {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_BUY_VALIDATION, 0, length);
			strReturn = new String(commonByteArray_DEV_BUY_VALIDATION, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_BUY_VALIDATION) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
					this.EAN = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
					// String
				
						writeString(this.EAN,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
		sb.append(",EAN="+EAN);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_ExcelStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_DEV_BUY_VALIDATION = new byte[0];
    static byte[] commonByteArray_DEV_BUY_VALIDATION = new byte[0];

	
			    public String newColumn;

				public String getNewColumn () {
					return this.newColumn;
				}
				
			    public String newColumn1;

				public String getNewColumn1 () {
					return this.newColumn1;
				}
				
			    public String newColumn2;

				public String getNewColumn2 () {
					return this.newColumn2;
				}
				
			    public String newColumn3;

				public String getNewColumn3 () {
					return this.newColumn3;
				}
				
			    public String newColumn4;

				public String getNewColumn4 () {
					return this.newColumn4;
				}
				
			    public String newColumn5;

				public String getNewColumn5 () {
					return this.newColumn5;
				}
				
			    public String newColumn6;

				public String getNewColumn6 () {
					return this.newColumn6;
				}
				
			    public String newColumn7;

				public String getNewColumn7 () {
					return this.newColumn7;
				}
				
			    public String newColumn8;

				public String getNewColumn8 () {
					return this.newColumn8;
				}
				
			    public String newColumn9;

				public String getNewColumn9 () {
					return this.newColumn9;
				}
				
			    public String newColumn10;

				public String getNewColumn10 () {
					return this.newColumn10;
				}
				
			    public String newColumn11;

				public String getNewColumn11 () {
					return this.newColumn11;
				}
				
			    public String newColumn12;

				public String getNewColumn12 () {
					return this.newColumn12;
				}
				
			    public String newColumn13;

				public String getNewColumn13 () {
					return this.newColumn13;
				}
				
			    public String newColumn14;

				public String getNewColumn14 () {
					return this.newColumn14;
				}
				
			    public String newColumn15;

				public String getNewColumn15 () {
					return this.newColumn15;
				}
				
			    public String newColumn16;

				public String getNewColumn16 () {
					return this.newColumn16;
				}
				
			    public String newColumn17;

				public String getNewColumn17 () {
					return this.newColumn17;
				}
				
			    public String newColumn18;

				public String getNewColumn18 () {
					return this.newColumn18;
				}
				
			    public String newColumn19;

				public String getNewColumn19 () {
					return this.newColumn19;
				}
				
			    public String newColumn20;

				public String getNewColumn20 () {
					return this.newColumn20;
				}
				
			    public String newColumn21;

				public String getNewColumn21 () {
					return this.newColumn21;
				}
				
			    public String newColumn22;

				public String getNewColumn22 () {
					return this.newColumn22;
				}
				
			    public String newColumn23;

				public String getNewColumn23 () {
					return this.newColumn23;
				}
				
			    public String newColumn24;

				public String getNewColumn24 () {
					return this.newColumn24;
				}
				
			    public String newColumn25;

				public String getNewColumn25 () {
					return this.newColumn25;
				}
				
			    public String newColumn26;

				public String getNewColumn26 () {
					return this.newColumn26;
				}
				
			    public String newColumn27;

				public String getNewColumn27 () {
					return this.newColumn27;
				}
				
			    public String newColumn28;

				public String getNewColumn28 () {
					return this.newColumn28;
				}
				
			    public String newColumn29;

				public String getNewColumn29 () {
					return this.newColumn29;
				}
				
			    public String newColumn30;

				public String getNewColumn30 () {
					return this.newColumn30;
				}
				
			    public String newColumn31;

				public String getNewColumn31 () {
					return this.newColumn31;
				}
				
			    public String newColumn32;

				public String getNewColumn32 () {
					return this.newColumn32;
				}
				
			    public String newColumn33;

				public String getNewColumn33 () {
					return this.newColumn33;
				}
				
			    public String newColumn34;

				public String getNewColumn34 () {
					return this.newColumn34;
				}
				
			    public String newColumn35;

				public String getNewColumn35 () {
					return this.newColumn35;
				}
				
			    public String newColumn36;

				public String getNewColumn36 () {
					return this.newColumn36;
				}
				
			    public String newColumn37;

				public String getNewColumn37 () {
					return this.newColumn37;
				}
				
			    public String newColumn38;

				public String getNewColumn38 () {
					return this.newColumn38;
				}
				
			    public String newColumn39;

				public String getNewColumn39 () {
					return this.newColumn39;
				}
				
			    public String newColumn40;

				public String getNewColumn40 () {
					return this.newColumn40;
				}
				
			    public String newColumn41;

				public String getNewColumn41 () {
					return this.newColumn41;
				}
				
			    public String newColumn42;

				public String getNewColumn42 () {
					return this.newColumn42;
				}
				
			    public String newColumn43;

				public String getNewColumn43 () {
					return this.newColumn43;
				}
				
			    public String newColumn44;

				public String getNewColumn44 () {
					return this.newColumn44;
				}
				
			    public String newColumn45;

				public String getNewColumn45 () {
					return this.newColumn45;
				}
				
			    public String newColumn46;

				public String getNewColumn46 () {
					return this.newColumn46;
				}
				
			    public String newColumn47;

				public String getNewColumn47 () {
					return this.newColumn47;
				}
				
			    public String newColumn48;

				public String getNewColumn48 () {
					return this.newColumn48;
				}
				
			    public String newColumn49;

				public String getNewColumn49 () {
					return this.newColumn49;
				}
				
			    public String newColumn50;

				public String getNewColumn50 () {
					return this.newColumn50;
				}
				
			    public String newColumn51;

				public String getNewColumn51 () {
					return this.newColumn51;
				}
				
			    public String newColumn52;

				public String getNewColumn52 () {
					return this.newColumn52;
				}
				
			    public String newColumn53;

				public String getNewColumn53 () {
					return this.newColumn53;
				}
				
			    public String newColumn54;

				public String getNewColumn54 () {
					return this.newColumn54;
				}
				
			    public String newColumn55;

				public String getNewColumn55 () {
					return this.newColumn55;
				}
				
			    public String newColumn56;

				public String getNewColumn56 () {
					return this.newColumn56;
				}
				
			    public String newColumn57;

				public String getNewColumn57 () {
					return this.newColumn57;
				}
				
			    public String newColumn58;

				public String getNewColumn58 () {
					return this.newColumn58;
				}
				
			    public String newColumn59;

				public String getNewColumn59 () {
					return this.newColumn59;
				}
				
			    public String newColumn60;

				public String getNewColumn60 () {
					return this.newColumn60;
				}
				
			    public String newColumn61;

				public String getNewColumn61 () {
					return this.newColumn61;
				}
				
			    public String newColumn62;

				public String getNewColumn62 () {
					return this.newColumn62;
				}
				
			    public String newColumn63;

				public String getNewColumn63 () {
					return this.newColumn63;
				}
				
			    public String newColumn64;

				public String getNewColumn64 () {
					return this.newColumn64;
				}
				
			    public String newColumn65;

				public String getNewColumn65 () {
					return this.newColumn65;
				}
				
			    public String newColumn66;

				public String getNewColumn66 () {
					return this.newColumn66;
				}
				
			    public String newColumn67;

				public String getNewColumn67 () {
					return this.newColumn67;
				}
				
			    public String newColumn68;

				public String getNewColumn68 () {
					return this.newColumn68;
				}
				
			    public String newColumn69;

				public String getNewColumn69 () {
					return this.newColumn69;
				}
				
			    public String newColumn70;

				public String getNewColumn70 () {
					return this.newColumn70;
				}
				
			    public String newColumn71;

				public String getNewColumn71 () {
					return this.newColumn71;
				}
				
			    public String newColumn72;

				public String getNewColumn72 () {
					return this.newColumn72;
				}
				
			    public String newColumn73;

				public String getNewColumn73 () {
					return this.newColumn73;
				}
				
			    public String newColumn74;

				public String getNewColumn74 () {
					return this.newColumn74;
				}
				
			    public String newColumn75;

				public String getNewColumn75 () {
					return this.newColumn75;
				}
				
			    public String newColumn76;

				public String getNewColumn76 () {
					return this.newColumn76;
				}
				
			    public String newColumn77;

				public String getNewColumn77 () {
					return this.newColumn77;
				}
				
			    public String newColumn78;

				public String getNewColumn78 () {
					return this.newColumn78;
				}
				
			    public String newColumn79;

				public String getNewColumn79 () {
					return this.newColumn79;
				}
				
			    public String newColumn80;

				public String getNewColumn80 () {
					return this.newColumn80;
				}
				
			    public String newColumn81;

				public String getNewColumn81 () {
					return this.newColumn81;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_BUY_VALIDATION.length) {
				if(length < 1024 && commonByteArray_DEV_BUY_VALIDATION.length == 0) {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[1024];
				} else {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_BUY_VALIDATION, 0, length);
			strReturn = new String(commonByteArray_DEV_BUY_VALIDATION, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_BUY_VALIDATION) {

        	try {

        		int length = 0;
		
					this.newColumn = readString(dis);
					
					this.newColumn1 = readString(dis);
					
					this.newColumn2 = readString(dis);
					
					this.newColumn3 = readString(dis);
					
					this.newColumn4 = readString(dis);
					
					this.newColumn5 = readString(dis);
					
					this.newColumn6 = readString(dis);
					
					this.newColumn7 = readString(dis);
					
					this.newColumn8 = readString(dis);
					
					this.newColumn9 = readString(dis);
					
					this.newColumn10 = readString(dis);
					
					this.newColumn11 = readString(dis);
					
					this.newColumn12 = readString(dis);
					
					this.newColumn13 = readString(dis);
					
					this.newColumn14 = readString(dis);
					
					this.newColumn15 = readString(dis);
					
					this.newColumn16 = readString(dis);
					
					this.newColumn17 = readString(dis);
					
					this.newColumn18 = readString(dis);
					
					this.newColumn19 = readString(dis);
					
					this.newColumn20 = readString(dis);
					
					this.newColumn21 = readString(dis);
					
					this.newColumn22 = readString(dis);
					
					this.newColumn23 = readString(dis);
					
					this.newColumn24 = readString(dis);
					
					this.newColumn25 = readString(dis);
					
					this.newColumn26 = readString(dis);
					
					this.newColumn27 = readString(dis);
					
					this.newColumn28 = readString(dis);
					
					this.newColumn29 = readString(dis);
					
					this.newColumn30 = readString(dis);
					
					this.newColumn31 = readString(dis);
					
					this.newColumn32 = readString(dis);
					
					this.newColumn33 = readString(dis);
					
					this.newColumn34 = readString(dis);
					
					this.newColumn35 = readString(dis);
					
					this.newColumn36 = readString(dis);
					
					this.newColumn37 = readString(dis);
					
					this.newColumn38 = readString(dis);
					
					this.newColumn39 = readString(dis);
					
					this.newColumn40 = readString(dis);
					
					this.newColumn41 = readString(dis);
					
					this.newColumn42 = readString(dis);
					
					this.newColumn43 = readString(dis);
					
					this.newColumn44 = readString(dis);
					
					this.newColumn45 = readString(dis);
					
					this.newColumn46 = readString(dis);
					
					this.newColumn47 = readString(dis);
					
					this.newColumn48 = readString(dis);
					
					this.newColumn49 = readString(dis);
					
					this.newColumn50 = readString(dis);
					
					this.newColumn51 = readString(dis);
					
					this.newColumn52 = readString(dis);
					
					this.newColumn53 = readString(dis);
					
					this.newColumn54 = readString(dis);
					
					this.newColumn55 = readString(dis);
					
					this.newColumn56 = readString(dis);
					
					this.newColumn57 = readString(dis);
					
					this.newColumn58 = readString(dis);
					
					this.newColumn59 = readString(dis);
					
					this.newColumn60 = readString(dis);
					
					this.newColumn61 = readString(dis);
					
					this.newColumn62 = readString(dis);
					
					this.newColumn63 = readString(dis);
					
					this.newColumn64 = readString(dis);
					
					this.newColumn65 = readString(dis);
					
					this.newColumn66 = readString(dis);
					
					this.newColumn67 = readString(dis);
					
					this.newColumn68 = readString(dis);
					
					this.newColumn69 = readString(dis);
					
					this.newColumn70 = readString(dis);
					
					this.newColumn71 = readString(dis);
					
					this.newColumn72 = readString(dis);
					
					this.newColumn73 = readString(dis);
					
					this.newColumn74 = readString(dis);
					
					this.newColumn75 = readString(dis);
					
					this.newColumn76 = readString(dis);
					
					this.newColumn77 = readString(dis);
					
					this.newColumn78 = readString(dis);
					
					this.newColumn79 = readString(dis);
					
					this.newColumn80 = readString(dis);
					
					this.newColumn81 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.newColumn,dos);
					
					// String
				
						writeString(this.newColumn1,dos);
					
					// String
				
						writeString(this.newColumn2,dos);
					
					// String
				
						writeString(this.newColumn3,dos);
					
					// String
				
						writeString(this.newColumn4,dos);
					
					// String
				
						writeString(this.newColumn5,dos);
					
					// String
				
						writeString(this.newColumn6,dos);
					
					// String
				
						writeString(this.newColumn7,dos);
					
					// String
				
						writeString(this.newColumn8,dos);
					
					// String
				
						writeString(this.newColumn9,dos);
					
					// String
				
						writeString(this.newColumn10,dos);
					
					// String
				
						writeString(this.newColumn11,dos);
					
					// String
				
						writeString(this.newColumn12,dos);
					
					// String
				
						writeString(this.newColumn13,dos);
					
					// String
				
						writeString(this.newColumn14,dos);
					
					// String
				
						writeString(this.newColumn15,dos);
					
					// String
				
						writeString(this.newColumn16,dos);
					
					// String
				
						writeString(this.newColumn17,dos);
					
					// String
				
						writeString(this.newColumn18,dos);
					
					// String
				
						writeString(this.newColumn19,dos);
					
					// String
				
						writeString(this.newColumn20,dos);
					
					// String
				
						writeString(this.newColumn21,dos);
					
					// String
				
						writeString(this.newColumn22,dos);
					
					// String
				
						writeString(this.newColumn23,dos);
					
					// String
				
						writeString(this.newColumn24,dos);
					
					// String
				
						writeString(this.newColumn25,dos);
					
					// String
				
						writeString(this.newColumn26,dos);
					
					// String
				
						writeString(this.newColumn27,dos);
					
					// String
				
						writeString(this.newColumn28,dos);
					
					// String
				
						writeString(this.newColumn29,dos);
					
					// String
				
						writeString(this.newColumn30,dos);
					
					// String
				
						writeString(this.newColumn31,dos);
					
					// String
				
						writeString(this.newColumn32,dos);
					
					// String
				
						writeString(this.newColumn33,dos);
					
					// String
				
						writeString(this.newColumn34,dos);
					
					// String
				
						writeString(this.newColumn35,dos);
					
					// String
				
						writeString(this.newColumn36,dos);
					
					// String
				
						writeString(this.newColumn37,dos);
					
					// String
				
						writeString(this.newColumn38,dos);
					
					// String
				
						writeString(this.newColumn39,dos);
					
					// String
				
						writeString(this.newColumn40,dos);
					
					// String
				
						writeString(this.newColumn41,dos);
					
					// String
				
						writeString(this.newColumn42,dos);
					
					// String
				
						writeString(this.newColumn43,dos);
					
					// String
				
						writeString(this.newColumn44,dos);
					
					// String
				
						writeString(this.newColumn45,dos);
					
					// String
				
						writeString(this.newColumn46,dos);
					
					// String
				
						writeString(this.newColumn47,dos);
					
					// String
				
						writeString(this.newColumn48,dos);
					
					// String
				
						writeString(this.newColumn49,dos);
					
					// String
				
						writeString(this.newColumn50,dos);
					
					// String
				
						writeString(this.newColumn51,dos);
					
					// String
				
						writeString(this.newColumn52,dos);
					
					// String
				
						writeString(this.newColumn53,dos);
					
					// String
				
						writeString(this.newColumn54,dos);
					
					// String
				
						writeString(this.newColumn55,dos);
					
					// String
				
						writeString(this.newColumn56,dos);
					
					// String
				
						writeString(this.newColumn57,dos);
					
					// String
				
						writeString(this.newColumn58,dos);
					
					// String
				
						writeString(this.newColumn59,dos);
					
					// String
				
						writeString(this.newColumn60,dos);
					
					// String
				
						writeString(this.newColumn61,dos);
					
					// String
				
						writeString(this.newColumn62,dos);
					
					// String
				
						writeString(this.newColumn63,dos);
					
					// String
				
						writeString(this.newColumn64,dos);
					
					// String
				
						writeString(this.newColumn65,dos);
					
					// String
				
						writeString(this.newColumn66,dos);
					
					// String
				
						writeString(this.newColumn67,dos);
					
					// String
				
						writeString(this.newColumn68,dos);
					
					// String
				
						writeString(this.newColumn69,dos);
					
					// String
				
						writeString(this.newColumn70,dos);
					
					// String
				
						writeString(this.newColumn71,dos);
					
					// String
				
						writeString(this.newColumn72,dos);
					
					// String
				
						writeString(this.newColumn73,dos);
					
					// String
				
						writeString(this.newColumn74,dos);
					
					// String
				
						writeString(this.newColumn75,dos);
					
					// String
				
						writeString(this.newColumn76,dos);
					
					// String
				
						writeString(this.newColumn77,dos);
					
					// String
				
						writeString(this.newColumn78,dos);
					
					// String
				
						writeString(this.newColumn79,dos);
					
					// String
				
						writeString(this.newColumn80,dos);
					
					// String
				
						writeString(this.newColumn81,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("newColumn="+newColumn);
		sb.append(",newColumn1="+newColumn1);
		sb.append(",newColumn2="+newColumn2);
		sb.append(",newColumn3="+newColumn3);
		sb.append(",newColumn4="+newColumn4);
		sb.append(",newColumn5="+newColumn5);
		sb.append(",newColumn6="+newColumn6);
		sb.append(",newColumn7="+newColumn7);
		sb.append(",newColumn8="+newColumn8);
		sb.append(",newColumn9="+newColumn9);
		sb.append(",newColumn10="+newColumn10);
		sb.append(",newColumn11="+newColumn11);
		sb.append(",newColumn12="+newColumn12);
		sb.append(",newColumn13="+newColumn13);
		sb.append(",newColumn14="+newColumn14);
		sb.append(",newColumn15="+newColumn15);
		sb.append(",newColumn16="+newColumn16);
		sb.append(",newColumn17="+newColumn17);
		sb.append(",newColumn18="+newColumn18);
		sb.append(",newColumn19="+newColumn19);
		sb.append(",newColumn20="+newColumn20);
		sb.append(",newColumn21="+newColumn21);
		sb.append(",newColumn22="+newColumn22);
		sb.append(",newColumn23="+newColumn23);
		sb.append(",newColumn24="+newColumn24);
		sb.append(",newColumn25="+newColumn25);
		sb.append(",newColumn26="+newColumn26);
		sb.append(",newColumn27="+newColumn27);
		sb.append(",newColumn28="+newColumn28);
		sb.append(",newColumn29="+newColumn29);
		sb.append(",newColumn30="+newColumn30);
		sb.append(",newColumn31="+newColumn31);
		sb.append(",newColumn32="+newColumn32);
		sb.append(",newColumn33="+newColumn33);
		sb.append(",newColumn34="+newColumn34);
		sb.append(",newColumn35="+newColumn35);
		sb.append(",newColumn36="+newColumn36);
		sb.append(",newColumn37="+newColumn37);
		sb.append(",newColumn38="+newColumn38);
		sb.append(",newColumn39="+newColumn39);
		sb.append(",newColumn40="+newColumn40);
		sb.append(",newColumn41="+newColumn41);
		sb.append(",newColumn42="+newColumn42);
		sb.append(",newColumn43="+newColumn43);
		sb.append(",newColumn44="+newColumn44);
		sb.append(",newColumn45="+newColumn45);
		sb.append(",newColumn46="+newColumn46);
		sb.append(",newColumn47="+newColumn47);
		sb.append(",newColumn48="+newColumn48);
		sb.append(",newColumn49="+newColumn49);
		sb.append(",newColumn50="+newColumn50);
		sb.append(",newColumn51="+newColumn51);
		sb.append(",newColumn52="+newColumn52);
		sb.append(",newColumn53="+newColumn53);
		sb.append(",newColumn54="+newColumn54);
		sb.append(",newColumn55="+newColumn55);
		sb.append(",newColumn56="+newColumn56);
		sb.append(",newColumn57="+newColumn57);
		sb.append(",newColumn58="+newColumn58);
		sb.append(",newColumn59="+newColumn59);
		sb.append(",newColumn60="+newColumn60);
		sb.append(",newColumn61="+newColumn61);
		sb.append(",newColumn62="+newColumn62);
		sb.append(",newColumn63="+newColumn63);
		sb.append(",newColumn64="+newColumn64);
		sb.append(",newColumn65="+newColumn65);
		sb.append(",newColumn66="+newColumn66);
		sb.append(",newColumn67="+newColumn67);
		sb.append(",newColumn68="+newColumn68);
		sb.append(",newColumn69="+newColumn69);
		sb.append(",newColumn70="+newColumn70);
		sb.append(",newColumn71="+newColumn71);
		sb.append(",newColumn72="+newColumn72);
		sb.append(",newColumn73="+newColumn73);
		sb.append(",newColumn74="+newColumn74);
		sb.append(",newColumn75="+newColumn75);
		sb.append(",newColumn76="+newColumn76);
		sb.append(",newColumn77="+newColumn77);
		sb.append(",newColumn78="+newColumn78);
		sb.append(",newColumn79="+newColumn79);
		sb.append(",newColumn80="+newColumn80);
		sb.append(",newColumn81="+newColumn81);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tFileInputExcel_2Struct implements routines.system.IPersistableRow<after_tFileInputExcel_2Struct> {
    final static byte[] commonByteArrayLock_DEV_BUY_VALIDATION = new byte[0];
    static byte[] commonByteArray_DEV_BUY_VALIDATION = new byte[0];

	
			    public String newColumn;

				public String getNewColumn () {
					return this.newColumn;
				}
				
			    public String newColumn1;

				public String getNewColumn1 () {
					return this.newColumn1;
				}
				
			    public String newColumn2;

				public String getNewColumn2 () {
					return this.newColumn2;
				}
				
			    public String newColumn3;

				public String getNewColumn3 () {
					return this.newColumn3;
				}
				
			    public String newColumn4;

				public String getNewColumn4 () {
					return this.newColumn4;
				}
				
			    public String newColumn5;

				public String getNewColumn5 () {
					return this.newColumn5;
				}
				
			    public String newColumn6;

				public String getNewColumn6 () {
					return this.newColumn6;
				}
				
			    public String newColumn7;

				public String getNewColumn7 () {
					return this.newColumn7;
				}
				
			    public String newColumn8;

				public String getNewColumn8 () {
					return this.newColumn8;
				}
				
			    public String newColumn9;

				public String getNewColumn9 () {
					return this.newColumn9;
				}
				
			    public String newColumn10;

				public String getNewColumn10 () {
					return this.newColumn10;
				}
				
			    public String newColumn11;

				public String getNewColumn11 () {
					return this.newColumn11;
				}
				
			    public String newColumn12;

				public String getNewColumn12 () {
					return this.newColumn12;
				}
				
			    public String newColumn13;

				public String getNewColumn13 () {
					return this.newColumn13;
				}
				
			    public String newColumn14;

				public String getNewColumn14 () {
					return this.newColumn14;
				}
				
			    public String newColumn15;

				public String getNewColumn15 () {
					return this.newColumn15;
				}
				
			    public String newColumn16;

				public String getNewColumn16 () {
					return this.newColumn16;
				}
				
			    public String newColumn17;

				public String getNewColumn17 () {
					return this.newColumn17;
				}
				
			    public String newColumn18;

				public String getNewColumn18 () {
					return this.newColumn18;
				}
				
			    public String newColumn19;

				public String getNewColumn19 () {
					return this.newColumn19;
				}
				
			    public String newColumn20;

				public String getNewColumn20 () {
					return this.newColumn20;
				}
				
			    public String newColumn21;

				public String getNewColumn21 () {
					return this.newColumn21;
				}
				
			    public String newColumn22;

				public String getNewColumn22 () {
					return this.newColumn22;
				}
				
			    public String newColumn23;

				public String getNewColumn23 () {
					return this.newColumn23;
				}
				
			    public String newColumn24;

				public String getNewColumn24 () {
					return this.newColumn24;
				}
				
			    public String newColumn25;

				public String getNewColumn25 () {
					return this.newColumn25;
				}
				
			    public String newColumn26;

				public String getNewColumn26 () {
					return this.newColumn26;
				}
				
			    public String newColumn27;

				public String getNewColumn27 () {
					return this.newColumn27;
				}
				
			    public String newColumn28;

				public String getNewColumn28 () {
					return this.newColumn28;
				}
				
			    public String newColumn29;

				public String getNewColumn29 () {
					return this.newColumn29;
				}
				
			    public String newColumn30;

				public String getNewColumn30 () {
					return this.newColumn30;
				}
				
			    public String newColumn31;

				public String getNewColumn31 () {
					return this.newColumn31;
				}
				
			    public String newColumn32;

				public String getNewColumn32 () {
					return this.newColumn32;
				}
				
			    public String newColumn33;

				public String getNewColumn33 () {
					return this.newColumn33;
				}
				
			    public String newColumn34;

				public String getNewColumn34 () {
					return this.newColumn34;
				}
				
			    public String newColumn35;

				public String getNewColumn35 () {
					return this.newColumn35;
				}
				
			    public String newColumn36;

				public String getNewColumn36 () {
					return this.newColumn36;
				}
				
			    public String newColumn37;

				public String getNewColumn37 () {
					return this.newColumn37;
				}
				
			    public String newColumn38;

				public String getNewColumn38 () {
					return this.newColumn38;
				}
				
			    public String newColumn39;

				public String getNewColumn39 () {
					return this.newColumn39;
				}
				
			    public String newColumn40;

				public String getNewColumn40 () {
					return this.newColumn40;
				}
				
			    public String newColumn41;

				public String getNewColumn41 () {
					return this.newColumn41;
				}
				
			    public String newColumn42;

				public String getNewColumn42 () {
					return this.newColumn42;
				}
				
			    public String newColumn43;

				public String getNewColumn43 () {
					return this.newColumn43;
				}
				
			    public String newColumn44;

				public String getNewColumn44 () {
					return this.newColumn44;
				}
				
			    public String newColumn45;

				public String getNewColumn45 () {
					return this.newColumn45;
				}
				
			    public String newColumn46;

				public String getNewColumn46 () {
					return this.newColumn46;
				}
				
			    public String newColumn47;

				public String getNewColumn47 () {
					return this.newColumn47;
				}
				
			    public String newColumn48;

				public String getNewColumn48 () {
					return this.newColumn48;
				}
				
			    public String newColumn49;

				public String getNewColumn49 () {
					return this.newColumn49;
				}
				
			    public String newColumn50;

				public String getNewColumn50 () {
					return this.newColumn50;
				}
				
			    public String newColumn51;

				public String getNewColumn51 () {
					return this.newColumn51;
				}
				
			    public String newColumn52;

				public String getNewColumn52 () {
					return this.newColumn52;
				}
				
			    public String newColumn53;

				public String getNewColumn53 () {
					return this.newColumn53;
				}
				
			    public String newColumn54;

				public String getNewColumn54 () {
					return this.newColumn54;
				}
				
			    public String newColumn55;

				public String getNewColumn55 () {
					return this.newColumn55;
				}
				
			    public String newColumn56;

				public String getNewColumn56 () {
					return this.newColumn56;
				}
				
			    public String newColumn57;

				public String getNewColumn57 () {
					return this.newColumn57;
				}
				
			    public String newColumn58;

				public String getNewColumn58 () {
					return this.newColumn58;
				}
				
			    public String newColumn59;

				public String getNewColumn59 () {
					return this.newColumn59;
				}
				
			    public String newColumn60;

				public String getNewColumn60 () {
					return this.newColumn60;
				}
				
			    public String newColumn61;

				public String getNewColumn61 () {
					return this.newColumn61;
				}
				
			    public String newColumn62;

				public String getNewColumn62 () {
					return this.newColumn62;
				}
				
			    public String newColumn63;

				public String getNewColumn63 () {
					return this.newColumn63;
				}
				
			    public String newColumn64;

				public String getNewColumn64 () {
					return this.newColumn64;
				}
				
			    public String newColumn65;

				public String getNewColumn65 () {
					return this.newColumn65;
				}
				
			    public String newColumn66;

				public String getNewColumn66 () {
					return this.newColumn66;
				}
				
			    public String newColumn67;

				public String getNewColumn67 () {
					return this.newColumn67;
				}
				
			    public String newColumn68;

				public String getNewColumn68 () {
					return this.newColumn68;
				}
				
			    public String newColumn69;

				public String getNewColumn69 () {
					return this.newColumn69;
				}
				
			    public String newColumn70;

				public String getNewColumn70 () {
					return this.newColumn70;
				}
				
			    public String newColumn71;

				public String getNewColumn71 () {
					return this.newColumn71;
				}
				
			    public String newColumn72;

				public String getNewColumn72 () {
					return this.newColumn72;
				}
				
			    public String newColumn73;

				public String getNewColumn73 () {
					return this.newColumn73;
				}
				
			    public String newColumn74;

				public String getNewColumn74 () {
					return this.newColumn74;
				}
				
			    public String newColumn75;

				public String getNewColumn75 () {
					return this.newColumn75;
				}
				
			    public String newColumn76;

				public String getNewColumn76 () {
					return this.newColumn76;
				}
				
			    public String newColumn77;

				public String getNewColumn77 () {
					return this.newColumn77;
				}
				
			    public String newColumn78;

				public String getNewColumn78 () {
					return this.newColumn78;
				}
				
			    public String newColumn79;

				public String getNewColumn79 () {
					return this.newColumn79;
				}
				
			    public String newColumn80;

				public String getNewColumn80 () {
					return this.newColumn80;
				}
				
			    public String newColumn81;

				public String getNewColumn81 () {
					return this.newColumn81;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_BUY_VALIDATION.length) {
				if(length < 1024 && commonByteArray_DEV_BUY_VALIDATION.length == 0) {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[1024];
				} else {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_BUY_VALIDATION, 0, length);
			strReturn = new String(commonByteArray_DEV_BUY_VALIDATION, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_BUY_VALIDATION) {

        	try {

        		int length = 0;
		
					this.newColumn = readString(dis);
					
					this.newColumn1 = readString(dis);
					
					this.newColumn2 = readString(dis);
					
					this.newColumn3 = readString(dis);
					
					this.newColumn4 = readString(dis);
					
					this.newColumn5 = readString(dis);
					
					this.newColumn6 = readString(dis);
					
					this.newColumn7 = readString(dis);
					
					this.newColumn8 = readString(dis);
					
					this.newColumn9 = readString(dis);
					
					this.newColumn10 = readString(dis);
					
					this.newColumn11 = readString(dis);
					
					this.newColumn12 = readString(dis);
					
					this.newColumn13 = readString(dis);
					
					this.newColumn14 = readString(dis);
					
					this.newColumn15 = readString(dis);
					
					this.newColumn16 = readString(dis);
					
					this.newColumn17 = readString(dis);
					
					this.newColumn18 = readString(dis);
					
					this.newColumn19 = readString(dis);
					
					this.newColumn20 = readString(dis);
					
					this.newColumn21 = readString(dis);
					
					this.newColumn22 = readString(dis);
					
					this.newColumn23 = readString(dis);
					
					this.newColumn24 = readString(dis);
					
					this.newColumn25 = readString(dis);
					
					this.newColumn26 = readString(dis);
					
					this.newColumn27 = readString(dis);
					
					this.newColumn28 = readString(dis);
					
					this.newColumn29 = readString(dis);
					
					this.newColumn30 = readString(dis);
					
					this.newColumn31 = readString(dis);
					
					this.newColumn32 = readString(dis);
					
					this.newColumn33 = readString(dis);
					
					this.newColumn34 = readString(dis);
					
					this.newColumn35 = readString(dis);
					
					this.newColumn36 = readString(dis);
					
					this.newColumn37 = readString(dis);
					
					this.newColumn38 = readString(dis);
					
					this.newColumn39 = readString(dis);
					
					this.newColumn40 = readString(dis);
					
					this.newColumn41 = readString(dis);
					
					this.newColumn42 = readString(dis);
					
					this.newColumn43 = readString(dis);
					
					this.newColumn44 = readString(dis);
					
					this.newColumn45 = readString(dis);
					
					this.newColumn46 = readString(dis);
					
					this.newColumn47 = readString(dis);
					
					this.newColumn48 = readString(dis);
					
					this.newColumn49 = readString(dis);
					
					this.newColumn50 = readString(dis);
					
					this.newColumn51 = readString(dis);
					
					this.newColumn52 = readString(dis);
					
					this.newColumn53 = readString(dis);
					
					this.newColumn54 = readString(dis);
					
					this.newColumn55 = readString(dis);
					
					this.newColumn56 = readString(dis);
					
					this.newColumn57 = readString(dis);
					
					this.newColumn58 = readString(dis);
					
					this.newColumn59 = readString(dis);
					
					this.newColumn60 = readString(dis);
					
					this.newColumn61 = readString(dis);
					
					this.newColumn62 = readString(dis);
					
					this.newColumn63 = readString(dis);
					
					this.newColumn64 = readString(dis);
					
					this.newColumn65 = readString(dis);
					
					this.newColumn66 = readString(dis);
					
					this.newColumn67 = readString(dis);
					
					this.newColumn68 = readString(dis);
					
					this.newColumn69 = readString(dis);
					
					this.newColumn70 = readString(dis);
					
					this.newColumn71 = readString(dis);
					
					this.newColumn72 = readString(dis);
					
					this.newColumn73 = readString(dis);
					
					this.newColumn74 = readString(dis);
					
					this.newColumn75 = readString(dis);
					
					this.newColumn76 = readString(dis);
					
					this.newColumn77 = readString(dis);
					
					this.newColumn78 = readString(dis);
					
					this.newColumn79 = readString(dis);
					
					this.newColumn80 = readString(dis);
					
					this.newColumn81 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.newColumn,dos);
					
					// String
				
						writeString(this.newColumn1,dos);
					
					// String
				
						writeString(this.newColumn2,dos);
					
					// String
				
						writeString(this.newColumn3,dos);
					
					// String
				
						writeString(this.newColumn4,dos);
					
					// String
				
						writeString(this.newColumn5,dos);
					
					// String
				
						writeString(this.newColumn6,dos);
					
					// String
				
						writeString(this.newColumn7,dos);
					
					// String
				
						writeString(this.newColumn8,dos);
					
					// String
				
						writeString(this.newColumn9,dos);
					
					// String
				
						writeString(this.newColumn10,dos);
					
					// String
				
						writeString(this.newColumn11,dos);
					
					// String
				
						writeString(this.newColumn12,dos);
					
					// String
				
						writeString(this.newColumn13,dos);
					
					// String
				
						writeString(this.newColumn14,dos);
					
					// String
				
						writeString(this.newColumn15,dos);
					
					// String
				
						writeString(this.newColumn16,dos);
					
					// String
				
						writeString(this.newColumn17,dos);
					
					// String
				
						writeString(this.newColumn18,dos);
					
					// String
				
						writeString(this.newColumn19,dos);
					
					// String
				
						writeString(this.newColumn20,dos);
					
					// String
				
						writeString(this.newColumn21,dos);
					
					// String
				
						writeString(this.newColumn22,dos);
					
					// String
				
						writeString(this.newColumn23,dos);
					
					// String
				
						writeString(this.newColumn24,dos);
					
					// String
				
						writeString(this.newColumn25,dos);
					
					// String
				
						writeString(this.newColumn26,dos);
					
					// String
				
						writeString(this.newColumn27,dos);
					
					// String
				
						writeString(this.newColumn28,dos);
					
					// String
				
						writeString(this.newColumn29,dos);
					
					// String
				
						writeString(this.newColumn30,dos);
					
					// String
				
						writeString(this.newColumn31,dos);
					
					// String
				
						writeString(this.newColumn32,dos);
					
					// String
				
						writeString(this.newColumn33,dos);
					
					// String
				
						writeString(this.newColumn34,dos);
					
					// String
				
						writeString(this.newColumn35,dos);
					
					// String
				
						writeString(this.newColumn36,dos);
					
					// String
				
						writeString(this.newColumn37,dos);
					
					// String
				
						writeString(this.newColumn38,dos);
					
					// String
				
						writeString(this.newColumn39,dos);
					
					// String
				
						writeString(this.newColumn40,dos);
					
					// String
				
						writeString(this.newColumn41,dos);
					
					// String
				
						writeString(this.newColumn42,dos);
					
					// String
				
						writeString(this.newColumn43,dos);
					
					// String
				
						writeString(this.newColumn44,dos);
					
					// String
				
						writeString(this.newColumn45,dos);
					
					// String
				
						writeString(this.newColumn46,dos);
					
					// String
				
						writeString(this.newColumn47,dos);
					
					// String
				
						writeString(this.newColumn48,dos);
					
					// String
				
						writeString(this.newColumn49,dos);
					
					// String
				
						writeString(this.newColumn50,dos);
					
					// String
				
						writeString(this.newColumn51,dos);
					
					// String
				
						writeString(this.newColumn52,dos);
					
					// String
				
						writeString(this.newColumn53,dos);
					
					// String
				
						writeString(this.newColumn54,dos);
					
					// String
				
						writeString(this.newColumn55,dos);
					
					// String
				
						writeString(this.newColumn56,dos);
					
					// String
				
						writeString(this.newColumn57,dos);
					
					// String
				
						writeString(this.newColumn58,dos);
					
					// String
				
						writeString(this.newColumn59,dos);
					
					// String
				
						writeString(this.newColumn60,dos);
					
					// String
				
						writeString(this.newColumn61,dos);
					
					// String
				
						writeString(this.newColumn62,dos);
					
					// String
				
						writeString(this.newColumn63,dos);
					
					// String
				
						writeString(this.newColumn64,dos);
					
					// String
				
						writeString(this.newColumn65,dos);
					
					// String
				
						writeString(this.newColumn66,dos);
					
					// String
				
						writeString(this.newColumn67,dos);
					
					// String
				
						writeString(this.newColumn68,dos);
					
					// String
				
						writeString(this.newColumn69,dos);
					
					// String
				
						writeString(this.newColumn70,dos);
					
					// String
				
						writeString(this.newColumn71,dos);
					
					// String
				
						writeString(this.newColumn72,dos);
					
					// String
				
						writeString(this.newColumn73,dos);
					
					// String
				
						writeString(this.newColumn74,dos);
					
					// String
				
						writeString(this.newColumn75,dos);
					
					// String
				
						writeString(this.newColumn76,dos);
					
					// String
				
						writeString(this.newColumn77,dos);
					
					// String
				
						writeString(this.newColumn78,dos);
					
					// String
				
						writeString(this.newColumn79,dos);
					
					// String
				
						writeString(this.newColumn80,dos);
					
					// String
				
						writeString(this.newColumn81,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("newColumn="+newColumn);
		sb.append(",newColumn1="+newColumn1);
		sb.append(",newColumn2="+newColumn2);
		sb.append(",newColumn3="+newColumn3);
		sb.append(",newColumn4="+newColumn4);
		sb.append(",newColumn5="+newColumn5);
		sb.append(",newColumn6="+newColumn6);
		sb.append(",newColumn7="+newColumn7);
		sb.append(",newColumn8="+newColumn8);
		sb.append(",newColumn9="+newColumn9);
		sb.append(",newColumn10="+newColumn10);
		sb.append(",newColumn11="+newColumn11);
		sb.append(",newColumn12="+newColumn12);
		sb.append(",newColumn13="+newColumn13);
		sb.append(",newColumn14="+newColumn14);
		sb.append(",newColumn15="+newColumn15);
		sb.append(",newColumn16="+newColumn16);
		sb.append(",newColumn17="+newColumn17);
		sb.append(",newColumn18="+newColumn18);
		sb.append(",newColumn19="+newColumn19);
		sb.append(",newColumn20="+newColumn20);
		sb.append(",newColumn21="+newColumn21);
		sb.append(",newColumn22="+newColumn22);
		sb.append(",newColumn23="+newColumn23);
		sb.append(",newColumn24="+newColumn24);
		sb.append(",newColumn25="+newColumn25);
		sb.append(",newColumn26="+newColumn26);
		sb.append(",newColumn27="+newColumn27);
		sb.append(",newColumn28="+newColumn28);
		sb.append(",newColumn29="+newColumn29);
		sb.append(",newColumn30="+newColumn30);
		sb.append(",newColumn31="+newColumn31);
		sb.append(",newColumn32="+newColumn32);
		sb.append(",newColumn33="+newColumn33);
		sb.append(",newColumn34="+newColumn34);
		sb.append(",newColumn35="+newColumn35);
		sb.append(",newColumn36="+newColumn36);
		sb.append(",newColumn37="+newColumn37);
		sb.append(",newColumn38="+newColumn38);
		sb.append(",newColumn39="+newColumn39);
		sb.append(",newColumn40="+newColumn40);
		sb.append(",newColumn41="+newColumn41);
		sb.append(",newColumn42="+newColumn42);
		sb.append(",newColumn43="+newColumn43);
		sb.append(",newColumn44="+newColumn44);
		sb.append(",newColumn45="+newColumn45);
		sb.append(",newColumn46="+newColumn46);
		sb.append(",newColumn47="+newColumn47);
		sb.append(",newColumn48="+newColumn48);
		sb.append(",newColumn49="+newColumn49);
		sb.append(",newColumn50="+newColumn50);
		sb.append(",newColumn51="+newColumn51);
		sb.append(",newColumn52="+newColumn52);
		sb.append(",newColumn53="+newColumn53);
		sb.append(",newColumn54="+newColumn54);
		sb.append(",newColumn55="+newColumn55);
		sb.append(",newColumn56="+newColumn56);
		sb.append(",newColumn57="+newColumn57);
		sb.append(",newColumn58="+newColumn58);
		sb.append(",newColumn59="+newColumn59);
		sb.append(",newColumn60="+newColumn60);
		sb.append(",newColumn61="+newColumn61);
		sb.append(",newColumn62="+newColumn62);
		sb.append(",newColumn63="+newColumn63);
		sb.append(",newColumn64="+newColumn64);
		sb.append(",newColumn65="+newColumn65);
		sb.append(",newColumn66="+newColumn66);
		sb.append(",newColumn67="+newColumn67);
		sb.append(",newColumn68="+newColumn68);
		sb.append(",newColumn69="+newColumn69);
		sb.append(",newColumn70="+newColumn70);
		sb.append(",newColumn71="+newColumn71);
		sb.append(",newColumn72="+newColumn72);
		sb.append(",newColumn73="+newColumn73);
		sb.append(",newColumn74="+newColumn74);
		sb.append(",newColumn75="+newColumn75);
		sb.append(",newColumn76="+newColumn76);
		sb.append(",newColumn77="+newColumn77);
		sb.append(",newColumn78="+newColumn78);
		sb.append(",newColumn79="+newColumn79);
		sb.append(",newColumn80="+newColumn80);
		sb.append(",newColumn81="+newColumn81);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tFileInputExcel_2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputExcel_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputExcel_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_2Process(globalMap);
		tDBInput_1Process(globalMap);
		tDBInput_3Process(globalMap);
		tDBInput_4Process(globalMap);
		tDBInput_5Process(globalMap);
		tDBInput_6Process(globalMap);
		tDBInput_7Process(globalMap);
		tDBInput_8Process(globalMap);
		tDBInput_10Process(globalMap);
		tDBInput_11Process(globalMap);
		tDBInput_12Process(globalMap);

		row3Struct row3 = new row3Struct();
sortie_ExcelStruct sortie_Excel = new sortie_ExcelStruct();
validate_fieldsStruct validate_fields = new validate_fieldsStruct();
row32Struct row32 = new row32Struct();
row32Struct row10 = row32;
sortieStruct sortie = new sortieStruct();
sortieStruct row12 = sortie;
sortie_BrandStruct sortie_Brand = new sortie_BrandStruct();
sortie_seasonStruct sortie_season = new sortie_seasonStruct();
sortie_categoryStruct sortie_category = new sortie_categoryStruct();
sortie_genderStruct sortie_gender = new sortie_genderStruct();
sortie_sizeStruct sortie_size = new sortie_sizeStruct();
sortie_product_statusStruct sortie_product_status = new sortie_product_statusStruct();
sortie_product_tierStruct sortie_product_tier = new sortie_product_tierStruct();
sortie_cooStruct sortie_coo = new sortie_cooStruct();
sortie_age_range_Struct sortie_age_range_ = new sortie_age_range_Struct();
sortie_size_range_Struct sortie_size_range_ = new sortie_size_range_Struct();
sortie_cmStruct sortie_cm = new sortie_cmStruct();
sortie_cm_size_1Struct sortie_cm_size_1 = new sortie_cm_size_1Struct();
sortie_cm_size_Struct sortie_cm_size_ = new sortie_cm_size_Struct();
sortie_eurpriceStruct sortie_eurprice = new sortie_eurpriceStruct();
sortie_eurpriceStruct row5 = sortie_eurprice;
row6Struct row6 = new row6Struct();
sortie_errorStruct sortie_error = new sortie_errorStruct();



























	
	/**
	 * [tFileOutputExcel_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_1", false);
		start_Hash.put("tFileOutputExcel_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_error");
					}
				
		int tos_count_tFileOutputExcel_1 = 0;
		


		int columnIndex_tFileOutputExcel_1 = 0;
		
		String fileName_tFileOutputExcel_1=context.LogPath + globalMap.get("dateError") + "_ERROR_" + context.ExcelFileName;
		int nb_line_tFileOutputExcel_1 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_1 = new org.talend.ExcelTool();
		
		xlsxTool_tFileOutputExcel_1.setSheet("Buy error cockpit chart");
		xlsxTool_tFileOutputExcel_1.setAppend(true,true);
		xlsxTool_tFileOutputExcel_1.setRecalculateFormula(false);
		xlsxTool_tFileOutputExcel_1.setXY(true,0,10,false);
		
		java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_1 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap.get("concurrentHashMap");
		java.lang.Object lockObj_tFileOutputExcel_1 = chm_tFileOutputExcel_1.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_1", k -> new Object());
		synchronized (lockObj_tFileOutputExcel_1) {
			
				xlsxTool_tFileOutputExcel_1.prepareXlsxFile(fileName_tFileOutputExcel_1);
			
		}
		
		xlsxTool_tFileOutputExcel_1.setFont("");
		
		xlsxTool_tFileOutputExcel_1.addRow();
		
		xlsxTool_tFileOutputExcel_1.addCellValue("LINE_NUMBER");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("STYLECOLORLABEL");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("BRAND_NOT_FOUND");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("SEASON_NOT_FOUND");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("COLOR_NOT_FOUND");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("CATEGORY_NOT_FOUND");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("REF_NOT_FOUND");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("DESCRIPTION_NOT_FOUND");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("STYLE_NOT_FOUND");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("COLOR_NAME_NOT_FOUND");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("LBL_NOT_FOUND");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("STYLE_COLOR_NOT_FOUND");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("STYLECOLORLABEL_NOT_FOUND");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("GENDER_NOT_FOUND");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("AGE_RANGE_NOT_FOUND");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("SIZE_RANGE_NOT_FOUND");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("SIZE_NOT_FOUND");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("US_SIZE_NOT_FOUND");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("PRODUCT_NOT_FOUND");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("FASHION_NOT_FOUND");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("PRODUCT_STATUS_NOT_FOUND");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("PRODUCT_TIER_NOT_FOUND");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("SIZE_RATIO_SPLIT_NOT_FOUND");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("ATTRIBUTE_NOT_FOUND");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("UNITS_NOT_FOUND");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("COO_NOT_FOUND");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("EUR_RRP_NOT_FOUND");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("GBP_RRP_WSP_NOT_FOUND");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("CHF_RRP_WSP_NOT_FOUND");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("NOK_RRP_WSP_NOT_FOUND");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("DKK_RRP_WSP_NOT_FOUND");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("SEK_RRP_WSP_NOT_FOUND");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("EUR_FINN_RRP_WSP_NOT_FOUND");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("CM_SIZE_NOT_FOUND");
		
		nb_line_tFileOutputExcel_1++; 
		

 



/**
 * [tFileOutputExcel_1 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
sortie_errorStruct sortie_error_tmp = new sortie_errorStruct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tFilterRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_1", false);
		start_Hash.put("tFilterRow_1", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tFilterRow_1 = 0;
		
    int nb_line_tFilterRow_1 = 0;
    int nb_line_ok_tFilterRow_1 = 0;
    int nb_line_reject_tFilterRow_1 = 0;

    class Operator_tFilterRow_1 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_1(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_1 begin ] stop
 */



	
	/**
	 * [tLogRow_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_5", false);
		start_Hash.put("tLogRow_5", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_eurprice");
					}
				
		int tos_count_tLogRow_5 = 0;
		

	///////////////////////
	
         class Util_tLogRow_5 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[81];

        public void addRow(String[] row) {

            for (int i = 0; i < 81; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 80 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 80 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%2$-");
        			        sbformat.append(colLengths[1]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%3$-");
        			        sbformat.append(colLengths[2]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%4$-");
        			        sbformat.append(colLengths[3]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%5$-");
        			        sbformat.append(colLengths[4]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%6$-");
        			        sbformat.append(colLengths[5]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%7$-");
        			        sbformat.append(colLengths[6]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%8$-");
        			        sbformat.append(colLengths[7]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%9$-");
        			        sbformat.append(colLengths[8]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%10$-");
        			        sbformat.append(colLengths[9]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%11$-");
        			        sbformat.append(colLengths[10]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%12$-");
        			        sbformat.append(colLengths[11]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%13$-");
        			        sbformat.append(colLengths[12]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%14$-");
        			        sbformat.append(colLengths[13]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%15$-");
        			        sbformat.append(colLengths[14]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%16$-");
        			        sbformat.append(colLengths[15]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%17$-");
        			        sbformat.append(colLengths[16]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%18$-");
        			        sbformat.append(colLengths[17]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%19$-");
        			        sbformat.append(colLengths[18]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%20$-");
        			        sbformat.append(colLengths[19]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%21$-");
        			        sbformat.append(colLengths[20]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%22$-");
        			        sbformat.append(colLengths[21]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%23$-");
        			        sbformat.append(colLengths[22]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%24$-");
        			        sbformat.append(colLengths[23]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%25$-");
        			        sbformat.append(colLengths[24]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%26$-");
        			        sbformat.append(colLengths[25]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%27$-");
        			        sbformat.append(colLengths[26]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%28$-");
        			        sbformat.append(colLengths[27]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%29$-");
        			        sbformat.append(colLengths[28]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%30$-");
        			        sbformat.append(colLengths[29]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%31$-");
        			        sbformat.append(colLengths[30]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%32$-");
        			        sbformat.append(colLengths[31]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%33$-");
        			        sbformat.append(colLengths[32]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%34$-");
        			        sbformat.append(colLengths[33]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%35$-");
        			        sbformat.append(colLengths[34]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%36$-");
        			        sbformat.append(colLengths[35]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%37$-");
        			        sbformat.append(colLengths[36]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%38$-");
        			        sbformat.append(colLengths[37]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%39$-");
        			        sbformat.append(colLengths[38]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%40$-");
        			        sbformat.append(colLengths[39]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%41$-");
        			        sbformat.append(colLengths[40]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%42$-");
        			        sbformat.append(colLengths[41]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%43$-");
        			        sbformat.append(colLengths[42]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%44$-");
        			        sbformat.append(colLengths[43]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%45$-");
        			        sbformat.append(colLengths[44]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%46$-");
        			        sbformat.append(colLengths[45]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%47$-");
        			        sbformat.append(colLengths[46]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%48$-");
        			        sbformat.append(colLengths[47]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%49$-");
        			        sbformat.append(colLengths[48]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%50$-");
        			        sbformat.append(colLengths[49]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%51$-");
        			        sbformat.append(colLengths[50]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%52$-");
        			        sbformat.append(colLengths[51]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%53$-");
        			        sbformat.append(colLengths[52]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%54$-");
        			        sbformat.append(colLengths[53]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%55$-");
        			        sbformat.append(colLengths[54]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%56$-");
        			        sbformat.append(colLengths[55]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%57$-");
        			        sbformat.append(colLengths[56]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%58$-");
        			        sbformat.append(colLengths[57]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%59$-");
        			        sbformat.append(colLengths[58]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%60$-");
        			        sbformat.append(colLengths[59]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%61$-");
        			        sbformat.append(colLengths[60]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%62$-");
        			        sbformat.append(colLengths[61]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%63$-");
        			        sbformat.append(colLengths[62]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%64$-");
        			        sbformat.append(colLengths[63]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%65$-");
        			        sbformat.append(colLengths[64]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%66$-");
        			        sbformat.append(colLengths[65]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%67$-");
        			        sbformat.append(colLengths[66]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%68$-");
        			        sbformat.append(colLengths[67]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%69$-");
        			        sbformat.append(colLengths[68]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%70$-");
        			        sbformat.append(colLengths[69]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%71$-");
        			        sbformat.append(colLengths[70]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%72$-");
        			        sbformat.append(colLengths[71]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%73$-");
        			        sbformat.append(colLengths[72]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%74$-");
        			        sbformat.append(colLengths[73]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%75$-");
        			        sbformat.append(colLengths[74]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%76$-");
        			        sbformat.append(colLengths[75]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%77$-");
        			        sbformat.append(colLengths[76]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%78$-");
        			        sbformat.append(colLengths[77]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%79$-");
        			        sbformat.append(colLengths[78]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%80$-");
        			        sbformat.append(colLengths[79]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%81$-");
        			        sbformat.append(colLengths[80]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);                
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);	                

                    for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[4] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[5] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[6] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[7] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[8] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[9] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[10] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[11] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[12] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[13] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[14] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[15] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[16] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[17] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[18] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[19] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[20] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[21] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[22] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[23] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[24] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[25] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[26] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[27] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[28] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[29] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[30] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[31] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[32] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[33] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[34] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[35] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[36] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[37] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[38] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[39] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[40] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[41] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[42] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[43] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[44] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[45] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[46] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[47] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[48] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[49] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[50] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[51] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[52] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[53] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[54] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[55] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[56] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[57] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[58] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[59] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[60] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[61] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[62] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[63] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[64] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[65] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[66] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[67] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[68] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[69] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[70] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[71] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[72] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[73] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[74] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[75] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[76] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[77] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[78] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[79] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                
                    //last column
                    for (int i = 0; i < colLengths[80] - fillChars[1].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_5 util_tLogRow_5 = new Util_tLogRow_5();
        util_tLogRow_5.setTableName("tLogRow_5");
        util_tLogRow_5.addRow(new String[]{"LINE_NUMBER","DYNAMICS_COLOR","DYNAMICS_BRAND","BRAND","SEASON","CATEGORY","REF","DESCRIPTION","STYLE","COLOR","FASHION","STYLECOLORLABEL","COLORNAME","LBL","STYLE_COLOR","GENDER","AGE_RANGE","SIZE_RANGE","SIZE","US_SIZE","CM_SIZE","PRODUCT","PRODUCT_STATUS","PRODUCT_TIER","ACCT_EXCLUS","SIZE_RATIO_SPLIT","REC_SIZE_SPLIT","CARTON_QTY","ATTRIBUTE","UNITS","EUR_RRP","EUR_WSP","GBP_RRP","GBP_WSP","CHF_RRP","CHF_WSP","NOK_RRP","NOK_WSP","DKK_RRP","DKK_WSP","SEK_RRP","SEK_WSP","EUR_FINN_RRP","EUR_FINN_WSP","FABRICATION","COO","CUSTOM_TARIFF_CODE","UPC","SMU_TYPE","BRAND_NOT_FOUND","SEASON_NOT_FOUND","COLOR_NOT_FOUND","CATEGORY_NOT_FOUND","REF_NOT_FOUND","DESCRIPTION_NOT_FOUND","STYLE_NOT_FOUND","COLOR_NAME_NOT_FOUND","LBL_NOT_FOUND","STYLE_COLOR_NOT_FOUND","STYLECOLORLABEL_NOT_FOUND","GENDER_NOT_FOUND","AGE_RANGE_NOT_FOUND","SIZE_RANGE_NOT_FOUND","SIZE_NOT_FOUND","US_SIZE_NOT_FOUND","PRODUCT_NOT_FOUND","FASHION_NOT_FOUND","PRODUCT_STATUS_NOT_FOUND","PRODUCT_TIER_NOT_FOUND","SIZE_RATIO_SPLIT_NOT_FOUND","ATTRIBUTE_NOT_FOUND","UNITS_NOT_FOUND","COO_NOT_FOUND","EUR_RRP_WSP_NOT_FOUND","GBP_RRP_WSP_NOT_FOUND","CHF_RRP_WSP_NOT_FOUND","NOK_RRP_WSP_NOT_FOUND","DKK_RRP_WSP_NOT_FOUND","SEK_RRP_WSP_NOT_FOUND","EUR_FINN_RRP_WSP_NOT_FOUND","CM_SIZE_NOT_FOUND",});        
 		StringBuilder strBuffer_tLogRow_5 = null;
		int nb_line_tLogRow_5 = 0;
///////////////////////    			



 



/**
 * [tLogRow_5 begin ] stop
 */



	
	/**
	 * [tMap_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_13", false);
		start_Hash.put("tMap_13", System.currentTimeMillis());
		
	
	currentComponent="tMap_13";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_cm_size_");
					}
				
		int tos_count_tMap_13 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_13__Struct  {
}
Var__tMap_13__Struct Var__tMap_13 = new Var__tMap_13__Struct();
// ###############################

// ###############################
// # Outputs initialization
sortie_eurpriceStruct sortie_eurprice_tmp = new sortie_eurpriceStruct();
// ###############################

        
        



        









 



/**
 * [tMap_13 begin ] stop
 */



	
	/**
	 * [tMap_31 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_31", false);
		start_Hash.put("tMap_31", System.currentTimeMillis());
		
	
	currentComponent="tMap_31";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_cm_size_1");
					}
				
		int tos_count_tMap_31 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<copyOfsortie_fashionStruct> tHash_Lookup_copyOfsortie_fashion = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<copyOfsortie_fashionStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<copyOfsortie_fashionStruct>) 
					globalMap.get( "tHash_Lookup_copyOfsortie_fashion" ))
					;					
					
	

copyOfsortie_fashionStruct copyOfsortie_fashionHashKey = new copyOfsortie_fashionStruct();
copyOfsortie_fashionStruct copyOfsortie_fashionDefault = new copyOfsortie_fashionStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_31__Struct  {
}
Var__tMap_31__Struct Var__tMap_31 = new Var__tMap_31__Struct();
// ###############################

// ###############################
// # Outputs initialization
sortie_cm_size_Struct sortie_cm_size__tmp = new sortie_cm_size_Struct();
// ###############################

        
        



        









 



/**
 * [tMap_31 begin ] stop
 */



	
	/**
	 * [tMap_30 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_30", false);
		start_Hash.put("tMap_30", System.currentTimeMillis());
		
	
	currentComponent="tMap_30";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_cm");
					}
				
		int tos_count_tMap_30 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<sortie_fashionStruct> tHash_Lookup_sortie_fashion = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<sortie_fashionStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<sortie_fashionStruct>) 
					globalMap.get( "tHash_Lookup_sortie_fashion" ))
					;					
					
	

sortie_fashionStruct sortie_fashionHashKey = new sortie_fashionStruct();
sortie_fashionStruct sortie_fashionDefault = new sortie_fashionStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_30__Struct  {
}
Var__tMap_30__Struct Var__tMap_30 = new Var__tMap_30__Struct();
// ###############################

// ###############################
// # Outputs initialization
sortie_cm_size_1Struct sortie_cm_size_1_tmp = new sortie_cm_size_1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_30 begin ] stop
 */



	
	/**
	 * [tMap_28 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_28", false);
		start_Hash.put("tMap_28", System.currentTimeMillis());
		
	
	currentComponent="tMap_28";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_size_range_");
					}
				
		int tos_count_tMap_28 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_28__Struct  {
}
Var__tMap_28__Struct Var__tMap_28 = new Var__tMap_28__Struct();
// ###############################

// ###############################
// # Outputs initialization
sortie_cmStruct sortie_cm_tmp = new sortie_cmStruct();
// ###############################

        
        



        









 



/**
 * [tMap_28 begin ] stop
 */



	
	/**
	 * [tMap_26 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_26", false);
		start_Hash.put("tMap_26", System.currentTimeMillis());
		
	
	currentComponent="tMap_26";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_age_range_");
					}
				
		int tos_count_tMap_26 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row30Struct> tHash_Lookup_row30 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row30Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row30Struct>) 
					globalMap.get( "tHash_Lookup_row30" ))
					;					
					
	

row30Struct row30HashKey = new row30Struct();
row30Struct row30Default = new row30Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_26__Struct  {
}
Var__tMap_26__Struct Var__tMap_26 = new Var__tMap_26__Struct();
// ###############################

// ###############################
// # Outputs initialization
sortie_size_range_Struct sortie_size_range__tmp = new sortie_size_range_Struct();
// ###############################

        
        



        









 



/**
 * [tMap_26 begin ] stop
 */



	
	/**
	 * [tMap_24 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_24", false);
		start_Hash.put("tMap_24", System.currentTimeMillis());
		
	
	currentComponent="tMap_24";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_coo");
					}
				
		int tos_count_tMap_24 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row28Struct> tHash_Lookup_row28 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row28Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row28Struct>) 
					globalMap.get( "tHash_Lookup_row28" ))
					;					
					
	

row28Struct row28HashKey = new row28Struct();
row28Struct row28Default = new row28Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_24__Struct  {
}
Var__tMap_24__Struct Var__tMap_24 = new Var__tMap_24__Struct();
// ###############################

// ###############################
// # Outputs initialization
sortie_age_range_Struct sortie_age_range__tmp = new sortie_age_range_Struct();
// ###############################

        
        



        









 



/**
 * [tMap_24 begin ] stop
 */



	
	/**
	 * [tMap_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_12", false);
		start_Hash.put("tMap_12", System.currentTimeMillis());
		
	
	currentComponent="tMap_12";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_product_tier");
					}
				
		int tos_count_tMap_12 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_12__Struct  {
}
Var__tMap_12__Struct Var__tMap_12 = new Var__tMap_12__Struct();
// ###############################

// ###############################
// # Outputs initialization
sortie_cooStruct sortie_coo_tmp = new sortie_cooStruct();
// ###############################

        
        



        









 



/**
 * [tMap_12 begin ] stop
 */



	
	/**
	 * [tMap_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_11", false);
		start_Hash.put("tMap_11", System.currentTimeMillis());
		
	
	currentComponent="tMap_11";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_product_status");
					}
				
		int tos_count_tMap_11 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row23Struct> tHash_Lookup_row23 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row23Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row23Struct>) 
					globalMap.get( "tHash_Lookup_row23" ))
					;					
					
	

row23Struct row23HashKey = new row23Struct();
row23Struct row23Default = new row23Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_11__Struct  {
}
Var__tMap_11__Struct Var__tMap_11 = new Var__tMap_11__Struct();
// ###############################

// ###############################
// # Outputs initialization
sortie_product_tierStruct sortie_product_tier_tmp = new sortie_product_tierStruct();
// ###############################

        
        



        









 



/**
 * [tMap_11 begin ] stop
 */



	
	/**
	 * [tMap_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_10", false);
		start_Hash.put("tMap_10", System.currentTimeMillis());
		
	
	currentComponent="tMap_10";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_size");
					}
				
		int tos_count_tMap_10 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<sortie_product_status_fileStruct> tHash_Lookup_sortie_product_status_file = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<sortie_product_status_fileStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<sortie_product_status_fileStruct>) 
					globalMap.get( "tHash_Lookup_sortie_product_status_file" ))
					;					
					
	

sortie_product_status_fileStruct sortie_product_status_fileHashKey = new sortie_product_status_fileStruct();
sortie_product_status_fileStruct sortie_product_status_fileDefault = new sortie_product_status_fileStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_10__Struct  {
}
Var__tMap_10__Struct Var__tMap_10 = new Var__tMap_10__Struct();
// ###############################

// ###############################
// # Outputs initialization
sortie_product_statusStruct sortie_product_status_tmp = new sortie_product_statusStruct();
// ###############################

        
        



        









 



/**
 * [tMap_10 begin ] stop
 */



	
	/**
	 * [tMap_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_9", false);
		start_Hash.put("tMap_9", System.currentTimeMillis());
		
	
	currentComponent="tMap_9";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_gender");
					}
				
		int tos_count_tMap_9 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<sortie_size_mapStruct> tHash_Lookup_sortie_size_map = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<sortie_size_mapStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<sortie_size_mapStruct>) 
					globalMap.get( "tHash_Lookup_sortie_size_map" ))
					;					
					
	

sortie_size_mapStruct sortie_size_mapHashKey = new sortie_size_mapStruct();
sortie_size_mapStruct sortie_size_mapDefault = new sortie_size_mapStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_9__Struct  {
}
Var__tMap_9__Struct Var__tMap_9 = new Var__tMap_9__Struct();
// ###############################

// ###############################
// # Outputs initialization
sortie_sizeStruct sortie_size_tmp = new sortie_sizeStruct();
// ###############################

        
        



        









 



/**
 * [tMap_9 begin ] stop
 */



	
	/**
	 * [tMap_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_8", false);
		start_Hash.put("tMap_8", System.currentTimeMillis());
		
	
	currentComponent="tMap_8";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_category");
					}
				
		int tos_count_tMap_8 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row19Struct> tHash_Lookup_row19 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row19Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row19Struct>) 
					globalMap.get( "tHash_Lookup_row19" ))
					;					
					
	

row19Struct row19HashKey = new row19Struct();
row19Struct row19Default = new row19Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_8__Struct  {
}
Var__tMap_8__Struct Var__tMap_8 = new Var__tMap_8__Struct();
// ###############################

// ###############################
// # Outputs initialization
sortie_genderStruct sortie_gender_tmp = new sortie_genderStruct();
// ###############################

        
        



        









 



/**
 * [tMap_8 begin ] stop
 */



	
	/**
	 * [tMap_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_7", false);
		start_Hash.put("tMap_7", System.currentTimeMillis());
		
	
	currentComponent="tMap_7";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_season");
					}
				
		int tos_count_tMap_7 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_7__Struct  {
}
Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
// ###############################

// ###############################
// # Outputs initialization
sortie_categoryStruct sortie_category_tmp = new sortie_categoryStruct();
// ###############################

        
        



        









 



/**
 * [tMap_7 begin ] stop
 */



	
	/**
	 * [tMap_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_6", false);
		start_Hash.put("tMap_6", System.currentTimeMillis());
		
	
	currentComponent="tMap_6";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_Brand");
					}
				
		int tos_count_tMap_6 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<sortie_season_mapStruct> tHash_Lookup_sortie_season_map = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<sortie_season_mapStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<sortie_season_mapStruct>) 
					globalMap.get( "tHash_Lookup_sortie_season_map" ))
					;					
					
	

sortie_season_mapStruct sortie_season_mapHashKey = new sortie_season_mapStruct();
sortie_season_mapStruct sortie_season_mapDefault = new sortie_season_mapStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_6__Struct  {
}
Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
sortie_seasonStruct sortie_season_tmp = new sortie_seasonStruct();
// ###############################

        
        



        









 



/**
 * [tMap_6 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row12");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<sortie_brand_mapStruct> tHash_Lookup_sortie_brand_map = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<sortie_brand_mapStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<sortie_brand_mapStruct>) 
					globalMap.get( "tHash_Lookup_sortie_brand_map" ))
					;					
					
	

sortie_brand_mapStruct sortie_brand_mapHashKey = new sortie_brand_mapStruct();
sortie_brand_mapStruct sortie_brand_mapDefault = new sortie_brand_mapStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
sortie_BrandStruct sortie_Brand_tmp = new sortie_BrandStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tLogRow_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_4", false);
		start_Hash.put("tLogRow_4", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie");
					}
				
		int tos_count_tLogRow_4 = 0;
		

	///////////////////////
	
         class Util_tLogRow_4 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[73];

        public void addRow(String[] row) {

            for (int i = 0; i < 73; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 72 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 72 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%2$-");
        			        sbformat.append(colLengths[1]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%3$-");
        			        sbformat.append(colLengths[2]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%4$-");
        			        sbformat.append(colLengths[3]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%5$-");
        			        sbformat.append(colLengths[4]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%6$-");
        			        sbformat.append(colLengths[5]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%7$-");
        			        sbformat.append(colLengths[6]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%8$-");
        			        sbformat.append(colLengths[7]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%9$-");
        			        sbformat.append(colLengths[8]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%10$-");
        			        sbformat.append(colLengths[9]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%11$-");
        			        sbformat.append(colLengths[10]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%12$-");
        			        sbformat.append(colLengths[11]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%13$-");
        			        sbformat.append(colLengths[12]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%14$-");
        			        sbformat.append(colLengths[13]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%15$-");
        			        sbformat.append(colLengths[14]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%16$-");
        			        sbformat.append(colLengths[15]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%17$-");
        			        sbformat.append(colLengths[16]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%18$-");
        			        sbformat.append(colLengths[17]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%19$-");
        			        sbformat.append(colLengths[18]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%20$-");
        			        sbformat.append(colLengths[19]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%21$-");
        			        sbformat.append(colLengths[20]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%22$-");
        			        sbformat.append(colLengths[21]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%23$-");
        			        sbformat.append(colLengths[22]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%24$-");
        			        sbformat.append(colLengths[23]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%25$-");
        			        sbformat.append(colLengths[24]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%26$-");
        			        sbformat.append(colLengths[25]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%27$-");
        			        sbformat.append(colLengths[26]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%28$-");
        			        sbformat.append(colLengths[27]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%29$-");
        			        sbformat.append(colLengths[28]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%30$-");
        			        sbformat.append(colLengths[29]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%31$-");
        			        sbformat.append(colLengths[30]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%32$-");
        			        sbformat.append(colLengths[31]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%33$-");
        			        sbformat.append(colLengths[32]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%34$-");
        			        sbformat.append(colLengths[33]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%35$-");
        			        sbformat.append(colLengths[34]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%36$-");
        			        sbformat.append(colLengths[35]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%37$-");
        			        sbformat.append(colLengths[36]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%38$-");
        			        sbformat.append(colLengths[37]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%39$-");
        			        sbformat.append(colLengths[38]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%40$-");
        			        sbformat.append(colLengths[39]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%41$-");
        			        sbformat.append(colLengths[40]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%42$-");
        			        sbformat.append(colLengths[41]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%43$-");
        			        sbformat.append(colLengths[42]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%44$-");
        			        sbformat.append(colLengths[43]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%45$-");
        			        sbformat.append(colLengths[44]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%46$-");
        			        sbformat.append(colLengths[45]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%47$-");
        			        sbformat.append(colLengths[46]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%48$-");
        			        sbformat.append(colLengths[47]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%49$-");
        			        sbformat.append(colLengths[48]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%50$-");
        			        sbformat.append(colLengths[49]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%51$-");
        			        sbformat.append(colLengths[50]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%52$-");
        			        sbformat.append(colLengths[51]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%53$-");
        			        sbformat.append(colLengths[52]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%54$-");
        			        sbformat.append(colLengths[53]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%55$-");
        			        sbformat.append(colLengths[54]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%56$-");
        			        sbformat.append(colLengths[55]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%57$-");
        			        sbformat.append(colLengths[56]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%58$-");
        			        sbformat.append(colLengths[57]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%59$-");
        			        sbformat.append(colLengths[58]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%60$-");
        			        sbformat.append(colLengths[59]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%61$-");
        			        sbformat.append(colLengths[60]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%62$-");
        			        sbformat.append(colLengths[61]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%63$-");
        			        sbformat.append(colLengths[62]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%64$-");
        			        sbformat.append(colLengths[63]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%65$-");
        			        sbformat.append(colLengths[64]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%66$-");
        			        sbformat.append(colLengths[65]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%67$-");
        			        sbformat.append(colLengths[66]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%68$-");
        			        sbformat.append(colLengths[67]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%69$-");
        			        sbformat.append(colLengths[68]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%70$-");
        			        sbformat.append(colLengths[69]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%71$-");
        			        sbformat.append(colLengths[70]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%72$-");
        			        sbformat.append(colLengths[71]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%73$-");
        			        sbformat.append(colLengths[72]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);                
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);	                

                    for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[4] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[5] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[6] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[7] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[8] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[9] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[10] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[11] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[12] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[13] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[14] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[15] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[16] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[17] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[18] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[19] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[20] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[21] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[22] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[23] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[24] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[25] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[26] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[27] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[28] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[29] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[30] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[31] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[32] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[33] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[34] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[35] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[36] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[37] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[38] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[39] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[40] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[41] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[42] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[43] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[44] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[45] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[46] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[47] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[48] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[49] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[50] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[51] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[52] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[53] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[54] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[55] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[56] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[57] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[58] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[59] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[60] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[61] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[62] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[63] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[64] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[65] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[66] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[67] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[68] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[69] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[70] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[71] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                
                    //last column
                    for (int i = 0; i < colLengths[72] - fillChars[1].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_4 util_tLogRow_4 = new Util_tLogRow_4();
        util_tLogRow_4.setTableName("tLogRow_4");
        util_tLogRow_4.addRow(new String[]{"LINE_NUMBER","DYNAMICS_COLOR","BRAND","SEASON","CATEGORY","REF","DESCRIPTION","STYLE","COLOR","FASHION","STYLECOLORLABEL","COLORNAME","LBL","STYLE_COLOR","GENDER","AGE_RANGE","SIZE_RANGE","SIZE","US_SIZE","CM_SIZE","PRODUCT","PRODUCT_STATUS","PRODUCT_TIER","ACCT_EXCLUS","SIZE_RATIO_SPLIT","REC_SIZE_SPLIT","CARTON_QTY","ATTRIBUTE","UNITS","EUR_RRP","EUR_WSP","GBP_RRP","GBP_WSP","CHF_RRP","CHF_WSP","NOK_RRP","NOK_WSP","DKK_RRP","DKK_WSP","SEK_RRP","SEK_WSP","EUR_FINN_RRP","EUR_FINN_WSP","FABRICATION","COO","CUSTOM_TARIFF_CODE","UPC","SMU_TYPE","BRAND_NOT_FOUND","SEASON_NOT_FOUND","COLOR_NOT_FOUND","CATEGORY_NOT_FOUND","REF_NOT_FOUND","DESCRIPTION_NOT_FOUND","STYLE_NOT_FOUND","COLOR_NAME_NOT_FOUND","LBL_NOT_FOUND","STYLE_COLOR_NOT_FOUND","STYLECOLORLABEL_NOT_FOUND","GENDER_NOT_FOUND","AGE_RANGE_NOT_FOUND","SIZE_RANGE_NOT_FOUND","SIZE_NOT_FOUND","US_SIZE_NOT_FOUND","PRODUCT_NOT_FOUND","FASHION_NOT_FOUND","PRODUCT_STATUS_NOT_FOUND","PRODUCT_TIER_NOT_FOUND","SIZE_RATIO_SPLIT_NOT_FOUND","ATTRIBUTE_NOT_FOUND","UNITS_NOT_FOUND","COO_NOT_FOUND","CM_SIZE_NOT_FOUND",});        
 		StringBuilder strBuffer_tLogRow_4 = null;
		int nb_line_tLogRow_4 = 0;
///////////////////////    			



 



/**
 * [tLogRow_4 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row10");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<sortie_color_mapStruct> tHash_Lookup_sortie_color_map = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<sortie_color_mapStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<sortie_color_mapStruct>) 
					globalMap.get( "tHash_Lookup_sortie_color_map" ))
					;					
					
	

sortie_color_mapStruct sortie_color_mapHashKey = new sortie_color_mapStruct();
sortie_color_mapStruct sortie_color_mapDefault = new sortie_color_mapStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
sortieStruct sortie_tmp = new sortieStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tLogRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_2", false);
		start_Hash.put("tLogRow_2", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row32");
					}
				
		int tos_count_tLogRow_2 = 0;
		

 



/**
 * [tLogRow_2 begin ] stop
 */



	
	/**
	 * [tFilterRow_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_8", false);
		start_Hash.put("tFilterRow_8", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_8";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"validate_fields");
					}
				
		int tos_count_tFilterRow_8 = 0;
		
    int nb_line_tFilterRow_8 = 0;
    int nb_line_ok_tFilterRow_8 = 0;
    int nb_line_reject_tFilterRow_8 = 0;

    class Operator_tFilterRow_8 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_8(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_8 begin ] stop
 */



	
	/**
	 * [tMap_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_5", false);
		start_Hash.put("tMap_5", System.currentTimeMillis());
		
	
	currentComponent="tMap_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_Excel");
					}
				
		int tos_count_tMap_5 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_5__Struct  {
}
Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
validate_fieldsStruct validate_fields_tmp = new validate_fieldsStruct();
// ###############################

        
        



        









 



/**
 * [tMap_5 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
	String Fn_BRAND;
	String Fn_SEASON;
	String Fn_CATEGORY;
	String Fn_REF;
	String Fn_DESCRIPTION;
	String Fn_STYLE;
	String Fn_COLOR;
	String Fn_FASHION;
	String Fn_STYLE_COLOR_LABEL;
	String Fn_COLOR_NAME;
	String Fn_LBL;
	String Fn_STYLE_COLOR;
	String Fn_GENDER;
	String Fn_AGE_RANGE;
	String Fn_SIZE_RANGE;
	String Fn_SIZE;
	String Fn_US_SIZE;
	String Fn_CM_SIZE;
	String Fn_PRODUCT;
	String Fn_PRODUCT_STATUS;
	String Fn_PRODUCT_TIER;
	String Fn_ACCT_EXCLUS;
	String Fn_SIZE_RATIO_SPLIT;
	String Fn_REC_SIZE_SPLIT;
	String Fn_CARTON_QTY;
	String Fn_ATTRIBUTE;
	String Fn_UNITS;
	String Fn_EUR_RRP;
	String Fn_EUR_WSP;
	String Fn_GBP_RRP;
	String Fn_GBP_WSP;
	String Fn_CHF_RRP;
	String Fn_CHF_WSP;
	String Fn_NOK_RRP;
	String Fn_NOK_WSP;
	String Fn_DKK_RRP;
	String Fn_DKK_WSP;
	String Fn_SEK_RRP;
	String Fn_SEK_WSP;
	String Fn_EUR_FINN_RRP;
	String Fn_EUR_FINN_WSP;
	String Fn_FABRICATION;
	String Fn_COO;
	String Fn_CUSTOM_TARIFF_CODE;
	String Fn_UPC;
	String Fn_SMU_TYPE;
	String Fn_EAN;
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
sortie_ExcelStruct sortie_Excel_tmp = new sortie_ExcelStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tFileInputExcel_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputExcel_2", false);
		start_Hash.put("tFileInputExcel_2", System.currentTimeMillis());
		
	
	currentComponent="tFileInputExcel_2";

	
		int tos_count_tFileInputExcel_2 = 0;
		

 
	final String decryptedPassword_tFileInputExcel_2 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[UgsDMmk90Z0phc7yZAEs/ImCEkQ0XiRcNAJYMQ==]");
        String password_tFileInputExcel_2 = decryptedPassword_tFileInputExcel_2;
        if (password_tFileInputExcel_2.isEmpty()){
            password_tFileInputExcel_2 = null;
        }
			class RegexUtil_tFileInputExcel_2 {

		    	public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, String oneSheetName, boolean useRegex) {

			        java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();

			        if(useRegex){//this part process the regex issue

				        java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(oneSheetName);
				        for (org.apache.poi.ss.usermodel.Sheet sheet : workbook) {
				            String sheetName = sheet.getSheetName();
				            java.util.regex.Matcher matcher = pattern.matcher(sheetName);
				            if (matcher.matches()) {
				            	if(sheet != null){
				                	list.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet);
				                }
				            }
				        }

			        }else{
			        	org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook.getSheet(oneSheetName);
		            	if(sheet != null){
		                	list.add(sheet);
		                }

			        }

			        return list;
			    }

			    public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, int index, boolean useRegex) {
			    	java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list =  new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
			    	org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook.getSheetAt(index);
	            	if(sheet != null){
	                	list.add(sheet);
	                }
			    	return list;
			    }

			}
		RegexUtil_tFileInputExcel_2 regexUtil_tFileInputExcel_2 = new RegexUtil_tFileInputExcel_2();

		Object source_tFileInputExcel_2 = context.IntegrationExcelPath + context.ExcelFileName;
		org.apache.poi.xssf.usermodel.XSSFWorkbook workbook_tFileInputExcel_2 = null;

		if(source_tFileInputExcel_2 instanceof String){
			workbook_tFileInputExcel_2 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory.create(new java.io.File((String)source_tFileInputExcel_2), password_tFileInputExcel_2);
		} else if(source_tFileInputExcel_2 instanceof java.io.InputStream) {
     		workbook_tFileInputExcel_2 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory.create((java.io.InputStream)source_tFileInputExcel_2, password_tFileInputExcel_2);
		} else{
			workbook_tFileInputExcel_2 = null;
			throw new java.lang.Exception("The data source should be specified as Inputstream or File Path!");
		}
		try {

		java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_tFileInputExcel_2 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
        sheetList_tFileInputExcel_2.addAll(regexUtil_tFileInputExcel_2.getSheets(workbook_tFileInputExcel_2, 0, false));
    	if(sheetList_tFileInputExcel_2.size() <= 0){
            throw new RuntimeException("Special sheets not exist!");
        }

		java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_FilterNull_tFileInputExcel_2 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
		for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_FilterNull_tFileInputExcel_2 : sheetList_tFileInputExcel_2) {
			if(sheet_FilterNull_tFileInputExcel_2!=null && sheetList_FilterNull_tFileInputExcel_2.iterator()!=null && sheet_FilterNull_tFileInputExcel_2.iterator().hasNext()){
				sheetList_FilterNull_tFileInputExcel_2.add(sheet_FilterNull_tFileInputExcel_2);
			}
		}
		sheetList_tFileInputExcel_2 = sheetList_FilterNull_tFileInputExcel_2;
	if(sheetList_tFileInputExcel_2.size()>0){
		int nb_line_tFileInputExcel_2 = 0;

        int begin_line_tFileInputExcel_2 = 1;

        int footer_input_tFileInputExcel_2 = 0;

        int end_line_tFileInputExcel_2=0;
        for(org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_2:sheetList_tFileInputExcel_2){
			end_line_tFileInputExcel_2+=(sheet_tFileInputExcel_2.getLastRowNum()+1);
        }
        end_line_tFileInputExcel_2 -= footer_input_tFileInputExcel_2;
        int limit_tFileInputExcel_2 = -1;
        int start_column_tFileInputExcel_2 = 1-1;
        int end_column_tFileInputExcel_2 = -1;
        Integer lastColumn_tFileInputExcel_2 = 47;
        if(lastColumn_tFileInputExcel_2!=null){
        	end_column_tFileInputExcel_2 = lastColumn_tFileInputExcel_2.intValue();
        }

        org.apache.poi.xssf.usermodel.XSSFRow row_tFileInputExcel_2 = null;
        org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_2 = sheetList_tFileInputExcel_2.get(0);
        int rowCount_tFileInputExcel_2 = 0;
        int sheetIndex_tFileInputExcel_2 = 0;
        int currentRows_tFileInputExcel_2 = (sheetList_tFileInputExcel_2.get(0).getLastRowNum()+1);

		//for the number format
        java.text.DecimalFormat df_tFileInputExcel_2 = new java.text.DecimalFormat("#.####################################");
        char decimalChar_tFileInputExcel_2 = df_tFileInputExcel_2.getDecimalFormatSymbols().getDecimalSeparator();
		
        for(int i_tFileInputExcel_2 = begin_line_tFileInputExcel_2; i_tFileInputExcel_2 < end_line_tFileInputExcel_2; i_tFileInputExcel_2++){

        	int emptyColumnCount_tFileInputExcel_2 = 0;

        	if (limit_tFileInputExcel_2 != -1 && nb_line_tFileInputExcel_2 >= limit_tFileInputExcel_2) {
        		break;
        	}

            while (i_tFileInputExcel_2 >= rowCount_tFileInputExcel_2 + currentRows_tFileInputExcel_2) {
                rowCount_tFileInputExcel_2 += currentRows_tFileInputExcel_2;
                sheet_tFileInputExcel_2 = sheetList_tFileInputExcel_2.get(++sheetIndex_tFileInputExcel_2);
                currentRows_tFileInputExcel_2 = (sheet_tFileInputExcel_2.getLastRowNum()+1);
            }
            globalMap.put("tFileInputExcel_2_CURRENT_SHEET",sheet_tFileInputExcel_2.getSheetName());
            if (rowCount_tFileInputExcel_2 <= i_tFileInputExcel_2) {
                row_tFileInputExcel_2 = sheet_tFileInputExcel_2.getRow(i_tFileInputExcel_2 - rowCount_tFileInputExcel_2);
            }
		    row3 = null;
					int tempRowLength_tFileInputExcel_2 = 82;
				
				int columnIndex_tFileInputExcel_2 = 0;
			
			String[] temp_row_tFileInputExcel_2 = new String[tempRowLength_tFileInputExcel_2];
			int excel_end_column_tFileInputExcel_2;
			if(row_tFileInputExcel_2==null){
				excel_end_column_tFileInputExcel_2=0;
			}else{
				excel_end_column_tFileInputExcel_2=row_tFileInputExcel_2.getLastCellNum();
			}
			int actual_end_column_tFileInputExcel_2;
			if(end_column_tFileInputExcel_2 == -1){
				actual_end_column_tFileInputExcel_2 = excel_end_column_tFileInputExcel_2;
			}
			else{
				actual_end_column_tFileInputExcel_2 = end_column_tFileInputExcel_2 >	excel_end_column_tFileInputExcel_2 ? excel_end_column_tFileInputExcel_2 : end_column_tFileInputExcel_2;
			}
			org.apache.poi.ss.formula.eval.NumberEval ne_tFileInputExcel_2 = null;
			for(int i=0;i<tempRowLength_tFileInputExcel_2;i++){
				if(i + start_column_tFileInputExcel_2 < actual_end_column_tFileInputExcel_2){
					org.apache.poi.ss.usermodel.Cell cell_tFileInputExcel_2 = row_tFileInputExcel_2.getCell(i + start_column_tFileInputExcel_2);
					if(cell_tFileInputExcel_2!=null){
					switch (cell_tFileInputExcel_2.getCellType()) {
                        case STRING:
                            temp_row_tFileInputExcel_2[i] = cell_tFileInputExcel_2.getRichStringCellValue().getString();
                            break;
                        case NUMERIC:
                            if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell_tFileInputExcel_2)) {
									temp_row_tFileInputExcel_2[i] =cell_tFileInputExcel_2.getDateCellValue().toString();
                            } else {
                                temp_row_tFileInputExcel_2[i] = df_tFileInputExcel_2.format(cell_tFileInputExcel_2.getNumericCellValue());
                            }
                            break;
                        case BOOLEAN:
                            temp_row_tFileInputExcel_2[i] =String.valueOf(cell_tFileInputExcel_2.getBooleanCellValue());
                            break;
                        case FORMULA:
        					switch (cell_tFileInputExcel_2.getCachedFormulaResultType()) {
                                case STRING:
                                    temp_row_tFileInputExcel_2[i] = cell_tFileInputExcel_2.getRichStringCellValue().getString();
                                    break;
                                case NUMERIC:
                                    if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell_tFileInputExcel_2)) {
											temp_row_tFileInputExcel_2[i] =cell_tFileInputExcel_2.getDateCellValue().toString();
                                    } else {
	                                    ne_tFileInputExcel_2 = new org.apache.poi.ss.formula.eval.NumberEval(cell_tFileInputExcel_2.getNumericCellValue());
										temp_row_tFileInputExcel_2[i] = ne_tFileInputExcel_2.getStringValue();
                                    }
                                    break;
                                case BOOLEAN:
                                    temp_row_tFileInputExcel_2[i] =String.valueOf(cell_tFileInputExcel_2.getBooleanCellValue());
                                    break;
                                default:
                            		temp_row_tFileInputExcel_2[i] = "";
                            }
                            break;
                        default:
                            temp_row_tFileInputExcel_2[i] = "";
                        }
                	}
                	else{
                		temp_row_tFileInputExcel_2[i]="";
                	}

				}else{
					temp_row_tFileInputExcel_2[i]="";
				}
			}
			boolean whetherReject_tFileInputExcel_2 = false;
			row3 = new row3Struct();
			int curColNum_tFileInputExcel_2 = -1;
			String curColName_tFileInputExcel_2 = "";
			try{
							columnIndex_tFileInputExcel_2 = 0;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn";

				row3.newColumn = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 1;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn1";

				row3.newColumn1 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn1 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 2;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn2";

				row3.newColumn2 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn2 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 3;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn3";

				row3.newColumn3 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn3 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 4;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn4";

				row3.newColumn4 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn4 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 5;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn5";

				row3.newColumn5 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn5 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 6;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn6";

				row3.newColumn6 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn6 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 7;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn7";

				row3.newColumn7 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn7 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 8;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn8";

				row3.newColumn8 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn8 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 9;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn9";

				row3.newColumn9 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn9 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 10;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn10";

				row3.newColumn10 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn10 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 11;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn11";

				row3.newColumn11 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn11 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 12;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn12";

				row3.newColumn12 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn12 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 13;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn13";

				row3.newColumn13 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn13 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 14;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn14";

				row3.newColumn14 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn14 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 15;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn15";

				row3.newColumn15 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn15 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 16;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn16";

				row3.newColumn16 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn16 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 17;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn17";

				row3.newColumn17 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn17 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 18;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn18";

				row3.newColumn18 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn18 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 19;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn19";

				row3.newColumn19 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn19 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 20;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn20";

				row3.newColumn20 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn20 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 21;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn21";

				row3.newColumn21 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn21 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 22;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn22";

				row3.newColumn22 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn22 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 23;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn23";

				row3.newColumn23 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn23 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 24;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn24";

				row3.newColumn24 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn24 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 25;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn25";

				row3.newColumn25 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn25 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 26;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn26";

				row3.newColumn26 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn26 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 27;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn27";

				row3.newColumn27 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn27 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 28;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn28";

				row3.newColumn28 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn28 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 29;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn29";

				row3.newColumn29 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn29 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 30;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn30";

				row3.newColumn30 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn30 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 31;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn31";

				row3.newColumn31 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn31 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 32;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn32";

				row3.newColumn32 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn32 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 33;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn33";

				row3.newColumn33 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn33 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 34;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn34";

				row3.newColumn34 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn34 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 35;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn35";

				row3.newColumn35 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn35 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 36;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn36";

				row3.newColumn36 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn36 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 37;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn37";

				row3.newColumn37 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn37 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 38;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn38";

				row3.newColumn38 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn38 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 39;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn39";

				row3.newColumn39 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn39 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 40;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn40";

				row3.newColumn40 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn40 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 41;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn41";

				row3.newColumn41 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn41 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 42;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn42";

				row3.newColumn42 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn42 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 43;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn43";

				row3.newColumn43 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn43 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 44;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn44";

				row3.newColumn44 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn44 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 45;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn45";

				row3.newColumn45 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn45 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 46;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn46";

				row3.newColumn46 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn46 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 47;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn47";

				row3.newColumn47 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn47 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 48;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn48";

				row3.newColumn48 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn48 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 49;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn49";

				row3.newColumn49 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn49 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 50;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn50";

				row3.newColumn50 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn50 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 51;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn51";

				row3.newColumn51 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn51 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 52;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn52";

				row3.newColumn52 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn52 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 53;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn53";

				row3.newColumn53 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn53 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 54;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn54";

				row3.newColumn54 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn54 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 55;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn55";

				row3.newColumn55 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn55 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 56;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn56";

				row3.newColumn56 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn56 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 57;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn57";

				row3.newColumn57 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn57 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 58;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn58";

				row3.newColumn58 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn58 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 59;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn59";

				row3.newColumn59 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn59 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 60;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn60";

				row3.newColumn60 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn60 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 61;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn61";

				row3.newColumn61 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn61 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 62;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn62";

				row3.newColumn62 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn62 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 63;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn63";

				row3.newColumn63 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn63 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 64;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn64";

				row3.newColumn64 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn64 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 65;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn65";

				row3.newColumn65 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn65 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 66;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn66";

				row3.newColumn66 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn66 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 67;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn67";

				row3.newColumn67 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn67 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 68;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn68";

				row3.newColumn68 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn68 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 69;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn69";

				row3.newColumn69 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn69 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 70;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn70";

				row3.newColumn70 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn70 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 71;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn71";

				row3.newColumn71 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn71 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 72;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn72";

				row3.newColumn72 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn72 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 73;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn73";

				row3.newColumn73 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn73 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 74;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn74";

				row3.newColumn74 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn74 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 75;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn75";

				row3.newColumn75 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn75 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 76;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn76";

				row3.newColumn76 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn76 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 77;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn77";

				row3.newColumn77 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn77 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 78;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn78";

				row3.newColumn78 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn78 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 79;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn79";

				row3.newColumn79 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn79 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 80;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn80";

				row3.newColumn80 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn80 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 81;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn81";

				row3.newColumn81 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn81 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}

				nb_line_tFileInputExcel_2++;
				
			}catch(java.lang.Exception e){
			whetherReject_tFileInputExcel_2 = true;
					 System.err.println(e.getMessage());
					 row3 = null;
			}


		



 



/**
 * [tFileInputExcel_2 begin ] stop
 */
	
	/**
	 * [tFileInputExcel_2 main ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_2";

	

 


	tos_count_tFileInputExcel_2++;

/**
 * [tFileInputExcel_2 main ] stop
 */
	
	/**
	 * [tFileInputExcel_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_2";

	

 



/**
 * [tFileInputExcel_2 process_data_begin ] stop
 */
// Start of branch "row3"
if(row3 != null) { 



	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row3");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;
Var.Fn_BRAND = ((Map<String,String>)globalMap.get("fieldMap")).get("BRAND");
Var.Fn_SEASON = ((Map<String,String>)globalMap.get("fieldMap")).get("SEASON");
Var.Fn_CATEGORY = ((Map<String,String>)globalMap.get("fieldMap")).get("CATEGORY");
Var.Fn_REF = ((Map<String,String>)globalMap.get("fieldMap")).get("REF");
Var.Fn_DESCRIPTION = ((Map<String,String>)globalMap.get("fieldMap")).get("DESCRIPTION");
Var.Fn_STYLE = ((Map<String,String>)globalMap.get("fieldMap")).get("STYLE");
Var.Fn_COLOR = ((Map<String,String>)globalMap.get("fieldMap")).get("COLOR");
Var.Fn_FASHION = ((Map<String,String>)globalMap.get("fieldMap")).get("FASHION");
Var.Fn_STYLE_COLOR_LABEL = ((Map<String,String>)globalMap.get("fieldMap")).get("STYLE-COLOR-LABEL");
Var.Fn_COLOR_NAME = ((Map<String,String>)globalMap.get("fieldMap")).get("COLOR NAME");
Var.Fn_LBL = ((Map<String,String>)globalMap.get("fieldMap")).get("LBL");
Var.Fn_STYLE_COLOR = ((Map<String,String>)globalMap.get("fieldMap")).get("STYLE-COLOR");
Var.Fn_GENDER = ((Map<String,String>)globalMap.get("fieldMap")).get("GENDER");
Var.Fn_AGE_RANGE = ((Map<String,String>)globalMap.get("fieldMap")).get("AGE RANGE");
Var.Fn_SIZE_RANGE = ((Map<String,String>)globalMap.get("fieldMap")).get("SIZE RANGE");
Var.Fn_SIZE = ((Map<String,String>)globalMap.get("fieldMap")).get("SIZE");
Var.Fn_US_SIZE = ((Map<String,String>)globalMap.get("fieldMap")).get("US SIZE");
Var.Fn_CM_SIZE = ((Map<String,String>)globalMap.get("fieldMap")).get("CM SIZE");
Var.Fn_PRODUCT = ((Map<String,String>)globalMap.get("fieldMap")).get("PRODUCT");
Var.Fn_PRODUCT_STATUS = ((Map<String,String>)globalMap.get("fieldMap")).get("PRODUCT STATUS");
Var.Fn_PRODUCT_TIER = ((Map<String,String>)globalMap.get("fieldMap")).get("PRODUCT TIER");
Var.Fn_ACCT_EXCLUS = ((Map<String,String>)globalMap.get("fieldMap")).get("ACCT EXCLUS");
Var.Fn_SIZE_RATIO_SPLIT = ((Map<String,String>)globalMap.get("fieldMap")).get("% SIZE RATIO SPLIT");
Var.Fn_REC_SIZE_SPLIT = ((Map<String,String>)globalMap.get("fieldMap")).get("REC SIZE SPLIT");
Var.Fn_CARTON_QTY = ((Map<String,String>)globalMap.get("fieldMap")).get("CARTON QTY");
Var.Fn_ATTRIBUTE = ((Map<String,String>)globalMap.get("fieldMap")).get("ATTRIBUT");
Var.Fn_UNITS = ((Map<String,String>)globalMap.get("fieldMap")).get("UNITS");
Var.Fn_EUR_RRP = ((Map<String,String>)globalMap.get("fieldMap")).get("EUR RRP");
Var.Fn_EUR_WSP = ((Map<String,String>)globalMap.get("fieldMap")).get("EUR WSP");
Var.Fn_GBP_RRP = ((Map<String,String>)globalMap.get("fieldMap")).get("GBP RRP");
Var.Fn_GBP_WSP = ((Map<String,String>)globalMap.get("fieldMap")).get("GBP WSP");
Var.Fn_CHF_RRP = ((Map<String,String>)globalMap.get("fieldMap")).get("CHF RRP");
Var.Fn_CHF_WSP = ((Map<String,String>)globalMap.get("fieldMap")).get("CHF WSP");
Var.Fn_NOK_RRP = ((Map<String,String>)globalMap.get("fieldMap")).get("NOK RRP");
Var.Fn_NOK_WSP = ((Map<String,String>)globalMap.get("fieldMap")).get("NOK WSP");
Var.Fn_DKK_RRP = ((Map<String,String>)globalMap.get("fieldMap")).get("DKK RRP");
Var.Fn_DKK_WSP = ((Map<String,String>)globalMap.get("fieldMap")).get("DKK WSP");
Var.Fn_SEK_RRP = ((Map<String,String>)globalMap.get("fieldMap")).get("SEK RRP");
Var.Fn_SEK_WSP = ((Map<String,String>)globalMap.get("fieldMap")).get("SEK WSP");
Var.Fn_EUR_FINN_RRP = ((Map<String,String>)globalMap.get("fieldMap")).get("EURO (FINN) RRP");
Var.Fn_EUR_FINN_WSP = ((Map<String,String>)globalMap.get("fieldMap")).get("EURO (FINN) WSP");
Var.Fn_FABRICATION = ((Map<String,String>)globalMap.get("fieldMap")).get("FABRICATION");
Var.Fn_COO = ((Map<String,String>)globalMap.get("fieldMap")).get("COO");
Var.Fn_CUSTOM_TARIFF_CODE = ((Map<String,String>)globalMap.get("fieldMap")).get("CUSTOM TARIFF CODE");
Var.Fn_UPC = ((Map<String,String>)globalMap.get("fieldMap")).get("UPC");
Var.Fn_SMU_TYPE = ((Map<String,String>)globalMap.get("fieldMap")).get("SMU TYPE");
Var.Fn_EAN = ((Map<String,String>)globalMap.get("fieldMap")).get("EAN") ;// ###############################
        // ###############################
        // # Output tables

sortie_Excel = null;


// # Output table : 'sortie_Excel'
sortie_Excel_tmp.BRAND = (String) row3.getClass().getField(Var.Fn_BRAND).get(row3) ;
sortie_Excel_tmp.SEASON = (String) row3.getClass().getField(Var.Fn_SEASON).get(row3) ;
sortie_Excel_tmp.CATEGORY = (String) row3.getClass().getField(Var.Fn_CATEGORY).get(row3) ;
sortie_Excel_tmp.REF = (String) row3.getClass().getField(Var.Fn_REF).get(row3) ;
sortie_Excel_tmp.DESCRIPTION = (String) row3.getClass().getField(Var.Fn_DESCRIPTION).get(row3) ;
sortie_Excel_tmp.STYLE = (String) row3.getClass().getField(Var.Fn_STYLE).get(row3) ;
sortie_Excel_tmp.COLOR = (String) row3.getClass().getField(Var.Fn_COLOR).get(row3) ;
sortie_Excel_tmp.FASHION = (String) row3.getClass().getField(Var.Fn_FASHION).get(row3) ;
sortie_Excel_tmp.STYLECOLORLABEL = (String) row3.getClass().getField(Var.Fn_STYLE_COLOR_LABEL).get(row3) ;
sortie_Excel_tmp.COLORNAME = (String) row3.getClass().getField(Var.Fn_COLOR_NAME).get(row3) ;
sortie_Excel_tmp.LBL = (String) row3.getClass().getField(Var.Fn_LBL).get(row3) ;
sortie_Excel_tmp.STYLE_COLOR = (String) row3.getClass().getField(Var.Fn_STYLE_COLOR).get(row3) ;
sortie_Excel_tmp.GENDER = (String) row3.getClass().getField(Var.Fn_GENDER).get(row3) ;
sortie_Excel_tmp.AGE_RANGE = (String) row3.getClass().getField(Var.Fn_AGE_RANGE).get(row3) ;
sortie_Excel_tmp.SIZE_RANGE = (String) row3.getClass().getField(Var.Fn_SIZE_RANGE).get(row3) ;
sortie_Excel_tmp.SIZE = (String) row3.getClass().getField(Var.Fn_SIZE).get(row3) ;
sortie_Excel_tmp.US_SIZE = (String) row3.getClass().getField(Var.Fn_US_SIZE).get(row3) ;
sortie_Excel_tmp.CM_SIZE = (String) row3.getClass().getField(Var.Fn_CM_SIZE).get(row3) ;
sortie_Excel_tmp.PRODUCT = (String) row3.getClass().getField(Var.Fn_PRODUCT).get(row3) ;
sortie_Excel_tmp.PRODUCT_STATUS = (String) row3.getClass().getField(Var.Fn_PRODUCT_STATUS).get(row3) ;
sortie_Excel_tmp.PRODUCT_TIER = (String) row3.getClass().getField(Var.Fn_PRODUCT_TIER).get(row3) ;
sortie_Excel_tmp.ACCT_EXCLUS = (String) row3.getClass().getField(Var.Fn_ACCT_EXCLUS).get(row3) ;
sortie_Excel_tmp.SIZE_RATIO_SPLIT = (String) row3.getClass().getField(Var.Fn_SIZE_RATIO_SPLIT).get(row3) ;
sortie_Excel_tmp.REC_SIZE_SPLIT = (String) row3.getClass().getField(Var.Fn_REC_SIZE_SPLIT).get(row3) ;
sortie_Excel_tmp.CARTON_QTY = (String) row3.getClass().getField(Var.Fn_CARTON_QTY).get(row3) ;
sortie_Excel_tmp.ATTRIBUTE = (String) row3.getClass().getField(Var.Fn_ATTRIBUTE).get(row3) ;
sortie_Excel_tmp.UNITS = (String) row3.getClass().getField(Var.Fn_UNITS).get(row3) ;
sortie_Excel_tmp.EUR_RRP = (String) row3.getClass().getField(Var.Fn_EUR_RRP).get(row3) ;
sortie_Excel_tmp.EUR_WSP = (String) row3.getClass().getField(Var.Fn_EUR_WSP).get(row3) ;
sortie_Excel_tmp.GBP_RRP = (String) row3.getClass().getField(Var.Fn_GBP_RRP).get(row3) ;
sortie_Excel_tmp.GBP_WSP = (String) row3.getClass().getField(Var.Fn_GBP_WSP).get(row3) ;
sortie_Excel_tmp.CHF_RRP = (String) row3.getClass().getField(Var.Fn_CHF_RRP).get(row3) ;
sortie_Excel_tmp.CHF_WSP = (String) row3.getClass().getField(Var.Fn_CHF_WSP).get(row3) ;
sortie_Excel_tmp.NOK_RRP = (String) row3.getClass().getField(Var.Fn_NOK_RRP).get(row3) ;
sortie_Excel_tmp.NOK_WSP = (String) row3.getClass().getField(Var.Fn_NOK_WSP).get(row3) ;
sortie_Excel_tmp.DKK_RRP = (String) row3.getClass().getField(Var.Fn_DKK_RRP).get(row3) ;
sortie_Excel_tmp.DKK_WSP = (String) row3.getClass().getField(Var.Fn_DKK_WSP).get(row3) ;
sortie_Excel_tmp.SEK_RRP = (String) row3.getClass().getField(Var.Fn_SEK_RRP).get(row3) ;
sortie_Excel_tmp.SEK_WSP = (String) row3.getClass().getField(Var.Fn_SEK_WSP).get(row3) ;
sortie_Excel_tmp.EUR_FINN_RRP = (String) row3.getClass().getField(Var.Fn_EUR_FINN_RRP).get(row3) ;
sortie_Excel_tmp.EUR_FINN_WSP = (String) row3.getClass().getField(Var.Fn_EUR_FINN_WSP).get(row3) ;
sortie_Excel_tmp.FABRICATION = (String) row3.getClass().getField(Var.Fn_FABRICATION).get(row3) ;
sortie_Excel_tmp.COO = (String) row3.getClass().getField(Var.Fn_COO).get(row3) ;
sortie_Excel_tmp.CUSTOM_TARIFF_CODE = (String) row3.getClass().getField(Var.Fn_CUSTOM_TARIFF_CODE).get(row3) ;
sortie_Excel_tmp.UPC = (String) row3.getClass().getField(Var.Fn_UPC).get(row3) ;
sortie_Excel_tmp.SMU_TYPE = (String) row3.getClass().getField(Var.Fn_SMU_TYPE).get(row3) ;
sortie_Excel_tmp.EAN = (String) row3.getClass().getField(Var.Fn_EAN).get(row3) ;
sortie_Excel = sortie_Excel_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "sortie_Excel"
if(sortie_Excel != null) { 



	
	/**
	 * [tMap_5 main ] start
	 */

	

	
	
	currentComponent="tMap_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_Excel");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_5 = false;
		  boolean mainRowRejected_tMap_5 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
        // ###############################
        // # Output tables

validate_fields = null;


// # Output table : 'validate_fields'
validate_fields_tmp.BRAND = StringHandling.BTRIM(StringHandling.FTRIM(sortie_Excel.BRAND)) ;
validate_fields_tmp.SEASON = StringHandling.BTRIM(StringHandling.FTRIM(sortie_Excel.SEASON)) ;
validate_fields_tmp.CATEGORY = StringHandling.BTRIM(StringHandling.FTRIM(sortie_Excel.CATEGORY )) ;
validate_fields_tmp.REF = StringHandling.BTRIM(StringHandling.FTRIM(sortie_Excel.REF )) ;
validate_fields_tmp.DESCRIPTION = StringHandling.BTRIM(StringHandling.FTRIM(sortie_Excel.DESCRIPTION )) ;
validate_fields_tmp.STYLE = StringHandling.BTRIM(StringHandling.FTRIM(sortie_Excel.STYLE )) ;
validate_fields_tmp.COLOR = StringHandling.BTRIM(StringHandling.FTRIM(sortie_Excel.COLOR )) ;
validate_fields_tmp.FASHION = StringHandling.BTRIM(StringHandling.FTRIM(sortie_Excel.FASHION )) ;
validate_fields_tmp.STYLECOLORLABEL = StringHandling.BTRIM(StringHandling.FTRIM(sortie_Excel.STYLECOLORLABEL )) ;
validate_fields_tmp.COLORNAME = StringHandling.BTRIM(StringHandling.FTRIM(sortie_Excel.COLORNAME )) ;
validate_fields_tmp.LBL = StringHandling.BTRIM(StringHandling.FTRIM(sortie_Excel.LBL )) ;
validate_fields_tmp.STYLE_COLOR = StringHandling.BTRIM(StringHandling.FTRIM(sortie_Excel.STYLE_COLOR  )) ;
validate_fields_tmp.GENDER = StringHandling.BTRIM(StringHandling.FTRIM(sortie_Excel.GENDER )) ;
validate_fields_tmp.AGE_RANGE = StringHandling.BTRIM(StringHandling.FTRIM(sortie_Excel.AGE_RANGE )) ;
validate_fields_tmp.SIZE_RANGE = StringHandling.BTRIM(StringHandling.FTRIM(sortie_Excel.SIZE_RANGE )) ;
validate_fields_tmp.SIZE = StringHandling.BTRIM(StringHandling.FTRIM(sortie_Excel.SIZE )) ;
validate_fields_tmp.US_SIZE = StringHandling.BTRIM(StringHandling.FTRIM(sortie_Excel.US_SIZE  )) ;
validate_fields_tmp.CM_SIZE = StringHandling.BTRIM(StringHandling.FTRIM(sortie_Excel.CM_SIZE )) ;
validate_fields_tmp.PRODUCT = StringHandling.BTRIM(StringHandling.FTRIM(sortie_Excel.PRODUCT )) ;
validate_fields_tmp.PRODUCT_STATUS = StringHandling.BTRIM(StringHandling.FTRIM(sortie_Excel.PRODUCT_STATUS )) ;
validate_fields_tmp.PRODUCT_TIER = StringHandling.BTRIM(StringHandling.FTRIM(sortie_Excel.PRODUCT_TIER)) ;
validate_fields_tmp.ACCT_EXCLUS = StringHandling.BTRIM(StringHandling.FTRIM(sortie_Excel.ACCT_EXCLUS )) ;
validate_fields_tmp.SIZE_RATIO_SPLIT = StringHandling.BTRIM(StringHandling.FTRIM(sortie_Excel.SIZE_RATIO_SPLIT  )) ;
validate_fields_tmp.REC_SIZE_SPLIT = StringHandling.BTRIM(StringHandling.FTRIM(sortie_Excel.REC_SIZE_SPLIT  )) ;
validate_fields_tmp.CARTON_QTY = StringHandling.BTRIM(StringHandling.FTRIM(sortie_Excel.CARTON_QTY  )) ;
validate_fields_tmp.ATTRIBUTE = StringHandling.BTRIM(StringHandling.FTRIM(sortie_Excel.ATTRIBUTE  )) ;
validate_fields_tmp.UNITS = StringHandling.BTRIM(StringHandling.FTRIM(sortie_Excel.UNITS  )) ;
validate_fields_tmp.EUR_RRP = sortie_Excel.EUR_RRP ;
validate_fields_tmp.EUR_WSP = sortie_Excel.EUR_WSP ;
validate_fields_tmp.GBP_RRP = sortie_Excel.GBP_RRP ;
validate_fields_tmp.GBP_WSP = sortie_Excel.GBP_WSP ;
validate_fields_tmp.CHF_RRP = sortie_Excel.CHF_RRP ;
validate_fields_tmp.CHF_WSP = sortie_Excel.CHF_WSP ;
validate_fields_tmp.NOK_RRP = sortie_Excel.NOK_RRP ;
validate_fields_tmp.NOK_WSP = sortie_Excel.NOK_WSP ;
validate_fields_tmp.DKK_RRP = sortie_Excel.DKK_RRP ;
validate_fields_tmp.DKK_WSP = sortie_Excel.DKK_WSP ;
validate_fields_tmp.SEK_RRP = sortie_Excel.SEK_RRP ;
validate_fields_tmp.SEK_WSP = sortie_Excel.SEK_WSP ;
validate_fields_tmp.EUR_FINN_RRP = sortie_Excel.EUR_FINN_RRP ;
validate_fields_tmp.EUR_FINN_WSP = sortie_Excel.EUR_FINN_WSP ;
validate_fields_tmp.FABRICATION = StringHandling.BTRIM(StringHandling.FTRIM(sortie_Excel.FABRICATION )) ;
validate_fields_tmp.COO = StringHandling.BTRIM(StringHandling.FTRIM(sortie_Excel.COO  )) ;
validate_fields_tmp.CUSTOM_TARIFF_CODE = StringHandling.BTRIM(StringHandling.FTRIM(sortie_Excel.CUSTOM_TARIFF_CODE  )) ;
validate_fields_tmp.UPC = StringHandling.BTRIM(StringHandling.FTRIM(sortie_Excel.UPC  )) ;
validate_fields_tmp.SMU_TYPE = StringHandling.BTRIM(StringHandling.FTRIM(sortie_Excel.SMU_TYPE )) ;
validate_fields_tmp.BRAND_NOT_FOUND = StringHandling.TRIM(sortie_Excel.BRAND) == "" || StringHandling.TRIM(sortie_Excel.BRAND) == null ? "ERROR : BLANK FORBIDDEN" : "" ;
validate_fields_tmp.SEASON_NOT_FOUND = StringHandling.TRIM(sortie_Excel.SEASON) == "" || StringHandling.TRIM(sortie_Excel.SEASON) == null ? "ERROR : BLANK FORBIDDEN" : "" ;
validate_fields_tmp.COLOR_NOT_FOUND = StringHandling.TRIM(sortie_Excel.COLOR) == "" || StringHandling.TRIM(sortie_Excel.COLOR) == null ? "ERROR : BLANK FORBIDDEN" : "" ;
validate_fields_tmp.CATEGORY_NOT_FOUND = "";
validate_fields_tmp.REF_NOT_FOUND = StringHandling.TRIM(sortie_Excel.REF) == "" || StringHandling.TRIM(sortie_Excel.REF) == null ? "ERROR : BLANK FORBIDDEN" : "" ;
validate_fields_tmp.DESCRIPTION_NOT_FOUND = StringHandling.TRIM(sortie_Excel.DESCRIPTION) == "" || StringHandling.TRIM(sortie_Excel.DESCRIPTION) == null ? "ERROR : BLANK FORBIDDEN" : "" ;
validate_fields_tmp.STYLE_NOT_FOUND = StringHandling.TRIM(sortie_Excel.STYLE) == "" || StringHandling.TRIM(sortie_Excel.STYLE) == null ? "ERROR : BLANK FORBIDDEN" : "" ;
validate_fields_tmp.COLOR_NAME_NOT_FOUND = StringHandling.TRIM(sortie_Excel.COLORNAME ) == "" || StringHandling.TRIM(sortie_Excel.COLORNAME) == null ? "ERROR : BLANK FORBIDDEN" : "" ;
validate_fields_tmp.LBL_NOT_FOUND = StringHandling.TRIM(sortie_Excel.LBL ) == "" || StringHandling.TRIM(sortie_Excel.LBL) == null ? "ERROR : BLANK FORBIDDEN" : "" ;
validate_fields_tmp.STYLE_COLOR_NOT_FOUND = StringHandling.TRIM(sortie_Excel.STYLE_COLOR ) == "" || StringHandling.TRIM(sortie_Excel.STYLE_COLOR) == null ? "ERROR : BLANK FORBIDDEN" : "" ;
validate_fields_tmp.STYLECOLORLABEL_NOT_FOUND = StringHandling.TRIM(sortie_Excel.STYLECOLORLABEL ) == "" || StringHandling.TRIM(sortie_Excel.STYLECOLORLABEL) == null ? "ERROR : BLANK FORBIDDEN" : "" ;
validate_fields_tmp.GENDER_NOT_FOUND = StringHandling.TRIM(sortie_Excel.GENDER ) == "" || StringHandling.TRIM(sortie_Excel.GENDER) == null ? "ERROR : BLANK FORBIDDEN" : "" ;
validate_fields_tmp.AGE_RANGE_NOT_FOUND = StringHandling.TRIM(sortie_Excel.AGE_RANGE ) == "" || StringHandling.TRIM(sortie_Excel.AGE_RANGE) == null ? "ERROR : BLANK FORBIDDEN" : "" ;
validate_fields_tmp.SIZE_RANGE_NOT_FOUND = StringHandling.TRIM(sortie_Excel.SIZE_RANGE ) == "" || StringHandling.TRIM(sortie_Excel.SIZE_RANGE) == null ? "ERROR : BLANK FORBIDDEN" : "" ;
validate_fields_tmp.SIZE_NOT_FOUND = StringHandling.TRIM(sortie_Excel.SIZE ) == "" || StringHandling.TRIM(sortie_Excel.SIZE) == null ? "ERROR : BLANK FORBIDDEN" : "" ;
validate_fields_tmp.US_SIZE_NOT_FOUND = StringHandling.TRIM(sortie_Excel.US_SIZE ) == "" || StringHandling.TRIM(sortie_Excel.US_SIZE) == null ? "ERROR : BLANK FORBIDDEN" : "" ;
validate_fields_tmp.PRODUCT_NOT_FOUND = StringHandling.TRIM(sortie_Excel.PRODUCT ) == "" || StringHandling.TRIM(sortie_Excel.PRODUCT) == null ? "ERROR : BLANK FORBIDDEN" : "" ;
validate_fields_tmp.FASHION_NOT_FOUND = StringHandling.TRIM(sortie_Excel.FASHION ) == "" || StringHandling.TRIM(sortie_Excel.FASHION) == null ? "ERROR : BLANK FORBIDDEN" : "" ;
validate_fields_tmp.PRODUCT_STATUS_NOT_FOUND = StringHandling.TRIM(sortie_Excel.PRODUCT_STATUS ) == "" || StringHandling.TRIM(sortie_Excel.PRODUCT_STATUS) == null ? "ERROR : BLANK FORBIDDEN" : "" ;
validate_fields_tmp.PRODUCT_TIER_NOT_FOUND = StringHandling.TRIM(sortie_Excel.PRODUCT_TIER ) == "" || StringHandling.TRIM(sortie_Excel.PRODUCT_TIER) == null ? "ERROR : BLANK FORBIDDEN" : "" ;
validate_fields_tmp.SIZE_RATIO_SPLIT_NOT_FOUND = "" ;
validate_fields_tmp.ATTRIBUTE_NOT_FOUND = "" ;
validate_fields_tmp.UNITS_NOT_FOUND = "" ;
validate_fields_tmp.COO_NOT_FOUND = "";
validate_fields_tmp.CM_SIZE_NOT_FOUND = "";
validate_fields = validate_fields_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_5 = false;










 


	tos_count_tMap_5++;

/**
 * [tMap_5 main ] stop
 */
	
	/**
	 * [tMap_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_begin ] stop
 */
// Start of branch "validate_fields"
if(validate_fields != null) { 



	
	/**
	 * [tFilterRow_8 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_8";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"validate_fields");
					}
					

          row32 = null;
    Operator_tFilterRow_8 ope_tFilterRow_8 = new Operator_tFilterRow_8("&&");
            ope_tFilterRow_8.matches((validate_fields.STYLE == null? false : validate_fields.STYLE.compareTo("") != 0)
                           , "STYLE.compareTo(\"\") != 0 failed");
    
    if (ope_tFilterRow_8.getMatchFlag()) {
              if(row32 == null){ 
                row32 = new row32Struct();
              }
               row32.BRAND = validate_fields.BRAND;
               row32.SEASON = validate_fields.SEASON;
               row32.CATEGORY = validate_fields.CATEGORY;
               row32.REF = validate_fields.REF;
               row32.DESCRIPTION = validate_fields.DESCRIPTION;
               row32.STYLE = validate_fields.STYLE;
               row32.COLOR = validate_fields.COLOR;
               row32.FASHION = validate_fields.FASHION;
               row32.STYLECOLORLABEL = validate_fields.STYLECOLORLABEL;
               row32.COLORNAME = validate_fields.COLORNAME;
               row32.LBL = validate_fields.LBL;
               row32.STYLE_COLOR = validate_fields.STYLE_COLOR;
               row32.GENDER = validate_fields.GENDER;
               row32.AGE_RANGE = validate_fields.AGE_RANGE;
               row32.SIZE_RANGE = validate_fields.SIZE_RANGE;
               row32.SIZE = validate_fields.SIZE;
               row32.US_SIZE = validate_fields.US_SIZE;
               row32.CM_SIZE = validate_fields.CM_SIZE;
               row32.PRODUCT = validate_fields.PRODUCT;
               row32.PRODUCT_STATUS = validate_fields.PRODUCT_STATUS;
               row32.PRODUCT_TIER = validate_fields.PRODUCT_TIER;
               row32.ACCT_EXCLUS = validate_fields.ACCT_EXCLUS;
               row32.SIZE_RATIO_SPLIT = validate_fields.SIZE_RATIO_SPLIT;
               row32.REC_SIZE_SPLIT = validate_fields.REC_SIZE_SPLIT;
               row32.CARTON_QTY = validate_fields.CARTON_QTY;
               row32.ATTRIBUTE = validate_fields.ATTRIBUTE;
               row32.UNITS = validate_fields.UNITS;
               row32.EUR_RRP = validate_fields.EUR_RRP;
               row32.EUR_WSP = validate_fields.EUR_WSP;
               row32.GBP_RRP = validate_fields.GBP_RRP;
               row32.GBP_WSP = validate_fields.GBP_WSP;
               row32.CHF_RRP = validate_fields.CHF_RRP;
               row32.CHF_WSP = validate_fields.CHF_WSP;
               row32.NOK_RRP = validate_fields.NOK_RRP;
               row32.NOK_WSP = validate_fields.NOK_WSP;
               row32.DKK_RRP = validate_fields.DKK_RRP;
               row32.DKK_WSP = validate_fields.DKK_WSP;
               row32.SEK_RRP = validate_fields.SEK_RRP;
               row32.SEK_WSP = validate_fields.SEK_WSP;
               row32.EUR_FINN_RRP = validate_fields.EUR_FINN_RRP;
               row32.EUR_FINN_WSP = validate_fields.EUR_FINN_WSP;
               row32.FABRICATION = validate_fields.FABRICATION;
               row32.COO = validate_fields.COO;
               row32.CUSTOM_TARIFF_CODE = validate_fields.CUSTOM_TARIFF_CODE;
               row32.UPC = validate_fields.UPC;
               row32.SMU_TYPE = validate_fields.SMU_TYPE;
               row32.BRAND_NOT_FOUND = validate_fields.BRAND_NOT_FOUND;
               row32.SEASON_NOT_FOUND = validate_fields.SEASON_NOT_FOUND;
               row32.COLOR_NOT_FOUND = validate_fields.COLOR_NOT_FOUND;
               row32.CATEGORY_NOT_FOUND = validate_fields.CATEGORY_NOT_FOUND;
               row32.REF_NOT_FOUND = validate_fields.REF_NOT_FOUND;
               row32.DESCRIPTION_NOT_FOUND = validate_fields.DESCRIPTION_NOT_FOUND;
               row32.STYLE_NOT_FOUND = validate_fields.STYLE_NOT_FOUND;
               row32.COLOR_NAME_NOT_FOUND = validate_fields.COLOR_NAME_NOT_FOUND;
               row32.LBL_NOT_FOUND = validate_fields.LBL_NOT_FOUND;
               row32.STYLE_COLOR_NOT_FOUND = validate_fields.STYLE_COLOR_NOT_FOUND;
               row32.STYLECOLORLABEL_NOT_FOUND = validate_fields.STYLECOLORLABEL_NOT_FOUND;
               row32.GENDER_NOT_FOUND = validate_fields.GENDER_NOT_FOUND;
               row32.AGE_RANGE_NOT_FOUND = validate_fields.AGE_RANGE_NOT_FOUND;
               row32.SIZE_RANGE_NOT_FOUND = validate_fields.SIZE_RANGE_NOT_FOUND;
               row32.SIZE_NOT_FOUND = validate_fields.SIZE_NOT_FOUND;
               row32.US_SIZE_NOT_FOUND = validate_fields.US_SIZE_NOT_FOUND;
               row32.PRODUCT_NOT_FOUND = validate_fields.PRODUCT_NOT_FOUND;
               row32.FASHION_NOT_FOUND = validate_fields.FASHION_NOT_FOUND;
               row32.PRODUCT_STATUS_NOT_FOUND = validate_fields.PRODUCT_STATUS_NOT_FOUND;
               row32.PRODUCT_TIER_NOT_FOUND = validate_fields.PRODUCT_TIER_NOT_FOUND;
               row32.SIZE_RATIO_SPLIT_NOT_FOUND = validate_fields.SIZE_RATIO_SPLIT_NOT_FOUND;
               row32.ATTRIBUTE_NOT_FOUND = validate_fields.ATTRIBUTE_NOT_FOUND;
               row32.UNITS_NOT_FOUND = validate_fields.UNITS_NOT_FOUND;
               row32.COO_NOT_FOUND = validate_fields.COO_NOT_FOUND;
               row32.CM_SIZE_NOT_FOUND = validate_fields.CM_SIZE_NOT_FOUND;    
      nb_line_ok_tFilterRow_8++;
    } else {
      nb_line_reject_tFilterRow_8++;
    }

nb_line_tFilterRow_8++;

 


	tos_count_tFilterRow_8++;

/**
 * [tFilterRow_8 main ] stop
 */
	
	/**
	 * [tFilterRow_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_8";

	

 



/**
 * [tFilterRow_8 process_data_begin ] stop
 */
// Start of branch "row32"
if(row32 != null) { 



	
	/**
	 * [tLogRow_2 main ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row32");
					}
					

 
     row10 = row32;


	tos_count_tLogRow_2++;

/**
 * [tLogRow_2 main ] stop
 */
	
	/**
	 * [tLogRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row10");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "sortie_color_map" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopsortie_color_map = false;
       		  	    	
       		  	    	
 							sortie_color_mapStruct sortie_color_mapObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		sortie_color_mapHashKey.COLORID = StringHandling.DOWNCASE(row10.COLOR ) ;
                        		    		

								
		                        	sortie_color_mapHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_sortie_color_map.lookup( sortie_color_mapHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_sortie_color_map != null && tHash_Lookup_sortie_color_map.getCount(sortie_color_mapHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'sortie_color_map' and it contains more one result from keys :  sortie_color_map.COLORID = '" + sortie_color_mapHashKey.COLORID + "'");
								} // G 071
							

							sortie_color_mapStruct sortie_color_map = null;
                    		  	 
							   
                    		  	 
	       		  	    	sortie_color_mapStruct fromLookup_sortie_color_map = null;
							sortie_color_map = sortie_color_mapDefault;
										 
							
								 
							
							
								if (tHash_Lookup_sortie_color_map !=null && tHash_Lookup_sortie_color_map.hasNext()) { // G 099
								
							
								
								fromLookup_sortie_color_map = tHash_Lookup_sortie_color_map.next();

							
							
								} // G 099
							
							

							if(fromLookup_sortie_color_map != null) {
								sortie_color_map = fromLookup_sortie_color_map;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

sortie = null;


// # Output table : 'sortie'
sortie_tmp.LINE_NUMBER = Numeric.sequence("name", 2, 1) ;
sortie_tmp.DYNAMICS_COLOR = sortie_color_map.COLORID ;
sortie_tmp.BRAND = row10.BRAND ;
sortie_tmp.SEASON = row10.SEASON ;
sortie_tmp.CATEGORY = row10.CATEGORY ;
sortie_tmp.REF = row10.REF ;
sortie_tmp.DESCRIPTION = row10.DESCRIPTION ;
sortie_tmp.STYLE = row10.STYLE ;
sortie_tmp.COLOR = row10.COLOR ;
sortie_tmp.FASHION = row10.FASHION ;
sortie_tmp.STYLECOLORLABEL = row10.STYLECOLORLABEL ;
sortie_tmp.COLORNAME = row10.COLORNAME ;
sortie_tmp.LBL = row10.LBL ;
sortie_tmp.STYLE_COLOR = row10.STYLE_COLOR ;
sortie_tmp.GENDER = row10.GENDER ;
sortie_tmp.AGE_RANGE = row10.AGE_RANGE ;
sortie_tmp.SIZE_RANGE = row10.SIZE_RANGE ;
sortie_tmp.SIZE = row10.SIZE ;
sortie_tmp.US_SIZE = row10.US_SIZE ;
sortie_tmp.CM_SIZE = row10.CM_SIZE ;
sortie_tmp.PRODUCT = row10.PRODUCT ;
sortie_tmp.PRODUCT_STATUS = row10.PRODUCT_STATUS ;
sortie_tmp.PRODUCT_TIER = row10.PRODUCT_TIER ;
sortie_tmp.ACCT_EXCLUS = row10.ACCT_EXCLUS ;
sortie_tmp.SIZE_RATIO_SPLIT = row10.SIZE_RATIO_SPLIT ;
sortie_tmp.REC_SIZE_SPLIT = row10.REC_SIZE_SPLIT ;
sortie_tmp.CARTON_QTY = row10.CARTON_QTY ;
sortie_tmp.ATTRIBUTE = row10.ATTRIBUTE ;
sortie_tmp.UNITS = row10.UNITS ;
sortie_tmp.EUR_RRP = row10.EUR_RRP ;
sortie_tmp.EUR_WSP = row10.EUR_WSP ;
sortie_tmp.GBP_RRP = row10.GBP_RRP ;
sortie_tmp.GBP_WSP = row10.GBP_WSP ;
sortie_tmp.CHF_RRP = row10.CHF_RRP ;
sortie_tmp.CHF_WSP = row10.CHF_WSP ;
sortie_tmp.NOK_RRP = row10.NOK_RRP ;
sortie_tmp.NOK_WSP = row10.NOK_WSP ;
sortie_tmp.DKK_RRP = row10.DKK_RRP ;
sortie_tmp.DKK_WSP = row10.DKK_WSP ;
sortie_tmp.SEK_RRP = row10.SEK_RRP ;
sortie_tmp.SEK_WSP = row10.SEK_WSP ;
sortie_tmp.EUR_FINN_RRP = row10.EUR_FINN_RRP ;
sortie_tmp.EUR_FINN_WSP = row10.EUR_FINN_WSP ;
sortie_tmp.FABRICATION = row10.FABRICATION ;
sortie_tmp.COO = row10.COO ;
sortie_tmp.CUSTOM_TARIFF_CODE = row10.CUSTOM_TARIFF_CODE ;
sortie_tmp.UPC = row10.UPC ;
sortie_tmp.SMU_TYPE = row10.SMU_TYPE ;
sortie_tmp.BRAND_NOT_FOUND = row10.BRAND_NOT_FOUND ;
sortie_tmp.SEASON_NOT_FOUND = row10.SEASON_NOT_FOUND ;
sortie_tmp.COLOR_NOT_FOUND = row10.COLOR_NOT_FOUND == "ERROR : BLANK FORBIDDEN" ? "ERROR : BLANK FORBIDDEN" : ( sortie_color_map.COLORID != null ? "" : "ERROR : " + row10.COLOR ) ;
sortie_tmp.CATEGORY_NOT_FOUND = row10.CATEGORY_NOT_FOUND ;
sortie_tmp.REF_NOT_FOUND = row10.REF_NOT_FOUND ;
sortie_tmp.DESCRIPTION_NOT_FOUND = row10.DESCRIPTION_NOT_FOUND ;
sortie_tmp.STYLE_NOT_FOUND = row10.STYLE_NOT_FOUND ;
sortie_tmp.COLOR_NAME_NOT_FOUND = row10.COLOR_NAME_NOT_FOUND ;
sortie_tmp.LBL_NOT_FOUND = row10.LBL_NOT_FOUND ;
sortie_tmp.STYLE_COLOR_NOT_FOUND = row10.STYLE_COLOR_NOT_FOUND ;
sortie_tmp.STYLECOLORLABEL_NOT_FOUND = row10.STYLECOLORLABEL_NOT_FOUND ;
sortie_tmp.GENDER_NOT_FOUND = row10.GENDER_NOT_FOUND ;
sortie_tmp.AGE_RANGE_NOT_FOUND = row10.AGE_RANGE_NOT_FOUND ;
sortie_tmp.SIZE_RANGE_NOT_FOUND = row10.SIZE_RANGE_NOT_FOUND ;
sortie_tmp.SIZE_NOT_FOUND = row10.SIZE_NOT_FOUND ;
sortie_tmp.US_SIZE_NOT_FOUND = row10.US_SIZE_NOT_FOUND ;
sortie_tmp.PRODUCT_NOT_FOUND = row10.PRODUCT_NOT_FOUND ;
sortie_tmp.FASHION_NOT_FOUND = row10.FASHION_NOT_FOUND ;
sortie_tmp.PRODUCT_STATUS_NOT_FOUND = row10.PRODUCT_STATUS_NOT_FOUND ;
sortie_tmp.PRODUCT_TIER_NOT_FOUND = row10.PRODUCT_TIER_NOT_FOUND ;
sortie_tmp.SIZE_RATIO_SPLIT_NOT_FOUND = row10.SIZE_RATIO_SPLIT_NOT_FOUND ;
sortie_tmp.ATTRIBUTE_NOT_FOUND = row10.ATTRIBUTE_NOT_FOUND ;
sortie_tmp.UNITS_NOT_FOUND = row10.UNITS_NOT_FOUND ;
sortie_tmp.COO_NOT_FOUND = row10.COO_NOT_FOUND ;
sortie_tmp.CM_SIZE_NOT_FOUND = row10.CM_SIZE_NOT_FOUND ;
sortie = sortie_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "sortie"
if(sortie != null) { 



	
	/**
	 * [tLogRow_4 main ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie");
					}
					
///////////////////////		
						

				
				String[] row_tLogRow_4 = new String[73];
   				
	    		if(sortie.LINE_NUMBER != null) { //              
                 row_tLogRow_4[0]=    						    
				                String.valueOf(sortie.LINE_NUMBER)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie.DYNAMICS_COLOR != null) { //              
                 row_tLogRow_4[1]=    						    
				                String.valueOf(sortie.DYNAMICS_COLOR)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie.BRAND != null) { //              
                 row_tLogRow_4[2]=    						    
				                String.valueOf(sortie.BRAND)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie.SEASON != null) { //              
                 row_tLogRow_4[3]=    						    
				                String.valueOf(sortie.SEASON)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie.CATEGORY != null) { //              
                 row_tLogRow_4[4]=    						    
				                String.valueOf(sortie.CATEGORY)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie.REF != null) { //              
                 row_tLogRow_4[5]=    						    
				                String.valueOf(sortie.REF)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie.DESCRIPTION != null) { //              
                 row_tLogRow_4[6]=    						    
				                String.valueOf(sortie.DESCRIPTION)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie.STYLE != null) { //              
                 row_tLogRow_4[7]=    						    
				                String.valueOf(sortie.STYLE)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie.COLOR != null) { //              
                 row_tLogRow_4[8]=    						    
				                String.valueOf(sortie.COLOR)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie.FASHION != null) { //              
                 row_tLogRow_4[9]=    						    
				                String.valueOf(sortie.FASHION)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie.STYLECOLORLABEL != null) { //              
                 row_tLogRow_4[10]=    						    
				                String.valueOf(sortie.STYLECOLORLABEL)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie.COLORNAME != null) { //              
                 row_tLogRow_4[11]=    						    
				                String.valueOf(sortie.COLORNAME)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie.LBL != null) { //              
                 row_tLogRow_4[12]=    						    
				                String.valueOf(sortie.LBL)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie.STYLE_COLOR != null) { //              
                 row_tLogRow_4[13]=    						    
				                String.valueOf(sortie.STYLE_COLOR)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie.GENDER != null) { //              
                 row_tLogRow_4[14]=    						    
				                String.valueOf(sortie.GENDER)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie.AGE_RANGE != null) { //              
                 row_tLogRow_4[15]=    						    
				                String.valueOf(sortie.AGE_RANGE)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie.SIZE_RANGE != null) { //              
                 row_tLogRow_4[16]=    						    
				                String.valueOf(sortie.SIZE_RANGE)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie.SIZE != null) { //              
                 row_tLogRow_4[17]=    						    
				                String.valueOf(sortie.SIZE)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie.US_SIZE != null) { //              
                 row_tLogRow_4[18]=    						    
				                String.valueOf(sortie.US_SIZE)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie.CM_SIZE != null) { //              
                 row_tLogRow_4[19]=    						    
				                String.valueOf(sortie.CM_SIZE)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie.PRODUCT != null) { //              
                 row_tLogRow_4[20]=    						    
				                String.valueOf(sortie.PRODUCT)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie.PRODUCT_STATUS != null) { //              
                 row_tLogRow_4[21]=    						    
				                String.valueOf(sortie.PRODUCT_STATUS)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie.PRODUCT_TIER != null) { //              
                 row_tLogRow_4[22]=    						    
				                String.valueOf(sortie.PRODUCT_TIER)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie.ACCT_EXCLUS != null) { //              
                 row_tLogRow_4[23]=    						    
				                String.valueOf(sortie.ACCT_EXCLUS)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie.SIZE_RATIO_SPLIT != null) { //              
                 row_tLogRow_4[24]=    						    
				                String.valueOf(sortie.SIZE_RATIO_SPLIT)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie.REC_SIZE_SPLIT != null) { //              
                 row_tLogRow_4[25]=    						    
				                String.valueOf(sortie.REC_SIZE_SPLIT)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie.CARTON_QTY != null) { //              
                 row_tLogRow_4[26]=    						    
				                String.valueOf(sortie.CARTON_QTY)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie.ATTRIBUTE != null) { //              
                 row_tLogRow_4[27]=    						    
				                String.valueOf(sortie.ATTRIBUTE)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie.UNITS != null) { //              
                 row_tLogRow_4[28]=    						    
				                String.valueOf(sortie.UNITS)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie.EUR_RRP != null) { //              
                 row_tLogRow_4[29]=    						    
				                String.valueOf(sortie.EUR_RRP)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie.EUR_WSP != null) { //              
                 row_tLogRow_4[30]=    						    
				                String.valueOf(sortie.EUR_WSP)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie.GBP_RRP != null) { //              
                 row_tLogRow_4[31]=    						    
				                String.valueOf(sortie.GBP_RRP)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie.GBP_WSP != null) { //              
                 row_tLogRow_4[32]=    						    
				                String.valueOf(sortie.GBP_WSP)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie.CHF_RRP != null) { //              
                 row_tLogRow_4[33]=    						    
				                String.valueOf(sortie.CHF_RRP)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie.CHF_WSP != null) { //              
                 row_tLogRow_4[34]=    						    
				                String.valueOf(sortie.CHF_WSP)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie.NOK_RRP != null) { //              
                 row_tLogRow_4[35]=    						    
				                String.valueOf(sortie.NOK_RRP)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie.NOK_WSP != null) { //              
                 row_tLogRow_4[36]=    						    
				                String.valueOf(sortie.NOK_WSP)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie.DKK_RRP != null) { //              
                 row_tLogRow_4[37]=    						    
				                String.valueOf(sortie.DKK_RRP)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie.DKK_WSP != null) { //              
                 row_tLogRow_4[38]=    						    
				                String.valueOf(sortie.DKK_WSP)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie.SEK_RRP != null) { //              
                 row_tLogRow_4[39]=    						    
				                String.valueOf(sortie.SEK_RRP)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie.SEK_WSP != null) { //              
                 row_tLogRow_4[40]=    						    
				                String.valueOf(sortie.SEK_WSP)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie.EUR_FINN_RRP != null) { //              
                 row_tLogRow_4[41]=    						    
				                String.valueOf(sortie.EUR_FINN_RRP)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie.EUR_FINN_WSP != null) { //              
                 row_tLogRow_4[42]=    						    
				                String.valueOf(sortie.EUR_FINN_WSP)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie.FABRICATION != null) { //              
                 row_tLogRow_4[43]=    						    
				                String.valueOf(sortie.FABRICATION)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie.COO != null) { //              
                 row_tLogRow_4[44]=    						    
				                String.valueOf(sortie.COO)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie.CUSTOM_TARIFF_CODE != null) { //              
                 row_tLogRow_4[45]=    						    
				                String.valueOf(sortie.CUSTOM_TARIFF_CODE)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie.UPC != null) { //              
                 row_tLogRow_4[46]=    						    
				                String.valueOf(sortie.UPC)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie.SMU_TYPE != null) { //              
                 row_tLogRow_4[47]=    						    
				                String.valueOf(sortie.SMU_TYPE)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie.BRAND_NOT_FOUND != null) { //              
                 row_tLogRow_4[48]=    						    
				                String.valueOf(sortie.BRAND_NOT_FOUND)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie.SEASON_NOT_FOUND != null) { //              
                 row_tLogRow_4[49]=    						    
				                String.valueOf(sortie.SEASON_NOT_FOUND)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie.COLOR_NOT_FOUND != null) { //              
                 row_tLogRow_4[50]=    						    
				                String.valueOf(sortie.COLOR_NOT_FOUND)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie.CATEGORY_NOT_FOUND != null) { //              
                 row_tLogRow_4[51]=    						    
				                String.valueOf(sortie.CATEGORY_NOT_FOUND)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie.REF_NOT_FOUND != null) { //              
                 row_tLogRow_4[52]=    						    
				                String.valueOf(sortie.REF_NOT_FOUND)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie.DESCRIPTION_NOT_FOUND != null) { //              
                 row_tLogRow_4[53]=    						    
				                String.valueOf(sortie.DESCRIPTION_NOT_FOUND)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie.STYLE_NOT_FOUND != null) { //              
                 row_tLogRow_4[54]=    						    
				                String.valueOf(sortie.STYLE_NOT_FOUND)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie.COLOR_NAME_NOT_FOUND != null) { //              
                 row_tLogRow_4[55]=    						    
				                String.valueOf(sortie.COLOR_NAME_NOT_FOUND)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie.LBL_NOT_FOUND != null) { //              
                 row_tLogRow_4[56]=    						    
				                String.valueOf(sortie.LBL_NOT_FOUND)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie.STYLE_COLOR_NOT_FOUND != null) { //              
                 row_tLogRow_4[57]=    						    
				                String.valueOf(sortie.STYLE_COLOR_NOT_FOUND)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie.STYLECOLORLABEL_NOT_FOUND != null) { //              
                 row_tLogRow_4[58]=    						    
				                String.valueOf(sortie.STYLECOLORLABEL_NOT_FOUND)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie.GENDER_NOT_FOUND != null) { //              
                 row_tLogRow_4[59]=    						    
				                String.valueOf(sortie.GENDER_NOT_FOUND)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie.AGE_RANGE_NOT_FOUND != null) { //              
                 row_tLogRow_4[60]=    						    
				                String.valueOf(sortie.AGE_RANGE_NOT_FOUND)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie.SIZE_RANGE_NOT_FOUND != null) { //              
                 row_tLogRow_4[61]=    						    
				                String.valueOf(sortie.SIZE_RANGE_NOT_FOUND)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie.SIZE_NOT_FOUND != null) { //              
                 row_tLogRow_4[62]=    						    
				                String.valueOf(sortie.SIZE_NOT_FOUND)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie.US_SIZE_NOT_FOUND != null) { //              
                 row_tLogRow_4[63]=    						    
				                String.valueOf(sortie.US_SIZE_NOT_FOUND)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie.PRODUCT_NOT_FOUND != null) { //              
                 row_tLogRow_4[64]=    						    
				                String.valueOf(sortie.PRODUCT_NOT_FOUND)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie.FASHION_NOT_FOUND != null) { //              
                 row_tLogRow_4[65]=    						    
				                String.valueOf(sortie.FASHION_NOT_FOUND)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie.PRODUCT_STATUS_NOT_FOUND != null) { //              
                 row_tLogRow_4[66]=    						    
				                String.valueOf(sortie.PRODUCT_STATUS_NOT_FOUND)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie.PRODUCT_TIER_NOT_FOUND != null) { //              
                 row_tLogRow_4[67]=    						    
				                String.valueOf(sortie.PRODUCT_TIER_NOT_FOUND)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie.SIZE_RATIO_SPLIT_NOT_FOUND != null) { //              
                 row_tLogRow_4[68]=    						    
				                String.valueOf(sortie.SIZE_RATIO_SPLIT_NOT_FOUND)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie.ATTRIBUTE_NOT_FOUND != null) { //              
                 row_tLogRow_4[69]=    						    
				                String.valueOf(sortie.ATTRIBUTE_NOT_FOUND)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie.UNITS_NOT_FOUND != null) { //              
                 row_tLogRow_4[70]=    						    
				                String.valueOf(sortie.UNITS_NOT_FOUND)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie.COO_NOT_FOUND != null) { //              
                 row_tLogRow_4[71]=    						    
				                String.valueOf(sortie.COO_NOT_FOUND)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie.CM_SIZE_NOT_FOUND != null) { //              
                 row_tLogRow_4[72]=    						    
				                String.valueOf(sortie.CM_SIZE_NOT_FOUND)			
					          ;	
							
	    		} //			
    			 

				util_tLogRow_4.addRow(row_tLogRow_4);	
				nb_line_tLogRow_4++;
//////

//////                    
                    
///////////////////////    			

 
     row12 = sortie;


	tos_count_tLogRow_4++;

/**
 * [tLogRow_4 main ] stop
 */
	
	/**
	 * [tLogRow_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	

 



/**
 * [tLogRow_4 process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row12");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_3 = false;
		  boolean mainRowRejected_tMap_3 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "sortie_brand_map" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopsortie_brand_map = false;
       		  	    	
       		  	    	
 							sortie_brand_mapStruct sortie_brand_mapObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_3) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_3 = false;
								
                        		    		sortie_brand_mapHashKey.BRANDID = StringHandling.DOWNCASE(row12.BRAND ) ;
                        		    		

								
		                        	sortie_brand_mapHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_sortie_brand_map.lookup( sortie_brand_mapHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_sortie_brand_map != null && tHash_Lookup_sortie_brand_map.getCount(sortie_brand_mapHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'sortie_brand_map' and it contains more one result from keys :  sortie_brand_map.BRANDID = '" + sortie_brand_mapHashKey.BRANDID + "'");
								} // G 071
							

							sortie_brand_mapStruct sortie_brand_map = null;
                    		  	 
							   
                    		  	 
	       		  	    	sortie_brand_mapStruct fromLookup_sortie_brand_map = null;
							sortie_brand_map = sortie_brand_mapDefault;
										 
							
								 
							
							
								if (tHash_Lookup_sortie_brand_map !=null && tHash_Lookup_sortie_brand_map.hasNext()) { // G 099
								
							
								
								fromLookup_sortie_brand_map = tHash_Lookup_sortie_brand_map.next();

							
							
								} // G 099
							
							

							if(fromLookup_sortie_brand_map != null) {
								sortie_brand_map = fromLookup_sortie_brand_map;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

sortie_Brand = null;


// # Output table : 'sortie_Brand'
sortie_Brand_tmp.LINE_NUMBER = row12.LINE_NUMBER ;
sortie_Brand_tmp.DYNAMICS_COLOR = row12.DYNAMICS_COLOR  ;
sortie_Brand_tmp.DYNAMICS_BRAND = sortie_brand_map.BRANDID ;
sortie_Brand_tmp.BRAND = row12.BRAND ;
sortie_Brand_tmp.SEASON = row12.SEASON ;
sortie_Brand_tmp.CATEGORY = row12.CATEGORY ;
sortie_Brand_tmp.REF = row12.REF ;
sortie_Brand_tmp.DESCRIPTION = row12.DESCRIPTION ;
sortie_Brand_tmp.STYLE = row12.STYLE ;
sortie_Brand_tmp.COLOR = row12.COLOR ;
sortie_Brand_tmp.FASHION = row12.FASHION ;
sortie_Brand_tmp.STYLECOLORLABEL = row12.STYLECOLORLABEL ;
sortie_Brand_tmp.COLORNAME = row12.COLORNAME ;
sortie_Brand_tmp.LBL = row12.LBL ;
sortie_Brand_tmp.STYLE_COLOR = row12.STYLE_COLOR ;
sortie_Brand_tmp.GENDER = row12.GENDER ;
sortie_Brand_tmp.AGE_RANGE = row12.AGE_RANGE ;
sortie_Brand_tmp.SIZE_RANGE = row12.SIZE_RANGE ;
sortie_Brand_tmp.SIZE = row12.SIZE ;
sortie_Brand_tmp.US_SIZE = row12.US_SIZE ;
sortie_Brand_tmp.CM_SIZE = row12.CM_SIZE ;
sortie_Brand_tmp.PRODUCT = row12.PRODUCT ;
sortie_Brand_tmp.PRODUCT_STATUS = row12.PRODUCT_STATUS ;
sortie_Brand_tmp.PRODUCT_TIER = row12.PRODUCT_TIER ;
sortie_Brand_tmp.ACCT_EXCLUS = row12.ACCT_EXCLUS ;
sortie_Brand_tmp.SIZE_RATIO_SPLIT = row12.SIZE_RATIO_SPLIT ;
sortie_Brand_tmp.REC_SIZE_SPLIT = row12.REC_SIZE_SPLIT ;
sortie_Brand_tmp.CARTON_QTY = row12.CARTON_QTY ;
sortie_Brand_tmp.ATTRIBUTE = row12.ATTRIBUTE ;
sortie_Brand_tmp.UNITS = row12.UNITS ;
sortie_Brand_tmp.EUR_RRP = row12.EUR_RRP ;
sortie_Brand_tmp.EUR_WSP = row12.EUR_WSP ;
sortie_Brand_tmp.GBP_RRP = row12.GBP_RRP ;
sortie_Brand_tmp.GBP_WSP = row12.GBP_WSP ;
sortie_Brand_tmp.CHF_RRP = row12.CHF_RRP ;
sortie_Brand_tmp.CHF_WSP = row12.CHF_WSP ;
sortie_Brand_tmp.NOK_RRP = row12.NOK_RRP ;
sortie_Brand_tmp.NOK_WSP = row12.NOK_WSP ;
sortie_Brand_tmp.DKK_RRP = row12.DKK_RRP ;
sortie_Brand_tmp.DKK_WSP = row12.DKK_WSP ;
sortie_Brand_tmp.SEK_RRP = row12.SEK_RRP ;
sortie_Brand_tmp.SEK_WSP = row12.SEK_WSP ;
sortie_Brand_tmp.EUR_FINN_RRP = row12.EUR_FINN_RRP ;
sortie_Brand_tmp.EUR_FINN_WSP = row12.EUR_FINN_WSP ;
sortie_Brand_tmp.FABRICATION = row12.FABRICATION ;
sortie_Brand_tmp.COO = row12.COO ;
sortie_Brand_tmp.CUSTOM_TARIFF_CODE = row12.CUSTOM_TARIFF_CODE ;
sortie_Brand_tmp.UPC = row12.UPC ;
sortie_Brand_tmp.SMU_TYPE = row12.SMU_TYPE ;
sortie_Brand_tmp.BRAND_NOT_FOUND = row12.BRAND_NOT_FOUND == "ERROR : BLANK FORBIDDEN" ? "ERROR : BLANK FORBIDDEN" : ( sortie_brand_map.BRANDID != null ? "" : "ERROR : " + row12.BRAND ) ;
sortie_Brand_tmp.SEASON_NOT_FOUND = row12.SEASON_NOT_FOUND ;
sortie_Brand_tmp.COLOR_NOT_FOUND = row12.COLOR_NOT_FOUND ;
sortie_Brand_tmp.CATEGORY_NOT_FOUND = row12.CATEGORY_NOT_FOUND ;
sortie_Brand_tmp.REF_NOT_FOUND = row12.REF_NOT_FOUND ;
sortie_Brand_tmp.DESCRIPTION_NOT_FOUND = row12.DESCRIPTION_NOT_FOUND ;
sortie_Brand_tmp.STYLE_NOT_FOUND = row12.STYLE_NOT_FOUND ;
sortie_Brand_tmp.COLOR_NAME_NOT_FOUND = row12.COLOR_NAME_NOT_FOUND ;
sortie_Brand_tmp.LBL_NOT_FOUND = row12.LBL_NOT_FOUND ;
sortie_Brand_tmp.STYLE_COLOR_NOT_FOUND = row12.STYLE_COLOR_NOT_FOUND ;
sortie_Brand_tmp.STYLECOLORLABEL_NOT_FOUND = row12.STYLECOLORLABEL_NOT_FOUND ;
sortie_Brand_tmp.GENDER_NOT_FOUND = row12.GENDER_NOT_FOUND ;
sortie_Brand_tmp.AGE_RANGE_NOT_FOUND = row12.AGE_RANGE_NOT_FOUND ;
sortie_Brand_tmp.SIZE_RANGE_NOT_FOUND = row12.SIZE_RANGE_NOT_FOUND ;
sortie_Brand_tmp.SIZE_NOT_FOUND = row12.SIZE_NOT_FOUND ;
sortie_Brand_tmp.US_SIZE_NOT_FOUND = row12.US_SIZE_NOT_FOUND ;
sortie_Brand_tmp.PRODUCT_NOT_FOUND = row12.PRODUCT_NOT_FOUND ;
sortie_Brand_tmp.FASHION_NOT_FOUND = row12.FASHION_NOT_FOUND ;
sortie_Brand_tmp.PRODUCT_STATUS_NOT_FOUND = row12.PRODUCT_STATUS_NOT_FOUND ;
sortie_Brand_tmp.PRODUCT_TIER_NOT_FOUND = row12.PRODUCT_TIER_NOT_FOUND ;
sortie_Brand_tmp.SIZE_RATIO_SPLIT_NOT_FOUND = row12.SIZE_RATIO_SPLIT_NOT_FOUND ;
sortie_Brand_tmp.ATTRIBUTE_NOT_FOUND = row12.ATTRIBUTE_NOT_FOUND ;
sortie_Brand_tmp.UNITS_NOT_FOUND = row12.UNITS_NOT_FOUND ;
sortie_Brand_tmp.COO_NOT_FOUND = row12.COO_NOT_FOUND ;
sortie_Brand_tmp.CM_SIZE_NOT_FOUND = row12.CM_SIZE_NOT_FOUND ;
sortie_Brand = sortie_Brand_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "sortie_Brand"
if(sortie_Brand != null) { 



	
	/**
	 * [tMap_6 main ] start
	 */

	

	
	
	currentComponent="tMap_6";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_Brand");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_6 = false;
		  boolean mainRowRejected_tMap_6 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "sortie_season_map" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopsortie_season_map = false;
       		  	    	
       		  	    	
 							sortie_season_mapStruct sortie_season_mapObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_6) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_6 = false;
								
                        		    		sortie_season_mapHashKey.SEASONCODE = StringHandling.DOWNCASE(sortie_Brand.SEASON ) ;
                        		    		

								
		                        	sortie_season_mapHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_sortie_season_map.lookup( sortie_season_mapHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_sortie_season_map != null && tHash_Lookup_sortie_season_map.getCount(sortie_season_mapHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'sortie_season_map' and it contains more one result from keys :  sortie_season_map.SEASONCODE = '" + sortie_season_mapHashKey.SEASONCODE + "'");
								} // G 071
							

							sortie_season_mapStruct sortie_season_map = null;
                    		  	 
							   
                    		  	 
	       		  	    	sortie_season_mapStruct fromLookup_sortie_season_map = null;
							sortie_season_map = sortie_season_mapDefault;
										 
							
								 
							
							
								if (tHash_Lookup_sortie_season_map !=null && tHash_Lookup_sortie_season_map.hasNext()) { // G 099
								
							
								
								fromLookup_sortie_season_map = tHash_Lookup_sortie_season_map.next();

							
							
								} // G 099
							
							

							if(fromLookup_sortie_season_map != null) {
								sortie_season_map = fromLookup_sortie_season_map;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
        // ###############################
        // # Output tables

sortie_season = null;


// # Output table : 'sortie_season'
sortie_season_tmp.LINE_NUMBER = sortie_Brand.LINE_NUMBER ;
sortie_season_tmp.DYNAMICS_COLOR = sortie_Brand.DYNAMICS_COLOR ;
sortie_season_tmp.DYNAMICS_BRAND = sortie_Brand.DYNAMICS_BRAND ;
sortie_season_tmp.BRAND = sortie_Brand.BRAND ;
sortie_season_tmp.SEASON = sortie_Brand.SEASON ;
sortie_season_tmp.CATEGORY = sortie_Brand.CATEGORY ;
sortie_season_tmp.REF = sortie_Brand.REF ;
sortie_season_tmp.DESCRIPTION = sortie_Brand.DESCRIPTION ;
sortie_season_tmp.STYLE = sortie_Brand.STYLE ;
sortie_season_tmp.COLOR = sortie_Brand.COLOR ;
sortie_season_tmp.FASHION = sortie_Brand.FASHION ;
sortie_season_tmp.STYLECOLORLABEL = sortie_Brand.STYLECOLORLABEL ;
sortie_season_tmp.COLORNAME = sortie_Brand.COLORNAME ;
sortie_season_tmp.LBL = sortie_Brand.LBL ;
sortie_season_tmp.STYLE_COLOR = sortie_Brand.STYLE_COLOR ;
sortie_season_tmp.GENDER = sortie_Brand.GENDER ;
sortie_season_tmp.AGE_RANGE = sortie_Brand.AGE_RANGE ;
sortie_season_tmp.SIZE_RANGE = sortie_Brand.SIZE_RANGE ;
sortie_season_tmp.SIZE = sortie_Brand.SIZE ;
sortie_season_tmp.US_SIZE = sortie_Brand.US_SIZE ;
sortie_season_tmp.CM_SIZE = sortie_Brand.CM_SIZE ;
sortie_season_tmp.PRODUCT = sortie_Brand.PRODUCT ;
sortie_season_tmp.PRODUCT_STATUS = sortie_Brand.PRODUCT_STATUS ;
sortie_season_tmp.PRODUCT_TIER = sortie_Brand.PRODUCT_TIER ;
sortie_season_tmp.ACCT_EXCLUS = sortie_Brand.ACCT_EXCLUS ;
sortie_season_tmp.SIZE_RATIO_SPLIT = sortie_Brand.SIZE_RATIO_SPLIT ;
sortie_season_tmp.REC_SIZE_SPLIT = sortie_Brand.REC_SIZE_SPLIT ;
sortie_season_tmp.CARTON_QTY = sortie_Brand.CARTON_QTY ;
sortie_season_tmp.ATTRIBUTE = sortie_Brand.ATTRIBUTE ;
sortie_season_tmp.UNITS = sortie_Brand.UNITS ;
sortie_season_tmp.EUR_RRP = sortie_Brand.EUR_RRP ;
sortie_season_tmp.EUR_WSP = sortie_Brand.EUR_WSP ;
sortie_season_tmp.GBP_RRP = sortie_Brand.GBP_RRP ;
sortie_season_tmp.GBP_WSP = sortie_Brand.GBP_WSP ;
sortie_season_tmp.CHF_RRP = sortie_Brand.CHF_RRP ;
sortie_season_tmp.CHF_WSP = sortie_Brand.CHF_WSP ;
sortie_season_tmp.NOK_RRP = sortie_Brand.NOK_RRP ;
sortie_season_tmp.NOK_WSP = sortie_Brand.NOK_WSP ;
sortie_season_tmp.DKK_RRP = sortie_Brand.DKK_RRP ;
sortie_season_tmp.DKK_WSP = sortie_Brand.DKK_WSP ;
sortie_season_tmp.SEK_RRP = sortie_Brand.SEK_RRP ;
sortie_season_tmp.SEK_WSP = sortie_Brand.SEK_WSP ;
sortie_season_tmp.EUR_FINN_RRP = sortie_Brand.EUR_FINN_RRP ;
sortie_season_tmp.EUR_FINN_WSP = sortie_Brand.EUR_FINN_WSP ;
sortie_season_tmp.FABRICATION = sortie_Brand.FABRICATION ;
sortie_season_tmp.COO = sortie_Brand.COO ;
sortie_season_tmp.CUSTOM_TARIFF_CODE = sortie_Brand.CUSTOM_TARIFF_CODE ;
sortie_season_tmp.UPC = sortie_Brand.UPC ;
sortie_season_tmp.SMU_TYPE = sortie_Brand.SMU_TYPE ;
sortie_season_tmp.BRAND_NOT_FOUND = sortie_Brand.BRAND_NOT_FOUND ;
sortie_season_tmp.SEASON_NOT_FOUND = sortie_Brand.SEASON_NOT_FOUND == "ERROR : BLANK FORBIDDEN" ? "ERROR : BLANK FORBIDDEN" : ( sortie_season_map.SEASONCODE  != null ? "" : "ERROR : " + sortie_Brand.SEASON ) ;
sortie_season_tmp.COLOR_NOT_FOUND = sortie_Brand.COLOR_NOT_FOUND ;
sortie_season_tmp.CATEGORY_NOT_FOUND = sortie_Brand.CATEGORY_NOT_FOUND ;
sortie_season_tmp.REF_NOT_FOUND = sortie_Brand.REF_NOT_FOUND ;
sortie_season_tmp.DESCRIPTION_NOT_FOUND = sortie_Brand.DESCRIPTION_NOT_FOUND ;
sortie_season_tmp.STYLE_NOT_FOUND = sortie_Brand.STYLE_NOT_FOUND ;
sortie_season_tmp.COLOR_NAME_NOT_FOUND = sortie_Brand.COLOR_NAME_NOT_FOUND ;
sortie_season_tmp.LBL_NOT_FOUND = sortie_Brand.LBL_NOT_FOUND ;
sortie_season_tmp.STYLE_COLOR_NOT_FOUND = sortie_Brand.STYLE_COLOR_NOT_FOUND ;
sortie_season_tmp.STYLECOLORLABEL_NOT_FOUND = sortie_Brand.STYLECOLORLABEL_NOT_FOUND ;
sortie_season_tmp.GENDER_NOT_FOUND = sortie_Brand.GENDER_NOT_FOUND ;
sortie_season_tmp.AGE_RANGE_NOT_FOUND = sortie_Brand.AGE_RANGE_NOT_FOUND ;
sortie_season_tmp.SIZE_RANGE_NOT_FOUND = sortie_Brand.SIZE_RANGE_NOT_FOUND ;
sortie_season_tmp.SIZE_NOT_FOUND = sortie_Brand.SIZE_NOT_FOUND ;
sortie_season_tmp.US_SIZE_NOT_FOUND = sortie_Brand.US_SIZE_NOT_FOUND ;
sortie_season_tmp.PRODUCT_NOT_FOUND = sortie_Brand.PRODUCT_NOT_FOUND ;
sortie_season_tmp.FASHION_NOT_FOUND = sortie_Brand.FASHION_NOT_FOUND ;
sortie_season_tmp.PRODUCT_STATUS_NOT_FOUND = sortie_Brand.PRODUCT_STATUS_NOT_FOUND ;
sortie_season_tmp.PRODUCT_TIER_NOT_FOUND = sortie_Brand.PRODUCT_TIER_NOT_FOUND ;
sortie_season_tmp.SIZE_RATIO_SPLIT_NOT_FOUND = sortie_Brand.SIZE_RATIO_SPLIT_NOT_FOUND ;
sortie_season_tmp.ATTRIBUTE_NOT_FOUND = sortie_Brand.ATTRIBUTE_NOT_FOUND ;
sortie_season_tmp.UNITS_NOT_FOUND = sortie_Brand.UNITS_NOT_FOUND ;
sortie_season_tmp.COO_NOT_FOUND = sortie_Brand.COO_NOT_FOUND ;
sortie_season_tmp.CM_SIZE_NOT_FOUND = sortie_Brand.CM_SIZE_NOT_FOUND ;
sortie_season = sortie_season_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_6 = false;










 


	tos_count_tMap_6++;

/**
 * [tMap_6 main ] stop
 */
	
	/**
	 * [tMap_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 process_data_begin ] stop
 */
// Start of branch "sortie_season"
if(sortie_season != null) { 



	
	/**
	 * [tMap_7 main ] start
	 */

	

	
	
	currentComponent="tMap_7";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_season");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_7 = false;
		  boolean mainRowRejected_tMap_7 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_7__Struct Var = Var__tMap_7;// ###############################
        // ###############################
        // # Output tables

sortie_category = null;


// # Output table : 'sortie_category'
sortie_category_tmp.LINE_NUMBER = sortie_season.LINE_NUMBER ;
sortie_category_tmp.DYNAMICS_COLOR = sortie_season.DYNAMICS_COLOR ;
sortie_category_tmp.DYNAMICS_BRAND = sortie_season.DYNAMICS_BRAND ;
sortie_category_tmp.BRAND = sortie_season.BRAND ;
sortie_category_tmp.SEASON = sortie_season.SEASON ;
sortie_category_tmp.CATEGORY = sortie_season.CATEGORY ;
sortie_category_tmp.REF = sortie_season.REF ;
sortie_category_tmp.DESCRIPTION = sortie_season.DESCRIPTION ;
sortie_category_tmp.STYLE = sortie_season.STYLE ;
sortie_category_tmp.COLOR = sortie_season.COLOR ;
sortie_category_tmp.FASHION = sortie_season.FASHION ;
sortie_category_tmp.STYLECOLORLABEL = sortie_season.STYLECOLORLABEL ;
sortie_category_tmp.COLORNAME = sortie_season.COLORNAME ;
sortie_category_tmp.LBL = sortie_season.LBL ;
sortie_category_tmp.STYLE_COLOR = sortie_season.STYLE_COLOR ;
sortie_category_tmp.GENDER = sortie_season.GENDER ;
sortie_category_tmp.AGE_RANGE = sortie_season.AGE_RANGE ;
sortie_category_tmp.SIZE_RANGE = sortie_season.SIZE_RANGE ;
sortie_category_tmp.SIZE = sortie_season.SIZE ;
sortie_category_tmp.US_SIZE = sortie_season.US_SIZE ;
sortie_category_tmp.CM_SIZE = sortie_season.CM_SIZE ;
sortie_category_tmp.PRODUCT = sortie_season.PRODUCT ;
sortie_category_tmp.PRODUCT_STATUS = sortie_season.PRODUCT_STATUS ;
sortie_category_tmp.PRODUCT_TIER = sortie_season.PRODUCT_TIER ;
sortie_category_tmp.ACCT_EXCLUS = sortie_season.ACCT_EXCLUS ;
sortie_category_tmp.SIZE_RATIO_SPLIT = sortie_season.SIZE_RATIO_SPLIT ;
sortie_category_tmp.REC_SIZE_SPLIT = sortie_season.REC_SIZE_SPLIT ;
sortie_category_tmp.CARTON_QTY = sortie_season.CARTON_QTY ;
sortie_category_tmp.ATTRIBUTE = sortie_season.ATTRIBUTE ;
sortie_category_tmp.UNITS = sortie_season.UNITS ;
sortie_category_tmp.EUR_RRP = sortie_season.EUR_RRP ;
sortie_category_tmp.EUR_WSP = sortie_season.EUR_WSP ;
sortie_category_tmp.GBP_RRP = sortie_season.GBP_RRP ;
sortie_category_tmp.GBP_WSP = sortie_season.GBP_WSP ;
sortie_category_tmp.CHF_RRP = sortie_season.CHF_RRP ;
sortie_category_tmp.CHF_WSP = sortie_season.CHF_WSP ;
sortie_category_tmp.NOK_RRP = sortie_season.NOK_RRP ;
sortie_category_tmp.NOK_WSP = sortie_season.NOK_WSP ;
sortie_category_tmp.DKK_RRP = sortie_season.DKK_RRP ;
sortie_category_tmp.DKK_WSP = sortie_season.DKK_WSP ;
sortie_category_tmp.SEK_RRP = sortie_season.SEK_RRP ;
sortie_category_tmp.SEK_WSP = sortie_season.SEK_WSP ;
sortie_category_tmp.EUR_FINN_RRP = sortie_season.EUR_FINN_RRP ;
sortie_category_tmp.EUR_FINN_WSP = sortie_season.EUR_FINN_WSP ;
sortie_category_tmp.FABRICATION = sortie_season.FABRICATION ;
sortie_category_tmp.COO = sortie_season.COO ;
sortie_category_tmp.CUSTOM_TARIFF_CODE = sortie_season.CUSTOM_TARIFF_CODE ;
sortie_category_tmp.UPC = sortie_season.UPC ;
sortie_category_tmp.SMU_TYPE = sortie_season.SMU_TYPE ;
sortie_category_tmp.BRAND_NOT_FOUND = sortie_season.BRAND_NOT_FOUND ;
sortie_category_tmp.SEASON_NOT_FOUND = sortie_season.SEASON_NOT_FOUND ;
sortie_category_tmp.COLOR_NOT_FOUND = sortie_season.COLOR_NOT_FOUND ;
sortie_category_tmp.CATEGORY_NOT_FOUND = sortie_season.CATEGORY_NOT_FOUND ;
sortie_category_tmp.REF_NOT_FOUND = sortie_season.REF_NOT_FOUND ;
sortie_category_tmp.DESCRIPTION_NOT_FOUND = sortie_season.DESCRIPTION_NOT_FOUND ;
sortie_category_tmp.STYLE_NOT_FOUND = sortie_season.STYLE_NOT_FOUND ;
sortie_category_tmp.COLOR_NAME_NOT_FOUND = sortie_season.COLOR_NAME_NOT_FOUND ;
sortie_category_tmp.LBL_NOT_FOUND = sortie_season.LBL_NOT_FOUND ;
sortie_category_tmp.STYLE_COLOR_NOT_FOUND = sortie_season.STYLE_COLOR_NOT_FOUND ;
sortie_category_tmp.STYLECOLORLABEL_NOT_FOUND = sortie_season.STYLECOLORLABEL_NOT_FOUND ;
sortie_category_tmp.GENDER_NOT_FOUND = sortie_season.GENDER_NOT_FOUND ;
sortie_category_tmp.AGE_RANGE_NOT_FOUND = sortie_season.AGE_RANGE_NOT_FOUND ;
sortie_category_tmp.SIZE_RANGE_NOT_FOUND = sortie_season.SIZE_RANGE_NOT_FOUND ;
sortie_category_tmp.SIZE_NOT_FOUND = sortie_season.SIZE_NOT_FOUND ;
sortie_category_tmp.US_SIZE_NOT_FOUND = sortie_season.US_SIZE_NOT_FOUND ;
sortie_category_tmp.PRODUCT_NOT_FOUND = sortie_season.PRODUCT_NOT_FOUND ;
sortie_category_tmp.FASHION_NOT_FOUND = sortie_season.FASHION_NOT_FOUND ;
sortie_category_tmp.PRODUCT_STATUS_NOT_FOUND = sortie_season.PRODUCT_STATUS_NOT_FOUND ;
sortie_category_tmp.PRODUCT_TIER_NOT_FOUND = sortie_season.PRODUCT_TIER_NOT_FOUND ;
sortie_category_tmp.SIZE_RATIO_SPLIT_NOT_FOUND = sortie_season.SIZE_RATIO_SPLIT_NOT_FOUND ;
sortie_category_tmp.ATTRIBUTE_NOT_FOUND = sortie_season.ATTRIBUTE_NOT_FOUND ;
sortie_category_tmp.UNITS_NOT_FOUND = sortie_season.UNITS_NOT_FOUND ;
sortie_category_tmp.COO_NOT_FOUND = sortie_season.COO_NOT_FOUND ;
sortie_category_tmp.CM_SIZE_NOT_FOUND = sortie_season.CM_SIZE_NOT_FOUND ;
sortie_category = sortie_category_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_7 = false;










 


	tos_count_tMap_7++;

/**
 * [tMap_7 main ] stop
 */
	
	/**
	 * [tMap_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 process_data_begin ] stop
 */
// Start of branch "sortie_category"
if(sortie_category != null) { 



	
	/**
	 * [tMap_8 main ] start
	 */

	

	
	
	currentComponent="tMap_8";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_category");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_8 = false;
		  boolean mainRowRejected_tMap_8 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row19" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow19 = false;
       		  	    	
       		  	    	
 							row19Struct row19ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_8) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_8 = false;
								
                        		    		row19HashKey.ENUMERATIONVALUE = StringHandling.DOWNCASE(sortie_category.GENDER  ) ;
                        		    		

								
		                        	row19HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row19.lookup( row19HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row19 != null && tHash_Lookup_row19.getCount(row19HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row19' and it contains more one result from keys :  row19.ENUMERATIONVALUE = '" + row19HashKey.ENUMERATIONVALUE + "'");
								} // G 071
							

							row19Struct row19 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row19Struct fromLookup_row19 = null;
							row19 = row19Default;
										 
							
								 
							
							
								if (tHash_Lookup_row19 !=null && tHash_Lookup_row19.hasNext()) { // G 099
								
							
								
								fromLookup_row19 = tHash_Lookup_row19.next();

							
							
								} // G 099
							
							

							if(fromLookup_row19 != null) {
								row19 = fromLookup_row19;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_8__Struct Var = Var__tMap_8;// ###############################
        // ###############################
        // # Output tables

sortie_gender = null;


// # Output table : 'sortie_gender'
sortie_gender_tmp.LINE_NUMBER = sortie_category.LINE_NUMBER ;
sortie_gender_tmp.DYNAMICS_COLOR = sortie_category.DYNAMICS_COLOR ;
sortie_gender_tmp.DYNAMICS_BRAND = sortie_category.DYNAMICS_BRAND ;
sortie_gender_tmp.BRAND = sortie_category.BRAND ;
sortie_gender_tmp.SEASON = sortie_category.SEASON ;
sortie_gender_tmp.CATEGORY = sortie_category.CATEGORY ;
sortie_gender_tmp.REF = sortie_category.REF ;
sortie_gender_tmp.DESCRIPTION = sortie_category.DESCRIPTION ;
sortie_gender_tmp.STYLE = sortie_category.STYLE ;
sortie_gender_tmp.COLOR = sortie_category.COLOR ;
sortie_gender_tmp.FASHION = sortie_category.FASHION ;
sortie_gender_tmp.STYLECOLORLABEL = sortie_category.STYLECOLORLABEL ;
sortie_gender_tmp.COLORNAME = sortie_category.COLORNAME ;
sortie_gender_tmp.LBL = sortie_category.LBL ;
sortie_gender_tmp.STYLE_COLOR = sortie_category.STYLE_COLOR ;
sortie_gender_tmp.GENDER = sortie_category.GENDER ;
sortie_gender_tmp.AGE_RANGE = sortie_category.AGE_RANGE ;
sortie_gender_tmp.SIZE_RANGE = sortie_category.SIZE_RANGE ;
sortie_gender_tmp.SIZE = sortie_category.SIZE ;
sortie_gender_tmp.US_SIZE = sortie_category.US_SIZE ;
sortie_gender_tmp.CM_SIZE = sortie_category.CM_SIZE ;
sortie_gender_tmp.PRODUCT = sortie_category.PRODUCT ;
sortie_gender_tmp.PRODUCT_STATUS = sortie_category.PRODUCT_STATUS ;
sortie_gender_tmp.PRODUCT_TIER = sortie_category.PRODUCT_TIER ;
sortie_gender_tmp.ACCT_EXCLUS = sortie_category.ACCT_EXCLUS ;
sortie_gender_tmp.SIZE_RATIO_SPLIT = sortie_category.SIZE_RATIO_SPLIT ;
sortie_gender_tmp.REC_SIZE_SPLIT = sortie_category.REC_SIZE_SPLIT ;
sortie_gender_tmp.CARTON_QTY = sortie_category.CARTON_QTY ;
sortie_gender_tmp.ATTRIBUTE = sortie_category.ATTRIBUTE ;
sortie_gender_tmp.UNITS = sortie_category.UNITS ;
sortie_gender_tmp.EUR_RRP = sortie_category.EUR_RRP ;
sortie_gender_tmp.EUR_WSP = sortie_category.EUR_WSP ;
sortie_gender_tmp.GBP_RRP = sortie_category.GBP_RRP ;
sortie_gender_tmp.GBP_WSP = sortie_category.GBP_WSP ;
sortie_gender_tmp.CHF_RRP = sortie_category.CHF_RRP ;
sortie_gender_tmp.CHF_WSP = sortie_category.CHF_WSP ;
sortie_gender_tmp.NOK_RRP = sortie_category.NOK_RRP ;
sortie_gender_tmp.NOK_WSP = sortie_category.NOK_WSP ;
sortie_gender_tmp.DKK_RRP = sortie_category.DKK_RRP ;
sortie_gender_tmp.DKK_WSP = sortie_category.DKK_WSP ;
sortie_gender_tmp.SEK_RRP = sortie_category.SEK_RRP ;
sortie_gender_tmp.SEK_WSP = sortie_category.SEK_WSP ;
sortie_gender_tmp.EUR_FINN_RRP = sortie_category.EUR_FINN_RRP ;
sortie_gender_tmp.EUR_FINN_WSP = sortie_category.EUR_FINN_WSP ;
sortie_gender_tmp.FABRICATION = sortie_category.FABRICATION ;
sortie_gender_tmp.COO = sortie_category.COO ;
sortie_gender_tmp.CUSTOM_TARIFF_CODE = sortie_category.CUSTOM_TARIFF_CODE ;
sortie_gender_tmp.UPC = sortie_category.UPC ;
sortie_gender_tmp.SMU_TYPE = sortie_category.SMU_TYPE ;
sortie_gender_tmp.BRAND_NOT_FOUND = sortie_category.BRAND_NOT_FOUND ;
sortie_gender_tmp.SEASON_NOT_FOUND = sortie_category.SEASON_NOT_FOUND ;
sortie_gender_tmp.COLOR_NOT_FOUND = sortie_category.COLOR_NOT_FOUND ;
sortie_gender_tmp.CATEGORY_NOT_FOUND = sortie_category.CATEGORY_NOT_FOUND ;
sortie_gender_tmp.REF_NOT_FOUND = sortie_category.REF_NOT_FOUND ;
sortie_gender_tmp.DESCRIPTION_NOT_FOUND = sortie_category.DESCRIPTION_NOT_FOUND ;
sortie_gender_tmp.STYLE_NOT_FOUND = sortie_category.STYLE_NOT_FOUND ;
sortie_gender_tmp.COLOR_NAME_NOT_FOUND = sortie_category.COLOR_NAME_NOT_FOUND ;
sortie_gender_tmp.LBL_NOT_FOUND = sortie_category.LBL_NOT_FOUND ;
sortie_gender_tmp.STYLE_COLOR_NOT_FOUND = sortie_category.STYLE_COLOR_NOT_FOUND ;
sortie_gender_tmp.STYLECOLORLABEL_NOT_FOUND = sortie_category.STYLECOLORLABEL_NOT_FOUND ;
sortie_gender_tmp.GENDER_NOT_FOUND = sortie_category.GENDER_NOT_FOUND  == "ERROR : BLANK FORBIDDEN" ? "ERROR : BLANK FORBIDDEN" : (   row19.ENUMERATIONVALUE != null ? "" : "ERROR : " +  sortie_category.GENDER ) ;
sortie_gender_tmp.AGE_RANGE_NOT_FOUND = sortie_category.AGE_RANGE_NOT_FOUND ;
sortie_gender_tmp.SIZE_RANGE_NOT_FOUND = sortie_category.SIZE_RANGE_NOT_FOUND ;
sortie_gender_tmp.SIZE_NOT_FOUND = sortie_category.SIZE_NOT_FOUND ;
sortie_gender_tmp.US_SIZE_NOT_FOUND = sortie_category.US_SIZE_NOT_FOUND ;
sortie_gender_tmp.PRODUCT_NOT_FOUND = sortie_category.PRODUCT_NOT_FOUND ;
sortie_gender_tmp.FASHION_NOT_FOUND = sortie_category.FASHION_NOT_FOUND ;
sortie_gender_tmp.PRODUCT_STATUS_NOT_FOUND = sortie_category.PRODUCT_STATUS_NOT_FOUND ;
sortie_gender_tmp.PRODUCT_TIER_NOT_FOUND = sortie_category.PRODUCT_TIER_NOT_FOUND ;
sortie_gender_tmp.SIZE_RATIO_SPLIT_NOT_FOUND = sortie_category.SIZE_RATIO_SPLIT_NOT_FOUND ;
sortie_gender_tmp.ATTRIBUTE_NOT_FOUND = sortie_category.ATTRIBUTE_NOT_FOUND ;
sortie_gender_tmp.UNITS_NOT_FOUND = sortie_category.UNITS_NOT_FOUND ;
sortie_gender_tmp.COO_NOT_FOUND = sortie_category.COO_NOT_FOUND ;
sortie_gender_tmp.CM_SIZE_NOT_FOUND = sortie_category.CM_SIZE_NOT_FOUND ;
sortie_gender = sortie_gender_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_8 = false;










 


	tos_count_tMap_8++;

/**
 * [tMap_8 main ] stop
 */
	
	/**
	 * [tMap_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_begin ] stop
 */
// Start of branch "sortie_gender"
if(sortie_gender != null) { 



	
	/**
	 * [tMap_9 main ] start
	 */

	

	
	
	currentComponent="tMap_9";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_gender");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_9 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_9 = false;
		  boolean mainRowRejected_tMap_9 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "sortie_size_map" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopsortie_size_map = false;
       		  	    	
       		  	    	
 							sortie_size_mapStruct sortie_size_mapObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_9) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_9 = false;
								
                        		    		sortie_size_mapHashKey.SIZEID = StringHandling.DOWNCASE(sortie_gender.SIZE ) ;
                        		    		

								
		                        	sortie_size_mapHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_sortie_size_map.lookup( sortie_size_mapHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_sortie_size_map != null && tHash_Lookup_sortie_size_map.getCount(sortie_size_mapHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'sortie_size_map' and it contains more one result from keys :  sortie_size_map.SIZEID = '" + sortie_size_mapHashKey.SIZEID + "'");
								} // G 071
							

							sortie_size_mapStruct sortie_size_map = null;
                    		  	 
							   
                    		  	 
	       		  	    	sortie_size_mapStruct fromLookup_sortie_size_map = null;
							sortie_size_map = sortie_size_mapDefault;
										 
							
								 
							
							
								if (tHash_Lookup_sortie_size_map !=null && tHash_Lookup_sortie_size_map.hasNext()) { // G 099
								
							
								
								fromLookup_sortie_size_map = tHash_Lookup_sortie_size_map.next();

							
							
								} // G 099
							
							

							if(fromLookup_sortie_size_map != null) {
								sortie_size_map = fromLookup_sortie_size_map;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_9__Struct Var = Var__tMap_9;// ###############################
        // ###############################
        // # Output tables

sortie_size = null;


// # Output table : 'sortie_size'
sortie_size_tmp.LINE_NUMBER = sortie_gender.LINE_NUMBER ;
sortie_size_tmp.DYNAMICS_COLOR = sortie_gender.DYNAMICS_COLOR ;
sortie_size_tmp.DYNAMICS_BRAND = sortie_gender.DYNAMICS_BRAND ;
sortie_size_tmp.BRAND = sortie_gender.BRAND ;
sortie_size_tmp.SEASON = sortie_gender.SEASON ;
sortie_size_tmp.CATEGORY = sortie_gender.CATEGORY ;
sortie_size_tmp.REF = sortie_gender.REF ;
sortie_size_tmp.DESCRIPTION = sortie_gender.DESCRIPTION ;
sortie_size_tmp.STYLE = sortie_gender.STYLE ;
sortie_size_tmp.COLOR = sortie_gender.COLOR ;
sortie_size_tmp.FASHION = sortie_gender.FASHION ;
sortie_size_tmp.STYLECOLORLABEL = sortie_gender.STYLECOLORLABEL ;
sortie_size_tmp.COLORNAME = sortie_gender.COLORNAME ;
sortie_size_tmp.LBL = sortie_gender.LBL ;
sortie_size_tmp.STYLE_COLOR = sortie_gender.STYLE_COLOR ;
sortie_size_tmp.GENDER = sortie_gender.GENDER ;
sortie_size_tmp.AGE_RANGE = sortie_gender.AGE_RANGE ;
sortie_size_tmp.SIZE_RANGE = sortie_gender.SIZE_RANGE ;
sortie_size_tmp.SIZE = sortie_gender.SIZE ;
sortie_size_tmp.US_SIZE = sortie_gender.US_SIZE ;
sortie_size_tmp.CM_SIZE = sortie_gender.CM_SIZE ;
sortie_size_tmp.PRODUCT = sortie_gender.PRODUCT ;
sortie_size_tmp.PRODUCT_STATUS = sortie_gender.PRODUCT_STATUS ;
sortie_size_tmp.PRODUCT_TIER = sortie_gender.PRODUCT_TIER ;
sortie_size_tmp.ACCT_EXCLUS = sortie_gender.ACCT_EXCLUS ;
sortie_size_tmp.SIZE_RATIO_SPLIT = sortie_gender.SIZE_RATIO_SPLIT ;
sortie_size_tmp.REC_SIZE_SPLIT = sortie_gender.REC_SIZE_SPLIT ;
sortie_size_tmp.CARTON_QTY = sortie_gender.CARTON_QTY ;
sortie_size_tmp.ATTRIBUTE = sortie_gender.ATTRIBUTE ;
sortie_size_tmp.UNITS = sortie_gender.UNITS ;
sortie_size_tmp.EUR_RRP = sortie_gender.EUR_RRP ;
sortie_size_tmp.EUR_WSP = sortie_gender.EUR_WSP ;
sortie_size_tmp.GBP_RRP = sortie_gender.GBP_RRP ;
sortie_size_tmp.GBP_WSP = sortie_gender.GBP_WSP ;
sortie_size_tmp.CHF_RRP = sortie_gender.CHF_RRP ;
sortie_size_tmp.CHF_WSP = sortie_gender.CHF_WSP ;
sortie_size_tmp.NOK_RRP = sortie_gender.NOK_RRP ;
sortie_size_tmp.NOK_WSP = sortie_gender.NOK_WSP ;
sortie_size_tmp.DKK_RRP = sortie_gender.DKK_RRP ;
sortie_size_tmp.DKK_WSP = sortie_gender.DKK_WSP ;
sortie_size_tmp.SEK_RRP = sortie_gender.SEK_RRP ;
sortie_size_tmp.SEK_WSP = sortie_gender.SEK_WSP ;
sortie_size_tmp.EUR_FINN_RRP = sortie_gender.EUR_FINN_RRP ;
sortie_size_tmp.EUR_FINN_WSP = sortie_gender.EUR_FINN_WSP ;
sortie_size_tmp.FABRICATION = sortie_gender.FABRICATION ;
sortie_size_tmp.COO = sortie_gender.COO ;
sortie_size_tmp.CUSTOM_TARIFF_CODE = sortie_gender.CUSTOM_TARIFF_CODE ;
sortie_size_tmp.UPC = sortie_gender.UPC ;
sortie_size_tmp.SMU_TYPE = sortie_gender.SMU_TYPE ;
sortie_size_tmp.BRAND_NOT_FOUND = sortie_gender.BRAND_NOT_FOUND ;
sortie_size_tmp.SEASON_NOT_FOUND = sortie_gender.SEASON_NOT_FOUND ;
sortie_size_tmp.COLOR_NOT_FOUND = sortie_gender.COLOR_NOT_FOUND ;
sortie_size_tmp.CATEGORY_NOT_FOUND = sortie_gender.CATEGORY_NOT_FOUND ;
sortie_size_tmp.REF_NOT_FOUND = sortie_gender.REF_NOT_FOUND ;
sortie_size_tmp.DESCRIPTION_NOT_FOUND = sortie_gender.DESCRIPTION_NOT_FOUND ;
sortie_size_tmp.STYLE_NOT_FOUND = sortie_gender.STYLE_NOT_FOUND ;
sortie_size_tmp.COLOR_NAME_NOT_FOUND = sortie_gender.COLOR_NAME_NOT_FOUND ;
sortie_size_tmp.LBL_NOT_FOUND = sortie_gender.LBL_NOT_FOUND ;
sortie_size_tmp.STYLE_COLOR_NOT_FOUND = sortie_gender.STYLE_COLOR_NOT_FOUND ;
sortie_size_tmp.STYLECOLORLABEL_NOT_FOUND = sortie_gender.STYLECOLORLABEL_NOT_FOUND ;
sortie_size_tmp.GENDER_NOT_FOUND = sortie_gender.GENDER_NOT_FOUND ;
sortie_size_tmp.AGE_RANGE_NOT_FOUND = sortie_gender.AGE_RANGE_NOT_FOUND ;
sortie_size_tmp.SIZE_RANGE_NOT_FOUND = sortie_gender.SIZE_RANGE_NOT_FOUND ;
sortie_size_tmp.SIZE_NOT_FOUND = sortie_gender.SIZE_NOT_FOUND   == "ERROR : BLANK FORBIDDEN" ? "ERROR : BLANK FORBIDDEN" : (   sortie_size_map.SIZEID != null ? "" : "ERROR : " +  sortie_gender.SIZE ) ;
sortie_size_tmp.US_SIZE_NOT_FOUND = sortie_gender.US_SIZE_NOT_FOUND ;
sortie_size_tmp.PRODUCT_NOT_FOUND = sortie_gender.PRODUCT_NOT_FOUND ;
sortie_size_tmp.FASHION_NOT_FOUND = sortie_gender.FASHION_NOT_FOUND ;
sortie_size_tmp.PRODUCT_STATUS_NOT_FOUND = sortie_gender.PRODUCT_STATUS_NOT_FOUND ;
sortie_size_tmp.PRODUCT_TIER_NOT_FOUND = sortie_gender.PRODUCT_TIER_NOT_FOUND ;
sortie_size_tmp.SIZE_RATIO_SPLIT_NOT_FOUND = sortie_gender.SIZE_RATIO_SPLIT_NOT_FOUND ;
sortie_size_tmp.ATTRIBUTE_NOT_FOUND = sortie_gender.ATTRIBUTE_NOT_FOUND ;
sortie_size_tmp.UNITS_NOT_FOUND = sortie_gender.UNITS_NOT_FOUND ;
sortie_size_tmp.COO_NOT_FOUND = sortie_gender.COO_NOT_FOUND ;
sortie_size_tmp.CM_SIZE_NOT_FOUND = sortie_gender.CM_SIZE_NOT_FOUND ;
sortie_size = sortie_size_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_9 = false;










 


	tos_count_tMap_9++;

/**
 * [tMap_9 main ] stop
 */
	
	/**
	 * [tMap_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

 



/**
 * [tMap_9 process_data_begin ] stop
 */
// Start of branch "sortie_size"
if(sortie_size != null) { 



	
	/**
	 * [tMap_10 main ] start
	 */

	

	
	
	currentComponent="tMap_10";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_size");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_10 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_10 = false;
		  boolean mainRowRejected_tMap_10 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "sortie_product_status_file" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopsortie_product_status_file = false;
       		  	    	
       		  	    	
 							sortie_product_status_fileStruct sortie_product_status_fileObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_10) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_10 = false;
								
                        		    		sortie_product_status_fileHashKey.STATUSID = StringHandling.DOWNCASE(sortie_size.PRODUCT_STATUS ) ;
                        		    		

								
		                        	sortie_product_status_fileHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_sortie_product_status_file.lookup( sortie_product_status_fileHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_sortie_product_status_file != null && tHash_Lookup_sortie_product_status_file.getCount(sortie_product_status_fileHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'sortie_product_status_file' and it contains more one result from keys :  sortie_product_status_file.STATUSID = '" + sortie_product_status_fileHashKey.STATUSID + "'");
								} // G 071
							

							sortie_product_status_fileStruct sortie_product_status_file = null;
                    		  	 
							   
                    		  	 
	       		  	    	sortie_product_status_fileStruct fromLookup_sortie_product_status_file = null;
							sortie_product_status_file = sortie_product_status_fileDefault;
										 
							
								 
							
							
								if (tHash_Lookup_sortie_product_status_file !=null && tHash_Lookup_sortie_product_status_file.hasNext()) { // G 099
								
							
								
								fromLookup_sortie_product_status_file = tHash_Lookup_sortie_product_status_file.next();

							
							
								} // G 099
							
							

							if(fromLookup_sortie_product_status_file != null) {
								sortie_product_status_file = fromLookup_sortie_product_status_file;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_10__Struct Var = Var__tMap_10;// ###############################
        // ###############################
        // # Output tables

sortie_product_status = null;


// # Output table : 'sortie_product_status'
sortie_product_status_tmp.LINE_NUMBER = sortie_size.LINE_NUMBER ;
sortie_product_status_tmp.DYNAMICS_COLOR = sortie_size.DYNAMICS_COLOR ;
sortie_product_status_tmp.DYNAMICS_BRAND = sortie_size.DYNAMICS_BRAND ;
sortie_product_status_tmp.BRAND = sortie_size.BRAND ;
sortie_product_status_tmp.SEASON = sortie_size.SEASON ;
sortie_product_status_tmp.CATEGORY = sortie_size.CATEGORY ;
sortie_product_status_tmp.REF = sortie_size.REF ;
sortie_product_status_tmp.DESCRIPTION = sortie_size.DESCRIPTION ;
sortie_product_status_tmp.STYLE = sortie_size.STYLE ;
sortie_product_status_tmp.COLOR = sortie_size.COLOR ;
sortie_product_status_tmp.FASHION = sortie_size.FASHION ;
sortie_product_status_tmp.STYLECOLORLABEL = sortie_size.STYLECOLORLABEL ;
sortie_product_status_tmp.COLORNAME = sortie_size.COLORNAME ;
sortie_product_status_tmp.LBL = sortie_size.LBL ;
sortie_product_status_tmp.STYLE_COLOR = sortie_size.STYLE_COLOR ;
sortie_product_status_tmp.GENDER = sortie_size.GENDER ;
sortie_product_status_tmp.AGE_RANGE = sortie_size.AGE_RANGE ;
sortie_product_status_tmp.SIZE_RANGE = sortie_size.SIZE_RANGE ;
sortie_product_status_tmp.SIZE = sortie_size.SIZE ;
sortie_product_status_tmp.US_SIZE = sortie_size.US_SIZE ;
sortie_product_status_tmp.CM_SIZE = sortie_size.CM_SIZE ;
sortie_product_status_tmp.PRODUCT = sortie_size.PRODUCT ;
sortie_product_status_tmp.PRODUCT_STATUS = sortie_size.PRODUCT_STATUS ;
sortie_product_status_tmp.PRODUCT_TIER = sortie_size.PRODUCT_TIER ;
sortie_product_status_tmp.ACCT_EXCLUS = sortie_size.ACCT_EXCLUS ;
sortie_product_status_tmp.SIZE_RATIO_SPLIT = sortie_size.SIZE_RATIO_SPLIT ;
sortie_product_status_tmp.REC_SIZE_SPLIT = sortie_size.REC_SIZE_SPLIT ;
sortie_product_status_tmp.CARTON_QTY = sortie_size.CARTON_QTY ;
sortie_product_status_tmp.ATTRIBUTE = sortie_size.ATTRIBUTE ;
sortie_product_status_tmp.UNITS = sortie_size.UNITS ;
sortie_product_status_tmp.EUR_RRP = sortie_size.EUR_RRP ;
sortie_product_status_tmp.EUR_WSP = sortie_size.EUR_WSP ;
sortie_product_status_tmp.GBP_RRP = sortie_size.GBP_RRP ;
sortie_product_status_tmp.GBP_WSP = sortie_size.GBP_WSP ;
sortie_product_status_tmp.CHF_RRP = sortie_size.CHF_RRP ;
sortie_product_status_tmp.CHF_WSP = sortie_size.CHF_WSP ;
sortie_product_status_tmp.NOK_RRP = sortie_size.NOK_RRP ;
sortie_product_status_tmp.NOK_WSP = sortie_size.NOK_WSP ;
sortie_product_status_tmp.DKK_RRP = sortie_size.DKK_RRP ;
sortie_product_status_tmp.DKK_WSP = sortie_size.DKK_WSP ;
sortie_product_status_tmp.SEK_RRP = sortie_size.SEK_RRP ;
sortie_product_status_tmp.SEK_WSP = sortie_size.SEK_WSP ;
sortie_product_status_tmp.EUR_FINN_RRP = sortie_size.EUR_FINN_RRP ;
sortie_product_status_tmp.EUR_FINN_WSP = sortie_size.EUR_FINN_WSP ;
sortie_product_status_tmp.FABRICATION = sortie_size.FABRICATION ;
sortie_product_status_tmp.COO = sortie_size.COO ;
sortie_product_status_tmp.CUSTOM_TARIFF_CODE = sortie_size.CUSTOM_TARIFF_CODE ;
sortie_product_status_tmp.UPC = sortie_size.UPC ;
sortie_product_status_tmp.SMU_TYPE = sortie_size.SMU_TYPE ;
sortie_product_status_tmp.BRAND_NOT_FOUND = sortie_size.BRAND_NOT_FOUND ;
sortie_product_status_tmp.SEASON_NOT_FOUND = sortie_size.SEASON_NOT_FOUND ;
sortie_product_status_tmp.COLOR_NOT_FOUND = sortie_size.COLOR_NOT_FOUND ;
sortie_product_status_tmp.CATEGORY_NOT_FOUND = sortie_size.CATEGORY_NOT_FOUND ;
sortie_product_status_tmp.REF_NOT_FOUND = sortie_size.REF_NOT_FOUND ;
sortie_product_status_tmp.DESCRIPTION_NOT_FOUND = sortie_size.DESCRIPTION_NOT_FOUND ;
sortie_product_status_tmp.STYLE_NOT_FOUND = sortie_size.STYLE_NOT_FOUND ;
sortie_product_status_tmp.COLOR_NAME_NOT_FOUND = sortie_size.COLOR_NAME_NOT_FOUND ;
sortie_product_status_tmp.LBL_NOT_FOUND = sortie_size.LBL_NOT_FOUND ;
sortie_product_status_tmp.STYLE_COLOR_NOT_FOUND = sortie_size.STYLE_COLOR_NOT_FOUND ;
sortie_product_status_tmp.STYLECOLORLABEL_NOT_FOUND = sortie_size.STYLECOLORLABEL_NOT_FOUND ;
sortie_product_status_tmp.GENDER_NOT_FOUND = sortie_size.GENDER_NOT_FOUND ;
sortie_product_status_tmp.AGE_RANGE_NOT_FOUND = sortie_size.AGE_RANGE_NOT_FOUND ;
sortie_product_status_tmp.SIZE_RANGE_NOT_FOUND = sortie_size.SIZE_RANGE_NOT_FOUND ;
sortie_product_status_tmp.SIZE_NOT_FOUND = sortie_size.SIZE_NOT_FOUND ;
sortie_product_status_tmp.US_SIZE_NOT_FOUND = sortie_size.US_SIZE_NOT_FOUND ;
sortie_product_status_tmp.PRODUCT_NOT_FOUND = sortie_size.PRODUCT_NOT_FOUND ;
sortie_product_status_tmp.FASHION_NOT_FOUND = sortie_size.FASHION_NOT_FOUND ;
sortie_product_status_tmp.PRODUCT_STATUS_NOT_FOUND = sortie_size.PRODUCT_STATUS_NOT_FOUND  == "ERROR : BLANK FORBIDDEN" ? "ERROR : BLANK FORBIDDEN" : (   sortie_product_status_file.STATUSID != null ? "" : "ERROR : " +  sortie_size.PRODUCT_STATUS ) ;
sortie_product_status_tmp.PRODUCT_TIER_NOT_FOUND = sortie_size.PRODUCT_TIER_NOT_FOUND ;
sortie_product_status_tmp.SIZE_RATIO_SPLIT_NOT_FOUND = sortie_size.SIZE_RATIO_SPLIT_NOT_FOUND ;
sortie_product_status_tmp.ATTRIBUTE_NOT_FOUND = sortie_size.ATTRIBUTE_NOT_FOUND ;
sortie_product_status_tmp.UNITS_NOT_FOUND = sortie_size.UNITS_NOT_FOUND ;
sortie_product_status_tmp.COO_NOT_FOUND = sortie_size.COO_NOT_FOUND ;
sortie_product_status_tmp.CM_SIZE_NOT_FOUND = sortie_size.CM_SIZE_NOT_FOUND ;
sortie_product_status = sortie_product_status_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_10 = false;










 


	tos_count_tMap_10++;

/**
 * [tMap_10 main ] stop
 */
	
	/**
	 * [tMap_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_10";

	

 



/**
 * [tMap_10 process_data_begin ] stop
 */
// Start of branch "sortie_product_status"
if(sortie_product_status != null) { 



	
	/**
	 * [tMap_11 main ] start
	 */

	

	
	
	currentComponent="tMap_11";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_product_status");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_11 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_11 = false;
		  boolean mainRowRejected_tMap_11 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row23" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow23 = false;
       		  	    	
       		  	    	
 							row23Struct row23ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_11) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_11 = false;
								
                        		    		row23HashKey.ENUMERATIONVALUE = StringHandling.DOWNCASE(sortie_product_status.PRODUCT_TIER) ;
                        		    		

								
		                        	row23HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row23.lookup( row23HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row23 != null && tHash_Lookup_row23.getCount(row23HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row23' and it contains more one result from keys :  row23.ENUMERATIONVALUE = '" + row23HashKey.ENUMERATIONVALUE + "'");
								} // G 071
							

							row23Struct row23 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row23Struct fromLookup_row23 = null;
							row23 = row23Default;
										 
							
								 
							
							
								if (tHash_Lookup_row23 !=null && tHash_Lookup_row23.hasNext()) { // G 099
								
							
								
								fromLookup_row23 = tHash_Lookup_row23.next();

							
							
								} // G 099
							
							

							if(fromLookup_row23 != null) {
								row23 = fromLookup_row23;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_11__Struct Var = Var__tMap_11;// ###############################
        // ###############################
        // # Output tables

sortie_product_tier = null;


// # Output table : 'sortie_product_tier'
sortie_product_tier_tmp.LINE_NUMBER = sortie_product_status.LINE_NUMBER ;
sortie_product_tier_tmp.DYNAMICS_COLOR = sortie_product_status.DYNAMICS_COLOR ;
sortie_product_tier_tmp.DYNAMICS_BRAND = sortie_product_status.DYNAMICS_BRAND ;
sortie_product_tier_tmp.BRAND = sortie_product_status.BRAND ;
sortie_product_tier_tmp.SEASON = sortie_product_status.SEASON ;
sortie_product_tier_tmp.CATEGORY = sortie_product_status.CATEGORY ;
sortie_product_tier_tmp.REF = sortie_product_status.REF ;
sortie_product_tier_tmp.DESCRIPTION = sortie_product_status.DESCRIPTION ;
sortie_product_tier_tmp.STYLE = sortie_product_status.STYLE ;
sortie_product_tier_tmp.COLOR = sortie_product_status.COLOR ;
sortie_product_tier_tmp.FASHION = sortie_product_status.FASHION ;
sortie_product_tier_tmp.STYLECOLORLABEL = sortie_product_status.STYLECOLORLABEL ;
sortie_product_tier_tmp.COLORNAME = sortie_product_status.COLORNAME ;
sortie_product_tier_tmp.LBL = sortie_product_status.LBL ;
sortie_product_tier_tmp.STYLE_COLOR = sortie_product_status.STYLE_COLOR ;
sortie_product_tier_tmp.GENDER = sortie_product_status.GENDER ;
sortie_product_tier_tmp.AGE_RANGE = sortie_product_status.AGE_RANGE ;
sortie_product_tier_tmp.SIZE_RANGE = sortie_product_status.SIZE_RANGE ;
sortie_product_tier_tmp.SIZE = sortie_product_status.SIZE ;
sortie_product_tier_tmp.US_SIZE = sortie_product_status.US_SIZE ;
sortie_product_tier_tmp.CM_SIZE = sortie_product_status.CM_SIZE ;
sortie_product_tier_tmp.PRODUCT = sortie_product_status.PRODUCT ;
sortie_product_tier_tmp.PRODUCT_STATUS = sortie_product_status.PRODUCT_STATUS ;
sortie_product_tier_tmp.PRODUCT_TIER = sortie_product_status.PRODUCT_TIER ;
sortie_product_tier_tmp.ACCT_EXCLUS = sortie_product_status.ACCT_EXCLUS ;
sortie_product_tier_tmp.SIZE_RATIO_SPLIT = sortie_product_status.SIZE_RATIO_SPLIT ;
sortie_product_tier_tmp.REC_SIZE_SPLIT = sortie_product_status.REC_SIZE_SPLIT ;
sortie_product_tier_tmp.CARTON_QTY = sortie_product_status.CARTON_QTY ;
sortie_product_tier_tmp.ATTRIBUTE = sortie_product_status.ATTRIBUTE ;
sortie_product_tier_tmp.UNITS = sortie_product_status.UNITS ;
sortie_product_tier_tmp.EUR_RRP = sortie_product_status.EUR_RRP ;
sortie_product_tier_tmp.EUR_WSP = sortie_product_status.EUR_WSP ;
sortie_product_tier_tmp.GBP_RRP = sortie_product_status.GBP_RRP ;
sortie_product_tier_tmp.GBP_WSP = sortie_product_status.GBP_WSP ;
sortie_product_tier_tmp.CHF_RRP = sortie_product_status.CHF_RRP ;
sortie_product_tier_tmp.CHF_WSP = sortie_product_status.CHF_WSP ;
sortie_product_tier_tmp.NOK_RRP = sortie_product_status.NOK_RRP ;
sortie_product_tier_tmp.NOK_WSP = sortie_product_status.NOK_WSP ;
sortie_product_tier_tmp.DKK_RRP = sortie_product_status.DKK_RRP ;
sortie_product_tier_tmp.DKK_WSP = sortie_product_status.DKK_WSP ;
sortie_product_tier_tmp.SEK_RRP = sortie_product_status.SEK_RRP ;
sortie_product_tier_tmp.SEK_WSP = sortie_product_status.SEK_WSP ;
sortie_product_tier_tmp.EUR_FINN_RRP = sortie_product_status.EUR_FINN_RRP ;
sortie_product_tier_tmp.EUR_FINN_WSP = sortie_product_status.EUR_FINN_WSP ;
sortie_product_tier_tmp.FABRICATION = sortie_product_status.FABRICATION ;
sortie_product_tier_tmp.COO = sortie_product_status.COO ;
sortie_product_tier_tmp.CUSTOM_TARIFF_CODE = sortie_product_status.CUSTOM_TARIFF_CODE ;
sortie_product_tier_tmp.UPC = sortie_product_status.UPC ;
sortie_product_tier_tmp.SMU_TYPE = sortie_product_status.SMU_TYPE ;
sortie_product_tier_tmp.BRAND_NOT_FOUND = sortie_product_status.BRAND_NOT_FOUND ;
sortie_product_tier_tmp.SEASON_NOT_FOUND = sortie_product_status.SEASON_NOT_FOUND ;
sortie_product_tier_tmp.COLOR_NOT_FOUND = sortie_product_status.COLOR_NOT_FOUND ;
sortie_product_tier_tmp.CATEGORY_NOT_FOUND = sortie_product_status.CATEGORY_NOT_FOUND ;
sortie_product_tier_tmp.REF_NOT_FOUND = sortie_product_status.REF_NOT_FOUND ;
sortie_product_tier_tmp.DESCRIPTION_NOT_FOUND = sortie_product_status.DESCRIPTION_NOT_FOUND ;
sortie_product_tier_tmp.STYLE_NOT_FOUND = sortie_product_status.STYLE_NOT_FOUND ;
sortie_product_tier_tmp.COLOR_NAME_NOT_FOUND = sortie_product_status.COLOR_NAME_NOT_FOUND ;
sortie_product_tier_tmp.LBL_NOT_FOUND = sortie_product_status.LBL_NOT_FOUND ;
sortie_product_tier_tmp.STYLE_COLOR_NOT_FOUND = sortie_product_status.STYLE_COLOR_NOT_FOUND ;
sortie_product_tier_tmp.STYLECOLORLABEL_NOT_FOUND = sortie_product_status.STYLECOLORLABEL_NOT_FOUND ;
sortie_product_tier_tmp.GENDER_NOT_FOUND = sortie_product_status.GENDER_NOT_FOUND ;
sortie_product_tier_tmp.AGE_RANGE_NOT_FOUND = sortie_product_status.AGE_RANGE_NOT_FOUND ;
sortie_product_tier_tmp.SIZE_RANGE_NOT_FOUND = sortie_product_status.SIZE_RANGE_NOT_FOUND ;
sortie_product_tier_tmp.SIZE_NOT_FOUND = sortie_product_status.SIZE_NOT_FOUND ;
sortie_product_tier_tmp.US_SIZE_NOT_FOUND = sortie_product_status.US_SIZE_NOT_FOUND ;
sortie_product_tier_tmp.PRODUCT_NOT_FOUND = sortie_product_status.PRODUCT_NOT_FOUND ;
sortie_product_tier_tmp.FASHION_NOT_FOUND = sortie_product_status.FASHION_NOT_FOUND ;
sortie_product_tier_tmp.PRODUCT_STATUS_NOT_FOUND = sortie_product_status.PRODUCT_STATUS_NOT_FOUND ;
sortie_product_tier_tmp.PRODUCT_TIER_NOT_FOUND = sortie_product_status.PRODUCT_TIER_NOT_FOUND   == "ERROR : BLANK FORBIDDEN" ? "ERROR : BLANK FORBIDDEN" : (   row23.ENUMERATIONVALUE != null ? "" : "ERROR : " +  sortie_product_status.PRODUCT_TIER ) ;
sortie_product_tier_tmp.SIZE_RATIO_SPLIT_NOT_FOUND = sortie_product_status.SIZE_RATIO_SPLIT_NOT_FOUND ;
sortie_product_tier_tmp.ATTRIBUTE_NOT_FOUND = sortie_product_status.ATTRIBUTE_NOT_FOUND ;
sortie_product_tier_tmp.UNITS_NOT_FOUND = sortie_product_status.UNITS_NOT_FOUND ;
sortie_product_tier_tmp.COO_NOT_FOUND = sortie_product_status.COO_NOT_FOUND ;
sortie_product_tier_tmp.CM_SIZE_NOT_FOUND = sortie_product_status.CM_SIZE_NOT_FOUND ;
sortie_product_tier = sortie_product_tier_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_11 = false;










 


	tos_count_tMap_11++;

/**
 * [tMap_11 main ] stop
 */
	
	/**
	 * [tMap_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_11";

	

 



/**
 * [tMap_11 process_data_begin ] stop
 */
// Start of branch "sortie_product_tier"
if(sortie_product_tier != null) { 



	
	/**
	 * [tMap_12 main ] start
	 */

	

	
	
	currentComponent="tMap_12";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_product_tier");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_12 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_12 = false;
		  boolean mainRowRejected_tMap_12 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_12__Struct Var = Var__tMap_12;// ###############################
        // ###############################
        // # Output tables

sortie_coo = null;


// # Output table : 'sortie_coo'
sortie_coo_tmp.LINE_NUMBER = sortie_product_tier.LINE_NUMBER ;
sortie_coo_tmp.DYNAMICS_COLOR = sortie_product_tier.DYNAMICS_COLOR ;
sortie_coo_tmp.DYNAMICS_BRAND = sortie_product_tier.DYNAMICS_BRAND ;
sortie_coo_tmp.BRAND = sortie_product_tier.BRAND ;
sortie_coo_tmp.SEASON = sortie_product_tier.SEASON ;
sortie_coo_tmp.CATEGORY = sortie_product_tier.CATEGORY ;
sortie_coo_tmp.REF = sortie_product_tier.REF ;
sortie_coo_tmp.DESCRIPTION = sortie_product_tier.DESCRIPTION ;
sortie_coo_tmp.STYLE = sortie_product_tier.STYLE ;
sortie_coo_tmp.COLOR = sortie_product_tier.COLOR ;
sortie_coo_tmp.FASHION = sortie_product_tier.FASHION ;
sortie_coo_tmp.STYLECOLORLABEL = sortie_product_tier.STYLECOLORLABEL ;
sortie_coo_tmp.COLORNAME = sortie_product_tier.COLORNAME ;
sortie_coo_tmp.LBL = sortie_product_tier.LBL ;
sortie_coo_tmp.STYLE_COLOR = sortie_product_tier.STYLE_COLOR ;
sortie_coo_tmp.GENDER = sortie_product_tier.GENDER ;
sortie_coo_tmp.AGE_RANGE = sortie_product_tier.AGE_RANGE ;
sortie_coo_tmp.SIZE_RANGE = sortie_product_tier.SIZE_RANGE ;
sortie_coo_tmp.SIZE = sortie_product_tier.SIZE ;
sortie_coo_tmp.US_SIZE = sortie_product_tier.US_SIZE ;
sortie_coo_tmp.CM_SIZE = sortie_product_tier.CM_SIZE ;
sortie_coo_tmp.PRODUCT = sortie_product_tier.PRODUCT ;
sortie_coo_tmp.PRODUCT_STATUS = sortie_product_tier.PRODUCT_STATUS ;
sortie_coo_tmp.PRODUCT_TIER = sortie_product_tier.PRODUCT_TIER ;
sortie_coo_tmp.ACCT_EXCLUS = sortie_product_tier.ACCT_EXCLUS ;
sortie_coo_tmp.SIZE_RATIO_SPLIT = sortie_product_tier.SIZE_RATIO_SPLIT ;
sortie_coo_tmp.REC_SIZE_SPLIT = sortie_product_tier.REC_SIZE_SPLIT ;
sortie_coo_tmp.CARTON_QTY = sortie_product_tier.CARTON_QTY ;
sortie_coo_tmp.ATTRIBUTE = sortie_product_tier.ATTRIBUTE ;
sortie_coo_tmp.UNITS = sortie_product_tier.UNITS ;
sortie_coo_tmp.EUR_RRP = sortie_product_tier.EUR_RRP ;
sortie_coo_tmp.EUR_WSP = sortie_product_tier.EUR_WSP ;
sortie_coo_tmp.GBP_RRP = sortie_product_tier.GBP_RRP ;
sortie_coo_tmp.GBP_WSP = sortie_product_tier.GBP_WSP ;
sortie_coo_tmp.CHF_RRP = sortie_product_tier.CHF_RRP ;
sortie_coo_tmp.CHF_WSP = sortie_product_tier.CHF_WSP ;
sortie_coo_tmp.NOK_RRP = sortie_product_tier.NOK_RRP ;
sortie_coo_tmp.NOK_WSP = sortie_product_tier.NOK_WSP ;
sortie_coo_tmp.DKK_RRP = sortie_product_tier.DKK_RRP ;
sortie_coo_tmp.DKK_WSP = sortie_product_tier.DKK_WSP ;
sortie_coo_tmp.SEK_RRP = sortie_product_tier.SEK_RRP ;
sortie_coo_tmp.SEK_WSP = sortie_product_tier.SEK_WSP ;
sortie_coo_tmp.EUR_FINN_RRP = sortie_product_tier.EUR_FINN_RRP ;
sortie_coo_tmp.EUR_FINN_WSP = sortie_product_tier.EUR_FINN_WSP ;
sortie_coo_tmp.FABRICATION = sortie_product_tier.FABRICATION ;
sortie_coo_tmp.COO = sortie_product_tier.COO ;
sortie_coo_tmp.CUSTOM_TARIFF_CODE = sortie_product_tier.CUSTOM_TARIFF_CODE ;
sortie_coo_tmp.UPC = sortie_product_tier.UPC ;
sortie_coo_tmp.SMU_TYPE = sortie_product_tier.SMU_TYPE ;
sortie_coo_tmp.BRAND_NOT_FOUND = sortie_product_tier.BRAND_NOT_FOUND ;
sortie_coo_tmp.SEASON_NOT_FOUND = sortie_product_tier.SEASON_NOT_FOUND ;
sortie_coo_tmp.COLOR_NOT_FOUND = sortie_product_tier.COLOR_NOT_FOUND ;
sortie_coo_tmp.CATEGORY_NOT_FOUND = sortie_product_tier.CATEGORY_NOT_FOUND ;
sortie_coo_tmp.REF_NOT_FOUND = sortie_product_tier.REF_NOT_FOUND ;
sortie_coo_tmp.DESCRIPTION_NOT_FOUND = sortie_product_tier.DESCRIPTION_NOT_FOUND ;
sortie_coo_tmp.STYLE_NOT_FOUND = sortie_product_tier.STYLE_NOT_FOUND ;
sortie_coo_tmp.COLOR_NAME_NOT_FOUND = sortie_product_tier.COLOR_NAME_NOT_FOUND ;
sortie_coo_tmp.LBL_NOT_FOUND = sortie_product_tier.LBL_NOT_FOUND ;
sortie_coo_tmp.STYLE_COLOR_NOT_FOUND = sortie_product_tier.STYLE_COLOR_NOT_FOUND ;
sortie_coo_tmp.STYLECOLORLABEL_NOT_FOUND = sortie_product_tier.STYLECOLORLABEL_NOT_FOUND ;
sortie_coo_tmp.GENDER_NOT_FOUND = sortie_product_tier.GENDER_NOT_FOUND ;
sortie_coo_tmp.AGE_RANGE_NOT_FOUND = sortie_product_tier.AGE_RANGE_NOT_FOUND ;
sortie_coo_tmp.SIZE_RANGE_NOT_FOUND = sortie_product_tier.SIZE_RANGE_NOT_FOUND ;
sortie_coo_tmp.SIZE_NOT_FOUND = sortie_product_tier.SIZE_NOT_FOUND ;
sortie_coo_tmp.US_SIZE_NOT_FOUND = sortie_product_tier.US_SIZE_NOT_FOUND ;
sortie_coo_tmp.PRODUCT_NOT_FOUND = sortie_product_tier.PRODUCT_NOT_FOUND ;
sortie_coo_tmp.FASHION_NOT_FOUND = sortie_product_tier.FASHION_NOT_FOUND ;
sortie_coo_tmp.PRODUCT_STATUS_NOT_FOUND = sortie_product_tier.PRODUCT_STATUS_NOT_FOUND ;
sortie_coo_tmp.PRODUCT_TIER_NOT_FOUND = sortie_product_tier.PRODUCT_TIER_NOT_FOUND ;
sortie_coo_tmp.SIZE_RATIO_SPLIT_NOT_FOUND = sortie_product_tier.SIZE_RATIO_SPLIT_NOT_FOUND ;
sortie_coo_tmp.ATTRIBUTE_NOT_FOUND = sortie_product_tier.ATTRIBUTE_NOT_FOUND ;
sortie_coo_tmp.UNITS_NOT_FOUND = sortie_product_tier.UNITS_NOT_FOUND ;
sortie_coo_tmp.COO_NOT_FOUND = sortie_product_tier.COO_NOT_FOUND ;
sortie_coo_tmp.CM_SIZE_NOT_FOUND = sortie_product_tier.CM_SIZE_NOT_FOUND ;
sortie_coo = sortie_coo_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_12 = false;










 


	tos_count_tMap_12++;

/**
 * [tMap_12 main ] stop
 */
	
	/**
	 * [tMap_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_12";

	

 



/**
 * [tMap_12 process_data_begin ] stop
 */
// Start of branch "sortie_coo"
if(sortie_coo != null) { 



	
	/**
	 * [tMap_24 main ] start
	 */

	

	
	
	currentComponent="tMap_24";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_coo");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_24 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_24 = false;
		  boolean mainRowRejected_tMap_24 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row28" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow28 = false;
       		  	    	
       		  	    	
 							row28Struct row28ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_24) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_24 = false;
								
                        		    		row28HashKey.ENUMERATIONVALUE = StringHandling.DOWNCASE(sortie_coo.AGE_RANGE) ;
                        		    		

								
		                        	row28HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row28.lookup( row28HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row28 != null && tHash_Lookup_row28.getCount(row28HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row28' and it contains more one result from keys :  row28.ENUMERATIONVALUE = '" + row28HashKey.ENUMERATIONVALUE + "'");
								} // G 071
							

							row28Struct row28 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row28Struct fromLookup_row28 = null;
							row28 = row28Default;
										 
							
								 
							
							
								if (tHash_Lookup_row28 !=null && tHash_Lookup_row28.hasNext()) { // G 099
								
							
								
								fromLookup_row28 = tHash_Lookup_row28.next();

							
							
								} // G 099
							
							

							if(fromLookup_row28 != null) {
								row28 = fromLookup_row28;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_24__Struct Var = Var__tMap_24;// ###############################
        // ###############################
        // # Output tables

sortie_age_range_ = null;


// # Output table : 'sortie_age_range_'
sortie_age_range__tmp.LINE_NUMBER = sortie_coo.LINE_NUMBER ;
sortie_age_range__tmp.DYNAMICS_COLOR = sortie_coo.DYNAMICS_COLOR ;
sortie_age_range__tmp.DYNAMICS_BRAND = sortie_coo.DYNAMICS_BRAND ;
sortie_age_range__tmp.BRAND = sortie_coo.BRAND ;
sortie_age_range__tmp.SEASON = sortie_coo.SEASON ;
sortie_age_range__tmp.CATEGORY = sortie_coo.CATEGORY ;
sortie_age_range__tmp.REF = sortie_coo.REF ;
sortie_age_range__tmp.DESCRIPTION = sortie_coo.DESCRIPTION ;
sortie_age_range__tmp.STYLE = sortie_coo.STYLE ;
sortie_age_range__tmp.COLOR = sortie_coo.COLOR ;
sortie_age_range__tmp.FASHION = sortie_coo.FASHION ;
sortie_age_range__tmp.STYLECOLORLABEL = sortie_coo.STYLECOLORLABEL ;
sortie_age_range__tmp.COLORNAME = sortie_coo.COLORNAME ;
sortie_age_range__tmp.LBL = sortie_coo.LBL ;
sortie_age_range__tmp.STYLE_COLOR = sortie_coo.STYLE_COLOR ;
sortie_age_range__tmp.GENDER = sortie_coo.GENDER ;
sortie_age_range__tmp.AGE_RANGE = sortie_coo.AGE_RANGE ;
sortie_age_range__tmp.SIZE_RANGE = sortie_coo.SIZE_RANGE ;
sortie_age_range__tmp.SIZE = sortie_coo.SIZE ;
sortie_age_range__tmp.US_SIZE = sortie_coo.US_SIZE ;
sortie_age_range__tmp.CM_SIZE = sortie_coo.CM_SIZE ;
sortie_age_range__tmp.PRODUCT = sortie_coo.PRODUCT ;
sortie_age_range__tmp.PRODUCT_STATUS = sortie_coo.PRODUCT_STATUS ;
sortie_age_range__tmp.PRODUCT_TIER = sortie_coo.PRODUCT_TIER ;
sortie_age_range__tmp.ACCT_EXCLUS = sortie_coo.ACCT_EXCLUS ;
sortie_age_range__tmp.SIZE_RATIO_SPLIT = sortie_coo.SIZE_RATIO_SPLIT ;
sortie_age_range__tmp.REC_SIZE_SPLIT = sortie_coo.REC_SIZE_SPLIT ;
sortie_age_range__tmp.CARTON_QTY = sortie_coo.CARTON_QTY ;
sortie_age_range__tmp.ATTRIBUTE = sortie_coo.ATTRIBUTE ;
sortie_age_range__tmp.UNITS = sortie_coo.UNITS ;
sortie_age_range__tmp.EUR_RRP = sortie_coo.EUR_RRP ;
sortie_age_range__tmp.EUR_WSP = sortie_coo.EUR_WSP ;
sortie_age_range__tmp.GBP_RRP = sortie_coo.GBP_RRP ;
sortie_age_range__tmp.GBP_WSP = sortie_coo.GBP_WSP ;
sortie_age_range__tmp.CHF_RRP = sortie_coo.CHF_RRP ;
sortie_age_range__tmp.CHF_WSP = sortie_coo.CHF_WSP ;
sortie_age_range__tmp.NOK_RRP = sortie_coo.NOK_RRP ;
sortie_age_range__tmp.NOK_WSP = sortie_coo.NOK_WSP ;
sortie_age_range__tmp.DKK_RRP = sortie_coo.DKK_RRP ;
sortie_age_range__tmp.DKK_WSP = sortie_coo.DKK_WSP ;
sortie_age_range__tmp.SEK_RRP = sortie_coo.SEK_RRP ;
sortie_age_range__tmp.SEK_WSP = sortie_coo.SEK_WSP ;
sortie_age_range__tmp.EUR_FINN_RRP = sortie_coo.EUR_FINN_RRP ;
sortie_age_range__tmp.EUR_FINN_WSP = sortie_coo.EUR_FINN_WSP ;
sortie_age_range__tmp.FABRICATION = sortie_coo.FABRICATION ;
sortie_age_range__tmp.COO = sortie_coo.COO ;
sortie_age_range__tmp.CUSTOM_TARIFF_CODE = sortie_coo.CUSTOM_TARIFF_CODE ;
sortie_age_range__tmp.UPC = sortie_coo.UPC ;
sortie_age_range__tmp.SMU_TYPE = sortie_coo.SMU_TYPE ;
sortie_age_range__tmp.BRAND_NOT_FOUND = sortie_coo.BRAND_NOT_FOUND ;
sortie_age_range__tmp.SEASON_NOT_FOUND = sortie_coo.SEASON_NOT_FOUND ;
sortie_age_range__tmp.COLOR_NOT_FOUND = sortie_coo.COLOR_NOT_FOUND ;
sortie_age_range__tmp.CATEGORY_NOT_FOUND = sortie_coo.CATEGORY_NOT_FOUND ;
sortie_age_range__tmp.REF_NOT_FOUND = sortie_coo.REF_NOT_FOUND ;
sortie_age_range__tmp.DESCRIPTION_NOT_FOUND = sortie_coo.DESCRIPTION_NOT_FOUND ;
sortie_age_range__tmp.STYLE_NOT_FOUND = sortie_coo.STYLE_NOT_FOUND ;
sortie_age_range__tmp.COLOR_NAME_NOT_FOUND = sortie_coo.COLOR_NAME_NOT_FOUND ;
sortie_age_range__tmp.LBL_NOT_FOUND = sortie_coo.LBL_NOT_FOUND ;
sortie_age_range__tmp.STYLE_COLOR_NOT_FOUND = sortie_coo.STYLE_COLOR_NOT_FOUND ;
sortie_age_range__tmp.STYLECOLORLABEL_NOT_FOUND = sortie_coo.STYLECOLORLABEL_NOT_FOUND ;
sortie_age_range__tmp.GENDER_NOT_FOUND = sortie_coo.GENDER_NOT_FOUND ;
sortie_age_range__tmp.AGE_RANGE_NOT_FOUND = sortie_coo.AGE_RANGE_NOT_FOUND  == "ERROR : BLANK FORBIDDEN" ? "ERROR : BLANK FORBIDDEN" : (   row28.ENUMERATIONVALUE != null ? "" : "ERROR : " +  sortie_coo.AGE_RANGE ) ;
sortie_age_range__tmp.SIZE_RANGE_NOT_FOUND =  sortie_coo.SIZE_RANGE_NOT_FOUND ;
sortie_age_range__tmp.SIZE_NOT_FOUND = sortie_coo.SIZE_NOT_FOUND ;
sortie_age_range__tmp.US_SIZE_NOT_FOUND = sortie_coo.US_SIZE_NOT_FOUND ;
sortie_age_range__tmp.PRODUCT_NOT_FOUND = sortie_coo.PRODUCT_NOT_FOUND ;
sortie_age_range__tmp.FASHION_NOT_FOUND = sortie_coo.FASHION_NOT_FOUND ;
sortie_age_range__tmp.PRODUCT_STATUS_NOT_FOUND = sortie_coo.PRODUCT_STATUS_NOT_FOUND ;
sortie_age_range__tmp.PRODUCT_TIER_NOT_FOUND = sortie_coo.PRODUCT_TIER_NOT_FOUND ;
sortie_age_range__tmp.SIZE_RATIO_SPLIT_NOT_FOUND = sortie_coo.SIZE_RATIO_SPLIT_NOT_FOUND ;
sortie_age_range__tmp.ATTRIBUTE_NOT_FOUND = sortie_coo.ATTRIBUTE_NOT_FOUND ;
sortie_age_range__tmp.UNITS_NOT_FOUND = sortie_coo.UNITS_NOT_FOUND ;
sortie_age_range__tmp.COO_NOT_FOUND = sortie_coo.COO_NOT_FOUND ;
sortie_age_range__tmp.CM_SIZE_NOT_FOUND = sortie_coo.CM_SIZE_NOT_FOUND ;
sortie_age_range_ = sortie_age_range__tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_24 = false;










 


	tos_count_tMap_24++;

/**
 * [tMap_24 main ] stop
 */
	
	/**
	 * [tMap_24 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_24";

	

 



/**
 * [tMap_24 process_data_begin ] stop
 */
// Start of branch "sortie_age_range_"
if(sortie_age_range_ != null) { 



	
	/**
	 * [tMap_26 main ] start
	 */

	

	
	
	currentComponent="tMap_26";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_age_range_");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_26 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_26 = false;
		  boolean mainRowRejected_tMap_26 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row30" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow30 = false;
       		  	    	
       		  	    	
 							row30Struct row30ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_26) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_26 = false;
								
                        		    		row30HashKey.ENUMERATIONVALUE = StringHandling.DOWNCASE(sortie_age_range_.SIZE_RANGE ) ;
                        		    		

								
		                        	row30HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row30.lookup( row30HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row30 != null && tHash_Lookup_row30.getCount(row30HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row30' and it contains more one result from keys :  row30.ENUMERATIONVALUE = '" + row30HashKey.ENUMERATIONVALUE + "'");
								} // G 071
							

							row30Struct row30 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row30Struct fromLookup_row30 = null;
							row30 = row30Default;
										 
							
								 
							
							
								if (tHash_Lookup_row30 !=null && tHash_Lookup_row30.hasNext()) { // G 099
								
							
								
								fromLookup_row30 = tHash_Lookup_row30.next();

							
							
								} // G 099
							
							

							if(fromLookup_row30 != null) {
								row30 = fromLookup_row30;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_26__Struct Var = Var__tMap_26;// ###############################
        // ###############################
        // # Output tables

sortie_size_range_ = null;


// # Output table : 'sortie_size_range_'
sortie_size_range__tmp.LINE_NUMBER = sortie_age_range_.LINE_NUMBER ;
sortie_size_range__tmp.DYNAMICS_COLOR = sortie_age_range_.DYNAMICS_COLOR ;
sortie_size_range__tmp.DYNAMICS_BRAND = sortie_age_range_.DYNAMICS_BRAND ;
sortie_size_range__tmp.BRAND = sortie_age_range_.BRAND ;
sortie_size_range__tmp.SEASON = sortie_age_range_.SEASON ;
sortie_size_range__tmp.CATEGORY = sortie_age_range_.CATEGORY ;
sortie_size_range__tmp.REF = sortie_age_range_.REF ;
sortie_size_range__tmp.DESCRIPTION = sortie_age_range_.DESCRIPTION ;
sortie_size_range__tmp.STYLE = sortie_age_range_.STYLE ;
sortie_size_range__tmp.COLOR = sortie_age_range_.COLOR ;
sortie_size_range__tmp.FASHION = sortie_age_range_.FASHION ;
sortie_size_range__tmp.STYLECOLORLABEL = sortie_age_range_.STYLECOLORLABEL ;
sortie_size_range__tmp.COLORNAME = sortie_age_range_.COLORNAME ;
sortie_size_range__tmp.LBL = sortie_age_range_.LBL ;
sortie_size_range__tmp.STYLE_COLOR = sortie_age_range_.STYLE_COLOR ;
sortie_size_range__tmp.GENDER = sortie_age_range_.GENDER ;
sortie_size_range__tmp.AGE_RANGE = sortie_age_range_.AGE_RANGE ;
sortie_size_range__tmp.SIZE_RANGE = sortie_age_range_.SIZE_RANGE ;
sortie_size_range__tmp.SIZE = sortie_age_range_.SIZE ;
sortie_size_range__tmp.US_SIZE = sortie_age_range_.US_SIZE ;
sortie_size_range__tmp.CM_SIZE = sortie_age_range_.CM_SIZE ;
sortie_size_range__tmp.PRODUCT = sortie_age_range_.PRODUCT ;
sortie_size_range__tmp.PRODUCT_STATUS = sortie_age_range_.PRODUCT_STATUS ;
sortie_size_range__tmp.PRODUCT_TIER = sortie_age_range_.PRODUCT_TIER ;
sortie_size_range__tmp.ACCT_EXCLUS = sortie_age_range_.ACCT_EXCLUS ;
sortie_size_range__tmp.SIZE_RATIO_SPLIT = sortie_age_range_.SIZE_RATIO_SPLIT ;
sortie_size_range__tmp.REC_SIZE_SPLIT = sortie_age_range_.REC_SIZE_SPLIT ;
sortie_size_range__tmp.CARTON_QTY = sortie_age_range_.CARTON_QTY ;
sortie_size_range__tmp.ATTRIBUTE = sortie_age_range_.ATTRIBUTE ;
sortie_size_range__tmp.UNITS = sortie_age_range_.UNITS ;
sortie_size_range__tmp.EUR_RRP = sortie_age_range_.EUR_RRP ;
sortie_size_range__tmp.EUR_WSP = sortie_age_range_.EUR_WSP ;
sortie_size_range__tmp.GBP_RRP = sortie_age_range_.GBP_RRP ;
sortie_size_range__tmp.GBP_WSP = sortie_age_range_.GBP_WSP ;
sortie_size_range__tmp.CHF_RRP = sortie_age_range_.CHF_RRP ;
sortie_size_range__tmp.CHF_WSP = sortie_age_range_.CHF_WSP ;
sortie_size_range__tmp.NOK_RRP = sortie_age_range_.NOK_RRP ;
sortie_size_range__tmp.NOK_WSP = sortie_age_range_.NOK_WSP ;
sortie_size_range__tmp.DKK_RRP = sortie_age_range_.DKK_RRP ;
sortie_size_range__tmp.DKK_WSP = sortie_age_range_.DKK_WSP ;
sortie_size_range__tmp.SEK_RRP = sortie_age_range_.SEK_RRP ;
sortie_size_range__tmp.SEK_WSP = sortie_age_range_.SEK_WSP ;
sortie_size_range__tmp.EUR_FINN_RRP = sortie_age_range_.EUR_FINN_RRP ;
sortie_size_range__tmp.EUR_FINN_WSP = sortie_age_range_.EUR_FINN_WSP ;
sortie_size_range__tmp.FABRICATION = sortie_age_range_.FABRICATION ;
sortie_size_range__tmp.COO = sortie_age_range_.COO ;
sortie_size_range__tmp.CUSTOM_TARIFF_CODE = sortie_age_range_.CUSTOM_TARIFF_CODE ;
sortie_size_range__tmp.UPC = sortie_age_range_.UPC ;
sortie_size_range__tmp.SMU_TYPE = sortie_age_range_.SMU_TYPE ;
sortie_size_range__tmp.BRAND_NOT_FOUND = sortie_age_range_.BRAND_NOT_FOUND ;
sortie_size_range__tmp.SEASON_NOT_FOUND = sortie_age_range_.SEASON_NOT_FOUND ;
sortie_size_range__tmp.COLOR_NOT_FOUND = sortie_age_range_.COLOR_NOT_FOUND ;
sortie_size_range__tmp.CATEGORY_NOT_FOUND = sortie_age_range_.CATEGORY_NOT_FOUND ;
sortie_size_range__tmp.REF_NOT_FOUND = sortie_age_range_.REF_NOT_FOUND ;
sortie_size_range__tmp.DESCRIPTION_NOT_FOUND = sortie_age_range_.DESCRIPTION_NOT_FOUND ;
sortie_size_range__tmp.STYLE_NOT_FOUND = sortie_age_range_.STYLE_NOT_FOUND ;
sortie_size_range__tmp.COLOR_NAME_NOT_FOUND = sortie_age_range_.COLOR_NAME_NOT_FOUND ;
sortie_size_range__tmp.LBL_NOT_FOUND = sortie_age_range_.LBL_NOT_FOUND ;
sortie_size_range__tmp.STYLE_COLOR_NOT_FOUND = sortie_age_range_.STYLE_COLOR_NOT_FOUND ;
sortie_size_range__tmp.STYLECOLORLABEL_NOT_FOUND = sortie_age_range_.STYLECOLORLABEL_NOT_FOUND ;
sortie_size_range__tmp.GENDER_NOT_FOUND = sortie_age_range_.GENDER_NOT_FOUND ;
sortie_size_range__tmp.AGE_RANGE_NOT_FOUND = sortie_age_range_.AGE_RANGE_NOT_FOUND ;
sortie_size_range__tmp.SIZE_RANGE_NOT_FOUND = sortie_age_range_.SIZE_RANGE_NOT_FOUND   == "ERROR : BLANK FORBIDDEN" ? "ERROR : BLANK FORBIDDEN" : (   row30.ENUMERATIONVALUE != null ? "" : "ERROR : " + sortie_age_range_.SIZE_RANGE ) ;
sortie_size_range__tmp.SIZE_NOT_FOUND = sortie_age_range_.SIZE_NOT_FOUND ;
sortie_size_range__tmp.US_SIZE_NOT_FOUND = sortie_age_range_.US_SIZE_NOT_FOUND ;
sortie_size_range__tmp.PRODUCT_NOT_FOUND = sortie_age_range_.PRODUCT_NOT_FOUND ;
sortie_size_range__tmp.FASHION_NOT_FOUND = sortie_age_range_.FASHION_NOT_FOUND ;
sortie_size_range__tmp.PRODUCT_STATUS_NOT_FOUND = sortie_age_range_.PRODUCT_STATUS_NOT_FOUND ;
sortie_size_range__tmp.PRODUCT_TIER_NOT_FOUND = sortie_age_range_.PRODUCT_TIER_NOT_FOUND ;
sortie_size_range__tmp.SIZE_RATIO_SPLIT_NOT_FOUND = sortie_age_range_.SIZE_RATIO_SPLIT_NOT_FOUND ;
sortie_size_range__tmp.ATTRIBUTE_NOT_FOUND = sortie_age_range_.ATTRIBUTE_NOT_FOUND ;
sortie_size_range__tmp.UNITS_NOT_FOUND = sortie_age_range_.UNITS_NOT_FOUND ;
sortie_size_range__tmp.COO_NOT_FOUND = sortie_age_range_.COO_NOT_FOUND ;
sortie_size_range__tmp.CM_SIZE_NOT_FOUND = sortie_age_range_.CM_SIZE_NOT_FOUND ;
sortie_size_range_ = sortie_size_range__tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_26 = false;










 


	tos_count_tMap_26++;

/**
 * [tMap_26 main ] stop
 */
	
	/**
	 * [tMap_26 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_26";

	

 



/**
 * [tMap_26 process_data_begin ] stop
 */
// Start of branch "sortie_size_range_"
if(sortie_size_range_ != null) { 



	
	/**
	 * [tMap_28 main ] start
	 */

	

	
	
	currentComponent="tMap_28";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_size_range_");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_28 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_28 = false;
		  boolean mainRowRejected_tMap_28 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_28__Struct Var = Var__tMap_28;// ###############################
        // ###############################
        // # Output tables

sortie_cm = null;


// # Output table : 'sortie_cm'
sortie_cm_tmp.LINE_NUMBER = sortie_size_range_.LINE_NUMBER ;
sortie_cm_tmp.DYNAMICS_COLOR = sortie_size_range_.DYNAMICS_COLOR ;
sortie_cm_tmp.DYNAMICS_BRAND = sortie_size_range_.DYNAMICS_BRAND ;
sortie_cm_tmp.BRAND = sortie_size_range_.BRAND ;
sortie_cm_tmp.SEASON = sortie_size_range_.SEASON ;
sortie_cm_tmp.CATEGORY = sortie_size_range_.CATEGORY ;
sortie_cm_tmp.REF = sortie_size_range_.REF ;
sortie_cm_tmp.DESCRIPTION = sortie_size_range_.DESCRIPTION ;
sortie_cm_tmp.STYLE = sortie_size_range_.STYLE ;
sortie_cm_tmp.COLOR = sortie_size_range_.COLOR ;
sortie_cm_tmp.FASHION = StringHandling.INDEX(sortie_size_range_.FASHION  ,"-") > 0 ? StringHandling.RIGHT(sortie_size_range_.FASHION ,StringHandling.LEN(sortie_size_range_.FASHION )- StringHandling.INDEX(sortie_size_range_.FASHION  ,"-")-1) :sortie_size_range_.FASHION ;
sortie_cm_tmp.STYLECOLORLABEL = sortie_size_range_.STYLECOLORLABEL ;
sortie_cm_tmp.COLORNAME = sortie_size_range_.COLORNAME ;
sortie_cm_tmp.LBL = sortie_size_range_.LBL ;
sortie_cm_tmp.STYLE_COLOR = sortie_size_range_.STYLE_COLOR ;
sortie_cm_tmp.GENDER = sortie_size_range_.GENDER ;
sortie_cm_tmp.AGE_RANGE = sortie_size_range_.AGE_RANGE ;
sortie_cm_tmp.SIZE_RANGE = sortie_size_range_.SIZE_RANGE ;
sortie_cm_tmp.SIZE = sortie_size_range_.SIZE ;
sortie_cm_tmp.US_SIZE = sortie_size_range_.US_SIZE ;
sortie_cm_tmp.CM_SIZE = sortie_size_range_.CM_SIZE ;
sortie_cm_tmp.PRODUCT = sortie_size_range_.PRODUCT ;
sortie_cm_tmp.PRODUCT_STATUS = sortie_size_range_.PRODUCT_STATUS ;
sortie_cm_tmp.PRODUCT_TIER = sortie_size_range_.PRODUCT_TIER ;
sortie_cm_tmp.ACCT_EXCLUS = sortie_size_range_.ACCT_EXCLUS ;
sortie_cm_tmp.SIZE_RATIO_SPLIT = sortie_size_range_.SIZE_RATIO_SPLIT ;
sortie_cm_tmp.REC_SIZE_SPLIT = sortie_size_range_.REC_SIZE_SPLIT ;
sortie_cm_tmp.CARTON_QTY = sortie_size_range_.CARTON_QTY ;
sortie_cm_tmp.ATTRIBUTE = sortie_size_range_.ATTRIBUTE ;
sortie_cm_tmp.UNITS = sortie_size_range_.UNITS ;
sortie_cm_tmp.EUR_RRP = sortie_size_range_.EUR_RRP ;
sortie_cm_tmp.EUR_WSP = sortie_size_range_.EUR_WSP ;
sortie_cm_tmp.GBP_RRP = sortie_size_range_.GBP_RRP ;
sortie_cm_tmp.GBP_WSP = sortie_size_range_.GBP_WSP ;
sortie_cm_tmp.CHF_RRP = sortie_size_range_.CHF_RRP ;
sortie_cm_tmp.CHF_WSP = sortie_size_range_.CHF_WSP ;
sortie_cm_tmp.NOK_RRP = sortie_size_range_.NOK_RRP ;
sortie_cm_tmp.NOK_WSP = sortie_size_range_.NOK_WSP ;
sortie_cm_tmp.DKK_RRP = sortie_size_range_.DKK_RRP ;
sortie_cm_tmp.DKK_WSP = sortie_size_range_.DKK_WSP ;
sortie_cm_tmp.SEK_RRP = sortie_size_range_.SEK_RRP ;
sortie_cm_tmp.SEK_WSP = sortie_size_range_.SEK_WSP ;
sortie_cm_tmp.EUR_FINN_RRP = sortie_size_range_.EUR_FINN_RRP ;
sortie_cm_tmp.EUR_FINN_WSP = sortie_size_range_.EUR_FINN_WSP ;
sortie_cm_tmp.FABRICATION = sortie_size_range_.FABRICATION ;
sortie_cm_tmp.COO = sortie_size_range_.COO ;
sortie_cm_tmp.CUSTOM_TARIFF_CODE = sortie_size_range_.CUSTOM_TARIFF_CODE ;
sortie_cm_tmp.UPC = sortie_size_range_.UPC ;
sortie_cm_tmp.SMU_TYPE = sortie_size_range_.SMU_TYPE ;
sortie_cm_tmp.BRAND_NOT_FOUND = sortie_size_range_.BRAND_NOT_FOUND ;
sortie_cm_tmp.SEASON_NOT_FOUND = sortie_size_range_.SEASON_NOT_FOUND ;
sortie_cm_tmp.COLOR_NOT_FOUND = sortie_size_range_.COLOR_NOT_FOUND ;
sortie_cm_tmp.CATEGORY_NOT_FOUND = sortie_size_range_.CATEGORY_NOT_FOUND ;
sortie_cm_tmp.REF_NOT_FOUND = sortie_size_range_.REF_NOT_FOUND ;
sortie_cm_tmp.DESCRIPTION_NOT_FOUND = sortie_size_range_.DESCRIPTION_NOT_FOUND ;
sortie_cm_tmp.STYLE_NOT_FOUND = sortie_size_range_.STYLE_NOT_FOUND ;
sortie_cm_tmp.COLOR_NAME_NOT_FOUND = sortie_size_range_.COLOR_NAME_NOT_FOUND ;
sortie_cm_tmp.LBL_NOT_FOUND = sortie_size_range_.LBL_NOT_FOUND ;
sortie_cm_tmp.STYLE_COLOR_NOT_FOUND = sortie_size_range_.STYLE_COLOR_NOT_FOUND ;
sortie_cm_tmp.STYLECOLORLABEL_NOT_FOUND = sortie_size_range_.STYLECOLORLABEL_NOT_FOUND ;
sortie_cm_tmp.GENDER_NOT_FOUND = sortie_size_range_.GENDER_NOT_FOUND ;
sortie_cm_tmp.AGE_RANGE_NOT_FOUND = sortie_size_range_.AGE_RANGE_NOT_FOUND ;
sortie_cm_tmp.SIZE_RANGE_NOT_FOUND = sortie_size_range_.SIZE_RANGE_NOT_FOUND ;
sortie_cm_tmp.SIZE_NOT_FOUND = sortie_size_range_.SIZE_NOT_FOUND ;
sortie_cm_tmp.US_SIZE_NOT_FOUND = sortie_size_range_.US_SIZE_NOT_FOUND ;
sortie_cm_tmp.PRODUCT_NOT_FOUND = sortie_size_range_.PRODUCT_NOT_FOUND ;
sortie_cm_tmp.FASHION_NOT_FOUND = sortie_size_range_.FASHION_NOT_FOUND ;
sortie_cm_tmp.PRODUCT_STATUS_NOT_FOUND = sortie_size_range_.PRODUCT_STATUS_NOT_FOUND ;
sortie_cm_tmp.PRODUCT_TIER_NOT_FOUND = sortie_size_range_.PRODUCT_TIER_NOT_FOUND ;
sortie_cm_tmp.SIZE_RATIO_SPLIT_NOT_FOUND = sortie_size_range_.SIZE_RATIO_SPLIT_NOT_FOUND ;
sortie_cm_tmp.ATTRIBUTE_NOT_FOUND = sortie_size_range_.ATTRIBUTE_NOT_FOUND ;
sortie_cm_tmp.UNITS_NOT_FOUND = sortie_size_range_.UNITS_NOT_FOUND ;
sortie_cm_tmp.COO_NOT_FOUND = sortie_size_range_.COO_NOT_FOUND ;
sortie_cm_tmp.CM_SIZE_NOT_FOUND = sortie_size_range_.CM_SIZE_NOT_FOUND ;
sortie_cm = sortie_cm_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_28 = false;










 


	tos_count_tMap_28++;

/**
 * [tMap_28 main ] stop
 */
	
	/**
	 * [tMap_28 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_28";

	

 



/**
 * [tMap_28 process_data_begin ] stop
 */
// Start of branch "sortie_cm"
if(sortie_cm != null) { 



	
	/**
	 * [tMap_30 main ] start
	 */

	

	
	
	currentComponent="tMap_30";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_cm");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_30 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_30 = false;
		  boolean mainRowRejected_tMap_30 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "sortie_fashion" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopsortie_fashion = false;
       		  	    	
       		  	    	
 							sortie_fashionStruct sortie_fashionObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_30) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_30 = false;
								
                        		    		sortie_fashionHashKey.NAME = StringHandling.DOWNCASE(sortie_cm.FASHION) ;
                        		    		

								
		                        	sortie_fashionHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_sortie_fashion.lookup( sortie_fashionHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_sortie_fashion != null && tHash_Lookup_sortie_fashion.getCount(sortie_fashionHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'sortie_fashion' and it contains more one result from keys :  sortie_fashion.NAME = '" + sortie_fashionHashKey.NAME + "'");
								} // G 071
							

							sortie_fashionStruct sortie_fashion = null;
                    		  	 
							   
                    		  	 
	       		  	    	sortie_fashionStruct fromLookup_sortie_fashion = null;
							sortie_fashion = sortie_fashionDefault;
										 
							
								 
							
							
								if (tHash_Lookup_sortie_fashion !=null && tHash_Lookup_sortie_fashion.hasNext()) { // G 099
								
							
								
								fromLookup_sortie_fashion = tHash_Lookup_sortie_fashion.next();

							
							
								} // G 099
							
							

							if(fromLookup_sortie_fashion != null) {
								sortie_fashion = fromLookup_sortie_fashion;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_30__Struct Var = Var__tMap_30;// ###############################
        // ###############################
        // # Output tables

sortie_cm_size_1 = null;


// # Output table : 'sortie_cm_size_1'
sortie_cm_size_1_tmp.LINE_NUMBER = sortie_cm.LINE_NUMBER ;
sortie_cm_size_1_tmp.DYNAMICS_COLOR = sortie_cm.DYNAMICS_COLOR ;
sortie_cm_size_1_tmp.DYNAMICS_BRAND = sortie_cm.DYNAMICS_BRAND ;
sortie_cm_size_1_tmp.BRAND = sortie_cm.BRAND ;
sortie_cm_size_1_tmp.SEASON = sortie_cm.SEASON ;
sortie_cm_size_1_tmp.CATEGORY = sortie_cm.CATEGORY ;
sortie_cm_size_1_tmp.REF = sortie_cm.REF ;
sortie_cm_size_1_tmp.DESCRIPTION = sortie_cm.DESCRIPTION ;
sortie_cm_size_1_tmp.STYLE = sortie_cm.STYLE ;
sortie_cm_size_1_tmp.COLOR = sortie_cm.COLOR ;
sortie_cm_size_1_tmp.FASHION = sortie_cm.FASHION ;
sortie_cm_size_1_tmp.STYLECOLORLABEL = sortie_cm.STYLECOLORLABEL ;
sortie_cm_size_1_tmp.COLORNAME = sortie_cm.COLORNAME ;
sortie_cm_size_1_tmp.LBL = sortie_cm.LBL ;
sortie_cm_size_1_tmp.STYLE_COLOR = sortie_cm.STYLE_COLOR ;
sortie_cm_size_1_tmp.GENDER = sortie_cm.GENDER ;
sortie_cm_size_1_tmp.AGE_RANGE = sortie_cm.AGE_RANGE ;
sortie_cm_size_1_tmp.SIZE_RANGE = sortie_cm.SIZE_RANGE ;
sortie_cm_size_1_tmp.SIZE = sortie_cm.SIZE ;
sortie_cm_size_1_tmp.US_SIZE = sortie_cm.US_SIZE ;
sortie_cm_size_1_tmp.CM_SIZE = sortie_cm.CM_SIZE ;
sortie_cm_size_1_tmp.PRODUCT = StringHandling.INDEX(sortie_cm.PRODUCT ,"-") > 0 ? StringHandling.RIGHT(sortie_cm.PRODUCT,StringHandling.LEN(sortie_cm.PRODUCT)- StringHandling.INDEX(sortie_cm.PRODUCT ,"-")-1) :sortie_cm.PRODUCT ;
sortie_cm_size_1_tmp.PRODUCT_STATUS = sortie_cm.PRODUCT_STATUS ;
sortie_cm_size_1_tmp.PRODUCT_TIER = sortie_cm.PRODUCT_TIER ;
sortie_cm_size_1_tmp.ACCT_EXCLUS = sortie_cm.ACCT_EXCLUS ;
sortie_cm_size_1_tmp.SIZE_RATIO_SPLIT = sortie_cm.SIZE_RATIO_SPLIT ;
sortie_cm_size_1_tmp.REC_SIZE_SPLIT = sortie_cm.REC_SIZE_SPLIT ;
sortie_cm_size_1_tmp.CARTON_QTY = sortie_cm.CARTON_QTY ;
sortie_cm_size_1_tmp.ATTRIBUTE = sortie_cm.ATTRIBUTE ;
sortie_cm_size_1_tmp.UNITS = sortie_cm.UNITS ;
sortie_cm_size_1_tmp.EUR_RRP = sortie_cm.EUR_RRP ;
sortie_cm_size_1_tmp.EUR_WSP = sortie_cm.EUR_WSP ;
sortie_cm_size_1_tmp.GBP_RRP = sortie_cm.GBP_RRP ;
sortie_cm_size_1_tmp.GBP_WSP = sortie_cm.GBP_WSP ;
sortie_cm_size_1_tmp.CHF_RRP = sortie_cm.CHF_RRP ;
sortie_cm_size_1_tmp.CHF_WSP = sortie_cm.CHF_WSP ;
sortie_cm_size_1_tmp.NOK_RRP = sortie_cm.NOK_RRP ;
sortie_cm_size_1_tmp.NOK_WSP = sortie_cm.NOK_WSP ;
sortie_cm_size_1_tmp.DKK_RRP = sortie_cm.DKK_RRP ;
sortie_cm_size_1_tmp.DKK_WSP = sortie_cm.DKK_WSP ;
sortie_cm_size_1_tmp.SEK_RRP = sortie_cm.SEK_RRP ;
sortie_cm_size_1_tmp.SEK_WSP = sortie_cm.SEK_WSP ;
sortie_cm_size_1_tmp.EUR_FINN_RRP = sortie_cm.EUR_FINN_RRP ;
sortie_cm_size_1_tmp.EUR_FINN_WSP = sortie_cm.EUR_FINN_WSP ;
sortie_cm_size_1_tmp.FABRICATION = sortie_cm.FABRICATION ;
sortie_cm_size_1_tmp.COO = sortie_cm.COO ;
sortie_cm_size_1_tmp.CUSTOM_TARIFF_CODE = sortie_cm.CUSTOM_TARIFF_CODE ;
sortie_cm_size_1_tmp.UPC = sortie_cm.UPC ;
sortie_cm_size_1_tmp.SMU_TYPE = sortie_cm.SMU_TYPE ;
sortie_cm_size_1_tmp.BRAND_NOT_FOUND = sortie_cm.BRAND_NOT_FOUND ;
sortie_cm_size_1_tmp.SEASON_NOT_FOUND = sortie_cm.SEASON_NOT_FOUND ;
sortie_cm_size_1_tmp.COLOR_NOT_FOUND = sortie_cm.COLOR_NOT_FOUND ;
sortie_cm_size_1_tmp.CATEGORY_NOT_FOUND = sortie_cm.CATEGORY_NOT_FOUND ;
sortie_cm_size_1_tmp.REF_NOT_FOUND = sortie_cm.REF_NOT_FOUND ;
sortie_cm_size_1_tmp.DESCRIPTION_NOT_FOUND = sortie_cm.DESCRIPTION_NOT_FOUND ;
sortie_cm_size_1_tmp.STYLE_NOT_FOUND = sortie_cm.STYLE_NOT_FOUND ;
sortie_cm_size_1_tmp.COLOR_NAME_NOT_FOUND = sortie_cm.COLOR_NAME_NOT_FOUND ;
sortie_cm_size_1_tmp.LBL_NOT_FOUND = sortie_cm.LBL_NOT_FOUND ;
sortie_cm_size_1_tmp.STYLE_COLOR_NOT_FOUND = sortie_cm.STYLE_COLOR_NOT_FOUND ;
sortie_cm_size_1_tmp.STYLECOLORLABEL_NOT_FOUND = sortie_cm.STYLECOLORLABEL_NOT_FOUND ;
sortie_cm_size_1_tmp.GENDER_NOT_FOUND = sortie_cm.GENDER_NOT_FOUND ;
sortie_cm_size_1_tmp.AGE_RANGE_NOT_FOUND = sortie_cm.AGE_RANGE_NOT_FOUND ;
sortie_cm_size_1_tmp.SIZE_RANGE_NOT_FOUND = sortie_cm.SIZE_RANGE_NOT_FOUND ;
sortie_cm_size_1_tmp.SIZE_NOT_FOUND = sortie_cm.SIZE_NOT_FOUND ;
sortie_cm_size_1_tmp.US_SIZE_NOT_FOUND = sortie_cm.US_SIZE_NOT_FOUND ;
sortie_cm_size_1_tmp.PRODUCT_NOT_FOUND = sortie_cm.PRODUCT_NOT_FOUND ;
sortie_cm_size_1_tmp.FASHION_NOT_FOUND = sortie_cm.FASHION_NOT_FOUND    == "ERROR : BLANK FORBIDDEN" ? "ERROR : BLANK FORBIDDEN" : ( sortie_fashion.NAME != null ? "" : "ERROR : " + sortie_cm.FASHION ) ;
sortie_cm_size_1_tmp.PRODUCT_STATUS_NOT_FOUND = sortie_cm.PRODUCT_STATUS_NOT_FOUND ;
sortie_cm_size_1_tmp.PRODUCT_TIER_NOT_FOUND = sortie_cm.PRODUCT_TIER_NOT_FOUND ;
sortie_cm_size_1_tmp.SIZE_RATIO_SPLIT_NOT_FOUND = sortie_cm.SIZE_RATIO_SPLIT_NOT_FOUND ;
sortie_cm_size_1_tmp.ATTRIBUTE_NOT_FOUND = sortie_cm.ATTRIBUTE_NOT_FOUND ;
sortie_cm_size_1_tmp.UNITS_NOT_FOUND = sortie_cm.UNITS_NOT_FOUND ;
sortie_cm_size_1_tmp.COO_NOT_FOUND = sortie_cm.COO_NOT_FOUND ;
sortie_cm_size_1_tmp.CM_SIZE_NOT_FOUND = sortie_cm.CM_SIZE_NOT_FOUND ;
sortie_cm_size_1 = sortie_cm_size_1_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_30 = false;










 


	tos_count_tMap_30++;

/**
 * [tMap_30 main ] stop
 */
	
	/**
	 * [tMap_30 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_30";

	

 



/**
 * [tMap_30 process_data_begin ] stop
 */
// Start of branch "sortie_cm_size_1"
if(sortie_cm_size_1 != null) { 



	
	/**
	 * [tMap_31 main ] start
	 */

	

	
	
	currentComponent="tMap_31";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_cm_size_1");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_31 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_31 = false;
		  boolean mainRowRejected_tMap_31 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "copyOfsortie_fashion" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopcopyOfsortie_fashion = false;
       		  	    	
       		  	    	
 							copyOfsortie_fashionStruct copyOfsortie_fashionObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_31) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_31 = false;
								
                        		    		copyOfsortie_fashionHashKey.NAME3 = StringHandling.DOWNCASE(sortie_cm_size_1.PRODUCT) ;
                        		    		

								
		                        	copyOfsortie_fashionHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_copyOfsortie_fashion.lookup( copyOfsortie_fashionHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_copyOfsortie_fashion != null && tHash_Lookup_copyOfsortie_fashion.getCount(copyOfsortie_fashionHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'copyOfsortie_fashion' and it contains more one result from keys :  copyOfsortie_fashion.NAME3 = '" + copyOfsortie_fashionHashKey.NAME3 + "'");
								} // G 071
							

							copyOfsortie_fashionStruct copyOfsortie_fashion = null;
                    		  	 
							   
                    		  	 
	       		  	    	copyOfsortie_fashionStruct fromLookup_copyOfsortie_fashion = null;
							copyOfsortie_fashion = copyOfsortie_fashionDefault;
										 
							
								 
							
							
								if (tHash_Lookup_copyOfsortie_fashion !=null && tHash_Lookup_copyOfsortie_fashion.hasNext()) { // G 099
								
							
								
								fromLookup_copyOfsortie_fashion = tHash_Lookup_copyOfsortie_fashion.next();

							
							
								} // G 099
							
							

							if(fromLookup_copyOfsortie_fashion != null) {
								copyOfsortie_fashion = fromLookup_copyOfsortie_fashion;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_31__Struct Var = Var__tMap_31;// ###############################
        // ###############################
        // # Output tables

sortie_cm_size_ = null;


// # Output table : 'sortie_cm_size_'
sortie_cm_size__tmp.LINE_NUMBER = sortie_cm_size_1.LINE_NUMBER ;
sortie_cm_size__tmp.DYNAMICS_COLOR = sortie_cm_size_1.DYNAMICS_COLOR ;
sortie_cm_size__tmp.DYNAMICS_BRAND = sortie_cm_size_1.DYNAMICS_BRAND ;
sortie_cm_size__tmp.BRAND = sortie_cm_size_1.BRAND ;
sortie_cm_size__tmp.SEASON = sortie_cm_size_1.SEASON ;
sortie_cm_size__tmp.CATEGORY = sortie_cm_size_1.CATEGORY ;
sortie_cm_size__tmp.REF = sortie_cm_size_1.REF ;
sortie_cm_size__tmp.DESCRIPTION = sortie_cm_size_1.DESCRIPTION ;
sortie_cm_size__tmp.STYLE = sortie_cm_size_1.STYLE ;
sortie_cm_size__tmp.COLOR = sortie_cm_size_1.COLOR ;
sortie_cm_size__tmp.FASHION = sortie_cm_size_1.FASHION ;
sortie_cm_size__tmp.STYLECOLORLABEL = sortie_cm_size_1.STYLECOLORLABEL ;
sortie_cm_size__tmp.COLORNAME = sortie_cm_size_1.COLORNAME ;
sortie_cm_size__tmp.LBL = sortie_cm_size_1.LBL ;
sortie_cm_size__tmp.STYLE_COLOR = sortie_cm_size_1.STYLE_COLOR ;
sortie_cm_size__tmp.GENDER = sortie_cm_size_1.GENDER ;
sortie_cm_size__tmp.AGE_RANGE = sortie_cm_size_1.AGE_RANGE ;
sortie_cm_size__tmp.SIZE_RANGE = sortie_cm_size_1.SIZE_RANGE ;
sortie_cm_size__tmp.SIZE = sortie_cm_size_1.SIZE ;
sortie_cm_size__tmp.US_SIZE = sortie_cm_size_1.US_SIZE ;
sortie_cm_size__tmp.CM_SIZE = sortie_cm_size_1.CM_SIZE ;
sortie_cm_size__tmp.PRODUCT = sortie_cm_size_1.PRODUCT ;
sortie_cm_size__tmp.PRODUCT_STATUS = sortie_cm_size_1.PRODUCT_STATUS ;
sortie_cm_size__tmp.PRODUCT_TIER = sortie_cm_size_1.PRODUCT_TIER ;
sortie_cm_size__tmp.ACCT_EXCLUS = sortie_cm_size_1.ACCT_EXCLUS ;
sortie_cm_size__tmp.SIZE_RATIO_SPLIT = sortie_cm_size_1.SIZE_RATIO_SPLIT ;
sortie_cm_size__tmp.REC_SIZE_SPLIT = sortie_cm_size_1.REC_SIZE_SPLIT ;
sortie_cm_size__tmp.CARTON_QTY = sortie_cm_size_1.CARTON_QTY ;
sortie_cm_size__tmp.ATTRIBUTE = sortie_cm_size_1.ATTRIBUTE ;
sortie_cm_size__tmp.UNITS = sortie_cm_size_1.UNITS ;
sortie_cm_size__tmp.EUR_RRP = sortie_cm_size_1.EUR_RRP ;
sortie_cm_size__tmp.EUR_WSP = sortie_cm_size_1.EUR_WSP ;
sortie_cm_size__tmp.GBP_RRP = sortie_cm_size_1.GBP_RRP ;
sortie_cm_size__tmp.GBP_WSP = sortie_cm_size_1.GBP_WSP ;
sortie_cm_size__tmp.CHF_RRP = sortie_cm_size_1.CHF_RRP ;
sortie_cm_size__tmp.CHF_WSP = sortie_cm_size_1.CHF_WSP ;
sortie_cm_size__tmp.NOK_RRP = sortie_cm_size_1.NOK_RRP ;
sortie_cm_size__tmp.NOK_WSP = sortie_cm_size_1.NOK_WSP ;
sortie_cm_size__tmp.DKK_RRP = sortie_cm_size_1.DKK_RRP ;
sortie_cm_size__tmp.DKK_WSP = sortie_cm_size_1.DKK_WSP ;
sortie_cm_size__tmp.SEK_RRP = sortie_cm_size_1.SEK_RRP ;
sortie_cm_size__tmp.SEK_WSP = sortie_cm_size_1.SEK_WSP ;
sortie_cm_size__tmp.EUR_FINN_RRP = sortie_cm_size_1.EUR_FINN_RRP ;
sortie_cm_size__tmp.EUR_FINN_WSP = sortie_cm_size_1.EUR_FINN_WSP ;
sortie_cm_size__tmp.FABRICATION = sortie_cm_size_1.FABRICATION ;
sortie_cm_size__tmp.COO = sortie_cm_size_1.COO ;
sortie_cm_size__tmp.CUSTOM_TARIFF_CODE = sortie_cm_size_1.CUSTOM_TARIFF_CODE ;
sortie_cm_size__tmp.UPC = sortie_cm_size_1.UPC ;
sortie_cm_size__tmp.SMU_TYPE = sortie_cm_size_1.SMU_TYPE ;
sortie_cm_size__tmp.BRAND_NOT_FOUND = sortie_cm_size_1.BRAND_NOT_FOUND ;
sortie_cm_size__tmp.SEASON_NOT_FOUND = sortie_cm_size_1.SEASON_NOT_FOUND ;
sortie_cm_size__tmp.COLOR_NOT_FOUND = sortie_cm_size_1.COLOR_NOT_FOUND ;
sortie_cm_size__tmp.CATEGORY_NOT_FOUND = sortie_cm_size_1.CATEGORY_NOT_FOUND ;
sortie_cm_size__tmp.REF_NOT_FOUND = sortie_cm_size_1.REF_NOT_FOUND ;
sortie_cm_size__tmp.DESCRIPTION_NOT_FOUND = sortie_cm_size_1.DESCRIPTION_NOT_FOUND ;
sortie_cm_size__tmp.STYLE_NOT_FOUND = sortie_cm_size_1.STYLE_NOT_FOUND ;
sortie_cm_size__tmp.COLOR_NAME_NOT_FOUND = sortie_cm_size_1.COLOR_NAME_NOT_FOUND ;
sortie_cm_size__tmp.LBL_NOT_FOUND = sortie_cm_size_1.LBL_NOT_FOUND ;
sortie_cm_size__tmp.STYLE_COLOR_NOT_FOUND = sortie_cm_size_1.STYLE_COLOR_NOT_FOUND ;
sortie_cm_size__tmp.STYLECOLORLABEL_NOT_FOUND = sortie_cm_size_1.STYLECOLORLABEL_NOT_FOUND ;
sortie_cm_size__tmp.GENDER_NOT_FOUND = sortie_cm_size_1.GENDER_NOT_FOUND ;
sortie_cm_size__tmp.AGE_RANGE_NOT_FOUND = sortie_cm_size_1.AGE_RANGE_NOT_FOUND ;
sortie_cm_size__tmp.SIZE_RANGE_NOT_FOUND = sortie_cm_size_1.SIZE_RANGE_NOT_FOUND ;
sortie_cm_size__tmp.SIZE_NOT_FOUND = sortie_cm_size_1.SIZE_NOT_FOUND ;
sortie_cm_size__tmp.US_SIZE_NOT_FOUND = sortie_cm_size_1.US_SIZE_NOT_FOUND ;
sortie_cm_size__tmp.PRODUCT_NOT_FOUND = sortie_cm_size_1.PRODUCT_NOT_FOUND    == "ERROR : BLANK FORBIDDEN" ? "ERROR : BLANK FORBIDDEN" : ( copyOfsortie_fashion.NAME3 != null ? "" : "ERROR : " + sortie_cm_size_1.PRODUCT ) ;
sortie_cm_size__tmp.FASHION_NOT_FOUND = sortie_cm_size_1.FASHION_NOT_FOUND ;
sortie_cm_size__tmp.PRODUCT_STATUS_NOT_FOUND = sortie_cm_size_1.PRODUCT_STATUS_NOT_FOUND ;
sortie_cm_size__tmp.PRODUCT_TIER_NOT_FOUND = sortie_cm_size_1.PRODUCT_TIER_NOT_FOUND ;
sortie_cm_size__tmp.SIZE_RATIO_SPLIT_NOT_FOUND = sortie_cm_size_1.SIZE_RATIO_SPLIT_NOT_FOUND ;
sortie_cm_size__tmp.ATTRIBUTE_NOT_FOUND = sortie_cm_size_1.ATTRIBUTE_NOT_FOUND ;
sortie_cm_size__tmp.UNITS_NOT_FOUND = sortie_cm_size_1.UNITS_NOT_FOUND ;
sortie_cm_size__tmp.COO_NOT_FOUND = sortie_cm_size_1.COO_NOT_FOUND ;
sortie_cm_size__tmp.CM_SIZE_NOT_FOUND = sortie_cm_size_1.CM_SIZE_NOT_FOUND ;
sortie_cm_size_ = sortie_cm_size__tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_31 = false;










 


	tos_count_tMap_31++;

/**
 * [tMap_31 main ] stop
 */
	
	/**
	 * [tMap_31 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_31";

	

 



/**
 * [tMap_31 process_data_begin ] stop
 */
// Start of branch "sortie_cm_size_"
if(sortie_cm_size_ != null) { 



	
	/**
	 * [tMap_13 main ] start
	 */

	

	
	
	currentComponent="tMap_13";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_cm_size_");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_13 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_13 = false;
		  boolean mainRowRejected_tMap_13 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_13__Struct Var = Var__tMap_13;// ###############################
        // ###############################
        // # Output tables

sortie_eurprice = null;


// # Output table : 'sortie_eurprice'
sortie_eurprice_tmp.LINE_NUMBER = sortie_cm_size_.LINE_NUMBER ;
sortie_eurprice_tmp.DYNAMICS_COLOR = sortie_cm_size_.DYNAMICS_COLOR ;
sortie_eurprice_tmp.DYNAMICS_BRAND = sortie_cm_size_.DYNAMICS_BRAND ;
sortie_eurprice_tmp.BRAND = sortie_cm_size_.BRAND ;
sortie_eurprice_tmp.SEASON = sortie_cm_size_.SEASON ;
sortie_eurprice_tmp.CATEGORY = sortie_cm_size_.CATEGORY ;
sortie_eurprice_tmp.REF = sortie_cm_size_.REF ;
sortie_eurprice_tmp.DESCRIPTION = sortie_cm_size_.DESCRIPTION ;
sortie_eurprice_tmp.STYLE = sortie_cm_size_.STYLE ;
sortie_eurprice_tmp.COLOR = sortie_cm_size_.COLOR ;
sortie_eurprice_tmp.FASHION = sortie_cm_size_.FASHION ;
sortie_eurprice_tmp.STYLECOLORLABEL = sortie_cm_size_.STYLECOLORLABEL ;
sortie_eurprice_tmp.COLORNAME = sortie_cm_size_.COLORNAME ;
sortie_eurprice_tmp.LBL = sortie_cm_size_.LBL ;
sortie_eurprice_tmp.STYLE_COLOR = sortie_cm_size_.STYLE_COLOR ;
sortie_eurprice_tmp.GENDER = sortie_cm_size_.GENDER ;
sortie_eurprice_tmp.AGE_RANGE = sortie_cm_size_.AGE_RANGE ;
sortie_eurprice_tmp.SIZE_RANGE = sortie_cm_size_.SIZE_RANGE ;
sortie_eurprice_tmp.SIZE = sortie_cm_size_.SIZE ;
sortie_eurprice_tmp.US_SIZE = sortie_cm_size_.US_SIZE ;
sortie_eurprice_tmp.CM_SIZE = sortie_cm_size_.CM_SIZE ;
sortie_eurprice_tmp.PRODUCT = sortie_cm_size_.PRODUCT ;
sortie_eurprice_tmp.PRODUCT_STATUS = sortie_cm_size_.PRODUCT_STATUS ;
sortie_eurprice_tmp.PRODUCT_TIER = sortie_cm_size_.PRODUCT_TIER ;
sortie_eurprice_tmp.ACCT_EXCLUS = sortie_cm_size_.ACCT_EXCLUS ;
sortie_eurprice_tmp.SIZE_RATIO_SPLIT = sortie_cm_size_.SIZE_RATIO_SPLIT ;
sortie_eurprice_tmp.REC_SIZE_SPLIT = sortie_cm_size_.REC_SIZE_SPLIT ;
sortie_eurprice_tmp.CARTON_QTY = sortie_cm_size_.CARTON_QTY ;
sortie_eurprice_tmp.ATTRIBUTE = sortie_cm_size_.ATTRIBUTE ;
sortie_eurprice_tmp.UNITS = sortie_cm_size_.UNITS ;
sortie_eurprice_tmp.EUR_RRP = sortie_cm_size_.EUR_RRP ;
sortie_eurprice_tmp.EUR_WSP = sortie_cm_size_.EUR_WSP ;
sortie_eurprice_tmp.GBP_RRP = sortie_cm_size_.GBP_RRP ;
sortie_eurprice_tmp.GBP_WSP = sortie_cm_size_.GBP_WSP ;
sortie_eurprice_tmp.CHF_RRP = sortie_cm_size_.CHF_RRP ;
sortie_eurprice_tmp.CHF_WSP = sortie_cm_size_.CHF_WSP ;
sortie_eurprice_tmp.NOK_RRP = sortie_cm_size_.NOK_RRP ;
sortie_eurprice_tmp.NOK_WSP = sortie_cm_size_.NOK_WSP ;
sortie_eurprice_tmp.DKK_RRP = sortie_cm_size_.DKK_RRP ;
sortie_eurprice_tmp.DKK_WSP = sortie_cm_size_.DKK_WSP ;
sortie_eurprice_tmp.SEK_RRP = sortie_cm_size_.SEK_RRP ;
sortie_eurprice_tmp.SEK_WSP = sortie_cm_size_.SEK_WSP ;
sortie_eurprice_tmp.EUR_FINN_RRP = sortie_cm_size_.EUR_FINN_RRP ;
sortie_eurprice_tmp.EUR_FINN_WSP = sortie_cm_size_.EUR_FINN_WSP ;
sortie_eurprice_tmp.FABRICATION = sortie_cm_size_.FABRICATION ;
sortie_eurprice_tmp.COO = sortie_cm_size_.COO ;
sortie_eurprice_tmp.CUSTOM_TARIFF_CODE = sortie_cm_size_.CUSTOM_TARIFF_CODE ;
sortie_eurprice_tmp.UPC = sortie_cm_size_.UPC ;
sortie_eurprice_tmp.SMU_TYPE = sortie_cm_size_.SMU_TYPE ;
sortie_eurprice_tmp.BRAND_NOT_FOUND = sortie_cm_size_.BRAND_NOT_FOUND ;
sortie_eurprice_tmp.SEASON_NOT_FOUND = sortie_cm_size_.SEASON_NOT_FOUND ;
sortie_eurprice_tmp.COLOR_NOT_FOUND = sortie_cm_size_.COLOR_NOT_FOUND ;
sortie_eurprice_tmp.CATEGORY_NOT_FOUND = sortie_cm_size_.CATEGORY_NOT_FOUND ;
sortie_eurprice_tmp.REF_NOT_FOUND = sortie_cm_size_.REF_NOT_FOUND ;
sortie_eurprice_tmp.DESCRIPTION_NOT_FOUND = sortie_cm_size_.DESCRIPTION_NOT_FOUND ;
sortie_eurprice_tmp.STYLE_NOT_FOUND = sortie_cm_size_.STYLE_NOT_FOUND ;
sortie_eurprice_tmp.COLOR_NAME_NOT_FOUND = sortie_cm_size_.COLOR_NAME_NOT_FOUND ;
sortie_eurprice_tmp.LBL_NOT_FOUND = sortie_cm_size_.LBL_NOT_FOUND ;
sortie_eurprice_tmp.STYLE_COLOR_NOT_FOUND = sortie_cm_size_.STYLE_COLOR_NOT_FOUND ;
sortie_eurprice_tmp.STYLECOLORLABEL_NOT_FOUND = sortie_cm_size_.STYLECOLORLABEL_NOT_FOUND ;
sortie_eurprice_tmp.GENDER_NOT_FOUND = sortie_cm_size_.GENDER_NOT_FOUND ;
sortie_eurprice_tmp.AGE_RANGE_NOT_FOUND = sortie_cm_size_.AGE_RANGE_NOT_FOUND ;
sortie_eurprice_tmp.SIZE_RANGE_NOT_FOUND = sortie_cm_size_.SIZE_RANGE_NOT_FOUND ;
sortie_eurprice_tmp.SIZE_NOT_FOUND = sortie_cm_size_.SIZE_NOT_FOUND ;
sortie_eurprice_tmp.US_SIZE_NOT_FOUND = sortie_cm_size_.US_SIZE_NOT_FOUND ;
sortie_eurprice_tmp.PRODUCT_NOT_FOUND = sortie_cm_size_.PRODUCT_NOT_FOUND ;
sortie_eurprice_tmp.FASHION_NOT_FOUND = sortie_cm_size_.FASHION_NOT_FOUND ;
sortie_eurprice_tmp.PRODUCT_STATUS_NOT_FOUND = sortie_cm_size_.PRODUCT_STATUS_NOT_FOUND ;
sortie_eurprice_tmp.PRODUCT_TIER_NOT_FOUND = sortie_cm_size_.PRODUCT_TIER_NOT_FOUND ;
sortie_eurprice_tmp.SIZE_RATIO_SPLIT_NOT_FOUND = sortie_cm_size_.SIZE_RATIO_SPLIT_NOT_FOUND ;
sortie_eurprice_tmp.ATTRIBUTE_NOT_FOUND = sortie_cm_size_.ATTRIBUTE_NOT_FOUND ;
sortie_eurprice_tmp.UNITS_NOT_FOUND = sortie_cm_size_.UNITS_NOT_FOUND ;
sortie_eurprice_tmp.COO_NOT_FOUND = sortie_cm_size_.COO_NOT_FOUND ;
sortie_eurprice_tmp.EUR_RRP_WSP_NOT_FOUND = (StringHandling.TRIM(sortie_cm_size_.EUR_RRP ) == "" || StringHandling.TRIM(sortie_cm_size_.EUR_RRP) == null || StringHandling.TRIM(sortie_cm_size_.EUR_WSP ) == "" || StringHandling.TRIM(sortie_cm_size_.EUR_WSP) == null)  ? "RRP and WSP ARE MANTORY" :
(Mathematical.NUM(sortie_cm_size_.EUR_RRP.replaceAll(",", "").replaceAll("\\.", "").replaceAll("\\-", "")) == 0 || Mathematical.NUM(sortie_cm_size_.EUR_WSP.replaceAll(",", "").replaceAll("\\.", "").replaceAll("\\-", "")) == 0) ? "ERROR : RRP and WSP MUST BE NUMERIC" :
(Mathematical.REAL(sortie_cm_size_.EUR_RRP.replaceAll(",", ".") ) == 0 || Mathematical.REAL(sortie_cm_size_.EUR_WSP.replaceAll(",", ".") ) == 0) ? "ERROR : RRP and WSP MUST BE DIFFERENT THAN 0" :
(Mathematical.REAL(sortie_cm_size_.EUR_RRP.replaceAll(",", ".") ) < 0 || Mathematical.REAL(sortie_cm_size_.EUR_WSP.replaceAll(",", ".") ) < 0) ? "ERROR : NEGATIVE VALUE IS FORBIDDEN":
Mathematical.REAL(sortie_cm_size_.EUR_RRP.replaceAll(",", ".") ) < Mathematical.REAL(sortie_cm_size_.EUR_WSP.replaceAll(",", ".") ) ? "ERROR : RRP PRICE LESS THAN WSP FORBIDDEN"
: "" ;
sortie_eurprice_tmp.GBP_RRP_WSP_NOT_FOUND = ((StringHandling.TRIM(sortie_cm_size_.GBP_RRP ) == "" || StringHandling.TRIM(sortie_cm_size_.GBP_RRP) == null) && (StringHandling.TRIM(sortie_cm_size_.GBP_WSP ) == "" || StringHandling.TRIM(sortie_cm_size_.GBP_WSP) == null))  ? "" :
StringHandling.TRIM(sortie_cm_size_.GBP_RRP ) == "" || StringHandling.TRIM(sortie_cm_size_.GBP_RRP) == null || StringHandling.TRIM(sortie_cm_size_.GBP_WSP ) == "" || StringHandling.TRIM(sortie_cm_size_.GBP_WSP) == null  ? "RRP and WSP ARE MANTORY" : 
(Mathematical.NUM(sortie_cm_size_.GBP_RRP.replaceAll(",", "").replaceAll("\\.", "").replaceAll("\\-", "")) == 0 || Mathematical.NUM(sortie_cm_size_.GBP_WSP.replaceAll(",", "").replaceAll("\\.", "").replaceAll("\\-", "")) == 0) ? "ERROR : RRP and WSP MUST BE NUMERIC" :
(Mathematical.REAL(sortie_cm_size_.GBP_RRP.replaceAll(",", ".") ) == 0 || Mathematical.REAL(sortie_cm_size_.GBP_WSP.replaceAll(",", ".") ) == 0) ? "ERROR : RRP and WSP MUST BE DIFFERENT THAN 0" :
(Mathematical.REAL(sortie_cm_size_.GBP_RRP.replaceAll(",", ".") ) < 0 || Mathematical.REAL(sortie_cm_size_.GBP_WSP.replaceAll(",", ".") ) < 0) ? "ERROR : NEGATIVE VALUE IS FORBIDDEN":
Mathematical.REAL(sortie_cm_size_.GBP_RRP.replaceAll(",", ".") ) < Mathematical.REAL(sortie_cm_size_.GBP_WSP.replaceAll(",", ".") ) ? "ERROR : RRP PRICE LESS THAN WSP FORBIDDEN"
: "" ;
sortie_eurprice_tmp.CHF_RRP_WSP_NOT_FOUND = ((StringHandling.TRIM(sortie_cm_size_.CHF_RRP ) == "" || StringHandling.TRIM(sortie_cm_size_.CHF_RRP) == null) && (StringHandling.TRIM(sortie_cm_size_.CHF_WSP ) == "" || StringHandling.TRIM(sortie_cm_size_.CHF_WSP) == null))  ? "" :
StringHandling.TRIM(sortie_cm_size_.CHF_RRP ) == "" || StringHandling.TRIM(sortie_cm_size_.CHF_RRP) == null || StringHandling.TRIM(sortie_cm_size_.CHF_WSP ) == "" || StringHandling.TRIM(sortie_cm_size_.CHF_WSP) == null  ? "RRP and WSP ARE MANTORY" : 
(Mathematical.NUM(sortie_cm_size_.CHF_RRP.replaceAll(",", "").replaceAll("\\.", "").replaceAll("\\-", "")) == 0 || Mathematical.NUM(sortie_cm_size_.CHF_WSP.replaceAll(",", "").replaceAll("\\.", "").replaceAll("\\-", "")) == 0) ? "ERROR : RRP and WSP MUST BE NUMERIC" :
(Mathematical.REAL(sortie_cm_size_.CHF_RRP.replaceAll(",", ".") ) == 0 || Mathematical.REAL(sortie_cm_size_.CHF_WSP.replaceAll(",", ".") ) == 0) ? "ERROR : RRP and WSP MUST BE DIFFERENT THAN 0" :
(Mathematical.REAL(sortie_cm_size_.CHF_RRP.replaceAll(",", ".") ) < 0 || Mathematical.REAL(sortie_cm_size_.CHF_WSP.replaceAll(",", ".") ) < 0) ? "ERROR : NEGATIVE VALUE IS FORBIDDEN":
Mathematical.REAL(sortie_cm_size_.CHF_RRP.replaceAll(",", ".") ) < Mathematical.REAL(sortie_cm_size_.CHF_WSP.replaceAll(",", ".") ) ? "ERROR : RRP PRICE LESS THAN WSP FORBIDDEN"
: "" ;
sortie_eurprice_tmp.NOK_RRP_WSP_NOT_FOUND = ((StringHandling.TRIM(sortie_cm_size_.NOK_RRP ) == "" || StringHandling.TRIM(sortie_cm_size_.NOK_RRP) == null) && (StringHandling.TRIM(sortie_cm_size_.NOK_WSP ) == "" || StringHandling.TRIM(sortie_cm_size_.NOK_WSP) == null))  ? "" :
StringHandling.TRIM(sortie_cm_size_.NOK_RRP ) == "" || StringHandling.TRIM(sortie_cm_size_.NOK_RRP) == null || StringHandling.TRIM(sortie_cm_size_.NOK_WSP ) == "" || StringHandling.TRIM(sortie_cm_size_.NOK_WSP) == null  ? "RRP and WSP ARE MANTORY" : 
(Mathematical.NUM(sortie_cm_size_.NOK_RRP.replaceAll(",", "").replaceAll("\\.", "").replaceAll("\\-", "")) == 0 || Mathematical.NUM(sortie_cm_size_.NOK_WSP.replaceAll(",", "").replaceAll("\\.", "").replaceAll("\\-", "")) == 0) ? "ERROR : RRP and WSP MUST BE NUMERIC" :
(Mathematical.REAL(sortie_cm_size_.NOK_RRP.replaceAll(",", ".") ) == 0 || Mathematical.REAL(sortie_cm_size_.NOK_WSP.replaceAll(",", ".") ) == 0) ? "ERROR : RRP and WSP MUST BE DIFFERENT THAN 0" :
(Mathematical.REAL(sortie_cm_size_.NOK_RRP.replaceAll(",", ".") ) < 0 || Mathematical.REAL(sortie_cm_size_.NOK_WSP.replaceAll(",", ".") ) < 0) ? "ERROR : NEGATIVE VALUE IS FORBIDDEN":
Mathematical.REAL(sortie_cm_size_.NOK_RRP.replaceAll(",", ".") ) < Mathematical.REAL(sortie_cm_size_.NOK_WSP.replaceAll(",", ".") ) ? "ERROR : RRP PRICE LESS THAN WSP FORBIDDEN"
: "" ;
sortie_eurprice_tmp.DKK_RRP_WSP_NOT_FOUND = ((StringHandling.TRIM(sortie_cm_size_.DKK_RRP ) == "" || StringHandling.TRIM(sortie_cm_size_.DKK_RRP) == null) && (StringHandling.TRIM(sortie_cm_size_.DKK_WSP ) == "" || StringHandling.TRIM(sortie_cm_size_.DKK_WSP) == null))  ? "" :
StringHandling.TRIM(sortie_cm_size_.DKK_RRP ) == "" || StringHandling.TRIM(sortie_cm_size_.DKK_RRP) == null || StringHandling.TRIM(sortie_cm_size_.DKK_WSP ) == "" || StringHandling.TRIM(sortie_cm_size_.DKK_WSP) == null  ? "RRP and WSP ARE MANTORY" : 
(Mathematical.NUM(sortie_cm_size_.DKK_RRP.replaceAll(",", "").replaceAll("\\.", "").replaceAll("\\-", "")) == 0 || Mathematical.NUM(sortie_cm_size_.DKK_WSP.replaceAll(",", "").replaceAll("\\.", "").replaceAll("\\-", "")) == 0) ? "ERROR : RRP and WSP MUST BE NUMERIC" :
(Mathematical.REAL(sortie_cm_size_.DKK_RRP.replaceAll(",", ".") ) == 0 || Mathematical.REAL(sortie_cm_size_.DKK_WSP.replaceAll(",", ".") ) == 0) ? "ERROR : RRP and WSP MUST BE DIFFERENT THAN 0" :
(Mathematical.REAL(sortie_cm_size_.DKK_RRP.replaceAll(",", ".") ) < 0 || Mathematical.REAL(sortie_cm_size_.DKK_WSP.replaceAll(",", ".") ) < 0) ? "ERROR : NEGATIVE VALUE IS FORBIDDEN":
Mathematical.REAL(sortie_cm_size_.DKK_RRP.replaceAll(",", ".") ) < Mathematical.REAL(sortie_cm_size_.DKK_WSP.replaceAll(",", ".") ) ? "ERROR : RRP PRICE LESS THAN WSP FORBIDDEN"
: "" ;
sortie_eurprice_tmp.SEK_RRP_WSP_NOT_FOUND = ((StringHandling.TRIM(sortie_cm_size_.SEK_RRP ) == "" || StringHandling.TRIM(sortie_cm_size_.SEK_RRP) == null) && (StringHandling.TRIM(sortie_cm_size_.SEK_WSP ) == "" || StringHandling.TRIM(sortie_cm_size_.SEK_WSP) == null))  ? "" :
StringHandling.TRIM(sortie_cm_size_.SEK_RRP ) == "" || StringHandling.TRIM(sortie_cm_size_.SEK_RRP) == null || StringHandling.TRIM(sortie_cm_size_.SEK_WSP ) == "" || StringHandling.TRIM(sortie_cm_size_.SEK_WSP) == null  ? "RRP and WSP ARE MANTORY" : 
(Mathematical.NUM(sortie_cm_size_.SEK_RRP.replaceAll(",", "").replaceAll("\\.", "").replaceAll("\\-", "")) == 0 || Mathematical.NUM(sortie_cm_size_.SEK_WSP.replaceAll(",", "").replaceAll("\\.", "").replaceAll("\\-", "")) == 0) ? "ERROR : RRP and WSP MUST BE NUMERIC" :
(Mathematical.REAL(sortie_cm_size_.SEK_RRP.replaceAll(",", ".") ) == 0 || Mathematical.REAL(sortie_cm_size_.SEK_WSP.replaceAll(",", ".") ) == 0) ? "ERROR : RRP and WSP MUST BE DIFFERENT THAN 0" :
(Mathematical.REAL(sortie_cm_size_.SEK_RRP.replaceAll(",", ".") ) < 0 || Mathematical.REAL(sortie_cm_size_.SEK_WSP.replaceAll(",", ".") ) < 0) ? "ERROR : NEGATIVE VALUE IS FORBIDDEN":
Mathematical.REAL(sortie_cm_size_.SEK_RRP.replaceAll(",", ".") ) < Mathematical.REAL(sortie_cm_size_.SEK_WSP.replaceAll(",", ".") ) ? "ERROR : RRP PRICE LESS THAN WSP FORBIDDEN"
: "" ;
sortie_eurprice_tmp.EUR_FINN_RRP_WSP_NOT_FOUND = ((StringHandling.TRIM(sortie_cm_size_.EUR_FINN_RRP ) == "" || StringHandling.TRIM(sortie_cm_size_.EUR_FINN_RRP) == null) && (StringHandling.TRIM(sortie_cm_size_.EUR_FINN_WSP ) == "" || StringHandling.TRIM(sortie_cm_size_.EUR_FINN_WSP) == null))  ? "" :
StringHandling.TRIM(sortie_cm_size_.EUR_FINN_RRP ) == "" || StringHandling.TRIM(sortie_cm_size_.EUR_FINN_RRP) == null || StringHandling.TRIM(sortie_cm_size_.EUR_FINN_WSP ) == "" || StringHandling.TRIM(sortie_cm_size_.EUR_FINN_WSP) == null  ? "RRP and WSP ARE MANTORY" : 
(Mathematical.NUM(sortie_cm_size_.EUR_FINN_RRP.replaceAll(",", "").replaceAll("\\.", "").replaceAll("\\-", "")) == 0 || Mathematical.NUM(sortie_cm_size_.EUR_FINN_WSP.replaceAll(",", "").replaceAll("\\.", "").replaceAll("\\-", "")) == 0) ? "ERROR : RRP and WSP MUST BE NUMERIC" :
(Mathematical.REAL(sortie_cm_size_.EUR_FINN_RRP.replaceAll(",", ".") ) == 0 || Mathematical.REAL(sortie_cm_size_.EUR_FINN_WSP.replaceAll(",", ".") ) == 0) ? "ERROR : RRP and WSP MUST BE DIFFERENT THAN 0" :
(Mathematical.REAL(sortie_cm_size_.EUR_FINN_RRP.replaceAll(",", ".") ) < 0 || Mathematical.REAL(sortie_cm_size_.EUR_FINN_WSP.replaceAll(",", ".") ) < 0) ? "ERROR : NEGATIVE VALUE IS FORBIDDEN":
Mathematical.REAL(sortie_cm_size_.EUR_FINN_RRP.replaceAll(",", ".") ) < Mathematical.REAL(sortie_cm_size_.EUR_FINN_WSP.replaceAll(",", ".") ) ? "ERROR : RRP PRICE LESS THAN WSP FORBIDDEN"
: "" ;
sortie_eurprice_tmp.CM_SIZE_NOT_FOUND = sortie_cm_size_.CM_SIZE_NOT_FOUND ;
sortie_eurprice = sortie_eurprice_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_13 = false;










 


	tos_count_tMap_13++;

/**
 * [tMap_13 main ] stop
 */
	
	/**
	 * [tMap_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_13";

	

 



/**
 * [tMap_13 process_data_begin ] stop
 */
// Start of branch "sortie_eurprice"
if(sortie_eurprice != null) { 



	
	/**
	 * [tLogRow_5 main ] start
	 */

	

	
	
	currentComponent="tLogRow_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_eurprice");
					}
					
///////////////////////		
						

				
				String[] row_tLogRow_5 = new String[81];
   				
	    		if(sortie_eurprice.LINE_NUMBER != null) { //              
                 row_tLogRow_5[0]=    						    
				                String.valueOf(sortie_eurprice.LINE_NUMBER)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie_eurprice.DYNAMICS_COLOR != null) { //              
                 row_tLogRow_5[1]=    						    
				                String.valueOf(sortie_eurprice.DYNAMICS_COLOR)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie_eurprice.DYNAMICS_BRAND != null) { //              
                 row_tLogRow_5[2]=    						    
				                String.valueOf(sortie_eurprice.DYNAMICS_BRAND)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie_eurprice.BRAND != null) { //              
                 row_tLogRow_5[3]=    						    
				                String.valueOf(sortie_eurprice.BRAND)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie_eurprice.SEASON != null) { //              
                 row_tLogRow_5[4]=    						    
				                String.valueOf(sortie_eurprice.SEASON)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie_eurprice.CATEGORY != null) { //              
                 row_tLogRow_5[5]=    						    
				                String.valueOf(sortie_eurprice.CATEGORY)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie_eurprice.REF != null) { //              
                 row_tLogRow_5[6]=    						    
				                String.valueOf(sortie_eurprice.REF)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie_eurprice.DESCRIPTION != null) { //              
                 row_tLogRow_5[7]=    						    
				                String.valueOf(sortie_eurprice.DESCRIPTION)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie_eurprice.STYLE != null) { //              
                 row_tLogRow_5[8]=    						    
				                String.valueOf(sortie_eurprice.STYLE)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie_eurprice.COLOR != null) { //              
                 row_tLogRow_5[9]=    						    
				                String.valueOf(sortie_eurprice.COLOR)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie_eurprice.FASHION != null) { //              
                 row_tLogRow_5[10]=    						    
				                String.valueOf(sortie_eurprice.FASHION)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie_eurprice.STYLECOLORLABEL != null) { //              
                 row_tLogRow_5[11]=    						    
				                String.valueOf(sortie_eurprice.STYLECOLORLABEL)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie_eurprice.COLORNAME != null) { //              
                 row_tLogRow_5[12]=    						    
				                String.valueOf(sortie_eurprice.COLORNAME)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie_eurprice.LBL != null) { //              
                 row_tLogRow_5[13]=    						    
				                String.valueOf(sortie_eurprice.LBL)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie_eurprice.STYLE_COLOR != null) { //              
                 row_tLogRow_5[14]=    						    
				                String.valueOf(sortie_eurprice.STYLE_COLOR)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie_eurprice.GENDER != null) { //              
                 row_tLogRow_5[15]=    						    
				                String.valueOf(sortie_eurprice.GENDER)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie_eurprice.AGE_RANGE != null) { //              
                 row_tLogRow_5[16]=    						    
				                String.valueOf(sortie_eurprice.AGE_RANGE)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie_eurprice.SIZE_RANGE != null) { //              
                 row_tLogRow_5[17]=    						    
				                String.valueOf(sortie_eurprice.SIZE_RANGE)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie_eurprice.SIZE != null) { //              
                 row_tLogRow_5[18]=    						    
				                String.valueOf(sortie_eurprice.SIZE)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie_eurprice.US_SIZE != null) { //              
                 row_tLogRow_5[19]=    						    
				                String.valueOf(sortie_eurprice.US_SIZE)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie_eurprice.CM_SIZE != null) { //              
                 row_tLogRow_5[20]=    						    
				                String.valueOf(sortie_eurprice.CM_SIZE)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie_eurprice.PRODUCT != null) { //              
                 row_tLogRow_5[21]=    						    
				                String.valueOf(sortie_eurprice.PRODUCT)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie_eurprice.PRODUCT_STATUS != null) { //              
                 row_tLogRow_5[22]=    						    
				                String.valueOf(sortie_eurprice.PRODUCT_STATUS)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie_eurprice.PRODUCT_TIER != null) { //              
                 row_tLogRow_5[23]=    						    
				                String.valueOf(sortie_eurprice.PRODUCT_TIER)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie_eurprice.ACCT_EXCLUS != null) { //              
                 row_tLogRow_5[24]=    						    
				                String.valueOf(sortie_eurprice.ACCT_EXCLUS)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie_eurprice.SIZE_RATIO_SPLIT != null) { //              
                 row_tLogRow_5[25]=    						    
				                String.valueOf(sortie_eurprice.SIZE_RATIO_SPLIT)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie_eurprice.REC_SIZE_SPLIT != null) { //              
                 row_tLogRow_5[26]=    						    
				                String.valueOf(sortie_eurprice.REC_SIZE_SPLIT)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie_eurprice.CARTON_QTY != null) { //              
                 row_tLogRow_5[27]=    						    
				                String.valueOf(sortie_eurprice.CARTON_QTY)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie_eurprice.ATTRIBUTE != null) { //              
                 row_tLogRow_5[28]=    						    
				                String.valueOf(sortie_eurprice.ATTRIBUTE)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie_eurprice.UNITS != null) { //              
                 row_tLogRow_5[29]=    						    
				                String.valueOf(sortie_eurprice.UNITS)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie_eurprice.EUR_RRP != null) { //              
                 row_tLogRow_5[30]=    						    
				                String.valueOf(sortie_eurprice.EUR_RRP)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie_eurprice.EUR_WSP != null) { //              
                 row_tLogRow_5[31]=    						    
				                String.valueOf(sortie_eurprice.EUR_WSP)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie_eurprice.GBP_RRP != null) { //              
                 row_tLogRow_5[32]=    						    
				                String.valueOf(sortie_eurprice.GBP_RRP)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie_eurprice.GBP_WSP != null) { //              
                 row_tLogRow_5[33]=    						    
				                String.valueOf(sortie_eurprice.GBP_WSP)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie_eurprice.CHF_RRP != null) { //              
                 row_tLogRow_5[34]=    						    
				                String.valueOf(sortie_eurprice.CHF_RRP)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie_eurprice.CHF_WSP != null) { //              
                 row_tLogRow_5[35]=    						    
				                String.valueOf(sortie_eurprice.CHF_WSP)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie_eurprice.NOK_RRP != null) { //              
                 row_tLogRow_5[36]=    						    
				                String.valueOf(sortie_eurprice.NOK_RRP)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie_eurprice.NOK_WSP != null) { //              
                 row_tLogRow_5[37]=    						    
				                String.valueOf(sortie_eurprice.NOK_WSP)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie_eurprice.DKK_RRP != null) { //              
                 row_tLogRow_5[38]=    						    
				                String.valueOf(sortie_eurprice.DKK_RRP)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie_eurprice.DKK_WSP != null) { //              
                 row_tLogRow_5[39]=    						    
				                String.valueOf(sortie_eurprice.DKK_WSP)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie_eurprice.SEK_RRP != null) { //              
                 row_tLogRow_5[40]=    						    
				                String.valueOf(sortie_eurprice.SEK_RRP)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie_eurprice.SEK_WSP != null) { //              
                 row_tLogRow_5[41]=    						    
				                String.valueOf(sortie_eurprice.SEK_WSP)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie_eurprice.EUR_FINN_RRP != null) { //              
                 row_tLogRow_5[42]=    						    
				                String.valueOf(sortie_eurprice.EUR_FINN_RRP)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie_eurprice.EUR_FINN_WSP != null) { //              
                 row_tLogRow_5[43]=    						    
				                String.valueOf(sortie_eurprice.EUR_FINN_WSP)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie_eurprice.FABRICATION != null) { //              
                 row_tLogRow_5[44]=    						    
				                String.valueOf(sortie_eurprice.FABRICATION)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie_eurprice.COO != null) { //              
                 row_tLogRow_5[45]=    						    
				                String.valueOf(sortie_eurprice.COO)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie_eurprice.CUSTOM_TARIFF_CODE != null) { //              
                 row_tLogRow_5[46]=    						    
				                String.valueOf(sortie_eurprice.CUSTOM_TARIFF_CODE)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie_eurprice.UPC != null) { //              
                 row_tLogRow_5[47]=    						    
				                String.valueOf(sortie_eurprice.UPC)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie_eurprice.SMU_TYPE != null) { //              
                 row_tLogRow_5[48]=    						    
				                String.valueOf(sortie_eurprice.SMU_TYPE)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie_eurprice.BRAND_NOT_FOUND != null) { //              
                 row_tLogRow_5[49]=    						    
				                String.valueOf(sortie_eurprice.BRAND_NOT_FOUND)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie_eurprice.SEASON_NOT_FOUND != null) { //              
                 row_tLogRow_5[50]=    						    
				                String.valueOf(sortie_eurprice.SEASON_NOT_FOUND)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie_eurprice.COLOR_NOT_FOUND != null) { //              
                 row_tLogRow_5[51]=    						    
				                String.valueOf(sortie_eurprice.COLOR_NOT_FOUND)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie_eurprice.CATEGORY_NOT_FOUND != null) { //              
                 row_tLogRow_5[52]=    						    
				                String.valueOf(sortie_eurprice.CATEGORY_NOT_FOUND)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie_eurprice.REF_NOT_FOUND != null) { //              
                 row_tLogRow_5[53]=    						    
				                String.valueOf(sortie_eurprice.REF_NOT_FOUND)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie_eurprice.DESCRIPTION_NOT_FOUND != null) { //              
                 row_tLogRow_5[54]=    						    
				                String.valueOf(sortie_eurprice.DESCRIPTION_NOT_FOUND)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie_eurprice.STYLE_NOT_FOUND != null) { //              
                 row_tLogRow_5[55]=    						    
				                String.valueOf(sortie_eurprice.STYLE_NOT_FOUND)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie_eurprice.COLOR_NAME_NOT_FOUND != null) { //              
                 row_tLogRow_5[56]=    						    
				                String.valueOf(sortie_eurprice.COLOR_NAME_NOT_FOUND)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie_eurprice.LBL_NOT_FOUND != null) { //              
                 row_tLogRow_5[57]=    						    
				                String.valueOf(sortie_eurprice.LBL_NOT_FOUND)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie_eurprice.STYLE_COLOR_NOT_FOUND != null) { //              
                 row_tLogRow_5[58]=    						    
				                String.valueOf(sortie_eurprice.STYLE_COLOR_NOT_FOUND)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie_eurprice.STYLECOLORLABEL_NOT_FOUND != null) { //              
                 row_tLogRow_5[59]=    						    
				                String.valueOf(sortie_eurprice.STYLECOLORLABEL_NOT_FOUND)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie_eurprice.GENDER_NOT_FOUND != null) { //              
                 row_tLogRow_5[60]=    						    
				                String.valueOf(sortie_eurprice.GENDER_NOT_FOUND)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie_eurprice.AGE_RANGE_NOT_FOUND != null) { //              
                 row_tLogRow_5[61]=    						    
				                String.valueOf(sortie_eurprice.AGE_RANGE_NOT_FOUND)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie_eurprice.SIZE_RANGE_NOT_FOUND != null) { //              
                 row_tLogRow_5[62]=    						    
				                String.valueOf(sortie_eurprice.SIZE_RANGE_NOT_FOUND)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie_eurprice.SIZE_NOT_FOUND != null) { //              
                 row_tLogRow_5[63]=    						    
				                String.valueOf(sortie_eurprice.SIZE_NOT_FOUND)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie_eurprice.US_SIZE_NOT_FOUND != null) { //              
                 row_tLogRow_5[64]=    						    
				                String.valueOf(sortie_eurprice.US_SIZE_NOT_FOUND)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie_eurprice.PRODUCT_NOT_FOUND != null) { //              
                 row_tLogRow_5[65]=    						    
				                String.valueOf(sortie_eurprice.PRODUCT_NOT_FOUND)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie_eurprice.FASHION_NOT_FOUND != null) { //              
                 row_tLogRow_5[66]=    						    
				                String.valueOf(sortie_eurprice.FASHION_NOT_FOUND)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie_eurprice.PRODUCT_STATUS_NOT_FOUND != null) { //              
                 row_tLogRow_5[67]=    						    
				                String.valueOf(sortie_eurprice.PRODUCT_STATUS_NOT_FOUND)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie_eurprice.PRODUCT_TIER_NOT_FOUND != null) { //              
                 row_tLogRow_5[68]=    						    
				                String.valueOf(sortie_eurprice.PRODUCT_TIER_NOT_FOUND)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie_eurprice.SIZE_RATIO_SPLIT_NOT_FOUND != null) { //              
                 row_tLogRow_5[69]=    						    
				                String.valueOf(sortie_eurprice.SIZE_RATIO_SPLIT_NOT_FOUND)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie_eurprice.ATTRIBUTE_NOT_FOUND != null) { //              
                 row_tLogRow_5[70]=    						    
				                String.valueOf(sortie_eurprice.ATTRIBUTE_NOT_FOUND)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie_eurprice.UNITS_NOT_FOUND != null) { //              
                 row_tLogRow_5[71]=    						    
				                String.valueOf(sortie_eurprice.UNITS_NOT_FOUND)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie_eurprice.COO_NOT_FOUND != null) { //              
                 row_tLogRow_5[72]=    						    
				                String.valueOf(sortie_eurprice.COO_NOT_FOUND)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie_eurprice.EUR_RRP_WSP_NOT_FOUND != null) { //              
                 row_tLogRow_5[73]=    						    
				                String.valueOf(sortie_eurprice.EUR_RRP_WSP_NOT_FOUND)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie_eurprice.GBP_RRP_WSP_NOT_FOUND != null) { //              
                 row_tLogRow_5[74]=    						    
				                String.valueOf(sortie_eurprice.GBP_RRP_WSP_NOT_FOUND)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie_eurprice.CHF_RRP_WSP_NOT_FOUND != null) { //              
                 row_tLogRow_5[75]=    						    
				                String.valueOf(sortie_eurprice.CHF_RRP_WSP_NOT_FOUND)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie_eurprice.NOK_RRP_WSP_NOT_FOUND != null) { //              
                 row_tLogRow_5[76]=    						    
				                String.valueOf(sortie_eurprice.NOK_RRP_WSP_NOT_FOUND)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie_eurprice.DKK_RRP_WSP_NOT_FOUND != null) { //              
                 row_tLogRow_5[77]=    						    
				                String.valueOf(sortie_eurprice.DKK_RRP_WSP_NOT_FOUND)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie_eurprice.SEK_RRP_WSP_NOT_FOUND != null) { //              
                 row_tLogRow_5[78]=    						    
				                String.valueOf(sortie_eurprice.SEK_RRP_WSP_NOT_FOUND)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie_eurprice.EUR_FINN_RRP_WSP_NOT_FOUND != null) { //              
                 row_tLogRow_5[79]=    						    
				                String.valueOf(sortie_eurprice.EUR_FINN_RRP_WSP_NOT_FOUND)			
					          ;	
							
	    		} //			
    			   				
	    		if(sortie_eurprice.CM_SIZE_NOT_FOUND != null) { //              
                 row_tLogRow_5[80]=    						    
				                String.valueOf(sortie_eurprice.CM_SIZE_NOT_FOUND)			
					          ;	
							
	    		} //			
    			 

				util_tLogRow_5.addRow(row_tLogRow_5);	
				nb_line_tLogRow_5++;
//////

//////                    
                    
///////////////////////    			

 
     row5 = sortie_eurprice;


	tos_count_tLogRow_5++;

/**
 * [tLogRow_5 main ] stop
 */
	
	/**
	 * [tLogRow_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_5";

	

 



/**
 * [tLogRow_5 process_data_begin ] stop
 */

	
	/**
	 * [tFilterRow_1 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row5");
					}
					

          row6 = null;
    Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1("||");
            ope_tFilterRow_1.matches((row5.COLOR_NOT_FOUND == null? false : row5.COLOR_NOT_FOUND.compareTo("") != 0)
                           , "COLOR_NOT_FOUND.compareTo(\"\") != 0 failed");
            ope_tFilterRow_1.matches((row5.BRAND_NOT_FOUND == null? false : row5.BRAND_NOT_FOUND.compareTo("") != 0)
                           , "BRAND_NOT_FOUND.compareTo(\"\") != 0 failed");
            ope_tFilterRow_1.matches((row5.SEASON_NOT_FOUND == null? false : row5.SEASON_NOT_FOUND.compareTo("") != 0)
                           , "SEASON_NOT_FOUND.compareTo(\"\") != 0 failed");
            ope_tFilterRow_1.matches((row5.CATEGORY_NOT_FOUND == null? false : row5.CATEGORY_NOT_FOUND.compareTo("") != 0)
                           , "CATEGORY_NOT_FOUND.compareTo(\"\") != 0 failed");
            ope_tFilterRow_1.matches((row5.REF_NOT_FOUND == null? false : row5.REF_NOT_FOUND.compareTo("") != 0)
                           , "REF_NOT_FOUND.compareTo(\"\") != 0 failed");
            ope_tFilterRow_1.matches((row5.DESCRIPTION_NOT_FOUND == null? false : row5.DESCRIPTION_NOT_FOUND.compareTo("") != 0)
                           , "DESCRIPTION_NOT_FOUND.compareTo(\"\") != 0 failed");
            ope_tFilterRow_1.matches((row5.STYLE_NOT_FOUND == null? false : row5.STYLE_NOT_FOUND.compareTo("") != 0)
                           , "STYLE_NOT_FOUND.compareTo(\"\") != 0 failed");
            ope_tFilterRow_1.matches((row5.COLOR_NAME_NOT_FOUND == null? false : row5.COLOR_NAME_NOT_FOUND.compareTo("") != 0)
                           , "COLOR_NAME_NOT_FOUND.compareTo(\"\") != 0 failed");
            ope_tFilterRow_1.matches((row5.LBL_NOT_FOUND == null? false : row5.LBL_NOT_FOUND.compareTo("") != 0)
                           , "LBL_NOT_FOUND.compareTo(\"\") != 0 failed");
            ope_tFilterRow_1.matches((row5.STYLE_COLOR_NOT_FOUND == null? false : row5.STYLE_COLOR_NOT_FOUND.compareTo("") != 0)
                           , "STYLE_COLOR_NOT_FOUND.compareTo(\"\") != 0 failed");
            ope_tFilterRow_1.matches((row5.STYLECOLORLABEL_NOT_FOUND == null? false : row5.STYLECOLORLABEL_NOT_FOUND.compareTo("") != 0)
                           , "STYLECOLORLABEL_NOT_FOUND.compareTo(\"\") != 0 failed");
            ope_tFilterRow_1.matches((row5.GENDER_NOT_FOUND == null? false : row5.GENDER_NOT_FOUND.compareTo("") != 0)
                           , "GENDER_NOT_FOUND.compareTo(\"\") != 0 failed");
            ope_tFilterRow_1.matches((row5.AGE_RANGE_NOT_FOUND == null? false : row5.AGE_RANGE_NOT_FOUND.compareTo("") != 0)
                           , "AGE_RANGE_NOT_FOUND.compareTo(\"\") != 0 failed");
            ope_tFilterRow_1.matches((row5.SIZE_RANGE_NOT_FOUND == null? false : row5.SIZE_RANGE_NOT_FOUND.compareTo("") != 0)
                           , "SIZE_RANGE_NOT_FOUND.compareTo(\"\") != 0 failed");
            ope_tFilterRow_1.matches((row5.SIZE_NOT_FOUND == null? false : row5.SIZE_NOT_FOUND.compareTo("") != 0)
                           , "SIZE_NOT_FOUND.compareTo(\"\") != 0 failed");
            ope_tFilterRow_1.matches((row5.US_SIZE_NOT_FOUND == null? false : row5.US_SIZE_NOT_FOUND.compareTo("") != 0)
                           , "US_SIZE_NOT_FOUND.compareTo(\"\") != 0 failed");
            ope_tFilterRow_1.matches((row5.PRODUCT_NOT_FOUND == null? false : row5.PRODUCT_NOT_FOUND.compareTo("") != 0)
                           , "PRODUCT_NOT_FOUND.compareTo(\"\") != 0 failed");
            ope_tFilterRow_1.matches((row5.FASHION_NOT_FOUND == null? false : row5.FASHION_NOT_FOUND.compareTo("") != 0)
                           , "FASHION_NOT_FOUND.compareTo(\"\") != 0 failed");
            ope_tFilterRow_1.matches((row5.PRODUCT_STATUS_NOT_FOUND == null? false : row5.PRODUCT_STATUS_NOT_FOUND.compareTo("") != 0)
                           , "PRODUCT_STATUS_NOT_FOUND.compareTo(\"\") != 0 failed");
            ope_tFilterRow_1.matches((row5.PRODUCT_TIER_NOT_FOUND == null? false : row5.PRODUCT_TIER_NOT_FOUND.compareTo("") != 0)
                           , "PRODUCT_TIER_NOT_FOUND.compareTo(\"\") != 0 failed");
            ope_tFilterRow_1.matches((row5.SIZE_RATIO_SPLIT_NOT_FOUND == null? false : row5.SIZE_RATIO_SPLIT_NOT_FOUND.compareTo("") != 0)
                           , "SIZE_RATIO_SPLIT_NOT_FOUND.compareTo(\"\") != 0 failed");
            ope_tFilterRow_1.matches((row5.ATTRIBUTE_NOT_FOUND == null? false : row5.ATTRIBUTE_NOT_FOUND.compareTo("") != 0)
                           , "ATTRIBUTE_NOT_FOUND.compareTo(\"\") != 0 failed");
            ope_tFilterRow_1.matches((row5.UNITS_NOT_FOUND == null? false : row5.UNITS_NOT_FOUND.compareTo("") != 0)
                           , "UNITS_NOT_FOUND.compareTo(\"\") != 0 failed");
            ope_tFilterRow_1.matches((row5.COO_NOT_FOUND == null? false : row5.COO_NOT_FOUND.compareTo("") != 0)
                           , "COO_NOT_FOUND.compareTo(\"\") != 0 failed");
            ope_tFilterRow_1.matches((row5.EUR_RRP_WSP_NOT_FOUND == null? false : row5.EUR_RRP_WSP_NOT_FOUND.compareTo("") != 0)
                           , "EUR_RRP_WSP_NOT_FOUND.compareTo(\"\") != 0 failed");
            ope_tFilterRow_1.matches((row5.GBP_RRP_WSP_NOT_FOUND == null? false : row5.GBP_RRP_WSP_NOT_FOUND.compareTo("") != 0)
                           , "GBP_RRP_WSP_NOT_FOUND.compareTo(\"\") != 0 failed");
            ope_tFilterRow_1.matches((row5.CHF_RRP_WSP_NOT_FOUND == null? false : row5.CHF_RRP_WSP_NOT_FOUND.compareTo("") != 0)
                           , "CHF_RRP_WSP_NOT_FOUND.compareTo(\"\") != 0 failed");
            ope_tFilterRow_1.matches((row5.NOK_RRP_WSP_NOT_FOUND == null? false : row5.NOK_RRP_WSP_NOT_FOUND.compareTo("") != 0)
                           , "NOK_RRP_WSP_NOT_FOUND.compareTo(\"\") != 0 failed");
            ope_tFilterRow_1.matches((row5.DKK_RRP_WSP_NOT_FOUND == null? false : row5.DKK_RRP_WSP_NOT_FOUND.compareTo("") != 0)
                           , "DKK_RRP_WSP_NOT_FOUND.compareTo(\"\") != 0 failed");
            ope_tFilterRow_1.matches((row5.SEK_RRP_WSP_NOT_FOUND == null? false : row5.SEK_RRP_WSP_NOT_FOUND.compareTo("") != 0)
                           , "SEK_RRP_WSP_NOT_FOUND.compareTo(\"\") != 0 failed");
            ope_tFilterRow_1.matches((row5.EUR_FINN_RRP_WSP_NOT_FOUND == null? false : row5.EUR_FINN_RRP_WSP_NOT_FOUND.compareTo("") != 0)
                           , "EUR_FINN_RRP_WSP_NOT_FOUND.compareTo(\"\") != 0 failed");
            ope_tFilterRow_1.matches((row5.CM_SIZE_NOT_FOUND == null? false : row5.CM_SIZE_NOT_FOUND.compareTo("") != 0)
                           , "CM_SIZE_NOT_FOUND.compareTo(\"\") != 0 failed");
    
    if (ope_tFilterRow_1.getMatchFlag()) {
              if(row6 == null){ 
                row6 = new row6Struct();
              }
               row6.LINE_NUMBER = row5.LINE_NUMBER;
               row6.DYNAMICS_COLOR = row5.DYNAMICS_COLOR;
               row6.DYNAMICS_BRAND = row5.DYNAMICS_BRAND;
               row6.BRAND = row5.BRAND;
               row6.SEASON = row5.SEASON;
               row6.CATEGORY = row5.CATEGORY;
               row6.REF = row5.REF;
               row6.DESCRIPTION = row5.DESCRIPTION;
               row6.STYLE = row5.STYLE;
               row6.COLOR = row5.COLOR;
               row6.FASHION = row5.FASHION;
               row6.STYLECOLORLABEL = row5.STYLECOLORLABEL;
               row6.COLORNAME = row5.COLORNAME;
               row6.LBL = row5.LBL;
               row6.STYLE_COLOR = row5.STYLE_COLOR;
               row6.GENDER = row5.GENDER;
               row6.AGE_RANGE = row5.AGE_RANGE;
               row6.SIZE_RANGE = row5.SIZE_RANGE;
               row6.SIZE = row5.SIZE;
               row6.US_SIZE = row5.US_SIZE;
               row6.CM_SIZE = row5.CM_SIZE;
               row6.PRODUCT = row5.PRODUCT;
               row6.PRODUCT_STATUS = row5.PRODUCT_STATUS;
               row6.PRODUCT_TIER = row5.PRODUCT_TIER;
               row6.ACCT_EXCLUS = row5.ACCT_EXCLUS;
               row6.SIZE_RATIO_SPLIT = row5.SIZE_RATIO_SPLIT;
               row6.REC_SIZE_SPLIT = row5.REC_SIZE_SPLIT;
               row6.CARTON_QTY = row5.CARTON_QTY;
               row6.ATTRIBUTE = row5.ATTRIBUTE;
               row6.UNITS = row5.UNITS;
               row6.EUR_RRP = row5.EUR_RRP;
               row6.EUR_WSP = row5.EUR_WSP;
               row6.GBP_RRP = row5.GBP_RRP;
               row6.GBP_WSP = row5.GBP_WSP;
               row6.CHF_RRP = row5.CHF_RRP;
               row6.CHF_WSP = row5.CHF_WSP;
               row6.NOK_RRP = row5.NOK_RRP;
               row6.NOK_WSP = row5.NOK_WSP;
               row6.DKK_RRP = row5.DKK_RRP;
               row6.DKK_WSP = row5.DKK_WSP;
               row6.SEK_RRP = row5.SEK_RRP;
               row6.SEK_WSP = row5.SEK_WSP;
               row6.EUR_FINN_RRP = row5.EUR_FINN_RRP;
               row6.EUR_FINN_WSP = row5.EUR_FINN_WSP;
               row6.FABRICATION = row5.FABRICATION;
               row6.COO = row5.COO;
               row6.CUSTOM_TARIFF_CODE = row5.CUSTOM_TARIFF_CODE;
               row6.UPC = row5.UPC;
               row6.SMU_TYPE = row5.SMU_TYPE;
               row6.BRAND_NOT_FOUND = row5.BRAND_NOT_FOUND;
               row6.SEASON_NOT_FOUND = row5.SEASON_NOT_FOUND;
               row6.COLOR_NOT_FOUND = row5.COLOR_NOT_FOUND;
               row6.CATEGORY_NOT_FOUND = row5.CATEGORY_NOT_FOUND;
               row6.REF_NOT_FOUND = row5.REF_NOT_FOUND;
               row6.DESCRIPTION_NOT_FOUND = row5.DESCRIPTION_NOT_FOUND;
               row6.STYLE_NOT_FOUND = row5.STYLE_NOT_FOUND;
               row6.COLOR_NAME_NOT_FOUND = row5.COLOR_NAME_NOT_FOUND;
               row6.LBL_NOT_FOUND = row5.LBL_NOT_FOUND;
               row6.STYLE_COLOR_NOT_FOUND = row5.STYLE_COLOR_NOT_FOUND;
               row6.STYLECOLORLABEL_NOT_FOUND = row5.STYLECOLORLABEL_NOT_FOUND;
               row6.GENDER_NOT_FOUND = row5.GENDER_NOT_FOUND;
               row6.AGE_RANGE_NOT_FOUND = row5.AGE_RANGE_NOT_FOUND;
               row6.SIZE_RANGE_NOT_FOUND = row5.SIZE_RANGE_NOT_FOUND;
               row6.SIZE_NOT_FOUND = row5.SIZE_NOT_FOUND;
               row6.US_SIZE_NOT_FOUND = row5.US_SIZE_NOT_FOUND;
               row6.PRODUCT_NOT_FOUND = row5.PRODUCT_NOT_FOUND;
               row6.FASHION_NOT_FOUND = row5.FASHION_NOT_FOUND;
               row6.PRODUCT_STATUS_NOT_FOUND = row5.PRODUCT_STATUS_NOT_FOUND;
               row6.PRODUCT_TIER_NOT_FOUND = row5.PRODUCT_TIER_NOT_FOUND;
               row6.SIZE_RATIO_SPLIT_NOT_FOUND = row5.SIZE_RATIO_SPLIT_NOT_FOUND;
               row6.ATTRIBUTE_NOT_FOUND = row5.ATTRIBUTE_NOT_FOUND;
               row6.UNITS_NOT_FOUND = row5.UNITS_NOT_FOUND;
               row6.COO_NOT_FOUND = row5.COO_NOT_FOUND;
               row6.EUR_RRP_WSP_NOT_FOUND = row5.EUR_RRP_WSP_NOT_FOUND;
               row6.GBP_RRP_WSP_NOT_FOUND = row5.GBP_RRP_WSP_NOT_FOUND;
               row6.CHF_RRP_WSP_NOT_FOUND = row5.CHF_RRP_WSP_NOT_FOUND;
               row6.NOK_RRP_WSP_NOT_FOUND = row5.NOK_RRP_WSP_NOT_FOUND;
               row6.DKK_RRP_WSP_NOT_FOUND = row5.DKK_RRP_WSP_NOT_FOUND;
               row6.SEK_RRP_WSP_NOT_FOUND = row5.SEK_RRP_WSP_NOT_FOUND;
               row6.EUR_FINN_RRP_WSP_NOT_FOUND = row5.EUR_FINN_RRP_WSP_NOT_FOUND;
               row6.CM_SIZE_NOT_FOUND = row5.CM_SIZE_NOT_FOUND;    
      nb_line_ok_tFilterRow_1++;
    } else {
      nb_line_reject_tFilterRow_1++;
    }

nb_line_tFilterRow_1++;

 


	tos_count_tFilterRow_1++;

/**
 * [tFilterRow_1 main ] stop
 */
	
	/**
	 * [tFilterRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

 



/**
 * [tFilterRow_1 process_data_begin ] stop
 */
// Start of branch "row6"
if(row6 != null) { 



	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row6");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_4 = false;
		  boolean mainRowRejected_tMap_4 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

sortie_error = null;


// # Output table : 'sortie_error'
sortie_error_tmp.LINE_NUMBER = row6.LINE_NUMBER ;
sortie_error_tmp.STYLECOLORLABEL = row6.STYLECOLORLABEL ;
sortie_error_tmp.BRAND_NOT_FOUND = row6.BRAND_NOT_FOUND ;
sortie_error_tmp.SEASON_NOT_FOUND = row6.SEASON_NOT_FOUND ;
sortie_error_tmp.COLOR_NOT_FOUND = row6.COLOR_NOT_FOUND ;
sortie_error_tmp.CATEGORY_NOT_FOUND = row6.CATEGORY_NOT_FOUND ;
sortie_error_tmp.REF_NOT_FOUND = row6.REF_NOT_FOUND ;
sortie_error_tmp.DESCRIPTION_NOT_FOUND = row6.DESCRIPTION_NOT_FOUND ;
sortie_error_tmp.STYLE_NOT_FOUND = row6.STYLE_NOT_FOUND ;
sortie_error_tmp.COLOR_NAME_NOT_FOUND = row6.COLOR_NAME_NOT_FOUND ;
sortie_error_tmp.LBL_NOT_FOUND = row6.LBL_NOT_FOUND ;
sortie_error_tmp.STYLE_COLOR_NOT_FOUND = row6.STYLE_COLOR_NOT_FOUND ;
sortie_error_tmp.STYLECOLORLABEL_NOT_FOUND = row6.STYLECOLORLABEL_NOT_FOUND ;
sortie_error_tmp.GENDER_NOT_FOUND = row6.GENDER_NOT_FOUND ;
sortie_error_tmp.AGE_RANGE_NOT_FOUND = row6.AGE_RANGE_NOT_FOUND ;
sortie_error_tmp.SIZE_RANGE_NOT_FOUND = row6.SIZE_RANGE_NOT_FOUND ;
sortie_error_tmp.SIZE_NOT_FOUND = row6.SIZE_NOT_FOUND ;
sortie_error_tmp.US_SIZE_NOT_FOUND = row6.US_SIZE_NOT_FOUND ;
sortie_error_tmp.PRODUCT_NOT_FOUND = row6.PRODUCT_NOT_FOUND ;
sortie_error_tmp.FASHION_NOT_FOUND = row6.FASHION_NOT_FOUND ;
sortie_error_tmp.PRODUCT_STATUS_NOT_FOUND = row6.PRODUCT_STATUS_NOT_FOUND ;
sortie_error_tmp.PRODUCT_TIER_NOT_FOUND = row6.PRODUCT_TIER_NOT_FOUND ;
sortie_error_tmp.SIZE_RATIO_SPLIT_NOT_FOUND = row6.SIZE_RATIO_SPLIT_NOT_FOUND ;
sortie_error_tmp.ATTRIBUTE_NOT_FOUND = row6.ATTRIBUTE_NOT_FOUND ;
sortie_error_tmp.UNITS_NOT_FOUND = row6.UNITS_NOT_FOUND ;
sortie_error_tmp.COO_NOT_FOUND = row6.COO_NOT_FOUND ;
sortie_error_tmp.EUR_RRP_NOT_FOUND = row6.EUR_RRP_WSP_NOT_FOUND ;
sortie_error_tmp.GBP_RRP_WSP_NOT_FOUND = row6.GBP_RRP_WSP_NOT_FOUND ;
sortie_error_tmp.CHF_RRP_WSP_NOT_FOUND = row6.CHF_RRP_WSP_NOT_FOUND ;
sortie_error_tmp.NOK_RRP_WSP_NOT_FOUND = row6.NOK_RRP_WSP_NOT_FOUND ;
sortie_error_tmp.DKK_RRP_WSP_NOT_FOUND = row6.DKK_RRP_WSP_NOT_FOUND ;
sortie_error_tmp.SEK_RRP_WSP_NOT_FOUND = row6.SEK_RRP_WSP_NOT_FOUND ;
sortie_error_tmp.EUR_FINN_RRP_WSP_NOT_FOUND = row6.EUR_FINN_RRP_WSP_NOT_FOUND ;
sortie_error_tmp.CM_SIZE_NOT_FOUND = row6.CM_SIZE_NOT_FOUND ;
sortie_error = sortie_error_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "sortie_error"
if(sortie_error != null) { 



	
	/**
	 * [tFileOutputExcel_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_error");
					}
					

				xlsxTool_tFileOutputExcel_1.addRow();
									   				
	    				if(sortie_error.LINE_NUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(Double.parseDouble(String.valueOf(sortie_error.LINE_NUMBER)));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_error.STYLECOLORLABEL != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(sortie_error.STYLECOLORLABEL));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_error.BRAND_NOT_FOUND != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(sortie_error.BRAND_NOT_FOUND));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_error.SEASON_NOT_FOUND != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(sortie_error.SEASON_NOT_FOUND));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_error.COLOR_NOT_FOUND != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(sortie_error.COLOR_NOT_FOUND));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_error.CATEGORY_NOT_FOUND != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(sortie_error.CATEGORY_NOT_FOUND));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_error.REF_NOT_FOUND != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(sortie_error.REF_NOT_FOUND));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_error.DESCRIPTION_NOT_FOUND != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(sortie_error.DESCRIPTION_NOT_FOUND));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_error.STYLE_NOT_FOUND != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(sortie_error.STYLE_NOT_FOUND));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_error.COLOR_NAME_NOT_FOUND != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(sortie_error.COLOR_NAME_NOT_FOUND));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_error.LBL_NOT_FOUND != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(sortie_error.LBL_NOT_FOUND));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_error.STYLE_COLOR_NOT_FOUND != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(sortie_error.STYLE_COLOR_NOT_FOUND));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_error.STYLECOLORLABEL_NOT_FOUND != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(sortie_error.STYLECOLORLABEL_NOT_FOUND));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_error.GENDER_NOT_FOUND != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(sortie_error.GENDER_NOT_FOUND));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_error.AGE_RANGE_NOT_FOUND != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(sortie_error.AGE_RANGE_NOT_FOUND));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_error.SIZE_RANGE_NOT_FOUND != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(sortie_error.SIZE_RANGE_NOT_FOUND));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_error.SIZE_NOT_FOUND != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(sortie_error.SIZE_NOT_FOUND));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_error.US_SIZE_NOT_FOUND != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(sortie_error.US_SIZE_NOT_FOUND));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_error.PRODUCT_NOT_FOUND != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(sortie_error.PRODUCT_NOT_FOUND));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_error.FASHION_NOT_FOUND != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(sortie_error.FASHION_NOT_FOUND));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_error.PRODUCT_STATUS_NOT_FOUND != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(sortie_error.PRODUCT_STATUS_NOT_FOUND));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_error.PRODUCT_TIER_NOT_FOUND != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(sortie_error.PRODUCT_TIER_NOT_FOUND));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_error.SIZE_RATIO_SPLIT_NOT_FOUND != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(sortie_error.SIZE_RATIO_SPLIT_NOT_FOUND));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_error.ATTRIBUTE_NOT_FOUND != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(sortie_error.ATTRIBUTE_NOT_FOUND));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_error.UNITS_NOT_FOUND != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(sortie_error.UNITS_NOT_FOUND));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_error.COO_NOT_FOUND != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(sortie_error.COO_NOT_FOUND));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_error.EUR_RRP_NOT_FOUND != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(sortie_error.EUR_RRP_NOT_FOUND));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_error.GBP_RRP_WSP_NOT_FOUND != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(sortie_error.GBP_RRP_WSP_NOT_FOUND));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_error.CHF_RRP_WSP_NOT_FOUND != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(sortie_error.CHF_RRP_WSP_NOT_FOUND));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_error.NOK_RRP_WSP_NOT_FOUND != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(sortie_error.NOK_RRP_WSP_NOT_FOUND));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_error.DKK_RRP_WSP_NOT_FOUND != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(sortie_error.DKK_RRP_WSP_NOT_FOUND));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_error.SEK_RRP_WSP_NOT_FOUND != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(sortie_error.SEK_RRP_WSP_NOT_FOUND));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_error.EUR_FINN_RRP_WSP_NOT_FOUND != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(sortie_error.EUR_FINN_RRP_WSP_NOT_FOUND));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_error.CM_SIZE_NOT_FOUND != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(sortie_error.CM_SIZE_NOT_FOUND));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_1++;
				
 


	tos_count_tFileOutputExcel_1++;

/**
 * [tFileOutputExcel_1 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

 



/**
 * [tFileOutputExcel_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

 



/**
 * [tFileOutputExcel_1 process_data_end ] stop
 */

} // End of branch "sortie_error"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_end ] stop
 */

} // End of branch "row6"




	
	/**
	 * [tFilterRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

 



/**
 * [tFilterRow_1 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_5";

	

 



/**
 * [tLogRow_5 process_data_end ] stop
 */

} // End of branch "sortie_eurprice"




	
	/**
	 * [tMap_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_13";

	

 



/**
 * [tMap_13 process_data_end ] stop
 */

} // End of branch "sortie_cm_size_"




	
	/**
	 * [tMap_31 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_31";

	

 



/**
 * [tMap_31 process_data_end ] stop
 */

} // End of branch "sortie_cm_size_1"




	
	/**
	 * [tMap_30 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_30";

	

 



/**
 * [tMap_30 process_data_end ] stop
 */

} // End of branch "sortie_cm"




	
	/**
	 * [tMap_28 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_28";

	

 



/**
 * [tMap_28 process_data_end ] stop
 */

} // End of branch "sortie_size_range_"




	
	/**
	 * [tMap_26 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_26";

	

 



/**
 * [tMap_26 process_data_end ] stop
 */

} // End of branch "sortie_age_range_"




	
	/**
	 * [tMap_24 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_24";

	

 



/**
 * [tMap_24 process_data_end ] stop
 */

} // End of branch "sortie_coo"




	
	/**
	 * [tMap_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_12";

	

 



/**
 * [tMap_12 process_data_end ] stop
 */

} // End of branch "sortie_product_tier"




	
	/**
	 * [tMap_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_11";

	

 



/**
 * [tMap_11 process_data_end ] stop
 */

} // End of branch "sortie_product_status"




	
	/**
	 * [tMap_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_10";

	

 



/**
 * [tMap_10 process_data_end ] stop
 */

} // End of branch "sortie_size"




	
	/**
	 * [tMap_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

 



/**
 * [tMap_9 process_data_end ] stop
 */

} // End of branch "sortie_gender"




	
	/**
	 * [tMap_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_end ] stop
 */

} // End of branch "sortie_category"




	
	/**
	 * [tMap_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 process_data_end ] stop
 */

} // End of branch "sortie_season"




	
	/**
	 * [tMap_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 process_data_end ] stop
 */

} // End of branch "sortie_Brand"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	

 



/**
 * [tLogRow_4 process_data_end ] stop
 */

} // End of branch "sortie"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 process_data_end ] stop
 */

} // End of branch "row32"




	
	/**
	 * [tFilterRow_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_8";

	

 



/**
 * [tFilterRow_8 process_data_end ] stop
 */

} // End of branch "validate_fields"




	
	/**
	 * [tMap_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_end ] stop
 */

} // End of branch "sortie_Excel"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */

} // End of branch "row3"




	
	/**
	 * [tFileInputExcel_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_2";

	

 



/**
 * [tFileInputExcel_2 process_data_end ] stop
 */
	
	/**
	 * [tFileInputExcel_2 end ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_2";

	

			}
			
			
			
			globalMap.put("tFileInputExcel_2_NB_LINE",nb_line_tFileInputExcel_2);
			
				}
			
		} finally { 
				
  				if(!(source_tFileInputExcel_2 instanceof java.io.InputStream)){
  					workbook_tFileInputExcel_2.getPackage().revert();
  				}
				
		}	
		
 

ok_Hash.put("tFileInputExcel_2", true);
end_Hash.put("tFileInputExcel_2", System.currentTimeMillis());




/**
 * [tFileInputExcel_2 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tMap_5 end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_Excel");
			  	}
			  	
 

ok_Hash.put("tMap_5", true);
end_Hash.put("tMap_5", System.currentTimeMillis());




/**
 * [tMap_5 end ] stop
 */

	
	/**
	 * [tFilterRow_8 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_8";

	
    globalMap.put("tFilterRow_8_NB_LINE", nb_line_tFilterRow_8);
    globalMap.put("tFilterRow_8_NB_LINE_OK", nb_line_ok_tFilterRow_8);
    globalMap.put("tFilterRow_8_NB_LINE_REJECT", nb_line_reject_tFilterRow_8);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"validate_fields");
			  	}
			  	
 

ok_Hash.put("tFilterRow_8", true);
end_Hash.put("tFilterRow_8", System.currentTimeMillis());




/**
 * [tFilterRow_8 end ] stop
 */

	
	/**
	 * [tLogRow_2 end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row32");
			  	}
			  	
 

ok_Hash.put("tLogRow_2", true);
end_Hash.put("tLogRow_2", System.currentTimeMillis());




/**
 * [tLogRow_2 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_sortie_color_map != null) {
						tHash_Lookup_sortie_color_map.endGet();
					}
					globalMap.remove( "tHash_Lookup_sortie_color_map" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row10");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tLogRow_4 end ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_4 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_4 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_4 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_4);
                    }
                    
                    consoleOut_tLogRow_4.println(util_tLogRow_4.format().toString());
                    consoleOut_tLogRow_4.flush();
//////
globalMap.put("tLogRow_4_NB_LINE",nb_line_tLogRow_4);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie");
			  	}
			  	
 

ok_Hash.put("tLogRow_4", true);
end_Hash.put("tLogRow_4", System.currentTimeMillis());




/**
 * [tLogRow_4 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_sortie_brand_map != null) {
						tHash_Lookup_sortie_brand_map.endGet();
					}
					globalMap.remove( "tHash_Lookup_sortie_brand_map" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row12");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tMap_6 end ] start
	 */

	

	
	
	currentComponent="tMap_6";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_sortie_season_map != null) {
						tHash_Lookup_sortie_season_map.endGet();
					}
					globalMap.remove( "tHash_Lookup_sortie_season_map" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_Brand");
			  	}
			  	
 

ok_Hash.put("tMap_6", true);
end_Hash.put("tMap_6", System.currentTimeMillis());




/**
 * [tMap_6 end ] stop
 */

	
	/**
	 * [tMap_7 end ] start
	 */

	

	
	
	currentComponent="tMap_7";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_season");
			  	}
			  	
 

ok_Hash.put("tMap_7", true);
end_Hash.put("tMap_7", System.currentTimeMillis());




/**
 * [tMap_7 end ] stop
 */

	
	/**
	 * [tMap_8 end ] start
	 */

	

	
	
	currentComponent="tMap_8";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row19 != null) {
						tHash_Lookup_row19.endGet();
					}
					globalMap.remove( "tHash_Lookup_row19" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_category");
			  	}
			  	
 

ok_Hash.put("tMap_8", true);
end_Hash.put("tMap_8", System.currentTimeMillis());




/**
 * [tMap_8 end ] stop
 */

	
	/**
	 * [tMap_9 end ] start
	 */

	

	
	
	currentComponent="tMap_9";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_sortie_size_map != null) {
						tHash_Lookup_sortie_size_map.endGet();
					}
					globalMap.remove( "tHash_Lookup_sortie_size_map" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_gender");
			  	}
			  	
 

ok_Hash.put("tMap_9", true);
end_Hash.put("tMap_9", System.currentTimeMillis());




/**
 * [tMap_9 end ] stop
 */

	
	/**
	 * [tMap_10 end ] start
	 */

	

	
	
	currentComponent="tMap_10";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_sortie_product_status_file != null) {
						tHash_Lookup_sortie_product_status_file.endGet();
					}
					globalMap.remove( "tHash_Lookup_sortie_product_status_file" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_size");
			  	}
			  	
 

ok_Hash.put("tMap_10", true);
end_Hash.put("tMap_10", System.currentTimeMillis());




/**
 * [tMap_10 end ] stop
 */

	
	/**
	 * [tMap_11 end ] start
	 */

	

	
	
	currentComponent="tMap_11";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row23 != null) {
						tHash_Lookup_row23.endGet();
					}
					globalMap.remove( "tHash_Lookup_row23" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_product_status");
			  	}
			  	
 

ok_Hash.put("tMap_11", true);
end_Hash.put("tMap_11", System.currentTimeMillis());




/**
 * [tMap_11 end ] stop
 */

	
	/**
	 * [tMap_12 end ] start
	 */

	

	
	
	currentComponent="tMap_12";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_product_tier");
			  	}
			  	
 

ok_Hash.put("tMap_12", true);
end_Hash.put("tMap_12", System.currentTimeMillis());




/**
 * [tMap_12 end ] stop
 */

	
	/**
	 * [tMap_24 end ] start
	 */

	

	
	
	currentComponent="tMap_24";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row28 != null) {
						tHash_Lookup_row28.endGet();
					}
					globalMap.remove( "tHash_Lookup_row28" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_coo");
			  	}
			  	
 

ok_Hash.put("tMap_24", true);
end_Hash.put("tMap_24", System.currentTimeMillis());




/**
 * [tMap_24 end ] stop
 */

	
	/**
	 * [tMap_26 end ] start
	 */

	

	
	
	currentComponent="tMap_26";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row30 != null) {
						tHash_Lookup_row30.endGet();
					}
					globalMap.remove( "tHash_Lookup_row30" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_age_range_");
			  	}
			  	
 

ok_Hash.put("tMap_26", true);
end_Hash.put("tMap_26", System.currentTimeMillis());




/**
 * [tMap_26 end ] stop
 */

	
	/**
	 * [tMap_28 end ] start
	 */

	

	
	
	currentComponent="tMap_28";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_size_range_");
			  	}
			  	
 

ok_Hash.put("tMap_28", true);
end_Hash.put("tMap_28", System.currentTimeMillis());




/**
 * [tMap_28 end ] stop
 */

	
	/**
	 * [tMap_30 end ] start
	 */

	

	
	
	currentComponent="tMap_30";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_sortie_fashion != null) {
						tHash_Lookup_sortie_fashion.endGet();
					}
					globalMap.remove( "tHash_Lookup_sortie_fashion" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_cm");
			  	}
			  	
 

ok_Hash.put("tMap_30", true);
end_Hash.put("tMap_30", System.currentTimeMillis());




/**
 * [tMap_30 end ] stop
 */

	
	/**
	 * [tMap_31 end ] start
	 */

	

	
	
	currentComponent="tMap_31";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_copyOfsortie_fashion != null) {
						tHash_Lookup_copyOfsortie_fashion.endGet();
					}
					globalMap.remove( "tHash_Lookup_copyOfsortie_fashion" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_cm_size_1");
			  	}
			  	
 

ok_Hash.put("tMap_31", true);
end_Hash.put("tMap_31", System.currentTimeMillis());




/**
 * [tMap_31 end ] stop
 */

	
	/**
	 * [tMap_13 end ] start
	 */

	

	
	
	currentComponent="tMap_13";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_cm_size_");
			  	}
			  	
 

ok_Hash.put("tMap_13", true);
end_Hash.put("tMap_13", System.currentTimeMillis());




/**
 * [tMap_13 end ] stop
 */

	
	/**
	 * [tLogRow_5 end ] start
	 */

	

	
	
	currentComponent="tLogRow_5";

	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_5 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_5 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_5 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_5);
                    }
                    
                    consoleOut_tLogRow_5.println(util_tLogRow_5.format().toString());
                    consoleOut_tLogRow_5.flush();
//////
globalMap.put("tLogRow_5_NB_LINE",nb_line_tLogRow_5);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_eurprice");
			  	}
			  	
 

ok_Hash.put("tLogRow_5", true);
end_Hash.put("tLogRow_5", System.currentTimeMillis());




/**
 * [tLogRow_5 end ] stop
 */

	
	/**
	 * [tFilterRow_1 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	
    globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
    globalMap.put("tFilterRow_1_NB_LINE_OK", nb_line_ok_tFilterRow_1);
    globalMap.put("tFilterRow_1_NB_LINE_REJECT", nb_line_reject_tFilterRow_1);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tFilterRow_1", true);
end_Hash.put("tFilterRow_1", System.currentTimeMillis());




/**
 * [tFilterRow_1 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

	
	
	
			xlsxTool_tFileOutputExcel_1.writeExcel(fileName_tFileOutputExcel_1,true);
	
		
			nb_line_tFileOutputExcel_1 = nb_line_tFileOutputExcel_1 -1;
		
		globalMap.put("tFileOutputExcel_1_NB_LINE",nb_line_tFileOutputExcel_1);
		
		

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_error");
			  	}
			  	
 

ok_Hash.put("tFileOutputExcel_1", true);
end_Hash.put("tFileOutputExcel_1", System.currentTimeMillis());




/**
 * [tFileOutputExcel_1 end ] stop
 */








































































				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_31"
					     			globalMap.remove("tHash_Lookup_copyOfsortie_fashion"); 
				     			
					     			//free memory for "tMap_30"
					     			globalMap.remove("tHash_Lookup_sortie_fashion"); 
				     			
					     			//free memory for "tMap_26"
					     			globalMap.remove("tHash_Lookup_row30"); 
				     			
					     			//free memory for "tMap_24"
					     			globalMap.remove("tHash_Lookup_row28"); 
				     			
					     			//free memory for "tMap_11"
					     			globalMap.remove("tHash_Lookup_row23"); 
				     			
					     			//free memory for "tMap_10"
					     			globalMap.remove("tHash_Lookup_sortie_product_status_file"); 
				     			
					     			//free memory for "tMap_9"
					     			globalMap.remove("tHash_Lookup_sortie_size_map"); 
				     			
					     			//free memory for "tMap_8"
					     			globalMap.remove("tHash_Lookup_row19"); 
				     			
					     			//free memory for "tMap_6"
					     			globalMap.remove("tHash_Lookup_sortie_season_map"); 
				     			
					     			//free memory for "tMap_3"
					     			globalMap.remove("tHash_Lookup_sortie_brand_map"); 
				     			
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_sortie_color_map"); 
				     			
				try{
					
	
	/**
	 * [tFileInputExcel_2 finally ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_2";

	

 



/**
 * [tFileInputExcel_2 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tMap_5 finally ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 finally ] stop
 */

	
	/**
	 * [tFilterRow_8 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_8";

	

 



/**
 * [tFilterRow_8 finally ] stop
 */

	
	/**
	 * [tLogRow_2 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tLogRow_4 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	

 



/**
 * [tLogRow_4 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tMap_6 finally ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 finally ] stop
 */

	
	/**
	 * [tMap_7 finally ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 finally ] stop
 */

	
	/**
	 * [tMap_8 finally ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 finally ] stop
 */

	
	/**
	 * [tMap_9 finally ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

 



/**
 * [tMap_9 finally ] stop
 */

	
	/**
	 * [tMap_10 finally ] start
	 */

	

	
	
	currentComponent="tMap_10";

	

 



/**
 * [tMap_10 finally ] stop
 */

	
	/**
	 * [tMap_11 finally ] start
	 */

	

	
	
	currentComponent="tMap_11";

	

 



/**
 * [tMap_11 finally ] stop
 */

	
	/**
	 * [tMap_12 finally ] start
	 */

	

	
	
	currentComponent="tMap_12";

	

 



/**
 * [tMap_12 finally ] stop
 */

	
	/**
	 * [tMap_24 finally ] start
	 */

	

	
	
	currentComponent="tMap_24";

	

 



/**
 * [tMap_24 finally ] stop
 */

	
	/**
	 * [tMap_26 finally ] start
	 */

	

	
	
	currentComponent="tMap_26";

	

 



/**
 * [tMap_26 finally ] stop
 */

	
	/**
	 * [tMap_28 finally ] start
	 */

	

	
	
	currentComponent="tMap_28";

	

 



/**
 * [tMap_28 finally ] stop
 */

	
	/**
	 * [tMap_30 finally ] start
	 */

	

	
	
	currentComponent="tMap_30";

	

 



/**
 * [tMap_30 finally ] stop
 */

	
	/**
	 * [tMap_31 finally ] start
	 */

	

	
	
	currentComponent="tMap_31";

	

 



/**
 * [tMap_31 finally ] stop
 */

	
	/**
	 * [tMap_13 finally ] start
	 */

	

	
	
	currentComponent="tMap_13";

	

 



/**
 * [tMap_13 finally ] stop
 */

	
	/**
	 * [tLogRow_5 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_5";

	

 



/**
 * [tLogRow_5 finally ] stop
 */

	
	/**
	 * [tFilterRow_1 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

 



/**
 * [tFilterRow_1 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

 



/**
 * [tFileOutputExcel_1 finally ] stop
 */








































































				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputExcel_2_SUBPROCESS_STATE", 1);
	}
	


public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
    final static byte[] commonByteArrayLock_DEV_BUY_VALIDATION = new byte[0];
    static byte[] commonByteArray_DEV_BUY_VALIDATION = new byte[0];

	
			    public Object Nom;

				public Object getNom () {
					return this.Nom;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_BUY_VALIDATION) {

        	try {

        		int length = 0;
		
						this.Nom = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.Nom);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Nom="+String.valueOf(Nom));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tJavaFlex_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJavaFlex_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row9Struct row9 = new row9Struct();




	
	/**
	 * [tFileOutputExcel_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_3", false);
		start_Hash.put("tFileOutputExcel_3", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row9");
					}
				
		int tos_count_tFileOutputExcel_3 = 0;
		


		int columnIndex_tFileOutputExcel_3 = 0;
		
		String fileName_tFileOutputExcel_3=context.LogPath + globalMap.get("dateError") + "_ERROR_" + context.ExcelFileName;
		int nb_line_tFileOutputExcel_3 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_3 = new org.talend.ExcelTool();
		
		xlsxTool_tFileOutputExcel_3.setSheet("Buy error cockpit chart");
		xlsxTool_tFileOutputExcel_3.setAppend(true,true);
		xlsxTool_tFileOutputExcel_3.setRecalculateFormula(false);
		xlsxTool_tFileOutputExcel_3.setXY(true,0,10,false);
		
		java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_3 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap.get("concurrentHashMap");
		java.lang.Object lockObj_tFileOutputExcel_3 = chm_tFileOutputExcel_3.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_3", k -> new Object());
		synchronized (lockObj_tFileOutputExcel_3) {
			
				xlsxTool_tFileOutputExcel_3.prepareXlsxFile(fileName_tFileOutputExcel_3);
			
		}
		
		xlsxTool_tFileOutputExcel_3.setFont("");
		

 



/**
 * [tFileOutputExcel_3 begin ] stop
 */



	
	/**
	 * [tJavaFlex_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaFlex_1", false);
		start_Hash.put("tJavaFlex_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaFlex_1";

	
		int tos_count_tJavaFlex_1 = 0;
		


// start part of your Java code
String[] error = context.ErrorHeader.split("\n");

for(int i=0; i< error.length ; i++) { 


 



/**
 * [tJavaFlex_1 begin ] stop
 */
	
	/**
	 * [tJavaFlex_1 main ] start
	 */

	

	
	
	currentComponent="tJavaFlex_1";

	



// here is the main part of the component,
// a piece of code executed in the row
// loop
row9.Nom = error[i];

 


	tos_count_tJavaFlex_1++;

/**
 * [tJavaFlex_1 main ] stop
 */
	
	/**
	 * [tJavaFlex_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaFlex_1";

	

 



/**
 * [tJavaFlex_1 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputExcel_3 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row9");
					}
					

				xlsxTool_tFileOutputExcel_3.addRow();
									   				
	    				if(row9.Nom != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(row9.Nom));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_3++;
				
 


	tos_count_tFileOutputExcel_3++;

/**
 * [tFileOutputExcel_3 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";

	

 



/**
 * [tFileOutputExcel_3 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";

	

 



/**
 * [tFileOutputExcel_3 process_data_end ] stop
 */



	
	/**
	 * [tJavaFlex_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaFlex_1";

	

 



/**
 * [tJavaFlex_1 process_data_end ] stop
 */
	
	/**
	 * [tJavaFlex_1 end ] start
	 */

	

	
	
	currentComponent="tJavaFlex_1";

	


// end of the component, outside/closing the loop
}
      

 

ok_Hash.put("tJavaFlex_1", true);
end_Hash.put("tJavaFlex_1", System.currentTimeMillis());




/**
 * [tJavaFlex_1 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_3 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";

	

	
	
	
			xlsxTool_tFileOutputExcel_3.writeExcel(fileName_tFileOutputExcel_3,true);
	
		
		globalMap.put("tFileOutputExcel_3_NB_LINE",nb_line_tFileOutputExcel_3);
		
		

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row9");
			  	}
			  	
 

ok_Hash.put("tFileOutputExcel_3", true);
end_Hash.put("tFileOutputExcel_3", System.currentTimeMillis());




/**
 * [tFileOutputExcel_3 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJavaFlex_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaFlex_1";

	

 



/**
 * [tJavaFlex_1 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_3 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";

	

 



/**
 * [tFileOutputExcel_3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJavaFlex_1_SUBPROCESS_STATE", 1);
	}
	

public void tSetGlobalVar_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSetGlobalVar_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tSetGlobalVar_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tSetGlobalVar_1", false);
		start_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());
		
	
	currentComponent="tSetGlobalVar_1";

	
		int tos_count_tSetGlobalVar_1 = 0;
		

 



/**
 * [tSetGlobalVar_1 begin ] stop
 */
	
	/**
	 * [tSetGlobalVar_1 main ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

globalMap.put("fieldMap", new HashMap<String, String>());
globalMap.put("dateError",  TalendDate.formatDate("yyyy-MM-ddHHmmss", new Date()) );

 


	tos_count_tSetGlobalVar_1++;

/**
 * [tSetGlobalVar_1 main ] stop
 */
	
	/**
	 * [tSetGlobalVar_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

 



/**
 * [tSetGlobalVar_1 process_data_begin ] stop
 */
	
	/**
	 * [tSetGlobalVar_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

 



/**
 * [tSetGlobalVar_1 process_data_end ] stop
 */
	
	/**
	 * [tSetGlobalVar_1 end ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

 

ok_Hash.put("tSetGlobalVar_1", true);
end_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk5", 0, "ok");
				}
				tFixedFlowInput_3Process(globalMap);



/**
 * [tSetGlobalVar_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSetGlobalVar_1 finally ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

 



/**
 * [tSetGlobalVar_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSetGlobalVar_1_SUBPROCESS_STATE", 1);
	}
	


public static class row15Struct implements routines.system.IPersistableRow<row15Struct> {
    final static byte[] commonByteArrayLock_DEV_BUY_VALIDATION = new byte[0];
    static byte[] commonByteArray_DEV_BUY_VALIDATION = new byte[0];

	
			    public String header;

				public String getHeader () {
					return this.header;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_BUY_VALIDATION.length) {
				if(length < 1024 && commonByteArray_DEV_BUY_VALIDATION.length == 0) {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[1024];
				} else {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_BUY_VALIDATION, 0, length);
			strReturn = new String(commonByteArray_DEV_BUY_VALIDATION, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_BUY_VALIDATION) {

        	try {

        		int length = 0;
		
					this.header = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.header,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("header="+header);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row15Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row14Struct implements routines.system.IPersistableRow<row14Struct> {
    final static byte[] commonByteArrayLock_DEV_BUY_VALIDATION = new byte[0];
    static byte[] commonByteArray_DEV_BUY_VALIDATION = new byte[0];

	
			    public String header;

				public String getHeader () {
					return this.header;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_BUY_VALIDATION.length) {
				if(length < 1024 && commonByteArray_DEV_BUY_VALIDATION.length == 0) {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[1024];
				} else {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_BUY_VALIDATION, 0, length);
			strReturn = new String(commonByteArray_DEV_BUY_VALIDATION, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_BUY_VALIDATION) {

        	try {

        		int length = 0;
		
					this.header = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.header,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("header="+header);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row14Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFixedFlowInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row14Struct row14 = new row14Struct();
row14Struct row15 = row14;





	
	/**
	 * [tJavaRow_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_4", false);
		start_Hash.put("tJavaRow_4", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row15");
					}
				
		int tos_count_tJavaRow_4 = 0;
		

int nb_line_tJavaRow_4 = 0;

 



/**
 * [tJavaRow_4 begin ] stop
 */



	
	/**
	 * [tFileOutputExcel_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_4", false);
		start_Hash.put("tFileOutputExcel_4", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row14");
					}
				
		int tos_count_tFileOutputExcel_4 = 0;
		


		int columnIndex_tFileOutputExcel_4 = 0;
		
		String fileName_tFileOutputExcel_4=context.LogPath + globalMap.get("dateError") + "_ERROR_" + context.ExcelFileName;
		int nb_line_tFileOutputExcel_4 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_4 = new org.talend.ExcelTool();
		
		xlsxTool_tFileOutputExcel_4.setSheet("Buy error cockpit chart");
		xlsxTool_tFileOutputExcel_4.setAppend(false,false);
		xlsxTool_tFileOutputExcel_4.setRecalculateFormula(false);
		xlsxTool_tFileOutputExcel_4.setXY(false,0,0,false);
		
		java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_4 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap.get("concurrentHashMap");
		java.lang.Object lockObj_tFileOutputExcel_4 = chm_tFileOutputExcel_4.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_4", k -> new Object());
		synchronized (lockObj_tFileOutputExcel_4) {
			
				xlsxTool_tFileOutputExcel_4.prepareXlsxFile(fileName_tFileOutputExcel_4);
			
		}
		
		xlsxTool_tFileOutputExcel_4.setFont("");
		

 



/**
 * [tFileOutputExcel_4 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_3", false);
		start_Hash.put("tFixedFlowInput_3", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_3";

	
		int tos_count_tFixedFlowInput_3 = 0;
		

	int nb_line_tFixedFlowInput_3 = 0;
	List<row14Struct> cacheList_tFixedFlowInput_3 = new java.util.ArrayList<row14Struct>();
	row14 = new row14Struct();        	            	
	row14.header = "BUY ERROR COCKPIT CHART";
	cacheList_tFixedFlowInput_3.add(row14);
	for (int i_tFixedFlowInput_3 = 0 ; i_tFixedFlowInput_3 < 1 ; i_tFixedFlowInput_3++) {	
		for(row14Struct tmpRow_tFixedFlowInput_3 : cacheList_tFixedFlowInput_3){
			nb_line_tFixedFlowInput_3 ++;		
			row14 = tmpRow_tFixedFlowInput_3;
 



/**
 * [tFixedFlowInput_3 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_3 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";

	

 


	tos_count_tFixedFlowInput_3++;

/**
 * [tFixedFlowInput_3 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";

	

 



/**
 * [tFixedFlowInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputExcel_4 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row14");
					}
					

				xlsxTool_tFileOutputExcel_4.addRow();
									   				
	    				if(row14.header != null) {
    				
							xlsxTool_tFileOutputExcel_4.addCellValue(String.valueOf(row14.header));
	    				} else {
	    					xlsxTool_tFileOutputExcel_4.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_4++;
				
 
     row15 = row14;


	tos_count_tFileOutputExcel_4++;

/**
 * [tFileOutputExcel_4 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_4";

	

 



/**
 * [tFileOutputExcel_4 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_4 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row15");
					}
					

    // code sample:
//
// multiply by 2 the row identifier
// output_row.id = row15.id * 2;
//
// lowercase the name
// output_row.name = row15.name.toLowerCase();

context.dateValidation = TalendDate.formatDate("yyyy-MM-dd", new Date());
context.timeValidation = TalendDate.formatDate("HH:mm:ss", new Date());
// 
context.isNike = context.ExcelFileName.toLowerCase().contains("nike");

if (context.ExcelFileName.toLowerCase().contains("nike"))
{
	context.recipientEmail = "fdjebiri@b-wizz-u.com;mariechristiane.marboeuf@haddadeurope.com;nike@haddadeurope.com";
}
if (context.ExcelFileName.toLowerCase().contains("jordan"))
{
	context.recipientEmail = "fdjebiri@b-wizz-u.com;mariechristiane.marboeuf@haddadeurope.com;jordan@haddadeurope.com";
}
if (context.ExcelFileName.toLowerCase().contains("hurley"))
{
	context.recipientEmail = "fdjebiri@b-wizz-u.com;mariechristiane.marboeuf@haddadeurope.com;hurley@haddadeurope.com";
}
if (context.ExcelFileName.toLowerCase().contains("levis"))
{
	context.recipientEmail = "fdjebiri@b-wizz-u.com;mariechristiane.marboeuf@haddadeurope.com;levis@haddadeurope.com";
}
if (context.ExcelFileName.toLowerCase().contains("converse"))
{
	context.recipientEmail = "fdjebiri@b-wizz-u.com;mariechristiane.marboeuf@haddadeurope.com;converse@haddadeurope.com";
}
if (context.ExcelFileName.toLowerCase().contains("rookie"))
{
	context.recipientEmail = "fdjebiri@b-wizz-u.com;mariechristiane.marboeuf@haddadeurope.com;rookie@haddadeurope.com";
}
    nb_line_tJavaRow_4++;   

 


	tos_count_tJavaRow_4++;

/**
 * [tJavaRow_4 main ] stop
 */
	
	/**
	 * [tJavaRow_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";

	

 



/**
 * [tJavaRow_4 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";

	

 



/**
 * [tJavaRow_4 process_data_end ] stop
 */



	
	/**
	 * [tFileOutputExcel_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_4";

	

 



/**
 * [tFileOutputExcel_4 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";

	

 



/**
 * [tFixedFlowInput_3 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_3 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";

	

		}
	}
	cacheList_tFixedFlowInput_3.clear();
	globalMap.put("tFixedFlowInput_3_NB_LINE", nb_line_tFixedFlowInput_3);

 

ok_Hash.put("tFixedFlowInput_3", true);
end_Hash.put("tFixedFlowInput_3", System.currentTimeMillis());




/**
 * [tFixedFlowInput_3 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_4 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_4";

	

									columnIndex_tFileOutputExcel_4 = 0;
								
					xlsxTool_tFileOutputExcel_4.setColAutoSize(columnIndex_tFileOutputExcel_4);
	
	
	
	
			xlsxTool_tFileOutputExcel_4.writeExcel(fileName_tFileOutputExcel_4,true);
	
		
		globalMap.put("tFileOutputExcel_4_NB_LINE",nb_line_tFileOutputExcel_4);
		
		

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row14");
			  	}
			  	
 

ok_Hash.put("tFileOutputExcel_4", true);
end_Hash.put("tFileOutputExcel_4", System.currentTimeMillis());




/**
 * [tFileOutputExcel_4 end ] stop
 */

	
	/**
	 * [tJavaRow_4 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";

	

globalMap.put("tJavaRow_4_NB_LINE",nb_line_tJavaRow_4);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row15");
			  	}
			  	
 

ok_Hash.put("tJavaRow_4", true);
end_Hash.put("tJavaRow_4", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk6", 0, "ok");
				}
				tFixedFlowInput_4Process(globalMap);



/**
 * [tJavaRow_4 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_3 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";

	

 



/**
 * [tFixedFlowInput_3 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_4 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_4";

	

 



/**
 * [tFileOutputExcel_4 finally ] stop
 */

	
	/**
	 * [tJavaRow_4 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";

	

 



/**
 * [tJavaRow_4 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class row16Struct implements routines.system.IPersistableRow<row16Struct> {
    final static byte[] commonByteArrayLock_DEV_BUY_VALIDATION = new byte[0];
    static byte[] commonByteArray_DEV_BUY_VALIDATION = new byte[0];

	
			    public String Nom;

				public String getNom () {
					return this.Nom;
				}
				
			    public String Valeur;

				public String getValeur () {
					return this.Valeur;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_BUY_VALIDATION.length) {
				if(length < 1024 && commonByteArray_DEV_BUY_VALIDATION.length == 0) {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[1024];
				} else {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_BUY_VALIDATION, 0, length);
			strReturn = new String(commonByteArray_DEV_BUY_VALIDATION, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_BUY_VALIDATION) {

        	try {

        		int length = 0;
		
					this.Nom = readString(dis);
					
					this.Valeur = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Nom,dos);
					
					// String
				
						writeString(this.Valeur,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Nom="+Nom);
		sb.append(",Valeur="+Valeur);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row16Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFixedFlowInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row16Struct row16 = new row16Struct();




	
	/**
	 * [tFileOutputExcel_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_5", false);
		start_Hash.put("tFileOutputExcel_5", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row16");
					}
				
		int tos_count_tFileOutputExcel_5 = 0;
		


		int columnIndex_tFileOutputExcel_5 = 0;
		
		String fileName_tFileOutputExcel_5=context.LogPath + globalMap.get("dateError") + "_ERROR_" + context.ExcelFileName;
		int nb_line_tFileOutputExcel_5 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_5 = new org.talend.ExcelTool();
		
		xlsxTool_tFileOutputExcel_5.setSheet("Buy error cockpit chart");
		xlsxTool_tFileOutputExcel_5.setAppend(true,true);
		xlsxTool_tFileOutputExcel_5.setRecalculateFormula(false);
		xlsxTool_tFileOutputExcel_5.setXY(true,1,3,false);
		
		java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_5 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap.get("concurrentHashMap");
		java.lang.Object lockObj_tFileOutputExcel_5 = chm_tFileOutputExcel_5.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_5", k -> new Object());
		synchronized (lockObj_tFileOutputExcel_5) {
			
				xlsxTool_tFileOutputExcel_5.prepareXlsxFile(fileName_tFileOutputExcel_5);
			
		}
		
		xlsxTool_tFileOutputExcel_5.setFont("");
		

 



/**
 * [tFileOutputExcel_5 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_4", false);
		start_Hash.put("tFixedFlowInput_4", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_4";

	
		int tos_count_tFixedFlowInput_4 = 0;
		

	int nb_line_tFixedFlowInput_4 = 0;
	List<row16Struct> cacheList_tFixedFlowInput_4 = new java.util.ArrayList<row16Struct>();
	row16 = new row16Struct();        	            	
	row16.Nom = "File Name : ";        	            	
	row16.Valeur = context.IntegrationExcelPath + context.ExcelFileName;
	cacheList_tFixedFlowInput_4.add(row16);
	row16 = new row16Struct();        	            	
	row16.Nom = "Date : ";        	            	
	row16.Valeur = context.dateValidation;
	cacheList_tFixedFlowInput_4.add(row16);
	row16 = new row16Struct();        	            	
	row16.Nom = "Time : ";        	            	
	row16.Valeur = context.timeValidation;
	cacheList_tFixedFlowInput_4.add(row16);
	for (int i_tFixedFlowInput_4 = 0 ; i_tFixedFlowInput_4 < 1 ; i_tFixedFlowInput_4++) {	
		for(row16Struct tmpRow_tFixedFlowInput_4 : cacheList_tFixedFlowInput_4){
			nb_line_tFixedFlowInput_4 ++;		
			row16 = tmpRow_tFixedFlowInput_4;
 



/**
 * [tFixedFlowInput_4 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_4 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_4";

	

 


	tos_count_tFixedFlowInput_4++;

/**
 * [tFixedFlowInput_4 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_4";

	

 



/**
 * [tFixedFlowInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputExcel_5 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row16");
					}
					

				xlsxTool_tFileOutputExcel_5.addRow();
									   				
	    				if(row16.Nom != null) {
    				
							xlsxTool_tFileOutputExcel_5.addCellValue(String.valueOf(row16.Nom));
	    				} else {
	    					xlsxTool_tFileOutputExcel_5.addCellNullValue();
	    				}
					
									   				
	    				if(row16.Valeur != null) {
    				
							xlsxTool_tFileOutputExcel_5.addCellValue(String.valueOf(row16.Valeur));
	    				} else {
	    					xlsxTool_tFileOutputExcel_5.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_5++;
				
 


	tos_count_tFileOutputExcel_5++;

/**
 * [tFileOutputExcel_5 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_5";

	

 



/**
 * [tFileOutputExcel_5 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_5";

	

 



/**
 * [tFileOutputExcel_5 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_4";

	

 



/**
 * [tFixedFlowInput_4 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_4 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_4";

	

		}
	}
	cacheList_tFixedFlowInput_4.clear();
	globalMap.put("tFixedFlowInput_4_NB_LINE", nb_line_tFixedFlowInput_4);

 

ok_Hash.put("tFixedFlowInput_4", true);
end_Hash.put("tFixedFlowInput_4", System.currentTimeMillis());




/**
 * [tFixedFlowInput_4 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_5 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_5";

	

	
	
	
			xlsxTool_tFileOutputExcel_5.writeExcel(fileName_tFileOutputExcel_5,true);
	
		
		globalMap.put("tFileOutputExcel_5_NB_LINE",nb_line_tFileOutputExcel_5);
		
		

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row16");
			  	}
			  	
 

ok_Hash.put("tFileOutputExcel_5", true);
end_Hash.put("tFileOutputExcel_5", System.currentTimeMillis());




/**
 * [tFileOutputExcel_5 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_4 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_4";

	

 



/**
 * [tFixedFlowInput_4 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_5 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_5";

	

 



/**
 * [tFileOutputExcel_5 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class sortie_fashionStruct implements routines.system.IPersistableComparableLookupRow<sortie_fashionStruct> {
    final static byte[] commonByteArrayLock_DEV_BUY_VALIDATION = new byte[0];
    static byte[] commonByteArray_DEV_BUY_VALIDATION = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String NAME;

				public String getNAME () {
					return this.NAME;
				}
				
			    public String NAME2;

				public String getNAME2 () {
					return this.NAME2;
				}
				
			    public String NAME3;

				public String getNAME3 () {
					return this.NAME3;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.NAME == null) ? 0 : this.NAME.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final sortie_fashionStruct other = (sortie_fashionStruct) obj;
		
						if (this.NAME == null) {
							if (other.NAME != null)
								return false;
						
						} else if (!this.NAME.equals(other.NAME))
						
							return false;
					

		return true;
    }

	public void copyDataTo(sortie_fashionStruct other) {

		other.NAME = this.NAME;
	            other.NAME2 = this.NAME2;
	            other.NAME3 = this.NAME3;
	            
	}

	public void copyKeysDataTo(sortie_fashionStruct other) {

		other.NAME = this.NAME;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_BUY_VALIDATION.length) {
				if(length < 1024 && commonByteArray_DEV_BUY_VALIDATION.length == 0) {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[1024];
				} else {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_BUY_VALIDATION, 0, length);
			strReturn = new String(commonByteArray_DEV_BUY_VALIDATION, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_BUY_VALIDATION) {

        	try {

        		int length = 0;
		
					this.NAME = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.NAME,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.NAME2 = readString(dis,ois);
					
						this.NAME3 = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.NAME2, dos, oos);
					
						writeString(this.NAME3, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NAME="+NAME);
		sb.append(",NAME2="+NAME2);
		sb.append(",NAME3="+NAME3);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_fashionStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.NAME, other.NAME);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row33Struct implements routines.system.IPersistableRow<row33Struct> {
    final static byte[] commonByteArrayLock_DEV_BUY_VALIDATION = new byte[0];
    static byte[] commonByteArray_DEV_BUY_VALIDATION = new byte[0];

	
			    public String NAME;

				public String getNAME () {
					return this.NAME;
				}
				
			    public String NAME2;

				public String getNAME2 () {
					return this.NAME2;
				}
				
			    public String NAME3;

				public String getNAME3 () {
					return this.NAME3;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_BUY_VALIDATION.length) {
				if(length < 1024 && commonByteArray_DEV_BUY_VALIDATION.length == 0) {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[1024];
				} else {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_BUY_VALIDATION, 0, length);
			strReturn = new String(commonByteArray_DEV_BUY_VALIDATION, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_BUY_VALIDATION) {

        	try {

        		int length = 0;
		
					this.NAME = readString(dis);
					
					this.NAME2 = readString(dis);
					
					this.NAME3 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.NAME,dos);
					
					// String
				
						writeString(this.NAME2,dos);
					
					// String
				
						writeString(this.NAME3,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NAME="+NAME);
		sb.append(",NAME2="+NAME2);
		sb.append(",NAME3="+NAME3);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row33Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row33Struct row33 = new row33Struct();
sortie_fashionStruct sortie_fashion = new sortie_fashionStruct();





	
	/**
	 * [tAdvancedHash_sortie_fashion begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_sortie_fashion", false);
		start_Hash.put("tAdvancedHash_sortie_fashion", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_sortie_fashion";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_fashion");
					}
				
		int tos_count_tAdvancedHash_sortie_fashion = 0;
		

			   		// connection name:sortie_fashion
			   		// source node:tMap_29 - inputs:(row33) outputs:(sortie_fashion,sortie_fashion) | target node:tAdvancedHash_sortie_fashion - inputs:(sortie_fashion) outputs:()
			   		// linked node: tMap_30 - inputs:(sortie_cm,sortie_fashion) outputs:(sortie_cm_size_1)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_sortie_fashion = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<sortie_fashionStruct> tHash_Lookup_sortie_fashion =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<sortie_fashionStruct>getLookup(matchingModeEnum_sortie_fashion);
	   						   
		   	   	   globalMap.put("tHash_Lookup_sortie_fashion", tHash_Lookup_sortie_fashion);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_sortie_fashion begin ] stop
 */



	
	/**
	 * [tMap_29 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_29", false);
		start_Hash.put("tMap_29", System.currentTimeMillis());
		
	
	currentComponent="tMap_29";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row33");
					}
				
		int tos_count_tMap_29 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_29__Struct  {
}
Var__tMap_29__Struct Var__tMap_29 = new Var__tMap_29__Struct();
// ###############################

// ###############################
// # Outputs initialization
sortie_fashionStruct sortie_fashion_tmp = new sortie_fashionStruct();
// ###############################

        
        



        









 



/**
 * [tMap_29 begin ] stop
 */



	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_2";

	
		int tos_count_tDBInput_2 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_2 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_2 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_2  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_2, talendToDBArray_tDBInput_2); 
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
				String driverClass_tDBInput_2 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
			    java.lang.Class jdbcclazz_tDBInput_2 = java.lang.Class.forName(driverClass_tDBInput_2);
					String dbUser_tDBInput_2 = "etl_read_uat";
					
					
					 
	final String decryptedPassword_tDBInput_2 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[P4oo7f71iUUU40sbv1QmDG36QoB6in73m2QlwQRup8Mo3qKmtEup]");
					
					String dbPwd_tDBInput_2 = decryptedPassword_tDBInput_2;
				
		    String port_tDBInput_2 = "1433";
		    String dbname_tDBInput_2 = "etl_uat" ;		    
		    String url_tDBInput_2 = "jdbc:sqlserver://" + "10.7.7.48" ;
		    if (!"".equals(port_tDBInput_2)) {
		    	url_tDBInput_2 += ":" + "1433";
		    }
		    if (!"".equals(dbname_tDBInput_2)) {		    
		    	url_tDBInput_2 += ";databaseName=" + "etl_uat"; 
		    }
		    url_tDBInput_2 += ";appName=" + projectName + ";" + "";
		    String dbschema_tDBInput_2 = "";
				
				conn_tDBInput_2 = java.sql.DriverManager.getConnection(url_tDBInput_2,dbUser_tDBInput_2,dbPwd_tDBInput_2);
		        
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

		    String dbquery_tDBInput_2 = "select CATEGORYNAME AS NAME, PRODUCTCATEGORYHIERARCHYNAME as NAME2,  PARENTPRODUCTCATEGORYNAME as NAME3 from  data.D365"
+"_ProductCategories\n";
			

            	globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);
		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
							if(colQtyInRs_tDBInput_2 < 1) {
								row33.NAME = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(1);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		row33.NAME = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row33.NAME = tmpContent_tDBInput_2;
                }
            } else {
                row33.NAME = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 2) {
								row33.NAME2 = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(2);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		row33.NAME2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row33.NAME2 = tmpContent_tDBInput_2;
                }
            } else {
                row33.NAME2 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 3) {
								row33.NAME3 = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(3);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
            		row33.NAME3 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row33.NAME3 = tmpContent_tDBInput_2;
                }
            } else {
                row33.NAME3 = null;
            }
		                    }
					





 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_29 main ] start
	 */

	

	
	
	currentComponent="tMap_29";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row33");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_29 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_29 = false;
		  boolean mainRowRejected_tMap_29 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_29__Struct Var = Var__tMap_29;// ###############################
        // ###############################
        // # Output tables

sortie_fashion = null;


// # Output table : 'sortie_fashion'
sortie_fashion_tmp.NAME = StringHandling.DOWNCASE(row33.NAME) ;
sortie_fashion_tmp.NAME2 = row33.NAME2 ;
sortie_fashion_tmp.NAME3 = row33.NAME3 ;
sortie_fashion = sortie_fashion_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_29 = false;










 


	tos_count_tMap_29++;

/**
 * [tMap_29 main ] stop
 */
	
	/**
	 * [tMap_29 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_29";

	

 



/**
 * [tMap_29 process_data_begin ] stop
 */
// Start of branch "sortie_fashion"
if(sortie_fashion != null) { 



	
	/**
	 * [tAdvancedHash_sortie_fashion main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_sortie_fashion";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_fashion");
					}
					


			   
			   

					sortie_fashionStruct sortie_fashion_HashRow = new sortie_fashionStruct();
		   	   	   
				
				sortie_fashion_HashRow.NAME = sortie_fashion.NAME;
				
				sortie_fashion_HashRow.NAME2 = sortie_fashion.NAME2;
				
				sortie_fashion_HashRow.NAME3 = sortie_fashion.NAME3;
				
			tHash_Lookup_sortie_fashion.put(sortie_fashion_HashRow);
			
            




 


	tos_count_tAdvancedHash_sortie_fashion++;

/**
 * [tAdvancedHash_sortie_fashion main ] stop
 */
	
	/**
	 * [tAdvancedHash_sortie_fashion process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_sortie_fashion";

	

 



/**
 * [tAdvancedHash_sortie_fashion process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_sortie_fashion process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_sortie_fashion";

	

 



/**
 * [tAdvancedHash_sortie_fashion process_data_end ] stop
 */

} // End of branch "sortie_fashion"




	
	/**
	 * [tMap_29 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_29";

	

 



/**
 * [tMap_29 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

	}
}finally{
	if (rs_tDBInput_2 != null) {
		rs_tDBInput_2.close();
	}
	if (stmt_tDBInput_2 != null) {
		stmt_tDBInput_2.close();
	}
		if(conn_tDBInput_2 != null && !conn_tDBInput_2.isClosed()) {
			
			conn_tDBInput_2.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);

 

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());




/**
 * [tDBInput_2 end ] stop
 */

	
	/**
	 * [tMap_29 end ] start
	 */

	

	
	
	currentComponent="tMap_29";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row33");
			  	}
			  	
 

ok_Hash.put("tMap_29", true);
end_Hash.put("tMap_29", System.currentTimeMillis());




/**
 * [tMap_29 end ] stop
 */

	
	/**
	 * [tAdvancedHash_sortie_fashion end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_sortie_fashion";

	

tHash_Lookup_sortie_fashion.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_fashion");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_sortie_fashion", true);
end_Hash.put("tAdvancedHash_sortie_fashion", System.currentTimeMillis());




/**
 * [tAdvancedHash_sortie_fashion end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 finally ] stop
 */

	
	/**
	 * [tMap_29 finally ] start
	 */

	

	
	
	currentComponent="tMap_29";

	

 



/**
 * [tMap_29 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_sortie_fashion finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_sortie_fashion";

	

 



/**
 * [tAdvancedHash_sortie_fashion finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class copyOfsortie_fashionStruct implements routines.system.IPersistableComparableLookupRow<copyOfsortie_fashionStruct> {
    final static byte[] commonByteArrayLock_DEV_BUY_VALIDATION = new byte[0];
    static byte[] commonByteArray_DEV_BUY_VALIDATION = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String NAME3;

				public String getNAME3 () {
					return this.NAME3;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.NAME3 == null) ? 0 : this.NAME3.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final copyOfsortie_fashionStruct other = (copyOfsortie_fashionStruct) obj;
		
						if (this.NAME3 == null) {
							if (other.NAME3 != null)
								return false;
						
						} else if (!this.NAME3.equals(other.NAME3))
						
							return false;
					

		return true;
    }

	public void copyDataTo(copyOfsortie_fashionStruct other) {

		other.NAME3 = this.NAME3;
	            
	}

	public void copyKeysDataTo(copyOfsortie_fashionStruct other) {

		other.NAME3 = this.NAME3;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_BUY_VALIDATION.length) {
				if(length < 1024 && commonByteArray_DEV_BUY_VALIDATION.length == 0) {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[1024];
				} else {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_BUY_VALIDATION, 0, length);
			strReturn = new String(commonByteArray_DEV_BUY_VALIDATION, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_BUY_VALIDATION) {

        	try {

        		int length = 0;
		
					this.NAME3 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.NAME3,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		

		

        }

		
        	finally {}

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
        	}
        	finally {}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NAME3="+NAME3);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfsortie_fashionStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.NAME3, other.NAME3);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row35Struct implements routines.system.IPersistableRow<row35Struct> {
    final static byte[] commonByteArrayLock_DEV_BUY_VALIDATION = new byte[0];
    static byte[] commonByteArray_DEV_BUY_VALIDATION = new byte[0];

	
			    public String NAME;

				public String getNAME () {
					return this.NAME;
				}
				
			    public String NAME2;

				public String getNAME2 () {
					return this.NAME2;
				}
				
			    public String NAME3;

				public String getNAME3 () {
					return this.NAME3;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_BUY_VALIDATION.length) {
				if(length < 1024 && commonByteArray_DEV_BUY_VALIDATION.length == 0) {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[1024];
				} else {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_BUY_VALIDATION, 0, length);
			strReturn = new String(commonByteArray_DEV_BUY_VALIDATION, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_BUY_VALIDATION) {

        	try {

        		int length = 0;
		
					this.NAME = readString(dis);
					
					this.NAME2 = readString(dis);
					
					this.NAME3 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.NAME,dos);
					
					// String
				
						writeString(this.NAME2,dos);
					
					// String
				
						writeString(this.NAME3,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NAME="+NAME);
		sb.append(",NAME2="+NAME2);
		sb.append(",NAME3="+NAME3);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row35Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row35Struct row35 = new row35Struct();
copyOfsortie_fashionStruct copyOfsortie_fashion = new copyOfsortie_fashionStruct();





	
	/**
	 * [tAdvancedHash_copyOfsortie_fashion begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_copyOfsortie_fashion", false);
		start_Hash.put("tAdvancedHash_copyOfsortie_fashion", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_copyOfsortie_fashion";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfsortie_fashion");
					}
				
		int tos_count_tAdvancedHash_copyOfsortie_fashion = 0;
		

			   		// connection name:copyOfsortie_fashion
			   		// source node:tMap_32 - inputs:(row35) outputs:(copyOfsortie_fashion,copyOfsortie_fashion) | target node:tAdvancedHash_copyOfsortie_fashion - inputs:(copyOfsortie_fashion) outputs:()
			   		// linked node: tMap_31 - inputs:(sortie_cm_size_1,copyOfsortie_fashion) outputs:(sortie_cm_size_)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_copyOfsortie_fashion = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<copyOfsortie_fashionStruct> tHash_Lookup_copyOfsortie_fashion =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<copyOfsortie_fashionStruct>getLookup(matchingModeEnum_copyOfsortie_fashion);
	   						   
		   	   	   globalMap.put("tHash_Lookup_copyOfsortie_fashion", tHash_Lookup_copyOfsortie_fashion);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_copyOfsortie_fashion begin ] stop
 */



	
	/**
	 * [tMap_32 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_32", false);
		start_Hash.put("tMap_32", System.currentTimeMillis());
		
	
	currentComponent="tMap_32";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row35");
					}
				
		int tos_count_tMap_32 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_32__Struct  {
}
Var__tMap_32__Struct Var__tMap_32 = new Var__tMap_32__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfsortie_fashionStruct copyOfsortie_fashion_tmp = new copyOfsortie_fashionStruct();
// ###############################

        
        



        









 



/**
 * [tMap_32 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_1 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_1 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_1  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_1, talendToDBArray_tDBInput_1); 
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
			    java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
					String dbUser_tDBInput_1 = "etl_read_uat";
					
					
					 
	final String decryptedPassword_tDBInput_1 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[UGjcE63u3xonSfUwvYXnAAY39yDUQOJGGIXxqhzzc909w7wxEUCh]");
					
					String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;
				
		    String port_tDBInput_1 = "1433";
		    String dbname_tDBInput_1 = "etl_uat" ;		    
		    String url_tDBInput_1 = "jdbc:sqlserver://" + "10.7.7.48" ;
		    if (!"".equals(port_tDBInput_1)) {
		    	url_tDBInput_1 += ":" + "1433";
		    }
		    if (!"".equals(dbname_tDBInput_1)) {		    
		    	url_tDBInput_1 += ";databaseName=" + "etl_uat"; 
		    }
		    url_tDBInput_1 += ";appName=" + projectName + ";" + "";
		    String dbschema_tDBInput_1 = "";
				
				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1,dbUser_tDBInput_1,dbPwd_tDBInput_1);
		        
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "select CATEGORYNAME AS NAME, PRODUCTCATEGORYHIERARCHYNAME as NAME2,  PARENTPRODUCTCATEGORYNAME as NAME3 from  data.D365"
+"_ProductCategories\n";
			

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row35.NAME = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(1);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		row35.NAME = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row35.NAME = tmpContent_tDBInput_1;
                }
            } else {
                row35.NAME = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								row35.NAME2 = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(2);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		row35.NAME2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row35.NAME2 = tmpContent_tDBInput_1;
                }
            } else {
                row35.NAME2 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								row35.NAME3 = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(3);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
            		row35.NAME3 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row35.NAME3 = tmpContent_tDBInput_1;
                }
            } else {
                row35.NAME3 = null;
            }
		                    }
					





 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_32 main ] start
	 */

	

	
	
	currentComponent="tMap_32";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row35");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_32 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_32 = false;
		  boolean mainRowRejected_tMap_32 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_32__Struct Var = Var__tMap_32;// ###############################
        // ###############################
        // # Output tables

copyOfsortie_fashion = null;


// # Output table : 'copyOfsortie_fashion'
copyOfsortie_fashion_tmp.NAME3 = StringHandling.DOWNCASE(row35.NAME) ;
copyOfsortie_fashion = copyOfsortie_fashion_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_32 = false;










 


	tos_count_tMap_32++;

/**
 * [tMap_32 main ] stop
 */
	
	/**
	 * [tMap_32 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_32";

	

 



/**
 * [tMap_32 process_data_begin ] stop
 */
// Start of branch "copyOfsortie_fashion"
if(copyOfsortie_fashion != null) { 



	
	/**
	 * [tAdvancedHash_copyOfsortie_fashion main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_copyOfsortie_fashion";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfsortie_fashion");
					}
					


			   
			   

					copyOfsortie_fashionStruct copyOfsortie_fashion_HashRow = new copyOfsortie_fashionStruct();
		   	   	   
				
				copyOfsortie_fashion_HashRow.NAME3 = copyOfsortie_fashion.NAME3;
				
			tHash_Lookup_copyOfsortie_fashion.put(copyOfsortie_fashion_HashRow);
			
            




 


	tos_count_tAdvancedHash_copyOfsortie_fashion++;

/**
 * [tAdvancedHash_copyOfsortie_fashion main ] stop
 */
	
	/**
	 * [tAdvancedHash_copyOfsortie_fashion process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_copyOfsortie_fashion";

	

 



/**
 * [tAdvancedHash_copyOfsortie_fashion process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_copyOfsortie_fashion process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_copyOfsortie_fashion";

	

 



/**
 * [tAdvancedHash_copyOfsortie_fashion process_data_end ] stop
 */

} // End of branch "copyOfsortie_fashion"




	
	/**
	 * [tMap_32 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_32";

	

 



/**
 * [tMap_32 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
		if(conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {
			
			conn_tDBInput_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);

 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tMap_32 end ] start
	 */

	

	
	
	currentComponent="tMap_32";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row35");
			  	}
			  	
 

ok_Hash.put("tMap_32", true);
end_Hash.put("tMap_32", System.currentTimeMillis());




/**
 * [tMap_32 end ] stop
 */

	
	/**
	 * [tAdvancedHash_copyOfsortie_fashion end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_copyOfsortie_fashion";

	

tHash_Lookup_copyOfsortie_fashion.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfsortie_fashion");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_copyOfsortie_fashion", true);
end_Hash.put("tAdvancedHash_copyOfsortie_fashion", System.currentTimeMillis());




/**
 * [tAdvancedHash_copyOfsortie_fashion end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tMap_32 finally ] start
	 */

	

	
	
	currentComponent="tMap_32";

	

 



/**
 * [tMap_32 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_copyOfsortie_fashion finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_copyOfsortie_fashion";

	

 



/**
 * [tAdvancedHash_copyOfsortie_fashion finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row30Struct implements routines.system.IPersistableComparableLookupRow<row30Struct> {
    final static byte[] commonByteArrayLock_DEV_BUY_VALIDATION = new byte[0];
    static byte[] commonByteArray_DEV_BUY_VALIDATION = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String ENUMERATIONNAME;

				public String getENUMERATIONNAME () {
					return this.ENUMERATIONNAME;
				}
				
			    public String ENUMERATIONVALUE;

				public String getENUMERATIONVALUE () {
					return this.ENUMERATIONVALUE;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ENUMERATIONVALUE == null) ? 0 : this.ENUMERATIONVALUE.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row30Struct other = (row30Struct) obj;
		
						if (this.ENUMERATIONVALUE == null) {
							if (other.ENUMERATIONVALUE != null)
								return false;
						
						} else if (!this.ENUMERATIONVALUE.equals(other.ENUMERATIONVALUE))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row30Struct other) {

		other.ENUMERATIONNAME = this.ENUMERATIONNAME;
	            other.ENUMERATIONVALUE = this.ENUMERATIONVALUE;
	            
	}

	public void copyKeysDataTo(row30Struct other) {

		other.ENUMERATIONVALUE = this.ENUMERATIONVALUE;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_BUY_VALIDATION.length) {
				if(length < 1024 && commonByteArray_DEV_BUY_VALIDATION.length == 0) {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[1024];
				} else {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_BUY_VALIDATION, 0, length);
			strReturn = new String(commonByteArray_DEV_BUY_VALIDATION, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_BUY_VALIDATION) {

        	try {

        		int length = 0;
		
					this.ENUMERATIONVALUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ENUMERATIONVALUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.ENUMERATIONNAME = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.ENUMERATIONNAME, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ENUMERATIONNAME="+ENUMERATIONNAME);
		sb.append(",ENUMERATIONVALUE="+ENUMERATIONVALUE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row30Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ENUMERATIONVALUE, other.ENUMERATIONVALUE);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_size_rangeStruct implements routines.system.IPersistableRow<sortie_size_rangeStruct> {
    final static byte[] commonByteArrayLock_DEV_BUY_VALIDATION = new byte[0];
    static byte[] commonByteArray_DEV_BUY_VALIDATION = new byte[0];

	
			    public String ENUMERATIONNAME;

				public String getENUMERATIONNAME () {
					return this.ENUMERATIONNAME;
				}
				
			    public String ENUMERATIONVALUE;

				public String getENUMERATIONVALUE () {
					return this.ENUMERATIONVALUE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_BUY_VALIDATION.length) {
				if(length < 1024 && commonByteArray_DEV_BUY_VALIDATION.length == 0) {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[1024];
				} else {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_BUY_VALIDATION, 0, length);
			strReturn = new String(commonByteArray_DEV_BUY_VALIDATION, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_BUY_VALIDATION) {

        	try {

        		int length = 0;
		
					this.ENUMERATIONNAME = readString(dis);
					
					this.ENUMERATIONVALUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ENUMERATIONNAME,dos);
					
					// String
				
						writeString(this.ENUMERATIONVALUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ENUMERATIONNAME="+ENUMERATIONNAME);
		sb.append(",ENUMERATIONVALUE="+ENUMERATIONVALUE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_size_rangeStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row29Struct implements routines.system.IPersistableRow<row29Struct> {
    final static byte[] commonByteArrayLock_DEV_BUY_VALIDATION = new byte[0];
    static byte[] commonByteArray_DEV_BUY_VALIDATION = new byte[0];

	
			    public String ENUMERATIONNAME;

				public String getENUMERATIONNAME () {
					return this.ENUMERATIONNAME;
				}
				
			    public String ENUMERATIONVALUE;

				public String getENUMERATIONVALUE () {
					return this.ENUMERATIONVALUE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_BUY_VALIDATION.length) {
				if(length < 1024 && commonByteArray_DEV_BUY_VALIDATION.length == 0) {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[1024];
				} else {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_BUY_VALIDATION, 0, length);
			strReturn = new String(commonByteArray_DEV_BUY_VALIDATION, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_BUY_VALIDATION) {

        	try {

        		int length = 0;
		
					this.ENUMERATIONNAME = readString(dis);
					
					this.ENUMERATIONVALUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ENUMERATIONNAME,dos);
					
					// String
				
						writeString(this.ENUMERATIONVALUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ENUMERATIONNAME="+ENUMERATIONNAME);
		sb.append(",ENUMERATIONVALUE="+ENUMERATIONVALUE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row29Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row29Struct row29 = new row29Struct();
sortie_size_rangeStruct sortie_size_range = new sortie_size_rangeStruct();
row30Struct row30 = new row30Struct();






	
	/**
	 * [tAdvancedHash_row30 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row30", false);
		start_Hash.put("tAdvancedHash_row30", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row30";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row30");
					}
				
		int tos_count_tAdvancedHash_row30 = 0;
		

			   		// connection name:row30
			   		// source node:tFilterRow_6 - inputs:(sortie_size_range) outputs:(row30,row30) | target node:tAdvancedHash_row30 - inputs:(row30) outputs:()
			   		// linked node: tMap_26 - inputs:(sortie_age_range_,row30) outputs:(sortie_size_range_)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row30 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row30Struct> tHash_Lookup_row30 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row30Struct>getLookup(matchingModeEnum_row30);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row30", tHash_Lookup_row30);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row30 begin ] stop
 */



	
	/**
	 * [tFilterRow_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_6", false);
		start_Hash.put("tFilterRow_6", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_6";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_size_range");
					}
				
		int tos_count_tFilterRow_6 = 0;
		
    int nb_line_tFilterRow_6 = 0;
    int nb_line_ok_tFilterRow_6 = 0;
    int nb_line_reject_tFilterRow_6 = 0;

    class Operator_tFilterRow_6 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_6(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_6 begin ] stop
 */



	
	/**
	 * [tMap_25 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_25", false);
		start_Hash.put("tMap_25", System.currentTimeMillis());
		
	
	currentComponent="tMap_25";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row29");
					}
				
		int tos_count_tMap_25 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_25__Struct  {
}
Var__tMap_25__Struct Var__tMap_25 = new Var__tMap_25__Struct();
// ###############################

// ###############################
// # Outputs initialization
sortie_size_rangeStruct sortie_size_range_tmp = new sortie_size_rangeStruct();
// ###############################

        
        



        









 



/**
 * [tMap_25 begin ] stop
 */



	
	/**
	 * [tDBInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_3", false);
		start_Hash.put("tDBInput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_3";

	
		int tos_count_tDBInput_3 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_3 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_3 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_3  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_3, talendToDBArray_tDBInput_3); 
		    int nb_line_tDBInput_3 = 0;
		    java.sql.Connection conn_tDBInput_3 = null;
				String driverClass_tDBInput_3 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
			    java.lang.Class jdbcclazz_tDBInput_3 = java.lang.Class.forName(driverClass_tDBInput_3);
					String dbUser_tDBInput_3 = "etl_read_uat";
					
					
					 
	final String decryptedPassword_tDBInput_3 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[ybG8xYBuIEZQWkWsENOl2lbJyKU9b59mtspek6o/vfG1/sjOjQ52]");
					
					String dbPwd_tDBInput_3 = decryptedPassword_tDBInput_3;
				
		    String port_tDBInput_3 = "1433";
		    String dbname_tDBInput_3 = "etl_uat" ;		    
		    String url_tDBInput_3 = "jdbc:sqlserver://" + "10.7.7.48" ;
		    if (!"".equals(port_tDBInput_3)) {
		    	url_tDBInput_3 += ":" + "1433";
		    }
		    if (!"".equals(dbname_tDBInput_3)) {		    
		    	url_tDBInput_3 += ";databaseName=" + "etl_uat"; 
		    }
		    url_tDBInput_3 += ";appName=" + projectName + ";" + "";
		    String dbschema_tDBInput_3 = "";
				
				conn_tDBInput_3 = java.sql.DriverManager.getConnection(url_tDBInput_3,dbUser_tDBInput_3,dbPwd_tDBInput_3);
		        
		    
			java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

		    String dbquery_tDBInput_3 = "select ENUMERATIONNAME, ENUMERATIONVALUE from data.D365_ProductAttributeEnumerationTypes where ENUMERATIONNAME = 'Size "
+"Range'";
			

            	globalMap.put("tDBInput_3_QUERY",dbquery_tDBInput_3);
		    java.sql.ResultSet rs_tDBInput_3 = null;

		    try {
		    	rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
		    	int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

		    String tmpContent_tDBInput_3 = null;
		    
		    
		    while (rs_tDBInput_3.next()) {
		        nb_line_tDBInput_3++;
		        
							if(colQtyInRs_tDBInput_3 < 1) {
								row29.ENUMERATIONNAME = null;
							} else {
	                         		
           		tmpContent_tDBInput_3 = rs_tDBInput_3.getString(1);
            if(tmpContent_tDBInput_3 != null) {
            	if (talendToDBList_tDBInput_3 .contains(rsmd_tDBInput_3.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		row29.ENUMERATIONNAME = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
            	} else {
                	row29.ENUMERATIONNAME = tmpContent_tDBInput_3;
                }
            } else {
                row29.ENUMERATIONNAME = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 2) {
								row29.ENUMERATIONVALUE = null;
							} else {
	                         		
           		tmpContent_tDBInput_3 = rs_tDBInput_3.getString(2);
            if(tmpContent_tDBInput_3 != null) {
            	if (talendToDBList_tDBInput_3 .contains(rsmd_tDBInput_3.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		row29.ENUMERATIONVALUE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
            	} else {
                	row29.ENUMERATIONVALUE = tmpContent_tDBInput_3;
                }
            } else {
                row29.ENUMERATIONVALUE = null;
            }
		                    }
					





 



/**
 * [tDBInput_3 begin ] stop
 */
	
	/**
	 * [tDBInput_3 main ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 


	tos_count_tDBInput_3++;

/**
 * [tDBInput_3 main ] stop
 */
	
	/**
	 * [tDBInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tMap_25 main ] start
	 */

	

	
	
	currentComponent="tMap_25";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row29");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_25 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_25 = false;
		  boolean mainRowRejected_tMap_25 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_25__Struct Var = Var__tMap_25;// ###############################
        // ###############################
        // # Output tables

sortie_size_range = null;


// # Output table : 'sortie_size_range'
sortie_size_range_tmp.ENUMERATIONNAME = row29.ENUMERATIONNAME ;
sortie_size_range_tmp.ENUMERATIONVALUE = StringHandling.DOWNCASE(row29.ENUMERATIONVALUE ) ;
sortie_size_range = sortie_size_range_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_25 = false;










 


	tos_count_tMap_25++;

/**
 * [tMap_25 main ] stop
 */
	
	/**
	 * [tMap_25 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_25";

	

 



/**
 * [tMap_25 process_data_begin ] stop
 */
// Start of branch "sortie_size_range"
if(sortie_size_range != null) { 



	
	/**
	 * [tFilterRow_6 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_6";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_size_range");
					}
					

          row30 = null;
          row30 = null;
    Operator_tFilterRow_6 ope_tFilterRow_6 = new Operator_tFilterRow_6("&&");
            ope_tFilterRow_6.matches((sortie_size_range.ENUMERATIONNAME == null? false : sortie_size_range.ENUMERATIONNAME.compareTo("Size Range") == 0)
                           , "ENUMERATIONNAME.compareTo(\"Size Range\") == 0 failed");
    
    if (ope_tFilterRow_6.getMatchFlag()) {
              if(row30 == null){ 
                row30 = new row30Struct();
              }
               row30.ENUMERATIONNAME = sortie_size_range.ENUMERATIONNAME;
               row30.ENUMERATIONVALUE = sortie_size_range.ENUMERATIONVALUE;
              if(row30 == null){ 
                row30 = new row30Struct();
              }
               row30.ENUMERATIONNAME = sortie_size_range.ENUMERATIONNAME;
               row30.ENUMERATIONVALUE = sortie_size_range.ENUMERATIONVALUE;    
      nb_line_ok_tFilterRow_6++;
    } else {
      nb_line_reject_tFilterRow_6++;
    }

nb_line_tFilterRow_6++;

 


	tos_count_tFilterRow_6++;

/**
 * [tFilterRow_6 main ] stop
 */
	
	/**
	 * [tFilterRow_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_6";

	

 



/**
 * [tFilterRow_6 process_data_begin ] stop
 */
// Start of branch "row30"
if(row30 != null) { 



	
	/**
	 * [tAdvancedHash_row30 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row30";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row30");
					}
					


			   
			   

					row30Struct row30_HashRow = new row30Struct();
		   	   	   
				
				row30_HashRow.ENUMERATIONNAME = row30.ENUMERATIONNAME;
				
				row30_HashRow.ENUMERATIONVALUE = row30.ENUMERATIONVALUE;
				
			tHash_Lookup_row30.put(row30_HashRow);
			
            




 


	tos_count_tAdvancedHash_row30++;

/**
 * [tAdvancedHash_row30 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row30 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row30";

	

 



/**
 * [tAdvancedHash_row30 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row30 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row30";

	

 



/**
 * [tAdvancedHash_row30 process_data_end ] stop
 */

} // End of branch "row30"




	
	/**
	 * [tFilterRow_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_6";

	

 



/**
 * [tFilterRow_6 process_data_end ] stop
 */

} // End of branch "sortie_size_range"




	
	/**
	 * [tMap_25 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_25";

	

 



/**
 * [tMap_25 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_3 end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

	}
}finally{
	if (rs_tDBInput_3 != null) {
		rs_tDBInput_3.close();
	}
	if (stmt_tDBInput_3 != null) {
		stmt_tDBInput_3.close();
	}
		if(conn_tDBInput_3 != null && !conn_tDBInput_3.isClosed()) {
			
			conn_tDBInput_3.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_3_NB_LINE",nb_line_tDBInput_3);

 

ok_Hash.put("tDBInput_3", true);
end_Hash.put("tDBInput_3", System.currentTimeMillis());




/**
 * [tDBInput_3 end ] stop
 */

	
	/**
	 * [tMap_25 end ] start
	 */

	

	
	
	currentComponent="tMap_25";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row29");
			  	}
			  	
 

ok_Hash.put("tMap_25", true);
end_Hash.put("tMap_25", System.currentTimeMillis());




/**
 * [tMap_25 end ] stop
 */

	
	/**
	 * [tFilterRow_6 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_6";

	
    globalMap.put("tFilterRow_6_NB_LINE", nb_line_tFilterRow_6);
    globalMap.put("tFilterRow_6_NB_LINE_OK", nb_line_ok_tFilterRow_6);
    globalMap.put("tFilterRow_6_NB_LINE_REJECT", nb_line_reject_tFilterRow_6);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_size_range");
			  	}
			  	
 

ok_Hash.put("tFilterRow_6", true);
end_Hash.put("tFilterRow_6", System.currentTimeMillis());




/**
 * [tFilterRow_6 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row30 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row30";

	

tHash_Lookup_row30.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row30");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row30", true);
end_Hash.put("tAdvancedHash_row30", System.currentTimeMillis());




/**
 * [tAdvancedHash_row30 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 finally ] stop
 */

	
	/**
	 * [tMap_25 finally ] start
	 */

	

	
	
	currentComponent="tMap_25";

	

 



/**
 * [tMap_25 finally ] stop
 */

	
	/**
	 * [tFilterRow_6 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_6";

	

 



/**
 * [tFilterRow_6 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row30 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row30";

	

 



/**
 * [tAdvancedHash_row30 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class row28Struct implements routines.system.IPersistableComparableLookupRow<row28Struct> {
    final static byte[] commonByteArrayLock_DEV_BUY_VALIDATION = new byte[0];
    static byte[] commonByteArray_DEV_BUY_VALIDATION = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String ENUMERATIONNAME;

				public String getENUMERATIONNAME () {
					return this.ENUMERATIONNAME;
				}
				
			    public String ENUMERATIONVALUE;

				public String getENUMERATIONVALUE () {
					return this.ENUMERATIONVALUE;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ENUMERATIONVALUE == null) ? 0 : this.ENUMERATIONVALUE.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row28Struct other = (row28Struct) obj;
		
						if (this.ENUMERATIONVALUE == null) {
							if (other.ENUMERATIONVALUE != null)
								return false;
						
						} else if (!this.ENUMERATIONVALUE.equals(other.ENUMERATIONVALUE))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row28Struct other) {

		other.ENUMERATIONNAME = this.ENUMERATIONNAME;
	            other.ENUMERATIONVALUE = this.ENUMERATIONVALUE;
	            
	}

	public void copyKeysDataTo(row28Struct other) {

		other.ENUMERATIONVALUE = this.ENUMERATIONVALUE;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_BUY_VALIDATION.length) {
				if(length < 1024 && commonByteArray_DEV_BUY_VALIDATION.length == 0) {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[1024];
				} else {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_BUY_VALIDATION, 0, length);
			strReturn = new String(commonByteArray_DEV_BUY_VALIDATION, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_BUY_VALIDATION) {

        	try {

        		int length = 0;
		
					this.ENUMERATIONVALUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ENUMERATIONVALUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.ENUMERATIONNAME = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.ENUMERATIONNAME, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ENUMERATIONNAME="+ENUMERATIONNAME);
		sb.append(",ENUMERATIONVALUE="+ENUMERATIONVALUE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row28Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ENUMERATIONVALUE, other.ENUMERATIONVALUE);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_age_rangeStruct implements routines.system.IPersistableRow<sortie_age_rangeStruct> {
    final static byte[] commonByteArrayLock_DEV_BUY_VALIDATION = new byte[0];
    static byte[] commonByteArray_DEV_BUY_VALIDATION = new byte[0];

	
			    public String ENUMERATIONNAME;

				public String getENUMERATIONNAME () {
					return this.ENUMERATIONNAME;
				}
				
			    public String ENUMERATIONVALUE;

				public String getENUMERATIONVALUE () {
					return this.ENUMERATIONVALUE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_BUY_VALIDATION.length) {
				if(length < 1024 && commonByteArray_DEV_BUY_VALIDATION.length == 0) {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[1024];
				} else {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_BUY_VALIDATION, 0, length);
			strReturn = new String(commonByteArray_DEV_BUY_VALIDATION, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_BUY_VALIDATION) {

        	try {

        		int length = 0;
		
					this.ENUMERATIONNAME = readString(dis);
					
					this.ENUMERATIONVALUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ENUMERATIONNAME,dos);
					
					// String
				
						writeString(this.ENUMERATIONVALUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ENUMERATIONNAME="+ENUMERATIONNAME);
		sb.append(",ENUMERATIONVALUE="+ENUMERATIONVALUE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_age_rangeStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row27Struct implements routines.system.IPersistableRow<row27Struct> {
    final static byte[] commonByteArrayLock_DEV_BUY_VALIDATION = new byte[0];
    static byte[] commonByteArray_DEV_BUY_VALIDATION = new byte[0];

	
			    public String ENUMERATIONNAME;

				public String getENUMERATIONNAME () {
					return this.ENUMERATIONNAME;
				}
				
			    public String ENUMERATIONVALUE;

				public String getENUMERATIONVALUE () {
					return this.ENUMERATIONVALUE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_BUY_VALIDATION.length) {
				if(length < 1024 && commonByteArray_DEV_BUY_VALIDATION.length == 0) {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[1024];
				} else {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_BUY_VALIDATION, 0, length);
			strReturn = new String(commonByteArray_DEV_BUY_VALIDATION, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_BUY_VALIDATION) {

        	try {

        		int length = 0;
		
					this.ENUMERATIONNAME = readString(dis);
					
					this.ENUMERATIONVALUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ENUMERATIONNAME,dos);
					
					// String
				
						writeString(this.ENUMERATIONVALUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ENUMERATIONNAME="+ENUMERATIONNAME);
		sb.append(",ENUMERATIONVALUE="+ENUMERATIONVALUE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row27Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row27Struct row27 = new row27Struct();
sortie_age_rangeStruct sortie_age_range = new sortie_age_rangeStruct();
row28Struct row28 = new row28Struct();






	
	/**
	 * [tAdvancedHash_row28 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row28", false);
		start_Hash.put("tAdvancedHash_row28", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row28";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row28");
					}
				
		int tos_count_tAdvancedHash_row28 = 0;
		

			   		// connection name:row28
			   		// source node:tFilterRow_5 - inputs:(sortie_age_range) outputs:(row28,row28) | target node:tAdvancedHash_row28 - inputs:(row28) outputs:()
			   		// linked node: tMap_24 - inputs:(sortie_coo,row28) outputs:(sortie_age_range_)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row28 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row28Struct> tHash_Lookup_row28 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row28Struct>getLookup(matchingModeEnum_row28);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row28", tHash_Lookup_row28);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row28 begin ] stop
 */



	
	/**
	 * [tFilterRow_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_5", false);
		start_Hash.put("tFilterRow_5", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_age_range");
					}
				
		int tos_count_tFilterRow_5 = 0;
		
    int nb_line_tFilterRow_5 = 0;
    int nb_line_ok_tFilterRow_5 = 0;
    int nb_line_reject_tFilterRow_5 = 0;

    class Operator_tFilterRow_5 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_5(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_5 begin ] stop
 */



	
	/**
	 * [tMap_23 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_23", false);
		start_Hash.put("tMap_23", System.currentTimeMillis());
		
	
	currentComponent="tMap_23";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row27");
					}
				
		int tos_count_tMap_23 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_23__Struct  {
}
Var__tMap_23__Struct Var__tMap_23 = new Var__tMap_23__Struct();
// ###############################

// ###############################
// # Outputs initialization
sortie_age_rangeStruct sortie_age_range_tmp = new sortie_age_rangeStruct();
// ###############################

        
        



        









 



/**
 * [tMap_23 begin ] stop
 */



	
	/**
	 * [tDBInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_4", false);
		start_Hash.put("tDBInput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_4";

	
		int tos_count_tDBInput_4 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_4 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_4 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_4  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_4, talendToDBArray_tDBInput_4); 
		    int nb_line_tDBInput_4 = 0;
		    java.sql.Connection conn_tDBInput_4 = null;
				String driverClass_tDBInput_4 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
			    java.lang.Class jdbcclazz_tDBInput_4 = java.lang.Class.forName(driverClass_tDBInput_4);
					String dbUser_tDBInput_4 = "etl_read_uat";
					
					
					 
	final String decryptedPassword_tDBInput_4 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[j4OySoYjSkL7sXEMYuVs5ngpmHL7pu16pqUnJqWe7DPEUrcC8N5h]");
					
					String dbPwd_tDBInput_4 = decryptedPassword_tDBInput_4;
				
		    String port_tDBInput_4 = "1433";
		    String dbname_tDBInput_4 = "etl_uat" ;		    
		    String url_tDBInput_4 = "jdbc:sqlserver://" + "10.7.7.48" ;
		    if (!"".equals(port_tDBInput_4)) {
		    	url_tDBInput_4 += ":" + "1433";
		    }
		    if (!"".equals(dbname_tDBInput_4)) {		    
		    	url_tDBInput_4 += ";databaseName=" + "etl_uat"; 
		    }
		    url_tDBInput_4 += ";appName=" + projectName + ";" + "";
		    String dbschema_tDBInput_4 = "";
				
				conn_tDBInput_4 = java.sql.DriverManager.getConnection(url_tDBInput_4,dbUser_tDBInput_4,dbPwd_tDBInput_4);
		        
		    
			java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();

		    String dbquery_tDBInput_4 = "select ENUMERATIONNAME, ENUMERATIONVALUE from data.D365_ProductAttributeEnumerationTypes where ENUMERATIONNAME = 'Age G"
+"roup'";
			

            	globalMap.put("tDBInput_4_QUERY",dbquery_tDBInput_4);
		    java.sql.ResultSet rs_tDBInput_4 = null;

		    try {
		    	rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
		    	int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

		    String tmpContent_tDBInput_4 = null;
		    
		    
		    while (rs_tDBInput_4.next()) {
		        nb_line_tDBInput_4++;
		        
							if(colQtyInRs_tDBInput_4 < 1) {
								row27.ENUMERATIONNAME = null;
							} else {
	                         		
           		tmpContent_tDBInput_4 = rs_tDBInput_4.getString(1);
            if(tmpContent_tDBInput_4 != null) {
            	if (talendToDBList_tDBInput_4 .contains(rsmd_tDBInput_4.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		row27.ENUMERATIONNAME = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
            	} else {
                	row27.ENUMERATIONNAME = tmpContent_tDBInput_4;
                }
            } else {
                row27.ENUMERATIONNAME = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 2) {
								row27.ENUMERATIONVALUE = null;
							} else {
	                         		
           		tmpContent_tDBInput_4 = rs_tDBInput_4.getString(2);
            if(tmpContent_tDBInput_4 != null) {
            	if (talendToDBList_tDBInput_4 .contains(rsmd_tDBInput_4.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		row27.ENUMERATIONVALUE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
            	} else {
                	row27.ENUMERATIONVALUE = tmpContent_tDBInput_4;
                }
            } else {
                row27.ENUMERATIONVALUE = null;
            }
		                    }
					





 



/**
 * [tDBInput_4 begin ] stop
 */
	
	/**
	 * [tDBInput_4 main ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 


	tos_count_tDBInput_4++;

/**
 * [tDBInput_4 main ] stop
 */
	
	/**
	 * [tDBInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tMap_23 main ] start
	 */

	

	
	
	currentComponent="tMap_23";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row27");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_23 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_23 = false;
		  boolean mainRowRejected_tMap_23 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_23__Struct Var = Var__tMap_23;// ###############################
        // ###############################
        // # Output tables

sortie_age_range = null;


// # Output table : 'sortie_age_range'
sortie_age_range_tmp.ENUMERATIONNAME = row27.ENUMERATIONNAME ;
sortie_age_range_tmp.ENUMERATIONVALUE = StringHandling.DOWNCASE(row27.ENUMERATIONVALUE ) ;
sortie_age_range = sortie_age_range_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_23 = false;










 


	tos_count_tMap_23++;

/**
 * [tMap_23 main ] stop
 */
	
	/**
	 * [tMap_23 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_23";

	

 



/**
 * [tMap_23 process_data_begin ] stop
 */
// Start of branch "sortie_age_range"
if(sortie_age_range != null) { 



	
	/**
	 * [tFilterRow_5 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_age_range");
					}
					

          row28 = null;
          row28 = null;
    Operator_tFilterRow_5 ope_tFilterRow_5 = new Operator_tFilterRow_5("&&");
            ope_tFilterRow_5.matches((sortie_age_range.ENUMERATIONNAME == null? false : sortie_age_range.ENUMERATIONNAME.compareTo("Age Group") == 0)
                           , "ENUMERATIONNAME.compareTo(\"Age Group\") == 0 failed");
    
    if (ope_tFilterRow_5.getMatchFlag()) {
              if(row28 == null){ 
                row28 = new row28Struct();
              }
               row28.ENUMERATIONNAME = sortie_age_range.ENUMERATIONNAME;
               row28.ENUMERATIONVALUE = sortie_age_range.ENUMERATIONVALUE;
              if(row28 == null){ 
                row28 = new row28Struct();
              }
               row28.ENUMERATIONNAME = sortie_age_range.ENUMERATIONNAME;
               row28.ENUMERATIONVALUE = sortie_age_range.ENUMERATIONVALUE;    
      nb_line_ok_tFilterRow_5++;
    } else {
      nb_line_reject_tFilterRow_5++;
    }

nb_line_tFilterRow_5++;

 


	tos_count_tFilterRow_5++;

/**
 * [tFilterRow_5 main ] stop
 */
	
	/**
	 * [tFilterRow_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_5";

	

 



/**
 * [tFilterRow_5 process_data_begin ] stop
 */
// Start of branch "row28"
if(row28 != null) { 



	
	/**
	 * [tAdvancedHash_row28 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row28";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row28");
					}
					


			   
			   

					row28Struct row28_HashRow = new row28Struct();
		   	   	   
				
				row28_HashRow.ENUMERATIONNAME = row28.ENUMERATIONNAME;
				
				row28_HashRow.ENUMERATIONVALUE = row28.ENUMERATIONVALUE;
				
			tHash_Lookup_row28.put(row28_HashRow);
			
            




 


	tos_count_tAdvancedHash_row28++;

/**
 * [tAdvancedHash_row28 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row28 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row28";

	

 



/**
 * [tAdvancedHash_row28 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row28 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row28";

	

 



/**
 * [tAdvancedHash_row28 process_data_end ] stop
 */

} // End of branch "row28"




	
	/**
	 * [tFilterRow_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_5";

	

 



/**
 * [tFilterRow_5 process_data_end ] stop
 */

} // End of branch "sortie_age_range"




	
	/**
	 * [tMap_23 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_23";

	

 



/**
 * [tMap_23 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_4 end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

	}
}finally{
	if (rs_tDBInput_4 != null) {
		rs_tDBInput_4.close();
	}
	if (stmt_tDBInput_4 != null) {
		stmt_tDBInput_4.close();
	}
		if(conn_tDBInput_4 != null && !conn_tDBInput_4.isClosed()) {
			
			conn_tDBInput_4.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_4_NB_LINE",nb_line_tDBInput_4);

 

ok_Hash.put("tDBInput_4", true);
end_Hash.put("tDBInput_4", System.currentTimeMillis());




/**
 * [tDBInput_4 end ] stop
 */

	
	/**
	 * [tMap_23 end ] start
	 */

	

	
	
	currentComponent="tMap_23";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row27");
			  	}
			  	
 

ok_Hash.put("tMap_23", true);
end_Hash.put("tMap_23", System.currentTimeMillis());




/**
 * [tMap_23 end ] stop
 */

	
	/**
	 * [tFilterRow_5 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_5";

	
    globalMap.put("tFilterRow_5_NB_LINE", nb_line_tFilterRow_5);
    globalMap.put("tFilterRow_5_NB_LINE_OK", nb_line_ok_tFilterRow_5);
    globalMap.put("tFilterRow_5_NB_LINE_REJECT", nb_line_reject_tFilterRow_5);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_age_range");
			  	}
			  	
 

ok_Hash.put("tFilterRow_5", true);
end_Hash.put("tFilterRow_5", System.currentTimeMillis());




/**
 * [tFilterRow_5 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row28 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row28";

	

tHash_Lookup_row28.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row28");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row28", true);
end_Hash.put("tAdvancedHash_row28", System.currentTimeMillis());




/**
 * [tAdvancedHash_row28 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 finally ] stop
 */

	
	/**
	 * [tMap_23 finally ] start
	 */

	

	
	
	currentComponent="tMap_23";

	

 



/**
 * [tMap_23 finally ] stop
 */

	
	/**
	 * [tFilterRow_5 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_5";

	

 



/**
 * [tFilterRow_5 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row28 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row28";

	

 



/**
 * [tAdvancedHash_row28 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class row23Struct implements routines.system.IPersistableComparableLookupRow<row23Struct> {
    final static byte[] commonByteArrayLock_DEV_BUY_VALIDATION = new byte[0];
    static byte[] commonByteArray_DEV_BUY_VALIDATION = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String ENUMERATIONNAME;

				public String getENUMERATIONNAME () {
					return this.ENUMERATIONNAME;
				}
				
			    public String ENUMERATIONVALUE;

				public String getENUMERATIONVALUE () {
					return this.ENUMERATIONVALUE;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ENUMERATIONVALUE == null) ? 0 : this.ENUMERATIONVALUE.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row23Struct other = (row23Struct) obj;
		
						if (this.ENUMERATIONVALUE == null) {
							if (other.ENUMERATIONVALUE != null)
								return false;
						
						} else if (!this.ENUMERATIONVALUE.equals(other.ENUMERATIONVALUE))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row23Struct other) {

		other.ENUMERATIONNAME = this.ENUMERATIONNAME;
	            other.ENUMERATIONVALUE = this.ENUMERATIONVALUE;
	            
	}

	public void copyKeysDataTo(row23Struct other) {

		other.ENUMERATIONVALUE = this.ENUMERATIONVALUE;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_BUY_VALIDATION.length) {
				if(length < 1024 && commonByteArray_DEV_BUY_VALIDATION.length == 0) {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[1024];
				} else {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_BUY_VALIDATION, 0, length);
			strReturn = new String(commonByteArray_DEV_BUY_VALIDATION, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_BUY_VALIDATION) {

        	try {

        		int length = 0;
		
					this.ENUMERATIONVALUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ENUMERATIONVALUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.ENUMERATIONNAME = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.ENUMERATIONNAME, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ENUMERATIONNAME="+ENUMERATIONNAME);
		sb.append(",ENUMERATIONVALUE="+ENUMERATIONVALUE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row23Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ENUMERATIONVALUE, other.ENUMERATIONVALUE);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_product_tier_fileStruct implements routines.system.IPersistableRow<sortie_product_tier_fileStruct> {
    final static byte[] commonByteArrayLock_DEV_BUY_VALIDATION = new byte[0];
    static byte[] commonByteArray_DEV_BUY_VALIDATION = new byte[0];

	
			    public String ENUMERATIONNAME;

				public String getENUMERATIONNAME () {
					return this.ENUMERATIONNAME;
				}
				
			    public String ENUMERATIONVALUE;

				public String getENUMERATIONVALUE () {
					return this.ENUMERATIONVALUE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_BUY_VALIDATION.length) {
				if(length < 1024 && commonByteArray_DEV_BUY_VALIDATION.length == 0) {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[1024];
				} else {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_BUY_VALIDATION, 0, length);
			strReturn = new String(commonByteArray_DEV_BUY_VALIDATION, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_BUY_VALIDATION) {

        	try {

        		int length = 0;
		
					this.ENUMERATIONNAME = readString(dis);
					
					this.ENUMERATIONVALUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ENUMERATIONNAME,dos);
					
					// String
				
						writeString(this.ENUMERATIONVALUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ENUMERATIONNAME="+ENUMERATIONNAME);
		sb.append(",ENUMERATIONVALUE="+ENUMERATIONVALUE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_product_tier_fileStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row22Struct implements routines.system.IPersistableRow<row22Struct> {
    final static byte[] commonByteArrayLock_DEV_BUY_VALIDATION = new byte[0];
    static byte[] commonByteArray_DEV_BUY_VALIDATION = new byte[0];

	
			    public String ENUMERATIONNAME;

				public String getENUMERATIONNAME () {
					return this.ENUMERATIONNAME;
				}
				
			    public String ENUMERATIONVALUE;

				public String getENUMERATIONVALUE () {
					return this.ENUMERATIONVALUE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_BUY_VALIDATION.length) {
				if(length < 1024 && commonByteArray_DEV_BUY_VALIDATION.length == 0) {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[1024];
				} else {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_BUY_VALIDATION, 0, length);
			strReturn = new String(commonByteArray_DEV_BUY_VALIDATION, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_BUY_VALIDATION) {

        	try {

        		int length = 0;
		
					this.ENUMERATIONNAME = readString(dis);
					
					this.ENUMERATIONVALUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ENUMERATIONNAME,dos);
					
					// String
				
						writeString(this.ENUMERATIONVALUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ENUMERATIONNAME="+ENUMERATIONNAME);
		sb.append(",ENUMERATIONVALUE="+ENUMERATIONVALUE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row22Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row22Struct row22 = new row22Struct();
sortie_product_tier_fileStruct sortie_product_tier_file = new sortie_product_tier_fileStruct();
row23Struct row23 = new row23Struct();






	
	/**
	 * [tAdvancedHash_row23 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row23", false);
		start_Hash.put("tAdvancedHash_row23", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row23";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row23");
					}
				
		int tos_count_tAdvancedHash_row23 = 0;
		

			   		// connection name:row23
			   		// source node:tFilterRow_3 - inputs:(sortie_product_tier_file) outputs:(row23,row23) | target node:tAdvancedHash_row23 - inputs:(row23) outputs:()
			   		// linked node: tMap_11 - inputs:(sortie_product_status,row23) outputs:(sortie_product_tier)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row23 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row23Struct> tHash_Lookup_row23 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row23Struct>getLookup(matchingModeEnum_row23);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row23", tHash_Lookup_row23);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row23 begin ] stop
 */



	
	/**
	 * [tFilterRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_3", false);
		start_Hash.put("tFilterRow_3", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_product_tier_file");
					}
				
		int tos_count_tFilterRow_3 = 0;
		
    int nb_line_tFilterRow_3 = 0;
    int nb_line_ok_tFilterRow_3 = 0;
    int nb_line_reject_tFilterRow_3 = 0;

    class Operator_tFilterRow_3 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_3(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_3 begin ] stop
 */



	
	/**
	 * [tMap_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_15", false);
		start_Hash.put("tMap_15", System.currentTimeMillis());
		
	
	currentComponent="tMap_15";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row22");
					}
				
		int tos_count_tMap_15 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_15__Struct  {
}
Var__tMap_15__Struct Var__tMap_15 = new Var__tMap_15__Struct();
// ###############################

// ###############################
// # Outputs initialization
sortie_product_tier_fileStruct sortie_product_tier_file_tmp = new sortie_product_tier_fileStruct();
// ###############################

        
        



        









 



/**
 * [tMap_15 begin ] stop
 */



	
	/**
	 * [tDBInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_5", false);
		start_Hash.put("tDBInput_5", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_5";

	
		int tos_count_tDBInput_5 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_5 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_5 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_5  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_5, talendToDBArray_tDBInput_5); 
		    int nb_line_tDBInput_5 = 0;
		    java.sql.Connection conn_tDBInput_5 = null;
				String driverClass_tDBInput_5 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
			    java.lang.Class jdbcclazz_tDBInput_5 = java.lang.Class.forName(driverClass_tDBInput_5);
					String dbUser_tDBInput_5 = "etl_read_uat";
					
					
					 
	final String decryptedPassword_tDBInput_5 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[VuRd9gO9lm+qW7rXE8z9aEUXf/QdRYnMmCYpTP2XWwIl9pZAtxlq]");
					
					String dbPwd_tDBInput_5 = decryptedPassword_tDBInput_5;
				
		    String port_tDBInput_5 = "1433";
		    String dbname_tDBInput_5 = "etl_uat" ;		    
		    String url_tDBInput_5 = "jdbc:sqlserver://" + "10.7.7.48" ;
		    if (!"".equals(port_tDBInput_5)) {
		    	url_tDBInput_5 += ":" + "1433";
		    }
		    if (!"".equals(dbname_tDBInput_5)) {		    
		    	url_tDBInput_5 += ";databaseName=" + "etl_uat"; 
		    }
		    url_tDBInput_5 += ";appName=" + projectName + ";" + "";
		    String dbschema_tDBInput_5 = "";
				
				conn_tDBInput_5 = java.sql.DriverManager.getConnection(url_tDBInput_5,dbUser_tDBInput_5,dbPwd_tDBInput_5);
		        
		    
			java.sql.Statement stmt_tDBInput_5 = conn_tDBInput_5.createStatement();

		    String dbquery_tDBInput_5 = "select ENUMERATIONNAME, ENUMERATIONVALUE from data.D365_ProductAttributeEnumerationTypes where ENUMERATIONNAME = 'Produ"
+"ct Type'";
			

            	globalMap.put("tDBInput_5_QUERY",dbquery_tDBInput_5);
		    java.sql.ResultSet rs_tDBInput_5 = null;

		    try {
		    	rs_tDBInput_5 = stmt_tDBInput_5.executeQuery(dbquery_tDBInput_5);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_5 = rs_tDBInput_5.getMetaData();
		    	int colQtyInRs_tDBInput_5 = rsmd_tDBInput_5.getColumnCount();

		    String tmpContent_tDBInput_5 = null;
		    
		    
		    while (rs_tDBInput_5.next()) {
		        nb_line_tDBInput_5++;
		        
							if(colQtyInRs_tDBInput_5 < 1) {
								row22.ENUMERATIONNAME = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(1);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		row22.ENUMERATIONNAME = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row22.ENUMERATIONNAME = tmpContent_tDBInput_5;
                }
            } else {
                row22.ENUMERATIONNAME = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 2) {
								row22.ENUMERATIONVALUE = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(2);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		row22.ENUMERATIONVALUE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row22.ENUMERATIONVALUE = tmpContent_tDBInput_5;
                }
            } else {
                row22.ENUMERATIONVALUE = null;
            }
		                    }
					





 



/**
 * [tDBInput_5 begin ] stop
 */
	
	/**
	 * [tDBInput_5 main ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 


	tos_count_tDBInput_5++;

/**
 * [tDBInput_5 main ] stop
 */
	
	/**
	 * [tDBInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tMap_15 main ] start
	 */

	

	
	
	currentComponent="tMap_15";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row22");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_15 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_15 = false;
		  boolean mainRowRejected_tMap_15 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_15__Struct Var = Var__tMap_15;// ###############################
        // ###############################
        // # Output tables

sortie_product_tier_file = null;


// # Output table : 'sortie_product_tier_file'
sortie_product_tier_file_tmp.ENUMERATIONNAME = row22.ENUMERATIONNAME ;
sortie_product_tier_file_tmp.ENUMERATIONVALUE = StringHandling.DOWNCASE(row22.ENUMERATIONVALUE  ) ;
sortie_product_tier_file = sortie_product_tier_file_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_15 = false;










 


	tos_count_tMap_15++;

/**
 * [tMap_15 main ] stop
 */
	
	/**
	 * [tMap_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_15";

	

 



/**
 * [tMap_15 process_data_begin ] stop
 */
// Start of branch "sortie_product_tier_file"
if(sortie_product_tier_file != null) { 



	
	/**
	 * [tFilterRow_3 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_product_tier_file");
					}
					

          row23 = null;
          row23 = null;
    Operator_tFilterRow_3 ope_tFilterRow_3 = new Operator_tFilterRow_3("&&");
            ope_tFilterRow_3.matches((sortie_product_tier_file.ENUMERATIONNAME == null? false : sortie_product_tier_file.ENUMERATIONNAME.compareTo("Product Type") == 0)
                           , "ENUMERATIONNAME.compareTo(\"Product Type\") == 0 failed");
    
    if (ope_tFilterRow_3.getMatchFlag()) {
              if(row23 == null){ 
                row23 = new row23Struct();
              }
               row23.ENUMERATIONNAME = sortie_product_tier_file.ENUMERATIONNAME;
               row23.ENUMERATIONVALUE = sortie_product_tier_file.ENUMERATIONVALUE;
              if(row23 == null){ 
                row23 = new row23Struct();
              }
               row23.ENUMERATIONNAME = sortie_product_tier_file.ENUMERATIONNAME;
               row23.ENUMERATIONVALUE = sortie_product_tier_file.ENUMERATIONVALUE;    
      nb_line_ok_tFilterRow_3++;
    } else {
      nb_line_reject_tFilterRow_3++;
    }

nb_line_tFilterRow_3++;

 


	tos_count_tFilterRow_3++;

/**
 * [tFilterRow_3 main ] stop
 */
	
	/**
	 * [tFilterRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_3";

	

 



/**
 * [tFilterRow_3 process_data_begin ] stop
 */
// Start of branch "row23"
if(row23 != null) { 



	
	/**
	 * [tAdvancedHash_row23 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row23";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row23");
					}
					


			   
			   

					row23Struct row23_HashRow = new row23Struct();
		   	   	   
				
				row23_HashRow.ENUMERATIONNAME = row23.ENUMERATIONNAME;
				
				row23_HashRow.ENUMERATIONVALUE = row23.ENUMERATIONVALUE;
				
			tHash_Lookup_row23.put(row23_HashRow);
			
            




 


	tos_count_tAdvancedHash_row23++;

/**
 * [tAdvancedHash_row23 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row23 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row23";

	

 



/**
 * [tAdvancedHash_row23 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row23 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row23";

	

 



/**
 * [tAdvancedHash_row23 process_data_end ] stop
 */

} // End of branch "row23"




	
	/**
	 * [tFilterRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_3";

	

 



/**
 * [tFilterRow_3 process_data_end ] stop
 */

} // End of branch "sortie_product_tier_file"




	
	/**
	 * [tMap_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_15";

	

 



/**
 * [tMap_15 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_5 end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

	}
}finally{
	if (rs_tDBInput_5 != null) {
		rs_tDBInput_5.close();
	}
	if (stmt_tDBInput_5 != null) {
		stmt_tDBInput_5.close();
	}
		if(conn_tDBInput_5 != null && !conn_tDBInput_5.isClosed()) {
			
			conn_tDBInput_5.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_5_NB_LINE",nb_line_tDBInput_5);

 

ok_Hash.put("tDBInput_5", true);
end_Hash.put("tDBInput_5", System.currentTimeMillis());




/**
 * [tDBInput_5 end ] stop
 */

	
	/**
	 * [tMap_15 end ] start
	 */

	

	
	
	currentComponent="tMap_15";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row22");
			  	}
			  	
 

ok_Hash.put("tMap_15", true);
end_Hash.put("tMap_15", System.currentTimeMillis());




/**
 * [tMap_15 end ] stop
 */

	
	/**
	 * [tFilterRow_3 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_3";

	
    globalMap.put("tFilterRow_3_NB_LINE", nb_line_tFilterRow_3);
    globalMap.put("tFilterRow_3_NB_LINE_OK", nb_line_ok_tFilterRow_3);
    globalMap.put("tFilterRow_3_NB_LINE_REJECT", nb_line_reject_tFilterRow_3);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_product_tier_file");
			  	}
			  	
 

ok_Hash.put("tFilterRow_3", true);
end_Hash.put("tFilterRow_3", System.currentTimeMillis());




/**
 * [tFilterRow_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row23 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row23";

	

tHash_Lookup_row23.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row23");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row23", true);
end_Hash.put("tAdvancedHash_row23", System.currentTimeMillis());




/**
 * [tAdvancedHash_row23 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_5 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 finally ] stop
 */

	
	/**
	 * [tMap_15 finally ] start
	 */

	

	
	
	currentComponent="tMap_15";

	

 



/**
 * [tMap_15 finally ] stop
 */

	
	/**
	 * [tFilterRow_3 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_3";

	

 



/**
 * [tFilterRow_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row23 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row23";

	

 



/**
 * [tAdvancedHash_row23 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class sortie_product_status_fileStruct implements routines.system.IPersistableComparableLookupRow<sortie_product_status_fileStruct> {
    final static byte[] commonByteArrayLock_DEV_BUY_VALIDATION = new byte[0];
    static byte[] commonByteArray_DEV_BUY_VALIDATION = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String STATUSID;

				public String getSTATUSID () {
					return this.STATUSID;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.STATUSID == null) ? 0 : this.STATUSID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final sortie_product_status_fileStruct other = (sortie_product_status_fileStruct) obj;
		
						if (this.STATUSID == null) {
							if (other.STATUSID != null)
								return false;
						
						} else if (!this.STATUSID.equals(other.STATUSID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(sortie_product_status_fileStruct other) {

		other.STATUSID = this.STATUSID;
	            
	}

	public void copyKeysDataTo(sortie_product_status_fileStruct other) {

		other.STATUSID = this.STATUSID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_BUY_VALIDATION.length) {
				if(length < 1024 && commonByteArray_DEV_BUY_VALIDATION.length == 0) {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[1024];
				} else {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_BUY_VALIDATION, 0, length);
			strReturn = new String(commonByteArray_DEV_BUY_VALIDATION, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_BUY_VALIDATION) {

        	try {

        		int length = 0;
		
					this.STATUSID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.STATUSID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		

		

        }

		
        	finally {}

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
        	}
        	finally {}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("STATUSID="+STATUSID);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_product_status_fileStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.STATUSID, other.STATUSID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row21Struct implements routines.system.IPersistableRow<row21Struct> {
    final static byte[] commonByteArrayLock_DEV_BUY_VALIDATION = new byte[0];
    static byte[] commonByteArray_DEV_BUY_VALIDATION = new byte[0];

	
			    public String STATUSID;

				public String getSTATUSID () {
					return this.STATUSID;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_BUY_VALIDATION.length) {
				if(length < 1024 && commonByteArray_DEV_BUY_VALIDATION.length == 0) {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[1024];
				} else {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_BUY_VALIDATION, 0, length);
			strReturn = new String(commonByteArray_DEV_BUY_VALIDATION, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_BUY_VALIDATION) {

        	try {

        		int length = 0;
		
					this.STATUSID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.STATUSID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("STATUSID="+STATUSID);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row21Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row21Struct row21 = new row21Struct();
sortie_product_status_fileStruct sortie_product_status_file = new sortie_product_status_fileStruct();





	
	/**
	 * [tAdvancedHash_sortie_product_status_file begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_sortie_product_status_file", false);
		start_Hash.put("tAdvancedHash_sortie_product_status_file", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_sortie_product_status_file";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_product_status_file");
					}
				
		int tos_count_tAdvancedHash_sortie_product_status_file = 0;
		

			   		// connection name:sortie_product_status_file
			   		// source node:tMap_16 - inputs:(row21) outputs:(sortie_product_status_file,sortie_product_status_file) | target node:tAdvancedHash_sortie_product_status_file - inputs:(sortie_product_status_file) outputs:()
			   		// linked node: tMap_10 - inputs:(sortie_size,sortie_product_status_file) outputs:(sortie_product_status)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_sortie_product_status_file = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<sortie_product_status_fileStruct> tHash_Lookup_sortie_product_status_file =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<sortie_product_status_fileStruct>getLookup(matchingModeEnum_sortie_product_status_file);
	   						   
		   	   	   globalMap.put("tHash_Lookup_sortie_product_status_file", tHash_Lookup_sortie_product_status_file);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_sortie_product_status_file begin ] stop
 */



	
	/**
	 * [tMap_16 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_16", false);
		start_Hash.put("tMap_16", System.currentTimeMillis());
		
	
	currentComponent="tMap_16";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row21");
					}
				
		int tos_count_tMap_16 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_16__Struct  {
}
Var__tMap_16__Struct Var__tMap_16 = new Var__tMap_16__Struct();
// ###############################

// ###############################
// # Outputs initialization
sortie_product_status_fileStruct sortie_product_status_file_tmp = new sortie_product_status_fileStruct();
// ###############################

        
        



        









 



/**
 * [tMap_16 begin ] stop
 */



	
	/**
	 * [tDBInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_6", false);
		start_Hash.put("tDBInput_6", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_6";

	
		int tos_count_tDBInput_6 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_6 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_6 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_6  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_6, talendToDBArray_tDBInput_6); 
		    int nb_line_tDBInput_6 = 0;
		    java.sql.Connection conn_tDBInput_6 = null;
				String driverClass_tDBInput_6 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
			    java.lang.Class jdbcclazz_tDBInput_6 = java.lang.Class.forName(driverClass_tDBInput_6);
					String dbUser_tDBInput_6 = "etl_read_uat";
					
					
					 
	final String decryptedPassword_tDBInput_6 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[243k09XV9V2TaZMB33Rdh4fGLNDZULboSJy1+vTRAEACRcqp2bNm]");
					
					String dbPwd_tDBInput_6 = decryptedPassword_tDBInput_6;
				
		    String port_tDBInput_6 = "1433";
		    String dbname_tDBInput_6 = "etl_uat" ;		    
		    String url_tDBInput_6 = "jdbc:sqlserver://" + "10.7.7.48" ;
		    if (!"".equals(port_tDBInput_6)) {
		    	url_tDBInput_6 += ":" + "1433";
		    }
		    if (!"".equals(dbname_tDBInput_6)) {		    
		    	url_tDBInput_6 += ";databaseName=" + "etl_uat"; 
		    }
		    url_tDBInput_6 += ";appName=" + projectName + ";" + "";
		    String dbschema_tDBInput_6 = "";
				
				conn_tDBInput_6 = java.sql.DriverManager.getConnection(url_tDBInput_6,dbUser_tDBInput_6,dbPwd_tDBInput_6);
		        
		    
			java.sql.Statement stmt_tDBInput_6 = conn_tDBInput_6.createStatement();

		    String dbquery_tDBInput_6 = "select STATUSID from data.D365_K3FashionProductStatusSetup";
			

            	globalMap.put("tDBInput_6_QUERY",dbquery_tDBInput_6);
		    java.sql.ResultSet rs_tDBInput_6 = null;

		    try {
		    	rs_tDBInput_6 = stmt_tDBInput_6.executeQuery(dbquery_tDBInput_6);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_6 = rs_tDBInput_6.getMetaData();
		    	int colQtyInRs_tDBInput_6 = rsmd_tDBInput_6.getColumnCount();

		    String tmpContent_tDBInput_6 = null;
		    
		    
		    while (rs_tDBInput_6.next()) {
		        nb_line_tDBInput_6++;
		        
							if(colQtyInRs_tDBInput_6 < 1) {
								row21.STATUSID = null;
							} else {
	                         		
           		tmpContent_tDBInput_6 = rs_tDBInput_6.getString(1);
            if(tmpContent_tDBInput_6 != null) {
            	if (talendToDBList_tDBInput_6 .contains(rsmd_tDBInput_6.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		row21.STATUSID = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
            	} else {
                	row21.STATUSID = tmpContent_tDBInput_6;
                }
            } else {
                row21.STATUSID = null;
            }
		                    }
					





 



/**
 * [tDBInput_6 begin ] stop
 */
	
	/**
	 * [tDBInput_6 main ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 


	tos_count_tDBInput_6++;

/**
 * [tDBInput_6 main ] stop
 */
	
	/**
	 * [tDBInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 



/**
 * [tDBInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tMap_16 main ] start
	 */

	

	
	
	currentComponent="tMap_16";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row21");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_16 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_16 = false;
		  boolean mainRowRejected_tMap_16 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_16__Struct Var = Var__tMap_16;// ###############################
        // ###############################
        // # Output tables

sortie_product_status_file = null;


// # Output table : 'sortie_product_status_file'
sortie_product_status_file_tmp.STATUSID = StringHandling.DOWNCASE(row21.STATUSID) ;
sortie_product_status_file = sortie_product_status_file_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_16 = false;










 


	tos_count_tMap_16++;

/**
 * [tMap_16 main ] stop
 */
	
	/**
	 * [tMap_16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_16";

	

 



/**
 * [tMap_16 process_data_begin ] stop
 */
// Start of branch "sortie_product_status_file"
if(sortie_product_status_file != null) { 



	
	/**
	 * [tAdvancedHash_sortie_product_status_file main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_sortie_product_status_file";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_product_status_file");
					}
					


			   
			   

					sortie_product_status_fileStruct sortie_product_status_file_HashRow = new sortie_product_status_fileStruct();
		   	   	   
				
				sortie_product_status_file_HashRow.STATUSID = sortie_product_status_file.STATUSID;
				
			tHash_Lookup_sortie_product_status_file.put(sortie_product_status_file_HashRow);
			
            




 


	tos_count_tAdvancedHash_sortie_product_status_file++;

/**
 * [tAdvancedHash_sortie_product_status_file main ] stop
 */
	
	/**
	 * [tAdvancedHash_sortie_product_status_file process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_sortie_product_status_file";

	

 



/**
 * [tAdvancedHash_sortie_product_status_file process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_sortie_product_status_file process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_sortie_product_status_file";

	

 



/**
 * [tAdvancedHash_sortie_product_status_file process_data_end ] stop
 */

} // End of branch "sortie_product_status_file"




	
	/**
	 * [tMap_16 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_16";

	

 



/**
 * [tMap_16 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 



/**
 * [tDBInput_6 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_6 end ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

	}
}finally{
	if (rs_tDBInput_6 != null) {
		rs_tDBInput_6.close();
	}
	if (stmt_tDBInput_6 != null) {
		stmt_tDBInput_6.close();
	}
		if(conn_tDBInput_6 != null && !conn_tDBInput_6.isClosed()) {
			
			conn_tDBInput_6.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_6_NB_LINE",nb_line_tDBInput_6);

 

ok_Hash.put("tDBInput_6", true);
end_Hash.put("tDBInput_6", System.currentTimeMillis());




/**
 * [tDBInput_6 end ] stop
 */

	
	/**
	 * [tMap_16 end ] start
	 */

	

	
	
	currentComponent="tMap_16";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row21");
			  	}
			  	
 

ok_Hash.put("tMap_16", true);
end_Hash.put("tMap_16", System.currentTimeMillis());




/**
 * [tMap_16 end ] stop
 */

	
	/**
	 * [tAdvancedHash_sortie_product_status_file end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_sortie_product_status_file";

	

tHash_Lookup_sortie_product_status_file.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_product_status_file");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_sortie_product_status_file", true);
end_Hash.put("tAdvancedHash_sortie_product_status_file", System.currentTimeMillis());




/**
 * [tAdvancedHash_sortie_product_status_file end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_6 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 



/**
 * [tDBInput_6 finally ] stop
 */

	
	/**
	 * [tMap_16 finally ] start
	 */

	

	
	
	currentComponent="tMap_16";

	

 



/**
 * [tMap_16 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_sortie_product_status_file finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_sortie_product_status_file";

	

 



/**
 * [tAdvancedHash_sortie_product_status_file finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 1);
	}
	


public static class sortie_size_mapStruct implements routines.system.IPersistableComparableLookupRow<sortie_size_mapStruct> {
    final static byte[] commonByteArrayLock_DEV_BUY_VALIDATION = new byte[0];
    static byte[] commonByteArray_DEV_BUY_VALIDATION = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String SIZEID;

				public String getSIZEID () {
					return this.SIZEID;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.SIZEID == null) ? 0 : this.SIZEID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final sortie_size_mapStruct other = (sortie_size_mapStruct) obj;
		
						if (this.SIZEID == null) {
							if (other.SIZEID != null)
								return false;
						
						} else if (!this.SIZEID.equals(other.SIZEID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(sortie_size_mapStruct other) {

		other.SIZEID = this.SIZEID;
	            
	}

	public void copyKeysDataTo(sortie_size_mapStruct other) {

		other.SIZEID = this.SIZEID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_BUY_VALIDATION.length) {
				if(length < 1024 && commonByteArray_DEV_BUY_VALIDATION.length == 0) {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[1024];
				} else {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_BUY_VALIDATION, 0, length);
			strReturn = new String(commonByteArray_DEV_BUY_VALIDATION, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_BUY_VALIDATION) {

        	try {

        		int length = 0;
		
					this.SIZEID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SIZEID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		

		

        }

		
        	finally {}

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
        	}
        	finally {}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SIZEID="+SIZEID);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_size_mapStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SIZEID, other.SIZEID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row20Struct implements routines.system.IPersistableRow<row20Struct> {
    final static byte[] commonByteArrayLock_DEV_BUY_VALIDATION = new byte[0];
    static byte[] commonByteArray_DEV_BUY_VALIDATION = new byte[0];

	
			    public String SIZEID;

				public String getSIZEID () {
					return this.SIZEID;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_BUY_VALIDATION.length) {
				if(length < 1024 && commonByteArray_DEV_BUY_VALIDATION.length == 0) {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[1024];
				} else {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_BUY_VALIDATION, 0, length);
			strReturn = new String(commonByteArray_DEV_BUY_VALIDATION, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_BUY_VALIDATION) {

        	try {

        		int length = 0;
		
					this.SIZEID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SIZEID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SIZEID="+SIZEID);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row20Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row20Struct row20 = new row20Struct();
sortie_size_mapStruct sortie_size_map = new sortie_size_mapStruct();





	
	/**
	 * [tAdvancedHash_sortie_size_map begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_sortie_size_map", false);
		start_Hash.put("tAdvancedHash_sortie_size_map", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_sortie_size_map";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_size_map");
					}
				
		int tos_count_tAdvancedHash_sortie_size_map = 0;
		

			   		// connection name:sortie_size_map
			   		// source node:tMap_17 - inputs:(row20) outputs:(sortie_size_map,sortie_size_map) | target node:tAdvancedHash_sortie_size_map - inputs:(sortie_size_map) outputs:()
			   		// linked node: tMap_9 - inputs:(sortie_gender,sortie_size_map) outputs:(sortie_size)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_sortie_size_map = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<sortie_size_mapStruct> tHash_Lookup_sortie_size_map =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<sortie_size_mapStruct>getLookup(matchingModeEnum_sortie_size_map);
	   						   
		   	   	   globalMap.put("tHash_Lookup_sortie_size_map", tHash_Lookup_sortie_size_map);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_sortie_size_map begin ] stop
 */



	
	/**
	 * [tMap_17 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_17", false);
		start_Hash.put("tMap_17", System.currentTimeMillis());
		
	
	currentComponent="tMap_17";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row20");
					}
				
		int tos_count_tMap_17 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_17__Struct  {
}
Var__tMap_17__Struct Var__tMap_17 = new Var__tMap_17__Struct();
// ###############################

// ###############################
// # Outputs initialization
sortie_size_mapStruct sortie_size_map_tmp = new sortie_size_mapStruct();
// ###############################

        
        



        









 



/**
 * [tMap_17 begin ] stop
 */



	
	/**
	 * [tDBInput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_7", false);
		start_Hash.put("tDBInput_7", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_7";

	
		int tos_count_tDBInput_7 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_7 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_7 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_7  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_7, talendToDBArray_tDBInput_7); 
		    int nb_line_tDBInput_7 = 0;
		    java.sql.Connection conn_tDBInput_7 = null;
				String driverClass_tDBInput_7 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
			    java.lang.Class jdbcclazz_tDBInput_7 = java.lang.Class.forName(driverClass_tDBInput_7);
					String dbUser_tDBInput_7 = "etl_read_uat";
					
					
					 
	final String decryptedPassword_tDBInput_7 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[U6i32s78mrNz8dmkfvqTkcYqMLiKkInlKYhuxer1OcVZ/ES/AA3R]");
					
					String dbPwd_tDBInput_7 = decryptedPassword_tDBInput_7;
				
		    String port_tDBInput_7 = "1433";
		    String dbname_tDBInput_7 = "etl_uat" ;		    
		    String url_tDBInput_7 = "jdbc:sqlserver://" + "10.7.7.48" ;
		    if (!"".equals(port_tDBInput_7)) {
		    	url_tDBInput_7 += ":" + "1433";
		    }
		    if (!"".equals(dbname_tDBInput_7)) {		    
		    	url_tDBInput_7 += ";databaseName=" + "etl_uat"; 
		    }
		    url_tDBInput_7 += ";appName=" + projectName + ";" + "";
		    String dbschema_tDBInput_7 = "";
				
				conn_tDBInput_7 = java.sql.DriverManager.getConnection(url_tDBInput_7,dbUser_tDBInput_7,dbPwd_tDBInput_7);
		        
		    
			java.sql.Statement stmt_tDBInput_7 = conn_tDBInput_7.createStatement();

		    String dbquery_tDBInput_7 = "select ECORESSIZE_NAME AS SIZEID  from data.D365_K3FashionSizeTranslations ";
			

            	globalMap.put("tDBInput_7_QUERY",dbquery_tDBInput_7);
		    java.sql.ResultSet rs_tDBInput_7 = null;

		    try {
		    	rs_tDBInput_7 = stmt_tDBInput_7.executeQuery(dbquery_tDBInput_7);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_7 = rs_tDBInput_7.getMetaData();
		    	int colQtyInRs_tDBInput_7 = rsmd_tDBInput_7.getColumnCount();

		    String tmpContent_tDBInput_7 = null;
		    
		    
		    while (rs_tDBInput_7.next()) {
		        nb_line_tDBInput_7++;
		        
							if(colQtyInRs_tDBInput_7 < 1) {
								row20.SIZEID = null;
							} else {
	                         		
           		tmpContent_tDBInput_7 = rs_tDBInput_7.getString(1);
            if(tmpContent_tDBInput_7 != null) {
            	if (talendToDBList_tDBInput_7 .contains(rsmd_tDBInput_7.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		row20.SIZEID = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
            	} else {
                	row20.SIZEID = tmpContent_tDBInput_7;
                }
            } else {
                row20.SIZEID = null;
            }
		                    }
					





 



/**
 * [tDBInput_7 begin ] stop
 */
	
	/**
	 * [tDBInput_7 main ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 


	tos_count_tDBInput_7++;

/**
 * [tDBInput_7 main ] stop
 */
	
	/**
	 * [tDBInput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 



/**
 * [tDBInput_7 process_data_begin ] stop
 */

	
	/**
	 * [tMap_17 main ] start
	 */

	

	
	
	currentComponent="tMap_17";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row20");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_17 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_17 = false;
		  boolean mainRowRejected_tMap_17 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_17__Struct Var = Var__tMap_17;// ###############################
        // ###############################
        // # Output tables

sortie_size_map = null;


// # Output table : 'sortie_size_map'
sortie_size_map_tmp.SIZEID = StringHandling.DOWNCASE(row20.SIZEID  ) ;
sortie_size_map = sortie_size_map_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_17 = false;










 


	tos_count_tMap_17++;

/**
 * [tMap_17 main ] stop
 */
	
	/**
	 * [tMap_17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_17";

	

 



/**
 * [tMap_17 process_data_begin ] stop
 */
// Start of branch "sortie_size_map"
if(sortie_size_map != null) { 



	
	/**
	 * [tAdvancedHash_sortie_size_map main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_sortie_size_map";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_size_map");
					}
					


			   
			   

					sortie_size_mapStruct sortie_size_map_HashRow = new sortie_size_mapStruct();
		   	   	   
				
				sortie_size_map_HashRow.SIZEID = sortie_size_map.SIZEID;
				
			tHash_Lookup_sortie_size_map.put(sortie_size_map_HashRow);
			
            




 


	tos_count_tAdvancedHash_sortie_size_map++;

/**
 * [tAdvancedHash_sortie_size_map main ] stop
 */
	
	/**
	 * [tAdvancedHash_sortie_size_map process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_sortie_size_map";

	

 



/**
 * [tAdvancedHash_sortie_size_map process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_sortie_size_map process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_sortie_size_map";

	

 



/**
 * [tAdvancedHash_sortie_size_map process_data_end ] stop
 */

} // End of branch "sortie_size_map"




	
	/**
	 * [tMap_17 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_17";

	

 



/**
 * [tMap_17 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 



/**
 * [tDBInput_7 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_7 end ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

	}
}finally{
	if (rs_tDBInput_7 != null) {
		rs_tDBInput_7.close();
	}
	if (stmt_tDBInput_7 != null) {
		stmt_tDBInput_7.close();
	}
		if(conn_tDBInput_7 != null && !conn_tDBInput_7.isClosed()) {
			
			conn_tDBInput_7.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_7_NB_LINE",nb_line_tDBInput_7);

 

ok_Hash.put("tDBInput_7", true);
end_Hash.put("tDBInput_7", System.currentTimeMillis());




/**
 * [tDBInput_7 end ] stop
 */

	
	/**
	 * [tMap_17 end ] start
	 */

	

	
	
	currentComponent="tMap_17";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row20");
			  	}
			  	
 

ok_Hash.put("tMap_17", true);
end_Hash.put("tMap_17", System.currentTimeMillis());




/**
 * [tMap_17 end ] stop
 */

	
	/**
	 * [tAdvancedHash_sortie_size_map end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_sortie_size_map";

	

tHash_Lookup_sortie_size_map.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_size_map");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_sortie_size_map", true);
end_Hash.put("tAdvancedHash_sortie_size_map", System.currentTimeMillis());




/**
 * [tAdvancedHash_sortie_size_map end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_7 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 



/**
 * [tDBInput_7 finally ] stop
 */

	
	/**
	 * [tMap_17 finally ] start
	 */

	

	
	
	currentComponent="tMap_17";

	

 



/**
 * [tMap_17 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_sortie_size_map finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_sortie_size_map";

	

 



/**
 * [tAdvancedHash_sortie_size_map finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_7_SUBPROCESS_STATE", 1);
	}
	


public static class row19Struct implements routines.system.IPersistableComparableLookupRow<row19Struct> {
    final static byte[] commonByteArrayLock_DEV_BUY_VALIDATION = new byte[0];
    static byte[] commonByteArray_DEV_BUY_VALIDATION = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String ENUMERATIONNAME;

				public String getENUMERATIONNAME () {
					return this.ENUMERATIONNAME;
				}
				
			    public String ENUMERATIONVALUE;

				public String getENUMERATIONVALUE () {
					return this.ENUMERATIONVALUE;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ENUMERATIONVALUE == null) ? 0 : this.ENUMERATIONVALUE.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row19Struct other = (row19Struct) obj;
		
						if (this.ENUMERATIONVALUE == null) {
							if (other.ENUMERATIONVALUE != null)
								return false;
						
						} else if (!this.ENUMERATIONVALUE.equals(other.ENUMERATIONVALUE))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row19Struct other) {

		other.ENUMERATIONNAME = this.ENUMERATIONNAME;
	            other.ENUMERATIONVALUE = this.ENUMERATIONVALUE;
	            
	}

	public void copyKeysDataTo(row19Struct other) {

		other.ENUMERATIONVALUE = this.ENUMERATIONVALUE;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_BUY_VALIDATION.length) {
				if(length < 1024 && commonByteArray_DEV_BUY_VALIDATION.length == 0) {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[1024];
				} else {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_BUY_VALIDATION, 0, length);
			strReturn = new String(commonByteArray_DEV_BUY_VALIDATION, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_BUY_VALIDATION) {

        	try {

        		int length = 0;
		
					this.ENUMERATIONVALUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ENUMERATIONVALUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.ENUMERATIONNAME = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.ENUMERATIONNAME, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ENUMERATIONNAME="+ENUMERATIONNAME);
		sb.append(",ENUMERATIONVALUE="+ENUMERATIONVALUE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row19Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ENUMERATIONVALUE, other.ENUMERATIONVALUE);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_gender_fileStruct implements routines.system.IPersistableRow<sortie_gender_fileStruct> {
    final static byte[] commonByteArrayLock_DEV_BUY_VALIDATION = new byte[0];
    static byte[] commonByteArray_DEV_BUY_VALIDATION = new byte[0];

	
			    public String ENUMERATIONNAME;

				public String getENUMERATIONNAME () {
					return this.ENUMERATIONNAME;
				}
				
			    public String ENUMERATIONVALUE;

				public String getENUMERATIONVALUE () {
					return this.ENUMERATIONVALUE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_BUY_VALIDATION.length) {
				if(length < 1024 && commonByteArray_DEV_BUY_VALIDATION.length == 0) {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[1024];
				} else {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_BUY_VALIDATION, 0, length);
			strReturn = new String(commonByteArray_DEV_BUY_VALIDATION, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_BUY_VALIDATION) {

        	try {

        		int length = 0;
		
					this.ENUMERATIONNAME = readString(dis);
					
					this.ENUMERATIONVALUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ENUMERATIONNAME,dos);
					
					// String
				
						writeString(this.ENUMERATIONVALUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ENUMERATIONNAME="+ENUMERATIONNAME);
		sb.append(",ENUMERATIONVALUE="+ENUMERATIONVALUE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_gender_fileStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row18Struct implements routines.system.IPersistableRow<row18Struct> {
    final static byte[] commonByteArrayLock_DEV_BUY_VALIDATION = new byte[0];
    static byte[] commonByteArray_DEV_BUY_VALIDATION = new byte[0];

	
			    public String ENUMERATIONNAME;

				public String getENUMERATIONNAME () {
					return this.ENUMERATIONNAME;
				}
				
			    public String ENUMERATIONVALUE;

				public String getENUMERATIONVALUE () {
					return this.ENUMERATIONVALUE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_BUY_VALIDATION.length) {
				if(length < 1024 && commonByteArray_DEV_BUY_VALIDATION.length == 0) {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[1024];
				} else {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_BUY_VALIDATION, 0, length);
			strReturn = new String(commonByteArray_DEV_BUY_VALIDATION, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_BUY_VALIDATION) {

        	try {

        		int length = 0;
		
					this.ENUMERATIONNAME = readString(dis);
					
					this.ENUMERATIONVALUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ENUMERATIONNAME,dos);
					
					// String
				
						writeString(this.ENUMERATIONVALUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ENUMERATIONNAME="+ENUMERATIONNAME);
		sb.append(",ENUMERATIONVALUE="+ENUMERATIONVALUE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row18Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row18Struct row18 = new row18Struct();
sortie_gender_fileStruct sortie_gender_file = new sortie_gender_fileStruct();
row19Struct row19 = new row19Struct();






	
	/**
	 * [tAdvancedHash_row19 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row19", false);
		start_Hash.put("tAdvancedHash_row19", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row19";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row19");
					}
				
		int tos_count_tAdvancedHash_row19 = 0;
		

			   		// connection name:row19
			   		// source node:tFilterRow_2 - inputs:(sortie_gender_file) outputs:(row19,row19) | target node:tAdvancedHash_row19 - inputs:(row19) outputs:()
			   		// linked node: tMap_8 - inputs:(sortie_category,row19) outputs:(sortie_gender)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row19 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row19Struct> tHash_Lookup_row19 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row19Struct>getLookup(matchingModeEnum_row19);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row19", tHash_Lookup_row19);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row19 begin ] stop
 */



	
	/**
	 * [tFilterRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_2", false);
		start_Hash.put("tFilterRow_2", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_gender_file");
					}
				
		int tos_count_tFilterRow_2 = 0;
		
    int nb_line_tFilterRow_2 = 0;
    int nb_line_ok_tFilterRow_2 = 0;
    int nb_line_reject_tFilterRow_2 = 0;

    class Operator_tFilterRow_2 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_2(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_2 begin ] stop
 */



	
	/**
	 * [tMap_18 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_18", false);
		start_Hash.put("tMap_18", System.currentTimeMillis());
		
	
	currentComponent="tMap_18";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row18");
					}
				
		int tos_count_tMap_18 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_18__Struct  {
}
Var__tMap_18__Struct Var__tMap_18 = new Var__tMap_18__Struct();
// ###############################

// ###############################
// # Outputs initialization
sortie_gender_fileStruct sortie_gender_file_tmp = new sortie_gender_fileStruct();
// ###############################

        
        



        









 



/**
 * [tMap_18 begin ] stop
 */



	
	/**
	 * [tDBInput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_8", false);
		start_Hash.put("tDBInput_8", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_8";

	
		int tos_count_tDBInput_8 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_8 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_8 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_8  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_8, talendToDBArray_tDBInput_8); 
		    int nb_line_tDBInput_8 = 0;
		    java.sql.Connection conn_tDBInput_8 = null;
				String driverClass_tDBInput_8 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
			    java.lang.Class jdbcclazz_tDBInput_8 = java.lang.Class.forName(driverClass_tDBInput_8);
					String dbUser_tDBInput_8 = "etl_read_uat";
					
					
					 
	final String decryptedPassword_tDBInput_8 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[wWev15TXcjkjvrPm+GRQzVMi+QHSwy1QZo6vR1hGRSUP5ng3chGK]");
					
					String dbPwd_tDBInput_8 = decryptedPassword_tDBInput_8;
				
		    String port_tDBInput_8 = "1433";
		    String dbname_tDBInput_8 = "etl_uat" ;		    
		    String url_tDBInput_8 = "jdbc:sqlserver://" + "10.7.7.48" ;
		    if (!"".equals(port_tDBInput_8)) {
		    	url_tDBInput_8 += ":" + "1433";
		    }
		    if (!"".equals(dbname_tDBInput_8)) {		    
		    	url_tDBInput_8 += ";databaseName=" + "etl_uat"; 
		    }
		    url_tDBInput_8 += ";appName=" + projectName + ";" + "";
		    String dbschema_tDBInput_8 = "";
				
				conn_tDBInput_8 = java.sql.DriverManager.getConnection(url_tDBInput_8,dbUser_tDBInput_8,dbPwd_tDBInput_8);
		        
		    
			java.sql.Statement stmt_tDBInput_8 = conn_tDBInput_8.createStatement();

		    String dbquery_tDBInput_8 = "select ENUMERATIONNAME, ENUMERATIONVALUE from data.D365_ProductAttributeEnumerationTypes where ENUMERATIONNAME = 'Gende"
+"r'";
			

            	globalMap.put("tDBInput_8_QUERY",dbquery_tDBInput_8);
		    java.sql.ResultSet rs_tDBInput_8 = null;

		    try {
		    	rs_tDBInput_8 = stmt_tDBInput_8.executeQuery(dbquery_tDBInput_8);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_8 = rs_tDBInput_8.getMetaData();
		    	int colQtyInRs_tDBInput_8 = rsmd_tDBInput_8.getColumnCount();

		    String tmpContent_tDBInput_8 = null;
		    
		    
		    while (rs_tDBInput_8.next()) {
		        nb_line_tDBInput_8++;
		        
							if(colQtyInRs_tDBInput_8 < 1) {
								row18.ENUMERATIONNAME = null;
							} else {
	                         		
           		tmpContent_tDBInput_8 = rs_tDBInput_8.getString(1);
            if(tmpContent_tDBInput_8 != null) {
            	if (talendToDBList_tDBInput_8 .contains(rsmd_tDBInput_8.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		row18.ENUMERATIONNAME = FormatterUtils.formatUnwithE(tmpContent_tDBInput_8);
            	} else {
                	row18.ENUMERATIONNAME = tmpContent_tDBInput_8;
                }
            } else {
                row18.ENUMERATIONNAME = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 2) {
								row18.ENUMERATIONVALUE = null;
							} else {
	                         		
           		tmpContent_tDBInput_8 = rs_tDBInput_8.getString(2);
            if(tmpContent_tDBInput_8 != null) {
            	if (talendToDBList_tDBInput_8 .contains(rsmd_tDBInput_8.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		row18.ENUMERATIONVALUE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_8);
            	} else {
                	row18.ENUMERATIONVALUE = tmpContent_tDBInput_8;
                }
            } else {
                row18.ENUMERATIONVALUE = null;
            }
		                    }
					





 



/**
 * [tDBInput_8 begin ] stop
 */
	
	/**
	 * [tDBInput_8 main ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

 


	tos_count_tDBInput_8++;

/**
 * [tDBInput_8 main ] stop
 */
	
	/**
	 * [tDBInput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

 



/**
 * [tDBInput_8 process_data_begin ] stop
 */

	
	/**
	 * [tMap_18 main ] start
	 */

	

	
	
	currentComponent="tMap_18";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row18");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_18 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_18 = false;
		  boolean mainRowRejected_tMap_18 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_18__Struct Var = Var__tMap_18;// ###############################
        // ###############################
        // # Output tables

sortie_gender_file = null;


// # Output table : 'sortie_gender_file'
sortie_gender_file_tmp.ENUMERATIONNAME = row18.ENUMERATIONNAME ;
sortie_gender_file_tmp.ENUMERATIONVALUE = StringHandling.DOWNCASE(row18.ENUMERATIONVALUE ) ;
sortie_gender_file = sortie_gender_file_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_18 = false;










 


	tos_count_tMap_18++;

/**
 * [tMap_18 main ] stop
 */
	
	/**
	 * [tMap_18 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_18";

	

 



/**
 * [tMap_18 process_data_begin ] stop
 */
// Start of branch "sortie_gender_file"
if(sortie_gender_file != null) { 



	
	/**
	 * [tFilterRow_2 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_gender_file");
					}
					

          row19 = null;
          row19 = null;
    Operator_tFilterRow_2 ope_tFilterRow_2 = new Operator_tFilterRow_2("&&");
            ope_tFilterRow_2.matches((sortie_gender_file.ENUMERATIONNAME == null? false : sortie_gender_file.ENUMERATIONNAME.compareTo("Gender") == 0)
                           , "ENUMERATIONNAME.compareTo(\"Gender\") == 0 failed");
    
    if (ope_tFilterRow_2.getMatchFlag()) {
              if(row19 == null){ 
                row19 = new row19Struct();
              }
               row19.ENUMERATIONNAME = sortie_gender_file.ENUMERATIONNAME;
               row19.ENUMERATIONVALUE = sortie_gender_file.ENUMERATIONVALUE;
              if(row19 == null){ 
                row19 = new row19Struct();
              }
               row19.ENUMERATIONNAME = sortie_gender_file.ENUMERATIONNAME;
               row19.ENUMERATIONVALUE = sortie_gender_file.ENUMERATIONVALUE;    
      nb_line_ok_tFilterRow_2++;
    } else {
      nb_line_reject_tFilterRow_2++;
    }

nb_line_tFilterRow_2++;

 


	tos_count_tFilterRow_2++;

/**
 * [tFilterRow_2 main ] stop
 */
	
	/**
	 * [tFilterRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";

	

 



/**
 * [tFilterRow_2 process_data_begin ] stop
 */
// Start of branch "row19"
if(row19 != null) { 



	
	/**
	 * [tAdvancedHash_row19 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row19";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row19");
					}
					


			   
			   

					row19Struct row19_HashRow = new row19Struct();
		   	   	   
				
				row19_HashRow.ENUMERATIONNAME = row19.ENUMERATIONNAME;
				
				row19_HashRow.ENUMERATIONVALUE = row19.ENUMERATIONVALUE;
				
			tHash_Lookup_row19.put(row19_HashRow);
			
            




 


	tos_count_tAdvancedHash_row19++;

/**
 * [tAdvancedHash_row19 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row19 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row19";

	

 



/**
 * [tAdvancedHash_row19 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row19 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row19";

	

 



/**
 * [tAdvancedHash_row19 process_data_end ] stop
 */

} // End of branch "row19"




	
	/**
	 * [tFilterRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";

	

 



/**
 * [tFilterRow_2 process_data_end ] stop
 */

} // End of branch "sortie_gender_file"




	
	/**
	 * [tMap_18 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_18";

	

 



/**
 * [tMap_18 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

 



/**
 * [tDBInput_8 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_8 end ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

	}
}finally{
	if (rs_tDBInput_8 != null) {
		rs_tDBInput_8.close();
	}
	if (stmt_tDBInput_8 != null) {
		stmt_tDBInput_8.close();
	}
		if(conn_tDBInput_8 != null && !conn_tDBInput_8.isClosed()) {
			
			conn_tDBInput_8.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_8_NB_LINE",nb_line_tDBInput_8);

 

ok_Hash.put("tDBInput_8", true);
end_Hash.put("tDBInput_8", System.currentTimeMillis());




/**
 * [tDBInput_8 end ] stop
 */

	
	/**
	 * [tMap_18 end ] start
	 */

	

	
	
	currentComponent="tMap_18";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row18");
			  	}
			  	
 

ok_Hash.put("tMap_18", true);
end_Hash.put("tMap_18", System.currentTimeMillis());




/**
 * [tMap_18 end ] stop
 */

	
	/**
	 * [tFilterRow_2 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";

	
    globalMap.put("tFilterRow_2_NB_LINE", nb_line_tFilterRow_2);
    globalMap.put("tFilterRow_2_NB_LINE_OK", nb_line_ok_tFilterRow_2);
    globalMap.put("tFilterRow_2_NB_LINE_REJECT", nb_line_reject_tFilterRow_2);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_gender_file");
			  	}
			  	
 

ok_Hash.put("tFilterRow_2", true);
end_Hash.put("tFilterRow_2", System.currentTimeMillis());




/**
 * [tFilterRow_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row19 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row19";

	

tHash_Lookup_row19.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row19");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row19", true);
end_Hash.put("tAdvancedHash_row19", System.currentTimeMillis());




/**
 * [tAdvancedHash_row19 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_8 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

 



/**
 * [tDBInput_8 finally ] stop
 */

	
	/**
	 * [tMap_18 finally ] start
	 */

	

	
	
	currentComponent="tMap_18";

	

 



/**
 * [tMap_18 finally ] stop
 */

	
	/**
	 * [tFilterRow_2 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";

	

 



/**
 * [tFilterRow_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row19 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row19";

	

 



/**
 * [tAdvancedHash_row19 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_8_SUBPROCESS_STATE", 1);
	}
	


public static class sortie_season_mapStruct implements routines.system.IPersistableComparableLookupRow<sortie_season_mapStruct> {
    final static byte[] commonByteArrayLock_DEV_BUY_VALIDATION = new byte[0];
    static byte[] commonByteArray_DEV_BUY_VALIDATION = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String SEASONCODE;

				public String getSEASONCODE () {
					return this.SEASONCODE;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.SEASONCODE == null) ? 0 : this.SEASONCODE.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final sortie_season_mapStruct other = (sortie_season_mapStruct) obj;
		
						if (this.SEASONCODE == null) {
							if (other.SEASONCODE != null)
								return false;
						
						} else if (!this.SEASONCODE.equals(other.SEASONCODE))
						
							return false;
					

		return true;
    }

	public void copyDataTo(sortie_season_mapStruct other) {

		other.SEASONCODE = this.SEASONCODE;
	            
	}

	public void copyKeysDataTo(sortie_season_mapStruct other) {

		other.SEASONCODE = this.SEASONCODE;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_BUY_VALIDATION.length) {
				if(length < 1024 && commonByteArray_DEV_BUY_VALIDATION.length == 0) {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[1024];
				} else {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_BUY_VALIDATION, 0, length);
			strReturn = new String(commonByteArray_DEV_BUY_VALIDATION, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_BUY_VALIDATION) {

        	try {

        		int length = 0;
		
					this.SEASONCODE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SEASONCODE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		

		

        }

		
        	finally {}

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
        	}
        	finally {}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SEASONCODE="+SEASONCODE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_season_mapStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SEASONCODE, other.SEASONCODE);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_DEV_BUY_VALIDATION = new byte[0];
    static byte[] commonByteArray_DEV_BUY_VALIDATION = new byte[0];

	
			    public String SEASONCODE;

				public String getSEASONCODE () {
					return this.SEASONCODE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_BUY_VALIDATION.length) {
				if(length < 1024 && commonByteArray_DEV_BUY_VALIDATION.length == 0) {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[1024];
				} else {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_BUY_VALIDATION, 0, length);
			strReturn = new String(commonByteArray_DEV_BUY_VALIDATION, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_BUY_VALIDATION) {

        	try {

        		int length = 0;
		
					this.SEASONCODE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SEASONCODE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SEASONCODE="+SEASONCODE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_10_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row8Struct row8 = new row8Struct();
sortie_season_mapStruct sortie_season_map = new sortie_season_mapStruct();





	
	/**
	 * [tAdvancedHash_sortie_season_map begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_sortie_season_map", false);
		start_Hash.put("tAdvancedHash_sortie_season_map", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_sortie_season_map";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_season_map");
					}
				
		int tos_count_tAdvancedHash_sortie_season_map = 0;
		

			   		// connection name:sortie_season_map
			   		// source node:tMap_20 - inputs:(row8) outputs:(sortie_season_map,sortie_season_map) | target node:tAdvancedHash_sortie_season_map - inputs:(sortie_season_map) outputs:()
			   		// linked node: tMap_6 - inputs:(sortie_Brand,sortie_season_map) outputs:(sortie_season)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_sortie_season_map = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<sortie_season_mapStruct> tHash_Lookup_sortie_season_map =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<sortie_season_mapStruct>getLookup(matchingModeEnum_sortie_season_map);
	   						   
		   	   	   globalMap.put("tHash_Lookup_sortie_season_map", tHash_Lookup_sortie_season_map);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_sortie_season_map begin ] stop
 */



	
	/**
	 * [tMap_20 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_20", false);
		start_Hash.put("tMap_20", System.currentTimeMillis());
		
	
	currentComponent="tMap_20";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tMap_20 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_20__Struct  {
}
Var__tMap_20__Struct Var__tMap_20 = new Var__tMap_20__Struct();
// ###############################

// ###############################
// # Outputs initialization
sortie_season_mapStruct sortie_season_map_tmp = new sortie_season_mapStruct();
// ###############################

        
        



        









 



/**
 * [tMap_20 begin ] stop
 */



	
	/**
	 * [tDBInput_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_10", false);
		start_Hash.put("tDBInput_10", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_10";

	
		int tos_count_tDBInput_10 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_10 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_10 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_10  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_10, talendToDBArray_tDBInput_10); 
		    int nb_line_tDBInput_10 = 0;
		    java.sql.Connection conn_tDBInput_10 = null;
				String driverClass_tDBInput_10 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
			    java.lang.Class jdbcclazz_tDBInput_10 = java.lang.Class.forName(driverClass_tDBInput_10);
					String dbUser_tDBInput_10 = "etl_read_uat";
					
					
					 
	final String decryptedPassword_tDBInput_10 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[WWQZiZGhHrsxz2AhIT7lMjz8f3Uw34iLl0u24D508QEAMxW2R82e]");
					
					String dbPwd_tDBInput_10 = decryptedPassword_tDBInput_10;
				
		    String port_tDBInput_10 = "1433";
		    String dbname_tDBInput_10 = "etl_uat" ;		    
		    String url_tDBInput_10 = "jdbc:sqlserver://" + "10.7.7.48" ;
		    if (!"".equals(port_tDBInput_10)) {
		    	url_tDBInput_10 += ":" + "1433";
		    }
		    if (!"".equals(dbname_tDBInput_10)) {		    
		    	url_tDBInput_10 += ";databaseName=" + "etl_uat"; 
		    }
		    url_tDBInput_10 += ";appName=" + projectName + ";" + "";
		    String dbschema_tDBInput_10 = "";
				
				conn_tDBInput_10 = java.sql.DriverManager.getConnection(url_tDBInput_10,dbUser_tDBInput_10,dbPwd_tDBInput_10);
		        
		    
			java.sql.Statement stmt_tDBInput_10 = conn_tDBInput_10.createStatement();

		    String dbquery_tDBInput_10 = "select SEASONCODE from data.D365_K3FashionRetailSeasons";
			

            	globalMap.put("tDBInput_10_QUERY",dbquery_tDBInput_10);
		    java.sql.ResultSet rs_tDBInput_10 = null;

		    try {
		    	rs_tDBInput_10 = stmt_tDBInput_10.executeQuery(dbquery_tDBInput_10);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_10 = rs_tDBInput_10.getMetaData();
		    	int colQtyInRs_tDBInput_10 = rsmd_tDBInput_10.getColumnCount();

		    String tmpContent_tDBInput_10 = null;
		    
		    
		    while (rs_tDBInput_10.next()) {
		        nb_line_tDBInput_10++;
		        
							if(colQtyInRs_tDBInput_10 < 1) {
								row8.SEASONCODE = null;
							} else {
	                         		
           		tmpContent_tDBInput_10 = rs_tDBInput_10.getString(1);
            if(tmpContent_tDBInput_10 != null) {
            	if (talendToDBList_tDBInput_10 .contains(rsmd_tDBInput_10.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		row8.SEASONCODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
            	} else {
                	row8.SEASONCODE = tmpContent_tDBInput_10;
                }
            } else {
                row8.SEASONCODE = null;
            }
		                    }
					





 



/**
 * [tDBInput_10 begin ] stop
 */
	
	/**
	 * [tDBInput_10 main ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

 


	tos_count_tDBInput_10++;

/**
 * [tDBInput_10 main ] stop
 */
	
	/**
	 * [tDBInput_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

 



/**
 * [tDBInput_10 process_data_begin ] stop
 */

	
	/**
	 * [tMap_20 main ] start
	 */

	

	
	
	currentComponent="tMap_20";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row8");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_20 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_20 = false;
		  boolean mainRowRejected_tMap_20 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_20__Struct Var = Var__tMap_20;// ###############################
        // ###############################
        // # Output tables

sortie_season_map = null;


// # Output table : 'sortie_season_map'
sortie_season_map_tmp.SEASONCODE = StringHandling.DOWNCASE(row8.SEASONCODE ) ;
sortie_season_map = sortie_season_map_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_20 = false;










 


	tos_count_tMap_20++;

/**
 * [tMap_20 main ] stop
 */
	
	/**
	 * [tMap_20 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_20";

	

 



/**
 * [tMap_20 process_data_begin ] stop
 */
// Start of branch "sortie_season_map"
if(sortie_season_map != null) { 



	
	/**
	 * [tAdvancedHash_sortie_season_map main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_sortie_season_map";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_season_map");
					}
					


			   
			   

					sortie_season_mapStruct sortie_season_map_HashRow = new sortie_season_mapStruct();
		   	   	   
				
				sortie_season_map_HashRow.SEASONCODE = sortie_season_map.SEASONCODE;
				
			tHash_Lookup_sortie_season_map.put(sortie_season_map_HashRow);
			
            




 


	tos_count_tAdvancedHash_sortie_season_map++;

/**
 * [tAdvancedHash_sortie_season_map main ] stop
 */
	
	/**
	 * [tAdvancedHash_sortie_season_map process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_sortie_season_map";

	

 



/**
 * [tAdvancedHash_sortie_season_map process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_sortie_season_map process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_sortie_season_map";

	

 



/**
 * [tAdvancedHash_sortie_season_map process_data_end ] stop
 */

} // End of branch "sortie_season_map"




	
	/**
	 * [tMap_20 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_20";

	

 



/**
 * [tMap_20 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

 



/**
 * [tDBInput_10 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_10 end ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

	}
}finally{
	if (rs_tDBInput_10 != null) {
		rs_tDBInput_10.close();
	}
	if (stmt_tDBInput_10 != null) {
		stmt_tDBInput_10.close();
	}
		if(conn_tDBInput_10 != null && !conn_tDBInput_10.isClosed()) {
			
			conn_tDBInput_10.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_10_NB_LINE",nb_line_tDBInput_10);

 

ok_Hash.put("tDBInput_10", true);
end_Hash.put("tDBInput_10", System.currentTimeMillis());




/**
 * [tDBInput_10 end ] stop
 */

	
	/**
	 * [tMap_20 end ] start
	 */

	

	
	
	currentComponent="tMap_20";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 

ok_Hash.put("tMap_20", true);
end_Hash.put("tMap_20", System.currentTimeMillis());




/**
 * [tMap_20 end ] stop
 */

	
	/**
	 * [tAdvancedHash_sortie_season_map end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_sortie_season_map";

	

tHash_Lookup_sortie_season_map.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_season_map");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_sortie_season_map", true);
end_Hash.put("tAdvancedHash_sortie_season_map", System.currentTimeMillis());




/**
 * [tAdvancedHash_sortie_season_map end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_10 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

 



/**
 * [tDBInput_10 finally ] stop
 */

	
	/**
	 * [tMap_20 finally ] start
	 */

	

	
	
	currentComponent="tMap_20";

	

 



/**
 * [tMap_20 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_sortie_season_map finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_sortie_season_map";

	

 



/**
 * [tAdvancedHash_sortie_season_map finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_10_SUBPROCESS_STATE", 1);
	}
	


public static class sortie_brand_mapStruct implements routines.system.IPersistableComparableLookupRow<sortie_brand_mapStruct> {
    final static byte[] commonByteArrayLock_DEV_BUY_VALIDATION = new byte[0];
    static byte[] commonByteArray_DEV_BUY_VALIDATION = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String BRANDID;

				public String getBRANDID () {
					return this.BRANDID;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.BRANDID == null) ? 0 : this.BRANDID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final sortie_brand_mapStruct other = (sortie_brand_mapStruct) obj;
		
						if (this.BRANDID == null) {
							if (other.BRANDID != null)
								return false;
						
						} else if (!this.BRANDID.equals(other.BRANDID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(sortie_brand_mapStruct other) {

		other.BRANDID = this.BRANDID;
	            
	}

	public void copyKeysDataTo(sortie_brand_mapStruct other) {

		other.BRANDID = this.BRANDID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_BUY_VALIDATION.length) {
				if(length < 1024 && commonByteArray_DEV_BUY_VALIDATION.length == 0) {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[1024];
				} else {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_BUY_VALIDATION, 0, length);
			strReturn = new String(commonByteArray_DEV_BUY_VALIDATION, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_BUY_VALIDATION) {

        	try {

        		int length = 0;
		
					this.BRANDID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRANDID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		

		

        }

		
        	finally {}

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
        	}
        	finally {}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRANDID="+BRANDID);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_brand_mapStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.BRANDID, other.BRANDID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row13Struct implements routines.system.IPersistableRow<row13Struct> {
    final static byte[] commonByteArrayLock_DEV_BUY_VALIDATION = new byte[0];
    static byte[] commonByteArray_DEV_BUY_VALIDATION = new byte[0];

	
			    public String BRANDID;

				public String getBRANDID () {
					return this.BRANDID;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_BUY_VALIDATION.length) {
				if(length < 1024 && commonByteArray_DEV_BUY_VALIDATION.length == 0) {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[1024];
				} else {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_BUY_VALIDATION, 0, length);
			strReturn = new String(commonByteArray_DEV_BUY_VALIDATION, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_BUY_VALIDATION) {

        	try {

        		int length = 0;
		
					this.BRANDID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRANDID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRANDID="+BRANDID);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row13Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_11_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row13Struct row13 = new row13Struct();
sortie_brand_mapStruct sortie_brand_map = new sortie_brand_mapStruct();





	
	/**
	 * [tAdvancedHash_sortie_brand_map begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_sortie_brand_map", false);
		start_Hash.put("tAdvancedHash_sortie_brand_map", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_sortie_brand_map";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_brand_map");
					}
				
		int tos_count_tAdvancedHash_sortie_brand_map = 0;
		

			   		// connection name:sortie_brand_map
			   		// source node:tMap_21 - inputs:(row13) outputs:(sortie_brand_map,sortie_brand_map) | target node:tAdvancedHash_sortie_brand_map - inputs:(sortie_brand_map) outputs:()
			   		// linked node: tMap_3 - inputs:(row12,sortie_brand_map) outputs:(sortie_Brand)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_sortie_brand_map = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<sortie_brand_mapStruct> tHash_Lookup_sortie_brand_map =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<sortie_brand_mapStruct>getLookup(matchingModeEnum_sortie_brand_map);
	   						   
		   	   	   globalMap.put("tHash_Lookup_sortie_brand_map", tHash_Lookup_sortie_brand_map);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_sortie_brand_map begin ] stop
 */



	
	/**
	 * [tMap_21 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_21", false);
		start_Hash.put("tMap_21", System.currentTimeMillis());
		
	
	currentComponent="tMap_21";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row13");
					}
				
		int tos_count_tMap_21 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_21__Struct  {
}
Var__tMap_21__Struct Var__tMap_21 = new Var__tMap_21__Struct();
// ###############################

// ###############################
// # Outputs initialization
sortie_brand_mapStruct sortie_brand_map_tmp = new sortie_brand_mapStruct();
// ###############################

        
        



        









 



/**
 * [tMap_21 begin ] stop
 */



	
	/**
	 * [tDBInput_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_11", false);
		start_Hash.put("tDBInput_11", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_11";

	
		int tos_count_tDBInput_11 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_11 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_11 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_11  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_11, talendToDBArray_tDBInput_11); 
		    int nb_line_tDBInput_11 = 0;
		    java.sql.Connection conn_tDBInput_11 = null;
				String driverClass_tDBInput_11 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
			    java.lang.Class jdbcclazz_tDBInput_11 = java.lang.Class.forName(driverClass_tDBInput_11);
					String dbUser_tDBInput_11 = "etl_read_uat";
					
					
					 
	final String decryptedPassword_tDBInput_11 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[RB+9xYcpvovqWvgx0on97vO6utkFHvcWbzzuP9BpypDRmlcCocYp]");
					
					String dbPwd_tDBInput_11 = decryptedPassword_tDBInput_11;
				
		    String port_tDBInput_11 = "1433";
		    String dbname_tDBInput_11 = "etl_uat" ;		    
		    String url_tDBInput_11 = "jdbc:sqlserver://" + "10.7.7.48" ;
		    if (!"".equals(port_tDBInput_11)) {
		    	url_tDBInput_11 += ":" + "1433";
		    }
		    if (!"".equals(dbname_tDBInput_11)) {		    
		    	url_tDBInput_11 += ";databaseName=" + "etl_uat"; 
		    }
		    url_tDBInput_11 += ";appName=" + projectName + ";" + "";
		    String dbschema_tDBInput_11 = "";
				
				conn_tDBInput_11 = java.sql.DriverManager.getConnection(url_tDBInput_11,dbUser_tDBInput_11,dbPwd_tDBInput_11);
		        
		    
			java.sql.Statement stmt_tDBInput_11 = conn_tDBInput_11.createStatement();

		    String dbquery_tDBInput_11 = "select BRANDID from data.D365_K3FashionBrands";
			

            	globalMap.put("tDBInput_11_QUERY",dbquery_tDBInput_11);
		    java.sql.ResultSet rs_tDBInput_11 = null;

		    try {
		    	rs_tDBInput_11 = stmt_tDBInput_11.executeQuery(dbquery_tDBInput_11);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_11 = rs_tDBInput_11.getMetaData();
		    	int colQtyInRs_tDBInput_11 = rsmd_tDBInput_11.getColumnCount();

		    String tmpContent_tDBInput_11 = null;
		    
		    
		    while (rs_tDBInput_11.next()) {
		        nb_line_tDBInput_11++;
		        
							if(colQtyInRs_tDBInput_11 < 1) {
								row13.BRANDID = null;
							} else {
	                         		
           		tmpContent_tDBInput_11 = rs_tDBInput_11.getString(1);
            if(tmpContent_tDBInput_11 != null) {
            	if (talendToDBList_tDBInput_11 .contains(rsmd_tDBInput_11.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		row13.BRANDID = FormatterUtils.formatUnwithE(tmpContent_tDBInput_11);
            	} else {
                	row13.BRANDID = tmpContent_tDBInput_11;
                }
            } else {
                row13.BRANDID = null;
            }
		                    }
					





 



/**
 * [tDBInput_11 begin ] stop
 */
	
	/**
	 * [tDBInput_11 main ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

 


	tos_count_tDBInput_11++;

/**
 * [tDBInput_11 main ] stop
 */
	
	/**
	 * [tDBInput_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

 



/**
 * [tDBInput_11 process_data_begin ] stop
 */

	
	/**
	 * [tMap_21 main ] start
	 */

	

	
	
	currentComponent="tMap_21";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row13");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_21 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_21 = false;
		  boolean mainRowRejected_tMap_21 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_21__Struct Var = Var__tMap_21;// ###############################
        // ###############################
        // # Output tables

sortie_brand_map = null;


// # Output table : 'sortie_brand_map'
sortie_brand_map_tmp.BRANDID = StringHandling.DOWNCASE(row13.BRANDID) ;
sortie_brand_map = sortie_brand_map_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_21 = false;










 


	tos_count_tMap_21++;

/**
 * [tMap_21 main ] stop
 */
	
	/**
	 * [tMap_21 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_21";

	

 



/**
 * [tMap_21 process_data_begin ] stop
 */
// Start of branch "sortie_brand_map"
if(sortie_brand_map != null) { 



	
	/**
	 * [tAdvancedHash_sortie_brand_map main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_sortie_brand_map";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_brand_map");
					}
					


			   
			   

					sortie_brand_mapStruct sortie_brand_map_HashRow = new sortie_brand_mapStruct();
		   	   	   
				
				sortie_brand_map_HashRow.BRANDID = sortie_brand_map.BRANDID;
				
			tHash_Lookup_sortie_brand_map.put(sortie_brand_map_HashRow);
			
            




 


	tos_count_tAdvancedHash_sortie_brand_map++;

/**
 * [tAdvancedHash_sortie_brand_map main ] stop
 */
	
	/**
	 * [tAdvancedHash_sortie_brand_map process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_sortie_brand_map";

	

 



/**
 * [tAdvancedHash_sortie_brand_map process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_sortie_brand_map process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_sortie_brand_map";

	

 



/**
 * [tAdvancedHash_sortie_brand_map process_data_end ] stop
 */

} // End of branch "sortie_brand_map"




	
	/**
	 * [tMap_21 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_21";

	

 



/**
 * [tMap_21 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

 



/**
 * [tDBInput_11 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_11 end ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

	}
}finally{
	if (rs_tDBInput_11 != null) {
		rs_tDBInput_11.close();
	}
	if (stmt_tDBInput_11 != null) {
		stmt_tDBInput_11.close();
	}
		if(conn_tDBInput_11 != null && !conn_tDBInput_11.isClosed()) {
			
			conn_tDBInput_11.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_11_NB_LINE",nb_line_tDBInput_11);

 

ok_Hash.put("tDBInput_11", true);
end_Hash.put("tDBInput_11", System.currentTimeMillis());




/**
 * [tDBInput_11 end ] stop
 */

	
	/**
	 * [tMap_21 end ] start
	 */

	

	
	
	currentComponent="tMap_21";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row13");
			  	}
			  	
 

ok_Hash.put("tMap_21", true);
end_Hash.put("tMap_21", System.currentTimeMillis());




/**
 * [tMap_21 end ] stop
 */

	
	/**
	 * [tAdvancedHash_sortie_brand_map end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_sortie_brand_map";

	

tHash_Lookup_sortie_brand_map.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_brand_map");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_sortie_brand_map", true);
end_Hash.put("tAdvancedHash_sortie_brand_map", System.currentTimeMillis());




/**
 * [tAdvancedHash_sortie_brand_map end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_11 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

 



/**
 * [tDBInput_11 finally ] stop
 */

	
	/**
	 * [tMap_21 finally ] start
	 */

	

	
	
	currentComponent="tMap_21";

	

 



/**
 * [tMap_21 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_sortie_brand_map finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_sortie_brand_map";

	

 



/**
 * [tAdvancedHash_sortie_brand_map finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_11_SUBPROCESS_STATE", 1);
	}
	


public static class sortie_color_mapStruct implements routines.system.IPersistableComparableLookupRow<sortie_color_mapStruct> {
    final static byte[] commonByteArrayLock_DEV_BUY_VALIDATION = new byte[0];
    static byte[] commonByteArray_DEV_BUY_VALIDATION = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String COLORID;

				public String getCOLORID () {
					return this.COLORID;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.COLORID == null) ? 0 : this.COLORID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final sortie_color_mapStruct other = (sortie_color_mapStruct) obj;
		
						if (this.COLORID == null) {
							if (other.COLORID != null)
								return false;
						
						} else if (!this.COLORID.equals(other.COLORID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(sortie_color_mapStruct other) {

		other.COLORID = this.COLORID;
	            
	}

	public void copyKeysDataTo(sortie_color_mapStruct other) {

		other.COLORID = this.COLORID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_BUY_VALIDATION.length) {
				if(length < 1024 && commonByteArray_DEV_BUY_VALIDATION.length == 0) {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[1024];
				} else {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_BUY_VALIDATION, 0, length);
			strReturn = new String(commonByteArray_DEV_BUY_VALIDATION, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_BUY_VALIDATION) {

        	try {

        		int length = 0;
		
					this.COLORID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.COLORID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		

		

        }

		
        	finally {}

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
        	}
        	finally {}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("COLORID="+COLORID);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_color_mapStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.COLORID, other.COLORID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
    final static byte[] commonByteArrayLock_DEV_BUY_VALIDATION = new byte[0];
    static byte[] commonByteArray_DEV_BUY_VALIDATION = new byte[0];

	
			    public String COLORID;

				public String getCOLORID () {
					return this.COLORID;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_BUY_VALIDATION.length) {
				if(length < 1024 && commonByteArray_DEV_BUY_VALIDATION.length == 0) {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[1024];
				} else {
   					commonByteArray_DEV_BUY_VALIDATION = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_BUY_VALIDATION, 0, length);
			strReturn = new String(commonByteArray_DEV_BUY_VALIDATION, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_BUY_VALIDATION) {

        	try {

        		int length = 0;
		
					this.COLORID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.COLORID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("COLORID="+COLORID);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row11Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_12Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_12_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row11Struct row11 = new row11Struct();
sortie_color_mapStruct sortie_color_map = new sortie_color_mapStruct();





	
	/**
	 * [tAdvancedHash_sortie_color_map begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_sortie_color_map", false);
		start_Hash.put("tAdvancedHash_sortie_color_map", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_sortie_color_map";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_color_map");
					}
				
		int tos_count_tAdvancedHash_sortie_color_map = 0;
		

			   		// connection name:sortie_color_map
			   		// source node:tMap_22 - inputs:(row11) outputs:(sortie_color_map,sortie_color_map) | target node:tAdvancedHash_sortie_color_map - inputs:(sortie_color_map) outputs:()
			   		// linked node: tMap_2 - inputs:(row10,sortie_color_map) outputs:(sortie)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_sortie_color_map = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<sortie_color_mapStruct> tHash_Lookup_sortie_color_map =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<sortie_color_mapStruct>getLookup(matchingModeEnum_sortie_color_map);
	   						   
		   	   	   globalMap.put("tHash_Lookup_sortie_color_map", tHash_Lookup_sortie_color_map);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_sortie_color_map begin ] stop
 */



	
	/**
	 * [tMap_22 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_22", false);
		start_Hash.put("tMap_22", System.currentTimeMillis());
		
	
	currentComponent="tMap_22";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row11");
					}
				
		int tos_count_tMap_22 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_22__Struct  {
}
Var__tMap_22__Struct Var__tMap_22 = new Var__tMap_22__Struct();
// ###############################

// ###############################
// # Outputs initialization
sortie_color_mapStruct sortie_color_map_tmp = new sortie_color_mapStruct();
// ###############################

        
        



        









 



/**
 * [tMap_22 begin ] stop
 */



	
	/**
	 * [tDBInput_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_12", false);
		start_Hash.put("tDBInput_12", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_12";

	
		int tos_count_tDBInput_12 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_12 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_12 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_12  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_12, talendToDBArray_tDBInput_12); 
		    int nb_line_tDBInput_12 = 0;
		    java.sql.Connection conn_tDBInput_12 = null;
				String driverClass_tDBInput_12 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
			    java.lang.Class jdbcclazz_tDBInput_12 = java.lang.Class.forName(driverClass_tDBInput_12);
					String dbUser_tDBInput_12 = "etl_read_uat";
					
					
					 
	final String decryptedPassword_tDBInput_12 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[DtlN+JozOCk9Ecm9EC0HGeeyIXU1PxPi5rPUxPukWXSKA/NNzTcC]");
					
					String dbPwd_tDBInput_12 = decryptedPassword_tDBInput_12;
				
		    String port_tDBInput_12 = "1433";
		    String dbname_tDBInput_12 = "etl_uat" ;		    
		    String url_tDBInput_12 = "jdbc:sqlserver://" + "10.7.7.48" ;
		    if (!"".equals(port_tDBInput_12)) {
		    	url_tDBInput_12 += ":" + "1433";
		    }
		    if (!"".equals(dbname_tDBInput_12)) {		    
		    	url_tDBInput_12 += ";databaseName=" + "etl_uat"; 
		    }
		    url_tDBInput_12 += ";appName=" + projectName + ";" + "";
		    String dbschema_tDBInput_12 = "";
				
				conn_tDBInput_12 = java.sql.DriverManager.getConnection(url_tDBInput_12,dbUser_tDBInput_12,dbPwd_tDBInput_12);
		        
		    
			java.sql.Statement stmt_tDBInput_12 = conn_tDBInput_12.createStatement();

		    String dbquery_tDBInput_12 = "select ECORESCOLOR_NAME as COLORID from data.D365_K3FashionColorTranslations";
			

            	globalMap.put("tDBInput_12_QUERY",dbquery_tDBInput_12);
		    java.sql.ResultSet rs_tDBInput_12 = null;

		    try {
		    	rs_tDBInput_12 = stmt_tDBInput_12.executeQuery(dbquery_tDBInput_12);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_12 = rs_tDBInput_12.getMetaData();
		    	int colQtyInRs_tDBInput_12 = rsmd_tDBInput_12.getColumnCount();

		    String tmpContent_tDBInput_12 = null;
		    
		    
		    while (rs_tDBInput_12.next()) {
		        nb_line_tDBInput_12++;
		        
							if(colQtyInRs_tDBInput_12 < 1) {
								row11.COLORID = null;
							} else {
	                         		
           		tmpContent_tDBInput_12 = rs_tDBInput_12.getString(1);
            if(tmpContent_tDBInput_12 != null) {
            	if (talendToDBList_tDBInput_12 .contains(rsmd_tDBInput_12.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		row11.COLORID = FormatterUtils.formatUnwithE(tmpContent_tDBInput_12);
            	} else {
                	row11.COLORID = tmpContent_tDBInput_12;
                }
            } else {
                row11.COLORID = null;
            }
		                    }
					





 



/**
 * [tDBInput_12 begin ] stop
 */
	
	/**
	 * [tDBInput_12 main ] start
	 */

	

	
	
	currentComponent="tDBInput_12";

	

 


	tos_count_tDBInput_12++;

/**
 * [tDBInput_12 main ] stop
 */
	
	/**
	 * [tDBInput_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_12";

	

 



/**
 * [tDBInput_12 process_data_begin ] stop
 */

	
	/**
	 * [tMap_22 main ] start
	 */

	

	
	
	currentComponent="tMap_22";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row11");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_22 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_22 = false;
		  boolean mainRowRejected_tMap_22 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_22__Struct Var = Var__tMap_22;// ###############################
        // ###############################
        // # Output tables

sortie_color_map = null;


// # Output table : 'sortie_color_map'
sortie_color_map_tmp.COLORID = StringHandling.DOWNCASE(row11.COLORID) ;
sortie_color_map = sortie_color_map_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_22 = false;










 


	tos_count_tMap_22++;

/**
 * [tMap_22 main ] stop
 */
	
	/**
	 * [tMap_22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

 



/**
 * [tMap_22 process_data_begin ] stop
 */
// Start of branch "sortie_color_map"
if(sortie_color_map != null) { 



	
	/**
	 * [tAdvancedHash_sortie_color_map main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_sortie_color_map";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_color_map");
					}
					


			   
			   

					sortie_color_mapStruct sortie_color_map_HashRow = new sortie_color_mapStruct();
		   	   	   
				
				sortie_color_map_HashRow.COLORID = sortie_color_map.COLORID;
				
			tHash_Lookup_sortie_color_map.put(sortie_color_map_HashRow);
			
            




 


	tos_count_tAdvancedHash_sortie_color_map++;

/**
 * [tAdvancedHash_sortie_color_map main ] stop
 */
	
	/**
	 * [tAdvancedHash_sortie_color_map process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_sortie_color_map";

	

 



/**
 * [tAdvancedHash_sortie_color_map process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_sortie_color_map process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_sortie_color_map";

	

 



/**
 * [tAdvancedHash_sortie_color_map process_data_end ] stop
 */

} // End of branch "sortie_color_map"




	
	/**
	 * [tMap_22 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

 



/**
 * [tMap_22 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_12";

	

 



/**
 * [tDBInput_12 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_12 end ] start
	 */

	

	
	
	currentComponent="tDBInput_12";

	

	}
}finally{
	if (rs_tDBInput_12 != null) {
		rs_tDBInput_12.close();
	}
	if (stmt_tDBInput_12 != null) {
		stmt_tDBInput_12.close();
	}
		if(conn_tDBInput_12 != null && !conn_tDBInput_12.isClosed()) {
			
			conn_tDBInput_12.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_12_NB_LINE",nb_line_tDBInput_12);

 

ok_Hash.put("tDBInput_12", true);
end_Hash.put("tDBInput_12", System.currentTimeMillis());




/**
 * [tDBInput_12 end ] stop
 */

	
	/**
	 * [tMap_22 end ] start
	 */

	

	
	
	currentComponent="tMap_22";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row11");
			  	}
			  	
 

ok_Hash.put("tMap_22", true);
end_Hash.put("tMap_22", System.currentTimeMillis());




/**
 * [tMap_22 end ] stop
 */

	
	/**
	 * [tAdvancedHash_sortie_color_map end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_sortie_color_map";

	

tHash_Lookup_sortie_color_map.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_color_map");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_sortie_color_map", true);
end_Hash.put("tAdvancedHash_sortie_color_map", System.currentTimeMillis());




/**
 * [tAdvancedHash_sortie_color_map end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_12 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_12";

	

 



/**
 * [tDBInput_12 finally ] stop
 */

	
	/**
	 * [tMap_22 finally ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

 



/**
 * [tMap_22 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_sortie_color_map finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_sortie_color_map";

	

 



/**
 * [tAdvancedHash_sortie_color_map finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_12_SUBPROCESS_STATE", 1);
	}
	

public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";

	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tSetGlobalVar_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	

public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";

	
		int tos_count_tPostjob_1 = 0;
		

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tJava_1Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	

public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";

	
		int tos_count_tJava_1 = 0;
		


if ( (context.hasErrorHeader == false && ((Integer)globalMap.get("tFilterRow_1_NB_LINE_OK")) > 0) || context.hasErrorHeader)
{

	context.hasErrorHeader = true;

}
 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_begin ] stop
 */
	
	/**
	 * [tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_end ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());

   			if (! context.hasErrorHeader) {
   				
					if(execStat){   
   	 					runStat.updateStatOnConnection("If2", 0, "true");
					}
				
    			tFileDelete_1Process(globalMap);
   			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If2", 0, "false");
					}   	 
   				}
   			if (context.hasErrorHeader) {
   				
					if(execStat){   
   	 					runStat.updateStatOnConnection("If3", 0, "true");
					}
				
    			tFileCopy_2Process(globalMap);
   			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If3", 0, "false");
					}   	 
   				}



/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	

public void tFileDelete_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileDelete_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tFileDelete_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileDelete_1", false);
		start_Hash.put("tFileDelete_1", System.currentTimeMillis());
		
	
	currentComponent="tFileDelete_1";

	
		int tos_count_tFileDelete_1 = 0;
		

 



/**
 * [tFileDelete_1 begin ] stop
 */
	
	/**
	 * [tFileDelete_1 main ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";

	

 

class DeleteFoldertFileDelete_1{
	 /**
     * delete all the sub-files in 'file'
     * 
     * @param file
     */
	public boolean delete(java.io.File file) {
        java.io.File[] files = file.listFiles();
        for (int i = 0; i < files.length; i++) {
            if (files[i].isFile()) {
                files[i].delete();
            } else if (files[i].isDirectory()) {
                if (!files[i].delete()) {
                    delete(files[i]);
                }
            }
        }
        deleteDirectory(file);
        return file.delete();
    }

    /**
     * delete all the sub-folders in 'file'
     * 
     * @param file
     */
    private void deleteDirectory(java.io.File file) {
        java.io.File[] filed = file.listFiles();
        for (int i = 0; i < filed.length; i++) {
        	if(filed[i].isDirectory()) {
            	deleteDirectory(filed[i]);
            }
            filed[i].delete();
        }
    }

}
    java.io.File file_tFileDelete_1=new java.io.File(context.LogPath + globalMap.get("dateError") + "_ERROR_" + context.ExcelFileName);
    if(file_tFileDelete_1.exists()&& file_tFileDelete_1.isFile()){
    	if(file_tFileDelete_1.delete()){
    		globalMap.put("tFileDelete_1_CURRENT_STATUS", "File deleted.");
		}else{
			globalMap.put("tFileDelete_1_CURRENT_STATUS", "No file deleted.");
		}
	}else{
		globalMap.put("tFileDelete_1_CURRENT_STATUS", "File does not exist or is invalid.");
	}
	globalMap.put("tFileDelete_1_DELETE_PATH",context.LogPath + globalMap.get("dateError") + "_ERROR_" + context.ExcelFileName);
    
     
 

 


	tos_count_tFileDelete_1++;

/**
 * [tFileDelete_1 main ] stop
 */
	
	/**
	 * [tFileDelete_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";

	

 



/**
 * [tFileDelete_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileDelete_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";

	

 



/**
 * [tFileDelete_1 process_data_end ] stop
 */
	
	/**
	 * [tFileDelete_1 end ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";

	

 

ok_Hash.put("tFileDelete_1", true);
end_Hash.put("tFileDelete_1", System.currentTimeMillis());




/**
 * [tFileDelete_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileDelete_1 finally ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";

	

 



/**
 * [tFileDelete_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileDelete_1_SUBPROCESS_STATE", 1);
	}
	

public void tFileCopy_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileCopy_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileCopy_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileCopy_2", false);
		start_Hash.put("tFileCopy_2", System.currentTimeMillis());
		
	
	currentComponent="tFileCopy_2";

	
		int tos_count_tFileCopy_2 = 0;
		

 



/**
 * [tFileCopy_2 begin ] stop
 */
	
	/**
	 * [tFileCopy_2 main ] start
	 */

	

	
	
	currentComponent="tFileCopy_2";

	

 


        String srcFileName_tFileCopy_2 = context.IntegrationExcelPath + context.ExcelFileName;

		java.io.File srcFile_tFileCopy_2 = new java.io.File(srcFileName_tFileCopy_2);

		// here need check first, before mkdirs().
		if (!srcFile_tFileCopy_2.exists() || !srcFile_tFileCopy_2.isFile()) {
			String errorMessageFileDoesnotExistsOrIsNotAFile_tFileCopy_2 = String.format("The source File \"%s\" does not exist or is not a file.", srcFileName_tFileCopy_2);
				throw new RuntimeException(errorMessageFileDoesnotExistsOrIsNotAFile_tFileCopy_2);
		}
        String desDirName_tFileCopy_2 = context.LogPath;

		String desFileName_tFileCopy_2 =  globalMap.get("dateError")  + "_" + context.ExcelFileName ;

		if (desFileName_tFileCopy_2 != null && ("").equals(desFileName_tFileCopy_2.trim())){
			desFileName_tFileCopy_2 = "NewName.temp";
		}

		java.io.File desFile_tFileCopy_2 = new java.io.File(desDirName_tFileCopy_2, desFileName_tFileCopy_2);

		if (!srcFile_tFileCopy_2.getPath().equals(desFile_tFileCopy_2.getPath())  ) {
				java.io.File parentFile_tFileCopy_2 = desFile_tFileCopy_2.getParentFile();

				if (parentFile_tFileCopy_2 != null && !parentFile_tFileCopy_2.exists()) {
					parentFile_tFileCopy_2.mkdirs();
				}
					org.talend.FileCopy.copyFile(srcFile_tFileCopy_2.getPath(), desFile_tFileCopy_2.getPath(), true);
				java.io.File isRemoved_tFileCopy_2 = new java.io.File(context.IntegrationExcelPath + context.ExcelFileName);
				if(isRemoved_tFileCopy_2.exists()) {
					String errorMessageCouldNotRemoveFile_tFileCopy_2 = String.format("tFileCopy_2 - The source file \"%s\" could not be removed from the folder because it is open or you only have read-only rights.", srcFileName_tFileCopy_2);
						throw new RuntimeException(errorMessageCouldNotRemoveFile_tFileCopy_2);
				} 

		}
		globalMap.put("tFileCopy_2_DESTINATION_FILEPATH",desFile_tFileCopy_2.getPath()); 
		globalMap.put("tFileCopy_2_DESTINATION_FILENAME",desFile_tFileCopy_2.getName()); 

		globalMap.put("tFileCopy_2_SOURCE_DIRECTORY", srcFile_tFileCopy_2.getParent());
		globalMap.put("tFileCopy_2_DESTINATION_DIRECTORY", desFile_tFileCopy_2.getParent());        
        

 


	tos_count_tFileCopy_2++;

/**
 * [tFileCopy_2 main ] stop
 */
	
	/**
	 * [tFileCopy_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileCopy_2";

	

 



/**
 * [tFileCopy_2 process_data_begin ] stop
 */
	
	/**
	 * [tFileCopy_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileCopy_2";

	

 



/**
 * [tFileCopy_2 process_data_end ] stop
 */
	
	/**
	 * [tFileCopy_2 end ] start
	 */

	

	
	
	currentComponent="tFileCopy_2";

	

 

ok_Hash.put("tFileCopy_2", true);
end_Hash.put("tFileCopy_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk8", 0, "ok");
				}
				tFixedFlowInput_1Process(globalMap);



/**
 * [tFileCopy_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileCopy_2 finally ] start
	 */

	

	
	
	currentComponent="tFileCopy_2";

	

 



/**
 * [tFileCopy_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileCopy_2_SUBPROCESS_STATE", 1);
	}
	


public static class row34Struct implements routines.system.IPersistableRow<row34Struct> {
    final static byte[] commonByteArrayLock_DEV_BUY_VALIDATION = new byte[0];
    static byte[] commonByteArray_DEV_BUY_VALIDATION = new byte[0];

	
			    public Boolean newColumn;

				public Boolean getNewColumn () {
					return this.newColumn;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_BUY_VALIDATION) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.newColumn = null;
           				} else {
           			    	this.newColumn = dis.readBoolean();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Boolean
				
						if(this.newColumn == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.newColumn);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("newColumn="+String.valueOf(newColumn));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row34Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row26Struct implements routines.system.IPersistableRow<row26Struct> {
    final static byte[] commonByteArrayLock_DEV_BUY_VALIDATION = new byte[0];
    static byte[] commonByteArray_DEV_BUY_VALIDATION = new byte[0];

	
			    public Boolean newColumn;

				public Boolean getNewColumn () {
					return this.newColumn;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_BUY_VALIDATION) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.newColumn = null;
           				} else {
           			    	this.newColumn = dis.readBoolean();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Boolean
				
						if(this.newColumn == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.newColumn);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("newColumn="+String.valueOf(newColumn));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row26Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_DEV_BUY_VALIDATION = new byte[0];
    static byte[] commonByteArray_DEV_BUY_VALIDATION = new byte[0];

	
			    public Boolean newColumn;

				public Boolean getNewColumn () {
					return this.newColumn;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_BUY_VALIDATION) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.newColumn = null;
           				} else {
           			    	this.newColumn = dis.readBoolean();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Boolean
				
						if(this.newColumn == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.newColumn);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("newColumn="+String.valueOf(newColumn));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFixedFlowInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row7Struct row7 = new row7Struct();
row7Struct row26 = row7;
row7Struct row34 = row7;






	
	/**
	 * [tSendMail_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tSendMail_2", false);
		start_Hash.put("tSendMail_2", System.currentTimeMillis());
		
	
	currentComponent="tSendMail_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row34");
					}
				
		int tos_count_tSendMail_2 = 0;
		

 



/**
 * [tSendMail_2 begin ] stop
 */



	
	/**
	 * [tSleep_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tSleep_1", false);
		start_Hash.put("tSleep_1", System.currentTimeMillis());
		
	
	currentComponent="tSleep_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row26");
					}
				
		int tos_count_tSleep_1 = 0;
		

 



/**
 * [tSleep_1 begin ] stop
 */



	
	/**
	 * [tLogRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_3", false);
		start_Hash.put("tLogRow_3", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7");
					}
				
		int tos_count_tLogRow_3 = 0;
		

	///////////////////////
	
         class Util_tLogRow_3 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[1];

        public void addRow(String[] row) {

            for (int i = 0; i < 1; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 0 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 0 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);	                

                  
                    //last column
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() - fillChars[1].length()+2; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_3 util_tLogRow_3 = new Util_tLogRow_3();
        util_tLogRow_3.setTableName("tLogRow_3");
        util_tLogRow_3.addRow(new String[]{"newColumn",});        
 		StringBuilder strBuffer_tLogRow_3 = null;
		int nb_line_tLogRow_3 = 0;
///////////////////////    			



 



/**
 * [tLogRow_3 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_1", false);
		start_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_1";

	
		int tos_count_tFixedFlowInput_1 = 0;
		

	    for (int i_tFixedFlowInput_1 = 0 ; i_tFixedFlowInput_1 < 1 ; i_tFixedFlowInput_1++) {
	                	            	
    	            		row7.newColumn = context.isNike;
    	            	
 



/**
 * [tFixedFlowInput_1 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";

	

 


	tos_count_tFixedFlowInput_1++;

/**
 * [tFixedFlowInput_1 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";

	

 



/**
 * [tFixedFlowInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tLogRow_3 main ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row7");
					}
					
///////////////////////		
						

				
				String[] row_tLogRow_3 = new String[1];
   				
	    		if(row7.newColumn != null) { //              
                 row_tLogRow_3[0]=    						    
				                String.valueOf(row7.newColumn)			
					          ;	
							
	    		} //			
    			 

				util_tLogRow_3.addRow(row_tLogRow_3);	
				nb_line_tLogRow_3++;
//////

//////                    
                    
///////////////////////    			

 
     row26 = row7;


	tos_count_tLogRow_3++;

/**
 * [tLogRow_3 main ] stop
 */
	
	/**
	 * [tLogRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 process_data_begin ] stop
 */

	
	/**
	 * [tSleep_1 main ] start
	 */

	

	
	
	currentComponent="tSleep_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row26");
					}
					

    Thread.sleep((2)*1000);

 
     row34 = row26;


	tos_count_tSleep_1++;

/**
 * [tSleep_1 main ] stop
 */
	
	/**
	 * [tSleep_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSleep_1";

	

 



/**
 * [tSleep_1 process_data_begin ] stop
 */

	
	/**
	 * [tSendMail_2 main ] start
	 */

	

	
	
	currentComponent="tSendMail_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row34");
					}
					

 

	String smtpHost_tSendMail_2 = "smtp.office365.com";
        String smtpPort_tSendMail_2 = "587";
	String from_tSendMail_2 = ("djebiri.franck@haddadeurope.com");
    String to_tSendMail_2 = (context.recipientEmail).replace(";",",");
    String cc_tSendMail_2 = (("")==null || "".equals(""))?null:("").replace(";",",");
    String bcc_tSendMail_2 = (("")==null || "".equals(""))?null:("").replace(";",",");
    String subject_tSendMail_2 = ("Haddad - test envoi email");
    
	java.util.List<java.util.Map<String, String>> headers_tSendMail_2 = new java.util.ArrayList<java.util.Map<String,String>>();
	java.util.List<String> attachments_tSendMail_2 = new java.util.ArrayList<String>();
	java.util.List<String> contentTransferEncoding_tSendMail_2 = new java.util.ArrayList<String>();
		attachments_tSendMail_2.add(context.LogPath + globalMap.get("dateError") + "_ERROR_" + context.ExcelFileName);
		contentTransferEncoding_tSendMail_2.add("DEFAULT");	

	String message_tSendMail_2 = (("Please find in attachment integration errors") == null || "".equals("Please find in attachment integration errors")) ? "\"\"" : ("Please find in attachment integration errors") ;
	java.util.Properties props_tSendMail_2 = System.getProperties();     
	props_tSendMail_2.put("mail.smtp.host", smtpHost_tSendMail_2);
	props_tSendMail_2.put("mail.smtp.port", smtpPort_tSendMail_2);
		props_tSendMail_2.put("mail.mime.encodefilename", "true");
		props_tSendMail_2.put("mail.smtp.starttls.enable","true");     
	try {
		
		
			props_tSendMail_2.put("mail.smtp.auth", "true");
			javax.mail.Session session_tSendMail_2 = javax.mail.Session.getInstance(props_tSendMail_2, new javax.mail.Authenticator(){         
				protected javax.mail.PasswordAuthentication getPasswordAuthentication() {
				
                 
	final String decryptedPassword_tSendMail_2 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[kA+NL/1p5lFr5q2HvqKrttFAvZKR1ew5fQnF9IN25B6ipKd+]");
				
				
				return new javax.mail.PasswordAuthentication("djebiri.franck@haddadeurope.com", decryptedPassword_tSendMail_2); 
				}         
			});   
		
		
		javax.mail.Message msg_tSendMail_2 = new javax.mail.internet.MimeMessage(session_tSendMail_2);
		msg_tSendMail_2.setFrom(new javax.mail.internet.InternetAddress(from_tSendMail_2, null));
		msg_tSendMail_2.setRecipients(javax.mail.Message.RecipientType.TO,javax.mail.internet.InternetAddress.parse(to_tSendMail_2, false));
		if (cc_tSendMail_2 != null) msg_tSendMail_2.setRecipients(javax.mail.Message.RecipientType.CC, javax.mail.internet.InternetAddress.parse(cc_tSendMail_2, false));
		if (bcc_tSendMail_2 != null) msg_tSendMail_2.setRecipients(javax.mail.Message.RecipientType.BCC, javax.mail.internet.InternetAddress.parse(bcc_tSendMail_2, false));
		msg_tSendMail_2.setSubject(subject_tSendMail_2);

		for (int i_tSendMail_2 = 0; i_tSendMail_2 < headers_tSendMail_2.size(); i_tSendMail_2++) {
			java.util.Map<String, String> header_tSendMail_2 = headers_tSendMail_2.get(i_tSendMail_2);
			msg_tSendMail_2.setHeader(header_tSendMail_2.get("KEY"), header_tSendMail_2.get("VALUE"));    
		}  
		msg_tSendMail_2.setSentDate(new Date());
		msg_tSendMail_2.setHeader("X-Priority", "1"); //High->1 Normal->3 Low->5
		javax.mail.Multipart mp_tSendMail_2 = new javax.mail.internet.MimeMultipart();
		javax.mail.internet.MimeBodyPart mbpText_tSendMail_2 = new javax.mail.internet.MimeBodyPart();
		mbpText_tSendMail_2.setText(message_tSendMail_2,"ISO-8859-15", "plain");
		mp_tSendMail_2.addBodyPart(mbpText_tSendMail_2);
  
		javax.mail.internet.MimeBodyPart mbpFile_tSendMail_2 = null;

		for (int i_tSendMail_2 = 0; i_tSendMail_2 < attachments_tSendMail_2.size(); i_tSendMail_2++){
			String filename_tSendMail_2 = attachments_tSendMail_2.get(i_tSendMail_2);
			javax.activation.FileDataSource fds_tSendMail_2 = null;
			java.io.File file_tSendMail_2 = new java.io.File(filename_tSendMail_2);
			
				if (!file_tSendMail_2.exists()){
					continue;
				}
			
    		if (file_tSendMail_2.isDirectory()){
				java.io.File[] subFiles_tSendMail_2 = file_tSendMail_2.listFiles();
				for(java.io.File subFile_tSendMail_2 : subFiles_tSendMail_2){
					if (subFile_tSendMail_2.isFile()){
						fds_tSendMail_2 = new javax.activation.FileDataSource(subFile_tSendMail_2.getAbsolutePath());
						mbpFile_tSendMail_2 = new javax.mail.internet.MimeBodyPart();
						mbpFile_tSendMail_2.setDataHandler(new javax.activation.DataHandler(fds_tSendMail_2));
						mbpFile_tSendMail_2.setFileName(javax.mail.internet.MimeUtility.encodeText(fds_tSendMail_2.getName()));
						if(contentTransferEncoding_tSendMail_2.get(i_tSendMail_2).equalsIgnoreCase("base64")){
							mbpFile_tSendMail_2.setHeader("Content-Transfer-Encoding", "base64");
						}
						mp_tSendMail_2.addBodyPart(mbpFile_tSendMail_2);
					}
				}
    		}else{
				mbpFile_tSendMail_2 = new javax.mail.internet.MimeBodyPart();
				fds_tSendMail_2 = new javax.activation.FileDataSource(filename_tSendMail_2);
				mbpFile_tSendMail_2.setDataHandler(new javax.activation.DataHandler(fds_tSendMail_2)); 
				mbpFile_tSendMail_2.setFileName(javax.mail.internet.MimeUtility.encodeText(fds_tSendMail_2.getName()));
				if(contentTransferEncoding_tSendMail_2.get(i_tSendMail_2).equalsIgnoreCase("base64")){
					mbpFile_tSendMail_2.setHeader("Content-Transfer-Encoding", "base64");
				}
				mp_tSendMail_2.addBodyPart(mbpFile_tSendMail_2);
			}
		}
		// -- set the content --
		msg_tSendMail_2.setContent(mp_tSendMail_2);
		// add handlers for main MIME types
		javax.activation.MailcapCommandMap mc_tSendMail_2 = ( javax.activation.MailcapCommandMap)javax.activation.CommandMap.getDefaultCommandMap();
		mc_tSendMail_2.addMailcap("text/html;; x-java-content-handler=com.sun.mail.handlers.text_html");
		mc_tSendMail_2.addMailcap("text/xml;; x-java-content-handler=com.sun.mail.handlers.text_xml");
		mc_tSendMail_2.addMailcap("text/plain;; x-java-content-handler=com.sun.mail.handlers.text_plain");
		mc_tSendMail_2.addMailcap("multipart/*;; x-java-content-handler=com.sun.mail.handlers.multipart_mixed");
		mc_tSendMail_2.addMailcap("message/rfc822;; x-java-content-handler=com.sun.mail.handlers.message_rfc822");
		javax.activation.CommandMap.setDefaultCommandMap(mc_tSendMail_2);
		// -- Send the message --
		javax.mail.Transport.send(msg_tSendMail_2);
	} catch(java.lang.Exception e){
  		
			
  			System.err.println(e.toString());
		
	}finally{
		props_tSendMail_2.remove("mail.smtp.host");
		props_tSendMail_2.remove("mail.smtp.port");
		
		props_tSendMail_2.remove("mail.mime.encodefilename");
		
			props_tSendMail_2.remove("mail.smtp.starttls.enable");
		
		props_tSendMail_2.remove("mail.smtp.auth");     
	}

 


	tos_count_tSendMail_2++;

/**
 * [tSendMail_2 main ] stop
 */
	
	/**
	 * [tSendMail_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSendMail_2";

	

 



/**
 * [tSendMail_2 process_data_begin ] stop
 */
	
	/**
	 * [tSendMail_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tSendMail_2";

	

 



/**
 * [tSendMail_2 process_data_end ] stop
 */



	
	/**
	 * [tSleep_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tSleep_1";

	

 



/**
 * [tSleep_1 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";

	

 



/**
 * [tFixedFlowInput_1 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";

	

        }
        globalMap.put("tFixedFlowInput_1_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_1", true);
end_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());




/**
 * [tFixedFlowInput_1 end ] stop
 */

	
	/**
	 * [tLogRow_3 end ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_3 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_3 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_3 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_3);
                    }
                    
                    consoleOut_tLogRow_3.println(util_tLogRow_3.format().toString());
                    consoleOut_tLogRow_3.flush();
//////
globalMap.put("tLogRow_3_NB_LINE",nb_line_tLogRow_3);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7");
			  	}
			  	
 

ok_Hash.put("tLogRow_3", true);
end_Hash.put("tLogRow_3", System.currentTimeMillis());




/**
 * [tLogRow_3 end ] stop
 */

	
	/**
	 * [tSleep_1 end ] start
	 */

	

	
	
	currentComponent="tSleep_1";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row26");
			  	}
			  	
 

ok_Hash.put("tSleep_1", true);
end_Hash.put("tSleep_1", System.currentTimeMillis());




/**
 * [tSleep_1 end ] stop
 */

	
	/**
	 * [tSendMail_2 end ] start
	 */

	

	
	
	currentComponent="tSendMail_2";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row34");
			  	}
			  	
 

ok_Hash.put("tSendMail_2", true);
end_Hash.put("tSendMail_2", System.currentTimeMillis());




/**
 * [tSendMail_2 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_1 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";

	

 



/**
 * [tFixedFlowInput_1 finally ] stop
 */

	
	/**
	 * [tLogRow_3 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 finally ] stop
 */

	
	/**
	 * [tSleep_1 finally ] start
	 */

	

	
	
	currentComponent="tSleep_1";

	

 



/**
 * [tSleep_1 finally ] stop
 */

	
	/**
	 * [tSendMail_2 finally ] start
	 */

	

	
	
	currentComponent="tSendMail_2";

	

 



/**
 * [tSendMail_2 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final BUY_VALIDATION BUY_VALIDATIONClass = new BUY_VALIDATION();

        int exitCode = BUY_VALIDATIONClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = BUY_VALIDATION.class.getClassLoader().getResourceAsStream("dev/buy_validation_0_9/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = BUY_VALIDATION.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("ErrorHeader", "id_String");
                            context.ErrorHeader=(String) context.getProperty("ErrorHeader");
                        context.setContextType("hasErrorHeader", "id_Boolean");
                            try{
                                context.hasErrorHeader=routines.system.ParserUtils.parseTo_Boolean (context.getProperty("hasErrorHeader"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "hasErrorHeader", e.getMessage()));
                                context.hasErrorHeader=null;
                            }
                        context.setContextType("dateValidation", "id_String");
                            context.dateValidation=(String) context.getProperty("dateValidation");
                        context.setContextType("timeValidation", "id_String");
                            context.timeValidation=(String) context.getProperty("timeValidation");
                        context.setContextType("ReferentielPath", "id_String");
                            context.ReferentielPath=(String) context.getProperty("ReferentielPath");
                        context.setContextType("IntegrationExcelPath", "id_String");
                            context.IntegrationExcelPath=(String) context.getProperty("IntegrationExcelPath");
                        context.setContextType("ExcelFileName", "id_String");
                            context.ExcelFileName=(String) context.getProperty("ExcelFileName");
                        context.setContextType("LogPath", "id_String");
                            context.LogPath=(String) context.getProperty("LogPath");
                        context.setContextType("isNike", "id_Boolean");
                            try{
                                context.isNike=routines.system.ParserUtils.parseTo_Boolean (context.getProperty("isNike"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "isNike", e.getMessage()));
                                context.isNike=null;
                            }
                        context.setContextType("recipientEmail", "id_String");
                            context.recipientEmail=(String) context.getProperty("recipientEmail");
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("ErrorHeader")) {
                context.ErrorHeader = (String) parentContextMap.get("ErrorHeader");
            }if (parentContextMap.containsKey("hasErrorHeader")) {
                context.hasErrorHeader = (Boolean) parentContextMap.get("hasErrorHeader");
            }if (parentContextMap.containsKey("dateValidation")) {
                context.dateValidation = (String) parentContextMap.get("dateValidation");
            }if (parentContextMap.containsKey("timeValidation")) {
                context.timeValidation = (String) parentContextMap.get("timeValidation");
            }if (parentContextMap.containsKey("ReferentielPath")) {
                context.ReferentielPath = (String) parentContextMap.get("ReferentielPath");
            }if (parentContextMap.containsKey("IntegrationExcelPath")) {
                context.IntegrationExcelPath = (String) parentContextMap.get("IntegrationExcelPath");
            }if (parentContextMap.containsKey("ExcelFileName")) {
                context.ExcelFileName = (String) parentContextMap.get("ExcelFileName");
            }if (parentContextMap.containsKey("LogPath")) {
                context.LogPath = (String) parentContextMap.get("LogPath");
            }if (parentContextMap.containsKey("isNike")) {
                context.isNike = (Boolean) parentContextMap.get("isNike");
            }if (parentContextMap.containsKey("recipientEmail")) {
                context.recipientEmail = (String) parentContextMap.get("recipientEmail");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}



this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tFileInputExcel_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileInputExcel_1) {
globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", -1);

e_tFileInputExcel_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : BUY_VALIDATION");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     1518346 characters generated by Talend Open Studio for Data Integration 
 *     on the 11 janvier 2022 14:18:38 CET
 ************************************************************************************************/