// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package dev.tld_createorderandorderproductedi_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJavaRow_1
	//import java.util.List;
import java.io.File;
import java.io.FileOutputStream;
import org.apache.commons.codec.binary.Base64;



	//the import part of tJava_1
	//import java.util.List;

	//the import part of tJavaRow_4
	//import java.util.List;

	//the import part of tJava_2
	//import java.util.List;

	//the import part of tJavaRow_2
	//import java.util.List;

	//the import part of tJavaRow_3
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: tld_createOrderAndOrderProductEDI Purpose: tld_createOrderAndOrderProductEDI<br>
 * Description: tld_createOrderAndOrderProductEDI <br>
 * @author user@talend.com
 * @version 7.3.1.20191031_1204-M3
 * @status 
 */
public class tld_createOrderAndOrderProductEDI implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(access_token != null){
				
					this.setProperty("access_token", access_token.toString());
				
			}
			
			if(password != null){
				
					this.setProperty("password", password.toString());
				
			}
			
		}

public String access_token;
public String getAccess_token(){
	return this.access_token;
}
public String password;
public String getPassword(){
	return this.password;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "tld_createOrderAndOrderProductEDI";
	private final String projectName = "DEV";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Object>());
		
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	LogCatcherUtils talendLogs_LOGS = new LogCatcherUtils();

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				tld_createOrderAndOrderProductEDI.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(tld_createOrderAndOrderProductEDI.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
				talendLogs_LOGS.addMessage("Java Exception", currentComponent, 6, e.getClass().getName() + ":" + e.getMessage(), 1);
				talendLogs_LOGSProcess(globalMap);
			}
			} catch (TalendException e) {
				// do nothing
			
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void preStaLogCon_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					preStaLogCon_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileList_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSalesforceInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tSalesforceInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tSalesforceInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFlowToIterate_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tSalesforceInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileCopy_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tSalesforceInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tSalesforceInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tSalesforceInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSalesforceInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSalesforceOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileList_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileDelete_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSendMail_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSendMail_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputFullRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputJSON_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRESTClient_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputJSON_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRESTClient_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRESTClient_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRESTClient_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tExtractJSONFields_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRESTClient_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRESTClient_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSetGlobalVar_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRESTClient_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRESTClient_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileList_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileList_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileExist_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileExist_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileDelete_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileDelete_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileList_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSetGlobalVar_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputFullRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSetGlobalVar_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileDelete_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileDelete_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row27_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row19_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWriteJSONField_2_Out_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tWriteJSONField_2_In_error(exception, errorComponent, globalMap);
						
						}
					
			public void tWriteJSONField_2_In_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void connectionStatsLogs_Commit_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					connectionStatsLogs_Commit_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void connectionStatsLogs_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					connectionStatsLogs_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void talendLogs_LOGS_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							talendLogs_DB_error(exception, errorComponent, globalMap);
						
						}
					
			public void talendLogs_DB_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					talendLogs_LOGS_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void preStaLogCon_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileList_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSalesforceInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "ERROR", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

				try {
					
						if(this.execStat){
							runStat.updateStatOnConnection("OnSubjobError1", 0, "error");
						}
					
					errorCode = null;
					tSendMail_1Process(globalMap);
					if (!"failure".equals(status)) {
						status = "end";
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
			public void tSalesforceInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileList_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSendMail_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRESTClient_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileList_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileList_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileExist_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileDelete_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileList_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWriteJSONField_2_In_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void connectionStatsLogs_Commit_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void connectionStatsLogs_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void talendLogs_LOGS_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	





public void preStaLogConProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("preStaLogCon_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [preStaLogCon begin ] start
	 */

	

	
		
		ok_Hash.put("preStaLogCon", false);
		start_Hash.put("preStaLogCon", System.currentTimeMillis());
		
	
	currentComponent="preStaLogCon";

	
		int tos_count_preStaLogCon = 0;
		

 



/**
 * [preStaLogCon begin ] stop
 */
	
	/**
	 * [preStaLogCon main ] start
	 */

	

	
	
	currentComponent="preStaLogCon";

	

 


	tos_count_preStaLogCon++;

/**
 * [preStaLogCon main ] stop
 */
	
	/**
	 * [preStaLogCon process_data_begin ] start
	 */

	

	
	
	currentComponent="preStaLogCon";

	

 



/**
 * [preStaLogCon process_data_begin ] stop
 */
	
	/**
	 * [preStaLogCon process_data_end ] start
	 */

	

	
	
	currentComponent="preStaLogCon";

	

 



/**
 * [preStaLogCon process_data_end ] stop
 */
	
	/**
	 * [preStaLogCon end ] start
	 */

	

	
	
	currentComponent="preStaLogCon";

	

 

ok_Hash.put("preStaLogCon", true);
end_Hash.put("preStaLogCon", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("after_preStaLogCon_connectionStatsLogs", 0, "ok");
				}
				connectionStatsLogsProcess(globalMap);



/**
 * [preStaLogCon end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [preStaLogCon finally ] start
	 */

	

	
	
	currentComponent="preStaLogCon";

	

 



/**
 * [preStaLogCon finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("preStaLogCon_SUBPROCESS_STATE", 1);
	}
	


public static class row28Struct implements routines.system.IPersistableRow<row28Struct> {
    final static byte[] commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI = new byte[0];
    static byte[] commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[0];

	
			    public String Filename;

				public String getFilename () {
					return this.Filename;
				}
				
			    public String PONumber;

				public String getPONumber () {
					return this.PONumber;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length) {
				if(length < 1024 && commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length == 0) {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[1024];
				} else {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length);
			strReturn = new String(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI) {

        	try {

        		int length = 0;
		
					this.Filename = readString(dis);
					
					this.PONumber = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Filename,dos);
					
					// String
				
						writeString(this.PONumber,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Filename="+Filename);
		sb.append(",PONumber="+PONumber);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row28Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out11Struct implements routines.system.IPersistableRow<out11Struct> {
    final static byte[] commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI = new byte[0];
    static byte[] commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[0];

	
			    public String Filename;

				public String getFilename () {
					return this.Filename;
				}
				
			    public String PONumber;

				public String getPONumber () {
					return this.PONumber;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length) {
				if(length < 1024 && commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length == 0) {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[1024];
				} else {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length);
			strReturn = new String(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI) {

        	try {

        		int length = 0;
		
					this.Filename = readString(dis);
					
					this.PONumber = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Filename,dos);
					
					// String
				
						writeString(this.PONumber,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Filename="+Filename);
		sb.append(",PONumber="+PONumber);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out11Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI = new byte[0];
    static byte[] commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[0];

	
			    public String E;

				public String getE () {
					return this.E;
				}
				
			    public String NumberOfLines;

				public String getNumberOfLines () {
					return this.NumberOfLines;
				}
				
			    public String FileName;

				public String getFileName () {
					return this.FileName;
				}
				
			    public String Customer_EDI_ID;

				public String getCustomer_EDI_ID () {
					return this.Customer_EDI_ID;
				}
				
			    public String Customer_Order_Number;

				public String getCustomer_Order_Number () {
					return this.Customer_Order_Number;
				}
				
			    public String Document_Type;

				public String getDocument_Type () {
					return this.Document_Type;
				}
				
			    public String Ship_To;

				public String getShip_To () {
					return this.Ship_To;
				}
				
			    public String Invoice_To;

				public String getInvoice_To () {
					return this.Invoice_To;
				}
				
			    public String Order_By;

				public String getOrder_By () {
					return this.Order_By;
				}
				
			    public String Vendor;

				public String getVendor () {
					return this.Vendor;
				}
				
			    public String OrderDate;

				public String getOrderDate () {
					return this.OrderDate;
				}
				
			    public String Customer_Requested_Date;

				public String getCustomer_Requested_Date () {
					return this.Customer_Requested_Date;
				}
				
			    public String Season;

				public String getSeason () {
					return this.Season;
				}
				
			    public String ReferenceCustomerOrder;

				public String getReferenceCustomerOrder () {
					return this.ReferenceCustomerOrder;
				}
				
			    public String Comment_1;

				public String getComment_1 () {
					return this.Comment_1;
				}
				
			    public String Comment_2;

				public String getComment_2 () {
					return this.Comment_2;
				}
				
			    public String Order_By_Name;

				public String getOrder_By_Name () {
					return this.Order_By_Name;
				}
				
			    public String Order_By_Address;

				public String getOrder_By_Address () {
					return this.Order_By_Address;
				}
				
			    public String Order_By_PostalCode;

				public String getOrder_By_PostalCode () {
					return this.Order_By_PostalCode;
				}
				
			    public String Ship_To_Name;

				public String getShip_To_Name () {
					return this.Ship_To_Name;
				}
				
			    public String Ship_To_Address;

				public String getShip_To_Address () {
					return this.Ship_To_Address;
				}
				
			    public String Ship_To_PostalCode;

				public String getShip_To_PostalCode () {
					return this.Ship_To_PostalCode;
				}
				
			    public String DepartmentNumber;

				public String getDepartmentNumber () {
					return this.DepartmentNumber;
				}
				
			    public String CustomerVendorNumber;

				public String getCustomerVendorNumber () {
					return this.CustomerVendorNumber;
				}
				
			    public String TransportInstructions;

				public String getTransportInstructions () {
					return this.TransportInstructions;
				}
				
			    public String TermsofSale;

				public String getTermsofSale () {
					return this.TermsofSale;
				}
				
			    public String EffectiveDate;

				public String getEffectiveDate () {
					return this.EffectiveDate;
				}
				
			    public String ShipNotBeforeDate;

				public String getShipNotBeforeDate () {
					return this.ShipNotBeforeDate;
				}
				
			    public String ShipNoLaterDate;

				public String getShipNoLaterDate () {
					return this.ShipNoLaterDate;
				}
				
			    public String CancelAfterDate;

				public String getCancelAfterDate () {
					return this.CancelAfterDate;
				}
				
			    public String Brand;

				public String getBrand () {
					return this.Brand;
				}
				
			    public String OrderCurrency;

				public String getOrderCurrency () {
					return this.OrderCurrency;
				}
				
			    public String L;

				public String getL () {
					return this.L;
				}
				
			    public String LineNumber;

				public String getLineNumber () {
					return this.LineNumber;
				}
				
			    public String EAN_Client;

				public String getEAN_Client () {
					return this.EAN_Client;
				}
				
			    public String ItemDescription;

				public String getItemDescription () {
					return this.ItemDescription;
				}
				
			    public String OrderedQuantity;

				public String getOrderedQuantity () {
					return this.OrderedQuantity;
				}
				
			    public String Discount_Code;

				public String getDiscount_Code () {
					return this.Discount_Code;
				}
				
			    public String NetPrice;

				public String getNetPrice () {
					return this.NetPrice;
				}
				
			    public String Currency;

				public String getCurrency () {
					return this.Currency;
				}
				
			    public String Size;

				public String getSize () {
					return this.Size;
				}
				
			    public String Color;

				public String getColor () {
					return this.Color;
				}
				
			    public String SeasonCode;

				public String getSeasonCode () {
					return this.SeasonCode;
				}
				
			    public String TicketType;

				public String getTicketType () {
					return this.TicketType;
				}
				
			    public String PricatPriceCode;

				public String getPricatPriceCode () {
					return this.PricatPriceCode;
				}
				
			    public String WarehouseCode;

				public String getWarehouseCode () {
					return this.WarehouseCode;
				}
				
			    public String UnitOfMeasure;

				public String getUnitOfMeasure () {
					return this.UnitOfMeasure;
				}
				
			    public String InformationPriceE;

				public String getInformationPriceE () {
					return this.InformationPriceE;
				}
				
			    public String InformationPriceF;

				public String getInformationPriceF () {
					return this.InformationPriceF;
				}
				
			    public String Picture;

				public String getPicture () {
					return this.Picture;
				}
				
			    public String SeriesNumber;

				public String getSeriesNumber () {
					return this.SeriesNumber;
				}
				
			    public String ModelNumber;

				public String getModelNumber () {
					return this.ModelNumber;
				}
				
			    public String BuyerSizeCode;

				public String getBuyerSizeCode () {
					return this.BuyerSizeCode;
				}
				
			    public String EAN_Haddad;

				public String getEAN_Haddad () {
					return this.EAN_Haddad;
				}
				
			    public String BuyerItemNumber;

				public String getBuyerItemNumber () {
					return this.BuyerItemNumber;
				}
				
			    public String CountryofOrigin;

				public String getCountryofOrigin () {
					return this.CountryofOrigin;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length) {
				if(length < 1024 && commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length == 0) {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[1024];
				} else {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length);
			strReturn = new String(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI) {

        	try {

        		int length = 0;
		
					this.E = readString(dis);
					
					this.NumberOfLines = readString(dis);
					
					this.FileName = readString(dis);
					
					this.Customer_EDI_ID = readString(dis);
					
					this.Customer_Order_Number = readString(dis);
					
					this.Document_Type = readString(dis);
					
					this.Ship_To = readString(dis);
					
					this.Invoice_To = readString(dis);
					
					this.Order_By = readString(dis);
					
					this.Vendor = readString(dis);
					
					this.OrderDate = readString(dis);
					
					this.Customer_Requested_Date = readString(dis);
					
					this.Season = readString(dis);
					
					this.ReferenceCustomerOrder = readString(dis);
					
					this.Comment_1 = readString(dis);
					
					this.Comment_2 = readString(dis);
					
					this.Order_By_Name = readString(dis);
					
					this.Order_By_Address = readString(dis);
					
					this.Order_By_PostalCode = readString(dis);
					
					this.Ship_To_Name = readString(dis);
					
					this.Ship_To_Address = readString(dis);
					
					this.Ship_To_PostalCode = readString(dis);
					
					this.DepartmentNumber = readString(dis);
					
					this.CustomerVendorNumber = readString(dis);
					
					this.TransportInstructions = readString(dis);
					
					this.TermsofSale = readString(dis);
					
					this.EffectiveDate = readString(dis);
					
					this.ShipNotBeforeDate = readString(dis);
					
					this.ShipNoLaterDate = readString(dis);
					
					this.CancelAfterDate = readString(dis);
					
					this.Brand = readString(dis);
					
					this.OrderCurrency = readString(dis);
					
					this.L = readString(dis);
					
					this.LineNumber = readString(dis);
					
					this.EAN_Client = readString(dis);
					
					this.ItemDescription = readString(dis);
					
					this.OrderedQuantity = readString(dis);
					
					this.Discount_Code = readString(dis);
					
					this.NetPrice = readString(dis);
					
					this.Currency = readString(dis);
					
					this.Size = readString(dis);
					
					this.Color = readString(dis);
					
					this.SeasonCode = readString(dis);
					
					this.TicketType = readString(dis);
					
					this.PricatPriceCode = readString(dis);
					
					this.WarehouseCode = readString(dis);
					
					this.UnitOfMeasure = readString(dis);
					
					this.InformationPriceE = readString(dis);
					
					this.InformationPriceF = readString(dis);
					
					this.Picture = readString(dis);
					
					this.SeriesNumber = readString(dis);
					
					this.ModelNumber = readString(dis);
					
					this.BuyerSizeCode = readString(dis);
					
					this.EAN_Haddad = readString(dis);
					
					this.BuyerItemNumber = readString(dis);
					
					this.CountryofOrigin = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.E,dos);
					
					// String
				
						writeString(this.NumberOfLines,dos);
					
					// String
				
						writeString(this.FileName,dos);
					
					// String
				
						writeString(this.Customer_EDI_ID,dos);
					
					// String
				
						writeString(this.Customer_Order_Number,dos);
					
					// String
				
						writeString(this.Document_Type,dos);
					
					// String
				
						writeString(this.Ship_To,dos);
					
					// String
				
						writeString(this.Invoice_To,dos);
					
					// String
				
						writeString(this.Order_By,dos);
					
					// String
				
						writeString(this.Vendor,dos);
					
					// String
				
						writeString(this.OrderDate,dos);
					
					// String
				
						writeString(this.Customer_Requested_Date,dos);
					
					// String
				
						writeString(this.Season,dos);
					
					// String
				
						writeString(this.ReferenceCustomerOrder,dos);
					
					// String
				
						writeString(this.Comment_1,dos);
					
					// String
				
						writeString(this.Comment_2,dos);
					
					// String
				
						writeString(this.Order_By_Name,dos);
					
					// String
				
						writeString(this.Order_By_Address,dos);
					
					// String
				
						writeString(this.Order_By_PostalCode,dos);
					
					// String
				
						writeString(this.Ship_To_Name,dos);
					
					// String
				
						writeString(this.Ship_To_Address,dos);
					
					// String
				
						writeString(this.Ship_To_PostalCode,dos);
					
					// String
				
						writeString(this.DepartmentNumber,dos);
					
					// String
				
						writeString(this.CustomerVendorNumber,dos);
					
					// String
				
						writeString(this.TransportInstructions,dos);
					
					// String
				
						writeString(this.TermsofSale,dos);
					
					// String
				
						writeString(this.EffectiveDate,dos);
					
					// String
				
						writeString(this.ShipNotBeforeDate,dos);
					
					// String
				
						writeString(this.ShipNoLaterDate,dos);
					
					// String
				
						writeString(this.CancelAfterDate,dos);
					
					// String
				
						writeString(this.Brand,dos);
					
					// String
				
						writeString(this.OrderCurrency,dos);
					
					// String
				
						writeString(this.L,dos);
					
					// String
				
						writeString(this.LineNumber,dos);
					
					// String
				
						writeString(this.EAN_Client,dos);
					
					// String
				
						writeString(this.ItemDescription,dos);
					
					// String
				
						writeString(this.OrderedQuantity,dos);
					
					// String
				
						writeString(this.Discount_Code,dos);
					
					// String
				
						writeString(this.NetPrice,dos);
					
					// String
				
						writeString(this.Currency,dos);
					
					// String
				
						writeString(this.Size,dos);
					
					// String
				
						writeString(this.Color,dos);
					
					// String
				
						writeString(this.SeasonCode,dos);
					
					// String
				
						writeString(this.TicketType,dos);
					
					// String
				
						writeString(this.PricatPriceCode,dos);
					
					// String
				
						writeString(this.WarehouseCode,dos);
					
					// String
				
						writeString(this.UnitOfMeasure,dos);
					
					// String
				
						writeString(this.InformationPriceE,dos);
					
					// String
				
						writeString(this.InformationPriceF,dos);
					
					// String
				
						writeString(this.Picture,dos);
					
					// String
				
						writeString(this.SeriesNumber,dos);
					
					// String
				
						writeString(this.ModelNumber,dos);
					
					// String
				
						writeString(this.BuyerSizeCode,dos);
					
					// String
				
						writeString(this.EAN_Haddad,dos);
					
					// String
				
						writeString(this.BuyerItemNumber,dos);
					
					// String
				
						writeString(this.CountryofOrigin,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("E="+E);
		sb.append(",NumberOfLines="+NumberOfLines);
		sb.append(",FileName="+FileName);
		sb.append(",Customer_EDI_ID="+Customer_EDI_ID);
		sb.append(",Customer_Order_Number="+Customer_Order_Number);
		sb.append(",Document_Type="+Document_Type);
		sb.append(",Ship_To="+Ship_To);
		sb.append(",Invoice_To="+Invoice_To);
		sb.append(",Order_By="+Order_By);
		sb.append(",Vendor="+Vendor);
		sb.append(",OrderDate="+OrderDate);
		sb.append(",Customer_Requested_Date="+Customer_Requested_Date);
		sb.append(",Season="+Season);
		sb.append(",ReferenceCustomerOrder="+ReferenceCustomerOrder);
		sb.append(",Comment_1="+Comment_1);
		sb.append(",Comment_2="+Comment_2);
		sb.append(",Order_By_Name="+Order_By_Name);
		sb.append(",Order_By_Address="+Order_By_Address);
		sb.append(",Order_By_PostalCode="+Order_By_PostalCode);
		sb.append(",Ship_To_Name="+Ship_To_Name);
		sb.append(",Ship_To_Address="+Ship_To_Address);
		sb.append(",Ship_To_PostalCode="+Ship_To_PostalCode);
		sb.append(",DepartmentNumber="+DepartmentNumber);
		sb.append(",CustomerVendorNumber="+CustomerVendorNumber);
		sb.append(",TransportInstructions="+TransportInstructions);
		sb.append(",TermsofSale="+TermsofSale);
		sb.append(",EffectiveDate="+EffectiveDate);
		sb.append(",ShipNotBeforeDate="+ShipNotBeforeDate);
		sb.append(",ShipNoLaterDate="+ShipNoLaterDate);
		sb.append(",CancelAfterDate="+CancelAfterDate);
		sb.append(",Brand="+Brand);
		sb.append(",OrderCurrency="+OrderCurrency);
		sb.append(",L="+L);
		sb.append(",LineNumber="+LineNumber);
		sb.append(",EAN_Client="+EAN_Client);
		sb.append(",ItemDescription="+ItemDescription);
		sb.append(",OrderedQuantity="+OrderedQuantity);
		sb.append(",Discount_Code="+Discount_Code);
		sb.append(",NetPrice="+NetPrice);
		sb.append(",Currency="+Currency);
		sb.append(",Size="+Size);
		sb.append(",Color="+Color);
		sb.append(",SeasonCode="+SeasonCode);
		sb.append(",TicketType="+TicketType);
		sb.append(",PricatPriceCode="+PricatPriceCode);
		sb.append(",WarehouseCode="+WarehouseCode);
		sb.append(",UnitOfMeasure="+UnitOfMeasure);
		sb.append(",InformationPriceE="+InformationPriceE);
		sb.append(",InformationPriceF="+InformationPriceF);
		sb.append(",Picture="+Picture);
		sb.append(",SeriesNumber="+SeriesNumber);
		sb.append(",ModelNumber="+ModelNumber);
		sb.append(",BuyerSizeCode="+BuyerSizeCode);
		sb.append(",EAN_Haddad="+EAN_Haddad);
		sb.append(",BuyerItemNumber="+BuyerItemNumber);
		sb.append(",CountryofOrigin="+CountryofOrigin);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class outputStruct implements routines.system.IPersistableRow<outputStruct> {
    final static byte[] commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI = new byte[0];
    static byte[] commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[0];

	
			    public String E;

				public String getE () {
					return this.E;
				}
				
			    public String NumberOfLines;

				public String getNumberOfLines () {
					return this.NumberOfLines;
				}
				
			    public String FileName;

				public String getFileName () {
					return this.FileName;
				}
				
			    public String Customer_EDI_ID;

				public String getCustomer_EDI_ID () {
					return this.Customer_EDI_ID;
				}
				
			    public String Customer_Order_Number;

				public String getCustomer_Order_Number () {
					return this.Customer_Order_Number;
				}
				
			    public String Document_Type;

				public String getDocument_Type () {
					return this.Document_Type;
				}
				
			    public String Ship_To;

				public String getShip_To () {
					return this.Ship_To;
				}
				
			    public String Invoice_To;

				public String getInvoice_To () {
					return this.Invoice_To;
				}
				
			    public String Order_By;

				public String getOrder_By () {
					return this.Order_By;
				}
				
			    public String Vendor;

				public String getVendor () {
					return this.Vendor;
				}
				
			    public String OrderDate;

				public String getOrderDate () {
					return this.OrderDate;
				}
				
			    public String Customer_Requested_Date;

				public String getCustomer_Requested_Date () {
					return this.Customer_Requested_Date;
				}
				
			    public String Season;

				public String getSeason () {
					return this.Season;
				}
				
			    public String ReferenceCustomerOrder;

				public String getReferenceCustomerOrder () {
					return this.ReferenceCustomerOrder;
				}
				
			    public String Comment_1;

				public String getComment_1 () {
					return this.Comment_1;
				}
				
			    public String Comment_2;

				public String getComment_2 () {
					return this.Comment_2;
				}
				
			    public String Order_By_Name;

				public String getOrder_By_Name () {
					return this.Order_By_Name;
				}
				
			    public String Order_By_Address;

				public String getOrder_By_Address () {
					return this.Order_By_Address;
				}
				
			    public String Order_By_PostalCode;

				public String getOrder_By_PostalCode () {
					return this.Order_By_PostalCode;
				}
				
			    public String Ship_To_Name;

				public String getShip_To_Name () {
					return this.Ship_To_Name;
				}
				
			    public String Ship_To_Address;

				public String getShip_To_Address () {
					return this.Ship_To_Address;
				}
				
			    public String Ship_To_PostalCode;

				public String getShip_To_PostalCode () {
					return this.Ship_To_PostalCode;
				}
				
			    public String DepartmentNumber;

				public String getDepartmentNumber () {
					return this.DepartmentNumber;
				}
				
			    public String CustomerVendorNumber;

				public String getCustomerVendorNumber () {
					return this.CustomerVendorNumber;
				}
				
			    public String TransportInstructions;

				public String getTransportInstructions () {
					return this.TransportInstructions;
				}
				
			    public String TermsofSale;

				public String getTermsofSale () {
					return this.TermsofSale;
				}
				
			    public String EffectiveDate;

				public String getEffectiveDate () {
					return this.EffectiveDate;
				}
				
			    public String ShipNotBeforeDate;

				public String getShipNotBeforeDate () {
					return this.ShipNotBeforeDate;
				}
				
			    public String ShipNoLaterDate;

				public String getShipNoLaterDate () {
					return this.ShipNoLaterDate;
				}
				
			    public String CancelAfterDate;

				public String getCancelAfterDate () {
					return this.CancelAfterDate;
				}
				
			    public String Brand;

				public String getBrand () {
					return this.Brand;
				}
				
			    public String OrderCurrency;

				public String getOrderCurrency () {
					return this.OrderCurrency;
				}
				
			    public String L;

				public String getL () {
					return this.L;
				}
				
			    public String LineNumber;

				public String getLineNumber () {
					return this.LineNumber;
				}
				
			    public String EAN_Client;

				public String getEAN_Client () {
					return this.EAN_Client;
				}
				
			    public String ItemDescription;

				public String getItemDescription () {
					return this.ItemDescription;
				}
				
			    public String OrderedQuantity;

				public String getOrderedQuantity () {
					return this.OrderedQuantity;
				}
				
			    public String Discount_Code;

				public String getDiscount_Code () {
					return this.Discount_Code;
				}
				
			    public String NetPrice;

				public String getNetPrice () {
					return this.NetPrice;
				}
				
			    public String Currency;

				public String getCurrency () {
					return this.Currency;
				}
				
			    public String Size;

				public String getSize () {
					return this.Size;
				}
				
			    public String Color;

				public String getColor () {
					return this.Color;
				}
				
			    public String SeasonCode;

				public String getSeasonCode () {
					return this.SeasonCode;
				}
				
			    public String TicketType;

				public String getTicketType () {
					return this.TicketType;
				}
				
			    public String PricatPriceCode;

				public String getPricatPriceCode () {
					return this.PricatPriceCode;
				}
				
			    public String WarehouseCode;

				public String getWarehouseCode () {
					return this.WarehouseCode;
				}
				
			    public String UnitOfMeasure;

				public String getUnitOfMeasure () {
					return this.UnitOfMeasure;
				}
				
			    public String InformationPriceE;

				public String getInformationPriceE () {
					return this.InformationPriceE;
				}
				
			    public String InformationPriceF;

				public String getInformationPriceF () {
					return this.InformationPriceF;
				}
				
			    public String Picture;

				public String getPicture () {
					return this.Picture;
				}
				
			    public String SeriesNumber;

				public String getSeriesNumber () {
					return this.SeriesNumber;
				}
				
			    public String ModelNumber;

				public String getModelNumber () {
					return this.ModelNumber;
				}
				
			    public String BuyerSizeCode;

				public String getBuyerSizeCode () {
					return this.BuyerSizeCode;
				}
				
			    public String EAN_Haddad;

				public String getEAN_Haddad () {
					return this.EAN_Haddad;
				}
				
			    public String BuyerItemNumber;

				public String getBuyerItemNumber () {
					return this.BuyerItemNumber;
				}
				
			    public String CountryofOrigin;

				public String getCountryofOrigin () {
					return this.CountryofOrigin;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length) {
				if(length < 1024 && commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length == 0) {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[1024];
				} else {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length);
			strReturn = new String(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI) {

        	try {

        		int length = 0;
		
					this.E = readString(dis);
					
					this.NumberOfLines = readString(dis);
					
					this.FileName = readString(dis);
					
					this.Customer_EDI_ID = readString(dis);
					
					this.Customer_Order_Number = readString(dis);
					
					this.Document_Type = readString(dis);
					
					this.Ship_To = readString(dis);
					
					this.Invoice_To = readString(dis);
					
					this.Order_By = readString(dis);
					
					this.Vendor = readString(dis);
					
					this.OrderDate = readString(dis);
					
					this.Customer_Requested_Date = readString(dis);
					
					this.Season = readString(dis);
					
					this.ReferenceCustomerOrder = readString(dis);
					
					this.Comment_1 = readString(dis);
					
					this.Comment_2 = readString(dis);
					
					this.Order_By_Name = readString(dis);
					
					this.Order_By_Address = readString(dis);
					
					this.Order_By_PostalCode = readString(dis);
					
					this.Ship_To_Name = readString(dis);
					
					this.Ship_To_Address = readString(dis);
					
					this.Ship_To_PostalCode = readString(dis);
					
					this.DepartmentNumber = readString(dis);
					
					this.CustomerVendorNumber = readString(dis);
					
					this.TransportInstructions = readString(dis);
					
					this.TermsofSale = readString(dis);
					
					this.EffectiveDate = readString(dis);
					
					this.ShipNotBeforeDate = readString(dis);
					
					this.ShipNoLaterDate = readString(dis);
					
					this.CancelAfterDate = readString(dis);
					
					this.Brand = readString(dis);
					
					this.OrderCurrency = readString(dis);
					
					this.L = readString(dis);
					
					this.LineNumber = readString(dis);
					
					this.EAN_Client = readString(dis);
					
					this.ItemDescription = readString(dis);
					
					this.OrderedQuantity = readString(dis);
					
					this.Discount_Code = readString(dis);
					
					this.NetPrice = readString(dis);
					
					this.Currency = readString(dis);
					
					this.Size = readString(dis);
					
					this.Color = readString(dis);
					
					this.SeasonCode = readString(dis);
					
					this.TicketType = readString(dis);
					
					this.PricatPriceCode = readString(dis);
					
					this.WarehouseCode = readString(dis);
					
					this.UnitOfMeasure = readString(dis);
					
					this.InformationPriceE = readString(dis);
					
					this.InformationPriceF = readString(dis);
					
					this.Picture = readString(dis);
					
					this.SeriesNumber = readString(dis);
					
					this.ModelNumber = readString(dis);
					
					this.BuyerSizeCode = readString(dis);
					
					this.EAN_Haddad = readString(dis);
					
					this.BuyerItemNumber = readString(dis);
					
					this.CountryofOrigin = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.E,dos);
					
					// String
				
						writeString(this.NumberOfLines,dos);
					
					// String
				
						writeString(this.FileName,dos);
					
					// String
				
						writeString(this.Customer_EDI_ID,dos);
					
					// String
				
						writeString(this.Customer_Order_Number,dos);
					
					// String
				
						writeString(this.Document_Type,dos);
					
					// String
				
						writeString(this.Ship_To,dos);
					
					// String
				
						writeString(this.Invoice_To,dos);
					
					// String
				
						writeString(this.Order_By,dos);
					
					// String
				
						writeString(this.Vendor,dos);
					
					// String
				
						writeString(this.OrderDate,dos);
					
					// String
				
						writeString(this.Customer_Requested_Date,dos);
					
					// String
				
						writeString(this.Season,dos);
					
					// String
				
						writeString(this.ReferenceCustomerOrder,dos);
					
					// String
				
						writeString(this.Comment_1,dos);
					
					// String
				
						writeString(this.Comment_2,dos);
					
					// String
				
						writeString(this.Order_By_Name,dos);
					
					// String
				
						writeString(this.Order_By_Address,dos);
					
					// String
				
						writeString(this.Order_By_PostalCode,dos);
					
					// String
				
						writeString(this.Ship_To_Name,dos);
					
					// String
				
						writeString(this.Ship_To_Address,dos);
					
					// String
				
						writeString(this.Ship_To_PostalCode,dos);
					
					// String
				
						writeString(this.DepartmentNumber,dos);
					
					// String
				
						writeString(this.CustomerVendorNumber,dos);
					
					// String
				
						writeString(this.TransportInstructions,dos);
					
					// String
				
						writeString(this.TermsofSale,dos);
					
					// String
				
						writeString(this.EffectiveDate,dos);
					
					// String
				
						writeString(this.ShipNotBeforeDate,dos);
					
					// String
				
						writeString(this.ShipNoLaterDate,dos);
					
					// String
				
						writeString(this.CancelAfterDate,dos);
					
					// String
				
						writeString(this.Brand,dos);
					
					// String
				
						writeString(this.OrderCurrency,dos);
					
					// String
				
						writeString(this.L,dos);
					
					// String
				
						writeString(this.LineNumber,dos);
					
					// String
				
						writeString(this.EAN_Client,dos);
					
					// String
				
						writeString(this.ItemDescription,dos);
					
					// String
				
						writeString(this.OrderedQuantity,dos);
					
					// String
				
						writeString(this.Discount_Code,dos);
					
					// String
				
						writeString(this.NetPrice,dos);
					
					// String
				
						writeString(this.Currency,dos);
					
					// String
				
						writeString(this.Size,dos);
					
					// String
				
						writeString(this.Color,dos);
					
					// String
				
						writeString(this.SeasonCode,dos);
					
					// String
				
						writeString(this.TicketType,dos);
					
					// String
				
						writeString(this.PricatPriceCode,dos);
					
					// String
				
						writeString(this.WarehouseCode,dos);
					
					// String
				
						writeString(this.UnitOfMeasure,dos);
					
					// String
				
						writeString(this.InformationPriceE,dos);
					
					// String
				
						writeString(this.InformationPriceF,dos);
					
					// String
				
						writeString(this.Picture,dos);
					
					// String
				
						writeString(this.SeriesNumber,dos);
					
					// String
				
						writeString(this.ModelNumber,dos);
					
					// String
				
						writeString(this.BuyerSizeCode,dos);
					
					// String
				
						writeString(this.EAN_Haddad,dos);
					
					// String
				
						writeString(this.BuyerItemNumber,dos);
					
					// String
				
						writeString(this.CountryofOrigin,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("E="+E);
		sb.append(",NumberOfLines="+NumberOfLines);
		sb.append(",FileName="+FileName);
		sb.append(",Customer_EDI_ID="+Customer_EDI_ID);
		sb.append(",Customer_Order_Number="+Customer_Order_Number);
		sb.append(",Document_Type="+Document_Type);
		sb.append(",Ship_To="+Ship_To);
		sb.append(",Invoice_To="+Invoice_To);
		sb.append(",Order_By="+Order_By);
		sb.append(",Vendor="+Vendor);
		sb.append(",OrderDate="+OrderDate);
		sb.append(",Customer_Requested_Date="+Customer_Requested_Date);
		sb.append(",Season="+Season);
		sb.append(",ReferenceCustomerOrder="+ReferenceCustomerOrder);
		sb.append(",Comment_1="+Comment_1);
		sb.append(",Comment_2="+Comment_2);
		sb.append(",Order_By_Name="+Order_By_Name);
		sb.append(",Order_By_Address="+Order_By_Address);
		sb.append(",Order_By_PostalCode="+Order_By_PostalCode);
		sb.append(",Ship_To_Name="+Ship_To_Name);
		sb.append(",Ship_To_Address="+Ship_To_Address);
		sb.append(",Ship_To_PostalCode="+Ship_To_PostalCode);
		sb.append(",DepartmentNumber="+DepartmentNumber);
		sb.append(",CustomerVendorNumber="+CustomerVendorNumber);
		sb.append(",TransportInstructions="+TransportInstructions);
		sb.append(",TermsofSale="+TermsofSale);
		sb.append(",EffectiveDate="+EffectiveDate);
		sb.append(",ShipNotBeforeDate="+ShipNotBeforeDate);
		sb.append(",ShipNoLaterDate="+ShipNoLaterDate);
		sb.append(",CancelAfterDate="+CancelAfterDate);
		sb.append(",Brand="+Brand);
		sb.append(",OrderCurrency="+OrderCurrency);
		sb.append(",L="+L);
		sb.append(",LineNumber="+LineNumber);
		sb.append(",EAN_Client="+EAN_Client);
		sb.append(",ItemDescription="+ItemDescription);
		sb.append(",OrderedQuantity="+OrderedQuantity);
		sb.append(",Discount_Code="+Discount_Code);
		sb.append(",NetPrice="+NetPrice);
		sb.append(",Currency="+Currency);
		sb.append(",Size="+Size);
		sb.append(",Color="+Color);
		sb.append(",SeasonCode="+SeasonCode);
		sb.append(",TicketType="+TicketType);
		sb.append(",PricatPriceCode="+PricatPriceCode);
		sb.append(",WarehouseCode="+WarehouseCode);
		sb.append(",UnitOfMeasure="+UnitOfMeasure);
		sb.append(",InformationPriceE="+InformationPriceE);
		sb.append(",InformationPriceF="+InformationPriceF);
		sb.append(",Picture="+Picture);
		sb.append(",SeriesNumber="+SeriesNumber);
		sb.append(",ModelNumber="+ModelNumber);
		sb.append(",BuyerSizeCode="+BuyerSizeCode);
		sb.append(",EAN_Haddad="+EAN_Haddad);
		sb.append(",BuyerItemNumber="+BuyerItemNumber);
		sb.append(",CountryofOrigin="+CountryofOrigin);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(outputStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out6Struct implements routines.system.IPersistableRow<out6Struct> {
    final static byte[] commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI = new byte[0];
    static byte[] commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[0];

	
			    public String Filename;

				public String getFilename () {
					return this.Filename;
				}
				
			    public String PONumber;

				public String getPONumber () {
					return this.PONumber;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length) {
				if(length < 1024 && commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length == 0) {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[1024];
				} else {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length);
			strReturn = new String(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI) {

        	try {

        		int length = 0;
		
					this.Filename = readString(dis);
					
					this.PONumber = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Filename,dos);
					
					// String
				
						writeString(this.PONumber,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Filename="+Filename);
		sb.append(",PONumber="+PONumber);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class output_PONumberStruct implements routines.system.IPersistableRow<output_PONumberStruct> {
    final static byte[] commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI = new byte[0];
    static byte[] commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[0];

	
			    public String OrderPONumber;

				public String getOrderPONumber () {
					return this.OrderPONumber;
				}
				
			    public String newColumn;

				public String getNewColumn () {
					return this.newColumn;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length) {
				if(length < 1024 && commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length == 0) {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[1024];
				} else {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length);
			strReturn = new String(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI) {

        	try {

        		int length = 0;
		
					this.OrderPONumber = readString(dis);
					
					this.newColumn = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.OrderPONumber,dos);
					
					// String
				
						writeString(this.newColumn,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("OrderPONumber="+OrderPONumber);
		sb.append(",newColumn="+newColumn);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(output_PONumberStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI = new byte[0];
    static byte[] commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[0];

	
			    public String E;

				public String getE () {
					return this.E;
				}
				
			    public String NumberOfLines;

				public String getNumberOfLines () {
					return this.NumberOfLines;
				}
				
			    public String FileName;

				public String getFileName () {
					return this.FileName;
				}
				
			    public String Customer_EDI_ID;

				public String getCustomer_EDI_ID () {
					return this.Customer_EDI_ID;
				}
				
			    public String Customer_Order_Number;

				public String getCustomer_Order_Number () {
					return this.Customer_Order_Number;
				}
				
			    public String Document_Type;

				public String getDocument_Type () {
					return this.Document_Type;
				}
				
			    public String Ship_To;

				public String getShip_To () {
					return this.Ship_To;
				}
				
			    public String Invoice_To;

				public String getInvoice_To () {
					return this.Invoice_To;
				}
				
			    public String Order_By;

				public String getOrder_By () {
					return this.Order_By;
				}
				
			    public String Vendor;

				public String getVendor () {
					return this.Vendor;
				}
				
			    public String OrderDate;

				public String getOrderDate () {
					return this.OrderDate;
				}
				
			    public String Delivery_Date;

				public String getDelivery_Date () {
					return this.Delivery_Date;
				}
				
			    public String Season;

				public String getSeason () {
					return this.Season;
				}
				
			    public String ReferenceCustomerOrder;

				public String getReferenceCustomerOrder () {
					return this.ReferenceCustomerOrder;
				}
				
			    public String Comment_1;

				public String getComment_1 () {
					return this.Comment_1;
				}
				
			    public String Comment_2;

				public String getComment_2 () {
					return this.Comment_2;
				}
				
			    public String Order_By_Name;

				public String getOrder_By_Name () {
					return this.Order_By_Name;
				}
				
			    public String Order_By_Address;

				public String getOrder_By_Address () {
					return this.Order_By_Address;
				}
				
			    public String Order_By_PostalCode;

				public String getOrder_By_PostalCode () {
					return this.Order_By_PostalCode;
				}
				
			    public String Ship_To_Name;

				public String getShip_To_Name () {
					return this.Ship_To_Name;
				}
				
			    public String Ship_To_Address;

				public String getShip_To_Address () {
					return this.Ship_To_Address;
				}
				
			    public String Ship_To_PostalCode;

				public String getShip_To_PostalCode () {
					return this.Ship_To_PostalCode;
				}
				
			    public String DepartmentNumber;

				public String getDepartmentNumber () {
					return this.DepartmentNumber;
				}
				
			    public String CustomerVendorNumber;

				public String getCustomerVendorNumber () {
					return this.CustomerVendorNumber;
				}
				
			    public String TransportInstructions;

				public String getTransportInstructions () {
					return this.TransportInstructions;
				}
				
			    public String TermsofSale;

				public String getTermsofSale () {
					return this.TermsofSale;
				}
				
			    public String EffectiveDate;

				public String getEffectiveDate () {
					return this.EffectiveDate;
				}
				
			    public String ShipNotBeforeDate;

				public String getShipNotBeforeDate () {
					return this.ShipNotBeforeDate;
				}
				
			    public String ShipNoLaterDate;

				public String getShipNoLaterDate () {
					return this.ShipNoLaterDate;
				}
				
			    public String CancelAfterDate;

				public String getCancelAfterDate () {
					return this.CancelAfterDate;
				}
				
			    public String Brand;

				public String getBrand () {
					return this.Brand;
				}
				
			    public String OrderCurrency;

				public String getOrderCurrency () {
					return this.OrderCurrency;
				}
				
			    public String L;

				public String getL () {
					return this.L;
				}
				
			    public String LineNumber;

				public String getLineNumber () {
					return this.LineNumber;
				}
				
			    public String EAN;

				public String getEAN () {
					return this.EAN;
				}
				
			    public String ItemDescription;

				public String getItemDescription () {
					return this.ItemDescription;
				}
				
			    public String OrderedQuantity;

				public String getOrderedQuantity () {
					return this.OrderedQuantity;
				}
				
			    public String Discount_Code;

				public String getDiscount_Code () {
					return this.Discount_Code;
				}
				
			    public String NetPrice;

				public String getNetPrice () {
					return this.NetPrice;
				}
				
			    public String Currency;

				public String getCurrency () {
					return this.Currency;
				}
				
			    public String Size;

				public String getSize () {
					return this.Size;
				}
				
			    public String Color;

				public String getColor () {
					return this.Color;
				}
				
			    public String SeasonCode;

				public String getSeasonCode () {
					return this.SeasonCode;
				}
				
			    public String TicketType;

				public String getTicketType () {
					return this.TicketType;
				}
				
			    public String PricatPriceCode;

				public String getPricatPriceCode () {
					return this.PricatPriceCode;
				}
				
			    public String WarehouseCode;

				public String getWarehouseCode () {
					return this.WarehouseCode;
				}
				
			    public String UnitOfMeasure;

				public String getUnitOfMeasure () {
					return this.UnitOfMeasure;
				}
				
			    public String InformationPriceE;

				public String getInformationPriceE () {
					return this.InformationPriceE;
				}
				
			    public String InformationPriceF;

				public String getInformationPriceF () {
					return this.InformationPriceF;
				}
				
			    public String Picture;

				public String getPicture () {
					return this.Picture;
				}
				
			    public String SeriesNumber;

				public String getSeriesNumber () {
					return this.SeriesNumber;
				}
				
			    public String ModelNumber;

				public String getModelNumber () {
					return this.ModelNumber;
				}
				
			    public String BuyerSizeCode;

				public String getBuyerSizeCode () {
					return this.BuyerSizeCode;
				}
				
			    public String VendorStyleNumber;

				public String getVendorStyleNumber () {
					return this.VendorStyleNumber;
				}
				
			    public String BuyerItemNumber;

				public String getBuyerItemNumber () {
					return this.BuyerItemNumber;
				}
				
			    public String CountryofOrigin;

				public String getCountryofOrigin () {
					return this.CountryofOrigin;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length) {
				if(length < 1024 && commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length == 0) {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[1024];
				} else {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length);
			strReturn = new String(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI) {

        	try {

        		int length = 0;
		
					this.E = readString(dis);
					
					this.NumberOfLines = readString(dis);
					
					this.FileName = readString(dis);
					
					this.Customer_EDI_ID = readString(dis);
					
					this.Customer_Order_Number = readString(dis);
					
					this.Document_Type = readString(dis);
					
					this.Ship_To = readString(dis);
					
					this.Invoice_To = readString(dis);
					
					this.Order_By = readString(dis);
					
					this.Vendor = readString(dis);
					
					this.OrderDate = readString(dis);
					
					this.Delivery_Date = readString(dis);
					
					this.Season = readString(dis);
					
					this.ReferenceCustomerOrder = readString(dis);
					
					this.Comment_1 = readString(dis);
					
					this.Comment_2 = readString(dis);
					
					this.Order_By_Name = readString(dis);
					
					this.Order_By_Address = readString(dis);
					
					this.Order_By_PostalCode = readString(dis);
					
					this.Ship_To_Name = readString(dis);
					
					this.Ship_To_Address = readString(dis);
					
					this.Ship_To_PostalCode = readString(dis);
					
					this.DepartmentNumber = readString(dis);
					
					this.CustomerVendorNumber = readString(dis);
					
					this.TransportInstructions = readString(dis);
					
					this.TermsofSale = readString(dis);
					
					this.EffectiveDate = readString(dis);
					
					this.ShipNotBeforeDate = readString(dis);
					
					this.ShipNoLaterDate = readString(dis);
					
					this.CancelAfterDate = readString(dis);
					
					this.Brand = readString(dis);
					
					this.OrderCurrency = readString(dis);
					
					this.L = readString(dis);
					
					this.LineNumber = readString(dis);
					
					this.EAN = readString(dis);
					
					this.ItemDescription = readString(dis);
					
					this.OrderedQuantity = readString(dis);
					
					this.Discount_Code = readString(dis);
					
					this.NetPrice = readString(dis);
					
					this.Currency = readString(dis);
					
					this.Size = readString(dis);
					
					this.Color = readString(dis);
					
					this.SeasonCode = readString(dis);
					
					this.TicketType = readString(dis);
					
					this.PricatPriceCode = readString(dis);
					
					this.WarehouseCode = readString(dis);
					
					this.UnitOfMeasure = readString(dis);
					
					this.InformationPriceE = readString(dis);
					
					this.InformationPriceF = readString(dis);
					
					this.Picture = readString(dis);
					
					this.SeriesNumber = readString(dis);
					
					this.ModelNumber = readString(dis);
					
					this.BuyerSizeCode = readString(dis);
					
					this.VendorStyleNumber = readString(dis);
					
					this.BuyerItemNumber = readString(dis);
					
					this.CountryofOrigin = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.E,dos);
					
					// String
				
						writeString(this.NumberOfLines,dos);
					
					// String
				
						writeString(this.FileName,dos);
					
					// String
				
						writeString(this.Customer_EDI_ID,dos);
					
					// String
				
						writeString(this.Customer_Order_Number,dos);
					
					// String
				
						writeString(this.Document_Type,dos);
					
					// String
				
						writeString(this.Ship_To,dos);
					
					// String
				
						writeString(this.Invoice_To,dos);
					
					// String
				
						writeString(this.Order_By,dos);
					
					// String
				
						writeString(this.Vendor,dos);
					
					// String
				
						writeString(this.OrderDate,dos);
					
					// String
				
						writeString(this.Delivery_Date,dos);
					
					// String
				
						writeString(this.Season,dos);
					
					// String
				
						writeString(this.ReferenceCustomerOrder,dos);
					
					// String
				
						writeString(this.Comment_1,dos);
					
					// String
				
						writeString(this.Comment_2,dos);
					
					// String
				
						writeString(this.Order_By_Name,dos);
					
					// String
				
						writeString(this.Order_By_Address,dos);
					
					// String
				
						writeString(this.Order_By_PostalCode,dos);
					
					// String
				
						writeString(this.Ship_To_Name,dos);
					
					// String
				
						writeString(this.Ship_To_Address,dos);
					
					// String
				
						writeString(this.Ship_To_PostalCode,dos);
					
					// String
				
						writeString(this.DepartmentNumber,dos);
					
					// String
				
						writeString(this.CustomerVendorNumber,dos);
					
					// String
				
						writeString(this.TransportInstructions,dos);
					
					// String
				
						writeString(this.TermsofSale,dos);
					
					// String
				
						writeString(this.EffectiveDate,dos);
					
					// String
				
						writeString(this.ShipNotBeforeDate,dos);
					
					// String
				
						writeString(this.ShipNoLaterDate,dos);
					
					// String
				
						writeString(this.CancelAfterDate,dos);
					
					// String
				
						writeString(this.Brand,dos);
					
					// String
				
						writeString(this.OrderCurrency,dos);
					
					// String
				
						writeString(this.L,dos);
					
					// String
				
						writeString(this.LineNumber,dos);
					
					// String
				
						writeString(this.EAN,dos);
					
					// String
				
						writeString(this.ItemDescription,dos);
					
					// String
				
						writeString(this.OrderedQuantity,dos);
					
					// String
				
						writeString(this.Discount_Code,dos);
					
					// String
				
						writeString(this.NetPrice,dos);
					
					// String
				
						writeString(this.Currency,dos);
					
					// String
				
						writeString(this.Size,dos);
					
					// String
				
						writeString(this.Color,dos);
					
					// String
				
						writeString(this.SeasonCode,dos);
					
					// String
				
						writeString(this.TicketType,dos);
					
					// String
				
						writeString(this.PricatPriceCode,dos);
					
					// String
				
						writeString(this.WarehouseCode,dos);
					
					// String
				
						writeString(this.UnitOfMeasure,dos);
					
					// String
				
						writeString(this.InformationPriceE,dos);
					
					// String
				
						writeString(this.InformationPriceF,dos);
					
					// String
				
						writeString(this.Picture,dos);
					
					// String
				
						writeString(this.SeriesNumber,dos);
					
					// String
				
						writeString(this.ModelNumber,dos);
					
					// String
				
						writeString(this.BuyerSizeCode,dos);
					
					// String
				
						writeString(this.VendorStyleNumber,dos);
					
					// String
				
						writeString(this.BuyerItemNumber,dos);
					
					// String
				
						writeString(this.CountryofOrigin,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("E="+E);
		sb.append(",NumberOfLines="+NumberOfLines);
		sb.append(",FileName="+FileName);
		sb.append(",Customer_EDI_ID="+Customer_EDI_ID);
		sb.append(",Customer_Order_Number="+Customer_Order_Number);
		sb.append(",Document_Type="+Document_Type);
		sb.append(",Ship_To="+Ship_To);
		sb.append(",Invoice_To="+Invoice_To);
		sb.append(",Order_By="+Order_By);
		sb.append(",Vendor="+Vendor);
		sb.append(",OrderDate="+OrderDate);
		sb.append(",Delivery_Date="+Delivery_Date);
		sb.append(",Season="+Season);
		sb.append(",ReferenceCustomerOrder="+ReferenceCustomerOrder);
		sb.append(",Comment_1="+Comment_1);
		sb.append(",Comment_2="+Comment_2);
		sb.append(",Order_By_Name="+Order_By_Name);
		sb.append(",Order_By_Address="+Order_By_Address);
		sb.append(",Order_By_PostalCode="+Order_By_PostalCode);
		sb.append(",Ship_To_Name="+Ship_To_Name);
		sb.append(",Ship_To_Address="+Ship_To_Address);
		sb.append(",Ship_To_PostalCode="+Ship_To_PostalCode);
		sb.append(",DepartmentNumber="+DepartmentNumber);
		sb.append(",CustomerVendorNumber="+CustomerVendorNumber);
		sb.append(",TransportInstructions="+TransportInstructions);
		sb.append(",TermsofSale="+TermsofSale);
		sb.append(",EffectiveDate="+EffectiveDate);
		sb.append(",ShipNotBeforeDate="+ShipNotBeforeDate);
		sb.append(",ShipNoLaterDate="+ShipNoLaterDate);
		sb.append(",CancelAfterDate="+CancelAfterDate);
		sb.append(",Brand="+Brand);
		sb.append(",OrderCurrency="+OrderCurrency);
		sb.append(",L="+L);
		sb.append(",LineNumber="+LineNumber);
		sb.append(",EAN="+EAN);
		sb.append(",ItemDescription="+ItemDescription);
		sb.append(",OrderedQuantity="+OrderedQuantity);
		sb.append(",Discount_Code="+Discount_Code);
		sb.append(",NetPrice="+NetPrice);
		sb.append(",Currency="+Currency);
		sb.append(",Size="+Size);
		sb.append(",Color="+Color);
		sb.append(",SeasonCode="+SeasonCode);
		sb.append(",TicketType="+TicketType);
		sb.append(",PricatPriceCode="+PricatPriceCode);
		sb.append(",WarehouseCode="+WarehouseCode);
		sb.append(",UnitOfMeasure="+UnitOfMeasure);
		sb.append(",InformationPriceE="+InformationPriceE);
		sb.append(",InformationPriceF="+InformationPriceF);
		sb.append(",Picture="+Picture);
		sb.append(",SeriesNumber="+SeriesNumber);
		sb.append(",ModelNumber="+ModelNumber);
		sb.append(",BuyerSizeCode="+BuyerSizeCode);
		sb.append(",VendorStyleNumber="+VendorStyleNumber);
		sb.append(",BuyerItemNumber="+BuyerItemNumber);
		sb.append(",CountryofOrigin="+CountryofOrigin);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tFileList_1Struct implements routines.system.IPersistableRow<after_tFileList_1Struct> {
    final static byte[] commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI = new byte[0];
    static byte[] commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[0];

	



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI) {

        	try {

        		int length = 0;
		

		

        }

		
			finally {}
		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
        }

			finally {}
		

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tFileList_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileList_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileList_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tFileInputDelimited_4Process(globalMap);

		row5Struct row5 = new row5Struct();
outputStruct output = new outputStruct();
outputStruct row1 = output;
out6Struct out6 = new out6Struct();
out11Struct out11 = new out11Struct();
row28Struct row28 = new row28Struct();
output_PONumberStruct output_PONumber = new output_PONumberStruct();



	
	/**
	 * [tFileList_1 begin ] start
	 */

				
			int NB_ITERATE_tFileInputFullRow_1 = 0; //for statistics
			

	
		
		ok_Hash.put("tFileList_1", false);
		start_Hash.put("tFileList_1", System.currentTimeMillis());
		
	
	currentComponent="tFileList_1";

	
		int tos_count_tFileList_1 = 0;
		
	
 
     
    
  String directory_tFileList_1 = "C:/Haddad_Interface_SF_JDE/Interface Salesforce/OrderEDI/temp";
  final java.util.List<String> maskList_tFileList_1 = new java.util.ArrayList<String>();
  final java.util.List<java.util.regex.Pattern> patternList_tFileList_1 = new java.util.ArrayList<java.util.regex.Pattern>(); 
    maskList_tFileList_1.add("tempOutput_*");  
  for (final String filemask_tFileList_1 : maskList_tFileList_1) {
	String filemask_compile_tFileList_1 = filemask_tFileList_1;
	
		filemask_compile_tFileList_1 = org.apache.oro.text.GlobCompiler.globToPerl5(filemask_tFileList_1.toCharArray(), org.apache.oro.text.GlobCompiler.DEFAULT_MASK);
	
		java.util.regex.Pattern fileNamePattern_tFileList_1 = java.util.regex.Pattern.compile(filemask_compile_tFileList_1);
	patternList_tFileList_1.add(fileNamePattern_tFileList_1);
  }
  int NB_FILEtFileList_1 = 0;

  final boolean case_sensitive_tFileList_1 = true;
    final java.util.List<java.io.File> list_tFileList_1 = new java.util.ArrayList<java.io.File>();
    final java.util.Set<String> filePath_tFileList_1 = new java.util.HashSet<String>();
	java.io.File file_tFileList_1 = new java.io.File(directory_tFileList_1);
     
		file_tFileList_1.listFiles(new java.io.FilenameFilter() {
			public boolean accept(java.io.File dir, String name) {
				java.io.File file = new java.io.File(dir, name);
                if (!file.isDirectory()) {
                	
    	String fileName_tFileList_1 = file.getName();
		for (final java.util.regex.Pattern fileNamePattern_tFileList_1 : patternList_tFileList_1) {
          	if (fileNamePattern_tFileList_1.matcher(fileName_tFileList_1).matches()){
					if(!filePath_tFileList_1.contains(file.getAbsolutePath())) {
			          list_tFileList_1.add(file);
			          filePath_tFileList_1.add(file.getAbsolutePath());
			        }
			}
		}
                }
              return true;
            }
          }
      ); 
      java.util.Collections.sort(list_tFileList_1);
    
    for (int i_tFileList_1 = 0; i_tFileList_1 < list_tFileList_1.size(); i_tFileList_1++){
      java.io.File files_tFileList_1 = list_tFileList_1.get(i_tFileList_1);
      String fileName_tFileList_1 = files_tFileList_1.getName();
      
      String currentFileName_tFileList_1 = files_tFileList_1.getName(); 
      String currentFilePath_tFileList_1 = files_tFileList_1.getAbsolutePath();
      String currentFileDirectory_tFileList_1 = files_tFileList_1.getParent();
      String currentFileExtension_tFileList_1 = null;
      
      if (files_tFileList_1.getName().contains(".") && files_tFileList_1.isFile()){
        currentFileExtension_tFileList_1 = files_tFileList_1.getName().substring(files_tFileList_1.getName().lastIndexOf(".") + 1);
      } else{
        currentFileExtension_tFileList_1 = "";
      }
      
      NB_FILEtFileList_1 ++;
      globalMap.put("tFileList_1_CURRENT_FILE", currentFileName_tFileList_1);
      globalMap.put("tFileList_1_CURRENT_FILEPATH", currentFilePath_tFileList_1);
      globalMap.put("tFileList_1_CURRENT_FILEDIRECTORY", currentFileDirectory_tFileList_1);
      globalMap.put("tFileList_1_CURRENT_FILEEXTENSION", currentFileExtension_tFileList_1);
      globalMap.put("tFileList_1_NB_FILE", NB_FILEtFileList_1);
      
 



/**
 * [tFileList_1 begin ] stop
 */
	
	/**
	 * [tFileList_1 main ] start
	 */

	

	
	
	currentComponent="tFileList_1";

	

 


	tos_count_tFileList_1++;

/**
 * [tFileList_1 main ] stop
 */
	
	/**
	 * [tFileList_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileList_1";

	

 



/**
 * [tFileList_1 process_data_begin ] stop
 */
	NB_ITERATE_tFileInputFullRow_1++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("row3", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("outputE", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("outApi", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row5", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("out6", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row8", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("output_PONumber", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("copyOfoutApi", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row22", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row23", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk2", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row21", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row4", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("out4", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("copyOfoutputE", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("output", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("out11", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row7", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row28", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row2", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("out7", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate2", 1, "exec" + NB_ITERATE_tFileInputFullRow_1);
					//Thread.sleep(1000);
				}				
			




	
	/**
	 * [tWriteJSONField_2_Out begin ] start
	 */

	

	
		
		ok_Hash.put("tWriteJSONField_2_Out", false);
		start_Hash.put("tWriteJSONField_2_Out", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tWriteJSONField_2";
	
	currentComponent="tWriteJSONField_2_Out";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tWriteJSONField_2_Out = 0;
		
//tWriteXMLFieldOut_begin
				int nb_line_tWriteJSONField_2_Out = 0;
				boolean needRoot_tWriteJSONField_2_Out  = true;
				
				String  strCompCache_tWriteJSONField_2_Out= null;		
				
						        java.util.Queue<row2Struct> listGroupby_tWriteJSONField_2_Out = new java.util.concurrent.ConcurrentLinkedQueue<row2Struct>();
							
	
					class ThreadXMLField_tWriteJSONField_2_Out extends Thread {
						
									    java.util.Queue<row2Struct> queue;
									
						java.util.List<java.util.Map<String,String>> flows;
						java.lang.Exception lastException;
						String currentComponent;
						
						ThreadXMLField_tWriteJSONField_2_Out(java.util.Queue q) {
							this.queue = q;
							globalMap.put("queue_tWriteJSONField_2_In", queue);
							lastException = null;
						}
						
						ThreadXMLField_tWriteJSONField_2_Out(java.util.Queue q, java.util.List<java.util.Map<String,String>> l) {
							this.queue = q;
							this.flows = l;
							lastException = null;
							globalMap.put("queue_tWriteJSONField_2_In", queue);
							globalMap.put("flows_tWriteJSONField_2_In", flows);
						}
						
						public java.lang.Exception getLastException() {
							return this.lastException;
						}
						public String getCurrentComponent() {
							return this.currentComponent;
						}
	
						@Override
						public void run() {
							try {
								tWriteJSONField_2_InProcess(globalMap);
							} catch (TalendException te) {
								this.lastException = te.getException();
								this.currentComponent = te.getCurrentComponent();
							}
						}
					}
					
						ThreadXMLField_tWriteJSONField_2_Out txf_tWriteJSONField_2_Out = new ThreadXMLField_tWriteJSONField_2_Out(listGroupby_tWriteJSONField_2_Out);
					
					txf_tWriteJSONField_2_Out.start();
				

java.util.List<java.util.List<String>> groupbyList_tWriteJSONField_2_Out = new java.util.ArrayList<java.util.List<String>>();
java.util.Map<String,String> valueMap_tWriteJSONField_2_Out = new java.util.HashMap<String,String>();
java.util.Map<String,String> arraysValueMap_tWriteJSONField_2_Out = new java.util.HashMap<String,String>();

class NestXMLTool_tWriteJSONField_2_Out{
	public void parseAndAdd(org.dom4j.Element nestRoot, String value){
		try {
            org.dom4j.Document doc4Str = org.dom4j.DocumentHelper.parseText("<root>"+ value + "</root>");
    		nestRoot.setContent(doc4Str.getRootElement().content());
    	} catch (java.lang.Exception e) {
    		e.printStackTrace();
    		nestRoot.setText(value);
        }
	}
	
	public void setText(org.dom4j.Element element, String value){
		if (value.startsWith("<![CDATA[") && value.endsWith("]]>")) {
			String text = value.substring(9, value.length()-3);
			element.addCDATA(text);
		}else{
			element.setText(value);
		}
	}
	
	public void replaceDefaultNameSpace(org.dom4j.Element nestRoot){
		if (nestRoot!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) nestRoot.elements()) {
        		if (("").equals(tmp.getQName().getNamespace().getURI()) && ("").equals(tmp.getQName().getNamespace().getPrefix())){
        			tmp.setQName(org.dom4j.DocumentHelper.createQName(tmp.getName(), nestRoot.getQName().getNamespace()));
	        	}
    	    	replaceDefaultNameSpace(tmp);
       		}
       	}
	}
	
	public void removeEmptyElement(org.dom4j.Element root){
		if (root!=null) {
			for (org.dom4j.Element tmp: (java.util.List<org.dom4j.Element>) root.elements()) {
				removeEmptyElement(tmp);
			}
			if (root.content().size() == 0 
    			&& root.attributes().size() == 0 
    			&& root.declaredNamespaces().size() == 0) {
    			if(root.getParent()!=null){
                	root.getParent().remove(root);
                }
            }
		}
	}
	
	public String objectToString(Object value){
		if(value.getClass().isArray()){
			StringBuilder sb = new StringBuilder();

			int length = java.lang.reflect.Array.getLength(value);
			for (int i = 0; i < length; i++) {
				Object obj = java.lang.reflect.Array.get(value, i);
				sb.append("<element>");
				sb.append(obj);
				sb.append("</element>");
			}
			return sb.toString();
		}else{
			return value.toString();
		}
	}
}
NestXMLTool_tWriteJSONField_2_Out nestXMLTool_tWriteJSONField_2_Out = new NestXMLTool_tWriteJSONField_2_Out();

outputStruct  rowStructOutput_tWriteJSONField_2_Out = new outputStruct();
// sort group root element for judgement of group
java.util.List<org.dom4j.Element> groupElementList_tWriteJSONField_2_Out = new java.util.ArrayList<org.dom4j.Element>();
org.dom4j.Element root4Group_tWriteJSONField_2_Out = null;
org.dom4j.Document doc_tWriteJSONField_2_Out  = org.dom4j.DocumentHelper.createDocument();
org.dom4j.io.OutputFormat format_tWriteJSONField_2_Out = org.dom4j.io.OutputFormat.createCompactFormat();
format_tWriteJSONField_2_Out.setNewLineAfterDeclaration(false);
format_tWriteJSONField_2_Out.setTrimText(false);
format_tWriteJSONField_2_Out.setEncoding("ISO-8859-15");
int[] orders_tWriteJSONField_2_Out = new int[2];

 



/**
 * [tWriteJSONField_2_Out begin ] stop
 */



	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"output");
					}
				
		int tos_count_tFileOutputDelimited_1 = 0;
		

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File("C:/Haddad_Interface_SF_JDE/Interface Salesforce/OrderEDI/temp/work/tempWorkFile_"+((String)globalMap.get("tFileList_1_CURRENT_FILE"))+".csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
        if(filetFileOutputDelimited_1.exists()){
            isFileGenerated_tFileOutputDelimited_1 = false;
        }
            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 = 0;
            int currentRow_tFileOutputDelimited_1 = 0;

            final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_1 = null;

                        outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, true),"ISO-8859-15"));


        resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */






	
	/**
	 * [tFileOutputDelimited_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_3", false);
		start_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row28");
					}
				
		int tos_count_tFileOutputDelimited_3 = 0;
		

String fileName_tFileOutputDelimited_3 = "";
    fileName_tFileOutputDelimited_3 = (new java.io.File("C:/Haddad_Interface_SF_JDE/Interface Salesforce/OrderEDI/temp/tempListOfEDIFiles.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_3 = null;
    String extension_tFileOutputDelimited_3 = null;
    String directory_tFileOutputDelimited_3 = null;
    if((fileName_tFileOutputDelimited_3.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_3.lastIndexOf(".") < fileName_tFileOutputDelimited_3.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
            extension_tFileOutputDelimited_3 = "";
        } else {
            fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0, fileName_tFileOutputDelimited_3.lastIndexOf("."));
            extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(fileName_tFileOutputDelimited_3.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0, fileName_tFileOutputDelimited_3.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_3.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0, fileName_tFileOutputDelimited_3.lastIndexOf("."));
            extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(fileName_tFileOutputDelimited_3.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
            extension_tFileOutputDelimited_3 = "";
        }
        directory_tFileOutputDelimited_3 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_3 = true;
    java.io.File filetFileOutputDelimited_3 = new java.io.File(fileName_tFileOutputDelimited_3);
    globalMap.put("tFileOutputDelimited_3_FILE_NAME",fileName_tFileOutputDelimited_3);
        if(filetFileOutputDelimited_3.exists()){
            isFileGenerated_tFileOutputDelimited_3 = false;
        }
            int nb_line_tFileOutputDelimited_3 = 0;
            int splitedFileNo_tFileOutputDelimited_3 = 0;
            int currentRow_tFileOutputDelimited_3 = 0;

            final String OUT_DELIM_tFileOutputDelimited_3 = /** Start field tFileOutputDelimited_3:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_3:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_3 = /** Start field tFileOutputDelimited_3:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_3:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_3 != null && directory_tFileOutputDelimited_3.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_3 = new java.io.File(directory_tFileOutputDelimited_3);
                        if(!dir_tFileOutputDelimited_3.exists()) {
                            dir_tFileOutputDelimited_3.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_3 = null;

                        outtFileOutputDelimited_3 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_3, true),"ISO-8859-15"));
                                    if(filetFileOutputDelimited_3.length()==0){
                                        outtFileOutputDelimited_3.write("Filename");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("PONumber");
                                        outtFileOutputDelimited_3.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.flush();
                                    }


        resourceMap.put("out_tFileOutputDelimited_3", outtFileOutputDelimited_3);
resourceMap.put("nb_line_tFileOutputDelimited_3", nb_line_tFileOutputDelimited_3);

 



/**
 * [tFileOutputDelimited_3 begin ] stop
 */



	
	/**
	 * [tUniqRow_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_5", false);
		start_Hash.put("tUniqRow_5", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out11");
					}
				
		int tos_count_tUniqRow_5 = 0;
		

	
		class KeyStruct_tUniqRow_5 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String Filename;
					String PONumber;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.Filename == null) ? 0 : this.Filename.hashCode());
								
								result = prime * result + ((this.PONumber == null) ? 0 : this.PONumber.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_5 other = (KeyStruct_tUniqRow_5) obj;
				
									if (this.Filename == null) {
										if (other.Filename != null) 
											return false;
								
									} else if (!this.Filename.equals(other.Filename))
								 
										return false;
								
									if (this.PONumber == null) {
										if (other.PONumber != null) 
											return false;
								
									} else if (!this.PONumber.equals(other.PONumber))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_5 = 0;
int nb_duplicates_tUniqRow_5 = 0;
KeyStruct_tUniqRow_5 finder_tUniqRow_5 = new KeyStruct_tUniqRow_5();
java.util.Set<KeyStruct_tUniqRow_5> keystUniqRow_5 = new java.util.HashSet<KeyStruct_tUniqRow_5>(); 

 



/**
 * [tUniqRow_5 begin ] stop
 */



	
	/**
	 * [tMap_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_11", false);
		start_Hash.put("tMap_11", System.currentTimeMillis());
		
	
	currentComponent="tMap_11";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out6");
					}
				
		int tos_count_tMap_11 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_11__Struct  {
}
Var__tMap_11__Struct Var__tMap_11 = new Var__tMap_11__Struct();
// ###############################

// ###############################
// # Outputs initialization
out11Struct out11_tmp = new out11Struct();
// ###############################

        
        



        









 



/**
 * [tMap_11 begin ] stop
 */




	
	/**
	 * [tJavaRow_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_4", false);
		start_Hash.put("tJavaRow_4", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"output_PONumber");
					}
				
		int tos_count_tJavaRow_4 = 0;
		

int nb_line_tJavaRow_4 = 0;

 



/**
 * [tJavaRow_4 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row27Struct> tHash_Lookup_row27 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row27Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row27Struct>) 
					globalMap.get( "tHash_Lookup_row27" ))
					;					
					
	

row27Struct row27HashKey = new row27Struct();
row27Struct row27Default = new row27Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
	int var1;
	int var2;
	int var3;
	int var4;
	int var5;
	int var6;
	int var7;
	int var8;
	int var9;
	int var10;
	int var11;
	int var12;
	int var13;
	int var14;
	int var15;
	int var16;
	int var17;
	int var18;
	int var19;
	int var20;
	int var21;
	int var22;
	int var23;
	int var24;
	int var25;
	int var26;
	int var27;
	int var28;
	int var29;
	int var30;
	int var31;
	int var32;
	int var33;
	int var34;
	int var35;
	int var36;
	int var37;
	int var38;
	int var39;
	int var40;
	int var41;
	int var42;
	int var43;
	int var44;
	int var45;
	int var46;
	int var47;
	int var48;
	int var49;
	int var50;
	int var51;
	int var52;
	int var53;
	int var54;
	int var55;
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
outputStruct output_tmp = new outputStruct();
out6Struct out6_tmp = new out6Struct();
output_PONumberStruct output_PONumber_tmp = new output_PONumberStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tFileInputFullRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputFullRow_1", false);
		start_Hash.put("tFileInputFullRow_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputFullRow_1";

	
		int tos_count_tFileInputFullRow_1 = 0;
		

	org.talend.fileprocess.FileInputDelimited fid_tFileInputFullRow_1 = null;

	

	try{//}
		fid_tFileInputFullRow_1 =new org.talend.fileprocess.FileInputDelimited(((String)globalMap.get("tFileList_1_CURRENT_FILEPATH")),"ISO-8859-15","","\n",true,0,0,-1,-1,false);
		while (fid_tFileInputFullRow_1.nextRecord()) {//}
			row5 = null;						
	boolean whetherReject_tFileInputFullRow_1 = false;
	row5 = new row5Struct();
		row5.E = fid_tFileInputFullRow_1.get(0);
		row5.NumberOfLines = fid_tFileInputFullRow_1.get(1);
		row5.FileName = fid_tFileInputFullRow_1.get(2);
		row5.Customer_EDI_ID = fid_tFileInputFullRow_1.get(3);
		row5.Customer_Order_Number = fid_tFileInputFullRow_1.get(4);
		row5.Document_Type = fid_tFileInputFullRow_1.get(5);
		row5.Ship_To = fid_tFileInputFullRow_1.get(6);
		row5.Invoice_To = fid_tFileInputFullRow_1.get(7);
		row5.Order_By = fid_tFileInputFullRow_1.get(8);
		row5.Vendor = fid_tFileInputFullRow_1.get(9);
		row5.OrderDate = fid_tFileInputFullRow_1.get(10);
		row5.Delivery_Date = fid_tFileInputFullRow_1.get(11);
		row5.Season = fid_tFileInputFullRow_1.get(12);
		row5.ReferenceCustomerOrder = fid_tFileInputFullRow_1.get(13);
		row5.Comment_1 = fid_tFileInputFullRow_1.get(14);
		row5.Comment_2 = fid_tFileInputFullRow_1.get(15);
		row5.Order_By_Name = fid_tFileInputFullRow_1.get(16);
		row5.Order_By_Address = fid_tFileInputFullRow_1.get(17);
		row5.Order_By_PostalCode = fid_tFileInputFullRow_1.get(18);
		row5.Ship_To_Name = fid_tFileInputFullRow_1.get(19);
		row5.Ship_To_Address = fid_tFileInputFullRow_1.get(20);
		row5.Ship_To_PostalCode = fid_tFileInputFullRow_1.get(21);
		row5.DepartmentNumber = fid_tFileInputFullRow_1.get(22);
		row5.CustomerVendorNumber = fid_tFileInputFullRow_1.get(23);
		row5.TransportInstructions = fid_tFileInputFullRow_1.get(24);
		row5.TermsofSale = fid_tFileInputFullRow_1.get(25);
		row5.EffectiveDate = fid_tFileInputFullRow_1.get(26);
		row5.ShipNotBeforeDate = fid_tFileInputFullRow_1.get(27);
		row5.ShipNoLaterDate = fid_tFileInputFullRow_1.get(28);
		row5.CancelAfterDate = fid_tFileInputFullRow_1.get(29);
		row5.Brand = fid_tFileInputFullRow_1.get(30);
		row5.OrderCurrency = fid_tFileInputFullRow_1.get(31);
		row5.L = fid_tFileInputFullRow_1.get(32);
		row5.LineNumber = fid_tFileInputFullRow_1.get(33);
		row5.EAN = fid_tFileInputFullRow_1.get(34);
		row5.ItemDescription = fid_tFileInputFullRow_1.get(35);
		row5.OrderedQuantity = fid_tFileInputFullRow_1.get(36);
		row5.Discount_Code = fid_tFileInputFullRow_1.get(37);
		row5.NetPrice = fid_tFileInputFullRow_1.get(38);
		row5.Currency = fid_tFileInputFullRow_1.get(39);
		row5.Size = fid_tFileInputFullRow_1.get(40);
		row5.Color = fid_tFileInputFullRow_1.get(41);
		row5.SeasonCode = fid_tFileInputFullRow_1.get(42);
		row5.TicketType = fid_tFileInputFullRow_1.get(43);
		row5.PricatPriceCode = fid_tFileInputFullRow_1.get(44);
		row5.WarehouseCode = fid_tFileInputFullRow_1.get(45);
		row5.UnitOfMeasure = fid_tFileInputFullRow_1.get(46);
		row5.InformationPriceE = fid_tFileInputFullRow_1.get(47);
		row5.InformationPriceF = fid_tFileInputFullRow_1.get(48);
		row5.Picture = fid_tFileInputFullRow_1.get(49);
		row5.SeriesNumber = fid_tFileInputFullRow_1.get(50);
		row5.ModelNumber = fid_tFileInputFullRow_1.get(51);
		row5.BuyerSizeCode = fid_tFileInputFullRow_1.get(52);
		row5.VendorStyleNumber = fid_tFileInputFullRow_1.get(53);
		row5.BuyerItemNumber = fid_tFileInputFullRow_1.get(54);
		row5.CountryofOrigin = fid_tFileInputFullRow_1.get(55);

 



/**
 * [tFileInputFullRow_1 begin ] stop
 */
	
	/**
	 * [tFileInputFullRow_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputFullRow_1";

	

 


	tos_count_tFileInputFullRow_1++;

/**
 * [tFileInputFullRow_1 main ] stop
 */
	
	/**
	 * [tFileInputFullRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputFullRow_1";

	

 



/**
 * [tFileInputFullRow_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row5");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row27" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow27 = false;
       		  	    	
       		  	    	
 							row27Struct row27ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		row27HashKey.PONumber = StringHandling.LEN(StringHandling.TRIM(row5.E.substring(row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";") + 1 ) + 1 ) + 1 )  + 1, row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";") + 1 ) + 1 ) + 1 ) + 1 )))) == 0 ? " " : row5.E.substring(row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";") + 1 ) + 1 ) + 1 )  + 1, row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";") + 1 ) + 1 ) + 1 ) + 1 )) ;
                        		    		

								
		                        	row27HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row27.lookup( row27HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row27.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_1 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row27 != null && tHash_Lookup_row27.getCount(row27HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row27' and it contains more one result from keys :  row27.PONumber = '" + row27HashKey.PONumber + "'");
								} // G 071
							

							row27Struct row27 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row27Struct fromLookup_row27 = null;
							row27 = row27Default;
										 
							
								 
							
							
								if (tHash_Lookup_row27 !=null && tHash_Lookup_row27.hasNext()) { // G 099
								
							
								
								fromLookup_row27 = tHash_Lookup_row27.next();

							
							
								} // G 099
							
							

							if(fromLookup_row27 != null) {
								row27 = fromLookup_row27;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;
Var.var1 = row5.E.indexOf(";", row5.E.indexOf(";") + 1 );
Var.var2 = row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";") + 1 ) + 1 );
Var.var3 = row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";") + 1 ) + 1 ) + 1 ) ;
Var.var4 = row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";") + 1 ) + 1 ) + 1 ) + 1 );
Var.var5 = row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";") + 1 ) + 1 ) + 1 ) + 1 ) + 1);
Var.var6 = row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";") + 1 ) + 1 ) + 1 ) + 1 ) + 1) + 1);
Var.var7 = row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";")+1)+1)+1)+1)+1)+1)+1);
Var.var8 = row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";")+1)+1)+1)+1)+1)+1)+1)+1);
Var.var9 = row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";")+1)+1)+1)+1)+1)+1)+1)+1)+1);
Var.var10 = row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";")+1)+1)+1)+1)+1)+1)+1)+1)+1)+1) ;
Var.var11 = row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";")+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1) ;
Var.var12 = row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";")+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1);
Var.var13 = row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";")+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1);
Var.var14 = row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";")+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1);
Var.var15 = row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";")+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1);
Var.var16 = row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";")+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1);
Var.var17 = row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";")+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1);
Var.var18 = row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";")+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1);
Var.var19 = row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";")+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1);
Var.var20 = row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";")+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1);
Var.var21 = row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";")+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1);
Var.var22 = row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";")+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1);
Var.var23 = row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";")+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1);
Var.var24 = row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";")+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1);
Var.var25 = row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";")+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1);
Var.var26 = row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";")+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1);
Var.var27 = row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";")+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1);
Var.var28 = row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";")+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1);
Var.var29 = row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";")+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1);
Var.var30 = row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";")+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1);
Var.var31 = row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";")+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1);
Var.var32 = row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";")+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1);
Var.var33 = row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";")+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1);
Var.var34 = row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";")+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1);
Var.var35 = row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";")+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1);
Var.var36 = row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";")+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1);
Var.var37 = row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";")+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1);
Var.var38 = row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";")+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1);
Var.var39 = row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";")+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1);
Var.var40 = row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";")+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1);
Var.var41 = row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";")+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1) ;
Var.var42 = row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";")+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1) ;
Var.var43 = row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";")+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1) ;
Var.var44 = row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";")+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1) ;
Var.var45 = row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";")+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1);
Var.var46 = row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";")+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1);
Var.var47 = row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";")+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1);
Var.var48 = row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";")+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1);
Var.var49 = row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";")+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1);
Var.var50 = row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";")+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1);
Var.var51 = row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";")+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1);
Var.var52 = row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";")+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1);
Var.var53 = row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";")+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1);
Var.var54 = row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";")+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1);
Var.var55 = row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";")+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1)+1);// ###############################
        // ###############################
        // # Output tables

output = null;
out6 = null;
output_PONumber = null;

boolean rejected_tMap_1 = true;
if(!rejectedInnerJoin_tMap_1 ) {
} // closing inner join bracket (1)
 else {
rejected_tMap_1 = false;
} // closing else inner join bracket (1)
// ###### START REJECTS ##### 

// # Output reject table : 'output'
// # Filter conditions 
if( (rejected_tMap_1 || rejectedInnerJoin_tMap_1) && (

Relational.NOT((StringHandling.LEN(StringHandling.TRIM(row5.E.substring(row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";") + 1 ) + 1 ) + 1 )  + 1, row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";") + 1 ) + 1 ) + 1 ) + 1 )))) == 0 ? " " : row5.E.substring(row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";") + 1 ) + 1 ) + 1 )  + 1, row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";") + 1 ) + 1 ) + 1 ) + 1 ))).equals(row27.PONumber)) == true

) ) {
output_tmp.E = row5.E.substring(0,row5.E.indexOf(";")) ;
output_tmp.NumberOfLines = StringHandling.LEN(StringHandling.TRIM(row5.E.substring(row5.E.indexOf(";") + 1, Var.var1 ))) == 0 ? " " : (row5.E.substring(row5.E.indexOf(";") + 1, Var.var1 ).toString()) ;
output_tmp.FileName = StringHandling.LEN(StringHandling.TRIM(row5.E.substring(Var.var1 + 1, Var.var2))) == 0 ? " " : row5.E.substring(Var.var1 + 1, Var.var2) ;
output_tmp.Customer_EDI_ID = StringHandling.LEN(StringHandling.TRIM(row5.E.substring(Var.var2 + 1, Var.var3))) == 0 ? " " : row5.E.substring(Var.var2 + 1, Var.var3) ;
output_tmp.Customer_Order_Number = StringHandling.LEN(StringHandling.TRIM(row5.E.substring(Var.var3 + 1, Var.var4))) == 0 ? " " : row5.E.substring(Var.var3 + 1, Var.var4) ;
output_tmp.Document_Type = StringHandling.LEN(StringHandling.TRIM(row5.E.substring(Var.var4 + 1, Var.var5))) == 0 ? " " : row5.E.substring(Var.var4 + 1, Var.var5) ;
output_tmp.Ship_To = StringHandling.LEN(StringHandling.TRIM(row5.E.substring(Var.var5 + 1, Var.var6))) == 0 ? " " : row5.E.substring(Var.var5 + 1, Var.var6) ;
output_tmp.Invoice_To = StringHandling.LEN(StringHandling.TRIM(row5.E.substring(Var.var6 + 1, Var.var7))) == 0 ? " " : row5.E.substring(Var.var6 + 1, Var.var7) ;
output_tmp.Order_By = StringHandling.LEN(StringHandling.TRIM(row5.E.substring(Var.var7 + 1, Var.var8))) == 0 ? " " : row5.E.substring(Var.var7 + 1, Var.var8) ;
output_tmp.Vendor = StringHandling.LEN(StringHandling.TRIM(row5.E.substring(Var.var8 + 1, Var.var9))) == 0 ? " " : row5.E.substring(Var.var8 + 1, Var.var9) ;
output_tmp.OrderDate = StringHandling.LEN(StringHandling.TRIM(row5.E.substring(Var.var9 + 1, Var.var10))) == 0 ? " " : 
TalendDate.formatDate("yyyy-MM-dd",TalendDate.parseDate("yyyyMMdd",row5.E.substring(Var.var9 + 1, Var.var10))) ;
output_tmp.Customer_Requested_Date = StringHandling.LEN(StringHandling.TRIM(row5.E.substring(Var.var10 + 1, Var.var11))) == 0 ? " " : TalendDate.formatDate("yyyy-MM-dd",TalendDate.parseDate("yyyyMMdd",row5.E.substring(Var.var10 + 1, Var.var11))) ;
output_tmp.Season = StringHandling.LEN(StringHandling.TRIM(row5.E.substring(Var.var11 + 1, Var.var12))) == 0 ? " " : row5.E.substring(Var.var11 + 1, Var.var12) ;
output_tmp.ReferenceCustomerOrder = StringHandling.LEN(StringHandling.TRIM(row5.E.substring(Var.var12 + 1, Var.var13))) == 0 ? " " : row5.E.substring(Var.var12 + 1, Var.var13) ;
output_tmp.Comment_1 = StringHandling.LEN(StringHandling.TRIM(row5.E.substring(Var.var13 + 1, Var.var14))) == 0 ? " " : row5.E.substring(Var.var13 + 1, Var.var14) ;
output_tmp.Comment_2 = StringHandling.LEN(StringHandling.TRIM(row5.E.substring(Var.var14 + 1, Var.var15))) == 0 ? " " : row5.E.substring(Var.var14 + 1, Var.var15) ;
output_tmp.Order_By_Name = StringHandling.LEN(StringHandling.TRIM(row5.E.substring(Var.var16 + 1, Var.var17))) == 0 ? " " : row5.E.substring(Var.var16 + 1, Var.var17) ;
output_tmp.Order_By_Address = StringHandling.LEN(StringHandling.TRIM(row5.E.substring(Var.var17 + 1, Var.var18))) == 0 ? " " : row5.E.substring(Var.var17 + 1, Var.var18) ;
output_tmp.Order_By_PostalCode = StringHandling.LEN(StringHandling.TRIM(row5.E.substring(Var.var18 + 1, Var.var19))) == 0 ? " " : row5.E.substring(Var.var18 + 1, Var.var19) ;
output_tmp.Ship_To_Name = StringHandling.LEN(StringHandling.TRIM(row5.E.substring(Var.var19 + 1, Var.var20))) == 0 ? " " : row5.E.substring(Var.var19 + 1, Var.var20) ;
output_tmp.Ship_To_Address = StringHandling.LEN(StringHandling.TRIM(row5.E.substring(Var.var20 + 1, Var.var21))) == 0 ? " " : row5.E.substring(Var.var20 + 1, Var.var21) ;
output_tmp.Ship_To_PostalCode = StringHandling.LEN(StringHandling.TRIM(row5.E.substring(Var.var21 + 1, Var.var22))) == 0 ? " " : row5.E.substring(Var.var21 + 1, Var.var22) ;
output_tmp.DepartmentNumber = StringHandling.LEN(StringHandling.TRIM(row5.E.substring(Var.var22 + 1, Var.var23))) == 0 ? " " : row5.E.substring(Var.var22 + 1, Var.var23) ;
output_tmp.CustomerVendorNumber = StringHandling.LEN(StringHandling.TRIM(row5.E.substring(Var.var23 + 1, Var.var24))) == 0 ? " " : row5.E.substring(Var.var23 + 1, Var.var24) ;
output_tmp.TransportInstructions = StringHandling.LEN(StringHandling.TRIM(row5.E.substring(Var.var24 + 1, Var.var25))) == 0 ? " " : row5.E.substring(Var.var24 + 1, Var.var25) ;
output_tmp.TermsofSale = StringHandling.LEN(StringHandling.TRIM(row5.E.substring(Var.var25 + 1, Var.var26))) == 0 ? " " : row5.E.substring(Var.var25 + 1, Var.var26) ;
output_tmp.EffectiveDate = TalendDate.formatDate("yyyy-MM-dd",TalendDate.getCurrentDate()) ;
output_tmp.ShipNotBeforeDate = StringHandling.LEN(StringHandling.TRIM(row5.E.substring(Var.var24 + 1, Var.var28))) == 0 ? " " : row5.E.substring(Var.var27 + 1, Var.var28) ;
output_tmp.ShipNoLaterDate = StringHandling.LEN(StringHandling.TRIM(row5.E.substring(Var.var28 + 1, Var.var29))) == 0 ? " " : TalendDate.formatDate("yyyy-MM-dd",TalendDate.parseDate("yyyyMMdd",row5.E.substring(Var.var28 + 1, Var.var29))) ;
output_tmp.CancelAfterDate = StringHandling.LEN(StringHandling.TRIM(row5.E.substring(Var.var29 + 1, Var.var30))) == 0 ? " " : row5.E.substring(Var.var29 + 1, Var.var30) ;
output_tmp.Brand = StringHandling.LEN(StringHandling.TRIM(row5.E.substring(Var.var30 + 1, Var.var31))) == 0 ? " " : row5.E.substring(Var.var30 + 1, Var.var31) ;
output_tmp.OrderCurrency = StringHandling.LEN(StringHandling.TRIM(row5.E.substring(Var.var31 + 1, Var.var32))) == 0 ? " " : row5.E.substring(Var.var31 + 1, Var.var32) ;
output_tmp.L = StringHandling.LEN(StringHandling.TRIM(row5.E.substring(Var.var32 + 1, Var.var33))) == 0 ? " " : row5.E.substring(Var.var32 + 1, Var.var33) ;
output_tmp.LineNumber = StringHandling.LEN(StringHandling.TRIM(row5.E.substring(Var.var33 + 1, Var.var34))) == 0 ? " " : row5.E.substring(Var.var33 + 1, Var.var34) ;
output_tmp.EAN_Client = StringHandling.LEN(StringHandling.TRIM(row5.E.substring(Var.var34 + 1, Var.var35))) == 0 ? " " : row5.E.substring(Var.var34 + 1, Var.var35) ;
output_tmp.ItemDescription = StringHandling.LEN(StringHandling.TRIM(row5.E.substring(Var.var35 + 1, Var.var36))) == 0 ? " " : row5.E.substring(Var.var35 + 1, Var.var36) ;
output_tmp.OrderedQuantity = StringHandling.LEN(StringHandling.TRIM(row5.E.substring(Var.var36 + 1, Var.var37))) == 0 ? " " : row5.E.substring(Var.var36 + 1, Var.var37) ;
output_tmp.Discount_Code = StringHandling.LEN(StringHandling.TRIM(row5.E.substring(Var.var37 + 1, Var.var38))) == 0 ? " " : row5.E.substring(Var.var37 + 1, Var.var38) ;
output_tmp.NetPrice = StringHandling.LEN(StringHandling.TRIM(row5.E.substring(Var.var38 + 1, Var.var39))) == 0 ? " " : row5.E.substring(Var.var38 + 1, Var.var39) ;
output_tmp.Currency = StringHandling.LEN(StringHandling.TRIM(row5.E.substring(Var.var39 + 1, Var.var40))) == 0 ? " " : row5.E.substring(Var.var39 + 1, Var.var40) ;
output_tmp.Size = StringHandling.LEN(StringHandling.TRIM(row5.E.substring(Var.var40 + 1, Var.var41))) == 0 ? " " : row5.E.substring(Var.var40 + 1, Var.var41) ;
output_tmp.Color = StringHandling.LEN(StringHandling.TRIM(row5.E.substring(Var.var41 + 1, Var.var42))) == 0 ? " " : row5.E.substring(Var.var41 + 1, Var.var42) ;
output_tmp.SeasonCode = StringHandling.LEN(StringHandling.TRIM(row5.E.substring(Var.var42 + 1, Var.var43))) == 0 ? " " : row5.E.substring(Var.var42 + 1, Var.var43) ;
output_tmp.TicketType = StringHandling.LEN(StringHandling.TRIM(row5.E.substring(Var.var43 + 1, Var.var44))) == 0 ? " " : row5.E.substring(Var.var43 + 1, Var.var44) ;
output_tmp.PricatPriceCode = StringHandling.LEN(StringHandling.TRIM(row5.E.substring(Var.var44 + 1, Var.var45))) == 0 ? " " : row5.E.substring(Var.var44 + 1, Var.var45) ;
output_tmp.WarehouseCode = StringHandling.LEN(StringHandling.TRIM(row5.E.substring(Var.var45 + 1, Var.var46))) == 0 ? " " : row5.E.substring(Var.var45 + 1, Var.var46) ;
output_tmp.UnitOfMeasure = StringHandling.LEN(StringHandling.TRIM(row5.E.substring(Var.var46 + 1, Var.var47))) == 0 ? " " : row5.E.substring(Var.var46 + 1, Var.var47) ;
output_tmp.InformationPriceE = StringHandling.LEN(StringHandling.TRIM(row5.E.substring(Var.var47 + 1, Var.var48))) == 0 ? " " : row5.E.substring(Var.var47 + 1, Var.var48) ;
output_tmp.InformationPriceF = StringHandling.LEN(StringHandling.TRIM(row5.E.substring(Var.var48 + 1, Var.var49))) == 0 ? " " : row5.E.substring(Var.var48 + 1, Var.var49) ;
output_tmp.Picture = StringHandling.LEN(StringHandling.TRIM(row5.E.substring(Var.var49 + 1, Var.var50))) == 0 ? " " : row5.E.substring(Var.var49 + 1, Var.var50) ;
output_tmp.SeriesNumber = StringHandling.LEN(StringHandling.TRIM(row5.E.substring(Var.var50 + 1, Var.var51))) == 0 ? " " : row5.E.substring(Var.var50 + 1, Var.var51) ;
output_tmp.ModelNumber = StringHandling.LEN(StringHandling.TRIM(row5.E.substring(Var.var51 + 1, Var.var52))) == 0 ? " " : row5.E.substring(Var.var51 + 1, Var.var52) ;
output_tmp.BuyerSizeCode = StringHandling.LEN(StringHandling.TRIM(row5.E.substring(Var.var52 + 1, Var.var53))) == 0 ? " " : row5.E.substring(Var.var52 + 1, Var.var53) ;
output_tmp.EAN_Haddad = StringHandling.LEN(StringHandling.TRIM(row5.E.substring(Var.var53 + 1, Var.var54))) == 0 ? " " : row5.E.substring(Var.var53 + 1, Var.var54) ;
output_tmp.BuyerItemNumber = StringHandling.LEN(StringHandling.TRIM(row5.E.substring(Var.var54 + 1, Var.var55))) == 0 ? " " : row5.E.substring(Var.var54 + 1, Var.var55) ;
output_tmp.CountryofOrigin = StringHandling.LEN(StringHandling.TRIM(row5.E.substring(Var.var55 + 1, StringHandling.LEN(row5.E)))) == 0 ? " " : row5.E.substring(Var.var55 + 1, StringHandling.LEN(row5.E)) ;
output = output_tmp;
} // closing filter/reject

// # Output reject table : 'out6'
// # Filter conditions 
if( (rejected_tMap_1 || rejectedInnerJoin_tMap_1) && (

Relational.NOT((StringHandling.LEN(StringHandling.TRIM(row5.E.substring(row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";") + 1 ) + 1 ) + 1 )  + 1, row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";") + 1 ) + 1 ) + 1 ) + 1 )))) == 0 ? " " : row5.E.substring(row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";") + 1 ) + 1 ) + 1 )  + 1, row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";") + 1 ) + 1 ) + 1 ) + 1 ))).equals(row27.PONumber)) == true

) ) {
out6_tmp.Filename = ((String)globalMap.get("tFileList_1_CURRENT_FILE"));
out6_tmp.PONumber = StringHandling.LEN(StringHandling.TRIM(row5.E.substring(Var.var3 + 1, Var.var4))) == 0 ? " " : row5.E.substring(Var.var3 + 1, Var.var4) ;
out6 = out6_tmp;
} // closing filter/reject

// # Output reject table : 'output_PONumber'
// # Filter conditions 
if( (rejected_tMap_1 || rejectedInnerJoin_tMap_1) && (

Relational.NOT((StringHandling.LEN(StringHandling.TRIM(row5.E.substring(row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";") + 1 ) + 1 ) + 1 )  + 1, row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";") + 1 ) + 1 ) + 1 ) + 1 )))) == 0 ? " " : row5.E.substring(row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";") + 1 ) + 1 ) + 1 )  + 1, row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";", row5.E.indexOf(";") + 1 ) + 1 ) + 1 ) + 1 ))).equals(row27.PONumber)) == true

) ) {
output_PONumber_tmp.OrderPONumber = StringHandling.LEN(StringHandling.TRIM(row5.E.substring(Var.var3 + 1, Var.var4))) == 0 ? " " : row5.E.substring(Var.var3 + 1, Var.var4) ;
output_PONumber_tmp.newColumn = row27.PONumber ;
output_PONumber = output_PONumber_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "output"
if(output != null) { 



	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"output");
					}
					


                    StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
                            if(output.E != null) {
                        sb_tFileOutputDelimited_1.append(
                            output.E
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(output.NumberOfLines != null) {
                        sb_tFileOutputDelimited_1.append(
                            output.NumberOfLines
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(output.FileName != null) {
                        sb_tFileOutputDelimited_1.append(
                            output.FileName
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(output.Customer_EDI_ID != null) {
                        sb_tFileOutputDelimited_1.append(
                            output.Customer_EDI_ID
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(output.Customer_Order_Number != null) {
                        sb_tFileOutputDelimited_1.append(
                            output.Customer_Order_Number
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(output.Document_Type != null) {
                        sb_tFileOutputDelimited_1.append(
                            output.Document_Type
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(output.Ship_To != null) {
                        sb_tFileOutputDelimited_1.append(
                            output.Ship_To
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(output.Invoice_To != null) {
                        sb_tFileOutputDelimited_1.append(
                            output.Invoice_To
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(output.Order_By != null) {
                        sb_tFileOutputDelimited_1.append(
                            output.Order_By
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(output.Vendor != null) {
                        sb_tFileOutputDelimited_1.append(
                            output.Vendor
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(output.OrderDate != null) {
                        sb_tFileOutputDelimited_1.append(
                            output.OrderDate
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(output.Customer_Requested_Date != null) {
                        sb_tFileOutputDelimited_1.append(
                            output.Customer_Requested_Date
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(output.Season != null) {
                        sb_tFileOutputDelimited_1.append(
                            output.Season
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(output.ReferenceCustomerOrder != null) {
                        sb_tFileOutputDelimited_1.append(
                            output.ReferenceCustomerOrder
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(output.Comment_1 != null) {
                        sb_tFileOutputDelimited_1.append(
                            output.Comment_1
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(output.Comment_2 != null) {
                        sb_tFileOutputDelimited_1.append(
                            output.Comment_2
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(output.Order_By_Name != null) {
                        sb_tFileOutputDelimited_1.append(
                            output.Order_By_Name
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(output.Order_By_Address != null) {
                        sb_tFileOutputDelimited_1.append(
                            output.Order_By_Address
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(output.Order_By_PostalCode != null) {
                        sb_tFileOutputDelimited_1.append(
                            output.Order_By_PostalCode
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(output.Ship_To_Name != null) {
                        sb_tFileOutputDelimited_1.append(
                            output.Ship_To_Name
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(output.Ship_To_Address != null) {
                        sb_tFileOutputDelimited_1.append(
                            output.Ship_To_Address
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(output.Ship_To_PostalCode != null) {
                        sb_tFileOutputDelimited_1.append(
                            output.Ship_To_PostalCode
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(output.DepartmentNumber != null) {
                        sb_tFileOutputDelimited_1.append(
                            output.DepartmentNumber
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(output.CustomerVendorNumber != null) {
                        sb_tFileOutputDelimited_1.append(
                            output.CustomerVendorNumber
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(output.TransportInstructions != null) {
                        sb_tFileOutputDelimited_1.append(
                            output.TransportInstructions
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(output.TermsofSale != null) {
                        sb_tFileOutputDelimited_1.append(
                            output.TermsofSale
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(output.EffectiveDate != null) {
                        sb_tFileOutputDelimited_1.append(
                            output.EffectiveDate
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(output.ShipNotBeforeDate != null) {
                        sb_tFileOutputDelimited_1.append(
                            output.ShipNotBeforeDate
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(output.ShipNoLaterDate != null) {
                        sb_tFileOutputDelimited_1.append(
                            output.ShipNoLaterDate
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(output.CancelAfterDate != null) {
                        sb_tFileOutputDelimited_1.append(
                            output.CancelAfterDate
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(output.Brand != null) {
                        sb_tFileOutputDelimited_1.append(
                            output.Brand
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(output.OrderCurrency != null) {
                        sb_tFileOutputDelimited_1.append(
                            output.OrderCurrency
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(output.L != null) {
                        sb_tFileOutputDelimited_1.append(
                            output.L
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(output.LineNumber != null) {
                        sb_tFileOutputDelimited_1.append(
                            output.LineNumber
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(output.EAN_Client != null) {
                        sb_tFileOutputDelimited_1.append(
                            output.EAN_Client
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(output.ItemDescription != null) {
                        sb_tFileOutputDelimited_1.append(
                            output.ItemDescription
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(output.OrderedQuantity != null) {
                        sb_tFileOutputDelimited_1.append(
                            output.OrderedQuantity
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(output.Discount_Code != null) {
                        sb_tFileOutputDelimited_1.append(
                            output.Discount_Code
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(output.NetPrice != null) {
                        sb_tFileOutputDelimited_1.append(
                            output.NetPrice
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(output.Currency != null) {
                        sb_tFileOutputDelimited_1.append(
                            output.Currency
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(output.Size != null) {
                        sb_tFileOutputDelimited_1.append(
                            output.Size
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(output.Color != null) {
                        sb_tFileOutputDelimited_1.append(
                            output.Color
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(output.SeasonCode != null) {
                        sb_tFileOutputDelimited_1.append(
                            output.SeasonCode
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(output.TicketType != null) {
                        sb_tFileOutputDelimited_1.append(
                            output.TicketType
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(output.PricatPriceCode != null) {
                        sb_tFileOutputDelimited_1.append(
                            output.PricatPriceCode
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(output.WarehouseCode != null) {
                        sb_tFileOutputDelimited_1.append(
                            output.WarehouseCode
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(output.UnitOfMeasure != null) {
                        sb_tFileOutputDelimited_1.append(
                            output.UnitOfMeasure
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(output.InformationPriceE != null) {
                        sb_tFileOutputDelimited_1.append(
                            output.InformationPriceE
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(output.InformationPriceF != null) {
                        sb_tFileOutputDelimited_1.append(
                            output.InformationPriceF
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(output.Picture != null) {
                        sb_tFileOutputDelimited_1.append(
                            output.Picture
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(output.SeriesNumber != null) {
                        sb_tFileOutputDelimited_1.append(
                            output.SeriesNumber
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(output.ModelNumber != null) {
                        sb_tFileOutputDelimited_1.append(
                            output.ModelNumber
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(output.BuyerSizeCode != null) {
                        sb_tFileOutputDelimited_1.append(
                            output.BuyerSizeCode
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(output.EAN_Haddad != null) {
                        sb_tFileOutputDelimited_1.append(
                            output.EAN_Haddad
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(output.BuyerItemNumber != null) {
                        sb_tFileOutputDelimited_1.append(
                            output.BuyerItemNumber
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(output.CountryofOrigin != null) {
                        sb_tFileOutputDelimited_1.append(
                            output.CountryofOrigin
                        );
                            }
                    sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);


                    nb_line_tFileOutputDelimited_1++;
                    resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

                        outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());




 
     row1 = output;


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_begin ] stop
 */

	
	/**
	 * [tWriteJSONField_2_Out main ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_2";
	
	currentComponent="tWriteJSONField_2_Out";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row1");
					}
					

	if(txf_tWriteJSONField_2_Out.getLastException()!=null) {
		currentComponent = txf_tWriteJSONField_2_Out.getCurrentComponent();
		throw txf_tWriteJSONField_2_Out.getLastException();
	}
	nb_line_tWriteJSONField_2_Out++;
	valueMap_tWriteJSONField_2_Out.clear();
	arraysValueMap_tWriteJSONField_2_Out.clear();
	valueMap_tWriteJSONField_2_Out.put("E",
	(
		row1.E != null?
            row1.E.toString():null
		));
	arraysValueMap_tWriteJSONField_2_Out.put("E",
	(
		row1.E != null?
            row1.E.toString():null
		));
	valueMap_tWriteJSONField_2_Out.put("NumberOfLines",
	(
		row1.NumberOfLines != null?
            row1.NumberOfLines.toString():null
		));
	arraysValueMap_tWriteJSONField_2_Out.put("NumberOfLines",
	(
		row1.NumberOfLines != null?
            row1.NumberOfLines.toString():null
		));
	valueMap_tWriteJSONField_2_Out.put("FileName",
	(
		row1.FileName != null?
            row1.FileName.toString():null
		));
	arraysValueMap_tWriteJSONField_2_Out.put("FileName",
	(
		row1.FileName != null?
            row1.FileName.toString():null
		));
	valueMap_tWriteJSONField_2_Out.put("Customer_EDI_ID",
	(
		row1.Customer_EDI_ID != null?
            row1.Customer_EDI_ID.toString():null
		));
	arraysValueMap_tWriteJSONField_2_Out.put("Customer_EDI_ID",
	(
		row1.Customer_EDI_ID != null?
            row1.Customer_EDI_ID.toString():null
		));
	valueMap_tWriteJSONField_2_Out.put("Customer_Order_Number",
	(
		row1.Customer_Order_Number != null?
            row1.Customer_Order_Number.toString():null
		));
	arraysValueMap_tWriteJSONField_2_Out.put("Customer_Order_Number",
	(
		row1.Customer_Order_Number != null?
            row1.Customer_Order_Number.toString():null
		));
	valueMap_tWriteJSONField_2_Out.put("Document_Type",
	(
		row1.Document_Type != null?
            row1.Document_Type.toString():null
		));
	arraysValueMap_tWriteJSONField_2_Out.put("Document_Type",
	(
		row1.Document_Type != null?
            row1.Document_Type.toString():null
		));
	valueMap_tWriteJSONField_2_Out.put("Ship_To",
	(
		row1.Ship_To != null?
            row1.Ship_To.toString():null
		));
	arraysValueMap_tWriteJSONField_2_Out.put("Ship_To",
	(
		row1.Ship_To != null?
            row1.Ship_To.toString():null
		));
	valueMap_tWriteJSONField_2_Out.put("Invoice_To",
	(
		row1.Invoice_To != null?
            row1.Invoice_To.toString():null
		));
	arraysValueMap_tWriteJSONField_2_Out.put("Invoice_To",
	(
		row1.Invoice_To != null?
            row1.Invoice_To.toString():null
		));
	valueMap_tWriteJSONField_2_Out.put("Order_By",
	(
		row1.Order_By != null?
            row1.Order_By.toString():null
		));
	arraysValueMap_tWriteJSONField_2_Out.put("Order_By",
	(
		row1.Order_By != null?
            row1.Order_By.toString():null
		));
	valueMap_tWriteJSONField_2_Out.put("Vendor",
	(
		row1.Vendor != null?
            row1.Vendor.toString():null
		));
	arraysValueMap_tWriteJSONField_2_Out.put("Vendor",
	(
		row1.Vendor != null?
            row1.Vendor.toString():null
		));
	valueMap_tWriteJSONField_2_Out.put("OrderDate",
	(
		row1.OrderDate != null?
            row1.OrderDate.toString():null
		));
	arraysValueMap_tWriteJSONField_2_Out.put("OrderDate",
	(
		row1.OrderDate != null?
            row1.OrderDate.toString():null
		));
	valueMap_tWriteJSONField_2_Out.put("Customer_Requested_Date",
	(
		row1.Customer_Requested_Date != null?
            row1.Customer_Requested_Date.toString():null
		));
	arraysValueMap_tWriteJSONField_2_Out.put("Customer_Requested_Date",
	(
		row1.Customer_Requested_Date != null?
            row1.Customer_Requested_Date.toString():null
		));
	valueMap_tWriteJSONField_2_Out.put("Season",
	(
		row1.Season != null?
            row1.Season.toString():null
		));
	arraysValueMap_tWriteJSONField_2_Out.put("Season",
	(
		row1.Season != null?
            row1.Season.toString():null
		));
	valueMap_tWriteJSONField_2_Out.put("ReferenceCustomerOrder",
	(
		row1.ReferenceCustomerOrder != null?
            row1.ReferenceCustomerOrder.toString():null
		));
	arraysValueMap_tWriteJSONField_2_Out.put("ReferenceCustomerOrder",
	(
		row1.ReferenceCustomerOrder != null?
            row1.ReferenceCustomerOrder.toString():null
		));
	valueMap_tWriteJSONField_2_Out.put("Comment_1",
	(
		row1.Comment_1 != null?
            row1.Comment_1.toString():null
		));
	arraysValueMap_tWriteJSONField_2_Out.put("Comment_1",
	(
		row1.Comment_1 != null?
            row1.Comment_1.toString():null
		));
	valueMap_tWriteJSONField_2_Out.put("Comment_2",
	(
		row1.Comment_2 != null?
            row1.Comment_2.toString():null
		));
	arraysValueMap_tWriteJSONField_2_Out.put("Comment_2",
	(
		row1.Comment_2 != null?
            row1.Comment_2.toString():null
		));
	valueMap_tWriteJSONField_2_Out.put("Order_By_Name",
	(
		row1.Order_By_Name != null?
            row1.Order_By_Name.toString():null
		));
	arraysValueMap_tWriteJSONField_2_Out.put("Order_By_Name",
	(
		row1.Order_By_Name != null?
            row1.Order_By_Name.toString():null
		));
	valueMap_tWriteJSONField_2_Out.put("Order_By_Address",
	(
		row1.Order_By_Address != null?
            row1.Order_By_Address.toString():null
		));
	arraysValueMap_tWriteJSONField_2_Out.put("Order_By_Address",
	(
		row1.Order_By_Address != null?
            row1.Order_By_Address.toString():null
		));
	valueMap_tWriteJSONField_2_Out.put("Order_By_PostalCode",
	(
		row1.Order_By_PostalCode != null?
            row1.Order_By_PostalCode.toString():null
		));
	arraysValueMap_tWriteJSONField_2_Out.put("Order_By_PostalCode",
	(
		row1.Order_By_PostalCode != null?
            row1.Order_By_PostalCode.toString():null
		));
	valueMap_tWriteJSONField_2_Out.put("Ship_To_Name",
	(
		row1.Ship_To_Name != null?
            row1.Ship_To_Name.toString():null
		));
	arraysValueMap_tWriteJSONField_2_Out.put("Ship_To_Name",
	(
		row1.Ship_To_Name != null?
            row1.Ship_To_Name.toString():null
		));
	valueMap_tWriteJSONField_2_Out.put("Ship_To_Address",
	(
		row1.Ship_To_Address != null?
            row1.Ship_To_Address.toString():null
		));
	arraysValueMap_tWriteJSONField_2_Out.put("Ship_To_Address",
	(
		row1.Ship_To_Address != null?
            row1.Ship_To_Address.toString():null
		));
	valueMap_tWriteJSONField_2_Out.put("Ship_To_PostalCode",
	(
		row1.Ship_To_PostalCode != null?
            row1.Ship_To_PostalCode.toString():null
		));
	arraysValueMap_tWriteJSONField_2_Out.put("Ship_To_PostalCode",
	(
		row1.Ship_To_PostalCode != null?
            row1.Ship_To_PostalCode.toString():null
		));
	valueMap_tWriteJSONField_2_Out.put("DepartmentNumber",
	(
		row1.DepartmentNumber != null?
            row1.DepartmentNumber.toString():null
		));
	arraysValueMap_tWriteJSONField_2_Out.put("DepartmentNumber",
	(
		row1.DepartmentNumber != null?
            row1.DepartmentNumber.toString():null
		));
	valueMap_tWriteJSONField_2_Out.put("CustomerVendorNumber",
	(
		row1.CustomerVendorNumber != null?
            row1.CustomerVendorNumber.toString():null
		));
	arraysValueMap_tWriteJSONField_2_Out.put("CustomerVendorNumber",
	(
		row1.CustomerVendorNumber != null?
            row1.CustomerVendorNumber.toString():null
		));
	valueMap_tWriteJSONField_2_Out.put("TransportInstructions",
	(
		row1.TransportInstructions != null?
            row1.TransportInstructions.toString():null
		));
	arraysValueMap_tWriteJSONField_2_Out.put("TransportInstructions",
	(
		row1.TransportInstructions != null?
            row1.TransportInstructions.toString():null
		));
	valueMap_tWriteJSONField_2_Out.put("TermsofSale",
	(
		row1.TermsofSale != null?
            row1.TermsofSale.toString():null
		));
	arraysValueMap_tWriteJSONField_2_Out.put("TermsofSale",
	(
		row1.TermsofSale != null?
            row1.TermsofSale.toString():null
		));
	valueMap_tWriteJSONField_2_Out.put("EffectiveDate",
	(
		row1.EffectiveDate != null?
            row1.EffectiveDate.toString():null
		));
	arraysValueMap_tWriteJSONField_2_Out.put("EffectiveDate",
	(
		row1.EffectiveDate != null?
            row1.EffectiveDate.toString():null
		));
	valueMap_tWriteJSONField_2_Out.put("ShipNotBeforeDate",
	(
		row1.ShipNotBeforeDate != null?
            row1.ShipNotBeforeDate.toString():null
		));
	arraysValueMap_tWriteJSONField_2_Out.put("ShipNotBeforeDate",
	(
		row1.ShipNotBeforeDate != null?
            row1.ShipNotBeforeDate.toString():null
		));
	valueMap_tWriteJSONField_2_Out.put("ShipNoLaterDate",
	(
		row1.ShipNoLaterDate != null?
            row1.ShipNoLaterDate.toString():null
		));
	arraysValueMap_tWriteJSONField_2_Out.put("ShipNoLaterDate",
	(
		row1.ShipNoLaterDate != null?
            row1.ShipNoLaterDate.toString():null
		));
	valueMap_tWriteJSONField_2_Out.put("CancelAfterDate",
	(
		row1.CancelAfterDate != null?
            row1.CancelAfterDate.toString():null
		));
	arraysValueMap_tWriteJSONField_2_Out.put("CancelAfterDate",
	(
		row1.CancelAfterDate != null?
            row1.CancelAfterDate.toString():null
		));
	valueMap_tWriteJSONField_2_Out.put("Brand",
	(
		row1.Brand != null?
            row1.Brand.toString():null
		));
	arraysValueMap_tWriteJSONField_2_Out.put("Brand",
	(
		row1.Brand != null?
            row1.Brand.toString():null
		));
	valueMap_tWriteJSONField_2_Out.put("OrderCurrency",
	(
		row1.OrderCurrency != null?
            row1.OrderCurrency.toString():null
		));
	arraysValueMap_tWriteJSONField_2_Out.put("OrderCurrency",
	(
		row1.OrderCurrency != null?
            row1.OrderCurrency.toString():null
		));
	valueMap_tWriteJSONField_2_Out.put("L",
	(
		row1.L != null?
            row1.L.toString():null
		));
	arraysValueMap_tWriteJSONField_2_Out.put("L",
	(
		row1.L != null?
            row1.L.toString():null
		));
	valueMap_tWriteJSONField_2_Out.put("LineNumber",
	(
		row1.LineNumber != null?
            row1.LineNumber.toString():null
		));
	arraysValueMap_tWriteJSONField_2_Out.put("LineNumber",
	(
		row1.LineNumber != null?
            row1.LineNumber.toString():null
		));
	valueMap_tWriteJSONField_2_Out.put("EAN_Client",
	(
		row1.EAN_Client != null?
            row1.EAN_Client.toString():null
		));
	arraysValueMap_tWriteJSONField_2_Out.put("EAN_Client",
	(
		row1.EAN_Client != null?
            row1.EAN_Client.toString():null
		));
	valueMap_tWriteJSONField_2_Out.put("ItemDescription",
	(
		row1.ItemDescription != null?
            row1.ItemDescription.toString():null
		));
	arraysValueMap_tWriteJSONField_2_Out.put("ItemDescription",
	(
		row1.ItemDescription != null?
            row1.ItemDescription.toString():null
		));
	valueMap_tWriteJSONField_2_Out.put("OrderedQuantity",
	(
		row1.OrderedQuantity != null?
            row1.OrderedQuantity.toString():null
		));
	arraysValueMap_tWriteJSONField_2_Out.put("OrderedQuantity",
	(
		row1.OrderedQuantity != null?
            row1.OrderedQuantity.toString():null
		));
	valueMap_tWriteJSONField_2_Out.put("Discount_Code",
	(
		row1.Discount_Code != null?
            row1.Discount_Code.toString():null
		));
	arraysValueMap_tWriteJSONField_2_Out.put("Discount_Code",
	(
		row1.Discount_Code != null?
            row1.Discount_Code.toString():null
		));
	valueMap_tWriteJSONField_2_Out.put("NetPrice",
	(
		row1.NetPrice != null?
            row1.NetPrice.toString():null
		));
	arraysValueMap_tWriteJSONField_2_Out.put("NetPrice",
	(
		row1.NetPrice != null?
            row1.NetPrice.toString():null
		));
	valueMap_tWriteJSONField_2_Out.put("Currency",
	(
		row1.Currency != null?
            row1.Currency.toString():null
		));
	arraysValueMap_tWriteJSONField_2_Out.put("Currency",
	(
		row1.Currency != null?
            row1.Currency.toString():null
		));
	valueMap_tWriteJSONField_2_Out.put("Size",
	(
		row1.Size != null?
            row1.Size.toString():null
		));
	arraysValueMap_tWriteJSONField_2_Out.put("Size",
	(
		row1.Size != null?
            row1.Size.toString():null
		));
	valueMap_tWriteJSONField_2_Out.put("Color",
	(
		row1.Color != null?
            row1.Color.toString():null
		));
	arraysValueMap_tWriteJSONField_2_Out.put("Color",
	(
		row1.Color != null?
            row1.Color.toString():null
		));
	valueMap_tWriteJSONField_2_Out.put("SeasonCode",
	(
		row1.SeasonCode != null?
            row1.SeasonCode.toString():null
		));
	arraysValueMap_tWriteJSONField_2_Out.put("SeasonCode",
	(
		row1.SeasonCode != null?
            row1.SeasonCode.toString():null
		));
	valueMap_tWriteJSONField_2_Out.put("TicketType",
	(
		row1.TicketType != null?
            row1.TicketType.toString():null
		));
	arraysValueMap_tWriteJSONField_2_Out.put("TicketType",
	(
		row1.TicketType != null?
            row1.TicketType.toString():null
		));
	valueMap_tWriteJSONField_2_Out.put("PricatPriceCode",
	(
		row1.PricatPriceCode != null?
            row1.PricatPriceCode.toString():null
		));
	arraysValueMap_tWriteJSONField_2_Out.put("PricatPriceCode",
	(
		row1.PricatPriceCode != null?
            row1.PricatPriceCode.toString():null
		));
	valueMap_tWriteJSONField_2_Out.put("WarehouseCode",
	(
		row1.WarehouseCode != null?
            row1.WarehouseCode.toString():null
		));
	arraysValueMap_tWriteJSONField_2_Out.put("WarehouseCode",
	(
		row1.WarehouseCode != null?
            row1.WarehouseCode.toString():null
		));
	valueMap_tWriteJSONField_2_Out.put("UnitOfMeasure",
	(
		row1.UnitOfMeasure != null?
            row1.UnitOfMeasure.toString():null
		));
	arraysValueMap_tWriteJSONField_2_Out.put("UnitOfMeasure",
	(
		row1.UnitOfMeasure != null?
            row1.UnitOfMeasure.toString():null
		));
	valueMap_tWriteJSONField_2_Out.put("InformationPriceE",
	(
		row1.InformationPriceE != null?
            row1.InformationPriceE.toString():null
		));
	arraysValueMap_tWriteJSONField_2_Out.put("InformationPriceE",
	(
		row1.InformationPriceE != null?
            row1.InformationPriceE.toString():null
		));
	valueMap_tWriteJSONField_2_Out.put("InformationPriceF",
	(
		row1.InformationPriceF != null?
            row1.InformationPriceF.toString():null
		));
	arraysValueMap_tWriteJSONField_2_Out.put("InformationPriceF",
	(
		row1.InformationPriceF != null?
            row1.InformationPriceF.toString():null
		));
	valueMap_tWriteJSONField_2_Out.put("Picture",
	(
		row1.Picture != null?
            row1.Picture.toString():null
		));
	arraysValueMap_tWriteJSONField_2_Out.put("Picture",
	(
		row1.Picture != null?
            row1.Picture.toString():null
		));
	valueMap_tWriteJSONField_2_Out.put("SeriesNumber",
	(
		row1.SeriesNumber != null?
            row1.SeriesNumber.toString():null
		));
	arraysValueMap_tWriteJSONField_2_Out.put("SeriesNumber",
	(
		row1.SeriesNumber != null?
            row1.SeriesNumber.toString():null
		));
	valueMap_tWriteJSONField_2_Out.put("ModelNumber",
	(
		row1.ModelNumber != null?
            row1.ModelNumber.toString():null
		));
	arraysValueMap_tWriteJSONField_2_Out.put("ModelNumber",
	(
		row1.ModelNumber != null?
            row1.ModelNumber.toString():null
		));
	valueMap_tWriteJSONField_2_Out.put("BuyerSizeCode",
	(
		row1.BuyerSizeCode != null?
            row1.BuyerSizeCode.toString():null
		));
	arraysValueMap_tWriteJSONField_2_Out.put("BuyerSizeCode",
	(
		row1.BuyerSizeCode != null?
            row1.BuyerSizeCode.toString():null
		));
	valueMap_tWriteJSONField_2_Out.put("EAN_Haddad",
	(
		row1.EAN_Haddad != null?
            row1.EAN_Haddad.toString():null
		));
	arraysValueMap_tWriteJSONField_2_Out.put("EAN_Haddad",
	(
		row1.EAN_Haddad != null?
            row1.EAN_Haddad.toString():null
		));
	valueMap_tWriteJSONField_2_Out.put("BuyerItemNumber",
	(
		row1.BuyerItemNumber != null?
            row1.BuyerItemNumber.toString():null
		));
	arraysValueMap_tWriteJSONField_2_Out.put("BuyerItemNumber",
	(
		row1.BuyerItemNumber != null?
            row1.BuyerItemNumber.toString():null
		));
	valueMap_tWriteJSONField_2_Out.put("CountryofOrigin",
	(
		row1.CountryofOrigin != null?
            row1.CountryofOrigin.toString():null
		));
	arraysValueMap_tWriteJSONField_2_Out.put("CountryofOrigin",
	(
		row1.CountryofOrigin != null?
            row1.CountryofOrigin.toString():null
		));
		String strTemp_tWriteJSONField_2_Out = "";		strTemp_tWriteJSONField_2_Out = strTemp_tWriteJSONField_2_Out + valueMap_tWriteJSONField_2_Out.get("E")
							+ valueMap_tWriteJSONField_2_Out.get("E").length();
	if(strCompCache_tWriteJSONField_2_Out==null){
		strCompCache_tWriteJSONField_2_Out=strTemp_tWriteJSONField_2_Out;
		
	}else{
		//the data read is different from the data read last time. 
		if(!strCompCache_tWriteJSONField_2_Out.equals(strTemp_tWriteJSONField_2_Out)){	  
    		nestXMLTool_tWriteJSONField_2_Out.replaceDefaultNameSpace(doc_tWriteJSONField_2_Out.getRootElement());			
			java.io.StringWriter strWriter_tWriteJSONField_2_Out = new java.io.StringWriter();	
			org.dom4j.io.XMLWriter output_tWriteJSONField_2_Out = new org.dom4j.io.XMLWriter(strWriter_tWriteJSONField_2_Out, format_tWriteJSONField_2_Out);
			output_tWriteJSONField_2_Out.write(doc_tWriteJSONField_2_Out);
		    output_tWriteJSONField_2_Out.close();
			
				  		  row2Struct row_tWriteJSONField_2_Out = new row2Struct();
						  
					     		row_tWriteJSONField_2_Out.E = strWriter_tWriteJSONField_2_Out.toString();
					     		listGroupby_tWriteJSONField_2_Out.add(row_tWriteJSONField_2_Out);
					
		    doc_tWriteJSONField_2_Out.clearContent();
			needRoot_tWriteJSONField_2_Out = true;
			for(int i_tWriteJSONField_2_Out=0;i_tWriteJSONField_2_Out<orders_tWriteJSONField_2_Out.length;i_tWriteJSONField_2_Out++){
				orders_tWriteJSONField_2_Out[i_tWriteJSONField_2_Out] = 0;
			}
			
			if(groupbyList_tWriteJSONField_2_Out != null && groupbyList_tWriteJSONField_2_Out.size() >= 0){
				groupbyList_tWriteJSONField_2_Out.clear();
			}
			strCompCache_tWriteJSONField_2_Out=strTemp_tWriteJSONField_2_Out;
		}
	}

	org.dom4j.Element subTreeRootParent_tWriteJSONField_2_Out = null;
	
	// build root xml tree 
	if (needRoot_tWriteJSONField_2_Out) {
		needRoot_tWriteJSONField_2_Out=false;
		org.dom4j.Element root_tWriteJSONField_2_Out = doc_tWriteJSONField_2_Out.addElement("requestWrapperE");
		subTreeRootParent_tWriteJSONField_2_Out = root_tWriteJSONField_2_Out;
		root4Group_tWriteJSONField_2_Out = subTreeRootParent_tWriteJSONField_2_Out;
	}else{
		subTreeRootParent_tWriteJSONField_2_Out=root4Group_tWriteJSONField_2_Out;
	}
	// build group xml tree 
	boolean isNewElememt = false;
	if(isNewElememt || groupbyList_tWriteJSONField_2_Out.size()<=0 || groupbyList_tWriteJSONField_2_Out.get(0)==null
	|| ( groupbyList_tWriteJSONField_2_Out.get(0).get(0)!=null 
		? !groupbyList_tWriteJSONField_2_Out.get(0).get(0).equals(
		valueMap_tWriteJSONField_2_Out.get("NumberOfLines")) 
		: 
		valueMap_tWriteJSONField_2_Out.get("NumberOfLines")!=null )
	|| ( groupbyList_tWriteJSONField_2_Out.get(0).get(1)!=null 
		? !groupbyList_tWriteJSONField_2_Out.get(0).get(1).equals(
		valueMap_tWriteJSONField_2_Out.get("FileName")) 
		: 
		valueMap_tWriteJSONField_2_Out.get("FileName")!=null )
	|| ( groupbyList_tWriteJSONField_2_Out.get(0).get(2)!=null 
		? !groupbyList_tWriteJSONField_2_Out.get(0).get(2).equals(
		valueMap_tWriteJSONField_2_Out.get("Customer_EDI_ID")) 
		: 
		valueMap_tWriteJSONField_2_Out.get("Customer_EDI_ID")!=null )
	|| ( groupbyList_tWriteJSONField_2_Out.get(0).get(3)!=null 
		? !groupbyList_tWriteJSONField_2_Out.get(0).get(3).equals(
		valueMap_tWriteJSONField_2_Out.get("Customer_Order_Number")) 
		: 
		valueMap_tWriteJSONField_2_Out.get("Customer_Order_Number")!=null )
	|| ( groupbyList_tWriteJSONField_2_Out.get(0).get(4)!=null 
		? !groupbyList_tWriteJSONField_2_Out.get(0).get(4).equals(
		valueMap_tWriteJSONField_2_Out.get("Document_Type")) 
		: 
		valueMap_tWriteJSONField_2_Out.get("Document_Type")!=null )
	|| ( groupbyList_tWriteJSONField_2_Out.get(0).get(5)!=null 
		? !groupbyList_tWriteJSONField_2_Out.get(0).get(5).equals(
		valueMap_tWriteJSONField_2_Out.get("Ship_To")) 
		: 
		valueMap_tWriteJSONField_2_Out.get("Ship_To")!=null )
	|| ( groupbyList_tWriteJSONField_2_Out.get(0).get(6)!=null 
		? !groupbyList_tWriteJSONField_2_Out.get(0).get(6).equals(
		valueMap_tWriteJSONField_2_Out.get("Invoice_To")) 
		: 
		valueMap_tWriteJSONField_2_Out.get("Invoice_To")!=null )
	|| ( groupbyList_tWriteJSONField_2_Out.get(0).get(7)!=null 
		? !groupbyList_tWriteJSONField_2_Out.get(0).get(7).equals(
		valueMap_tWriteJSONField_2_Out.get("Order_By")) 
		: 
		valueMap_tWriteJSONField_2_Out.get("Order_By")!=null )
	|| ( groupbyList_tWriteJSONField_2_Out.get(0).get(8)!=null 
		? !groupbyList_tWriteJSONField_2_Out.get(0).get(8).equals(
		valueMap_tWriteJSONField_2_Out.get("Vendor")) 
		: 
		valueMap_tWriteJSONField_2_Out.get("Vendor")!=null )
	|| ( groupbyList_tWriteJSONField_2_Out.get(0).get(9)!=null 
		? !groupbyList_tWriteJSONField_2_Out.get(0).get(9).equals(
		valueMap_tWriteJSONField_2_Out.get("OrderDate")) 
		: 
		valueMap_tWriteJSONField_2_Out.get("OrderDate")!=null )
	|| ( groupbyList_tWriteJSONField_2_Out.get(0).get(10)!=null 
		? !groupbyList_tWriteJSONField_2_Out.get(0).get(10).equals(
		valueMap_tWriteJSONField_2_Out.get("Customer_Requested_Date")) 
		: 
		valueMap_tWriteJSONField_2_Out.get("Customer_Requested_Date")!=null )
	|| ( groupbyList_tWriteJSONField_2_Out.get(0).get(11)!=null 
		? !groupbyList_tWriteJSONField_2_Out.get(0).get(11).equals(
		valueMap_tWriteJSONField_2_Out.get("Season")) 
		: 
		valueMap_tWriteJSONField_2_Out.get("Season")!=null )
	|| ( groupbyList_tWriteJSONField_2_Out.get(0).get(12)!=null 
		? !groupbyList_tWriteJSONField_2_Out.get(0).get(12).equals(
		valueMap_tWriteJSONField_2_Out.get("ReferenceCustomerOrder")) 
		: 
		valueMap_tWriteJSONField_2_Out.get("ReferenceCustomerOrder")!=null )
	|| ( groupbyList_tWriteJSONField_2_Out.get(0).get(13)!=null 
		? !groupbyList_tWriteJSONField_2_Out.get(0).get(13).equals(
		valueMap_tWriteJSONField_2_Out.get("Comment_1")) 
		: 
		valueMap_tWriteJSONField_2_Out.get("Comment_1")!=null )
	|| ( groupbyList_tWriteJSONField_2_Out.get(0).get(14)!=null 
		? !groupbyList_tWriteJSONField_2_Out.get(0).get(14).equals(
		valueMap_tWriteJSONField_2_Out.get("Comment_2")) 
		: 
		valueMap_tWriteJSONField_2_Out.get("Comment_2")!=null )
	|| ( groupbyList_tWriteJSONField_2_Out.get(0).get(15)!=null 
		? !groupbyList_tWriteJSONField_2_Out.get(0).get(15).equals(
		valueMap_tWriteJSONField_2_Out.get("Order_By_Name")) 
		: 
		valueMap_tWriteJSONField_2_Out.get("Order_By_Name")!=null )
	|| ( groupbyList_tWriteJSONField_2_Out.get(0).get(16)!=null 
		? !groupbyList_tWriteJSONField_2_Out.get(0).get(16).equals(
		valueMap_tWriteJSONField_2_Out.get("Order_By_Address")) 
		: 
		valueMap_tWriteJSONField_2_Out.get("Order_By_Address")!=null )
	|| ( groupbyList_tWriteJSONField_2_Out.get(0).get(17)!=null 
		? !groupbyList_tWriteJSONField_2_Out.get(0).get(17).equals(
		valueMap_tWriteJSONField_2_Out.get("Order_By_PostalCode")) 
		: 
		valueMap_tWriteJSONField_2_Out.get("Order_By_PostalCode")!=null )
	|| ( groupbyList_tWriteJSONField_2_Out.get(0).get(18)!=null 
		? !groupbyList_tWriteJSONField_2_Out.get(0).get(18).equals(
		valueMap_tWriteJSONField_2_Out.get("Ship_To_Name")) 
		: 
		valueMap_tWriteJSONField_2_Out.get("Ship_To_Name")!=null )
	|| ( groupbyList_tWriteJSONField_2_Out.get(0).get(19)!=null 
		? !groupbyList_tWriteJSONField_2_Out.get(0).get(19).equals(
		valueMap_tWriteJSONField_2_Out.get("Ship_To_Address")) 
		: 
		valueMap_tWriteJSONField_2_Out.get("Ship_To_Address")!=null )
	|| ( groupbyList_tWriteJSONField_2_Out.get(0).get(20)!=null 
		? !groupbyList_tWriteJSONField_2_Out.get(0).get(20).equals(
		valueMap_tWriteJSONField_2_Out.get("Ship_To_PostalCode")) 
		: 
		valueMap_tWriteJSONField_2_Out.get("Ship_To_PostalCode")!=null )
	|| ( groupbyList_tWriteJSONField_2_Out.get(0).get(21)!=null 
		? !groupbyList_tWriteJSONField_2_Out.get(0).get(21).equals(
		valueMap_tWriteJSONField_2_Out.get("DepartmentNumber")) 
		: 
		valueMap_tWriteJSONField_2_Out.get("DepartmentNumber")!=null )
	|| ( groupbyList_tWriteJSONField_2_Out.get(0).get(22)!=null 
		? !groupbyList_tWriteJSONField_2_Out.get(0).get(22).equals(
		valueMap_tWriteJSONField_2_Out.get("CustomerVendorNumber")) 
		: 
		valueMap_tWriteJSONField_2_Out.get("CustomerVendorNumber")!=null )
	|| ( groupbyList_tWriteJSONField_2_Out.get(0).get(23)!=null 
		? !groupbyList_tWriteJSONField_2_Out.get(0).get(23).equals(
		valueMap_tWriteJSONField_2_Out.get("TransportInstructions")) 
		: 
		valueMap_tWriteJSONField_2_Out.get("TransportInstructions")!=null )
	|| ( groupbyList_tWriteJSONField_2_Out.get(0).get(24)!=null 
		? !groupbyList_tWriteJSONField_2_Out.get(0).get(24).equals(
		valueMap_tWriteJSONField_2_Out.get("TermsofSale")) 
		: 
		valueMap_tWriteJSONField_2_Out.get("TermsofSale")!=null )
	|| ( groupbyList_tWriteJSONField_2_Out.get(0).get(25)!=null 
		? !groupbyList_tWriteJSONField_2_Out.get(0).get(25).equals(
		valueMap_tWriteJSONField_2_Out.get("EffectiveDate")) 
		: 
		valueMap_tWriteJSONField_2_Out.get("EffectiveDate")!=null )
	|| ( groupbyList_tWriteJSONField_2_Out.get(0).get(26)!=null 
		? !groupbyList_tWriteJSONField_2_Out.get(0).get(26).equals(
		valueMap_tWriteJSONField_2_Out.get("ShipNotBeforeDate")) 
		: 
		valueMap_tWriteJSONField_2_Out.get("ShipNotBeforeDate")!=null )
	|| ( groupbyList_tWriteJSONField_2_Out.get(0).get(27)!=null 
		? !groupbyList_tWriteJSONField_2_Out.get(0).get(27).equals(
		valueMap_tWriteJSONField_2_Out.get("ShipNoLaterDate")) 
		: 
		valueMap_tWriteJSONField_2_Out.get("ShipNoLaterDate")!=null )
	|| ( groupbyList_tWriteJSONField_2_Out.get(0).get(28)!=null 
		? !groupbyList_tWriteJSONField_2_Out.get(0).get(28).equals(
		valueMap_tWriteJSONField_2_Out.get("CancelAfterDate")) 
		: 
		valueMap_tWriteJSONField_2_Out.get("CancelAfterDate")!=null )
	|| ( groupbyList_tWriteJSONField_2_Out.get(0).get(29)!=null 
		? !groupbyList_tWriteJSONField_2_Out.get(0).get(29).equals(
		valueMap_tWriteJSONField_2_Out.get("Brand")) 
		: 
		valueMap_tWriteJSONField_2_Out.get("Brand")!=null )
	|| ( groupbyList_tWriteJSONField_2_Out.get(0).get(30)!=null 
		? !groupbyList_tWriteJSONField_2_Out.get(0).get(30).equals(
		valueMap_tWriteJSONField_2_Out.get("OrderCurrency")) 
		: 
		valueMap_tWriteJSONField_2_Out.get("OrderCurrency")!=null )
	){
		org.dom4j.Element group0__tWriteJSONField_2_Out = org.dom4j.DocumentHelper.createElement("E");
        if(orders_tWriteJSONField_2_Out[0]==0){
        	orders_tWriteJSONField_2_Out[0] = 0;
        }
        if(1 < orders_tWriteJSONField_2_Out.length){
        		orders_tWriteJSONField_2_Out[1] = 0;
        }
        subTreeRootParent_tWriteJSONField_2_Out.elements().add(orders_tWriteJSONField_2_Out[0]++,group0__tWriteJSONField_2_Out);
		subTreeRootParent_tWriteJSONField_2_Out = group0__tWriteJSONField_2_Out;
		org.dom4j.Element group0__0_tWriteJSONField_2_Out = group0__tWriteJSONField_2_Out.addElement("NumberOfLines");
		if(
		valueMap_tWriteJSONField_2_Out.get("NumberOfLines")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(group0__0_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("NumberOfLines"));
		}
		org.dom4j.Element group0__1_tWriteJSONField_2_Out = group0__tWriteJSONField_2_Out.addElement("FileName");
		if(
		valueMap_tWriteJSONField_2_Out.get("FileName")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(group0__1_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("FileName"));
		}
		org.dom4j.Element group0__2_tWriteJSONField_2_Out = group0__tWriteJSONField_2_Out.addElement("Customer_EDI_ID");
		if(
		valueMap_tWriteJSONField_2_Out.get("Customer_EDI_ID")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(group0__2_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("Customer_EDI_ID"));
		}
		org.dom4j.Element group0__3_tWriteJSONField_2_Out = group0__tWriteJSONField_2_Out.addElement("Customer_Order_Number");
		if(
		valueMap_tWriteJSONField_2_Out.get("Customer_Order_Number")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(group0__3_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("Customer_Order_Number"));
		}
		org.dom4j.Element group0__4_tWriteJSONField_2_Out = group0__tWriteJSONField_2_Out.addElement("Document_Type");
		if(
		valueMap_tWriteJSONField_2_Out.get("Document_Type")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(group0__4_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("Document_Type"));
		}
		org.dom4j.Element group0__5_tWriteJSONField_2_Out = group0__tWriteJSONField_2_Out.addElement("Ship_To");
		if(
		valueMap_tWriteJSONField_2_Out.get("Ship_To")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(group0__5_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("Ship_To"));
		}
		org.dom4j.Element group0__6_tWriteJSONField_2_Out = group0__tWriteJSONField_2_Out.addElement("Invoice_To");
		if(
		valueMap_tWriteJSONField_2_Out.get("Invoice_To")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(group0__6_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("Invoice_To"));
		}
		org.dom4j.Element group0__7_tWriteJSONField_2_Out = group0__tWriteJSONField_2_Out.addElement("Order_By");
		if(
		valueMap_tWriteJSONField_2_Out.get("Order_By")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(group0__7_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("Order_By"));
		}
		org.dom4j.Element group0__8_tWriteJSONField_2_Out = group0__tWriteJSONField_2_Out.addElement("Vendor");
		if(
		valueMap_tWriteJSONField_2_Out.get("Vendor")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(group0__8_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("Vendor"));
		}
		org.dom4j.Element group0__9_tWriteJSONField_2_Out = group0__tWriteJSONField_2_Out.addElement("OrderDate");
		if(
		valueMap_tWriteJSONField_2_Out.get("OrderDate")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(group0__9_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("OrderDate"));
		}
		org.dom4j.Element group0__10_tWriteJSONField_2_Out = group0__tWriteJSONField_2_Out.addElement("Customer_Requested_Date");
		if(
		valueMap_tWriteJSONField_2_Out.get("Customer_Requested_Date")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(group0__10_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("Customer_Requested_Date"));
		}
		org.dom4j.Element group0__11_tWriteJSONField_2_Out = group0__tWriteJSONField_2_Out.addElement("Season");
		if(
		valueMap_tWriteJSONField_2_Out.get("Season")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(group0__11_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("Season"));
		}
		org.dom4j.Element group0__12_tWriteJSONField_2_Out = group0__tWriteJSONField_2_Out.addElement("Reference_Customer_Order");
		if(
		valueMap_tWriteJSONField_2_Out.get("ReferenceCustomerOrder")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(group0__12_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("ReferenceCustomerOrder"));
		}
		org.dom4j.Element group0__13_tWriteJSONField_2_Out = group0__tWriteJSONField_2_Out.addElement("Comment_1");
		if(
		valueMap_tWriteJSONField_2_Out.get("Comment_1")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(group0__13_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("Comment_1"));
		}
		org.dom4j.Element group0__14_tWriteJSONField_2_Out = group0__tWriteJSONField_2_Out.addElement("Comment_2");
		if(
		valueMap_tWriteJSONField_2_Out.get("Comment_2")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(group0__14_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("Comment_2"));
		}
		org.dom4j.Element group0__15_tWriteJSONField_2_Out = group0__tWriteJSONField_2_Out.addElement("Order_By_Name");
		if(
		valueMap_tWriteJSONField_2_Out.get("Order_By_Name")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(group0__15_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("Order_By_Name"));
		}
		org.dom4j.Element group0__16_tWriteJSONField_2_Out = group0__tWriteJSONField_2_Out.addElement("Order_By_Address");
		if(
		valueMap_tWriteJSONField_2_Out.get("Order_By_Address")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(group0__16_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("Order_By_Address"));
		}
		org.dom4j.Element group0__17_tWriteJSONField_2_Out = group0__tWriteJSONField_2_Out.addElement("Order_By_PostalCode");
		if(
		valueMap_tWriteJSONField_2_Out.get("Order_By_PostalCode")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(group0__17_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("Order_By_PostalCode"));
		}
		org.dom4j.Element group0__18_tWriteJSONField_2_Out = group0__tWriteJSONField_2_Out.addElement("Ship_To_Name");
		if(
		valueMap_tWriteJSONField_2_Out.get("Ship_To_Name")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(group0__18_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("Ship_To_Name"));
		}
		org.dom4j.Element group0__19_tWriteJSONField_2_Out = group0__tWriteJSONField_2_Out.addElement("Ship_To_Address");
		if(
		valueMap_tWriteJSONField_2_Out.get("Ship_To_Address")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(group0__19_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("Ship_To_Address"));
		}
		org.dom4j.Element group0__20_tWriteJSONField_2_Out = group0__tWriteJSONField_2_Out.addElement("Ship_To_PostalCode");
		if(
		valueMap_tWriteJSONField_2_Out.get("Ship_To_PostalCode")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(group0__20_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("Ship_To_PostalCode"));
		}
		org.dom4j.Element group0__21_tWriteJSONField_2_Out = group0__tWriteJSONField_2_Out.addElement("DepartmentNumber");
		if(
		valueMap_tWriteJSONField_2_Out.get("DepartmentNumber")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(group0__21_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("DepartmentNumber"));
		}
		org.dom4j.Element group0__22_tWriteJSONField_2_Out = group0__tWriteJSONField_2_Out.addElement("CustomerVendorNumber");
		if(
		valueMap_tWriteJSONField_2_Out.get("CustomerVendorNumber")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(group0__22_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("CustomerVendorNumber"));
		}
		org.dom4j.Element group0__23_tWriteJSONField_2_Out = group0__tWriteJSONField_2_Out.addElement("TransportInstructions");
		if(
		valueMap_tWriteJSONField_2_Out.get("TransportInstructions")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(group0__23_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("TransportInstructions"));
		}
		org.dom4j.Element group0__24_tWriteJSONField_2_Out = group0__tWriteJSONField_2_Out.addElement("TermsofSale");
		if(
		valueMap_tWriteJSONField_2_Out.get("TermsofSale")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(group0__24_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("TermsofSale"));
		}
		org.dom4j.Element group0__25_tWriteJSONField_2_Out = group0__tWriteJSONField_2_Out.addElement("EffectiveDate");
		if(
		valueMap_tWriteJSONField_2_Out.get("EffectiveDate")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(group0__25_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("EffectiveDate"));
		}
		org.dom4j.Element group0__26_tWriteJSONField_2_Out = group0__tWriteJSONField_2_Out.addElement("ShipNotBeforeDate");
		if(
		valueMap_tWriteJSONField_2_Out.get("ShipNotBeforeDate")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(group0__26_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("ShipNotBeforeDate"));
		}
		org.dom4j.Element group0__27_tWriteJSONField_2_Out = group0__tWriteJSONField_2_Out.addElement("ShipNoLaterDate");
		if(
		valueMap_tWriteJSONField_2_Out.get("ShipNoLaterDate")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(group0__27_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("ShipNoLaterDate"));
		}
		org.dom4j.Element group0__28_tWriteJSONField_2_Out = group0__tWriteJSONField_2_Out.addElement("CancelAfterDate");
		if(
		valueMap_tWriteJSONField_2_Out.get("CancelAfterDate")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(group0__28_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("CancelAfterDate"));
		}
		org.dom4j.Element group0__29_tWriteJSONField_2_Out = group0__tWriteJSONField_2_Out.addElement("Brand");
		if(
		valueMap_tWriteJSONField_2_Out.get("Brand")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(group0__29_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("Brand"));
		}
		org.dom4j.Element group0__30_tWriteJSONField_2_Out = group0__tWriteJSONField_2_Out.addElement("OrderCurrency");
		if(
		valueMap_tWriteJSONField_2_Out.get("OrderCurrency")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(group0__30_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("OrderCurrency"));
		}
		if(groupbyList_tWriteJSONField_2_Out.size()<=0){
        	groupbyList_tWriteJSONField_2_Out.add(new java.util.ArrayList<String>());
        }else{
        	groupbyList_tWriteJSONField_2_Out.get(0).clear();
        }
		groupbyList_tWriteJSONField_2_Out.get(0).add(
		valueMap_tWriteJSONField_2_Out.get("NumberOfLines"));
		groupbyList_tWriteJSONField_2_Out.get(0).add(
		valueMap_tWriteJSONField_2_Out.get("FileName"));
		groupbyList_tWriteJSONField_2_Out.get(0).add(
		valueMap_tWriteJSONField_2_Out.get("Customer_EDI_ID"));
		groupbyList_tWriteJSONField_2_Out.get(0).add(
		valueMap_tWriteJSONField_2_Out.get("Customer_Order_Number"));
		groupbyList_tWriteJSONField_2_Out.get(0).add(
		valueMap_tWriteJSONField_2_Out.get("Document_Type"));
		groupbyList_tWriteJSONField_2_Out.get(0).add(
		valueMap_tWriteJSONField_2_Out.get("Ship_To"));
		groupbyList_tWriteJSONField_2_Out.get(0).add(
		valueMap_tWriteJSONField_2_Out.get("Invoice_To"));
		groupbyList_tWriteJSONField_2_Out.get(0).add(
		valueMap_tWriteJSONField_2_Out.get("Order_By"));
		groupbyList_tWriteJSONField_2_Out.get(0).add(
		valueMap_tWriteJSONField_2_Out.get("Vendor"));
		groupbyList_tWriteJSONField_2_Out.get(0).add(
		valueMap_tWriteJSONField_2_Out.get("OrderDate"));
		groupbyList_tWriteJSONField_2_Out.get(0).add(
		valueMap_tWriteJSONField_2_Out.get("Customer_Requested_Date"));
		groupbyList_tWriteJSONField_2_Out.get(0).add(
		valueMap_tWriteJSONField_2_Out.get("Season"));
		groupbyList_tWriteJSONField_2_Out.get(0).add(
		valueMap_tWriteJSONField_2_Out.get("ReferenceCustomerOrder"));
		groupbyList_tWriteJSONField_2_Out.get(0).add(
		valueMap_tWriteJSONField_2_Out.get("Comment_1"));
		groupbyList_tWriteJSONField_2_Out.get(0).add(
		valueMap_tWriteJSONField_2_Out.get("Comment_2"));
		groupbyList_tWriteJSONField_2_Out.get(0).add(
		valueMap_tWriteJSONField_2_Out.get("Order_By_Name"));
		groupbyList_tWriteJSONField_2_Out.get(0).add(
		valueMap_tWriteJSONField_2_Out.get("Order_By_Address"));
		groupbyList_tWriteJSONField_2_Out.get(0).add(
		valueMap_tWriteJSONField_2_Out.get("Order_By_PostalCode"));
		groupbyList_tWriteJSONField_2_Out.get(0).add(
		valueMap_tWriteJSONField_2_Out.get("Ship_To_Name"));
		groupbyList_tWriteJSONField_2_Out.get(0).add(
		valueMap_tWriteJSONField_2_Out.get("Ship_To_Address"));
		groupbyList_tWriteJSONField_2_Out.get(0).add(
		valueMap_tWriteJSONField_2_Out.get("Ship_To_PostalCode"));
		groupbyList_tWriteJSONField_2_Out.get(0).add(
		valueMap_tWriteJSONField_2_Out.get("DepartmentNumber"));
		groupbyList_tWriteJSONField_2_Out.get(0).add(
		valueMap_tWriteJSONField_2_Out.get("CustomerVendorNumber"));
		groupbyList_tWriteJSONField_2_Out.get(0).add(
		valueMap_tWriteJSONField_2_Out.get("TransportInstructions"));
		groupbyList_tWriteJSONField_2_Out.get(0).add(
		valueMap_tWriteJSONField_2_Out.get("TermsofSale"));
		groupbyList_tWriteJSONField_2_Out.get(0).add(
		valueMap_tWriteJSONField_2_Out.get("EffectiveDate"));
		groupbyList_tWriteJSONField_2_Out.get(0).add(
		valueMap_tWriteJSONField_2_Out.get("ShipNotBeforeDate"));
		groupbyList_tWriteJSONField_2_Out.get(0).add(
		valueMap_tWriteJSONField_2_Out.get("ShipNoLaterDate"));
		groupbyList_tWriteJSONField_2_Out.get(0).add(
		valueMap_tWriteJSONField_2_Out.get("CancelAfterDate"));
		groupbyList_tWriteJSONField_2_Out.get(0).add(
		valueMap_tWriteJSONField_2_Out.get("Brand"));
		groupbyList_tWriteJSONField_2_Out.get(0).add(
		valueMap_tWriteJSONField_2_Out.get("OrderCurrency"));
        isNewElememt=true;
        if(groupElementList_tWriteJSONField_2_Out.size()<=0){
			groupElementList_tWriteJSONField_2_Out.add(group0__tWriteJSONField_2_Out);
        }else{
        	groupElementList_tWriteJSONField_2_Out.set(0,group0__tWriteJSONField_2_Out);
        }
        
	}else{
		subTreeRootParent_tWriteJSONField_2_Out=groupElementList_tWriteJSONField_2_Out.get(0);
	}
	// build loop xml tree
		org.dom4j.Element loop_tWriteJSONField_2_Out = org.dom4j.DocumentHelper.createElement("L");
        if(orders_tWriteJSONField_2_Out[1]==0){
        	orders_tWriteJSONField_2_Out[1] = 31;
        }
        if(2 < orders_tWriteJSONField_2_Out.length){
        		orders_tWriteJSONField_2_Out[2] = 0;
        }
        subTreeRootParent_tWriteJSONField_2_Out.elements().add(orders_tWriteJSONField_2_Out[1]++,loop_tWriteJSONField_2_Out);
		org.dom4j.Element loop_0_tWriteJSONField_2_Out = loop_tWriteJSONField_2_Out.addElement("LineNumber");
		if(
		valueMap_tWriteJSONField_2_Out.get("LineNumber")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(loop_0_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("LineNumber"));
		}
		org.dom4j.Element loop_1_tWriteJSONField_2_Out = loop_tWriteJSONField_2_Out.addElement("EAN_Client");
		if(
		valueMap_tWriteJSONField_2_Out.get("EAN_Client")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(loop_1_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("EAN_Client"));
		}
		org.dom4j.Element loop_2_tWriteJSONField_2_Out = loop_tWriteJSONField_2_Out.addElement("ItemDescription");
		if(
		valueMap_tWriteJSONField_2_Out.get("ItemDescription")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(loop_2_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("ItemDescription"));
		}
		org.dom4j.Element loop_3_tWriteJSONField_2_Out = loop_tWriteJSONField_2_Out.addElement("OrderedQuantity");
		if(
		valueMap_tWriteJSONField_2_Out.get("OrderedQuantity")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(loop_3_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("OrderedQuantity"));
		}
		org.dom4j.Element loop_4_tWriteJSONField_2_Out = loop_tWriteJSONField_2_Out.addElement("Discount_Code");
		if(
		valueMap_tWriteJSONField_2_Out.get("Discount_Code")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(loop_4_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("Discount_Code"));
		}
		org.dom4j.Element loop_5_tWriteJSONField_2_Out = loop_tWriteJSONField_2_Out.addElement("NetPrice");
		if(
		valueMap_tWriteJSONField_2_Out.get("NetPrice")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(loop_5_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("NetPrice"));
		}
		org.dom4j.Element loop_6_tWriteJSONField_2_Out = loop_tWriteJSONField_2_Out.addElement("OrderCurrency");
		if(
		valueMap_tWriteJSONField_2_Out.get("Currency")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(loop_6_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("Currency"));
		}
		org.dom4j.Element loop_7_tWriteJSONField_2_Out = loop_tWriteJSONField_2_Out.addElement("Size");
		if(
		valueMap_tWriteJSONField_2_Out.get("Size")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(loop_7_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("Size"));
		}
		org.dom4j.Element loop_8_tWriteJSONField_2_Out = loop_tWriteJSONField_2_Out.addElement("Color");
		if(
		valueMap_tWriteJSONField_2_Out.get("Color")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(loop_8_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("Color"));
		}
		org.dom4j.Element loop_9_tWriteJSONField_2_Out = loop_tWriteJSONField_2_Out.addElement("SeasonCode");
		if(
		valueMap_tWriteJSONField_2_Out.get("SeasonCode")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(loop_9_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("SeasonCode"));
		}
		org.dom4j.Element loop_10_tWriteJSONField_2_Out = loop_tWriteJSONField_2_Out.addElement("TicketType");
		if(
		valueMap_tWriteJSONField_2_Out.get("TicketType")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(loop_10_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("TicketType"));
		}
		org.dom4j.Element loop_11_tWriteJSONField_2_Out = loop_tWriteJSONField_2_Out.addElement("PricatPriceCode");
		if(
		valueMap_tWriteJSONField_2_Out.get("PricatPriceCode")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(loop_11_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("PricatPriceCode"));
		}
		org.dom4j.Element loop_12_tWriteJSONField_2_Out = loop_tWriteJSONField_2_Out.addElement("WarehouseCode");
		if(
		valueMap_tWriteJSONField_2_Out.get("WarehouseCode")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(loop_12_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("WarehouseCode"));
		}
		org.dom4j.Element loop_13_tWriteJSONField_2_Out = loop_tWriteJSONField_2_Out.addElement("UnitOfMeasure");
		if(
		valueMap_tWriteJSONField_2_Out.get("UnitOfMeasure")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(loop_13_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("UnitOfMeasure"));
		}
		org.dom4j.Element loop_14_tWriteJSONField_2_Out = loop_tWriteJSONField_2_Out.addElement("InformationPriceE");
		if(
		valueMap_tWriteJSONField_2_Out.get("InformationPriceE")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(loop_14_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("InformationPriceE"));
		}
		org.dom4j.Element loop_15_tWriteJSONField_2_Out = loop_tWriteJSONField_2_Out.addElement("InformationPriceF");
		if(
		valueMap_tWriteJSONField_2_Out.get("InformationPriceF")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(loop_15_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("InformationPriceF"));
		}
		org.dom4j.Element loop_16_tWriteJSONField_2_Out = loop_tWriteJSONField_2_Out.addElement("Picture");
		if(
		valueMap_tWriteJSONField_2_Out.get("Picture")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(loop_16_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("Picture"));
		}
		org.dom4j.Element loop_17_tWriteJSONField_2_Out = loop_tWriteJSONField_2_Out.addElement("SeriesNumber");
		if(
		valueMap_tWriteJSONField_2_Out.get("SeriesNumber")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(loop_17_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("SeriesNumber"));
		}
		org.dom4j.Element loop_18_tWriteJSONField_2_Out = loop_tWriteJSONField_2_Out.addElement("ModelNumber");
		if(
		valueMap_tWriteJSONField_2_Out.get("ModelNumber")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(loop_18_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("ModelNumber"));
		}
		org.dom4j.Element loop_19_tWriteJSONField_2_Out = loop_tWriteJSONField_2_Out.addElement("BuyerSizeCode");
		if(
		valueMap_tWriteJSONField_2_Out.get("BuyerSizeCode")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(loop_19_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("BuyerSizeCode"));
		}
		org.dom4j.Element loop_20_tWriteJSONField_2_Out = loop_tWriteJSONField_2_Out.addElement("EAN_Haddad");
		if(
		valueMap_tWriteJSONField_2_Out.get("EAN_Haddad")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(loop_20_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("EAN_Haddad"));
		}
		org.dom4j.Element loop_21_tWriteJSONField_2_Out = loop_tWriteJSONField_2_Out.addElement("BuyerItemNumber");
		if(
		valueMap_tWriteJSONField_2_Out.get("BuyerItemNumber")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(loop_21_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("BuyerItemNumber"));
		}
		org.dom4j.Element loop_22_tWriteJSONField_2_Out = loop_tWriteJSONField_2_Out.addElement("CountryofOrigin");
		if(
		valueMap_tWriteJSONField_2_Out.get("CountryofOrigin")!=null){
			nestXMLTool_tWriteJSONField_2_Out .setText(loop_22_tWriteJSONField_2_Out,
		valueMap_tWriteJSONField_2_Out.get("CountryofOrigin"));
		}

 


	tos_count_tWriteJSONField_2_Out++;

/**
 * [tWriteJSONField_2_Out main ] stop
 */
	
	/**
	 * [tWriteJSONField_2_Out process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_2";
	
	currentComponent="tWriteJSONField_2_Out";

	

 



/**
 * [tWriteJSONField_2_Out process_data_begin ] stop
 */
	
	/**
	 * [tWriteJSONField_2_Out process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_2";
	
	currentComponent="tWriteJSONField_2_Out";

	

 



/**
 * [tWriteJSONField_2_Out process_data_end ] stop
 */



	
	/**
	 * [tFileOutputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_end ] stop
 */

} // End of branch "output"




// Start of branch "out6"
if(out6 != null) { 



	
	/**
	 * [tMap_11 main ] start
	 */

	

	
	
	currentComponent="tMap_11";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out6");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_11 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_11 = false;
		  boolean mainRowRejected_tMap_11 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_11__Struct Var = Var__tMap_11;// ###############################
        // ###############################
        // # Output tables

out11 = null;

boolean rejected_tMap_11 = true;
// ###### START REJECTS ##### 

// # Output reject table : 'out11'
// # Filter conditions 
if( rejected_tMap_11 ) {
out11_tmp.Filename = out6.Filename ;
out11_tmp.PONumber = out6.PONumber ;
out11 = out11_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_11 = false;










 


	tos_count_tMap_11++;

/**
 * [tMap_11 main ] stop
 */
	
	/**
	 * [tMap_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_11";

	

 



/**
 * [tMap_11 process_data_begin ] stop
 */
// Start of branch "out11"
if(out11 != null) { 



	
	/**
	 * [tUniqRow_5 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out11");
					}
					
row28 = null;			
if(out11.Filename == null){
	finder_tUniqRow_5.Filename = null;
}else{
	finder_tUniqRow_5.Filename = out11.Filename.toLowerCase();
}
if(out11.PONumber == null){
	finder_tUniqRow_5.PONumber = null;
}else{
	finder_tUniqRow_5.PONumber = out11.PONumber.toLowerCase();
}	
finder_tUniqRow_5.hashCodeDirty = true;
if (!keystUniqRow_5.contains(finder_tUniqRow_5)) {
		KeyStruct_tUniqRow_5 new_tUniqRow_5 = new KeyStruct_tUniqRow_5();

		
if(out11.Filename == null){
	new_tUniqRow_5.Filename = null;
}else{
	new_tUniqRow_5.Filename = out11.Filename.toLowerCase();
}
if(out11.PONumber == null){
	new_tUniqRow_5.PONumber = null;
}else{
	new_tUniqRow_5.PONumber = out11.PONumber.toLowerCase();
}
		
		keystUniqRow_5.add(new_tUniqRow_5);if(row28 == null){ 
	
	row28 = new row28Struct();
}row28.Filename = out11.Filename;			row28.PONumber = out11.PONumber;					
		nb_uniques_tUniqRow_5++;
	} else {
	  nb_duplicates_tUniqRow_5++;
	}

 


	tos_count_tUniqRow_5++;

/**
 * [tUniqRow_5 main ] stop
 */
	
	/**
	 * [tUniqRow_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_5";

	

 



/**
 * [tUniqRow_5 process_data_begin ] stop
 */
// Start of branch "row28"
if(row28 != null) { 



	
	/**
	 * [tFileOutputDelimited_3 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row28");
					}
					


                    StringBuilder sb_tFileOutputDelimited_3 = new StringBuilder();
                            if(row28.Filename != null) {
                        sb_tFileOutputDelimited_3.append(
                            row28.Filename
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(row28.PONumber != null) {
                        sb_tFileOutputDelimited_3.append(
                            row28.PONumber
                        );
                            }
                    sb_tFileOutputDelimited_3.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_3);


                    nb_line_tFileOutputDelimited_3++;
                    resourceMap.put("nb_line_tFileOutputDelimited_3", nb_line_tFileOutputDelimited_3);

                        outtFileOutputDelimited_3.write(sb_tFileOutputDelimited_3.toString());




 


	tos_count_tFileOutputDelimited_3++;

/**
 * [tFileOutputDelimited_3 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";

	

 



/**
 * [tFileOutputDelimited_3 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";

	

 



/**
 * [tFileOutputDelimited_3 process_data_end ] stop
 */

} // End of branch "row28"




	
	/**
	 * [tUniqRow_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_5";

	

 



/**
 * [tUniqRow_5 process_data_end ] stop
 */

} // End of branch "out11"




	
	/**
	 * [tMap_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_11";

	

 



/**
 * [tMap_11 process_data_end ] stop
 */

} // End of branch "out6"




// Start of branch "output_PONumber"
if(output_PONumber != null) { 



	
	/**
	 * [tJavaRow_4 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"output_PONumber");
					}
					

    // code sample:
//
// multiply by 2 the row identifier
// output_row.id = output_PONumber.id * 2;
//
// lowercase the name

String OrderPONumber = "'" + output_PONumber.OrderPONumber + "',";


System.out.println("OrderPONumber :: " + output_PONumber.OrderPONumber);
System.out.println("newColumn :: " + output_PONumber.newColumn);

globalMap.put("OrderPONumber", (String)globalMap.get("OrderPONumber") + OrderPONumber ); 
System.out.println("(String)globalMap.get() ::  " + (String)globalMap.get("OrderPONumber")  );

System.out.println("(String)globalMap.get()3 ::  " + ((String)globalMap.get("tFileList_1_CURRENT_FILEPATH"))  );








    nb_line_tJavaRow_4++;   

 


	tos_count_tJavaRow_4++;

/**
 * [tJavaRow_4 main ] stop
 */
	
	/**
	 * [tJavaRow_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";

	

 



/**
 * [tJavaRow_4 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";

	

 



/**
 * [tJavaRow_4 process_data_end ] stop
 */

} // End of branch "output_PONumber"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tFileInputFullRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputFullRow_1";

	

 



/**
 * [tFileInputFullRow_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputFullRow_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputFullRow_1";

	

	


            }
           	}finally{
           		if(fid_tFileInputFullRow_1!=null){
            		fid_tFileInputFullRow_1.close();
            	}
            }
            globalMap.put("tFileInputFullRow_1_NB_LINE", fid_tFileInputFullRow_1.getRowNumber());
 

ok_Hash.put("tFileInputFullRow_1", true);
end_Hash.put("tFileInputFullRow_1", System.currentTimeMillis());




/**
 * [tFileInputFullRow_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	



		
			
					if(outtFileOutputDelimited_1!=null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
				
				globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"output");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tJava_1Process(globalMap);



/**
 * [tFileOutputDelimited_1 end ] stop
 */

	
	/**
	 * [tWriteJSONField_2_Out end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_2";
	
	currentComponent="tWriteJSONField_2_Out";

	

if(nb_line_tWriteJSONField_2_Out > 0){  
    nestXMLTool_tWriteJSONField_2_Out.replaceDefaultNameSpace(doc_tWriteJSONField_2_Out.getRootElement());
	java.io.StringWriter strWriter_tWriteJSONField_2_Out = new java.io.StringWriter();
	org.dom4j.io.XMLWriter output_tWriteJSONField_2_Out = new org.dom4j.io.XMLWriter(strWriter_tWriteJSONField_2_Out, format_tWriteJSONField_2_Out);
	output_tWriteJSONField_2_Out.write(doc_tWriteJSONField_2_Out);
    output_tWriteJSONField_2_Out.close();
					row2Struct row_tWriteJSONField_2_Out = new row2Struct();
						  
					     		row_tWriteJSONField_2_Out.E = strWriter_tWriteJSONField_2_Out.toString();
					     		listGroupby_tWriteJSONField_2_Out.add(row_tWriteJSONField_2_Out);
		    		

}
globalMap.put("tWriteJSONField_2_Out_NB_LINE",nb_line_tWriteJSONField_2_Out);
globalMap.put("tWriteJSONField_2_In_FINISH" + (listGroupby_tWriteJSONField_2_Out==null?"":listGroupby_tWriteJSONField_2_Out.hashCode()), "true");
	
		txf_tWriteJSONField_2_Out.join();
		if(txf_tWriteJSONField_2_Out.getLastException()!=null) {
			currentComponent = txf_tWriteJSONField_2_Out.getCurrentComponent();
			throw txf_tWriteJSONField_2_Out.getLastException();
		}
	
resourceMap.put("finish_tWriteJSONField_2_Out", true);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tWriteJSONField_2_Out", true);
end_Hash.put("tWriteJSONField_2_Out", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk", 0, "ok");
				}



/**
 * [tWriteJSONField_2_Out end ] stop
 */







	
	/**
	 * [tMap_11 end ] start
	 */

	

	
	
	currentComponent="tMap_11";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out6");
			  	}
			  	
 

ok_Hash.put("tMap_11", true);
end_Hash.put("tMap_11", System.currentTimeMillis());




/**
 * [tMap_11 end ] stop
 */

	
	/**
	 * [tUniqRow_5 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_5";

	

globalMap.put("tUniqRow_5_NB_UNIQUES",nb_uniques_tUniqRow_5);
globalMap.put("tUniqRow_5_NB_DUPLICATES",nb_duplicates_tUniqRow_5);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out11");
			  	}
			  	
 

ok_Hash.put("tUniqRow_5", true);
end_Hash.put("tUniqRow_5", System.currentTimeMillis());




/**
 * [tUniqRow_5 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_3 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";

	



		
			
					if(outtFileOutputDelimited_3!=null) {
						outtFileOutputDelimited_3.flush();
						outtFileOutputDelimited_3.close();
					}
				
				globalMap.put("tFileOutputDelimited_3_NB_LINE",nb_line_tFileOutputDelimited_3);
				globalMap.put("tFileOutputDelimited_3_FILE_NAME",fileName_tFileOutputDelimited_3);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_3", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row28");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_3", true);
end_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_3 end ] stop
 */










	
	/**
	 * [tJavaRow_4 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";

	

globalMap.put("tJavaRow_4_NB_LINE",nb_line_tJavaRow_4);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"output_PONumber");
			  	}
			  	
 

ok_Hash.put("tJavaRow_4", true);
end_Hash.put("tJavaRow_4", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tJava_2Process(globalMap);



/**
 * [tJavaRow_4 end ] stop
 */






						if(execStat){
							runStat.updateStatOnConnection("iterate2", 2, "exec" + NB_ITERATE_tFileInputFullRow_1);
						}				
					




	
	/**
	 * [tFileList_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileList_1";

	

 



/**
 * [tFileList_1 process_data_end ] stop
 */
	
	/**
	 * [tFileList_1 end ] start
	 */

	

	
	
	currentComponent="tFileList_1";

	

  
    }
  globalMap.put("tFileList_1_NB_FILE", NB_FILEtFileList_1);
  

  
 

 

ok_Hash.put("tFileList_1", true);
end_Hash.put("tFileList_1", System.currentTimeMillis());




/**
 * [tFileList_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileList_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk10", 0, "ok");
								} 
							
							tSalesforceInput_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row27"); 
				     			
				try{
					
	
	/**
	 * [tFileList_1 finally ] start
	 */

	

	
	
	currentComponent="tFileList_1";

	

 



/**
 * [tFileList_1 finally ] stop
 */

	
	/**
	 * [tFileInputFullRow_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputFullRow_1";

	

 



/**
 * [tFileInputFullRow_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_1");
						if(outtFileOutputDelimited_1!=null) {
							outtFileOutputDelimited_1.flush();
							outtFileOutputDelimited_1.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */

	
	/**
	 * [tWriteJSONField_2_Out finally ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_2";
	
	currentComponent="tWriteJSONField_2_Out";

	

		java.util.Queue listGroupby_tWriteJSONField_2_Out = (java.util.Queue)globalMap.get("queue_tWriteJSONField_2_In");
		if(resourceMap.get("finish_tWriteJSONField_2_Out") == null){
			globalMap.put("tWriteJSONField_2_In_FINISH_WITH_EXCEPTION" + (listGroupby_tWriteJSONField_2_Out==null?"":listGroupby_tWriteJSONField_2_Out.hashCode()), "true");
		}
	
	if (listGroupby_tWriteJSONField_2_Out != null) {
		globalMap.put("tWriteJSONField_2_In_FINISH" + (listGroupby_tWriteJSONField_2_Out==null?"":listGroupby_tWriteJSONField_2_Out.hashCode()), "true");
	}

 



/**
 * [tWriteJSONField_2_Out finally ] stop
 */







	
	/**
	 * [tMap_11 finally ] start
	 */

	

	
	
	currentComponent="tMap_11";

	

 



/**
 * [tMap_11 finally ] stop
 */

	
	/**
	 * [tUniqRow_5 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_5";

	

 



/**
 * [tUniqRow_5 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_3 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";

	


		if(resourceMap.get("finish_tFileOutputDelimited_3") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_3 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_3");
						if(outtFileOutputDelimited_3!=null) {
							outtFileOutputDelimited_3.flush();
							outtFileOutputDelimited_3.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_3 finally ] stop
 */










	
	/**
	 * [tJavaRow_4 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";

	

 



/**
 * [tJavaRow_4 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileList_1_SUBPROCESS_STATE", 1);
	}
	


public static class row25Struct implements routines.system.IPersistableRow<row25Struct> {
    final static byte[] commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI = new byte[0];
    static byte[] commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[0];

	
			    public String Filename;

				public String getFilename () {
					return this.Filename;
				}
				
			    public String PONumber;

				public String getPONumber () {
					return this.PONumber;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length) {
				if(length < 1024 && commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length == 0) {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[1024];
				} else {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length);
			strReturn = new String(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI) {

        	try {

        		int length = 0;
		
					this.Filename = readString(dis);
					
					this.PONumber = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Filename,dos);
					
					// String
				
						writeString(this.PONumber,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Filename="+Filename);
		sb.append(",PONumber="+PONumber);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row25Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out5Struct implements routines.system.IPersistableRow<out5Struct> {
    final static byte[] commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI = new byte[0];
    static byte[] commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[0];

	
			    public String Filename;

				public String getFilename () {
					return this.Filename;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length) {
				if(length < 1024 && commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length == 0) {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[1024];
				} else {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length);
			strReturn = new String(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI) {

        	try {

        		int length = 0;
		
					this.Filename = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Filename,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Filename="+Filename);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class ImportedFileStruct implements routines.system.IPersistableRow<ImportedFileStruct> {
    final static byte[] commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI = new byte[0];
    static byte[] commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[0];

	
			    public String Filename;

				public String getFilename () {
					return this.Filename;
				}
				
			    public String PONumber;

				public String getPONumber () {
					return this.PONumber;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length) {
				if(length < 1024 && commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length == 0) {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[1024];
				} else {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length);
			strReturn = new String(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI) {

        	try {

        		int length = 0;
		
					this.Filename = readString(dis);
					
					this.PONumber = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Filename,dos);
					
					// String
				
						writeString(this.PONumber,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Filename="+Filename);
		sb.append(",PONumber="+PONumber);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ImportedFileStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row14Struct implements routines.system.IPersistableRow<row14Struct> {
    final static byte[] commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI = new byte[0];
    static byte[] commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[0];

	
			    public String Id;

				public String getId () {
					return this.Id;
				}
				
			    public String OrderNumber;

				public String getOrderNumber () {
					return this.OrderNumber;
				}
				
			    public String Purchase_Order_Number_Haddad__c;

				public String getPurchase_Order_Number_Haddad__c () {
					return this.Purchase_Order_Number_Haddad__c;
				}
				
			    public java.util.Date CreatedDate;

				public java.util.Date getCreatedDate () {
					return this.CreatedDate;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length) {
				if(length < 1024 && commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length == 0) {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[1024];
				} else {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length);
			strReturn = new String(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI) {

        	try {

        		int length = 0;
		
					this.Id = readString(dis);
					
					this.OrderNumber = readString(dis);
					
					this.Purchase_Order_Number_Haddad__c = readString(dis);
					
					this.CreatedDate = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Id,dos);
					
					// String
				
						writeString(this.OrderNumber,dos);
					
					// String
				
						writeString(this.Purchase_Order_Number_Haddad__c,dos);
					
					// java.util.Date
				
						writeDate(this.CreatedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id="+Id);
		sb.append(",OrderNumber="+OrderNumber);
		sb.append(",Purchase_Order_Number_Haddad__c="+Purchase_Order_Number_Haddad__c);
		sb.append(",CreatedDate="+String.valueOf(CreatedDate));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row14Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tSalesforceInput_1Struct implements routines.system.IPersistableRow<after_tSalesforceInput_1Struct> {
    final static byte[] commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI = new byte[0];
    static byte[] commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[0];

	
			    public String Id;

				public String getId () {
					return this.Id;
				}
				
			    public String OrderNumber;

				public String getOrderNumber () {
					return this.OrderNumber;
				}
				
			    public String Purchase_Order_Number_Haddad__c;

				public String getPurchase_Order_Number_Haddad__c () {
					return this.Purchase_Order_Number_Haddad__c;
				}
				
			    public java.util.Date CreatedDate;

				public java.util.Date getCreatedDate () {
					return this.CreatedDate;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length) {
				if(length < 1024 && commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length == 0) {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[1024];
				} else {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length);
			strReturn = new String(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI) {

        	try {

        		int length = 0;
		
					this.Id = readString(dis);
					
					this.OrderNumber = readString(dis);
					
					this.Purchase_Order_Number_Haddad__c = readString(dis);
					
					this.CreatedDate = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Id,dos);
					
					// String
				
						writeString(this.OrderNumber,dos);
					
					// String
				
						writeString(this.Purchase_Order_Number_Haddad__c,dos);
					
					// java.util.Date
				
						writeDate(this.CreatedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id="+Id);
		sb.append(",OrderNumber="+OrderNumber);
		sb.append(",Purchase_Order_Number_Haddad__c="+Purchase_Order_Number_Haddad__c);
		sb.append(",CreatedDate="+String.valueOf(CreatedDate));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tSalesforceInput_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tSalesforceInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSalesforceInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tFileInputDelimited_1Process(globalMap);

		row14Struct row14 = new row14Struct();
out5Struct out5 = new out5Struct();
ImportedFileStruct ImportedFile = new ImportedFileStruct();
row25Struct row25 = new row25Struct();





	
	/**
	 * [tFlowToIterate_1 begin ] start
	 */

				
			int NB_ITERATE_tFileCopy_1 = 0; //for statistics
			

	
		
		ok_Hash.put("tFlowToIterate_1", false);
		start_Hash.put("tFlowToIterate_1", System.currentTimeMillis());
		
	
	currentComponent="tFlowToIterate_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out5");
					}
				
		int tos_count_tFlowToIterate_1 = 0;
		

int nb_line_tFlowToIterate_1 = 0;
int counter_tFlowToIterate_1 = 0;

 



/**
 * [tFlowToIterate_1 begin ] stop
 */





	
	/**
	 * [tFileOutputDelimited_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_4", false);
		start_Hash.put("tFileOutputDelimited_4", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row25");
					}
				
		int tos_count_tFileOutputDelimited_4 = 0;
		

String fileName_tFileOutputDelimited_4 = "";
    fileName_tFileOutputDelimited_4 = (new java.io.File("//srv-ftp/FTP/FTP_COMARCH/PROD/IN/ORDER/ARCHIVE/listOfFileImportedInSF")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_4 = null;
    String extension_tFileOutputDelimited_4 = null;
    String directory_tFileOutputDelimited_4 = null;
    if((fileName_tFileOutputDelimited_4.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_4.lastIndexOf(".") < fileName_tFileOutputDelimited_4.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
            extension_tFileOutputDelimited_4 = "";
        } else {
            fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0, fileName_tFileOutputDelimited_4.lastIndexOf("."));
            extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(fileName_tFileOutputDelimited_4.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0, fileName_tFileOutputDelimited_4.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_4.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0, fileName_tFileOutputDelimited_4.lastIndexOf("."));
            extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(fileName_tFileOutputDelimited_4.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
            extension_tFileOutputDelimited_4 = "";
        }
        directory_tFileOutputDelimited_4 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_4 = true;
    java.io.File filetFileOutputDelimited_4 = new java.io.File(fileName_tFileOutputDelimited_4);
    globalMap.put("tFileOutputDelimited_4_FILE_NAME",fileName_tFileOutputDelimited_4);
        if(filetFileOutputDelimited_4.exists()){
            isFileGenerated_tFileOutputDelimited_4 = false;
        }
            int nb_line_tFileOutputDelimited_4 = 0;
            int splitedFileNo_tFileOutputDelimited_4 = 0;
            int currentRow_tFileOutputDelimited_4 = 0;

            final String OUT_DELIM_tFileOutputDelimited_4 = /** Start field tFileOutputDelimited_4:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_4:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_4 = /** Start field tFileOutputDelimited_4:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_4:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_4 != null && directory_tFileOutputDelimited_4.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_4 = new java.io.File(directory_tFileOutputDelimited_4);
                        if(!dir_tFileOutputDelimited_4.exists()) {
                            dir_tFileOutputDelimited_4.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_4 = null;

                        outtFileOutputDelimited_4 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_4, true),"ISO-8859-15"));
                                    if(filetFileOutputDelimited_4.length()==0){
                                        outtFileOutputDelimited_4.write("Filename");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("PONumber");
                                        outtFileOutputDelimited_4.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.flush();
                                    }


        resourceMap.put("out_tFileOutputDelimited_4", outtFileOutputDelimited_4);
resourceMap.put("nb_line_tFileOutputDelimited_4", nb_line_tFileOutputDelimited_4);

 



/**
 * [tFileOutputDelimited_4 begin ] stop
 */



	
	/**
	 * [tUniqRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_3", false);
		start_Hash.put("tUniqRow_3", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"ImportedFile");
					}
				
		int tos_count_tUniqRow_3 = 0;
		

	
		class KeyStruct_tUniqRow_3 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String Filename;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.Filename == null) ? 0 : this.Filename.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_3 other = (KeyStruct_tUniqRow_3) obj;
				
									if (this.Filename == null) {
										if (other.Filename != null) 
											return false;
								
									} else if (!this.Filename.equals(other.Filename))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_3 = 0;
int nb_duplicates_tUniqRow_3 = 0;
KeyStruct_tUniqRow_3 finder_tUniqRow_3 = new KeyStruct_tUniqRow_3();
java.util.Set<KeyStruct_tUniqRow_3> keystUniqRow_3 = new java.util.HashSet<KeyStruct_tUniqRow_3>(); 

 



/**
 * [tUniqRow_3 begin ] stop
 */



	
	/**
	 * [tMap_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_8", false);
		start_Hash.put("tMap_8", System.currentTimeMillis());
		
	
	currentComponent="tMap_8";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row14");
					}
				
		int tos_count_tMap_8 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct> tHash_Lookup_row18 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct>) 
					globalMap.get( "tHash_Lookup_row18" ))
					;					
					
	

row18Struct row18HashKey = new row18Struct();
row18Struct row18Default = new row18Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_8__Struct  {
}
Var__tMap_8__Struct Var__tMap_8 = new Var__tMap_8__Struct();
// ###############################

// ###############################
// # Outputs initialization
out5Struct out5_tmp = new out5Struct();
ImportedFileStruct ImportedFile_tmp = new ImportedFileStruct();
// ###############################

        
        



        









 



/**
 * [tMap_8 begin ] stop
 */



	
	/**
	 * [tSalesforceInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tSalesforceInput_1", false);
		start_Hash.put("tSalesforceInput_1", System.currentTimeMillis());
		
	
	currentComponent="tSalesforceInput_1";

	
		int tos_count_tSalesforceInput_1 = 0;
		


org.talend.components.api.component.ComponentDefinition def_tSalesforceInput_1 =
        new org.talend.components.salesforce.tsalesforceinput.TSalesforceInputDefinition();

org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties props_tSalesforceInput_1 =
        (org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties) def_tSalesforceInput_1.createRuntimeProperties();
 		                    props_tSalesforceInput_1.setValue("queryMode",
 		                        org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties.QueryMode.Query);
 		                    
 		                    props_tSalesforceInput_1.setValue("manualQuery",
 		                    true);
 		                    
 		                    props_tSalesforceInput_1.setValue("query",
 		                    " SELECT Id, OrderNumber, Purchase_Order_Number_Haddad__c, CreatedDate \nFROM Order  where Purchase_Order_Number_Haddad_"
+"_c in (" + (String)globalMap.get("OrderPONumbers") + ")");
 		                    
 		                    props_tSalesforceInput_1.setValue("includeDeleted",
 		                    false);
 		                    
 		                    props_tSalesforceInput_1.setValue("batchSize",
 		                    250);
 		                    
 		                    props_tSalesforceInput_1.setValue("normalizeDelimiter",
 		                    ";");
 		                    
 		                    props_tSalesforceInput_1.setValue("columnNameDelimiter",
 		                    "_");
 		                    
 		                    props_tSalesforceInput_1.connection.setValue("endpoint",
 		                    "https://login.salesforce.com/services/Soap/u/45.0");
 		                    
 		                    props_tSalesforceInput_1.connection.setValue("loginType",
 		                        org.talend.components.salesforce.SalesforceConnectionProperties.LoginType.Basic);
 		                    
 		                    props_tSalesforceInput_1.connection.setValue("reuseSession",
 		                    false);
 		                    
 		                    props_tSalesforceInput_1.connection.setValue("needCompression",
 		                    false);
 		                    
 		                    props_tSalesforceInput_1.connection.setValue("timeout",
 		                    60000);
 		                    
 		                    props_tSalesforceInput_1.connection.setValue("httpChunked",
 		                    true);
 		                    
 		                    props_tSalesforceInput_1.connection.setValue("clientId",
 		                    "systemuser@haddadeurope.com");
 		                    
 		                        props_tSalesforceInput_1.connection.userPassword.setValue("securityKey",
 		                        routines.system.PasswordEncryptUtil.decryptPassword("ENC:[TlCEkwHh6eDeFIl+kaKJkOT1+S8URLVU3NB9Ofy/u/mvhWI9QGd4WBnVE1WdYKnRHqqsUKQ=]"));
 		                        
 		                    props_tSalesforceInput_1.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_1.connection.userPassword.setValue("userId",
 		                    "systemuser@haddadeurope.com");
 		                    
 		                        props_tSalesforceInput_1.connection.userPassword.setValue("password",
 		                        routines.system.PasswordEncryptUtil.decryptPassword("ENC:[0Rc+PVOpyFXI+c5gsUJ7SLD/wwO7dXjNF0tkBJgFYZYJIIOJRCMrooJeBFWj]"));
 		                        
 		                    props_tSalesforceInput_1.connection.proxy.setValue("useProxy",
 		                    false);
 		                    
 		                    props_tSalesforceInput_1.connection.proxy.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_1.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSalesforceConnection");
 		                    
 		                    props_tSalesforceInput_1.module.setValue("moduleName",
 		                    "");
 		                    
 		                    props_tSalesforceInput_1.module.connection.setValue("endpoint",
 		                    "https://login.salesforce.com/services/Soap/u/45.0");
 		                    
 		                    props_tSalesforceInput_1.module.connection.setValue("loginType",
 		                        org.talend.components.salesforce.SalesforceConnectionProperties.LoginType.Basic);
 		                    
 		                    props_tSalesforceInput_1.module.connection.setValue("reuseSession",
 		                    false);
 		                    
 		                    props_tSalesforceInput_1.module.connection.setValue("needCompression",
 		                    false);
 		                    
 		                    props_tSalesforceInput_1.module.connection.setValue("timeout",
 		                    60000);
 		                    
 		                    props_tSalesforceInput_1.module.connection.setValue("httpChunked",
 		                    true);
 		                    
 		                    props_tSalesforceInput_1.module.connection.setValue("clientId",
 		                    "systemuser@haddadeurope.com");
 		                    
 		                        props_tSalesforceInput_1.module.connection.userPassword.setValue("securityKey",
 		                        routines.system.PasswordEncryptUtil.decryptPassword("ENC:[jt8DJXkqQjrZqTRJ4yPMRMly3e70+xhYM6RjJZCX03n9uJcpsE/WrrOCw5IAC7SMon14IBo=]"));
 		                        
 		                    props_tSalesforceInput_1.module.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_1.module.connection.userPassword.setValue("userId",
 		                    "systemuser@haddadeurope.com");
 		                    
 		                        props_tSalesforceInput_1.module.connection.userPassword.setValue("password",
 		                        routines.system.PasswordEncryptUtil.decryptPassword("ENC:[vER/2Jmi6qQR8P/GjG2fT+eH8F1GzVYNc+uUZLzfAgsD/pYZLyM0yjTVHx8E]"));
 		                        
 		                    props_tSalesforceInput_1.module.connection.proxy.setValue("useProxy",
 		                    false);
 		                    
 		                    props_tSalesforceInput_1.module.connection.proxy.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_1.module.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSalesforceConnection");
 		                    
 		                    class SchemaSettingTool_tSalesforceInput_1_1_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"GuessedSchema\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"Id\",\"type\":\"string\",\"talend.field.length\":\"18\"},{",s);
     		                    						
     		                    						a("\"name\":\"OrderNumber\",\"type\":\"string\",\"talend.field.length\":\"30\"},{",s);
     		                    						
     		                    						a("\"name\":\"Purchase_Order_Number_Haddad__c\",\"type\":[\"string\",\"null\"],\"talend.field.length\":\"40\"},{",s);
     		                    						
     		                    						a("\"name\":\"CreatedDate\",\"type\":{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"talend.field.pattern\":\"yyyy-MM-dd'T'HH:mm:ss'.000Z'\"}]}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tSalesforceInput_1_1_fisrt sst_tSalesforceInput_1_1_fisrt = new SchemaSettingTool_tSalesforceInput_1_1_fisrt();
 		                    
 		                    props_tSalesforceInput_1.module.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tSalesforceInput_1_1_fisrt.getSchemaValue()));
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceInput_1.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tSalesforceInput_1 = props_tSalesforceInput_1.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tSalesforceInput_1 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceInput_1 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tSalesforceInput_1 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tSalesforceInput_1.connection.referencedComponent.setReference(referencedComponentProperties_tSalesforceInput_1);
        }
    }
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceInput_1.module.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tSalesforceInput_1 = props_tSalesforceInput_1.module.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tSalesforceInput_1 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceInput_1 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tSalesforceInput_1 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tSalesforceInput_1.module.connection.referencedComponent.setReference(referencedComponentProperties_tSalesforceInput_1);
        }
    }
globalMap.put("tSalesforceInput_1_COMPONENT_RUNTIME_PROPERTIES", props_tSalesforceInput_1);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "7.3");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.28.0.SNAPSHOT");
java.net.URL mappings_url_tSalesforceInput_1= this.getClass().getResource("/xmlMappings");
globalMap.put("tSalesforceInput_1_MAPPINGS_URL", mappings_url_tSalesforceInput_1);

org.talend.components.api.container.RuntimeContainer container_tSalesforceInput_1 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tSalesforceInput_1";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tSalesforceInput_1 = 0;

org.talend.components.api.component.ConnectorTopology topology_tSalesforceInput_1 = null;
topology_tSalesforceInput_1 = org.talend.components.api.component.ConnectorTopology.OUTGOING;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tSalesforceInput_1 = def_tSalesforceInput_1.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tSalesforceInput_1, topology_tSalesforceInput_1);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tSalesforceInput_1 = def_tSalesforceInput_1.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tSalesforceInput_1 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tSalesforceInput_1.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tSalesforceInput_1 = componentRuntime_tSalesforceInput_1.initialize(container_tSalesforceInput_1, props_tSalesforceInput_1);

if (initVr_tSalesforceInput_1.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tSalesforceInput_1.getMessage());
}

if(componentRuntime_tSalesforceInput_1 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tSalesforceInput_1 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tSalesforceInput_1;
	compDriverInitialization_tSalesforceInput_1.runAtDriver(container_tSalesforceInput_1);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tSalesforceInput_1 = null;
if(componentRuntime_tSalesforceInput_1 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tSalesforceInput_1 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tSalesforceInput_1;
	org.talend.daikon.properties.ValidationResult vr_tSalesforceInput_1 = sourceOrSink_tSalesforceInput_1.validate(container_tSalesforceInput_1);
	if (vr_tSalesforceInput_1.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    	throw new RuntimeException(vr_tSalesforceInput_1.getMessage());
	}
}

    org.talend.components.api.component.runtime.Source source_tSalesforceInput_1 =
            (org.talend.components.api.component.runtime.Source)sourceOrSink_tSalesforceInput_1;
    org.talend.components.api.component.runtime.Reader reader_tSalesforceInput_1 =
            source_tSalesforceInput_1.createReader(container_tSalesforceInput_1);
	reader_tSalesforceInput_1 = new org.talend.codegen.flowvariables.runtime.FlowVariablesReader(reader_tSalesforceInput_1, container_tSalesforceInput_1);

        boolean multi_output_is_allowed_tSalesforceInput_1 = false;
        org.talend.components.api.component.Connector c_tSalesforceInput_1 = null;
        for (org.talend.components.api.component.Connector currentConnector : props_tSalesforceInput_1.getAvailableConnectors(null, true)) {
            if (currentConnector.getName().equals("MAIN")) {
                c_tSalesforceInput_1 = currentConnector;
            }

            if (currentConnector.getName().equals("REJECT")) {//it's better to move the code to javajet
                multi_output_is_allowed_tSalesforceInput_1 = true;
            }
        }
        org.apache.avro.Schema schema_tSalesforceInput_1 = props_tSalesforceInput_1.getSchema(c_tSalesforceInput_1, true);

        org.talend.codegen.enforcer.OutgoingSchemaEnforcer outgoingEnforcer_tSalesforceInput_1 = org.talend.codegen.enforcer.EnforcerCreator.createOutgoingEnforcer(schema_tSalesforceInput_1, false);

        // Create a reusable factory that converts the output of the reader to an IndexedRecord.
        org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord> factory_tSalesforceInput_1 = null;

    // Iterate through the incoming data.
    boolean available_tSalesforceInput_1 = reader_tSalesforceInput_1.start();

    resourceMap.put("reader_tSalesforceInput_1", reader_tSalesforceInput_1);

    for (; available_tSalesforceInput_1; available_tSalesforceInput_1 = reader_tSalesforceInput_1.advance()) {
    	nb_line_tSalesforceInput_1++;

    	
        if (multi_output_is_allowed_tSalesforceInput_1) {
                row14 = null;

        }

        try {
            Object data_tSalesforceInput_1 = reader_tSalesforceInput_1.getCurrent();

                if(multi_output_is_allowed_tSalesforceInput_1) {
                    row14 = new row14Struct();
                }

        // Construct the factory once when the first data arrives.
        if (factory_tSalesforceInput_1 == null) {
            factory_tSalesforceInput_1 = (org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord>)
                    new org.talend.daikon.avro.AvroRegistry()
                            .createIndexedRecordConverter(data_tSalesforceInput_1.getClass());
        }

        // Enforce the outgoing schema on the input.
        outgoingEnforcer_tSalesforceInput_1.setWrapped(factory_tSalesforceInput_1.convertToAvro(data_tSalesforceInput_1));
                Object columnValue_0_tSalesforceInput_1 = outgoingEnforcer_tSalesforceInput_1.get(0);
                        row14.Id = (String) (columnValue_0_tSalesforceInput_1);
                Object columnValue_1_tSalesforceInput_1 = outgoingEnforcer_tSalesforceInput_1.get(1);
                        row14.OrderNumber = (String) (columnValue_1_tSalesforceInput_1);
                Object columnValue_2_tSalesforceInput_1 = outgoingEnforcer_tSalesforceInput_1.get(2);
                        row14.Purchase_Order_Number_Haddad__c = (String) (columnValue_2_tSalesforceInput_1);
                Object columnValue_3_tSalesforceInput_1 = outgoingEnforcer_tSalesforceInput_1.get(3);
                        row14.CreatedDate = (java.util.Date) (columnValue_3_tSalesforceInput_1);
        } catch (org.talend.components.api.exception.DataRejectException e_tSalesforceInput_1) {
        	java.util.Map<String,Object> info_tSalesforceInput_1 = e_tSalesforceInput_1.getRejectInfo();
            	//TODO use a method instead of getting method by the special key "error/errorMessage"
            	Object errorMessage_tSalesforceInput_1 = null;
            	if(info_tSalesforceInput_1.containsKey("error")){
            		errorMessage_tSalesforceInput_1 = info_tSalesforceInput_1.get("error");
        		}else if(info_tSalesforceInput_1.containsKey("errorMessage")){
            		errorMessage_tSalesforceInput_1 = info_tSalesforceInput_1.get("errorMessage");
        		}else{
        			errorMessage_tSalesforceInput_1 = "Rejected but error message missing";
        		}
        		errorMessage_tSalesforceInput_1 = "Row "+ nb_line_tSalesforceInput_1 + ": "+errorMessage_tSalesforceInput_1;
    			System.err.println(errorMessage_tSalesforceInput_1);
            	// If the record is reject, the main line record should put NULL
            	row14 = null;
    }
                java.lang.Iterable<?> outgoingMainRecordsList_tSalesforceInput_1 = new java.util.ArrayList<Object>();
                java.util.Iterator outgoingMainRecordsIt_tSalesforceInput_1 = null;


 



/**
 * [tSalesforceInput_1 begin ] stop
 */
	
	/**
	 * [tSalesforceInput_1 main ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_1";

	


 


	tos_count_tSalesforceInput_1++;

/**
 * [tSalesforceInput_1 main ] stop
 */
	
	/**
	 * [tSalesforceInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_1";

	


 



/**
 * [tSalesforceInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_8 main ] start
	 */

	

	
	
	currentComponent="tMap_8";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row14");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_8 = false;
		  boolean mainRowRejected_tMap_8 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row18" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow18 = false;
       		  	    	
       		  	    	
 							row18Struct row18ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_8) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_8 = false;
								
                        		    		row18HashKey.PONumber = row14.Purchase_Order_Number_Haddad__c ;
                        		    		

								
		                        	row18HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row18.lookup( row18HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row18.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_8 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							

							row18Struct row18 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row18Struct fromLookup_row18 = null;
							row18 = row18Default;
										 
							
								 
							
							
								if (tHash_Lookup_row18 !=null && tHash_Lookup_row18.hasNext()) { // G 099
								
							
								
								fromLookup_row18 = tHash_Lookup_row18.next();

							
							
								} // G 099
							
							

							if(fromLookup_row18 != null) {
								row18 = fromLookup_row18;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_8__Struct Var = Var__tMap_8;// ###############################
        // ###############################
        // # Output tables

out5 = null;
ImportedFile = null;

if(!rejectedInnerJoin_tMap_8 ) {

// # Output table : 'out5'
out5_tmp.Filename = row18.Filename ;
out5 = out5_tmp;

// # Output table : 'ImportedFile'
ImportedFile_tmp.Filename = row18.Filename ;
ImportedFile_tmp.PONumber = row18.PONumber ;
ImportedFile = ImportedFile_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_8 = false;










 


	tos_count_tMap_8++;

/**
 * [tMap_8 main ] stop
 */
	
	/**
	 * [tMap_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_begin ] stop
 */
// Start of branch "out5"
if(out5 != null) { 



	
	/**
	 * [tFlowToIterate_1 main ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out5");
					}
					

	
    	
              globalMap.put("InputFilename", out5.Filename); 
	   nb_line_tFlowToIterate_1++;  
       counter_tFlowToIterate_1++;
       globalMap.put("tFlowToIterate_1_CURRENT_ITERATION", counter_tFlowToIterate_1);
 


	tos_count_tFlowToIterate_1++;

/**
 * [tFlowToIterate_1 main ] stop
 */
	
	/**
	 * [tFlowToIterate_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";

	

 



/**
 * [tFlowToIterate_1 process_data_begin ] stop
 */
	NB_ITERATE_tFileCopy_1++;
	
	
				if(execStat){
					runStat.updateStatOnConnection("iterate7", 1, "exec" + NB_ITERATE_tFileCopy_1);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [tFileCopy_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileCopy_1", false);
		start_Hash.put("tFileCopy_1", System.currentTimeMillis());
		
	
	currentComponent="tFileCopy_1";

	
		int tos_count_tFileCopy_1 = 0;
		

 



/**
 * [tFileCopy_1 begin ] stop
 */
	
	/**
	 * [tFileCopy_1 main ] start
	 */

	

	
	
	currentComponent="tFileCopy_1";

	

 


        String srcFileName_tFileCopy_1 = "C:/Haddad_Interface_SF_JDE/Interface Salesforce/OrderEDI/input/"+((String)globalMap.get("InputFilename")).substring(11, ((String)globalMap.get("InputFilename")).indexOf(".")) + "." + ((String)globalMap.get("fileExtension"));

		java.io.File srcFile_tFileCopy_1 = new java.io.File(srcFileName_tFileCopy_1);

		// here need check first, before mkdirs().
		if (!srcFile_tFileCopy_1.exists() || !srcFile_tFileCopy_1.isFile()) {
			String errorMessageFileDoesnotExistsOrIsNotAFile_tFileCopy_1 = String.format("The source File \"%s\" does not exist or is not a file.", srcFileName_tFileCopy_1);
				System.err.println(errorMessageFileDoesnotExistsOrIsNotAFile_tFileCopy_1);
		}
        String desDirName_tFileCopy_1 = "//srv-ftp/FTP/FTP_COMARCH/PROD/IN/ORDER/ARCHIVE/";

		String desFileName_tFileCopy_1 =  srcFile_tFileCopy_1.getName() ;

		if (desFileName_tFileCopy_1 != null && ("").equals(desFileName_tFileCopy_1.trim())){
			desFileName_tFileCopy_1 = "NewName.temp";
		}

		java.io.File desFile_tFileCopy_1 = new java.io.File(desDirName_tFileCopy_1, desFileName_tFileCopy_1);

		if (!srcFile_tFileCopy_1.getPath().equals(desFile_tFileCopy_1.getPath())  ) {
				java.io.File parentFile_tFileCopy_1 = desFile_tFileCopy_1.getParentFile();

				if (parentFile_tFileCopy_1 != null && !parentFile_tFileCopy_1.exists()) {
					parentFile_tFileCopy_1.mkdirs();
				}           
				try {
					org.talend.FileCopy.copyFile(srcFile_tFileCopy_1.getPath(), desFile_tFileCopy_1.getPath(), true);
				} catch (Exception e) {
						System.err.println("tFileCopy_1 " + e.getMessage());
				}
				java.io.File isRemoved_tFileCopy_1 = new java.io.File("C:/Haddad_Interface_SF_JDE/Interface Salesforce/OrderEDI/input/"+((String)globalMap.get("InputFilename")).substring(11, ((String)globalMap.get("InputFilename")).indexOf(".")) + "." + ((String)globalMap.get("fileExtension")));
				if(isRemoved_tFileCopy_1.exists()) {
					String errorMessageCouldNotRemoveFile_tFileCopy_1 = String.format("tFileCopy_1 - The source file \"%s\" could not be removed from the folder because it is open or you only have read-only rights.", srcFileName_tFileCopy_1);
						System.err.println(errorMessageCouldNotRemoveFile_tFileCopy_1 + "\n");
				} 

		}
		globalMap.put("tFileCopy_1_DESTINATION_FILEPATH",desFile_tFileCopy_1.getPath()); 
		globalMap.put("tFileCopy_1_DESTINATION_FILENAME",desFile_tFileCopy_1.getName()); 

		globalMap.put("tFileCopy_1_SOURCE_DIRECTORY", srcFile_tFileCopy_1.getParent());
		globalMap.put("tFileCopy_1_DESTINATION_DIRECTORY", desFile_tFileCopy_1.getParent());        
        

 


	tos_count_tFileCopy_1++;

/**
 * [tFileCopy_1 main ] stop
 */
	
	/**
	 * [tFileCopy_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileCopy_1";

	

 



/**
 * [tFileCopy_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileCopy_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileCopy_1";

	

 



/**
 * [tFileCopy_1 process_data_end ] stop
 */
	
	/**
	 * [tFileCopy_1 end ] start
	 */

	

	
	
	currentComponent="tFileCopy_1";

	

 

ok_Hash.put("tFileCopy_1", true);
end_Hash.put("tFileCopy_1", System.currentTimeMillis());




/**
 * [tFileCopy_1 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("iterate7", 2, "exec" + NB_ITERATE_tFileCopy_1);
						}				
					




	
	/**
	 * [tFlowToIterate_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";

	

 



/**
 * [tFlowToIterate_1 process_data_end ] stop
 */

} // End of branch "out5"




// Start of branch "ImportedFile"
if(ImportedFile != null) { 



	
	/**
	 * [tUniqRow_3 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"ImportedFile");
					}
					
row25 = null;			
if(ImportedFile.Filename == null){
	finder_tUniqRow_3.Filename = null;
}else{
	finder_tUniqRow_3.Filename = ImportedFile.Filename.toLowerCase();
}	
finder_tUniqRow_3.hashCodeDirty = true;
if (!keystUniqRow_3.contains(finder_tUniqRow_3)) {
		KeyStruct_tUniqRow_3 new_tUniqRow_3 = new KeyStruct_tUniqRow_3();

		
if(ImportedFile.Filename == null){
	new_tUniqRow_3.Filename = null;
}else{
	new_tUniqRow_3.Filename = ImportedFile.Filename.toLowerCase();
}
		
		keystUniqRow_3.add(new_tUniqRow_3);if(row25 == null){ 
	
	row25 = new row25Struct();
}row25.Filename = ImportedFile.Filename;			row25.PONumber = ImportedFile.PONumber;					
		nb_uniques_tUniqRow_3++;
	} else {
	  nb_duplicates_tUniqRow_3++;
	}

 


	tos_count_tUniqRow_3++;

/**
 * [tUniqRow_3 main ] stop
 */
	
	/**
	 * [tUniqRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_3";

	

 



/**
 * [tUniqRow_3 process_data_begin ] stop
 */
// Start of branch "row25"
if(row25 != null) { 



	
	/**
	 * [tFileOutputDelimited_4 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row25");
					}
					


                    StringBuilder sb_tFileOutputDelimited_4 = new StringBuilder();
                            if(row25.Filename != null) {
                        sb_tFileOutputDelimited_4.append(
                            row25.Filename
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row25.PONumber != null) {
                        sb_tFileOutputDelimited_4.append(
                            row25.PONumber
                        );
                            }
                    sb_tFileOutputDelimited_4.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_4);


                    nb_line_tFileOutputDelimited_4++;
                    resourceMap.put("nb_line_tFileOutputDelimited_4", nb_line_tFileOutputDelimited_4);

                        outtFileOutputDelimited_4.write(sb_tFileOutputDelimited_4.toString());




 


	tos_count_tFileOutputDelimited_4++;

/**
 * [tFileOutputDelimited_4 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	

 



/**
 * [tFileOutputDelimited_4 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	

 



/**
 * [tFileOutputDelimited_4 process_data_end ] stop
 */

} // End of branch "row25"




	
	/**
	 * [tUniqRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_3";

	

 



/**
 * [tUniqRow_3 process_data_end ] stop
 */

} // End of branch "ImportedFile"




	
	/**
	 * [tMap_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_end ] stop
 */



	
	/**
	 * [tSalesforceInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_1";

	


 



/**
 * [tSalesforceInput_1 process_data_end ] stop
 */
	
	/**
	 * [tSalesforceInput_1 end ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_1";

	
// end of generic


resourceMap.put("finish_tSalesforceInput_1", Boolean.TRUE);

    } // while
    reader_tSalesforceInput_1.close();
    final java.util.Map<String, Object> resultMap_tSalesforceInput_1 = reader_tSalesforceInput_1.getReturnValues();
if(resultMap_tSalesforceInput_1!=null) {
	for(java.util.Map.Entry<String,Object> entry_tSalesforceInput_1 : resultMap_tSalesforceInput_1.entrySet()) {
		switch(entry_tSalesforceInput_1.getKey()) {
		case org.talend.components.api.component.ComponentDefinition.RETURN_ERROR_MESSAGE :
			container_tSalesforceInput_1.setComponentData("tSalesforceInput_1", "ERROR_MESSAGE", entry_tSalesforceInput_1.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_TOTAL_RECORD_COUNT :
			container_tSalesforceInput_1.setComponentData("tSalesforceInput_1", "NB_LINE", entry_tSalesforceInput_1.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_SUCCESS_RECORD_COUNT :
			container_tSalesforceInput_1.setComponentData("tSalesforceInput_1", "NB_SUCCESS", entry_tSalesforceInput_1.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_REJECT_RECORD_COUNT :
			container_tSalesforceInput_1.setComponentData("tSalesforceInput_1", "NB_REJECT", entry_tSalesforceInput_1.getValue());
			break;
		default :
            StringBuilder studio_key_tSalesforceInput_1 = new StringBuilder();
            for (int i_tSalesforceInput_1 = 0; i_tSalesforceInput_1 < entry_tSalesforceInput_1.getKey().length(); i_tSalesforceInput_1++) {
                char ch_tSalesforceInput_1 = entry_tSalesforceInput_1.getKey().charAt(i_tSalesforceInput_1);
                if(Character.isUpperCase(ch_tSalesforceInput_1) && i_tSalesforceInput_1> 0) {
                	studio_key_tSalesforceInput_1.append('_');
                }
                studio_key_tSalesforceInput_1.append(ch_tSalesforceInput_1);
            }
			container_tSalesforceInput_1.setComponentData("tSalesforceInput_1", studio_key_tSalesforceInput_1.toString().toUpperCase(java.util.Locale.ENGLISH), entry_tSalesforceInput_1.getValue());
			break;
		}
	}
}

 

ok_Hash.put("tSalesforceInput_1", true);
end_Hash.put("tSalesforceInput_1", System.currentTimeMillis());




/**
 * [tSalesforceInput_1 end ] stop
 */

	
	/**
	 * [tMap_8 end ] start
	 */

	

	
	
	currentComponent="tMap_8";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row18 != null) {
						tHash_Lookup_row18.endGet();
					}
					globalMap.remove( "tHash_Lookup_row18" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row14");
			  	}
			  	
 

ok_Hash.put("tMap_8", true);
end_Hash.put("tMap_8", System.currentTimeMillis());




/**
 * [tMap_8 end ] stop
 */

	
	/**
	 * [tFlowToIterate_1 end ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";

	

globalMap.put("tFlowToIterate_1_NB_LINE",nb_line_tFlowToIterate_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out5");
			  	}
			  	
 

ok_Hash.put("tFlowToIterate_1", true);
end_Hash.put("tFlowToIterate_1", System.currentTimeMillis());




/**
 * [tFlowToIterate_1 end ] stop
 */




	
	/**
	 * [tUniqRow_3 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_3";

	

globalMap.put("tUniqRow_3_NB_UNIQUES",nb_uniques_tUniqRow_3);
globalMap.put("tUniqRow_3_NB_DUPLICATES",nb_duplicates_tUniqRow_3);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"ImportedFile");
			  	}
			  	
 

ok_Hash.put("tUniqRow_3", true);
end_Hash.put("tUniqRow_3", System.currentTimeMillis());




/**
 * [tUniqRow_3 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_4 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	



		
			
					if(outtFileOutputDelimited_4!=null) {
						outtFileOutputDelimited_4.flush();
						outtFileOutputDelimited_4.close();
					}
				
				globalMap.put("tFileOutputDelimited_4_NB_LINE",nb_line_tFileOutputDelimited_4);
				globalMap.put("tFileOutputDelimited_4_FILE_NAME",fileName_tFileOutputDelimited_4);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_4", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row25");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_4", true);
end_Hash.put("tFileOutputDelimited_4", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_4 end ] stop
 */









				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tSalesforceInput_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk11", 0, "ok");
								} 
							
							tSalesforceInput_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_8"
					     			globalMap.remove("tHash_Lookup_row18"); 
				     			
				try{
					
	
	/**
	 * [tSalesforceInput_1 finally ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_1";

	
// finally of generic


if(resourceMap.get("finish_tSalesforceInput_1")==null){
    if(resourceMap.get("reader_tSalesforceInput_1")!=null){
		try {
			((org.talend.components.api.component.runtime.Reader)resourceMap.get("reader_tSalesforceInput_1")).close();
		} catch (java.io.IOException e_tSalesforceInput_1) {
			String errorMessage_tSalesforceInput_1 = "failed to release the resource in tSalesforceInput_1 :" + e_tSalesforceInput_1.getMessage();
			System.err.println(errorMessage_tSalesforceInput_1);
		}
	}
}
 



/**
 * [tSalesforceInput_1 finally ] stop
 */

	
	/**
	 * [tMap_8 finally ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 finally ] stop
 */

	
	/**
	 * [tFlowToIterate_1 finally ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";

	

 



/**
 * [tFlowToIterate_1 finally ] stop
 */

	
	/**
	 * [tFileCopy_1 finally ] start
	 */

	

	
	
	currentComponent="tFileCopy_1";

	

 



/**
 * [tFileCopy_1 finally ] stop
 */







	
	/**
	 * [tUniqRow_3 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_3";

	

 



/**
 * [tUniqRow_3 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_4 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	


		if(resourceMap.get("finish_tFileOutputDelimited_4") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_4 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_4");
						if(outtFileOutputDelimited_4!=null) {
							outtFileOutputDelimited_4.flush();
							outtFileOutputDelimited_4.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_4 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSalesforceInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row29Struct implements routines.system.IPersistableRow<row29Struct> {
    final static byte[] commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI = new byte[0];
    static byte[] commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[0];

	
			    public String Id;

				public String getId () {
					return this.Id;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length) {
				if(length < 1024 && commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length == 0) {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[1024];
				} else {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length);
			strReturn = new String(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI) {

        	try {

        		int length = 0;
		
					this.Id = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id="+Id);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row29Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out8Struct implements routines.system.IPersistableRow<out8Struct> {
    final static byte[] commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI = new byte[0];
    static byte[] commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[0];

	
			    public byte[] Body;

				public byte[] getBody () {
					return this.Body;
				}
				
			    public String Id;

				public String getId () {
					return this.Id;
				}
				
			    public int BodyLength;

				public int getBodyLength () {
					return this.BodyLength;
				}
				
			    public boolean IsPublic;

				public boolean getIsPublic () {
					return this.IsPublic;
				}
				
			    public String Name;

				public String getName () {
					return this.Name;
				}
				
			    public String Type;

				public String getType () {
					return this.Type;
				}
				
			    public String Url;

				public String getUrl () {
					return this.Url;
				}
				
			    public java.util.Date CreatedDate;

				public java.util.Date getCreatedDate () {
					return this.CreatedDate;
				}
				


	private byte[] readByteArray(ObjectInputStream dis) throws IOException{
		byte[] byteArrayReturn;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			byteArrayReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.readFully(byteArray);
			byteArrayReturn = byteArray;
		}
		return byteArrayReturn;
	}

    private void writeByteArray(byte[] byteArray, ObjectOutputStream dos) throws IOException{
		if(byteArray == null) {
            dos.writeInt(-1);
		} else {
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length) {
				if(length < 1024 && commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length == 0) {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[1024];
				} else {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length);
			strReturn = new String(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI) {

        	try {

        		int length = 0;
		
					this.Body = readByteArray(dis);
					
					this.Id = readString(dis);
					
			        this.BodyLength = dis.readInt();
					
			        this.IsPublic = dis.readBoolean();
					
					this.Name = readString(dis);
					
					this.Type = readString(dis);
					
					this.Url = readString(dis);
					
					this.CreatedDate = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// byte[]
				
						writeByteArray(this.Body,dos);
					
					// String
				
						writeString(this.Id,dos);
					
					// int
				
		            	dos.writeInt(this.BodyLength);
					
					// boolean
				
		            	dos.writeBoolean(this.IsPublic);
					
					// String
				
						writeString(this.Name,dos);
					
					// String
				
						writeString(this.Type,dos);
					
					// String
				
						writeString(this.Url,dos);
					
					// java.util.Date
				
						writeDate(this.CreatedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Body="+String.valueOf(Body));
		sb.append(",Id="+Id);
		sb.append(",BodyLength="+String.valueOf(BodyLength));
		sb.append(",IsPublic="+String.valueOf(IsPublic));
		sb.append(",Name="+Name);
		sb.append(",Type="+Type);
		sb.append(",Url="+Url);
		sb.append(",CreatedDate="+String.valueOf(CreatedDate));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class DeleteDocumentStruct implements routines.system.IPersistableRow<DeleteDocumentStruct> {
    final static byte[] commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI = new byte[0];
    static byte[] commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[0];

	
			    public String Id;

				public String getId () {
					return this.Id;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length) {
				if(length < 1024 && commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length == 0) {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[1024];
				} else {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length);
			strReturn = new String(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI) {

        	try {

        		int length = 0;
		
					this.Id = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id="+Id);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(DeleteDocumentStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row16Struct implements routines.system.IPersistableRow<row16Struct> {
    final static byte[] commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI = new byte[0];
    static byte[] commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[0];

	
			    public byte[] Body;

				public byte[] getBody () {
					return this.Body;
				}
				
			    public String Id;

				public String getId () {
					return this.Id;
				}
				
			    public int BodyLength;

				public int getBodyLength () {
					return this.BodyLength;
				}
				
			    public boolean IsPublic;

				public boolean getIsPublic () {
					return this.IsPublic;
				}
				
			    public String Name;

				public String getName () {
					return this.Name;
				}
				
			    public String Type;

				public String getType () {
					return this.Type;
				}
				
			    public String Url;

				public String getUrl () {
					return this.Url;
				}
				
			    public java.util.Date CreatedDate;

				public java.util.Date getCreatedDate () {
					return this.CreatedDate;
				}
				


	private byte[] readByteArray(ObjectInputStream dis) throws IOException{
		byte[] byteArrayReturn;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			byteArrayReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.readFully(byteArray);
			byteArrayReturn = byteArray;
		}
		return byteArrayReturn;
	}

    private void writeByteArray(byte[] byteArray, ObjectOutputStream dos) throws IOException{
		if(byteArray == null) {
            dos.writeInt(-1);
		} else {
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length) {
				if(length < 1024 && commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length == 0) {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[1024];
				} else {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length);
			strReturn = new String(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI) {

        	try {

        		int length = 0;
		
					this.Body = readByteArray(dis);
					
					this.Id = readString(dis);
					
			        this.BodyLength = dis.readInt();
					
			        this.IsPublic = dis.readBoolean();
					
					this.Name = readString(dis);
					
					this.Type = readString(dis);
					
					this.Url = readString(dis);
					
					this.CreatedDate = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// byte[]
				
						writeByteArray(this.Body,dos);
					
					// String
				
						writeString(this.Id,dos);
					
					// int
				
		            	dos.writeInt(this.BodyLength);
					
					// boolean
				
		            	dos.writeBoolean(this.IsPublic);
					
					// String
				
						writeString(this.Name,dos);
					
					// String
				
						writeString(this.Type,dos);
					
					// String
				
						writeString(this.Url,dos);
					
					// java.util.Date
				
						writeDate(this.CreatedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Body="+String.valueOf(Body));
		sb.append(",Id="+Id);
		sb.append(",BodyLength="+String.valueOf(BodyLength));
		sb.append(",IsPublic="+String.valueOf(IsPublic));
		sb.append(",Name="+Name);
		sb.append(",Type="+Type);
		sb.append(",Url="+Url);
		sb.append(",CreatedDate="+String.valueOf(CreatedDate));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row16Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tSalesforceInput_2Struct implements routines.system.IPersistableRow<after_tSalesforceInput_2Struct> {
    final static byte[] commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI = new byte[0];
    static byte[] commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[0];

	
			    public byte[] Body;

				public byte[] getBody () {
					return this.Body;
				}
				
			    public String Id;

				public String getId () {
					return this.Id;
				}
				
			    public int BodyLength;

				public int getBodyLength () {
					return this.BodyLength;
				}
				
			    public boolean IsPublic;

				public boolean getIsPublic () {
					return this.IsPublic;
				}
				
			    public String Name;

				public String getName () {
					return this.Name;
				}
				
			    public String Type;

				public String getType () {
					return this.Type;
				}
				
			    public String Url;

				public String getUrl () {
					return this.Url;
				}
				
			    public java.util.Date CreatedDate;

				public java.util.Date getCreatedDate () {
					return this.CreatedDate;
				}
				


	private byte[] readByteArray(ObjectInputStream dis) throws IOException{
		byte[] byteArrayReturn;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			byteArrayReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.readFully(byteArray);
			byteArrayReturn = byteArray;
		}
		return byteArrayReturn;
	}

    private void writeByteArray(byte[] byteArray, ObjectOutputStream dos) throws IOException{
		if(byteArray == null) {
            dos.writeInt(-1);
		} else {
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length) {
				if(length < 1024 && commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length == 0) {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[1024];
				} else {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length);
			strReturn = new String(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI) {

        	try {

        		int length = 0;
		
					this.Body = readByteArray(dis);
					
					this.Id = readString(dis);
					
			        this.BodyLength = dis.readInt();
					
			        this.IsPublic = dis.readBoolean();
					
					this.Name = readString(dis);
					
					this.Type = readString(dis);
					
					this.Url = readString(dis);
					
					this.CreatedDate = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// byte[]
				
						writeByteArray(this.Body,dos);
					
					// String
				
						writeString(this.Id,dos);
					
					// int
				
		            	dos.writeInt(this.BodyLength);
					
					// boolean
				
		            	dos.writeBoolean(this.IsPublic);
					
					// String
				
						writeString(this.Name,dos);
					
					// String
				
						writeString(this.Type,dos);
					
					// String
				
						writeString(this.Url,dos);
					
					// java.util.Date
				
						writeDate(this.CreatedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Body="+String.valueOf(Body));
		sb.append(",Id="+Id);
		sb.append(",BodyLength="+String.valueOf(BodyLength));
		sb.append(",IsPublic="+String.valueOf(IsPublic));
		sb.append(",Name="+Name);
		sb.append(",Type="+Type);
		sb.append(",Url="+Url);
		sb.append(",CreatedDate="+String.valueOf(CreatedDate));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tSalesforceInput_2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tSalesforceInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSalesforceInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tFileInputDelimited_3Process(globalMap);

		row16Struct row16 = new row16Struct();
out8Struct out8 = new out8Struct();
DeleteDocumentStruct DeleteDocument = new DeleteDocumentStruct();
row29Struct row29 = new row29Struct();





	
	/**
	 * [tJavaRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_1", false);
		start_Hash.put("tJavaRow_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out8");
					}
				
		int tos_count_tJavaRow_1 = 0;
		

int nb_line_tJavaRow_1 = 0;

 



/**
 * [tJavaRow_1 begin ] stop
 */





	
	/**
	 * [tLogRow_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_10", false);
		start_Hash.put("tLogRow_10", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_10";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row29");
					}
				
		int tos_count_tLogRow_10 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_10 = "|";
		java.io.PrintStream consoleOut_tLogRow_10 = null;	

 		StringBuilder strBuffer_tLogRow_10 = null;
		int nb_line_tLogRow_10 = 0;
///////////////////////    			



 



/**
 * [tLogRow_10 begin ] stop
 */



	
	/**
	 * [tSalesforceOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tSalesforceOutput_1", false);
		start_Hash.put("tSalesforceOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tSalesforceOutput_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"DeleteDocument");
					}
				
		int tos_count_tSalesforceOutput_1 = 0;
		


org.talend.components.api.component.ComponentDefinition def_tSalesforceOutput_1 =
        new org.talend.components.salesforce.tsalesforceoutput.TSalesforceOutputDefinition();

org.talend.components.salesforce.tsalesforceoutput.TSalesforceOutputProperties props_tSalesforceOutput_1 =
        (org.talend.components.salesforce.tsalesforceoutput.TSalesforceOutputProperties) def_tSalesforceOutput_1.createRuntimeProperties();
 		                    props_tSalesforceOutput_1.setValue("extendInsert",
 		                    true);
 		                    
 		                    props_tSalesforceOutput_1.setValue("ceaseForError",
 		                    true);
 		                    
 		                    props_tSalesforceOutput_1.setValue("commitLevel",
 		                    200);
 		                    
 		                    props_tSalesforceOutput_1.setValue("logFileName",
 		                    "");
 		                    
 		                    props_tSalesforceOutput_1.setValue("outputAction",
 		                        org.talend.components.salesforce.SalesforceOutputProperties.OutputAction.DELETE);
 		                    
 		                    class SchemaSettingTool_tSalesforceOutput_1_1_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"DeleteSchema\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"Id\",\"type\":\"string\",\"talend.field.length\":\"18\",\"talend.isLocked\":\"true\"}],\"talend.isLocked\":\"true\"}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tSalesforceOutput_1_1_fisrt sst_tSalesforceOutput_1_1_fisrt = new SchemaSettingTool_tSalesforceOutput_1_1_fisrt();
 		                    
 		                    props_tSalesforceOutput_1.schemaFlow.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tSalesforceOutput_1_1_fisrt.getSchemaValue()));
 		                    
 		                    class SchemaSettingTool_tSalesforceOutput_1_2_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"rejectOutput\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"Id\",\"type\":\"string\",\"talend.field.length\":\"18\",\"talend.isLocked\":\"true\"},{",s);
     		                    						
     		                    						a("\"name\":\"errorCode\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"errorFields\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"errorMessage\",\"type\":\"string\",\"talend.isLocked\":\"false\",\"talend.field.generated\":\"true\",\"talend.field.length\":\"255\"}],\"talend.isLocked\":\"true\"}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tSalesforceOutput_1_2_fisrt sst_tSalesforceOutput_1_2_fisrt = new SchemaSettingTool_tSalesforceOutput_1_2_fisrt();
 		                    
 		                    props_tSalesforceOutput_1.schemaReject.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tSalesforceOutput_1_2_fisrt.getSchemaValue()));
 		                    
 		                    props_tSalesforceOutput_1.connection.setValue("endpoint",
 		                    "https://login.salesforce.com/services/Soap/u/45.0");
 		                    
 		                    props_tSalesforceOutput_1.connection.setValue("loginType",
 		                        org.talend.components.salesforce.SalesforceConnectionProperties.LoginType.Basic);
 		                    
 		                    props_tSalesforceOutput_1.connection.setValue("reuseSession",
 		                    false);
 		                    
 		                    props_tSalesforceOutput_1.connection.setValue("needCompression",
 		                    false);
 		                    
 		                    props_tSalesforceOutput_1.connection.setValue("timeout",
 		                    60000);
 		                    
 		                    props_tSalesforceOutput_1.connection.setValue("httpChunked",
 		                    true);
 		                    
 		                    props_tSalesforceOutput_1.connection.setValue("clientId",
 		                    "systemuser@haddadeurope.com");
 		                    
 		                        props_tSalesforceOutput_1.connection.userPassword.setValue("securityKey",
 		                        routines.system.PasswordEncryptUtil.decryptPassword("ENC:[LsHIfVoCwPNtpAAyCQB/i4eJ7TouWb9ySP1BMkFEvtzbw1o0SmiPmhGMwhClKbms3u1AupE=]"));
 		                        
 		                    props_tSalesforceOutput_1.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceOutput_1.connection.userPassword.setValue("userId",
 		                    "systemuser@haddadeurope.com");
 		                    
 		                        props_tSalesforceOutput_1.connection.userPassword.setValue("password",
 		                        routines.system.PasswordEncryptUtil.decryptPassword("ENC:[sNc3SqbWBBr6oYDdWTBXXxh4e+N0yGbjPjS705XBE6zhAaFWtQ18OFEeqfcI]"));
 		                        
 		                    props_tSalesforceOutput_1.connection.proxy.setValue("useProxy",
 		                    false);
 		                    
 		                    props_tSalesforceOutput_1.connection.proxy.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceOutput_1.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.THIS_COMPONENT);
 		                    
 		                    props_tSalesforceOutput_1.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSalesforceConnection");
 		                    
 		                    props_tSalesforceOutput_1.module.setValue("moduleName",
 		                    "Document");
 		                    
 		                    props_tSalesforceOutput_1.module.connection.setValue("endpoint",
 		                    "https://login.salesforce.com/services/Soap/u/45.0");
 		                    
 		                    props_tSalesforceOutput_1.module.connection.setValue("loginType",
 		                        org.talend.components.salesforce.SalesforceConnectionProperties.LoginType.Basic);
 		                    
 		                    props_tSalesforceOutput_1.module.connection.setValue("reuseSession",
 		                    false);
 		                    
 		                    props_tSalesforceOutput_1.module.connection.setValue("needCompression",
 		                    false);
 		                    
 		                    props_tSalesforceOutput_1.module.connection.setValue("timeout",
 		                    60000);
 		                    
 		                    props_tSalesforceOutput_1.module.connection.setValue("httpChunked",
 		                    true);
 		                    
 		                    props_tSalesforceOutput_1.module.connection.setValue("clientId",
 		                    "systemuser@haddadeurope.com");
 		                    
 		                        props_tSalesforceOutput_1.module.connection.userPassword.setValue("securityKey",
 		                        routines.system.PasswordEncryptUtil.decryptPassword("ENC:[nLf51ISiocgLLjed5GlimBhmArc9aEWGWkQef1vMufSVJkfNtXeCCstTCRoFVeHNVjyhRq8=]"));
 		                        
 		                    props_tSalesforceOutput_1.module.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceOutput_1.module.connection.userPassword.setValue("userId",
 		                    "systemuser@haddadeurope.com");
 		                    
 		                        props_tSalesforceOutput_1.module.connection.userPassword.setValue("password",
 		                        routines.system.PasswordEncryptUtil.decryptPassword("ENC:[ySajt3YZfIRC/Av3/4JS2kDGJjTKKGVOHC21z16l+W/oTH0pvZYjK8bh/frG]"));
 		                        
 		                    props_tSalesforceOutput_1.module.connection.proxy.setValue("useProxy",
 		                    false);
 		                    
 		                    props_tSalesforceOutput_1.module.connection.proxy.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceOutput_1.module.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.THIS_COMPONENT);
 		                    
 		                    props_tSalesforceOutput_1.module.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSalesforceConnection");
 		                    
 		                    class SchemaSettingTool_tSalesforceOutput_1_3_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"DeleteSchema\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"Id\",\"type\":\"string\",\"talend.field.length\":\"18\",\"talend.isLocked\":\"true\"}],\"talend.isLocked\":\"true\"}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tSalesforceOutput_1_3_fisrt sst_tSalesforceOutput_1_3_fisrt = new SchemaSettingTool_tSalesforceOutput_1_3_fisrt();
 		                    
 		                    props_tSalesforceOutput_1.module.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tSalesforceOutput_1_3_fisrt.getSchemaValue()));
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceOutput_1.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tSalesforceOutput_1 = props_tSalesforceOutput_1.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tSalesforceOutput_1 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceOutput_1 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tSalesforceOutput_1 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tSalesforceOutput_1.connection.referencedComponent.setReference(referencedComponentProperties_tSalesforceOutput_1);
        }
    }
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceOutput_1.module.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tSalesforceOutput_1 = props_tSalesforceOutput_1.module.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tSalesforceOutput_1 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceOutput_1 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tSalesforceOutput_1 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tSalesforceOutput_1.module.connection.referencedComponent.setReference(referencedComponentProperties_tSalesforceOutput_1);
        }
    }
globalMap.put("tSalesforceOutput_1_COMPONENT_RUNTIME_PROPERTIES", props_tSalesforceOutput_1);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "7.3");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.28.0.SNAPSHOT");
java.net.URL mappings_url_tSalesforceOutput_1= this.getClass().getResource("/xmlMappings");
globalMap.put("tSalesforceOutput_1_MAPPINGS_URL", mappings_url_tSalesforceOutput_1);

org.talend.components.api.container.RuntimeContainer container_tSalesforceOutput_1 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tSalesforceOutput_1";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tSalesforceOutput_1 = 0;

org.talend.components.api.component.ConnectorTopology topology_tSalesforceOutput_1 = null;
topology_tSalesforceOutput_1 = org.talend.components.api.component.ConnectorTopology.INCOMING_AND_OUTGOING;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tSalesforceOutput_1 = def_tSalesforceOutput_1.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tSalesforceOutput_1, topology_tSalesforceOutput_1);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tSalesforceOutput_1 = def_tSalesforceOutput_1.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tSalesforceOutput_1 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tSalesforceOutput_1.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tSalesforceOutput_1 = componentRuntime_tSalesforceOutput_1.initialize(container_tSalesforceOutput_1, props_tSalesforceOutput_1);

if (initVr_tSalesforceOutput_1.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tSalesforceOutput_1.getMessage());
}

if(componentRuntime_tSalesforceOutput_1 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tSalesforceOutput_1 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tSalesforceOutput_1;
	compDriverInitialization_tSalesforceOutput_1.runAtDriver(container_tSalesforceOutput_1);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tSalesforceOutput_1 = null;
if(componentRuntime_tSalesforceOutput_1 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tSalesforceOutput_1 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tSalesforceOutput_1;
	org.talend.daikon.properties.ValidationResult vr_tSalesforceOutput_1 = sourceOrSink_tSalesforceOutput_1.validate(container_tSalesforceOutput_1);
	if (vr_tSalesforceOutput_1.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    	throw new RuntimeException(vr_tSalesforceOutput_1.getMessage());
	}
}

    org.talend.components.api.component.runtime.Sink sink_tSalesforceOutput_1 =
            (org.talend.components.api.component.runtime.Sink)sourceOrSink_tSalesforceOutput_1;
    org.talend.components.api.component.runtime.WriteOperation writeOperation_tSalesforceOutput_1 = sink_tSalesforceOutput_1.createWriteOperation();
    writeOperation_tSalesforceOutput_1.initialize(container_tSalesforceOutput_1);
    org.talend.components.api.component.runtime.Writer writer_tSalesforceOutput_1 = writeOperation_tSalesforceOutput_1.createWriter(container_tSalesforceOutput_1);
    writer_tSalesforceOutput_1.open("tSalesforceOutput_1");

    resourceMap.put("writer_tSalesforceOutput_1", writer_tSalesforceOutput_1);

    org.talend.components.api.component.Connector c_tSalesforceOutput_1 = null;
    for (org.talend.components.api.component.Connector currentConnector : props_tSalesforceOutput_1.getAvailableConnectors(null, false)) {
        if (currentConnector.getName().equals("MAIN")) {
            c_tSalesforceOutput_1 = currentConnector;
            break;
        }
    }
    org.apache.avro.Schema designSchema_tSalesforceOutput_1 = props_tSalesforceOutput_1.getSchema(c_tSalesforceOutput_1, false);
    org.talend.codegen.enforcer.IncomingSchemaEnforcer incomingEnforcer_tSalesforceOutput_1
            = new org.talend.codegen.enforcer.IncomingSchemaEnforcer(designSchema_tSalesforceOutput_1);
                c_tSalesforceOutput_1 = null;
                for (org.talend.components.api.component.Connector currentConnector : props_tSalesforceOutput_1.getAvailableConnectors(null, true)) {
                    if (currentConnector.getName().equals("MAIN")) {
                        c_tSalesforceOutput_1 = currentConnector;
                    }
                }
                org.apache.avro.Schema mainSchema_tSalesforceOutput_1 = props_tSalesforceOutput_1.getSchema(c_tSalesforceOutput_1, true);
        org.talend.codegen.enforcer.OutgoingSchemaEnforcer outgoingEnforcer_tSalesforceOutput_1OutMain = org.talend.codegen.enforcer.EnforcerCreator.createOutgoingEnforcer(mainSchema_tSalesforceOutput_1, false);

        // Create a reusable factory that converts the output of the reader to an IndexedRecord.
        org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord> factory_tSalesforceOutput_1OutMain = null;
                java.lang.Iterable<?> outgoingMainRecordsList_tSalesforceOutput_1 = new java.util.ArrayList<Object>();
                java.util.Iterator outgoingMainRecordsIt_tSalesforceOutput_1 = null;


 



/**
 * [tSalesforceOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_7", false);
		start_Hash.put("tMap_7", System.currentTimeMillis());
		
	
	currentComponent="tMap_7";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row16");
					}
				
		int tos_count_tMap_7 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row19Struct> tHash_Lookup_row19 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row19Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row19Struct>) 
					globalMap.get( "tHash_Lookup_row19" ))
					;					
					
	

row19Struct row19HashKey = new row19Struct();
row19Struct row19Default = new row19Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_7__Struct  {
}
Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
// ###############################

// ###############################
// # Outputs initialization
out8Struct out8_tmp = new out8Struct();
DeleteDocumentStruct DeleteDocument_tmp = new DeleteDocumentStruct();
// ###############################

        
        



        









 



/**
 * [tMap_7 begin ] stop
 */



	
	/**
	 * [tSalesforceInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tSalesforceInput_2", false);
		start_Hash.put("tSalesforceInput_2", System.currentTimeMillis());
		
	
	currentComponent="tSalesforceInput_2";

	
		int tos_count_tSalesforceInput_2 = 0;
		


org.talend.components.api.component.ComponentDefinition def_tSalesforceInput_2 =
        new org.talend.components.salesforce.tsalesforceinput.TSalesforceInputDefinition();

org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties props_tSalesforceInput_2 =
        (org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties) def_tSalesforceInput_2.createRuntimeProperties();
 		                    props_tSalesforceInput_2.setValue("queryMode",
 		                        org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties.QueryMode.Query);
 		                    
 		                    props_tSalesforceInput_2.setValue("manualQuery",
 		                    true);
 		                    
 		                    props_tSalesforceInput_2.setValue("query",
 		                    " SELECT Body,Id, BodyLength, IsPublic,Name,Type,Url, CreatedDate  FROM Document WHERE Name like '%Order ODI%' AND Creat"
+"edDate = TODAY ");
 		                    
 		                    props_tSalesforceInput_2.setValue("includeDeleted",
 		                    false);
 		                    
 		                    props_tSalesforceInput_2.setValue("batchSize",
 		                    250);
 		                    
 		                    props_tSalesforceInput_2.setValue("normalizeDelimiter",
 		                    ";");
 		                    
 		                    props_tSalesforceInput_2.setValue("columnNameDelimiter",
 		                    "_");
 		                    
 		                    props_tSalesforceInput_2.connection.setValue("endpoint",
 		                    "https://login.salesforce.com/services/Soap/u/45.0");
 		                    
 		                    props_tSalesforceInput_2.connection.setValue("loginType",
 		                        org.talend.components.salesforce.SalesforceConnectionProperties.LoginType.Basic);
 		                    
 		                    props_tSalesforceInput_2.connection.setValue("reuseSession",
 		                    false);
 		                    
 		                    props_tSalesforceInput_2.connection.setValue("needCompression",
 		                    false);
 		                    
 		                    props_tSalesforceInput_2.connection.setValue("timeout",
 		                    60000);
 		                    
 		                    props_tSalesforceInput_2.connection.setValue("httpChunked",
 		                    true);
 		                    
 		                    props_tSalesforceInput_2.connection.setValue("clientId",
 		                    "systemuser@haddadeurope.com");
 		                    
 		                        props_tSalesforceInput_2.connection.userPassword.setValue("securityKey",
 		                        routines.system.PasswordEncryptUtil.decryptPassword("ENC:[GHIAhuc5WK6VEMQVWSpmZ8ymJtRGqq+wieHS8st83ayKI449fIgtQjqhq80H+lR5j+SRsqI=]"));
 		                        
 		                    props_tSalesforceInput_2.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_2.connection.userPassword.setValue("userId",
 		                    "systemuser@haddadeurope.com");
 		                    
 		                        props_tSalesforceInput_2.connection.userPassword.setValue("password",
 		                        routines.system.PasswordEncryptUtil.decryptPassword("ENC:[6Kz2OwyR5LSCc9MIhUEGrmz7HE7Y61bMfk03gtE6ouNqCRlFs8XJbJSZdYpm]"));
 		                        
 		                    props_tSalesforceInput_2.connection.proxy.setValue("useProxy",
 		                    false);
 		                    
 		                    props_tSalesforceInput_2.connection.proxy.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_2.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSalesforceConnection");
 		                    
 		                    props_tSalesforceInput_2.module.setValue("moduleName",
 		                    "");
 		                    
 		                    props_tSalesforceInput_2.module.connection.setValue("endpoint",
 		                    "https://login.salesforce.com/services/Soap/u/45.0");
 		                    
 		                    props_tSalesforceInput_2.module.connection.setValue("loginType",
 		                        org.talend.components.salesforce.SalesforceConnectionProperties.LoginType.Basic);
 		                    
 		                    props_tSalesforceInput_2.module.connection.setValue("reuseSession",
 		                    false);
 		                    
 		                    props_tSalesforceInput_2.module.connection.setValue("needCompression",
 		                    false);
 		                    
 		                    props_tSalesforceInput_2.module.connection.setValue("timeout",
 		                    60000);
 		                    
 		                    props_tSalesforceInput_2.module.connection.setValue("httpChunked",
 		                    true);
 		                    
 		                    props_tSalesforceInput_2.module.connection.setValue("clientId",
 		                    "systemuser@haddadeurope.com");
 		                    
 		                        props_tSalesforceInput_2.module.connection.userPassword.setValue("securityKey",
 		                        routines.system.PasswordEncryptUtil.decryptPassword("ENC:[FLQEwkzIsZP9mtKc7Nrk9vjI2tJkH8l0bQtnfOUb3UH9Xk8v3n+QqTHOj0pogNUJqjTbPOQ=]"));
 		                        
 		                    props_tSalesforceInput_2.module.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_2.module.connection.userPassword.setValue("userId",
 		                    "systemuser@haddadeurope.com");
 		                    
 		                        props_tSalesforceInput_2.module.connection.userPassword.setValue("password",
 		                        routines.system.PasswordEncryptUtil.decryptPassword("ENC:[EOpgjRlBlbybBQ32IqqM5a0DKsLuX75iyamtiNoxQP8O+5QMatjAL9Ph4nTL]"));
 		                        
 		                    props_tSalesforceInput_2.module.connection.proxy.setValue("useProxy",
 		                    false);
 		                    
 		                    props_tSalesforceInput_2.module.connection.proxy.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_2.module.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSalesforceConnection");
 		                    
 		                    class SchemaSettingTool_tSalesforceInput_2_1_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"GuessedSchema\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"Body\",\"type\":[\"bytes\",\"null\"]},{",s);
     		                    						
     		                    						a("\"name\":\"Id\",\"type\":\"string\",\"talend.field.length\":\"18\"},{",s);
     		                    						
     		                    						a("\"name\":\"BodyLength\",\"type\":\"int\"},{",s);
     		                    						
     		                    						a("\"name\":\"IsPublic\",\"type\":\"boolean\"},{",s);
     		                    						
     		                    						a("\"name\":\"Name\",\"type\":\"string\",\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"Type\",\"type\":[\"string\",\"null\"],\"talend.field.length\":\"40\"},{",s);
     		                    						
     		                    						a("\"name\":\"Url\",\"type\":[\"string\",\"null\"],\"talend.field.length\":\"255\"},{",s);
     		                    						
     		                    						a("\"name\":\"CreatedDate\",\"type\":{\"type\":\"long\",\"java-class\":\"java.util.Date\"},\"talend.field.pattern\":\"yyyy-MM-dd'T'HH:mm:ss'.000Z'\"}]}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tSalesforceInput_2_1_fisrt sst_tSalesforceInput_2_1_fisrt = new SchemaSettingTool_tSalesforceInput_2_1_fisrt();
 		                    
 		                    props_tSalesforceInput_2.module.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tSalesforceInput_2_1_fisrt.getSchemaValue()));
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceInput_2.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tSalesforceInput_2 = props_tSalesforceInput_2.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tSalesforceInput_2 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceInput_2 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tSalesforceInput_2 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tSalesforceInput_2.connection.referencedComponent.setReference(referencedComponentProperties_tSalesforceInput_2);
        }
    }
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceInput_2.module.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tSalesforceInput_2 = props_tSalesforceInput_2.module.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tSalesforceInput_2 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceInput_2 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tSalesforceInput_2 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tSalesforceInput_2.module.connection.referencedComponent.setReference(referencedComponentProperties_tSalesforceInput_2);
        }
    }
globalMap.put("tSalesforceInput_2_COMPONENT_RUNTIME_PROPERTIES", props_tSalesforceInput_2);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "7.3");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.28.0.SNAPSHOT");
java.net.URL mappings_url_tSalesforceInput_2= this.getClass().getResource("/xmlMappings");
globalMap.put("tSalesforceInput_2_MAPPINGS_URL", mappings_url_tSalesforceInput_2);

org.talend.components.api.container.RuntimeContainer container_tSalesforceInput_2 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tSalesforceInput_2";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tSalesforceInput_2 = 0;

org.talend.components.api.component.ConnectorTopology topology_tSalesforceInput_2 = null;
topology_tSalesforceInput_2 = org.talend.components.api.component.ConnectorTopology.OUTGOING;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tSalesforceInput_2 = def_tSalesforceInput_2.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tSalesforceInput_2, topology_tSalesforceInput_2);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tSalesforceInput_2 = def_tSalesforceInput_2.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tSalesforceInput_2 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tSalesforceInput_2.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tSalesforceInput_2 = componentRuntime_tSalesforceInput_2.initialize(container_tSalesforceInput_2, props_tSalesforceInput_2);

if (initVr_tSalesforceInput_2.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tSalesforceInput_2.getMessage());
}

if(componentRuntime_tSalesforceInput_2 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tSalesforceInput_2 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tSalesforceInput_2;
	compDriverInitialization_tSalesforceInput_2.runAtDriver(container_tSalesforceInput_2);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tSalesforceInput_2 = null;
if(componentRuntime_tSalesforceInput_2 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tSalesforceInput_2 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tSalesforceInput_2;
	org.talend.daikon.properties.ValidationResult vr_tSalesforceInput_2 = sourceOrSink_tSalesforceInput_2.validate(container_tSalesforceInput_2);
	if (vr_tSalesforceInput_2.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    	throw new RuntimeException(vr_tSalesforceInput_2.getMessage());
	}
}

    org.talend.components.api.component.runtime.Source source_tSalesforceInput_2 =
            (org.talend.components.api.component.runtime.Source)sourceOrSink_tSalesforceInput_2;
    org.talend.components.api.component.runtime.Reader reader_tSalesforceInput_2 =
            source_tSalesforceInput_2.createReader(container_tSalesforceInput_2);
	reader_tSalesforceInput_2 = new org.talend.codegen.flowvariables.runtime.FlowVariablesReader(reader_tSalesforceInput_2, container_tSalesforceInput_2);

        boolean multi_output_is_allowed_tSalesforceInput_2 = false;
        org.talend.components.api.component.Connector c_tSalesforceInput_2 = null;
        for (org.talend.components.api.component.Connector currentConnector : props_tSalesforceInput_2.getAvailableConnectors(null, true)) {
            if (currentConnector.getName().equals("MAIN")) {
                c_tSalesforceInput_2 = currentConnector;
            }

            if (currentConnector.getName().equals("REJECT")) {//it's better to move the code to javajet
                multi_output_is_allowed_tSalesforceInput_2 = true;
            }
        }
        org.apache.avro.Schema schema_tSalesforceInput_2 = props_tSalesforceInput_2.getSchema(c_tSalesforceInput_2, true);

        org.talend.codegen.enforcer.OutgoingSchemaEnforcer outgoingEnforcer_tSalesforceInput_2 = org.talend.codegen.enforcer.EnforcerCreator.createOutgoingEnforcer(schema_tSalesforceInput_2, false);

        // Create a reusable factory that converts the output of the reader to an IndexedRecord.
        org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord> factory_tSalesforceInput_2 = null;

    // Iterate through the incoming data.
    boolean available_tSalesforceInput_2 = reader_tSalesforceInput_2.start();

    resourceMap.put("reader_tSalesforceInput_2", reader_tSalesforceInput_2);

    for (; available_tSalesforceInput_2; available_tSalesforceInput_2 = reader_tSalesforceInput_2.advance()) {
    	nb_line_tSalesforceInput_2++;

    	
        if (multi_output_is_allowed_tSalesforceInput_2) {
                row16 = null;

        }

        try {
            Object data_tSalesforceInput_2 = reader_tSalesforceInput_2.getCurrent();

                if(multi_output_is_allowed_tSalesforceInput_2) {
                    row16 = new row16Struct();
                }

        // Construct the factory once when the first data arrives.
        if (factory_tSalesforceInput_2 == null) {
            factory_tSalesforceInput_2 = (org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord>)
                    new org.talend.daikon.avro.AvroRegistry()
                            .createIndexedRecordConverter(data_tSalesforceInput_2.getClass());
        }

        // Enforce the outgoing schema on the input.
        outgoingEnforcer_tSalesforceInput_2.setWrapped(factory_tSalesforceInput_2.convertToAvro(data_tSalesforceInput_2));
                Object columnValue_0_tSalesforceInput_2 = outgoingEnforcer_tSalesforceInput_2.get(0);
                        row16.Body = (byte[]) (columnValue_0_tSalesforceInput_2);
                Object columnValue_1_tSalesforceInput_2 = outgoingEnforcer_tSalesforceInput_2.get(1);
                        row16.Id = (String) (columnValue_1_tSalesforceInput_2);
                Object columnValue_2_tSalesforceInput_2 = outgoingEnforcer_tSalesforceInput_2.get(2);
                    if (columnValue_2_tSalesforceInput_2 == null) {
                        row16.BodyLength = 0;
                    } else {
                            row16.BodyLength = (int) (columnValue_2_tSalesforceInput_2);
                    }
                Object columnValue_3_tSalesforceInput_2 = outgoingEnforcer_tSalesforceInput_2.get(3);
                    if (columnValue_3_tSalesforceInput_2 == null) {
                        row16.IsPublic = false;
                    } else {
                            row16.IsPublic = (boolean) (columnValue_3_tSalesforceInput_2);
                    }
                Object columnValue_4_tSalesforceInput_2 = outgoingEnforcer_tSalesforceInput_2.get(4);
                        row16.Name = (String) (columnValue_4_tSalesforceInput_2);
                Object columnValue_5_tSalesforceInput_2 = outgoingEnforcer_tSalesforceInput_2.get(5);
                        row16.Type = (String) (columnValue_5_tSalesforceInput_2);
                Object columnValue_6_tSalesforceInput_2 = outgoingEnforcer_tSalesforceInput_2.get(6);
                        row16.Url = (String) (columnValue_6_tSalesforceInput_2);
                Object columnValue_7_tSalesforceInput_2 = outgoingEnforcer_tSalesforceInput_2.get(7);
                        row16.CreatedDate = (java.util.Date) (columnValue_7_tSalesforceInput_2);
        } catch (org.talend.components.api.exception.DataRejectException e_tSalesforceInput_2) {
        	java.util.Map<String,Object> info_tSalesforceInput_2 = e_tSalesforceInput_2.getRejectInfo();
            	//TODO use a method instead of getting method by the special key "error/errorMessage"
            	Object errorMessage_tSalesforceInput_2 = null;
            	if(info_tSalesforceInput_2.containsKey("error")){
            		errorMessage_tSalesforceInput_2 = info_tSalesforceInput_2.get("error");
        		}else if(info_tSalesforceInput_2.containsKey("errorMessage")){
            		errorMessage_tSalesforceInput_2 = info_tSalesforceInput_2.get("errorMessage");
        		}else{
        			errorMessage_tSalesforceInput_2 = "Rejected but error message missing";
        		}
        		errorMessage_tSalesforceInput_2 = "Row "+ nb_line_tSalesforceInput_2 + ": "+errorMessage_tSalesforceInput_2;
    			System.err.println(errorMessage_tSalesforceInput_2);
            	// If the record is reject, the main line record should put NULL
            	row16 = null;
    }
                java.lang.Iterable<?> outgoingMainRecordsList_tSalesforceInput_2 = new java.util.ArrayList<Object>();
                java.util.Iterator outgoingMainRecordsIt_tSalesforceInput_2 = null;


 



/**
 * [tSalesforceInput_2 begin ] stop
 */
	
	/**
	 * [tSalesforceInput_2 main ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_2";

	


 


	tos_count_tSalesforceInput_2++;

/**
 * [tSalesforceInput_2 main ] stop
 */
	
	/**
	 * [tSalesforceInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_2";

	


 



/**
 * [tSalesforceInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_7 main ] start
	 */

	

	
	
	currentComponent="tMap_7";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row16");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_7 = false;
		  boolean mainRowRejected_tMap_7 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row19" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow19 = false;
       		  	    	
       		  	    	
 							row19Struct row19ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_7) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_7 = false;
								
                        		    		row19HashKey.PONumber = row16.Name.substring(row16.Name.indexOf("-") + 1, row16.Name.indexOf("-", row16.Name.indexOf("-") + 1 )).toString();
                        		    		

								
		                        	row19HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row19.lookup( row19HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row19.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_7 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							

							row19Struct row19 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row19Struct fromLookup_row19 = null;
							row19 = row19Default;
										 
							
								 
							
							
								if (tHash_Lookup_row19 !=null && tHash_Lookup_row19.hasNext()) { // G 099
								
							
								
								fromLookup_row19 = tHash_Lookup_row19.next();

							
							
								} // G 099
							
							

							if(fromLookup_row19 != null) {
								row19 = fromLookup_row19;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_7__Struct Var = Var__tMap_7;// ###############################
        // ###############################
        // # Output tables

out8 = null;
DeleteDocument = null;

if(!rejectedInnerJoin_tMap_7 ) {

// # Output table : 'out8'
out8_tmp.Body = row16.Body;
out8_tmp.Id = row16.Id;
out8_tmp.BodyLength = row16.BodyLength;
out8_tmp.IsPublic = row16.IsPublic;
out8_tmp.Name = row16.Name+".csv";
out8_tmp.Type = row16.Type;
out8_tmp.Url = row16.Url;
out8_tmp.CreatedDate = row16.CreatedDate;
out8 = out8_tmp;

// # Output table : 'DeleteDocument'
DeleteDocument_tmp.Id = row16.Id ;
DeleteDocument = DeleteDocument_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_7 = false;










 


	tos_count_tMap_7++;

/**
 * [tMap_7 main ] stop
 */
	
	/**
	 * [tMap_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 process_data_begin ] stop
 */
// Start of branch "out8"
if(out8 != null) { 



	
	/**
	 * [tJavaRow_1 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out8");
					}
					

    // code sample:
//
// multiply by 2 the row identifier
// output_row.id = out8.id * 2;
//
// lowercase the name
// output_row.name = out8.name.toLowerCase();

String fileName = out8.Name;
System.out.println("fileName1    : " + fileName );

if(out8.BodyLength > 0) {
File f = new File("//srv-ftp/FTP/FTP_COMARCH/TEST/IN/ORDER/OUTPUT/" + fileName);
FileOutputStream output = new FileOutputStream(f);
byte[] decoded = Base64.decodeBase64(out8.Body);
output.write(decoded);
}
    nb_line_tJavaRow_1++;   

 


	tos_count_tJavaRow_1++;

/**
 * [tJavaRow_1 main ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 process_data_end ] stop
 */

} // End of branch "out8"




// Start of branch "DeleteDocument"
if(DeleteDocument != null) { 



	
	/**
	 * [tSalesforceOutput_1 main ] start
	 */

	

	
	
	currentComponent="tSalesforceOutput_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"DeleteDocument");
					}
					

        incomingEnforcer_tSalesforceOutput_1.createNewRecord();
                //skip the put action if the input column doesn't appear in component runtime schema
                if (incomingEnforcer_tSalesforceOutput_1.getRuntimeSchema().getField("Id") != null){
                    incomingEnforcer_tSalesforceOutput_1.put("Id", DeleteDocument.Id);
                }
        org.apache.avro.generic.IndexedRecord data_tSalesforceOutput_1 = incomingEnforcer_tSalesforceOutput_1.getCurrentRecord();
        

        writer_tSalesforceOutput_1.write(data_tSalesforceOutput_1);
        
        nb_line_tSalesforceOutput_1++;
        	if(!(writer_tSalesforceOutput_1 instanceof org.talend.components.api.component.runtime.WriterWithFeedback)) {
          		// For no feedback writer,just pass the input record to the output
          		if (data_tSalesforceOutput_1!=null) {
          			outgoingMainRecordsList_tSalesforceOutput_1 = java.util.Arrays.asList(data_tSalesforceOutput_1);
              	}
                }

 


	tos_count_tSalesforceOutput_1++;

/**
 * [tSalesforceOutput_1 main ] stop
 */
	
	/**
	 * [tSalesforceOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSalesforceOutput_1";

	

                row29 = null;
            	if (writer_tSalesforceOutput_1 instanceof org.talend.components.api.component.runtime.WriterWithFeedback) {
					org.talend.components.api.component.runtime.WriterWithFeedback writerWithFeedbackMain_tSalesforceOutput_1 = (org.talend.components.api.component.runtime.WriterWithFeedback) writer_tSalesforceOutput_1;
					writerWithFeedbackMain_tSalesforceOutput_1 = new org.talend.codegen.flowvariables.runtime.FlowVariablesWriter(writerWithFeedbackMain_tSalesforceOutput_1, container_tSalesforceOutput_1);
					java.lang.Iterable<?> outgoingRecs_tSalesforceOutput_1 = writerWithFeedbackMain_tSalesforceOutput_1.getSuccessfulWrites();
                    java.util.Iterator outgoingMainRecords_tSalesforceOutput_1 = outgoingRecs_tSalesforceOutput_1.iterator();
                    Object outgoingMain_tSalesforceOutput_1 = null;
                    if (outgoingMainRecords_tSalesforceOutput_1.hasNext()) {
                    	outgoingMainRecordsList_tSalesforceOutput_1 = outgoingRecs_tSalesforceOutput_1;
                    }
              	}
            	outgoingMainRecordsIt_tSalesforceOutput_1 = outgoingMainRecordsList_tSalesforceOutput_1.iterator();
            	while(outgoingMainRecordsIt_tSalesforceOutput_1.hasNext()) { //Start of data processing while block
            		
            			if(outgoingMainRecordsIt_tSalesforceOutput_1.hasNext()) {
            				row29 = new row29Struct();
            				Object outgoingMain_tSalesforceOutput_1 = outgoingMainRecordsIt_tSalesforceOutput_1.next();
            				
        // Construct the factory once when the first data arrives.
        if (factory_tSalesforceOutput_1OutMain == null) {
            factory_tSalesforceOutput_1OutMain = (org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord>)
                    new org.talend.daikon.avro.AvroRegistry()
                            .createIndexedRecordConverter(outgoingMain_tSalesforceOutput_1.getClass());
        }

        // Enforce the outgoing schema on the input.
        outgoingEnforcer_tSalesforceOutput_1OutMain.setWrapped(factory_tSalesforceOutput_1OutMain.convertToAvro(outgoingMain_tSalesforceOutput_1));
                Object columnValue_0_tSalesforceOutput_1OutMain = outgoingEnforcer_tSalesforceOutput_1OutMain.get(0);
                        row29.Id = (String) (columnValue_0_tSalesforceOutput_1OutMain);
            			} else {
            				row29 = null;
            			}
            		

 



/**
 * [tSalesforceOutput_1 process_data_begin ] stop
 */
// Start of branch "row29"
if(row29 != null) { 



	
	/**
	 * [tLogRow_10 main ] start
	 */

	

	
	
	currentComponent="tLogRow_10";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row29");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_10 = new StringBuilder();




   				
	    		if(row29.Id != null) { //              
                    							
       
				strBuffer_tLogRow_10.append(
				                String.valueOf(row29.Id)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_10 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_10 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_10);
                    }
                    consoleOut_tLogRow_10.println(strBuffer_tLogRow_10.toString());
                    consoleOut_tLogRow_10.flush();
                    nb_line_tLogRow_10++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_10++;

/**
 * [tLogRow_10 main ] stop
 */
	
	/**
	 * [tLogRow_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_10";

	

 



/**
 * [tLogRow_10 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_10";

	

 



/**
 * [tLogRow_10 process_data_end ] stop
 */

} // End of branch "row29"




	
	/**
	 * [tSalesforceOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tSalesforceOutput_1";

	
	} //end of data processing while block
	if (writer_tSalesforceOutput_1 instanceof org.talend.components.api.component.runtime.WriterWithFeedback) {
    	((org.talend.components.api.component.runtime.WriterWithFeedback) writer_tSalesforceOutput_1).cleanWrites();
    }
	

 



/**
 * [tSalesforceOutput_1 process_data_end ] stop
 */

} // End of branch "DeleteDocument"




	
	/**
	 * [tMap_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 process_data_end ] stop
 */



	
	/**
	 * [tSalesforceInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_2";

	


 



/**
 * [tSalesforceInput_2 process_data_end ] stop
 */
	
	/**
	 * [tSalesforceInput_2 end ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_2";

	
// end of generic


resourceMap.put("finish_tSalesforceInput_2", Boolean.TRUE);

    } // while
    reader_tSalesforceInput_2.close();
    final java.util.Map<String, Object> resultMap_tSalesforceInput_2 = reader_tSalesforceInput_2.getReturnValues();
if(resultMap_tSalesforceInput_2!=null) {
	for(java.util.Map.Entry<String,Object> entry_tSalesforceInput_2 : resultMap_tSalesforceInput_2.entrySet()) {
		switch(entry_tSalesforceInput_2.getKey()) {
		case org.talend.components.api.component.ComponentDefinition.RETURN_ERROR_MESSAGE :
			container_tSalesforceInput_2.setComponentData("tSalesforceInput_2", "ERROR_MESSAGE", entry_tSalesforceInput_2.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_TOTAL_RECORD_COUNT :
			container_tSalesforceInput_2.setComponentData("tSalesforceInput_2", "NB_LINE", entry_tSalesforceInput_2.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_SUCCESS_RECORD_COUNT :
			container_tSalesforceInput_2.setComponentData("tSalesforceInput_2", "NB_SUCCESS", entry_tSalesforceInput_2.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_REJECT_RECORD_COUNT :
			container_tSalesforceInput_2.setComponentData("tSalesforceInput_2", "NB_REJECT", entry_tSalesforceInput_2.getValue());
			break;
		default :
            StringBuilder studio_key_tSalesforceInput_2 = new StringBuilder();
            for (int i_tSalesforceInput_2 = 0; i_tSalesforceInput_2 < entry_tSalesforceInput_2.getKey().length(); i_tSalesforceInput_2++) {
                char ch_tSalesforceInput_2 = entry_tSalesforceInput_2.getKey().charAt(i_tSalesforceInput_2);
                if(Character.isUpperCase(ch_tSalesforceInput_2) && i_tSalesforceInput_2> 0) {
                	studio_key_tSalesforceInput_2.append('_');
                }
                studio_key_tSalesforceInput_2.append(ch_tSalesforceInput_2);
            }
			container_tSalesforceInput_2.setComponentData("tSalesforceInput_2", studio_key_tSalesforceInput_2.toString().toUpperCase(java.util.Locale.ENGLISH), entry_tSalesforceInput_2.getValue());
			break;
		}
	}
}

 

ok_Hash.put("tSalesforceInput_2", true);
end_Hash.put("tSalesforceInput_2", System.currentTimeMillis());




/**
 * [tSalesforceInput_2 end ] stop
 */

	
	/**
	 * [tMap_7 end ] start
	 */

	

	
	
	currentComponent="tMap_7";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row19 != null) {
						tHash_Lookup_row19.endGet();
					}
					globalMap.remove( "tHash_Lookup_row19" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row16");
			  	}
			  	
 

ok_Hash.put("tMap_7", true);
end_Hash.put("tMap_7", System.currentTimeMillis());




/**
 * [tMap_7 end ] stop
 */

	
	/**
	 * [tJavaRow_1 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

globalMap.put("tJavaRow_1_NB_LINE",nb_line_tJavaRow_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out8");
			  	}
			  	
 

ok_Hash.put("tJavaRow_1", true);
end_Hash.put("tJavaRow_1", System.currentTimeMillis());




/**
 * [tJavaRow_1 end ] stop
 */




	
	/**
	 * [tSalesforceOutput_1 end ] start
	 */

	

	
	
	currentComponent="tSalesforceOutput_1";

	
// end of generic


resourceMap.put("finish_tSalesforceOutput_1", Boolean.TRUE);

    org.talend.components.api.component.runtime.Result resultObject_tSalesforceOutput_1 = (org.talend.components.api.component.runtime.Result)writer_tSalesforceOutput_1.close();
    final java.util.Map<String, Object> resultMap_tSalesforceOutput_1 = writer_tSalesforceOutput_1.getWriteOperation().finalize(java.util.Arrays.<org.talend.components.api.component.runtime.Result>asList(resultObject_tSalesforceOutput_1), container_tSalesforceOutput_1);
if(resultMap_tSalesforceOutput_1!=null) {
	for(java.util.Map.Entry<String,Object> entry_tSalesforceOutput_1 : resultMap_tSalesforceOutput_1.entrySet()) {
		switch(entry_tSalesforceOutput_1.getKey()) {
		case org.talend.components.api.component.ComponentDefinition.RETURN_ERROR_MESSAGE :
			container_tSalesforceOutput_1.setComponentData("tSalesforceOutput_1", "ERROR_MESSAGE", entry_tSalesforceOutput_1.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_TOTAL_RECORD_COUNT :
			container_tSalesforceOutput_1.setComponentData("tSalesforceOutput_1", "NB_LINE", entry_tSalesforceOutput_1.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_SUCCESS_RECORD_COUNT :
			container_tSalesforceOutput_1.setComponentData("tSalesforceOutput_1", "NB_SUCCESS", entry_tSalesforceOutput_1.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_REJECT_RECORD_COUNT :
			container_tSalesforceOutput_1.setComponentData("tSalesforceOutput_1", "NB_REJECT", entry_tSalesforceOutput_1.getValue());
			break;
		default :
            StringBuilder studio_key_tSalesforceOutput_1 = new StringBuilder();
            for (int i_tSalesforceOutput_1 = 0; i_tSalesforceOutput_1 < entry_tSalesforceOutput_1.getKey().length(); i_tSalesforceOutput_1++) {
                char ch_tSalesforceOutput_1 = entry_tSalesforceOutput_1.getKey().charAt(i_tSalesforceOutput_1);
                if(Character.isUpperCase(ch_tSalesforceOutput_1) && i_tSalesforceOutput_1> 0) {
                	studio_key_tSalesforceOutput_1.append('_');
                }
                studio_key_tSalesforceOutput_1.append(ch_tSalesforceOutput_1);
            }
			container_tSalesforceOutput_1.setComponentData("tSalesforceOutput_1", studio_key_tSalesforceOutput_1.toString().toUpperCase(java.util.Locale.ENGLISH), entry_tSalesforceOutput_1.getValue());
			break;
		}
	}
}

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"DeleteDocument");
			  	}
			  	
 

ok_Hash.put("tSalesforceOutput_1", true);
end_Hash.put("tSalesforceOutput_1", System.currentTimeMillis());




/**
 * [tSalesforceOutput_1 end ] stop
 */
	
	/**
	 * [tSalesforceOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSalesforceOutput_1";

	

                row29 = null;
            	if (writer_tSalesforceOutput_1 instanceof org.talend.components.api.component.runtime.WriterWithFeedback) {
					org.talend.components.api.component.runtime.WriterWithFeedback writerWithFeedbackMain_tSalesforceOutput_1 = (org.talend.components.api.component.runtime.WriterWithFeedback) writer_tSalesforceOutput_1;
					writerWithFeedbackMain_tSalesforceOutput_1 = new org.talend.codegen.flowvariables.runtime.FlowVariablesWriter(writerWithFeedbackMain_tSalesforceOutput_1, container_tSalesforceOutput_1);
					java.lang.Iterable<?> outgoingRecs_tSalesforceOutput_1 = writerWithFeedbackMain_tSalesforceOutput_1.getSuccessfulWrites();
                    java.util.Iterator outgoingMainRecords_tSalesforceOutput_1 = outgoingRecs_tSalesforceOutput_1.iterator();
                    Object outgoingMain_tSalesforceOutput_1 = null;
                    if (outgoingMainRecords_tSalesforceOutput_1.hasNext()) {
                    	outgoingMainRecordsList_tSalesforceOutput_1 = outgoingRecs_tSalesforceOutput_1;
                    }
              	}
            	outgoingMainRecordsIt_tSalesforceOutput_1 = outgoingMainRecordsList_tSalesforceOutput_1.iterator();
            	while(outgoingMainRecordsIt_tSalesforceOutput_1.hasNext()) { //Start of data processing while block
            		
            			if(outgoingMainRecordsIt_tSalesforceOutput_1.hasNext()) {
            				row29 = new row29Struct();
            				Object outgoingMain_tSalesforceOutput_1 = outgoingMainRecordsIt_tSalesforceOutput_1.next();
            				
        // Construct the factory once when the first data arrives.
        if (factory_tSalesforceOutput_1OutMain == null) {
            factory_tSalesforceOutput_1OutMain = (org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord>)
                    new org.talend.daikon.avro.AvroRegistry()
                            .createIndexedRecordConverter(outgoingMain_tSalesforceOutput_1.getClass());
        }

        // Enforce the outgoing schema on the input.
        outgoingEnforcer_tSalesforceOutput_1OutMain.setWrapped(factory_tSalesforceOutput_1OutMain.convertToAvro(outgoingMain_tSalesforceOutput_1));
                Object columnValue_0_tSalesforceOutput_1OutMain = outgoingEnforcer_tSalesforceOutput_1OutMain.get(0);
                        row29.Id = (String) (columnValue_0_tSalesforceOutput_1OutMain);
            			} else {
            				row29 = null;
            			}
            		

 



/**
 * [tSalesforceOutput_1 process_data_begin ] stop
 */
// Start of branch "row29"
if(row29 != null) { 



	
	/**
	 * [tLogRow_10 main ] start
	 */

	

	
	
	currentComponent="tLogRow_10";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row29");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_10 = new StringBuilder();




   				
	    		if(row29.Id != null) { //              
                    							
       
				strBuffer_tLogRow_10.append(
				                String.valueOf(row29.Id)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_10 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_10 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_10);
                    }
                    consoleOut_tLogRow_10.println(strBuffer_tLogRow_10.toString());
                    consoleOut_tLogRow_10.flush();
                    nb_line_tLogRow_10++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_10++;

/**
 * [tLogRow_10 main ] stop
 */
	
	/**
	 * [tLogRow_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_10";

	

 



/**
 * [tLogRow_10 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_10";

	

 



/**
 * [tLogRow_10 process_data_end ] stop
 */

} // End of branch "row29"




	
	/**
	 * [tSalesforceOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tSalesforceOutput_1";

	
	} //end of data processing while block
	if (writer_tSalesforceOutput_1 instanceof org.talend.components.api.component.runtime.WriterWithFeedback) {
    	((org.talend.components.api.component.runtime.WriterWithFeedback) writer_tSalesforceOutput_1).cleanWrites();
    }
	

 



/**
 * [tSalesforceOutput_1 process_data_end ] stop
 */

	
	/**
	 * [tLogRow_10 end ] start
	 */

	

	
	
	currentComponent="tLogRow_10";

	


//////
//////
globalMap.put("tLogRow_10_NB_LINE",nb_line_tLogRow_10);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row29");
			  	}
			  	
 

ok_Hash.put("tLogRow_10", true);
end_Hash.put("tLogRow_10", System.currentTimeMillis());




/**
 * [tLogRow_10 end ] stop
 */









				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tSalesforceInput_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk13", 0, "ok");
								} 
							
							tFileList_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_7"
					     			globalMap.remove("tHash_Lookup_row19"); 
				     			
				try{
					
	
	/**
	 * [tSalesforceInput_2 finally ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_2";

	
// finally of generic


if(resourceMap.get("finish_tSalesforceInput_2")==null){
    if(resourceMap.get("reader_tSalesforceInput_2")!=null){
		try {
			((org.talend.components.api.component.runtime.Reader)resourceMap.get("reader_tSalesforceInput_2")).close();
		} catch (java.io.IOException e_tSalesforceInput_2) {
			String errorMessage_tSalesforceInput_2 = "failed to release the resource in tSalesforceInput_2 :" + e_tSalesforceInput_2.getMessage();
			System.err.println(errorMessage_tSalesforceInput_2);
		}
	}
}
 



/**
 * [tSalesforceInput_2 finally ] stop
 */

	
	/**
	 * [tMap_7 finally ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 finally ] stop
 */

	
	/**
	 * [tJavaRow_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 finally ] stop
 */




	
	/**
	 * [tSalesforceOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tSalesforceOutput_1";

	
// finally of generic


if(resourceMap.get("finish_tSalesforceOutput_1")==null){
    if(resourceMap.get("writer_tSalesforceOutput_1")!=null){
		try {
			((org.talend.components.api.component.runtime.Writer)resourceMap.get("writer_tSalesforceOutput_1")).close();
		} catch (java.io.IOException e_tSalesforceOutput_1) {
			String errorMessage_tSalesforceOutput_1 = "failed to release the resource in tSalesforceOutput_1 :" + e_tSalesforceOutput_1.getMessage();
			System.err.println(errorMessage_tSalesforceOutput_1);
		}
	}
}
 



/**
 * [tSalesforceOutput_1 finally ] stop
 */

	
	/**
	 * [tLogRow_10 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_10";

	

 



/**
 * [tLogRow_10 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSalesforceInput_2_SUBPROCESS_STATE", 1);
	}
	

public void tFileList_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileList_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileList_3 begin ] start
	 */

				
			int NB_ITERATE_tFileDelete_1 = 0; //for statistics
			

	
		
		ok_Hash.put("tFileList_3", false);
		start_Hash.put("tFileList_3", System.currentTimeMillis());
		
	
	currentComponent="tFileList_3";

	
		int tos_count_tFileList_3 = 0;
		
	
 
     
    
  String directory_tFileList_3 = "C:/Haddad_Interface_SF_JDE/Interface Salesforce/OrderEDI/1temp";
  final java.util.List<String> maskList_tFileList_3 = new java.util.ArrayList<String>();
  final java.util.List<java.util.regex.Pattern> patternList_tFileList_3 = new java.util.ArrayList<java.util.regex.Pattern>();
      maskList_tFileList_3.add("*");  
  for (final String filemask_tFileList_3 : maskList_tFileList_3) {
	String filemask_compile_tFileList_3 = filemask_tFileList_3;
	
		filemask_compile_tFileList_3 = org.apache.oro.text.GlobCompiler.globToPerl5(filemask_tFileList_3.toCharArray(), org.apache.oro.text.GlobCompiler.DEFAULT_MASK);
	
		java.util.regex.Pattern fileNamePattern_tFileList_3 = java.util.regex.Pattern.compile(filemask_compile_tFileList_3);
	patternList_tFileList_3.add(fileNamePattern_tFileList_3);
  }
  int NB_FILEtFileList_3 = 0;

  final boolean case_sensitive_tFileList_3 = true;
    final java.util.List<java.io.File> list_tFileList_3 = new java.util.ArrayList<java.io.File>();
    final java.util.Set<String> filePath_tFileList_3 = new java.util.HashSet<String>();
	java.io.File file_tFileList_3 = new java.io.File(directory_tFileList_3);
    
		file_tFileList_3.listFiles(new java.io.FilenameFilter() {
			public boolean accept(java.io.File dir, String name) {
				java.io.File file = new java.io.File(dir, name);
				
	                if (!file.isDirectory()) {
						
    	String fileName_tFileList_3 = file.getName();
		for (final java.util.regex.Pattern fileNamePattern_tFileList_3 : patternList_tFileList_3) {
          	if (fileNamePattern_tFileList_3.matcher(fileName_tFileList_3).matches()){
					if(!filePath_tFileList_3.contains(file.getAbsolutePath())) {
			          list_tFileList_3.add(file);
			          filePath_tFileList_3.add(file.getAbsolutePath());
			        }
			}
		}
	                	return true;
	                } else {
	                  file.listFiles(this);
	                }
				
				return false;
			}
		}
		); 
      java.util.Collections.sort(list_tFileList_3);
    
    for (int i_tFileList_3 = 0; i_tFileList_3 < list_tFileList_3.size(); i_tFileList_3++){
      java.io.File files_tFileList_3 = list_tFileList_3.get(i_tFileList_3);
      String fileName_tFileList_3 = files_tFileList_3.getName();
      
      String currentFileName_tFileList_3 = files_tFileList_3.getName(); 
      String currentFilePath_tFileList_3 = files_tFileList_3.getAbsolutePath();
      String currentFileDirectory_tFileList_3 = files_tFileList_3.getParent();
      String currentFileExtension_tFileList_3 = null;
      
      if (files_tFileList_3.getName().contains(".") && files_tFileList_3.isFile()){
        currentFileExtension_tFileList_3 = files_tFileList_3.getName().substring(files_tFileList_3.getName().lastIndexOf(".") + 1);
      } else{
        currentFileExtension_tFileList_3 = "";
      }
      
      NB_FILEtFileList_3 ++;
      globalMap.put("tFileList_3_CURRENT_FILE", currentFileName_tFileList_3);
      globalMap.put("tFileList_3_CURRENT_FILEPATH", currentFilePath_tFileList_3);
      globalMap.put("tFileList_3_CURRENT_FILEDIRECTORY", currentFileDirectory_tFileList_3);
      globalMap.put("tFileList_3_CURRENT_FILEEXTENSION", currentFileExtension_tFileList_3);
      globalMap.put("tFileList_3_NB_FILE", NB_FILEtFileList_3);
      
 



/**
 * [tFileList_3 begin ] stop
 */
	
	/**
	 * [tFileList_3 main ] start
	 */

	

	
	
	currentComponent="tFileList_3";

	

 


	tos_count_tFileList_3++;

/**
 * [tFileList_3 main ] stop
 */
	
	/**
	 * [tFileList_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileList_3";

	

 



/**
 * [tFileList_3 process_data_begin ] stop
 */
	NB_ITERATE_tFileDelete_1++;
	
	
				if(execStat){
					runStat.updateStatOnConnection("iterate5", 1, "exec" + NB_ITERATE_tFileDelete_1);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [tFileDelete_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileDelete_1", false);
		start_Hash.put("tFileDelete_1", System.currentTimeMillis());
		
	
	currentComponent="tFileDelete_1";

	
		int tos_count_tFileDelete_1 = 0;
		

 



/**
 * [tFileDelete_1 begin ] stop
 */
	
	/**
	 * [tFileDelete_1 main ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";

	

 

class DeleteFoldertFileDelete_1{
	 /**
     * delete all the sub-files in 'file'
     * 
     * @param file
     */
	public boolean delete(java.io.File file) {
        java.io.File[] files = file.listFiles();
        for (int i = 0; i < files.length; i++) {
            if (files[i].isFile()) {
                files[i].delete();
            } else if (files[i].isDirectory()) {
                if (!files[i].delete()) {
                    delete(files[i]);
                }
            }
        }
        deleteDirectory(file);
        return file.delete();
    }

    /**
     * delete all the sub-folders in 'file'
     * 
     * @param file
     */
    private void deleteDirectory(java.io.File file) {
        java.io.File[] filed = file.listFiles();
        for (int i = 0; i < filed.length; i++) {
        	if(filed[i].isDirectory()) {
            	deleteDirectory(filed[i]);
            }
            filed[i].delete();
        }
    }

}
    java.io.File file_tFileDelete_1=new java.io.File(((String)globalMap.get("tFileList_3_CURRENT_FILEPATH")));
    if(file_tFileDelete_1.exists()&& file_tFileDelete_1.isFile()){
    	if(file_tFileDelete_1.delete()){
    		globalMap.put("tFileDelete_1_CURRENT_STATUS", "File deleted.");
		}else{
			globalMap.put("tFileDelete_1_CURRENT_STATUS", "No file deleted.");
				throw new RuntimeException("File " + file_tFileDelete_1.getAbsolutePath() + " can not be deleted.");
		}
	}else{
		globalMap.put("tFileDelete_1_CURRENT_STATUS", "File does not exist or is invalid.");
			throw new RuntimeException("File " + file_tFileDelete_1.getAbsolutePath() + " does not exist or is invalid or is not a file.");
	}
	globalMap.put("tFileDelete_1_DELETE_PATH",((String)globalMap.get("tFileList_3_CURRENT_FILEPATH")));
    
     
 

 


	tos_count_tFileDelete_1++;

/**
 * [tFileDelete_1 main ] stop
 */
	
	/**
	 * [tFileDelete_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";

	

 



/**
 * [tFileDelete_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileDelete_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";

	

 



/**
 * [tFileDelete_1 process_data_end ] stop
 */
	
	/**
	 * [tFileDelete_1 end ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";

	

 

ok_Hash.put("tFileDelete_1", true);
end_Hash.put("tFileDelete_1", System.currentTimeMillis());




/**
 * [tFileDelete_1 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("iterate5", 2, "exec" + NB_ITERATE_tFileDelete_1);
						}				
					




	
	/**
	 * [tFileList_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileList_3";

	

 



/**
 * [tFileList_3 process_data_end ] stop
 */
	
	/**
	 * [tFileList_3 end ] start
	 */

	

	
	
	currentComponent="tFileList_3";

	

  
    }
  globalMap.put("tFileList_3_NB_FILE", NB_FILEtFileList_3);
  

  
 

 

ok_Hash.put("tFileList_3", true);
end_Hash.put("tFileList_3", System.currentTimeMillis());




/**
 * [tFileList_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileList_3 finally ] start
	 */

	

	
	
	currentComponent="tFileList_3";

	

 



/**
 * [tFileList_3 finally ] stop
 */

	
	/**
	 * [tFileDelete_1 finally ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";

	

 



/**
 * [tFileDelete_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileList_3_SUBPROCESS_STATE", 1);
	}
	

public void tSendMail_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSendMail_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tSendMail_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tSendMail_1", false);
		start_Hash.put("tSendMail_1", System.currentTimeMillis());
		
	
	currentComponent="tSendMail_1";

	
		int tos_count_tSendMail_1 = 0;
		

 



/**
 * [tSendMail_1 begin ] stop
 */
	
	/**
	 * [tSendMail_1 main ] start
	 */

	

	
	
	currentComponent="tSendMail_1";

	

 

	String smtpHost_tSendMail_1 = "smtp.office365.com";
        String smtpPort_tSendMail_1 = "587";
	String from_tSendMail_1 = ("otman.nikraj@haddadeurope.com");
    String to_tSendMail_1 = ("otman.nikraj@haddadeurope.com").replace(";",",");
    String cc_tSendMail_1 = (("")==null || "".equals(""))?null:("").replace(";",",");
    String bcc_tSendMail_1 = (("")==null || "".equals(""))?null:("").replace(";",",");
    String subject_tSendMail_1 = ("Haddad - Salesforce Interface EDI Integration Error");
    
	java.util.List<java.util.Map<String, String>> headers_tSendMail_1 = new java.util.ArrayList<java.util.Map<String,String>>();
	java.util.List<String> attachments_tSendMail_1 = new java.util.ArrayList<String>();
	java.util.List<String> contentTransferEncoding_tSendMail_1 = new java.util.ArrayList<String>();

	String message_tSendMail_1 = (("Error occur during process : Haddad - Salesforce Interface EDI Integration Error\nPlease look at the error log.") == null || "".equals("Error occur during process : Haddad - Salesforce Interface EDI Integration Error\nPlease look at the error log.")) ? "\"\"" : ("Error occur during process : Haddad - Salesforce Interface EDI Integration Error\nPlease look at the error log.") ;
	java.util.Properties props_tSendMail_1 = System.getProperties();     
	props_tSendMail_1.put("mail.smtp.host", smtpHost_tSendMail_1);
	props_tSendMail_1.put("mail.smtp.port", smtpPort_tSendMail_1);
		props_tSendMail_1.put("mail.mime.encodefilename", "true");
		props_tSendMail_1.put("mail.smtp.starttls.enable","true");     
	try {
		
		
			props_tSendMail_1.put("mail.smtp.auth", "true");
			javax.mail.Session session_tSendMail_1 = javax.mail.Session.getInstance(props_tSendMail_1, new javax.mail.Authenticator(){         
				protected javax.mail.PasswordAuthentication getPasswordAuthentication() {
				
                 
	final String decryptedPassword_tSendMail_1 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[1lqCuT9kTtgBI0PgNn5nJpn3V/KGWeP43WGh2eQMAjtccWHoet0GhmWSNh24cw==]");
				
				
				return new javax.mail.PasswordAuthentication("otman.nikraj@haddadeurope.com", decryptedPassword_tSendMail_1); 
				}         
			});   
		
		
		javax.mail.Message msg_tSendMail_1 = new javax.mail.internet.MimeMessage(session_tSendMail_1);
		msg_tSendMail_1.setFrom(new javax.mail.internet.InternetAddress(from_tSendMail_1, null));
		msg_tSendMail_1.setRecipients(javax.mail.Message.RecipientType.TO,javax.mail.internet.InternetAddress.parse(to_tSendMail_1, false));
		if (cc_tSendMail_1 != null) msg_tSendMail_1.setRecipients(javax.mail.Message.RecipientType.CC, javax.mail.internet.InternetAddress.parse(cc_tSendMail_1, false));
		if (bcc_tSendMail_1 != null) msg_tSendMail_1.setRecipients(javax.mail.Message.RecipientType.BCC, javax.mail.internet.InternetAddress.parse(bcc_tSendMail_1, false));
		msg_tSendMail_1.setSubject(subject_tSendMail_1);

		for (int i_tSendMail_1 = 0; i_tSendMail_1 < headers_tSendMail_1.size(); i_tSendMail_1++) {
			java.util.Map<String, String> header_tSendMail_1 = headers_tSendMail_1.get(i_tSendMail_1);
			msg_tSendMail_1.setHeader(header_tSendMail_1.get("KEY"), header_tSendMail_1.get("VALUE"));    
		}  
		msg_tSendMail_1.setSentDate(new Date());
		msg_tSendMail_1.setHeader("X-Priority", "3"); //High->1 Normal->3 Low->5
		javax.mail.Multipart mp_tSendMail_1 = new javax.mail.internet.MimeMultipart();
		javax.mail.internet.MimeBodyPart mbpText_tSendMail_1 = new javax.mail.internet.MimeBodyPart();
		mbpText_tSendMail_1.setText(message_tSendMail_1,"ISO-8859-15", "plain");
		mp_tSendMail_1.addBodyPart(mbpText_tSendMail_1);
  
		javax.mail.internet.MimeBodyPart mbpFile_tSendMail_1 = null;

		for (int i_tSendMail_1 = 0; i_tSendMail_1 < attachments_tSendMail_1.size(); i_tSendMail_1++){
			String filename_tSendMail_1 = attachments_tSendMail_1.get(i_tSendMail_1);
			javax.activation.FileDataSource fds_tSendMail_1 = null;
			java.io.File file_tSendMail_1 = new java.io.File(filename_tSendMail_1);
			
				if (!file_tSendMail_1.exists()){
					continue;
				}
			
    		if (file_tSendMail_1.isDirectory()){
				java.io.File[] subFiles_tSendMail_1 = file_tSendMail_1.listFiles();
				for(java.io.File subFile_tSendMail_1 : subFiles_tSendMail_1){
					if (subFile_tSendMail_1.isFile()){
						fds_tSendMail_1 = new javax.activation.FileDataSource(subFile_tSendMail_1.getAbsolutePath());
						mbpFile_tSendMail_1 = new javax.mail.internet.MimeBodyPart();
						mbpFile_tSendMail_1.setDataHandler(new javax.activation.DataHandler(fds_tSendMail_1));
						mbpFile_tSendMail_1.setFileName(javax.mail.internet.MimeUtility.encodeText(fds_tSendMail_1.getName()));
						if(contentTransferEncoding_tSendMail_1.get(i_tSendMail_1).equalsIgnoreCase("base64")){
							mbpFile_tSendMail_1.setHeader("Content-Transfer-Encoding", "base64");
						}
						mp_tSendMail_1.addBodyPart(mbpFile_tSendMail_1);
					}
				}
    		}else{
				mbpFile_tSendMail_1 = new javax.mail.internet.MimeBodyPart();
				fds_tSendMail_1 = new javax.activation.FileDataSource(filename_tSendMail_1);
				mbpFile_tSendMail_1.setDataHandler(new javax.activation.DataHandler(fds_tSendMail_1)); 
				mbpFile_tSendMail_1.setFileName(javax.mail.internet.MimeUtility.encodeText(fds_tSendMail_1.getName()));
				if(contentTransferEncoding_tSendMail_1.get(i_tSendMail_1).equalsIgnoreCase("base64")){
					mbpFile_tSendMail_1.setHeader("Content-Transfer-Encoding", "base64");
				}
				mp_tSendMail_1.addBodyPart(mbpFile_tSendMail_1);
			}
		}
		// -- set the content --
		msg_tSendMail_1.setContent(mp_tSendMail_1);
		// add handlers for main MIME types
		javax.activation.MailcapCommandMap mc_tSendMail_1 = ( javax.activation.MailcapCommandMap)javax.activation.CommandMap.getDefaultCommandMap();
		mc_tSendMail_1.addMailcap("text/html;; x-java-content-handler=com.sun.mail.handlers.text_html");
		mc_tSendMail_1.addMailcap("text/xml;; x-java-content-handler=com.sun.mail.handlers.text_xml");
		mc_tSendMail_1.addMailcap("text/plain;; x-java-content-handler=com.sun.mail.handlers.text_plain");
		mc_tSendMail_1.addMailcap("multipart/*;; x-java-content-handler=com.sun.mail.handlers.multipart_mixed");
		mc_tSendMail_1.addMailcap("message/rfc822;; x-java-content-handler=com.sun.mail.handlers.message_rfc822");
		javax.activation.CommandMap.setDefaultCommandMap(mc_tSendMail_1);
		// -- Send the message --
		javax.mail.Transport.send(msg_tSendMail_1);
	} catch(java.lang.Exception e){
  		
			throw(e);
		
	}finally{
		props_tSendMail_1.remove("mail.smtp.host");
		props_tSendMail_1.remove("mail.smtp.port");
		
		props_tSendMail_1.remove("mail.mime.encodefilename");
		
			props_tSendMail_1.remove("mail.smtp.starttls.enable");
		
		props_tSendMail_1.remove("mail.smtp.auth");     
	}

 


	tos_count_tSendMail_1++;

/**
 * [tSendMail_1 main ] stop
 */
	
	/**
	 * [tSendMail_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSendMail_1";

	

 



/**
 * [tSendMail_1 process_data_begin ] stop
 */
	
	/**
	 * [tSendMail_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tSendMail_1";

	

 



/**
 * [tSendMail_1 process_data_end ] stop
 */
	
	/**
	 * [tSendMail_1 end ] start
	 */

	

	
	
	currentComponent="tSendMail_1";

	

 

ok_Hash.put("tSendMail_1", true);
end_Hash.put("tSendMail_1", System.currentTimeMillis());




/**
 * [tSendMail_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSendMail_1 finally ] start
	 */

	

	
	
	currentComponent="tSendMail_1";

	

 



/**
 * [tSendMail_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSendMail_1_SUBPROCESS_STATE", 1);
	}
	

public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";

	
		int tos_count_tJava_1 = 0;
		


System.out.println("tFileOutputDelimited_1_NB_LINE1    : " + (globalMap.get("tFileOutputDelimited_1_NB_LINE")) );
 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_begin ] stop
 */
	
	/**
	 * [tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_end ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());




/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	

public void tJava_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_2", false);
		start_Hash.put("tJava_2", System.currentTimeMillis());
		
	
	currentComponent="tJava_2";

	
		int tos_count_tJava_2 = 0;
		



System.out.println("(String)globalMap.get()lengthAA ::  ");
//System.out.println("(String)globalMap.get()length ::  " + globalMap.get("OrderPONumbers").toString().length()  );

System.out.println("(String)globalMap.get()1 ::  " + (String)globalMap.get("OrderPONumbers")  );

//StringHandling.RIGHT((String)globalMap.get("StyleColors")  , globalMap.get("StyleColors").toString().length() - 1 )



if ( globalMap.get("OrderPONumber").toString().length() > 0) {
  globalMap.put("OrderPONumbers", StringHandling.LEFT((String)globalMap.get("OrderPONumber") , globalMap.get("OrderPONumber").toString().length() - 1 ));
  System.out.println("OrderPONumbers111    : " + ((String)globalMap.get("OrderPONumbers")) );
} else {
  globalMap.put("OrderPONumbers", null);
  System.out.println("OrderPONumbers11    : " + ((String)globalMap.get("OrderPONumbers")) );
}

System.out.println("OrderPONumbers    : " + ((String)globalMap.get("OrderPONumbers")) );
System.out.println("(String)globalMap.get()311 ::  " + ((String)globalMap.get("tFileList_1_CURRENT_FILEPATH"))  );




System.out.println("(String)globalMap.get()2 ::  " + (String)globalMap.get("OrderPONumbers")  );
 



/**
 * [tJava_2 begin ] stop
 */
	
	/**
	 * [tJava_2 main ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 


	tos_count_tJava_2++;

/**
 * [tJava_2 main ] stop
 */
	
	/**
	 * [tJava_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 



/**
 * [tJava_2 process_data_begin ] stop
 */
	
	/**
	 * [tJava_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 



/**
 * [tJava_2 process_data_end ] stop
 */
	
	/**
	 * [tJava_2 end ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 

ok_Hash.put("tJava_2", true);
end_Hash.put("tJava_2", System.currentTimeMillis());




/**
 * [tJava_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_2 finally ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 



/**
 * [tJava_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}
	


public static class row27Struct implements routines.system.IPersistableComparableLookupRow<row27Struct> {
    final static byte[] commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI = new byte[0];
    static byte[] commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String Filename;

				public String getFilename () {
					return this.Filename;
				}
				
			    public String PONumber;

				public String getPONumber () {
					return this.PONumber;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.PONumber == null) ? 0 : this.PONumber.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row27Struct other = (row27Struct) obj;
		
						if (this.PONumber == null) {
							if (other.PONumber != null)
								return false;
						
						} else if (!this.PONumber.equals(other.PONumber))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row27Struct other) {

		other.Filename = this.Filename;
	            other.PONumber = this.PONumber;
	            
	}

	public void copyKeysDataTo(row27Struct other) {

		other.PONumber = this.PONumber;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length) {
				if(length < 1024 && commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length == 0) {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[1024];
				} else {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length);
			strReturn = new String(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI) {

        	try {

        		int length = 0;
		
					this.PONumber = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PONumber,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.Filename = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.Filename, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Filename="+Filename);
		sb.append(",PONumber="+PONumber);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row27Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.PONumber, other.PONumber);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row27Struct row27 = new row27Struct();




	
	/**
	 * [tAdvancedHash_row27 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row27", false);
		start_Hash.put("tAdvancedHash_row27", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row27";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row27");
					}
				
		int tos_count_tAdvancedHash_row27 = 0;
		

			   		// connection name:row27
			   		// source node:tFileInputDelimited_4 - inputs:(after_tFileList_1) outputs:(row27,row27) | target node:tAdvancedHash_row27 - inputs:(row27) outputs:()
			   		// linked node: tMap_1 - inputs:(row5,row27) outputs:(output,out6,output_PONumber)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row27 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row27Struct> tHash_Lookup_row27 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row27Struct>getLookup(matchingModeEnum_row27);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row27", tHash_Lookup_row27);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row27 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_4", false);
		start_Hash.put("tFileInputDelimited_4", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_4";

	
		int tos_count_tFileInputDelimited_4 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_4 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_4 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_4 = null;
				int limit_tFileInputDelimited_4 = -1;
				try{
					
						Object filename_tFileInputDelimited_4 = "//srv-ftp/FTP/FTP_COMARCH/PROD/IN/ORDER/ARCHIVE/listOfFileImportedInSF";
						if(filename_tFileInputDelimited_4 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_4 = 0, random_value_tFileInputDelimited_4 = -1;
			if(footer_value_tFileInputDelimited_4 >0 || random_value_tFileInputDelimited_4 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_4 = new org.talend.fileprocess.FileInputDelimited("//srv-ftp/FTP/FTP_COMARCH/PROD/IN/ORDER/ARCHIVE/listOfFileImportedInSF", "ISO-8859-15",";","\n",true,0,0,
									limit_tFileInputDelimited_4
								,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_4!=null && fid_tFileInputDelimited_4.nextRecord()) {
						rowstate_tFileInputDelimited_4.reset();
						
			    						row27 = null;			
									
			    						row27 = null;			
												
									boolean whetherReject_tFileInputDelimited_4 = false;
									row27 = new row27Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_4 = 0;
				
					columnIndexWithD_tFileInputDelimited_4 = 0;
					
							row27.Filename = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						
				
					columnIndexWithD_tFileInputDelimited_4 = 1;
					
							row27.PONumber = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						
				
				
										
										if(rowstate_tFileInputDelimited_4.getException()!=null) {
											throw rowstate_tFileInputDelimited_4.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_4 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row27 = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_4 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_4 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_4";

	

 


	tos_count_tFileInputDelimited_4++;

/**
 * [tFileInputDelimited_4 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_4";

	

 



/**
 * [tFileInputDelimited_4 process_data_begin ] stop
 */
// Start of branch "row27"
if(row27 != null) { 



	
	/**
	 * [tAdvancedHash_row27 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row27";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row27");
					}
					


			   
			   

					row27Struct row27_HashRow = new row27Struct();
		   	   	   
				
				row27_HashRow.Filename = row27.Filename;
				
				row27_HashRow.PONumber = row27.PONumber;
				
			tHash_Lookup_row27.put(row27_HashRow);
			
            




 


	tos_count_tAdvancedHash_row27++;

/**
 * [tAdvancedHash_row27 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row27 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row27";

	

 



/**
 * [tAdvancedHash_row27 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row27 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row27";

	

 



/**
 * [tAdvancedHash_row27 process_data_end ] stop
 */

} // End of branch "row27"




	
	/**
	 * [tFileInputDelimited_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_4";

	

 



/**
 * [tFileInputDelimited_4 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_4 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_4";

	



            }
            }finally{
                if(!((Object)("//srv-ftp/FTP/FTP_COMARCH/PROD/IN/ORDER/ARCHIVE/listOfFileImportedInSF") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_4!=null){
                		fid_tFileInputDelimited_4.close();
                	}
                }
                if(fid_tFileInputDelimited_4!=null){
                	globalMap.put("tFileInputDelimited_4_NB_LINE", fid_tFileInputDelimited_4.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_4", true);
end_Hash.put("tFileInputDelimited_4", System.currentTimeMillis());




/**
 * [tFileInputDelimited_4 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row27 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row27";

	

tHash_Lookup_row27.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row27");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row27", true);
end_Hash.put("tAdvancedHash_row27", System.currentTimeMillis());




/**
 * [tAdvancedHash_row27 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_4 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_4";

	

 



/**
 * [tFileInputDelimited_4 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row27 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row27";

	

 



/**
 * [tAdvancedHash_row27 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 1);
	}
	


public static class row15Struct implements routines.system.IPersistableRow<row15Struct> {
    final static byte[] commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI = new byte[0];
    static byte[] commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[0];

	
			    public String access_token;

				public String getAccess_token () {
					return this.access_token;
				}
				
			    public String token_type;

				public String getToken_type () {
					return this.token_type;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length) {
				if(length < 1024 && commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length == 0) {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[1024];
				} else {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length);
			strReturn = new String(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI) {

        	try {

        		int length = 0;
		
					this.access_token = readString(dis);
					
					this.token_type = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.access_token,dos);
					
					// String
				
						writeString(this.token_type,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("access_token="+access_token);
		sb.append(",token_type="+token_type);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row15Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class toSetVariableStruct implements routines.system.IPersistableRow<toSetVariableStruct> {
    final static byte[] commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI = new byte[0];
    static byte[] commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[0];

	
			    public String access_token;

				public String getAccess_token () {
					return this.access_token;
				}
				
			    public String token_type;

				public String getToken_type () {
					return this.token_type;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length) {
				if(length < 1024 && commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length == 0) {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[1024];
				} else {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length);
			strReturn = new String(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI) {

        	try {

        		int length = 0;
		
					this.access_token = readString(dis);
					
					this.token_type = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.access_token,dos);
					
					// String
				
						writeString(this.token_type,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("access_token="+access_token);
		sb.append(",token_type="+token_type);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(toSetVariableStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
    final static byte[] commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI = new byte[0];
    static byte[] commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[0];

	
			    public String access_token;

				public String getAccess_token () {
					return this.access_token;
				}
				
			    public String instance_url;

				public String getInstance_url () {
					return this.instance_url;
				}
				
			    public String id;

				public String getId () {
					return this.id;
				}
				
			    public String token_type;

				public String getToken_type () {
					return this.token_type;
				}
				
			    public String issued_at;

				public String getIssued_at () {
					return this.issued_at;
				}
				
			    public String signature;

				public String getSignature () {
					return this.signature;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length) {
				if(length < 1024 && commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length == 0) {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[1024];
				} else {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length);
			strReturn = new String(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI) {

        	try {

        		int length = 0;
		
					this.access_token = readString(dis);
					
					this.instance_url = readString(dis);
					
					this.id = readString(dis);
					
					this.token_type = readString(dis);
					
					this.issued_at = readString(dis);
					
					this.signature = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.access_token,dos);
					
					// String
				
						writeString(this.instance_url,dos);
					
					// String
				
						writeString(this.id,dos);
					
					// String
				
						writeString(this.token_type,dos);
					
					// String
				
						writeString(this.issued_at,dos);
					
					// String
				
						writeString(this.signature,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("access_token="+access_token);
		sb.append(",instance_url="+instance_url);
		sb.append(",id="+id);
		sb.append(",token_type="+token_type);
		sb.append(",issued_at="+issued_at);
		sb.append(",signature="+signature);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row11Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
    final static byte[] commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI = new byte[0];
    static byte[] commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[0];

	
			    public routines.system.Document body;

				public routines.system.Document getBody () {
					return this.body;
				}
				
			    public Integer statusCode;

				public Integer getStatusCode () {
					return this.statusCode;
				}
				
			    public String string;

				public String getString () {
					return this.string;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length) {
				if(length < 1024 && commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length == 0) {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[1024];
				} else {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length);
			strReturn = new String(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI) {

        	try {

        		int length = 0;
		
						this.body = (routines.system.Document) dis.readObject();
					
						this.statusCode = readInteger(dis);
					
					this.string = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Document
				
       			    	dos.writeObject(this.body);
					
					// Integer
				
						writeInteger(this.statusCode,dos);
					
					// String
				
						writeString(this.string,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("body="+String.valueOf(body));
		sb.append(",statusCode="+String.valueOf(statusCode));
		sb.append(",string="+string);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tRESTClient_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRESTClient_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row10Struct row10 = new row10Struct();
row11Struct row11 = new row11Struct();
toSetVariableStruct toSetVariable = new toSetVariableStruct();
toSetVariableStruct row15 = toSetVariable;







	
	/**
	 * [tJavaRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_2", false);
		start_Hash.put("tJavaRow_2", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row15");
					}
				
		int tos_count_tJavaRow_2 = 0;
		

int nb_line_tJavaRow_2 = 0;

 



/**
 * [tJavaRow_2 begin ] stop
 */



	
	/**
	 * [tSetGlobalVar_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tSetGlobalVar_3", false);
		start_Hash.put("tSetGlobalVar_3", System.currentTimeMillis());
		
	
	currentComponent="tSetGlobalVar_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"toSetVariable");
					}
				
		int tos_count_tSetGlobalVar_3 = 0;
		

 



/**
 * [tSetGlobalVar_3 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row11");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
	String var1;
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
toSetVariableStruct toSetVariable_tmp = new toSetVariableStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tExtractJSONFields_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tExtractJSONFields_1", false);
		start_Hash.put("tExtractJSONFields_1", System.currentTimeMillis());
		
	
	currentComponent="tExtractJSONFields_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row10");
					}
				
		int tos_count_tExtractJSONFields_1 = 0;
		

int nb_line_tExtractJSONFields_1 = 0;
String jsonStr_tExtractJSONFields_1 = "";

	

class JsonPathCache_tExtractJSONFields_1 {
	final java.util.Map<String,com.jayway.jsonpath.JsonPath> jsonPathString2compiledJsonPath = new java.util.HashMap<String,com.jayway.jsonpath.JsonPath>();
	
	public com.jayway.jsonpath.JsonPath getCompiledJsonPath(String jsonPath) {
		if(jsonPathString2compiledJsonPath.containsKey(jsonPath)) {
			return jsonPathString2compiledJsonPath.get(jsonPath);
		} else {
			com.jayway.jsonpath.JsonPath compiledLoopPath = com.jayway.jsonpath.JsonPath.compile(jsonPath);
			jsonPathString2compiledJsonPath.put(jsonPath,compiledLoopPath);
			return compiledLoopPath;
		}
	}
}

JsonPathCache_tExtractJSONFields_1 jsonPathCache_tExtractJSONFields_1 = new JsonPathCache_tExtractJSONFields_1();

 



/**
 * [tExtractJSONFields_1 begin ] stop
 */



	
	/**
	 * [tRESTClient_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRESTClient_1", false);
		start_Hash.put("tRESTClient_1", System.currentTimeMillis());
		
	
	currentComponent="tRESTClient_1";

	
		int tos_count_tRESTClient_1 = 0;
		

 



/**
 * [tRESTClient_1 begin ] stop
 */
	
	/**
	 * [tRESTClient_1 main ] start
	 */

	

	
	
	currentComponent="tRESTClient_1";

	
	row10 = null;

// expected response body
javax.ws.rs.core.Response responseDoc_tRESTClient_1 = null;

try {
	// request body
	org.dom4j.Document requestDoc_tRESTClient_1 = null;
	String requestString_tRESTClient_1 = null;

	Object requestBody_tRESTClient_1 = requestDoc_tRESTClient_1 != null ? requestDoc_tRESTClient_1 : requestString_tRESTClient_1;

	

    //resposne class name
	Class<?> responseClass_tRESTClient_1
		= String.class;

	// create web client instance
	org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean factoryBean_tRESTClient_1 =
			new org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean();

	boolean inOSGi = routines.system.BundleUtils.inOSGi();

	final java.util.List<org.apache.cxf.feature.Feature> features_tRESTClient_1 =
			new java.util.ArrayList<org.apache.cxf.feature.Feature>();

	
		String url = "https://haddad-europe.my.salesforce.com/services/oauth2/token";
		// {baseUri}tRESTClient
		factoryBean_tRESTClient_1.setServiceName(new javax.xml.namespace.QName(url, "tRESTClient"));
		factoryBean_tRESTClient_1.setAddress(url);
	

	

	

	

	factoryBean_tRESTClient_1.setFeatures(features_tRESTClient_1);


	java.util.List<Object> providers_tRESTClient_1 = new java.util.ArrayList<Object>();
	providers_tRESTClient_1.add(new org.apache.cxf.jaxrs.provider.dom4j.DOM4JProvider() {
		// workaround for https://jira.talendforge.org/browse/TESB-7276
		public org.dom4j.Document readFrom(Class<org.dom4j.Document> cls,
											java.lang.reflect.Type type,
											java.lang.annotation.Annotation[] anns,
											javax.ws.rs.core.MediaType mt,
											javax.ws.rs.core.MultivaluedMap<String, String> headers,
											java.io.InputStream is)
				throws IOException, javax.ws.rs.WebApplicationException {
			String contentLength = headers.getFirst("Content-Length");
			if (!org.apache.cxf.common.util.StringUtils.isEmpty(contentLength)
					&& Integer.valueOf(contentLength) <= 0) {
				try {
					return org.dom4j.DocumentHelper.parseText("<root/>");
				} catch (org.dom4j.DocumentException e_tRESTClient_1) {
					e_tRESTClient_1.printStackTrace();
				}
				return null;
			}
			return super.readFrom(cls, type, anns, mt, headers, is);
		}
	});
	org.apache.cxf.jaxrs.provider.json.JSONProvider jsonProvider_tRESTClient_1 =
			new org.apache.cxf.jaxrs.provider.json.JSONProvider();
		jsonProvider_tRESTClient_1.setIgnoreNamespaces(true);
		jsonProvider_tRESTClient_1.setAttributesToElements(true);
	
	
		jsonProvider_tRESTClient_1.setSupportUnwrapped(true);
		jsonProvider_tRESTClient_1.setWrapperName("root");
	
	
		jsonProvider_tRESTClient_1.setDropRootElement(true);
		jsonProvider_tRESTClient_1.setConvertTypesToStrings(true);
	providers_tRESTClient_1.add(jsonProvider_tRESTClient_1);
	factoryBean_tRESTClient_1.setProviders(providers_tRESTClient_1);
	factoryBean_tRESTClient_1.setTransportId("http://cxf.apache.org/transports/http");

	boolean use_auth_tRESTClient_1 = false;
	if (use_auth_tRESTClient_1 && "SAML".equals("BASIC")) {
		if (!inOSGi) {
			throw new IllegalArgumentException("SAML based security scenarios are not supported in Studio (standalone)");
		}
		// set SAML Token authentication
		
		 
	final String decryptedPassword_tRESTClient_1 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[qnSWgg/uNvARD9SE9SBnl8Pe2QAgU7LO7Foqn9OCwqNNE7p2QFg=]");

		org.apache.cxf.ws.security.trust.STSClient stsClient =
			org.talend.esb.security.saml.STSClientUtils.createSTSClient(factoryBean_tRESTClient_1.getBus(),
				"otman.nikraj@haddadeurope.com.partial", decryptedPassword_tRESTClient_1);
		
		org.talend.esb.security.saml.SAMLRESTUtils.configureClient(factoryBean_tRESTClient_1, stsClient);
	}

	org.apache.cxf.jaxrs.client.WebClient webClient_tRESTClient_1 = factoryBean_tRESTClient_1.createWebClient();

	// set request path
	webClient_tRESTClient_1.path("");

	// set connection properties
	org.apache.cxf.jaxrs.client.ClientConfiguration clientConfig_tRESTClient_1 = org.apache.cxf.jaxrs.client.WebClient.getConfig(webClient_tRESTClient_1);
	org.apache.cxf.transport.http.HTTPConduit conduit_tRESTClient_1 = clientConfig_tRESTClient_1.getHttpConduit();

    if (clientConfig_tRESTClient_1.getEndpoint() != null
            && clientConfig_tRESTClient_1.getEndpoint().getEndpointInfo() != null) {
        clientConfig_tRESTClient_1.getEndpoint().getEndpointInfo().setProperty("enable.webclient.operation.reporting",
                                                                          true);
    }

	

	if (use_auth_tRESTClient_1 && "BASIC".equals("BASIC")) {
		// set BASIC auth
		
		 
	final String decryptedPassword_tRESTClient_1 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[LTyM1pw6dCU+NLFPonVwJkoFxnDIIlSSDcVO8PONdo310xyybfs=]");

		org.apache.cxf.configuration.security.AuthorizationPolicy authPolicy_tRESTClient_1 = new org.apache.cxf.configuration.security.AuthorizationPolicy();
			authPolicy_tRESTClient_1.setAuthorizationType("Basic");
			authPolicy_tRESTClient_1.setUserName("otman.nikraj@haddadeurope.com.partial");
			authPolicy_tRESTClient_1.setPassword(decryptedPassword_tRESTClient_1);
		conduit_tRESTClient_1.setAuthorization(authPolicy_tRESTClient_1);
	} else if (use_auth_tRESTClient_1 && "HTTP Digest".equals("BASIC")) {
		// set Digest auth
		
		 
	final String decryptedPassword_tRESTClient_1 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[d7OVCVT2cREjQSj8YCGEuuh40aoSMoHI92lxc8NWqD0goZ1Eol0=]");

		org.apache.cxf.configuration.security.AuthorizationPolicy authPolicy_tRESTClient_1 = new org.apache.cxf.configuration.security.AuthorizationPolicy();
		authPolicy_tRESTClient_1.setAuthorizationType("Digest");
		authPolicy_tRESTClient_1.setUserName("otman.nikraj@haddadeurope.com.partial");
		authPolicy_tRESTClient_1.setPassword(decryptedPassword_tRESTClient_1);
		conduit_tRESTClient_1.setAuthorization(authPolicy_tRESTClient_1);
	}

	if (!inOSGi) {
		conduit_tRESTClient_1.getClient().setReceiveTimeout((long)(60 * 1000L));
		conduit_tRESTClient_1.getClient().setConnectionTimeout((long)(30 * 1000L));
		boolean use_proxy_tRESTClient_1 = false;
		if (use_proxy_tRESTClient_1) {
			
			 
	final String decryptedPassword_tRESTClient_1 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[/nX6tRLUBfYLbgCTkIis4lE8mTyAiUP0FgNttg==]");

			conduit_tRESTClient_1.getClient().setProxyServer("61.163.92.4");
			conduit_tRESTClient_1.getClient().setProxyServerPort(Integer.valueOf(8080));
			conduit_tRESTClient_1.getProxyAuthorization().setUserName("");
			conduit_tRESTClient_1.getProxyAuthorization().setPassword(decryptedPassword_tRESTClient_1);
		}
	}
	
	

	

	
		// set Content-Type
		webClient_tRESTClient_1.type("application/json");
	

	
		// set Accept-Type
		webClient_tRESTClient_1.accept("application/json");
	

	
		// set optional query and header properties if any
	
		webClient_tRESTClient_1.header("Accept", "application/json");
	
		webClient_tRESTClient_1.header("Content-Type", "application/x-www-form-urlencoded");
	
	if (use_auth_tRESTClient_1 && "OAUTH2_BEARER".equals("BASIC")) {
		// set oAuth2 bearer token
		webClient_tRESTClient_1.header("Authorization", "Bearer " + "3MVG904d7VkkD2aPrr0Zo7vyDfR3BCIidArA2fM9ScQUYkPPCOmOthm7TndYB9pZJPFlDTAIJZNkwl7X_HFWx");
	}
	
	if (use_auth_tRESTClient_1 && "OIDC_PASSWORD_GRANT".equals("BASIC")) {
 
	final String decryptedPassword_tRESTClient_1 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[ibF9+1sRUCx7skK6ZgMUfdZDJdpWLPzlopcUsbMH8qFfbmm8BYE=]");

        String username_tRESTClient_1 = "otman.nikraj@haddadeurope.com.partial";
        String password_tRESTClient_1 = decryptedPassword_tRESTClient_1;

        String bearerHeader_tRESTClient_1 = null;

        try {
			if (!inOSGi) {
				org.springframework.context.support.ClassPathXmlApplicationContext context_tRESTClient_1 =
					new org.springframework.context.support.ClassPathXmlApplicationContext("META-INF/tesb/oidc-context.xml");
				org.talend.esb.security.oidc.OidcConfiguration oidcConfiguration_tRESTClient_1 = context_tRESTClient_1.getBean(org.talend.esb.security.oidc.OidcConfiguration.class);
				bearerHeader_tRESTClient_1 = org.talend.esb.security.oidc.OidcClientUtils.oidcClientBearer(username_tRESTClient_1, password_tRESTClient_1, oidcConfiguration_tRESTClient_1);
			}else{
				bearerHeader_tRESTClient_1 = org.talend.esb.security.oidc.OidcClientUtils.oidcClientBearer(username_tRESTClient_1, password_tRESTClient_1);
			}
		} catch (Exception ex) {
            throw new javax.ws.rs.WebApplicationException("Failed to get OIDC access token: ", ex);
        }

		webClient_tRESTClient_1.header("Authorization", bearerHeader_tRESTClient_1);
	}
    
	// if FORM request then capture query parameters into Form, otherwise set them as queries
	
		
			webClient_tRESTClient_1.query("client_id" ,"3MVG96_7YM2sI9wSE9pMdf5F3u_wWD6RXjrKIQe8pUn8Y_enfE01fv4jQNBMMaZNZTOVPuyMjkE75Vx5u951I");
		
			webClient_tRESTClient_1.query("client_secret" ,"5634E72A45A7758C7541FC4CDD293CAA849112CB0520A8F82B7408E88CAA96FD");
		
			webClient_tRESTClient_1.query("username" ,"otman.nikraj@haddadeurope.com");
		
			webClient_tRESTClient_1.query("password" ,context.password);
		
			webClient_tRESTClient_1.query("grant_type" ,"password");
		
	


	try {
		// start send request
		
			
				responseDoc_tRESTClient_1 = webClient_tRESTClient_1.post(requestBody_tRESTClient_1);
			
		


		int webClientResponseStatus_tRESTClient_1 = webClient_tRESTClient_1.getResponse().getStatus();
		if (webClientResponseStatus_tRESTClient_1 >= 300) {
			throw new javax.ws.rs.WebApplicationException(webClient_tRESTClient_1.getResponse());
		}

		
			if (row10 == null) {
				row10 = new row10Struct();
			}

			row10.statusCode = webClientResponseStatus_tRESTClient_1;
			
				
				Object responseObj_tRESTClient_1 = null;
				if(responseDoc_tRESTClient_1 != null && responseDoc_tRESTClient_1.hasEntity()){
					responseObj_tRESTClient_1 = responseDoc_tRESTClient_1.readEntity(responseClass_tRESTClient_1);
				
				if(responseObj_tRESTClient_1 != null){
					if (responseClass_tRESTClient_1 == String.class) {
						row10.string = (String) responseObj_tRESTClient_1;
					} else {
						routines.system.Document responseTalendDoc_tRESTClient_1 = null;
						if (null != responseObj_tRESTClient_1) {
							responseTalendDoc_tRESTClient_1 = new routines.system.Document();
							responseTalendDoc_tRESTClient_1.setDocument((org.dom4j.Document) responseObj_tRESTClient_1);
						}
						row10.body = responseTalendDoc_tRESTClient_1;
					}
				}
			}
			


			globalMap.put("tRESTClient_1_HEADERS", webClient_tRESTClient_1.getResponse().getHeaders());
			
			
			
			// handle "oneway" for PUT, POST and PATCH with empty response payload
			if (webClientResponseStatus_tRESTClient_1 == 202 && responseObj_tRESTClient_1 == null){
				row10.string = "";
				return;
			}
			
		

	} catch (javax.ws.rs.WebApplicationException ex_tRESTClient_1) {
		
			throw ex_tRESTClient_1;
		
	}

} catch(Exception e_tRESTClient_1) {
	
		throw new TalendException(e_tRESTClient_1, currentComponent, globalMap);
	
}


 


	tos_count_tRESTClient_1++;

/**
 * [tRESTClient_1 main ] stop
 */
	
	/**
	 * [tRESTClient_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRESTClient_1";

	

 



/**
 * [tRESTClient_1 process_data_begin ] stop
 */
// Start of branch "row10"
if(row10 != null) { 



	
	/**
	 * [tExtractJSONFields_1 main ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row10");
					}
					

            if(row10.string!=null){// C_01
                jsonStr_tExtractJSONFields_1 = row10.string.toString();
   
row11 = null;

	

String loopPath_tExtractJSONFields_1 = "$";
java.util.List<Object> resultset_tExtractJSONFields_1 = new java.util.ArrayList<Object>();

boolean isStructError_tExtractJSONFields_1 = true;
com.jayway.jsonpath.ReadContext document_tExtractJSONFields_1 = null;
try {
	document_tExtractJSONFields_1 = com.jayway.jsonpath.JsonPath.parse(jsonStr_tExtractJSONFields_1);
	com.jayway.jsonpath.JsonPath compiledLoopPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(loopPath_tExtractJSONFields_1);
	Object result_tExtractJSONFields_1 = document_tExtractJSONFields_1.read(compiledLoopPath_tExtractJSONFields_1,net.minidev.json.JSONObject.class);
	if (result_tExtractJSONFields_1 instanceof net.minidev.json.JSONArray) {
		resultset_tExtractJSONFields_1 = (net.minidev.json.JSONArray) result_tExtractJSONFields_1;
	} else {
		resultset_tExtractJSONFields_1.add(result_tExtractJSONFields_1);
	}
	
	isStructError_tExtractJSONFields_1 = false;
} catch (java.lang.Exception ex_tExtractJSONFields_1) {
		System.err.println(ex_tExtractJSONFields_1.getMessage());
}

String jsonPath_tExtractJSONFields_1 = null;
com.jayway.jsonpath.JsonPath compiledJsonPath_tExtractJSONFields_1 = null;

Object value_tExtractJSONFields_1 = null;

Object root_tExtractJSONFields_1 = null;
for(int i_tExtractJSONFields_1=0; isStructError_tExtractJSONFields_1 || (i_tExtractJSONFields_1 < resultset_tExtractJSONFields_1.size());i_tExtractJSONFields_1++){
	if(!isStructError_tExtractJSONFields_1){
		Object row_tExtractJSONFields_1 = resultset_tExtractJSONFields_1.get(i_tExtractJSONFields_1);
            row11 = null;
	row11 = new row11Struct();
	nb_line_tExtractJSONFields_1++;
	try {
		jsonPath_tExtractJSONFields_1 = "$.access_token";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				row11.access_token = value_tExtractJSONFields_1 == null ? 

		null

 : value_tExtractJSONFields_1.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
			row11.access_token = 

		null

;
		}
		jsonPath_tExtractJSONFields_1 = "$.instance_url";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				row11.instance_url = value_tExtractJSONFields_1 == null ? 

		null

 : value_tExtractJSONFields_1.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
			row11.instance_url = 

		null

;
		}
		jsonPath_tExtractJSONFields_1 = "$.id";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				row11.id = value_tExtractJSONFields_1 == null ? 

		null

 : value_tExtractJSONFields_1.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
			row11.id = 

		null

;
		}
		jsonPath_tExtractJSONFields_1 = "$.token_type";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				row11.token_type = value_tExtractJSONFields_1 == null ? 

		null

 : value_tExtractJSONFields_1.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
			row11.token_type = 

		null

;
		}
		jsonPath_tExtractJSONFields_1 = "$.issued_at";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				row11.issued_at = value_tExtractJSONFields_1 == null ? 

		null

 : value_tExtractJSONFields_1.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
			row11.issued_at = 

		null

;
		}
		jsonPath_tExtractJSONFields_1 = "$.signature";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				row11.signature = value_tExtractJSONFields_1 == null ? 

		null

 : value_tExtractJSONFields_1.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
			row11.signature = 

		null

;
		}	
	} catch (java.lang.Exception ex_tExtractJSONFields_1) {
		    System.err.println(ex_tExtractJSONFields_1.getMessage());
		    row11 = null;	
	}
	
	}
    
	isStructError_tExtractJSONFields_1 = false;
	
//}


 


	tos_count_tExtractJSONFields_1++;

/**
 * [tExtractJSONFields_1 main ] stop
 */
	
	/**
	 * [tExtractJSONFields_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_1";

	

 



/**
 * [tExtractJSONFields_1 process_data_begin ] stop
 */
// Start of branch "row11"
if(row11 != null) { 



	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row11");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_3 = false;
		  boolean mainRowRejected_tMap_3 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;
Var.var1 = new String("{\"order\": [{\"attributes\": {\"type\": \"Order\"},\"EffectiveDate\": \"2013-07-11\",\"Status\": \"Draft\",\"Season__c\": \"a0C2p00001Yw85lEAB\",\"billingCity\": \"Paris\",\"Shipping_Address_Haddad__c\": \"a0H2p00001o1KkfEAE\",\"accountId\": \"0012p00002QZL9JAAX\",\"Pricebook2Id\": \"01s680000004NkZAAU\",\"OrderItems\": {\"records\": [{\"attributes\": {\"type\": \"OrderItem\"},\"PricebookEntryId\": \"01u68000000UhEDAA0\",\"quantity\": \"5\",\"UnitPrice\": \"15.99\"},{\"attributes\": {\"type\": \"OrderItem\"},\"PricebookEntryId\": \"01u68000000UhEDAA0\",\"quantity\": \"5\",\"UnitPrice\": \"15.99\"}]}}]}") ;// ###############################
        // ###############################
        // # Output tables

toSetVariable = null;


// # Output table : 'toSetVariable'
toSetVariable_tmp.access_token = row11.access_token ;
toSetVariable_tmp.token_type = row11.token_type ;
toSetVariable = toSetVariable_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "toSetVariable"
if(toSetVariable != null) { 



	
	/**
	 * [tSetGlobalVar_3 main ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"toSetVariable");
					}
					

globalMap.put("tokentype", toSetVariable.token_type);
globalMap.put("accesstoken", toSetVariable.access_token);

 
     row15 = toSetVariable;


	tos_count_tSetGlobalVar_3++;

/**
 * [tSetGlobalVar_3 main ] stop
 */
	
	/**
	 * [tSetGlobalVar_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_3";

	

 



/**
 * [tSetGlobalVar_3 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_2 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row15");
					}
					

    // code sample:
//
// multiply by 2 the row identifier
// output_row.id = row15.id * 2;
//
// lowercase the name
// output_row.name = row15.name.toLowerCase();
System.out.println("TEST OAUTH " + globalMap.get("tokentype")+ " " +globalMap.get("accesstoken") );


    nb_line_tJavaRow_2++;   

 


	tos_count_tJavaRow_2++;

/**
 * [tJavaRow_2 main ] stop
 */
	
	/**
	 * [tJavaRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";

	

 



/**
 * [tJavaRow_2 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";

	

 



/**
 * [tJavaRow_2 process_data_end ] stop
 */



	
	/**
	 * [tSetGlobalVar_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_3";

	

 



/**
 * [tSetGlobalVar_3 process_data_end ] stop
 */

} // End of branch "toSetVariable"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_end ] stop
 */

} // End of branch "row11"

		// end for
	}


	
		} // C_01
	
	
	/**
	 * [tExtractJSONFields_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_1";

	

 



/**
 * [tExtractJSONFields_1 process_data_end ] stop
 */

} // End of branch "row10"




	
	/**
	 * [tRESTClient_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tRESTClient_1";

	

 



/**
 * [tRESTClient_1 process_data_end ] stop
 */
	
	/**
	 * [tRESTClient_1 end ] start
	 */

	

	
	
	currentComponent="tRESTClient_1";

	


if (globalMap.get("tRESTClient_1_NB_LINE") == null) {
	globalMap.put("tRESTClient_1_NB_LINE", 1);
}

// [tRESTCliend_end]
 

ok_Hash.put("tRESTClient_1", true);
end_Hash.put("tRESTClient_1", System.currentTimeMillis());




/**
 * [tRESTClient_1 end ] stop
 */

	
	/**
	 * [tExtractJSONFields_1 end ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_1";

	
   globalMap.put("tExtractJSONFields_1_NB_LINE", nb_line_tExtractJSONFields_1);


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row10");
			  	}
			  	
 

ok_Hash.put("tExtractJSONFields_1", true);
end_Hash.put("tExtractJSONFields_1", System.currentTimeMillis());




/**
 * [tExtractJSONFields_1 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row11");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tSetGlobalVar_3 end ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_3";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"toSetVariable");
			  	}
			  	
 

ok_Hash.put("tSetGlobalVar_3", true);
end_Hash.put("tSetGlobalVar_3", System.currentTimeMillis());




/**
 * [tSetGlobalVar_3 end ] stop
 */

	
	/**
	 * [tJavaRow_2 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";

	

globalMap.put("tJavaRow_2_NB_LINE",nb_line_tJavaRow_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row15");
			  	}
			  	
 

ok_Hash.put("tJavaRow_2", true);
end_Hash.put("tJavaRow_2", System.currentTimeMillis());




/**
 * [tJavaRow_2 end ] stop
 */












				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRESTClient_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk6", 0, "ok");
								} 
							
							tFileList_4Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRESTClient_1 finally ] start
	 */

	

	
	
	currentComponent="tRESTClient_1";

	

 



/**
 * [tRESTClient_1 finally ] stop
 */

	
	/**
	 * [tExtractJSONFields_1 finally ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_1";

	

 



/**
 * [tExtractJSONFields_1 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tSetGlobalVar_3 finally ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_3";

	

 



/**
 * [tSetGlobalVar_3 finally ] stop
 */

	
	/**
	 * [tJavaRow_2 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";

	

 



/**
 * [tJavaRow_2 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRESTClient_1_SUBPROCESS_STATE", 1);
	}
	

public void tFileList_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileList_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileList_4 begin ] start
	 */

				
			int NB_ITERATE_tFileDelete_2 = 0; //for statistics
			

	
		
		ok_Hash.put("tFileList_4", false);
		start_Hash.put("tFileList_4", System.currentTimeMillis());
		
	
	currentComponent="tFileList_4";

	
		int tos_count_tFileList_4 = 0;
		
	
 
     
    
  String directory_tFileList_4 = "C:/Haddad_Interface_SF_JDE/Interface Salesforce/OrderEDI/temp/";
  final java.util.List<String> maskList_tFileList_4 = new java.util.ArrayList<String>();
  final java.util.List<java.util.regex.Pattern> patternList_tFileList_4 = new java.util.ArrayList<java.util.regex.Pattern>(); 
    maskList_tFileList_4.add("tempOutput_*");  
  for (final String filemask_tFileList_4 : maskList_tFileList_4) {
	String filemask_compile_tFileList_4 = filemask_tFileList_4;
	
		filemask_compile_tFileList_4 = org.apache.oro.text.GlobCompiler.globToPerl5(filemask_tFileList_4.toCharArray(), org.apache.oro.text.GlobCompiler.DEFAULT_MASK);
	
		java.util.regex.Pattern fileNamePattern_tFileList_4 = java.util.regex.Pattern.compile(filemask_compile_tFileList_4);
	patternList_tFileList_4.add(fileNamePattern_tFileList_4);
  }
  int NB_FILEtFileList_4 = 0;

  final boolean case_sensitive_tFileList_4 = true;
    final java.util.List<java.io.File> list_tFileList_4 = new java.util.ArrayList<java.io.File>();
    final java.util.Set<String> filePath_tFileList_4 = new java.util.HashSet<String>();
	java.io.File file_tFileList_4 = new java.io.File(directory_tFileList_4);
     
		file_tFileList_4.listFiles(new java.io.FilenameFilter() {
			public boolean accept(java.io.File dir, String name) {
				java.io.File file = new java.io.File(dir, name);
                if (!file.isDirectory()) {
                	
    	String fileName_tFileList_4 = file.getName();
		for (final java.util.regex.Pattern fileNamePattern_tFileList_4 : patternList_tFileList_4) {
          	if (fileNamePattern_tFileList_4.matcher(fileName_tFileList_4).matches()){
					if(!filePath_tFileList_4.contains(file.getAbsolutePath())) {
			          list_tFileList_4.add(file);
			          filePath_tFileList_4.add(file.getAbsolutePath());
			        }
			}
		}
                }
              return true;
            }
          }
      ); 
      java.util.Collections.sort(list_tFileList_4);
    
    for (int i_tFileList_4 = 0; i_tFileList_4 < list_tFileList_4.size(); i_tFileList_4++){
      java.io.File files_tFileList_4 = list_tFileList_4.get(i_tFileList_4);
      String fileName_tFileList_4 = files_tFileList_4.getName();
      
      String currentFileName_tFileList_4 = files_tFileList_4.getName(); 
      String currentFilePath_tFileList_4 = files_tFileList_4.getAbsolutePath();
      String currentFileDirectory_tFileList_4 = files_tFileList_4.getParent();
      String currentFileExtension_tFileList_4 = null;
      
      if (files_tFileList_4.getName().contains(".") && files_tFileList_4.isFile()){
        currentFileExtension_tFileList_4 = files_tFileList_4.getName().substring(files_tFileList_4.getName().lastIndexOf(".") + 1);
      } else{
        currentFileExtension_tFileList_4 = "";
      }
      
      NB_FILEtFileList_4 ++;
      globalMap.put("tFileList_4_CURRENT_FILE", currentFileName_tFileList_4);
      globalMap.put("tFileList_4_CURRENT_FILEPATH", currentFilePath_tFileList_4);
      globalMap.put("tFileList_4_CURRENT_FILEDIRECTORY", currentFileDirectory_tFileList_4);
      globalMap.put("tFileList_4_CURRENT_FILEEXTENSION", currentFileExtension_tFileList_4);
      globalMap.put("tFileList_4_NB_FILE", NB_FILEtFileList_4);
      
 



/**
 * [tFileList_4 begin ] stop
 */
	
	/**
	 * [tFileList_4 main ] start
	 */

	

	
	
	currentComponent="tFileList_4";

	

 


	tos_count_tFileList_4++;

/**
 * [tFileList_4 main ] stop
 */
	
	/**
	 * [tFileList_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileList_4";

	

 



/**
 * [tFileList_4 process_data_begin ] stop
 */
	NB_ITERATE_tFileDelete_2++;
	
	
				if(execStat){
					runStat.updateStatOnConnection("iterate8", 1, "exec" + NB_ITERATE_tFileDelete_2);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [tFileDelete_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileDelete_2", false);
		start_Hash.put("tFileDelete_2", System.currentTimeMillis());
		
	
	currentComponent="tFileDelete_2";

	
		int tos_count_tFileDelete_2 = 0;
		

 



/**
 * [tFileDelete_2 begin ] stop
 */
	
	/**
	 * [tFileDelete_2 main ] start
	 */

	

	
	
	currentComponent="tFileDelete_2";

	

 

class DeleteFoldertFileDelete_2{
	 /**
     * delete all the sub-files in 'file'
     * 
     * @param file
     */
	public boolean delete(java.io.File file) {
        java.io.File[] files = file.listFiles();
        for (int i = 0; i < files.length; i++) {
            if (files[i].isFile()) {
                files[i].delete();
            } else if (files[i].isDirectory()) {
                if (!files[i].delete()) {
                    delete(files[i]);
                }
            }
        }
        deleteDirectory(file);
        return file.delete();
    }

    /**
     * delete all the sub-folders in 'file'
     * 
     * @param file
     */
    private void deleteDirectory(java.io.File file) {
        java.io.File[] filed = file.listFiles();
        for (int i = 0; i < filed.length; i++) {
        	if(filed[i].isDirectory()) {
            	deleteDirectory(filed[i]);
            }
            filed[i].delete();
        }
    }

}
    java.io.File file_tFileDelete_2=new java.io.File(((String)globalMap.get("tFileList_4_CURRENT_FILEPATH")));
    if(file_tFileDelete_2.exists()&& file_tFileDelete_2.isFile()){
    	if(file_tFileDelete_2.delete()){
    		globalMap.put("tFileDelete_2_CURRENT_STATUS", "File deleted.");
		}else{
			globalMap.put("tFileDelete_2_CURRENT_STATUS", "No file deleted.");
				throw new RuntimeException("File " + file_tFileDelete_2.getAbsolutePath() + " can not be deleted.");
		}
	}else{
		globalMap.put("tFileDelete_2_CURRENT_STATUS", "File does not exist or is invalid.");
			throw new RuntimeException("File " + file_tFileDelete_2.getAbsolutePath() + " does not exist or is invalid or is not a file.");
	}
	globalMap.put("tFileDelete_2_DELETE_PATH",((String)globalMap.get("tFileList_4_CURRENT_FILEPATH")));
    
     
 

 


	tos_count_tFileDelete_2++;

/**
 * [tFileDelete_2 main ] stop
 */
	
	/**
	 * [tFileDelete_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileDelete_2";

	

 



/**
 * [tFileDelete_2 process_data_begin ] stop
 */
	
	/**
	 * [tFileDelete_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileDelete_2";

	

 



/**
 * [tFileDelete_2 process_data_end ] stop
 */
	
	/**
	 * [tFileDelete_2 end ] start
	 */

	

	
	
	currentComponent="tFileDelete_2";

	

 

ok_Hash.put("tFileDelete_2", true);
end_Hash.put("tFileDelete_2", System.currentTimeMillis());




/**
 * [tFileDelete_2 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("iterate8", 2, "exec" + NB_ITERATE_tFileDelete_2);
						}				
					




	
	/**
	 * [tFileList_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileList_4";

	

 



/**
 * [tFileList_4 process_data_end ] stop
 */
	
	/**
	 * [tFileList_4 end ] start
	 */

	

	
	
	currentComponent="tFileList_4";

	

  
    }
  globalMap.put("tFileList_4_NB_FILE", NB_FILEtFileList_4);
  

  
 

 

ok_Hash.put("tFileList_4", true);
end_Hash.put("tFileList_4", System.currentTimeMillis());




/**
 * [tFileList_4 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileList_4:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
								} 
							
							tFileList_5Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileList_4 finally ] start
	 */

	

	
	
	currentComponent="tFileList_4";

	

 



/**
 * [tFileList_4 finally ] stop
 */

	
	/**
	 * [tFileDelete_2 finally ] start
	 */

	

	
	
	currentComponent="tFileDelete_2";

	

 



/**
 * [tFileDelete_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileList_4_SUBPROCESS_STATE", 1);
	}
	

public void tFileList_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileList_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileList_5 begin ] start
	 */

				
			int NB_ITERATE_tFileDelete_3 = 0; //for statistics
			

	
		
		ok_Hash.put("tFileList_5", false);
		start_Hash.put("tFileList_5", System.currentTimeMillis());
		
	
	currentComponent="tFileList_5";

	
		int tos_count_tFileList_5 = 0;
		
	
 
     
    
  String directory_tFileList_5 = "C:/Haddad_Interface_SF_JDE/Interface Salesforce/OrderEDI/temp/work/";
  final java.util.List<String> maskList_tFileList_5 = new java.util.ArrayList<String>();
  final java.util.List<java.util.regex.Pattern> patternList_tFileList_5 = new java.util.ArrayList<java.util.regex.Pattern>(); 
    maskList_tFileList_5.add("tempWorkFile_*");  
  for (final String filemask_tFileList_5 : maskList_tFileList_5) {
	String filemask_compile_tFileList_5 = filemask_tFileList_5;
	
		filemask_compile_tFileList_5 = org.apache.oro.text.GlobCompiler.globToPerl5(filemask_tFileList_5.toCharArray(), org.apache.oro.text.GlobCompiler.DEFAULT_MASK);
	
		java.util.regex.Pattern fileNamePattern_tFileList_5 = java.util.regex.Pattern.compile(filemask_compile_tFileList_5);
	patternList_tFileList_5.add(fileNamePattern_tFileList_5);
  }
  int NB_FILEtFileList_5 = 0;

  final boolean case_sensitive_tFileList_5 = true;
    final java.util.List<java.io.File> list_tFileList_5 = new java.util.ArrayList<java.io.File>();
    final java.util.Set<String> filePath_tFileList_5 = new java.util.HashSet<String>();
	java.io.File file_tFileList_5 = new java.io.File(directory_tFileList_5);
     
		file_tFileList_5.listFiles(new java.io.FilenameFilter() {
			public boolean accept(java.io.File dir, String name) {
				java.io.File file = new java.io.File(dir, name);
                if (!file.isDirectory()) {
                	
    	String fileName_tFileList_5 = file.getName();
		for (final java.util.regex.Pattern fileNamePattern_tFileList_5 : patternList_tFileList_5) {
          	if (fileNamePattern_tFileList_5.matcher(fileName_tFileList_5).matches()){
					if(!filePath_tFileList_5.contains(file.getAbsolutePath())) {
			          list_tFileList_5.add(file);
			          filePath_tFileList_5.add(file.getAbsolutePath());
			        }
			}
		}
                }
              return true;
            }
          }
      ); 
      java.util.Collections.sort(list_tFileList_5);
    
    for (int i_tFileList_5 = 0; i_tFileList_5 < list_tFileList_5.size(); i_tFileList_5++){
      java.io.File files_tFileList_5 = list_tFileList_5.get(i_tFileList_5);
      String fileName_tFileList_5 = files_tFileList_5.getName();
      
      String currentFileName_tFileList_5 = files_tFileList_5.getName(); 
      String currentFilePath_tFileList_5 = files_tFileList_5.getAbsolutePath();
      String currentFileDirectory_tFileList_5 = files_tFileList_5.getParent();
      String currentFileExtension_tFileList_5 = null;
      
      if (files_tFileList_5.getName().contains(".") && files_tFileList_5.isFile()){
        currentFileExtension_tFileList_5 = files_tFileList_5.getName().substring(files_tFileList_5.getName().lastIndexOf(".") + 1);
      } else{
        currentFileExtension_tFileList_5 = "";
      }
      
      NB_FILEtFileList_5 ++;
      globalMap.put("tFileList_5_CURRENT_FILE", currentFileName_tFileList_5);
      globalMap.put("tFileList_5_CURRENT_FILEPATH", currentFilePath_tFileList_5);
      globalMap.put("tFileList_5_CURRENT_FILEDIRECTORY", currentFileDirectory_tFileList_5);
      globalMap.put("tFileList_5_CURRENT_FILEEXTENSION", currentFileExtension_tFileList_5);
      globalMap.put("tFileList_5_NB_FILE", NB_FILEtFileList_5);
      
 



/**
 * [tFileList_5 begin ] stop
 */
	
	/**
	 * [tFileList_5 main ] start
	 */

	

	
	
	currentComponent="tFileList_5";

	

 


	tos_count_tFileList_5++;

/**
 * [tFileList_5 main ] stop
 */
	
	/**
	 * [tFileList_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileList_5";

	

 



/**
 * [tFileList_5 process_data_begin ] stop
 */
	NB_ITERATE_tFileDelete_3++;
	
	
				if(execStat){
					runStat.updateStatOnConnection("iterate9", 1, "exec" + NB_ITERATE_tFileDelete_3);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [tFileDelete_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileDelete_3", false);
		start_Hash.put("tFileDelete_3", System.currentTimeMillis());
		
	
	currentComponent="tFileDelete_3";

	
		int tos_count_tFileDelete_3 = 0;
		

 



/**
 * [tFileDelete_3 begin ] stop
 */
	
	/**
	 * [tFileDelete_3 main ] start
	 */

	

	
	
	currentComponent="tFileDelete_3";

	

 

class DeleteFoldertFileDelete_3{
	 /**
     * delete all the sub-files in 'file'
     * 
     * @param file
     */
	public boolean delete(java.io.File file) {
        java.io.File[] files = file.listFiles();
        for (int i = 0; i < files.length; i++) {
            if (files[i].isFile()) {
                files[i].delete();
            } else if (files[i].isDirectory()) {
                if (!files[i].delete()) {
                    delete(files[i]);
                }
            }
        }
        deleteDirectory(file);
        return file.delete();
    }

    /**
     * delete all the sub-folders in 'file'
     * 
     * @param file
     */
    private void deleteDirectory(java.io.File file) {
        java.io.File[] filed = file.listFiles();
        for (int i = 0; i < filed.length; i++) {
        	if(filed[i].isDirectory()) {
            	deleteDirectory(filed[i]);
            }
            filed[i].delete();
        }
    }

}
    java.io.File file_tFileDelete_3=new java.io.File(((String)globalMap.get("tFileList_5_CURRENT_FILEPATH")));
    if(file_tFileDelete_3.exists()&& file_tFileDelete_3.isFile()){
    	if(file_tFileDelete_3.delete()){
    		globalMap.put("tFileDelete_3_CURRENT_STATUS", "File deleted.");
		}else{
			globalMap.put("tFileDelete_3_CURRENT_STATUS", "No file deleted.");
				throw new RuntimeException("File " + file_tFileDelete_3.getAbsolutePath() + " can not be deleted.");
		}
	}else{
		globalMap.put("tFileDelete_3_CURRENT_STATUS", "File does not exist or is invalid.");
			throw new RuntimeException("File " + file_tFileDelete_3.getAbsolutePath() + " does not exist or is invalid or is not a file.");
	}
	globalMap.put("tFileDelete_3_DELETE_PATH",((String)globalMap.get("tFileList_5_CURRENT_FILEPATH")));
    
     
 

 


	tos_count_tFileDelete_3++;

/**
 * [tFileDelete_3 main ] stop
 */
	
	/**
	 * [tFileDelete_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileDelete_3";

	

 



/**
 * [tFileDelete_3 process_data_begin ] stop
 */
	
	/**
	 * [tFileDelete_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileDelete_3";

	

 



/**
 * [tFileDelete_3 process_data_end ] stop
 */
	
	/**
	 * [tFileDelete_3 end ] start
	 */

	

	
	
	currentComponent="tFileDelete_3";

	

 

ok_Hash.put("tFileDelete_3", true);
end_Hash.put("tFileDelete_3", System.currentTimeMillis());




/**
 * [tFileDelete_3 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("iterate9", 2, "exec" + NB_ITERATE_tFileDelete_3);
						}				
					




	
	/**
	 * [tFileList_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileList_5";

	

 



/**
 * [tFileList_5 process_data_end ] stop
 */
	
	/**
	 * [tFileList_5 end ] start
	 */

	

	
	
	currentComponent="tFileList_5";

	

  
    }
  globalMap.put("tFileList_5_NB_FILE", NB_FILEtFileList_5);
  

  
 

 

ok_Hash.put("tFileList_5", true);
end_Hash.put("tFileList_5", System.currentTimeMillis());




/**
 * [tFileList_5 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileList_5:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk12", 0, "ok");
								} 
							
							tFileExist_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileList_5 finally ] start
	 */

	

	
	
	currentComponent="tFileList_5";

	

 



/**
 * [tFileList_5 finally ] stop
 */

	
	/**
	 * [tFileDelete_3 finally ] start
	 */

	

	
	
	currentComponent="tFileDelete_3";

	

 



/**
 * [tFileDelete_3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileList_5_SUBPROCESS_STATE", 1);
	}
	

public void tFileExist_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileExist_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileExist_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileExist_3", false);
		start_Hash.put("tFileExist_3", System.currentTimeMillis());
		
	
	currentComponent="tFileExist_3";

	
		int tos_count_tFileExist_3 = 0;
		

 



/**
 * [tFileExist_3 begin ] stop
 */
	
	/**
	 * [tFileExist_3 main ] start
	 */

	

	
	
	currentComponent="tFileExist_3";

	



java.io.File file_tFileExist_3 = new java.io.File("C:/Haddad_Interface_SF_JDE/Interface Salesforce/OrderEDI/temp/tempListOfEDIFiles.csv");
if (!file_tFileExist_3.exists()) {
    globalMap.put("tFileExist_3_EXISTS",false);
}else{
	globalMap.put("tFileExist_3_EXISTS",true);
}

globalMap.put("tFileExist_3_FILENAME","C:/Haddad_Interface_SF_JDE/Interface Salesforce/OrderEDI/temp/tempListOfEDIFiles.csv");


 


	tos_count_tFileExist_3++;

/**
 * [tFileExist_3 main ] stop
 */
	
	/**
	 * [tFileExist_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileExist_3";

	

 



/**
 * [tFileExist_3 process_data_begin ] stop
 */
	
	/**
	 * [tFileExist_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileExist_3";

	

 



/**
 * [tFileExist_3 process_data_end ] stop
 */
	
	/**
	 * [tFileExist_3 end ] start
	 */

	

	
	
	currentComponent="tFileExist_3";

	

 

ok_Hash.put("tFileExist_3", true);
end_Hash.put("tFileExist_3", System.currentTimeMillis());

   			if ( ((Boolean) globalMap.get ("tFileExist_3_EXISTS")) ) {
   				
					if(execStat){   
   	 					runStat.updateStatOnConnection("If3", 0, "true");
					}
				
    			tFileDelete_4Process(globalMap);
   			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If3", 0, "false");
					}   	 
   				}



/**
 * [tFileExist_3 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileExist_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk5", 0, "ok");
								} 
							
							tFileList_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileExist_3 finally ] start
	 */

	

	
	
	currentComponent="tFileExist_3";

	

 



/**
 * [tFileExist_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileExist_3_SUBPROCESS_STATE", 1);
	}
	

public void tFileDelete_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileDelete_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tFileDelete_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileDelete_4", false);
		start_Hash.put("tFileDelete_4", System.currentTimeMillis());
		
	
	currentComponent="tFileDelete_4";

	
		int tos_count_tFileDelete_4 = 0;
		

 



/**
 * [tFileDelete_4 begin ] stop
 */
	
	/**
	 * [tFileDelete_4 main ] start
	 */

	

	
	
	currentComponent="tFileDelete_4";

	

 

class DeleteFoldertFileDelete_4{
	 /**
     * delete all the sub-files in 'file'
     * 
     * @param file
     */
	public boolean delete(java.io.File file) {
        java.io.File[] files = file.listFiles();
        for (int i = 0; i < files.length; i++) {
            if (files[i].isFile()) {
                files[i].delete();
            } else if (files[i].isDirectory()) {
                if (!files[i].delete()) {
                    delete(files[i]);
                }
            }
        }
        deleteDirectory(file);
        return file.delete();
    }

    /**
     * delete all the sub-folders in 'file'
     * 
     * @param file
     */
    private void deleteDirectory(java.io.File file) {
        java.io.File[] filed = file.listFiles();
        for (int i = 0; i < filed.length; i++) {
        	if(filed[i].isDirectory()) {
            	deleteDirectory(filed[i]);
            }
            filed[i].delete();
        }
    }

}
    java.io.File file_tFileDelete_4=new java.io.File("C:/Haddad_Interface_SF_JDE/Interface Salesforce/OrderEDI/temp/tempListOfEDIFiles.csv");
    if(file_tFileDelete_4.exists()&& file_tFileDelete_4.isFile()){
    	if(file_tFileDelete_4.delete()){
    		globalMap.put("tFileDelete_4_CURRENT_STATUS", "File deleted.");
		}else{
			globalMap.put("tFileDelete_4_CURRENT_STATUS", "No file deleted.");
				throw new RuntimeException("File " + file_tFileDelete_4.getAbsolutePath() + " can not be deleted.");
		}
	}else{
		globalMap.put("tFileDelete_4_CURRENT_STATUS", "File does not exist or is invalid.");
			throw new RuntimeException("File " + file_tFileDelete_4.getAbsolutePath() + " does not exist or is invalid or is not a file.");
	}
	globalMap.put("tFileDelete_4_DELETE_PATH","C:/Haddad_Interface_SF_JDE/Interface Salesforce/OrderEDI/temp/tempListOfEDIFiles.csv");
    
     
 

 


	tos_count_tFileDelete_4++;

/**
 * [tFileDelete_4 main ] stop
 */
	
	/**
	 * [tFileDelete_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileDelete_4";

	

 



/**
 * [tFileDelete_4 process_data_begin ] stop
 */
	
	/**
	 * [tFileDelete_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileDelete_4";

	

 



/**
 * [tFileDelete_4 process_data_end ] stop
 */
	
	/**
	 * [tFileDelete_4 end ] start
	 */

	

	
	
	currentComponent="tFileDelete_4";

	

 

ok_Hash.put("tFileDelete_4", true);
end_Hash.put("tFileDelete_4", System.currentTimeMillis());




/**
 * [tFileDelete_4 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileDelete_4 finally ] start
	 */

	

	
	
	currentComponent="tFileDelete_4";

	

 



/**
 * [tFileDelete_4 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileDelete_4_SUBPROCESS_STATE", 1);
	}
	


public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
    final static byte[] commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI = new byte[0];
    static byte[] commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[0];

	
			    public String line;

				public String getLine () {
					return this.line;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length) {
				if(length < 1024 && commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length == 0) {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[1024];
				} else {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length);
			strReturn = new String(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI) {

        	try {

        		int length = 0;
		
					this.line = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.line,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("line="+line);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row12Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out2Struct implements routines.system.IPersistableRow<out2Struct> {
    final static byte[] commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI = new byte[0];
    static byte[] commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[0];

	
			    public String lineL;

				public String getLineL () {
					return this.lineL;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length) {
				if(length < 1024 && commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length == 0) {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[1024];
				} else {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length);
			strReturn = new String(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI) {

        	try {

        		int length = 0;
		
					this.lineL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.lineL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("lineL="+lineL);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class allStruct implements routines.system.IPersistableRow<allStruct> {
    final static byte[] commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI = new byte[0];
    static byte[] commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[0];

	
			    public String line;

				public String getLine () {
					return this.line;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length) {
				if(length < 1024 && commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length == 0) {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[1024];
				} else {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length);
			strReturn = new String(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI) {

        	try {

        		int length = 0;
		
					this.line = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.line,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("line="+line);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(allStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class setGlobaleVar2Struct implements routines.system.IPersistableRow<setGlobaleVar2Struct> {
    final static byte[] commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI = new byte[0];
    static byte[] commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[0];

	
			    public String line;

				public String getLine () {
					return this.line;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length) {
				if(length < 1024 && commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length == 0) {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[1024];
				} else {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length);
			strReturn = new String(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI) {

        	try {

        		int length = 0;
		
					this.line = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.line,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("line="+line);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(setGlobaleVar2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI = new byte[0];
    static byte[] commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[0];

	
			    public String line;

				public String getLine () {
					return this.line;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length) {
				if(length < 1024 && commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length == 0) {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[1024];
				} else {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length);
			strReturn = new String(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI) {

        	try {

        		int length = 0;
		
					this.line = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.line,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("line="+line);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileList_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileList_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row12Struct row12 = new row12Struct();
row6Struct row6 = new row6Struct();
allStruct all = new allStruct();
out2Struct out2 = new out2Struct();
setGlobaleVar2Struct setGlobaleVar2 = new setGlobaleVar2Struct();



	
	/**
	 * [tFileList_2 begin ] start
	 */

				
			int NB_ITERATE_tSetGlobalVar_4 = 0; //for statistics
						
			int NB_ITERATE_tFileInputFullRow_2 = 0; //for statistics
			

	
		
		ok_Hash.put("tFileList_2", false);
		start_Hash.put("tFileList_2", System.currentTimeMillis());
		
	
	currentComponent="tFileList_2";

	
		int tos_count_tFileList_2 = 0;
		
	
 
     
    
  String directory_tFileList_2 = "C:/Haddad_Interface_SF_JDE/Interface Salesforce/OrderEDI/input/";
  final java.util.List<String> maskList_tFileList_2 = new java.util.ArrayList<String>();
  final java.util.List<java.util.regex.Pattern> patternList_tFileList_2 = new java.util.ArrayList<java.util.regex.Pattern>();
      maskList_tFileList_2.add("*");  
  for (final String filemask_tFileList_2 : maskList_tFileList_2) {
	String filemask_compile_tFileList_2 = filemask_tFileList_2;
	
		filemask_compile_tFileList_2 = org.apache.oro.text.GlobCompiler.globToPerl5(filemask_tFileList_2.toCharArray(), org.apache.oro.text.GlobCompiler.DEFAULT_MASK);
	
		java.util.regex.Pattern fileNamePattern_tFileList_2 = java.util.regex.Pattern.compile(filemask_compile_tFileList_2);
	patternList_tFileList_2.add(fileNamePattern_tFileList_2);
  }
  int NB_FILEtFileList_2 = 0;

  final boolean case_sensitive_tFileList_2 = true;
    final java.util.List<java.io.File> list_tFileList_2 = new java.util.ArrayList<java.io.File>();
    final java.util.Set<String> filePath_tFileList_2 = new java.util.HashSet<String>();
	java.io.File file_tFileList_2 = new java.io.File(directory_tFileList_2);
     
		file_tFileList_2.listFiles(new java.io.FilenameFilter() {
			public boolean accept(java.io.File dir, String name) {
				java.io.File file = new java.io.File(dir, name);
                if (!file.isDirectory()) {
                	
    	String fileName_tFileList_2 = file.getName();
		for (final java.util.regex.Pattern fileNamePattern_tFileList_2 : patternList_tFileList_2) {
          	if (fileNamePattern_tFileList_2.matcher(fileName_tFileList_2).matches()){
					if(!filePath_tFileList_2.contains(file.getAbsolutePath())) {
			          list_tFileList_2.add(file);
			          filePath_tFileList_2.add(file.getAbsolutePath());
			        }
			}
		}
                }
              return true;
            }
          }
      ); 
      java.util.Collections.sort(list_tFileList_2);
    
    for (int i_tFileList_2 = 0; i_tFileList_2 < list_tFileList_2.size(); i_tFileList_2++){
      java.io.File files_tFileList_2 = list_tFileList_2.get(i_tFileList_2);
      String fileName_tFileList_2 = files_tFileList_2.getName();
      
      String currentFileName_tFileList_2 = files_tFileList_2.getName(); 
      String currentFilePath_tFileList_2 = files_tFileList_2.getAbsolutePath();
      String currentFileDirectory_tFileList_2 = files_tFileList_2.getParent();
      String currentFileExtension_tFileList_2 = null;
      
      if (files_tFileList_2.getName().contains(".") && files_tFileList_2.isFile()){
        currentFileExtension_tFileList_2 = files_tFileList_2.getName().substring(files_tFileList_2.getName().lastIndexOf(".") + 1);
      } else{
        currentFileExtension_tFileList_2 = "";
      }
      
      NB_FILEtFileList_2 ++;
      globalMap.put("tFileList_2_CURRENT_FILE", currentFileName_tFileList_2);
      globalMap.put("tFileList_2_CURRENT_FILEPATH", currentFilePath_tFileList_2);
      globalMap.put("tFileList_2_CURRENT_FILEDIRECTORY", currentFileDirectory_tFileList_2);
      globalMap.put("tFileList_2_CURRENT_FILEEXTENSION", currentFileExtension_tFileList_2);
      globalMap.put("tFileList_2_NB_FILE", NB_FILEtFileList_2);
      
 



/**
 * [tFileList_2 begin ] stop
 */
	
	/**
	 * [tFileList_2 main ] start
	 */

	

	
	
	currentComponent="tFileList_2";

	

 


	tos_count_tFileList_2++;

/**
 * [tFileList_2 main ] stop
 */
	
	/**
	 * [tFileList_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileList_2";

	

 



/**
 * [tFileList_2 process_data_begin ] stop
 */
	NB_ITERATE_tSetGlobalVar_4++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("row12", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate1", 1, "exec" + NB_ITERATE_tSetGlobalVar_4);
					//Thread.sleep(1000);
				}				
			


	
	/**
	 * [tJavaRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_3", false);
		start_Hash.put("tJavaRow_3", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row12");
					}
				
		int tos_count_tJavaRow_3 = 0;
		

int nb_line_tJavaRow_3 = 0;

 



/**
 * [tJavaRow_3 begin ] stop
 */



	
	/**
	 * [tSetGlobalVar_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tSetGlobalVar_4", false);
		start_Hash.put("tSetGlobalVar_4", System.currentTimeMillis());
		
	
	currentComponent="tSetGlobalVar_4";

	
		int tos_count_tSetGlobalVar_4 = 0;
		

 



/**
 * [tSetGlobalVar_4 begin ] stop
 */
	
	/**
	 * [tSetGlobalVar_4 main ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_4";

	

globalMap.put("FileName", ((String)globalMap.get("tFileList_2_CURRENT_FILE")).substring(0, ((String)globalMap.get("tFileList_2_CURRENT_FILE")).indexOf(".")) );
globalMap.put("fileExtension", ((String)globalMap.get("tFileList_2_CURRENT_FILEEXTENSION")));
globalMap.put("varFILENAME", ((String)globalMap.get("tFileList_2_CURRENT_FILE")).substring(0, ((String)globalMap.get("tFileList_2_CURRENT_FILE")).indexOf(".")) );
globalMap.put("ExecDate", TalendDate.formatDate("yyyyMMdd-HH'H'mm'm'ss",TalendDate.getCurrentDate()));
globalMap.put("ExecDateC", TalendDate.getCurrentDate());
globalMap.put("OrderPONumbers", "");
globalMap.put("OrderPONumber", "");

 


	tos_count_tSetGlobalVar_4++;

/**
 * [tSetGlobalVar_4 main ] stop
 */
	
	/**
	 * [tSetGlobalVar_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_4";

	

 



/**
 * [tSetGlobalVar_4 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_3 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row12");
					}
					

    // code sample:
//
// multiply by 2 the row identifier
// output_row.id = row12.id * 2;
//
// lowercase the name
// output_row.name = row12.name.toLowerCase();

System.out.println("FileName    : " + ((String)globalMap.get("FileName")) );
System.out.println("varFILENAME    : " + ((String)globalMap.get("varFILENAME")) );
System.out.println("fileExtension    : " + ((String)globalMap.get("fileExtension")) );
System.out.println("OrderPONumbers    : " + ((String)globalMap.get("OrderPONumbers")) );




    nb_line_tJavaRow_3++;   

 


	tos_count_tJavaRow_3++;

/**
 * [tJavaRow_3 main ] stop
 */
	
	/**
	 * [tJavaRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";

	

 



/**
 * [tJavaRow_3 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";

	

 



/**
 * [tJavaRow_3 process_data_end ] stop
 */



	
	/**
	 * [tSetGlobalVar_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_4";

	

 



/**
 * [tSetGlobalVar_4 process_data_end ] stop
 */
	
	/**
	 * [tSetGlobalVar_4 end ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_4";

	

 

ok_Hash.put("tSetGlobalVar_4", true);
end_Hash.put("tSetGlobalVar_4", System.currentTimeMillis());




/**
 * [tSetGlobalVar_4 end ] stop
 */

	
	/**
	 * [tJavaRow_3 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";

	

globalMap.put("tJavaRow_3_NB_LINE",nb_line_tJavaRow_3);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row12");
			  	}
			  	
 

ok_Hash.put("tJavaRow_3", true);
end_Hash.put("tJavaRow_3", System.currentTimeMillis());




/**
 * [tJavaRow_3 end ] stop
 */



						if(execStat){
							runStat.updateStatOnConnection("iterate1", 2, "exec" + NB_ITERATE_tSetGlobalVar_4);
						}				
					




	NB_ITERATE_tFileInputFullRow_2++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("setGlobaleVar2", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row6", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("out2", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("all", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate4", 1, "exec" + NB_ITERATE_tFileInputFullRow_2);
					//Thread.sleep(1000);
				}				
			




	
	/**
	 * [tFileOutputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_2", false);
		start_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out2");
					}
				
		int tos_count_tFileOutputDelimited_2 = 0;
		

String fileName_tFileOutputDelimited_2 = "";
    fileName_tFileOutputDelimited_2 = (new java.io.File("C:/Haddad_Interface_SF_JDE/Interface Salesforce/OrderEDI/temp/tempOutput_"+((String)globalMap.get("FileName"))+".csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_2 = null;
    String extension_tFileOutputDelimited_2 = null;
    String directory_tFileOutputDelimited_2 = null;
    if((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        }
        directory_tFileOutputDelimited_2 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_2 = true;
    java.io.File filetFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
    globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
        if(filetFileOutputDelimited_2.exists()){
            isFileGenerated_tFileOutputDelimited_2 = false;
        }
            int nb_line_tFileOutputDelimited_2 = 0;
            int splitedFileNo_tFileOutputDelimited_2 = 0;
            int currentRow_tFileOutputDelimited_2 = 0;

            final String OUT_DELIM_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_2 != null && directory_tFileOutputDelimited_2.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_2 = new java.io.File(directory_tFileOutputDelimited_2);
                        if(!dir_tFileOutputDelimited_2.exists()) {
                            dir_tFileOutputDelimited_2.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_2 = null;

                        outtFileOutputDelimited_2 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_2, true),"ISO-8859-15"));


        resourceMap.put("out_tFileOutputDelimited_2", outtFileOutputDelimited_2);
resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

 



/**
 * [tFileOutputDelimited_2 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"all");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
out2Struct out2_tmp = new out2Struct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */




	
	/**
	 * [tSetGlobalVar_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tSetGlobalVar_1", false);
		start_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());
		
	
	currentComponent="tSetGlobalVar_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"setGlobaleVar2");
					}
				
		int tos_count_tSetGlobalVar_1 = 0;
		

 



/**
 * [tSetGlobalVar_1 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
allStruct all_tmp = new allStruct();
setGlobaleVar2Struct setGlobaleVar2_tmp = new setGlobaleVar2Struct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tFileInputFullRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputFullRow_2", false);
		start_Hash.put("tFileInputFullRow_2", System.currentTimeMillis());
		
	
	currentComponent="tFileInputFullRow_2";

	
		int tos_count_tFileInputFullRow_2 = 0;
		

	org.talend.fileprocess.FileInputDelimited fid_tFileInputFullRow_2 = null;

	

	try{//}
		fid_tFileInputFullRow_2 =new org.talend.fileprocess.FileInputDelimited(((String)globalMap.get("tFileList_2_CURRENT_FILEPATH")),"ISO-8859-15","","\n",true,0,0,-1,-1,false);
		while (fid_tFileInputFullRow_2.nextRecord()) {//}
			row6 = null;						
	boolean whetherReject_tFileInputFullRow_2 = false;
	row6 = new row6Struct();
		row6.line = fid_tFileInputFullRow_2.get(0);

 



/**
 * [tFileInputFullRow_2 begin ] stop
 */
	
	/**
	 * [tFileInputFullRow_2 main ] start
	 */

	

	
	
	currentComponent="tFileInputFullRow_2";

	

 


	tos_count_tFileInputFullRow_2++;

/**
 * [tFileInputFullRow_2 main ] stop
 */
	
	/**
	 * [tFileInputFullRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputFullRow_2";

	

 



/**
 * [tFileInputFullRow_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row6");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_4 = false;
		  boolean mainRowRejected_tMap_4 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

all = null;
setGlobaleVar2 = null;


// # Output table : 'all'
// # Filter conditions 
if( 

row6.line.startsWith("L")

 ) {
all_tmp.line = row6.line ;
all = all_tmp;
} // closing filter/reject

// # Output table : 'setGlobaleVar2'
// # Filter conditions 
if( 

row6.line.startsWith("E") 

 ) {
setGlobaleVar2_tmp.line = row6.line ;
setGlobaleVar2 = setGlobaleVar2_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "all"
if(all != null) { 



	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"all");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

out2 = null;


// # Output table : 'out2'
// # Filter conditions 
if( 

all.line.startsWith("L") 

 ) {
out2_tmp.lineL = ((String)globalMap.get("lineE")) + ";" + all.line ;
out2 = out2_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "out2"
if(out2 != null) { 



	
	/**
	 * [tFileOutputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out2");
					}
					


                    StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
                            if(out2.lineL != null) {
                        sb_tFileOutputDelimited_2.append(
                            out2.lineL
                        );
                            }
                    sb_tFileOutputDelimited_2.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);


                    nb_line_tFileOutputDelimited_2++;
                    resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

                        outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2.toString());




 


	tos_count_tFileOutputDelimited_2++;

/**
 * [tFileOutputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	

 



/**
 * [tFileOutputDelimited_2 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	

 



/**
 * [tFileOutputDelimited_2 process_data_end ] stop
 */

} // End of branch "out2"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */

} // End of branch "all"




// Start of branch "setGlobaleVar2"
if(setGlobaleVar2 != null) { 



	
	/**
	 * [tSetGlobalVar_1 main ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"setGlobaleVar2");
					}
					

globalMap.put("lineE", row6.line );

 


	tos_count_tSetGlobalVar_1++;

/**
 * [tSetGlobalVar_1 main ] stop
 */
	
	/**
	 * [tSetGlobalVar_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

 



/**
 * [tSetGlobalVar_1 process_data_begin ] stop
 */
	
	/**
	 * [tSetGlobalVar_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

 



/**
 * [tSetGlobalVar_1 process_data_end ] stop
 */

} // End of branch "setGlobaleVar2"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_end ] stop
 */



	
	/**
	 * [tFileInputFullRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputFullRow_2";

	

 



/**
 * [tFileInputFullRow_2 process_data_end ] stop
 */
	
	/**
	 * [tFileInputFullRow_2 end ] start
	 */

	

	
	
	currentComponent="tFileInputFullRow_2";

	

	


            }
           	}finally{
           		if(fid_tFileInputFullRow_2!=null){
            		fid_tFileInputFullRow_2.close();
            	}
            }
            globalMap.put("tFileInputFullRow_2_NB_LINE", fid_tFileInputFullRow_2.getRowNumber());
 

ok_Hash.put("tFileInputFullRow_2", true);
end_Hash.put("tFileInputFullRow_2", System.currentTimeMillis());




/**
 * [tFileInputFullRow_2 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"all");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	



		
			
					if(outtFileOutputDelimited_2!=null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}
				
				globalMap.put("tFileOutputDelimited_2_NB_LINE",nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_2", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out2");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_2", true);
end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_2 end ] stop
 */







	
	/**
	 * [tSetGlobalVar_1 end ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"setGlobaleVar2");
			  	}
			  	
 

ok_Hash.put("tSetGlobalVar_1", true);
end_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());




/**
 * [tSetGlobalVar_1 end ] stop
 */






						if(execStat){
							runStat.updateStatOnConnection("iterate4", 2, "exec" + NB_ITERATE_tFileInputFullRow_2);
						}				
					




	
	/**
	 * [tFileList_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileList_2";

	

 



/**
 * [tFileList_2 process_data_end ] stop
 */
	
	/**
	 * [tFileList_2 end ] start
	 */

	

	
	
	currentComponent="tFileList_2";

	

  
    }
  globalMap.put("tFileList_2_NB_FILE", NB_FILEtFileList_2);
  

  
 

 

ok_Hash.put("tFileList_2", true);
end_Hash.put("tFileList_2", System.currentTimeMillis());




/**
 * [tFileList_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileList_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tFileList_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileList_2 finally ] start
	 */

	

	
	
	currentComponent="tFileList_2";

	

 



/**
 * [tFileList_2 finally ] stop
 */

	
	/**
	 * [tSetGlobalVar_4 finally ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_4";

	

 



/**
 * [tSetGlobalVar_4 finally ] stop
 */

	
	/**
	 * [tJavaRow_3 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";

	

 



/**
 * [tJavaRow_3 finally ] stop
 */







	
	/**
	 * [tFileInputFullRow_2 finally ] start
	 */

	

	
	
	currentComponent="tFileInputFullRow_2";

	

 



/**
 * [tFileInputFullRow_2 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	


		if(resourceMap.get("finish_tFileOutputDelimited_2") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_2");
						if(outtFileOutputDelimited_2!=null) {
							outtFileOutputDelimited_2.flush();
							outtFileOutputDelimited_2.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_2 finally ] stop
 */







	
	/**
	 * [tSetGlobalVar_1 finally ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

 



/**
 * [tSetGlobalVar_1 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileList_2_SUBPROCESS_STATE", 1);
	}
	


public static class row18Struct implements routines.system.IPersistableComparableLookupRow<row18Struct> {
    final static byte[] commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI = new byte[0];
    static byte[] commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String Filename;

				public String getFilename () {
					return this.Filename;
				}
				
			    public String PONumber;

				public String getPONumber () {
					return this.PONumber;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.PONumber == null) ? 0 : this.PONumber.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row18Struct other = (row18Struct) obj;
		
						if (this.PONumber == null) {
							if (other.PONumber != null)
								return false;
						
						} else if (!this.PONumber.equals(other.PONumber))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row18Struct other) {

		other.Filename = this.Filename;
	            other.PONumber = this.PONumber;
	            
	}

	public void copyKeysDataTo(row18Struct other) {

		other.PONumber = this.PONumber;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length) {
				if(length < 1024 && commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length == 0) {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[1024];
				} else {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length);
			strReturn = new String(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI) {

        	try {

        		int length = 0;
		
					this.PONumber = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PONumber,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.Filename = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.Filename, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Filename="+Filename);
		sb.append(",PONumber="+PONumber);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row18Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.PONumber, other.PONumber);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row17Struct implements routines.system.IPersistableRow<row17Struct> {
    final static byte[] commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI = new byte[0];
    static byte[] commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[0];

	
			    public String Filename;

				public String getFilename () {
					return this.Filename;
				}
				
			    public String PONumber;

				public String getPONumber () {
					return this.PONumber;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length) {
				if(length < 1024 && commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length == 0) {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[1024];
				} else {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length);
			strReturn = new String(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI) {

        	try {

        		int length = 0;
		
					this.Filename = readString(dis);
					
					this.PONumber = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Filename,dos);
					
					// String
				
						writeString(this.PONumber,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Filename="+Filename);
		sb.append(",PONumber="+PONumber);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row17Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row17Struct row17 = new row17Struct();
row18Struct row18 = new row18Struct();





	
	/**
	 * [tAdvancedHash_row18 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row18", false);
		start_Hash.put("tAdvancedHash_row18", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row18";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row18");
					}
				
		int tos_count_tAdvancedHash_row18 = 0;
		

			   		// connection name:row18
			   		// source node:tUniqRow_1 - inputs:(row17) outputs:(row18,row18) | target node:tAdvancedHash_row18 - inputs:(row18) outputs:()
			   		// linked node: tMap_8 - inputs:(row14,row18) outputs:(out5,ImportedFile)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row18 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.FIRST_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct> tHash_Lookup_row18 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row18Struct>getLookup(matchingModeEnum_row18);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row18", tHash_Lookup_row18);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row18 begin ] stop
 */



	
	/**
	 * [tUniqRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_1", false);
		start_Hash.put("tUniqRow_1", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row17");
					}
				
		int tos_count_tUniqRow_1 = 0;
		

	
		class KeyStruct_tUniqRow_1 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String PONumber;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.PONumber == null) ? 0 : this.PONumber.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_1 other = (KeyStruct_tUniqRow_1) obj;
				
									if (this.PONumber == null) {
										if (other.PONumber != null) 
											return false;
								
									} else if (!this.PONumber.equals(other.PONumber))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_1 = 0;
int nb_duplicates_tUniqRow_1 = 0;
KeyStruct_tUniqRow_1 finder_tUniqRow_1 = new KeyStruct_tUniqRow_1();
java.util.Set<KeyStruct_tUniqRow_1> keystUniqRow_1 = new java.util.HashSet<KeyStruct_tUniqRow_1>(); 

 



/**
 * [tUniqRow_1 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_1", false);
		start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_1";

	
		int tos_count_tFileInputDelimited_1 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				int limit_tFileInputDelimited_1 = -1;
				try{
					
						Object filename_tFileInputDelimited_1 = "C:/Haddad_Interface_SF_JDE/Interface Salesforce/OrderEDI/temp/tempListOfEDIFiles.csv";
						if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
			if(footer_value_tFileInputDelimited_1 >0 || random_value_tFileInputDelimited_1 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited("C:/Haddad_Interface_SF_JDE/Interface Salesforce/OrderEDI/temp/tempListOfEDIFiles.csv", "ISO-8859-15",";","\n",true,0,0,
									limit_tFileInputDelimited_1
								,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_1!=null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();
						
			    						row17 = null;			
												
									boolean whetherReject_tFileInputDelimited_1 = false;
									row17 = new row17Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_1 = 0;
				
					columnIndexWithD_tFileInputDelimited_1 = 0;
					
							row17.Filename = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 1;
					
							row17.PONumber = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
				
										
										if(rowstate_tFileInputDelimited_1.getException()!=null) {
											throw rowstate_tFileInputDelimited_1.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_1 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row17 = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_1 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 


	tos_count_tFileInputDelimited_1++;

/**
 * [tFileInputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_begin ] stop
 */
// Start of branch "row17"
if(row17 != null) { 



	
	/**
	 * [tUniqRow_1 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row17");
					}
					
row18 = null;			row18 = null;			
if(row17.PONumber == null){
	finder_tUniqRow_1.PONumber = null;
}else{
	finder_tUniqRow_1.PONumber = row17.PONumber.toLowerCase();
}	
finder_tUniqRow_1.hashCodeDirty = true;
if (!keystUniqRow_1.contains(finder_tUniqRow_1)) {
		KeyStruct_tUniqRow_1 new_tUniqRow_1 = new KeyStruct_tUniqRow_1();

		
if(row17.PONumber == null){
	new_tUniqRow_1.PONumber = null;
}else{
	new_tUniqRow_1.PONumber = row17.PONumber.toLowerCase();
}
		
		keystUniqRow_1.add(new_tUniqRow_1);if(row18 == null){ 
	
	row18 = new row18Struct();
}row18.Filename = row17.Filename;			row18.PONumber = row17.PONumber;			if(row18 == null){ 
	
	row18 = new row18Struct();
}row18.Filename = row17.Filename;			row18.PONumber = row17.PONumber;					
		nb_uniques_tUniqRow_1++;
	} else {
	  nb_duplicates_tUniqRow_1++;
	}

 


	tos_count_tUniqRow_1++;

/**
 * [tUniqRow_1 main ] stop
 */
	
	/**
	 * [tUniqRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 process_data_begin ] stop
 */
// Start of branch "row18"
if(row18 != null) { 



	
	/**
	 * [tAdvancedHash_row18 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row18";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row18");
					}
					


			   
			   

					row18Struct row18_HashRow = new row18Struct();
		   	   	   
				
				row18_HashRow.Filename = row18.Filename;
				
				row18_HashRow.PONumber = row18.PONumber;
				
			tHash_Lookup_row18.put(row18_HashRow);
			
            




 


	tos_count_tAdvancedHash_row18++;

/**
 * [tAdvancedHash_row18 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row18 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row18";

	

 



/**
 * [tAdvancedHash_row18 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row18 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row18";

	

 



/**
 * [tAdvancedHash_row18 process_data_end ] stop
 */

} // End of branch "row18"




	
	/**
	 * [tUniqRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 process_data_end ] stop
 */

} // End of branch "row17"




	
	/**
	 * [tFileInputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	



            }
            }finally{
                if(!((Object)("C:/Haddad_Interface_SF_JDE/Interface Salesforce/OrderEDI/temp/tempListOfEDIFiles.csv") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_1!=null){
                		fid_tFileInputDelimited_1.close();
                	}
                }
                if(fid_tFileInputDelimited_1!=null){
                	globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_1", true);
end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());




/**
 * [tFileInputDelimited_1 end ] stop
 */

	
	/**
	 * [tUniqRow_1 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

globalMap.put("tUniqRow_1_NB_UNIQUES",nb_uniques_tUniqRow_1);
globalMap.put("tUniqRow_1_NB_DUPLICATES",nb_duplicates_tUniqRow_1);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row17");
			  	}
			  	
 

ok_Hash.put("tUniqRow_1", true);
end_Hash.put("tUniqRow_1", System.currentTimeMillis());




/**
 * [tUniqRow_1 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row18 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row18";

	

tHash_Lookup_row18.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row18");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row18", true);
end_Hash.put("tAdvancedHash_row18", System.currentTimeMillis());




/**
 * [tAdvancedHash_row18 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 finally ] stop
 */

	
	/**
	 * [tUniqRow_1 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row18 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row18";

	

 



/**
 * [tAdvancedHash_row18 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}
	


public static class row19Struct implements routines.system.IPersistableComparableLookupRow<row19Struct> {
    final static byte[] commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI = new byte[0];
    static byte[] commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String Filename;

				public String getFilename () {
					return this.Filename;
				}
				
			    public String PONumber;

				public String getPONumber () {
					return this.PONumber;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.PONumber == null) ? 0 : this.PONumber.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row19Struct other = (row19Struct) obj;
		
						if (this.PONumber == null) {
							if (other.PONumber != null)
								return false;
						
						} else if (!this.PONumber.equals(other.PONumber))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row19Struct other) {

		other.Filename = this.Filename;
	            other.PONumber = this.PONumber;
	            
	}

	public void copyKeysDataTo(row19Struct other) {

		other.PONumber = this.PONumber;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length) {
				if(length < 1024 && commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length == 0) {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[1024];
				} else {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length);
			strReturn = new String(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI) {

        	try {

        		int length = 0;
		
					this.PONumber = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PONumber,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.Filename = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.Filename, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Filename="+Filename);
		sb.append(",PONumber="+PONumber);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row19Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.PONumber, other.PONumber);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row20Struct implements routines.system.IPersistableRow<row20Struct> {
    final static byte[] commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI = new byte[0];
    static byte[] commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[0];

	
			    public String Filename;

				public String getFilename () {
					return this.Filename;
				}
				
			    public String PONumber;

				public String getPONumber () {
					return this.PONumber;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length) {
				if(length < 1024 && commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length == 0) {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[1024];
				} else {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length);
			strReturn = new String(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI) {

        	try {

        		int length = 0;
		
					this.Filename = readString(dis);
					
					this.PONumber = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Filename,dos);
					
					// String
				
						writeString(this.PONumber,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Filename="+Filename);
		sb.append(",PONumber="+PONumber);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row20Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row20Struct row20 = new row20Struct();
row19Struct row19 = new row19Struct();





	
	/**
	 * [tAdvancedHash_row19 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row19", false);
		start_Hash.put("tAdvancedHash_row19", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row19";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row19");
					}
				
		int tos_count_tAdvancedHash_row19 = 0;
		

			   		// connection name:row19
			   		// source node:tUniqRow_2 - inputs:(row20) outputs:(row19,row19) | target node:tAdvancedHash_row19 - inputs:(row19) outputs:()
			   		// linked node: tMap_7 - inputs:(row16,row19) outputs:(out8,DeleteDocument)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row19 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.FIRST_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row19Struct> tHash_Lookup_row19 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row19Struct>getLookup(matchingModeEnum_row19);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row19", tHash_Lookup_row19);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row19 begin ] stop
 */



	
	/**
	 * [tUniqRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_2", false);
		start_Hash.put("tUniqRow_2", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row20");
					}
				
		int tos_count_tUniqRow_2 = 0;
		

	
		class KeyStruct_tUniqRow_2 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String PONumber;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.PONumber == null) ? 0 : this.PONumber.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_2 other = (KeyStruct_tUniqRow_2) obj;
				
									if (this.PONumber == null) {
										if (other.PONumber != null) 
											return false;
								
									} else if (!this.PONumber.equals(other.PONumber))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_2 = 0;
int nb_duplicates_tUniqRow_2 = 0;
KeyStruct_tUniqRow_2 finder_tUniqRow_2 = new KeyStruct_tUniqRow_2();
java.util.Set<KeyStruct_tUniqRow_2> keystUniqRow_2 = new java.util.HashSet<KeyStruct_tUniqRow_2>(); 

 



/**
 * [tUniqRow_2 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_3", false);
		start_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_3";

	
		int tos_count_tFileInputDelimited_3 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_3 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_3 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_3 = null;
				int limit_tFileInputDelimited_3 = -1;
				try{
					
						Object filename_tFileInputDelimited_3 = "C:/Haddad_Interface_SF_JDE/Interface Salesforce/OrderEDI/temp/tempListOfEDIFiles.csv";
						if(filename_tFileInputDelimited_3 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_3 = 0, random_value_tFileInputDelimited_3 = -1;
			if(footer_value_tFileInputDelimited_3 >0 || random_value_tFileInputDelimited_3 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_3 = new org.talend.fileprocess.FileInputDelimited("C:/Haddad_Interface_SF_JDE/Interface Salesforce/OrderEDI/temp/tempListOfEDIFiles.csv", "ISO-8859-15",";","\n",true,0,0,
									limit_tFileInputDelimited_3
								,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_3!=null && fid_tFileInputDelimited_3.nextRecord()) {
						rowstate_tFileInputDelimited_3.reset();
						
			    						row20 = null;			
												
									boolean whetherReject_tFileInputDelimited_3 = false;
									row20 = new row20Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_3 = 0;
				
					columnIndexWithD_tFileInputDelimited_3 = 0;
					
							row20.Filename = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 1;
					
							row20.PONumber = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
				
										
										if(rowstate_tFileInputDelimited_3.getException()!=null) {
											throw rowstate_tFileInputDelimited_3.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_3 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row20 = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_3 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_3 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	

 


	tos_count_tFileInputDelimited_3++;

/**
 * [tFileInputDelimited_3 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	

 



/**
 * [tFileInputDelimited_3 process_data_begin ] stop
 */
// Start of branch "row20"
if(row20 != null) { 



	
	/**
	 * [tUniqRow_2 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row20");
					}
					
row19 = null;			row19 = null;			
if(row20.PONumber == null){
	finder_tUniqRow_2.PONumber = null;
}else{
	finder_tUniqRow_2.PONumber = row20.PONumber.toLowerCase();
}	
finder_tUniqRow_2.hashCodeDirty = true;
if (!keystUniqRow_2.contains(finder_tUniqRow_2)) {
		KeyStruct_tUniqRow_2 new_tUniqRow_2 = new KeyStruct_tUniqRow_2();

		
if(row20.PONumber == null){
	new_tUniqRow_2.PONumber = null;
}else{
	new_tUniqRow_2.PONumber = row20.PONumber.toLowerCase();
}
		
		keystUniqRow_2.add(new_tUniqRow_2);if(row19 == null){ 
	
	row19 = new row19Struct();
}row19.Filename = row20.Filename;			row19.PONumber = row20.PONumber;			if(row19 == null){ 
	
	row19 = new row19Struct();
}row19.Filename = row20.Filename;			row19.PONumber = row20.PONumber;					
		nb_uniques_tUniqRow_2++;
	} else {
	  nb_duplicates_tUniqRow_2++;
	}

 


	tos_count_tUniqRow_2++;

/**
 * [tUniqRow_2 main ] stop
 */
	
	/**
	 * [tUniqRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

 



/**
 * [tUniqRow_2 process_data_begin ] stop
 */
// Start of branch "row19"
if(row19 != null) { 



	
	/**
	 * [tAdvancedHash_row19 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row19";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row19");
					}
					


			   
			   

					row19Struct row19_HashRow = new row19Struct();
		   	   	   
				
				row19_HashRow.Filename = row19.Filename;
				
				row19_HashRow.PONumber = row19.PONumber;
				
			tHash_Lookup_row19.put(row19_HashRow);
			
            




 


	tos_count_tAdvancedHash_row19++;

/**
 * [tAdvancedHash_row19 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row19 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row19";

	

 



/**
 * [tAdvancedHash_row19 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row19 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row19";

	

 



/**
 * [tAdvancedHash_row19 process_data_end ] stop
 */

} // End of branch "row19"




	
	/**
	 * [tUniqRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

 



/**
 * [tUniqRow_2 process_data_end ] stop
 */

} // End of branch "row20"




	
	/**
	 * [tFileInputDelimited_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	

 



/**
 * [tFileInputDelimited_3 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_3 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	



            }
            }finally{
                if(!((Object)("C:/Haddad_Interface_SF_JDE/Interface Salesforce/OrderEDI/temp/tempListOfEDIFiles.csv") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_3!=null){
                		fid_tFileInputDelimited_3.close();
                	}
                }
                if(fid_tFileInputDelimited_3!=null){
                	globalMap.put("tFileInputDelimited_3_NB_LINE", fid_tFileInputDelimited_3.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_3", true);
end_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());




/**
 * [tFileInputDelimited_3 end ] stop
 */

	
	/**
	 * [tUniqRow_2 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

globalMap.put("tUniqRow_2_NB_UNIQUES",nb_uniques_tUniqRow_2);
globalMap.put("tUniqRow_2_NB_DUPLICATES",nb_duplicates_tUniqRow_2);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row20");
			  	}
			  	
 

ok_Hash.put("tUniqRow_2", true);
end_Hash.put("tUniqRow_2", System.currentTimeMillis());




/**
 * [tUniqRow_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row19 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row19";

	

tHash_Lookup_row19.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row19");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row19", true);
end_Hash.put("tAdvancedHash_row19", System.currentTimeMillis());




/**
 * [tAdvancedHash_row19 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_3 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	

 



/**
 * [tFileInputDelimited_3 finally ] stop
 */

	
	/**
	 * [tUniqRow_2 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

 



/**
 * [tUniqRow_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row19 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row19";

	

 



/**
 * [tAdvancedHash_row19 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 1);
	}
	


public static class row22Struct implements routines.system.IPersistableRow<row22Struct> {
    final static byte[] commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI = new byte[0];
    static byte[] commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[0];

	
			    public routines.system.Document body;

				public routines.system.Document getBody () {
					return this.body;
				}
				
			    public String string;

				public String getString () {
					return this.string;
				}
				
			    public Integer statusCode;

				public Integer getStatusCode () {
					return this.statusCode;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length) {
				if(length < 1024 && commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length == 0) {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[1024];
				} else {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length);
			strReturn = new String(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI) {

        	try {

        		int length = 0;
		
						this.body = (routines.system.Document) dis.readObject();
					
					this.string = readString(dis);
					
						this.statusCode = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Document
				
       			    	dos.writeObject(this.body);
					
					// String
				
						writeString(this.string,dos);
					
					// Integer
				
						writeInteger(this.statusCode,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("body="+String.valueOf(body));
		sb.append(",string="+string);
		sb.append(",statusCode="+String.valueOf(statusCode));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row22Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row23Struct implements routines.system.IPersistableRow<row23Struct> {
    final static byte[] commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI = new byte[0];
    static byte[] commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[0];

	
			    public Integer errorCode;

				public Integer getErrorCode () {
					return this.errorCode;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length) {
				if(length < 1024 && commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length == 0) {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[1024];
				} else {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length);
			strReturn = new String(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI) {

        	try {

        		int length = 0;
		
						this.errorCode = readInteger(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.errorCode,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("errorCode="+String.valueOf(errorCode));
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row23Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfoutApiStruct implements routines.system.IPersistableRow<copyOfoutApiStruct> {
    final static byte[] commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI = new byte[0];
    static byte[] commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[0];

	
			    public routines.system.Document body;

				public routines.system.Document getBody () {
					return this.body;
				}
				
			    public String string;

				public String getString () {
					return this.string;
				}
				
			    public Integer statusCode;

				public Integer getStatusCode () {
					return this.statusCode;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length) {
				if(length < 1024 && commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length == 0) {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[1024];
				} else {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length);
			strReturn = new String(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI) {

        	try {

        		int length = 0;
		
						this.body = (routines.system.Document) dis.readObject();
					
					this.string = readString(dis);
					
						this.statusCode = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Document
				
       			    	dos.writeObject(this.body);
					
					// String
				
						writeString(this.string,dos);
					
					// Integer
				
						writeInteger(this.statusCode,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("body="+String.valueOf(body));
		sb.append(",string="+string);
		sb.append(",statusCode="+String.valueOf(statusCode));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfoutApiStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfoutputEStruct implements routines.system.IPersistableRow<copyOfoutputEStruct> {
    final static byte[] commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI = new byte[0];
    static byte[] commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[0];

	
			    public String E;

				public String getE () {
					return this.E;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length) {
				if(length < 1024 && commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length == 0) {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[1024];
				} else {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length);
			strReturn = new String(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI) {

        	try {

        		int length = 0;
		
					this.E = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.E,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("E="+E);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfoutputEStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row21Struct implements routines.system.IPersistableRow<row21Struct> {
    final static byte[] commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI = new byte[0];
    static byte[] commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[0];

	
			    public String E;

				public String getE () {
					return this.E;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length) {
				if(length < 1024 && commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length == 0) {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[1024];
				} else {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length);
			strReturn = new String(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI) {

        	try {

        		int length = 0;
		
					this.E = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.E,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("E="+E);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row21Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI = new byte[0];
    static byte[] commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[0];

	
			    public routines.system.Document body;

				public routines.system.Document getBody () {
					return this.body;
				}
				
			    public String string;

				public String getString () {
					return this.string;
				}
				
			    public Integer statusCode;

				public Integer getStatusCode () {
					return this.statusCode;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length) {
				if(length < 1024 && commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length == 0) {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[1024];
				} else {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length);
			strReturn = new String(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI) {

        	try {

        		int length = 0;
		
						this.body = (routines.system.Document) dis.readObject();
					
					this.string = readString(dis);
					
						this.statusCode = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Document
				
       			    	dos.writeObject(this.body);
					
					// String
				
						writeString(this.string,dos);
					
					// Integer
				
						writeInteger(this.statusCode,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("body="+String.valueOf(body));
		sb.append(",string="+string);
		sb.append(",statusCode="+String.valueOf(statusCode));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI = new byte[0];
    static byte[] commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[0];

	
			    public Integer errorCode;

				public Integer getErrorCode () {
					return this.errorCode;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length) {
				if(length < 1024 && commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length == 0) {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[1024];
				} else {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length);
			strReturn = new String(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI) {

        	try {

        		int length = 0;
		
						this.errorCode = readInteger(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.errorCode,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("errorCode="+String.valueOf(errorCode));
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class outApiStruct implements routines.system.IPersistableRow<outApiStruct> {
    final static byte[] commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI = new byte[0];
    static byte[] commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[0];

	
			    public routines.system.Document body;

				public routines.system.Document getBody () {
					return this.body;
				}
				
			    public String string;

				public String getString () {
					return this.string;
				}
				
			    public Integer statusCode;

				public Integer getStatusCode () {
					return this.statusCode;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length) {
				if(length < 1024 && commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length == 0) {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[1024];
				} else {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length);
			strReturn = new String(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI) {

        	try {

        		int length = 0;
		
						this.body = (routines.system.Document) dis.readObject();
					
					this.string = readString(dis);
					
						this.statusCode = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Document
				
       			    	dos.writeObject(this.body);
					
					// String
				
						writeString(this.string,dos);
					
					// Integer
				
						writeInteger(this.statusCode,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("body="+String.valueOf(body));
		sb.append(",string="+string);
		sb.append(",statusCode="+String.valueOf(statusCode));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(outApiStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class outputEStruct implements routines.system.IPersistableRow<outputEStruct> {
    final static byte[] commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI = new byte[0];
    static byte[] commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[0];

	
			    public String E;

				public String getE () {
					return this.E;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length) {
				if(length < 1024 && commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length == 0) {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[1024];
				} else {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length);
			strReturn = new String(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI) {

        	try {

        		int length = 0;
		
					this.E = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.E,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("E="+E);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(outputEStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI = new byte[0];
    static byte[] commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[0];

	
			    public String E;

				public String getE () {
					return this.E;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length) {
				if(length < 1024 && commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length == 0) {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[1024];
				} else {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length);
			strReturn = new String(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI) {

        	try {

        		int length = 0;
		
					this.E = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.E,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("E="+E);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out4Struct implements routines.system.IPersistableRow<out4Struct> {
    final static byte[] commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI = new byte[0];
    static byte[] commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[0];

	
			    public String E;

				public String getE () {
					return this.E;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length) {
				if(length < 1024 && commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length == 0) {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[1024];
				} else {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length);
			strReturn = new String(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI) {

        	try {

        		int length = 0;
		
					this.E = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.E,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("E="+E);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out7Struct implements routines.system.IPersistableRow<out7Struct> {
    final static byte[] commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI = new byte[0];
    static byte[] commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[0];

	
			    public String E;

				public String getE () {
					return this.E;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length) {
				if(length < 1024 && commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length == 0) {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[1024];
				} else {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length);
			strReturn = new String(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI) {

        	try {

        		int length = 0;
		
					this.E = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.E,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("E="+E);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI = new byte[0];
    static byte[] commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[0];

	
			    public String E;

				public String getE () {
					return this.E;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length) {
				if(length < 1024 && commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length == 0) {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[1024];
				} else {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length);
			strReturn = new String(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI) {

        	try {

        		int length = 0;
		
					this.E = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.E,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("E="+E);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI = new byte[0];
    static byte[] commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[0];

	
			    public String E;

				public String getE () {
					return this.E;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length) {
				if(length < 1024 && commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length == 0) {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[1024];
				} else {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length);
			strReturn = new String(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI) {

        	try {

        		int length = 0;
		
					this.E = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.E,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("E="+E);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tWriteJSONField_2_InProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWriteJSONField_2_In_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();
row2Struct row3 = row2;
out4Struct out4 = new out4Struct();
out4Struct row4 = out4;
outApiStruct outApi = new outApiStruct();
row7Struct row7 = new row7Struct();
row8Struct row8 = new row8Struct();
outputEStruct outputE = new outputEStruct();
out7Struct out7 = new out7Struct();
out7Struct row21 = out7;
copyOfoutApiStruct copyOfoutApi = new copyOfoutApiStruct();
row22Struct row22 = new row22Struct();
row23Struct row23 = new row23Struct();
copyOfoutputEStruct copyOfoutputE = new copyOfoutputEStruct();









	
	/**
	 * [tLogRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_3", false);
		start_Hash.put("tLogRow_3", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7");
					}
				
		int tos_count_tLogRow_3 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_3 = ";";
		java.io.PrintStream consoleOut_tLogRow_3 = null;	

 		StringBuilder strBuffer_tLogRow_3 = null;
		int nb_line_tLogRow_3 = 0;
///////////////////////    			



 



/**
 * [tLogRow_3 begin ] stop
 */




	
	/**
	 * [tLogRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_2", false);
		start_Hash.put("tLogRow_2", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tLogRow_2 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_2 = "|";
		java.io.PrintStream consoleOut_tLogRow_2 = null;	

 		StringBuilder strBuffer_tLogRow_2 = null;
		int nb_line_tLogRow_2 = 0;
///////////////////////    			



 



/**
 * [tLogRow_2 begin ] stop
 */



	
	/**
	 * [tRESTClient_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tRESTClient_5", false);
		start_Hash.put("tRESTClient_5", System.currentTimeMillis());
		
	
	currentComponent="tRESTClient_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"outApi");
					}
				
		int tos_count_tRESTClient_5 = 0;
		

 



/**
 * [tRESTClient_5 begin ] stop
 */




	
	/**
	 * [tLogRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_1", false);
		start_Hash.put("tLogRow_1", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"outputE");
					}
				
		int tos_count_tLogRow_1 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_1 = ";";
		java.io.PrintStream consoleOut_tLogRow_1 = null;	

 		StringBuilder strBuffer_tLogRow_1 = null;
		int nb_line_tLogRow_1 = 0;
///////////////////////    			



 



/**
 * [tLogRow_1 begin ] stop
 */



	
	/**
	 * [tMap_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_5", false);
		start_Hash.put("tMap_5", System.currentTimeMillis());
		
	
	currentComponent="tMap_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tMap_5 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_5__Struct  {
	String var1;
	String var2;
}
Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
outApiStruct outApi_tmp = new outApiStruct();
outputEStruct outputE_tmp = new outputEStruct();
// ###############################

        
        



        









 



/**
 * [tMap_5 begin ] stop
 */



	
	/**
	 * [tFileOutputJSON_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputJSON_2", false);
		start_Hash.put("tFileOutputJSON_2", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputJSON_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out4");
					}
				
		int tos_count_tFileOutputJSON_2 = 0;
		
int nb_line_tFileOutputJSON_2 = 0;
java.io.File file_tFileOutputJSON_2 = new java.io.File("C:/public/_00_documents/05_users/Olfa Benzid/outputJsonFileV2.json");
java.io.File dir_tFileOutputJSON_2 = file_tFileOutputJSON_2.getParentFile();
	if(dir_tFileOutputJSON_2!=null && !dir_tFileOutputJSON_2.exists()){
		dir_tFileOutputJSON_2.mkdirs();
	}
java.io.PrintWriter outtFileOutputJSON_2 = new java.io.PrintWriter(new java.io.BufferedWriter(new java.io.FileWriter("C:/public/_00_documents/05_users/Olfa Benzid/outputJsonFileV2.json")));
	outtFileOutputJSON_2.append("{\"" + "requestWrapperE" + "\":[");
boolean isFirst_tFileOutputJSON_2 = true;
 



/**
 * [tFileOutputJSON_2 begin ] stop
 */







	
	/**
	 * [tLogRow_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_8", false);
		start_Hash.put("tLogRow_8", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_8";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row22");
					}
				
		int tos_count_tLogRow_8 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_8 = ";";
		java.io.PrintStream consoleOut_tLogRow_8 = null;	

 		StringBuilder strBuffer_tLogRow_8 = null;
		int nb_line_tLogRow_8 = 0;
///////////////////////    			



 



/**
 * [tLogRow_8 begin ] stop
 */




	
	/**
	 * [tLogRow_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_9", false);
		start_Hash.put("tLogRow_9", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_9";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row23");
					}
				
		int tos_count_tLogRow_9 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_9 = "|";
		java.io.PrintStream consoleOut_tLogRow_9 = null;	

 		StringBuilder strBuffer_tLogRow_9 = null;
		int nb_line_tLogRow_9 = 0;
///////////////////////    			



 



/**
 * [tLogRow_9 begin ] stop
 */



	
	/**
	 * [tRESTClient_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tRESTClient_2", false);
		start_Hash.put("tRESTClient_2", System.currentTimeMillis());
		
	
	currentComponent="tRESTClient_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfoutApi");
					}
				
		int tos_count_tRESTClient_2 = 0;
		

 



/**
 * [tRESTClient_2 begin ] stop
 */




	
	/**
	 * [tLogRow_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_5", false);
		start_Hash.put("tLogRow_5", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfoutputE");
					}
				
		int tos_count_tLogRow_5 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_5 = ";";
		java.io.PrintStream consoleOut_tLogRow_5 = null;	

 		StringBuilder strBuffer_tLogRow_5 = null;
		int nb_line_tLogRow_5 = 0;
///////////////////////    			



 



/**
 * [tLogRow_5 begin ] stop
 */



	
	/**
	 * [tMap_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_9", false);
		start_Hash.put("tMap_9", System.currentTimeMillis());
		
	
	currentComponent="tMap_9";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row21");
					}
				
		int tos_count_tMap_9 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_9__Struct  {
	String var1;
	String var2;
}
Var__tMap_9__Struct Var__tMap_9 = new Var__tMap_9__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfoutApiStruct copyOfoutApi_tmp = new copyOfoutApiStruct();
copyOfoutputEStruct copyOfoutputE_tmp = new copyOfoutputEStruct();
// ###############################

        
        



        









 



/**
 * [tMap_9 begin ] stop
 */



	
	/**
	 * [tFileOutputJSON_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputJSON_1", false);
		start_Hash.put("tFileOutputJSON_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputJSON_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out7");
					}
				
		int tos_count_tFileOutputJSON_1 = 0;
		
int nb_line_tFileOutputJSON_1 = 0;
java.io.File file_tFileOutputJSON_1 = new java.io.File("C:/public/_00_documents/05_users/Olfa Benzid/outputJsonFileV2.json");
java.io.File dir_tFileOutputJSON_1 = file_tFileOutputJSON_1.getParentFile();
	if(dir_tFileOutputJSON_1!=null && !dir_tFileOutputJSON_1.exists()){
		dir_tFileOutputJSON_1.mkdirs();
	}
java.io.PrintWriter outtFileOutputJSON_1 = new java.io.PrintWriter(new java.io.BufferedWriter(new java.io.FileWriter("C:/public/_00_documents/05_users/Olfa Benzid/outputJsonFileV2.json")));
	outtFileOutputJSON_1.append("{\"" + "requestWrapperE" + "\":[");
boolean isFirst_tFileOutputJSON_1 = true;
 



/**
 * [tFileOutputJSON_1 begin ] stop
 */



	
	/**
	 * [tMap_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_10", false);
		start_Hash.put("tMap_10", System.currentTimeMillis());
		
	
	currentComponent="tMap_10";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tMap_10 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_10__Struct  {
	int var1;
}
Var__tMap_10__Struct Var__tMap_10 = new Var__tMap_10__Struct();
// ###############################

// ###############################
// # Outputs initialization
out4Struct out4_tmp = new out4Struct();
out7Struct out7_tmp = new out7Struct();
// ###############################

        
        



        









 



/**
 * [tMap_10 begin ] stop
 */



	
	/**
	 * [tLogRow_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_4", false);
		start_Hash.put("tLogRow_4", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tLogRow_4 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_4 = ";";
		java.io.PrintStream consoleOut_tLogRow_4 = null;	

 		StringBuilder strBuffer_tLogRow_4 = null;
		int nb_line_tLogRow_4 = 0;
///////////////////////    			



 



/**
 * [tLogRow_4 begin ] stop
 */



	
	/**
	 * [tWriteJSONField_2_In begin ] start
	 */

	

	
		
		ok_Hash.put("tWriteJSONField_2_In", false);
		start_Hash.put("tWriteJSONField_2_In", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tWriteJSONField_2";
	
	currentComponent="tWriteJSONField_2_In";

	
		int tos_count_tWriteJSONField_2_In = 0;
		

				int nb_line_tWriteJSONField_2_In = 0;
				net.sf.json.xml.XMLSerializer xmlSerializer_tWriteJSONField_2_In = new net.sf.json.xml.XMLSerializer(); 
			    xmlSerializer_tWriteJSONField_2_In.clearNamespaces();
			    xmlSerializer_tWriteJSONField_2_In.setSkipNamespaces(true);
			    xmlSerializer_tWriteJSONField_2_In.setForceTopLevelObject(false);
				xmlSerializer_tWriteJSONField_2_In.setUseEmptyStrings(false);
				
					   java.util.Queue<row2Struct> queue_tWriteJSONField_2_In = (java.util.Queue<row2Struct>) globalMap.get("queue_tWriteJSONField_2_In");
					
				String readFinishMarkWithPipeId_tWriteJSONField_2_In = "tWriteJSONField_2_In_FINISH"+(queue_tWriteJSONField_2_In==null?"":queue_tWriteJSONField_2_In.hashCode());
				String str_tWriteJSONField_2_In = null;
				
				while(!globalMap.containsKey(readFinishMarkWithPipeId_tWriteJSONField_2_In) || !queue_tWriteJSONField_2_In.isEmpty()) {
					if (!queue_tWriteJSONField_2_In.isEmpty()) {
			

 



/**
 * [tWriteJSONField_2_In begin ] stop
 */
	
	/**
	 * [tWriteJSONField_2_In main ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_2";
	
	currentComponent="tWriteJSONField_2_In";

	

                    row2Struct result_tWriteJSONField_2_In = queue_tWriteJSONField_2_In.poll();
                    str_tWriteJSONField_2_In = result_tWriteJSONField_2_In.E;
                                row2.E = result_tWriteJSONField_2_In.E;
        //Convert XML to JSON
        net.sf.json.JSON json_tWriteJSONField_2_In = xmlSerializer_tWriteJSONField_2_In.read(str_tWriteJSONField_2_In);
        row2.E = json_tWriteJSONField_2_In.toString();
    
        nb_line_tWriteJSONField_2_In++;

 


	tos_count_tWriteJSONField_2_In++;

/**
 * [tWriteJSONField_2_In main ] stop
 */
	
	/**
	 * [tWriteJSONField_2_In process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_2";
	
	currentComponent="tWriteJSONField_2_In";

	

 



/**
 * [tWriteJSONField_2_In process_data_begin ] stop
 */

	
	/**
	 * [tLogRow_4 main ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row2");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_4 = new StringBuilder();




   				
	    		if(row2.E != null) { //              
                    							
       
				strBuffer_tLogRow_4.append(
				                String.valueOf(row2.E)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_4 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_4 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_4);
                    }
                    consoleOut_tLogRow_4.println(strBuffer_tLogRow_4.toString());
                    consoleOut_tLogRow_4.flush();
                    nb_line_tLogRow_4++;
//////

//////                    
                    
///////////////////////    			

 
     row3 = row2;


	tos_count_tLogRow_4++;

/**
 * [tLogRow_4 main ] stop
 */
	
	/**
	 * [tLogRow_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	

 



/**
 * [tLogRow_4 process_data_begin ] stop
 */

	
	/**
	 * [tMap_10 main ] start
	 */

	

	
	
	currentComponent="tMap_10";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row3");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_10 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_10 = false;
		  boolean mainRowRejected_tMap_10 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_10__Struct Var = Var__tMap_10;
Var.var1 = (Integer)(globalMap.get("tFileOutputDelimited_1_NB_LINE"));// ###############################
        // ###############################
        // # Output tables

out4 = null;
out7 = null;


// # Output table : 'out4'
// # Filter conditions 
if( 

 Var.var1 ==1 

 ) {
out4_tmp.E = StringHandling.CHANGE(StringHandling.CHANGE(row3.E , "}}}", "}]}}") , "\\{\\\"LineNumber", "[{\"LineNumber"); ;
out4 = out4_tmp;
} // closing filter/reject

// # Output table : 'out7'
// # Filter conditions 
if( 

 Var.var1 >1 

 ) {
out7_tmp.E = row3.E ;
out7 = out7_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_10 = false;










 


	tos_count_tMap_10++;

/**
 * [tMap_10 main ] stop
 */
	
	/**
	 * [tMap_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_10";

	

 



/**
 * [tMap_10 process_data_begin ] stop
 */
// Start of branch "out4"
if(out4 != null) { 



	
	/**
	 * [tFileOutputJSON_2 main ] start
	 */

	

	
	
	currentComponent="tFileOutputJSON_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out4");
					}
					


org.json.simple.JSONObject jsonRowtFileOutputJSON_2 = new org.json.simple.JSONObject();
			    	if(out4.E != null){
			    
					jsonRowtFileOutputJSON_2.put("E", out4.E);
				
					}else{
						jsonRowtFileOutputJSON_2.put("E", null);
					}
				

if(!isFirst_tFileOutputJSON_2){
	outtFileOutputJSON_2.append(",");
}
isFirst_tFileOutputJSON_2 = false;
outtFileOutputJSON_2.append(jsonRowtFileOutputJSON_2.toJSONString());
nb_line_tFileOutputJSON_2++;

 
     row4 = out4;


	tos_count_tFileOutputJSON_2++;

/**
 * [tFileOutputJSON_2 main ] stop
 */
	
	/**
	 * [tFileOutputJSON_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputJSON_2";

	

 



/**
 * [tFileOutputJSON_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_5 main ] start
	 */

	

	
	
	currentComponent="tMap_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row4");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_5 = false;
		  boolean mainRowRejected_tMap_5 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_5__Struct Var = Var__tMap_5;
Var.var1 = new String("{\"requestWrapperE\":{\"E\":{\"NumberOfLines\":\"41\",\"FileName\":\"SPORTSDIRECT_20201201-115346-41951112.dat\",\"Customer_EDI_ID\":\"5051538000005\",\"Customer_Order_Number\":\"41951112\",\"Document_Type\":\"Pre Order\",\"Ship_To\":\"5051538000074\",\"Invoice_To\":\"5051538000005\",\"Order_By\":\"5051538000005\",\"Vendor\":\"5051538000074\",\"OrderDate\":\"01-12-2020\",\"Delivery_Date\":\"01-03-2021\",\"Season\":\"SP21\",\"Reference_Customer_Order\":\"ReferenceCustomerOrder\",\"Comment_1\":\"Comment_1\",\"Comment_2\":\"Comment_2\",\"Order_By_Name\":\"SPORTSDIRECT\",\"Order_By_Address\":\"Brook Park, Meadow Lane Shirebrook, Mansfield Notts \",\"Order_By_PostalCode\":\"NG20 8RY\",\"Ship_To_Name\":\"SPORTSDIRECT MAG\",\"Ship_To_Address\":\"Brook Park, Meadow Lane Shirebrook Notts \",\"Ship_To_PostalCode\":\"NG20 8RY\",\"DepartmentNumber\":\"DepartmentNumber\",\"CustomerVendorNumber\":\"CustomerVendorNumber\",\"TransportInstructions\":\"TransportInstructions\",\"TermsofSale\":\"TermsofSale\",\"EffectiveDate\":\"2020-01-12\",\"ShipNotBeforeDate\":\"ShipNotBeforeDate\",\"ShipNoLaterDate\":\"ShipNoLaterDate\",\"CancelAfterDate\":\"CancelAfterDate\",\"Brand\":\"Nike\",\"OrderCurrency\":\"GBP\",\"L\":[{\"LineNumber\":\"1\",\"EAN\":\"0633731230134\",\"ItemDescription\":\"Nike Flc Tracksuit In00\",\"OrderedQuantity\":\"20\",\"Discount_Code\":\" \",\"NetPrice\":\"32.99\",\"OrderCurrency\":\" \",\"Size\":\"5-6 Yrs\",\"Color\":\"Navy\",\"SeasonCode\":\"SeasonCode\",\"TicketType\":\"TicketType\",\"PricatPriceCode\":\"PricatPriceCode\",\"WarehouseCode\":\"WarehouseCode\",\"UnitOfMeasure\":\"UnitOfMeasure\",\"InformationPriceE\":\"InformationPriceE\",\"InformationPriceF\":\"InformationPriceF\",\"Picture\":\"Picture\",\"SeriesNumber\":\"SeriesNumber\",\"ModelNumber\":\"ModelNumber\",\"BuyerSizeCode\":\"BuyerSizeCode\",\"VendorStyleNumber\":\"VendorStyleNumber\",\"BuyerItemNumber\":\"BuyerItemNumber\",\"CountryofOrigin\":\"CountryofOrigin\"},{\"LineNumber\":\"2\",\"EAN\":\"0633731230127\",\"ItemDescription\":\"Nike Flc Tracksuit In00\",\"OrderedQuantity\":\"20\",\"Discount_Code\":\" \",\"NetPrice\":\"32.99\",\"OrderCurrency\":\" \",\"Size\":\"4-5 Yrs\",\"Color\":\"Navy\",\"SeasonCode\":\"SeasonCode\",\"TicketType\":\"TicketType\",\"PricatPriceCode\":\"PricatPriceCode\",\"WarehouseCode\":\"WarehouseCode\",\"UnitOfMeasure\":\"UnitOfMeasure\",\"InformationPriceE\":\"InformationPriceE\",\"InformationPriceF\":\"InformationPriceF\",\"Picture\":\"Picture\",\"SeriesNumber\":\"SeriesNumber\",\"ModelNumber\":\"ModelNumber\",\"BuyerSizeCode\":\"BuyerSizeCode\",\"VendorStyleNumber\":\"VendorStyleNumber\",\"BuyerItemNumber\":\"BuyerItemNumber\",\"CountryofOrigin\":\"CountryofOrigin\"},{\"LineNumber\":\"3\",\"EAN\":\"0633731230110\",\"ItemDescription\":\"Nike Flc Tracksuit In00\",\"OrderedQuantity\":\"20\",\"Discount_Code\":\" \",\"NetPrice\":\"32.99\",\"OrderCurrency\":\" \",\"Size\":\"3-4 Yrs\",\"Color\":\"Navy\",\"SeasonCode\":\"SeasonCode\",\"TicketType\":\"TicketType\",\"PricatPriceCode\":\"PricatPriceCode\",\"WarehouseCode\":\"WarehouseCode\",\"UnitOfMeasure\":\"UnitOfMeasure\",\"InformationPriceE\":\"InformationPriceE\",\"InformationPriceF\":\"InformationPriceF\",\"Picture\":\"Picture\",\"SeriesNumber\":\"SeriesNumber\",\"ModelNumber\":\"ModelNumber\",\"BuyerSizeCode\":\"BuyerSizeCode\",\"VendorStyleNumber\":\"VendorStyleNumber\",\"BuyerItemNumber\":\"BuyerItemNumber\",\"CountryofOrigin\":\"CountryofOrigin\"},{\"LineNumber\":\"4\",\"EAN\":\"0633731230103\",\"ItemDescription\":\"Nike Flc Tracksuit In00\",\"OrderedQuantity\":\"20\",\"Discount_Code\":\" \",\"NetPrice\":\"32.99\",\"OrderCurrency\":\" \",\"Size\":\"2-3 Yrs\",\"Color\":\"Navy\",\"SeasonCode\":\"SeasonCode\",\"TicketType\":\"TicketType\",\"PricatPriceCode\":\"PricatPriceCode\",\"WarehouseCode\":\"WarehouseCode\",\"UnitOfMeasure\":\"UnitOfMeasure\",\"InformationPriceE\":\"InformationPriceE\",\"InformationPriceF\":\"InformationPriceF\",\"Picture\":\"Picture\",\"SeriesNumber\":\"SeriesNumber\",\"ModelNumber\":\"ModelNumber\",\"BuyerSizeCode\":\"BuyerSizeCode\",\"VendorStyleNumber\":\"VendorStyleNumber\",\"BuyerItemNumber\":\"BuyerItemNumber\",\"CountryofOrigin\":\"CountryofOrigin\"},{\"LineNumber\":\"5\",\"EAN\":\"0633731230141\",\"ItemDescription\":\"Nike Flc Tracksuit In00\",\"OrderedQuantity\":\"20\",\"Discount_Code\":\" \",\"NetPrice\":\"32.99\",\"OrderCurrency\":\" \",\"Size\":\"6-7 Yrs\",\"Color\":\"Navy\",\"SeasonCode\":\"SeasonCode\",\"TicketType\":\"TicketType\",\"PricatPriceCode\":\"PricatPriceCode\",\"WarehouseCode\":\"WarehouseCode\",\"UnitOfMeasure\":\"UnitOfMeasure\",\"InformationPriceE\":\"InformationPriceE\",\"InformationPriceF\":\"InformationPriceF\",\"Picture\":\"Picture\",\"SeriesNumber\":\"SeriesNumber\",\"ModelNumber\":\"ModelNumber\",\"BuyerSizeCode\":\"BuyerSizeCode\",\"VendorStyleNumber\":\"VendorStyleNumber\",\"BuyerItemNumber\":\"BuyerItemNumber\",\"CountryofOrigin\":\"CountryofOrigin\"},{\"LineNumber\":\"6\",\"EAN\":\"0633716839550\",\"ItemDescription\":\"Nike Flc Tracksuit In00\",\"OrderedQuantity\":\"20\",\"Discount_Code\":\" \",\"NetPrice\":\"32.99\",\"OrderCurrency\":\" \",\"Size\":\"3-4 Yrs\",\"Color\":\"Black\",\"SeasonCode\":\"SeasonCode\",\"TicketType\":\"TicketType\",\"PricatPriceCode\":\"PricatPriceCode\",\"WarehouseCode\":\"WarehouseCode\",\"UnitOfMeasure\":\"UnitOfMeasure\",\"InformationPriceE\":\"InformationPriceE\",\"InformationPriceF\":\"InformationPriceF\",\"Picture\":\"Picture\",\"SeriesNumber\":\"SeriesNumber\",\"ModelNumber\":\"ModelNumber\",\"BuyerSizeCode\":\"BuyerSizeCode\",\"VendorStyleNumber\":\"VendorStyleNumber\",\"BuyerItemNumber\":\"BuyerItemNumber\",\"CountryofOrigin\":\"CountryofOrigin\"},{\"LineNumber\":\"7\",\"EAN\":\"0633716839581\",\"ItemDescription\":\"Nike Flc Tracksuit In00\",\"OrderedQuantity\":\"20\",\"Discount_Code\":\" \",\"NetPrice\":\"32.99\",\"OrderCurrency\":\" \",\"Size\":\"6-7 Yrs\",\"Color\":\"Black\",\"SeasonCode\":\"SeasonCode\",\"TicketType\":\"TicketType\",\"PricatPriceCode\":\"PricatPriceCode\",\"WarehouseCode\":\"WarehouseCode\",\"UnitOfMeasure\":\"UnitOfMeasure\",\"InformationPriceE\":\"InformationPriceE\",\"InformationPriceF\":\"InformationPriceF\",\"Picture\":\"Picture\",\"SeriesNumber\":\"SeriesNumber\",\"ModelNumber\":\"ModelNumber\",\"BuyerSizeCode\":\"BuyerSizeCode\",\"VendorStyleNumber\":\"VendorStyleNumber\",\"BuyerItemNumber\":\"BuyerItemNumber\",\"CountryofOrigin\":\"CountryofOrigin\"},{\"LineNumber\":\"8\",\"EAN\":\"0633716839574\",\"ItemDescription\":\"Nike Flc Tracksuit In00\",\"OrderedQuantity\":\"20\",\"Discount_Code\":\" \",\"NetPrice\":\"32.99\",\"OrderCurrency\":\" \",\"Size\":\"5-6 Yrs\",\"Color\":\"Black\",\"SeasonCode\":\"SeasonCode\",\"TicketType\":\"TicketType\",\"PricatPriceCode\":\"PricatPriceCode\",\"WarehouseCode\":\"WarehouseCode\",\"UnitOfMeasure\":\"UnitOfMeasure\",\"InformationPriceE\":\"InformationPriceE\",\"InformationPriceF\":\"InformationPriceF\",\"Picture\":\"Picture\",\"SeriesNumber\":\"SeriesNumber\",\"ModelNumber\":\"ModelNumber\",\"BuyerSizeCode\":\"BuyerSizeCode\",\"VendorStyleNumber\":\"VendorStyleNumber\",\"BuyerItemNumber\":\"BuyerItemNumber\",\"CountryofOrigin\":\"CountryofOrigin\"},{\"LineNumber\":\"9\",\"EAN\":\"0633716839567\",\"ItemDescription\":\"Nike Flc Tracksuit In00\",\"OrderedQuantity\":\"20\",\"Discount_Code\":\" \",\"NetPrice\":\"32.99\",\"OrderCurrency\":\" \",\"Size\":\"4-5 Yrs\",\"Color\":\"Black\",\"SeasonCode\":\"SeasonCode\",\"TicketType\":\"TicketType\",\"PricatPriceCode\":\"PricatPriceCode\",\"WarehouseCode\":\"WarehouseCode\",\"UnitOfMeasure\":\"UnitOfMeasure\",\"InformationPriceE\":\"InformationPriceE\",\"InformationPriceF\":\"InformationPriceF\",\"Picture\":\"Picture\",\"SeriesNumber\":\"SeriesNumber\",\"ModelNumber\":\"ModelNumber\",\"BuyerSizeCode\":\"BuyerSizeCode\",\"VendorStyleNumber\":\"VendorStyleNumber\",\"BuyerItemNumber\":\"BuyerItemNumber\",\"CountryofOrigin\":\"CountryofOrigin\"},{\"LineNumber\":\"10\",\"EAN\":\"0633716839543\",\"ItemDescription\":\"Nike Flc Tracksuit In00\",\"OrderedQuantity\":\"20\",\"Discount_Code\":\" \",\"NetPrice\":\"32.99\",\"OrderCurrency\":\" \",\"Size\":\"2-3 Yrs\",\"Color\":\"Black\",\"SeasonCode\":\"SeasonCode\",\"TicketType\":\"TicketType\",\"PricatPriceCode\":\"PricatPriceCode\",\"WarehouseCode\":\"WarehouseCode\",\"UnitOfMeasure\":\"UnitOfMeasure\",\"InformationPriceE\":\"InformationPriceE\",\"InformationPriceF\":\"InformationPriceF\",\"Picture\":\"Picture\",\"SeriesNumber\":\"SeriesNumber\",\"ModelNumber\":\"ModelNumber\",\"BuyerSizeCode\":\"BuyerSizeCode\",\"VendorStyleNumber\":\"VendorStyleNumber\",\"BuyerItemNumber\":\"BuyerItemNumber\",\"CountryofOrigin\":\"CountryofOrigin\"},{\"LineNumber\":\"11\",\"EAN\":\"0009328374350\",\"ItemDescription\":\"Nike Flc Tracksuit Bb00\",\"OrderedQuantity\":\"20\",\"Discount_Code\":\" \",\"NetPrice\":\"27.99\",\"OrderCurrency\":\" \",\"Size\":\"18M\",\"Color\":\"Grey\",\"SeasonCode\":\"SeasonCode\",\"TicketType\":\"TicketType\",\"PricatPriceCode\":\"PricatPriceCode\",\"WarehouseCode\":\"WarehouseCode\",\"UnitOfMeasure\":\"UnitOfMeasure\",\"InformationPriceE\":\"InformationPriceE\",\"InformationPriceF\":\"InformationPriceF\",\"Picture\":\"Picture\",\"SeriesNumber\":\"SeriesNumber\",\"ModelNumber\":\"ModelNumber\",\"BuyerSizeCode\":\"BuyerSizeCode\",\"VendorStyleNumber\":\"VendorStyleNumber\",\"BuyerItemNumber\":\"BuyerItemNumber\",\"CountryofOrigin\":\"CountryofOrigin\"},{\"LineNumber\":\"12\",\"EAN\":\"0009328374367\",\"ItemDescription\":\"Nike Flc Tracksuit Bb00\",\"OrderedQuantity\":\"20\",\"Discount_Code\":\" \",\"NetPrice\":\"27.99\",\"OrderCurrency\":\" \",\"Size\":\"24M\",\"Color\":\"Grey\",\"SeasonCode\":\"SeasonCode\",\"TicketType\":\"TicketType\",\"PricatPriceCode\":\"PricatPriceCode\",\"WarehouseCode\":\"WarehouseCode\",\"UnitOfMeasure\":\"UnitOfMeasure\",\"InformationPriceE\":\"InformationPriceE\",\"InformationPriceF\":\"InformationPriceF\",\"Picture\":\"Picture\",\"SeriesNumber\":\"SeriesNumber\",\"ModelNumber\":\"ModelNumber\",\"BuyerSizeCode\":\"BuyerSizeCode\",\"VendorStyleNumber\":\"VendorStyleNumber\",\"BuyerItemNumber\":\"BuyerItemNumber\",\"CountryofOrigin\":\"CountryofOrigin\"},{\"LineNumber\":\"13\",\"EAN\":\"0009328374343\",\"ItemDescription\":\"Nike Flc Tracksuit Bb00\",\"OrderedQuantity\":\"20\",\"Discount_Code\":\" \",\"NetPrice\":\"27.99\",\"OrderCurrency\":\" \",\"Size\":\"12M\",\"Color\":\"Grey\",\"SeasonCode\":\"SeasonCode\",\"TicketType\":\"TicketType\",\"PricatPriceCode\":\"PricatPriceCode\",\"WarehouseCode\":\"WarehouseCode\",\"UnitOfMeasure\":\"UnitOfMeasure\",\"InformationPriceE\":\"InformationPriceE\",\"InformationPriceF\":\"InformationPriceF\",\"Picture\":\"Picture\",\"SeriesNumber\":\"SeriesNumber\",\"ModelNumber\":\"ModelNumber\",\"BuyerSizeCode\":\"BuyerSizeCode\",\"VendorStyleNumber\":\"VendorStyleNumber\",\"BuyerItemNumber\":\"BuyerItemNumber\",\"CountryofOrigin\":\"CountryofOrigin\"},{\"LineNumber\":\"14\",\"EAN\":\"0009328374312\",\"ItemDescription\":\"Nike Flc Tracksuit Bb00\",\"OrderedQuantity\":\"20\",\"Discount_Code\":\" \",\"NetPrice\":\"27.99\",\"OrderCurrency\":\" \",\"Size\":\"18M\",\"Color\":\"Black\",\"SeasonCode\":\"SeasonCode\",\"TicketType\":\"TicketType\",\"PricatPriceCode\":\"PricatPriceCode\",\"WarehouseCode\":\"WarehouseCode\",\"UnitOfMeasure\":\"UnitOfMeasure\",\"InformationPriceE\":\"InformationPriceE\",\"InformationPriceF\":\"InformationPriceF\",\"Picture\":\"Picture\",\"SeriesNumber\":\"SeriesNumber\",\"ModelNumber\":\"ModelNumber\",\"BuyerSizeCode\":\"BuyerSizeCode\",\"VendorStyleNumber\":\"VendorStyleNumber\",\"BuyerItemNumber\":\"BuyerItemNumber\",\"CountryofOrigin\":\"CountryofOrigin\"},{\"LineNumber\":\"15\",\"EAN\":\"0009328374329\",\"ItemDescription\":\"Nike Flc Tracksuit Bb00\",\"OrderedQuantity\":\"20\",\"Discount_Code\":\" \",\"NetPrice\":\"27.99\",\"OrderCurrency\":\" \",\"Size\":\"24M\",\"Color\":\"Black\",\"SeasonCode\":\"SeasonCode\",\"TicketType\":\"TicketType\",\"PricatPriceCode\":\"PricatPriceCode\",\"WarehouseCode\":\"WarehouseCode\",\"UnitOfMeasure\":\"UnitOfMeasure\",\"InformationPriceE\":\"InformationPriceE\",\"InformationPriceF\":\"InformationPriceF\",\"Picture\":\"Picture\",\"SeriesNumber\":\"SeriesNumber\",\"ModelNumber\":\"ModelNumber\",\"BuyerSizeCode\":\"BuyerSizeCode\",\"VendorStyleNumber\":\"VendorStyleNumber\",\"BuyerItemNumber\":\"BuyerItemNumber\",\"CountryofOrigin\":\"CountryofOrigin\"},{\"LineNumber\":\"16\",\"EAN\":\"0009328374305\",\"ItemDescription\":\"Nike Flc Tracksuit Bb00\",\"OrderedQuantity\":\"20\",\"Discount_Code\":\" \",\"NetPrice\":\"27.99\",\"OrderCurrency\":\" \",\"Size\":\"12M\",\"Color\":\"Black\",\"SeasonCode\":\"SeasonCode\",\"TicketType\":\"TicketType\",\"PricatPriceCode\":\"PricatPriceCode\",\"WarehouseCode\":\"WarehouseCode\",\"UnitOfMeasure\":\"UnitOfMeasure\",\"InformationPriceE\":\"InformationPriceE\",\"InformationPriceF\":\"InformationPriceF\",\"Picture\":\"Picture\",\"SeriesNumber\":\"SeriesNumber\",\"ModelNumber\":\"ModelNumber\",\"BuyerSizeCode\":\"BuyerSizeCode\",\"VendorStyleNumber\":\"VendorStyleNumber\",\"BuyerItemNumber\":\"BuyerItemNumber\",\"CountryofOrigin\":\"CountryofOrigin\"},{\"LineNumber\":\"17\",\"EAN\":\"0677838106114\",\"ItemDescription\":\"Jordan HBR Gymsack JB13\",\"OrderedQuantity\":\"20\",\"Discount_Code\":\" \",\"NetPrice\":\"17.99\",\"OrderCurrency\":\" \",\"Size\":\"One Size\",\"Color\":\"Black\",\"SeasonCode\":\"SeasonCode\",\"TicketType\":\"TicketType\",\"PricatPriceCode\":\"PricatPriceCode\",\"WarehouseCode\":\"WarehouseCode\",\"UnitOfMeasure\":\"UnitOfMeasure\",\"InformationPriceE\":\"InformationPriceE\",\"InformationPriceF\":\"InformationPriceF\",\"Picture\":\"Picture\",\"SeriesNumber\":\"SeriesNumber\",\"ModelNumber\":\"ModelNumber\",\"BuyerSizeCode\":\"BuyerSizeCode\",\"VendorStyleNumber\":\"VendorStyleNumber\",\"BuyerItemNumber\":\"BuyerItemNumber\",\"CountryofOrigin\":\"CountryofOrigin\"},{\"LineNumber\":\"18\",\"EAN\":\"0617847967528\",\"ItemDescription\":\"Jordan Snapback JB12\",\"OrderedQuantity\":\"20\",\"Discount_Code\":\" \",\"NetPrice\":\"16.99\",\"OrderCurrency\":\" \",\"Size\":\"Junior\",\"Color\":\"BlackRed\",\"SeasonCode\":\"SeasonCode\",\"TicketType\":\"TicketType\",\"PricatPriceCode\":\"PricatPriceCode\",\"WarehouseCode\":\"WarehouseCode\",\"UnitOfMeasure\":\"UnitOfMeasure\",\"InformationPriceE\":\"InformationPriceE\",\"InformationPriceF\":\"InformationPriceF\",\"Picture\":\"Picture\",\"SeriesNumber\":\"SeriesNumber\",\"ModelNumber\":\"ModelNumber\",\"BuyerSizeCode\":\"BuyerSizeCode\",\"VendorStyleNumber\":\"VendorStyleNumber\",\"BuyerItemNumber\":\"BuyerItemNumber\",\"CountryofOrigin\":\"CountryofOrigin\"},{\"LineNumber\":\"19\",\"EAN\":\"0677838787740\",\"ItemDescription\":\"Jordan HBR Cap JB12\",\"OrderedQuantity\":\"20\",\"Discount_Code\":\" \",\"NetPrice\":\"16.99\",\"OrderCurrency\":\" \",\"Size\":\"Junior\",\"Color\":\"Black\",\"SeasonCode\":\"SeasonCode\",\"TicketType\":\"TicketType\",\"PricatPriceCode\":\"PricatPriceCode\",\"WarehouseCode\":\"WarehouseCode\",\"UnitOfMeasure\":\"UnitOfMeasure\",\"InformationPriceE\":\"InformationPriceE\",\"InformationPriceF\":\"InformationPriceF\",\"Picture\":\"Picture\",\"SeriesNumber\":\"SeriesNumber\",\"ModelNumber\":\"ModelNumber\",\"BuyerSizeCode\":\"BuyerSizeCode\",\"VendorStyleNumber\":\"VendorStyleNumber\",\"BuyerItemNumber\":\"BuyerItemNumber\",\"CountryofOrigin\":\"CountryofOrigin\"},{\"LineNumber\":\"20\",\"EAN\":\"0009328222323\",\"ItemDescription\":\"Jordan Dri T-Shirt JB00\",\"OrderedQuantity\":\"20\",\"Discount_Code\":\" \",\"NetPrice\":\"17.99\",\"OrderCurrency\":\" \",\"Size\":\"13 (XL)\",\"Color\":\"Black\",\"SeasonCode\":\"SeasonCode\",\"TicketType\":\"TicketType\",\"PricatPriceCode\":\"PricatPriceCode\",\"WarehouseCode\":\"WarehouseCode\",\"UnitOfMeasure\":\"UnitOfMeasure\",\"InformationPriceE\":\"InformationPriceE\",\"InformationPriceF\":\"InformationPriceF\",\"Picture\":\"Picture\",\"SeriesNumber\":\"SeriesNumber\",\"ModelNumber\":\"ModelNumber\",\"BuyerSizeCode\":\"BuyerSizeCode\",\"VendorStyleNumber\":\"VendorStyleNumber\",\"BuyerItemNumber\":\"BuyerItemNumber\",\"CountryofOrigin\":\"CountryofOrigin\"},{\"LineNumber\":\"21\",\"EAN\":\"0009328222316\",\"ItemDescription\":\"Jordan Dri T-Shirt JB00\",\"OrderedQuantity\":\"20\",\"Discount_Code\":\" \",\"NetPrice\":\"17.99\",\"OrderCurrency\":\" \",\"Size\":\"11-12 (L)\",\"Color\":\"Black\",\"SeasonCode\":\"SeasonCode\",\"TicketType\":\"TicketType\",\"PricatPriceCode\":\"PricatPriceCode\",\"WarehouseCode\":\"WarehouseCode\",\"UnitOfMeasure\":\"UnitOfMeasure\",\"InformationPriceE\":\"InformationPriceE\",\"InformationPriceF\":\"InformationPriceF\",\"Picture\":\"Picture\",\"SeriesNumber\":\"SeriesNumber\",\"ModelNumber\":\"ModelNumber\",\"BuyerSizeCode\":\"BuyerSizeCode\",\"VendorStyleNumber\":\"VendorStyleNumber\",\"BuyerItemNumber\":\"BuyerItemNumber\",\"CountryofOrigin\":\"CountryofOrigin\"},{\"LineNumber\":\"22\",\"EAN\":\"0009328222309\",\"ItemDescription\":\"Jordan Dri T-Shirt JB00\",\"OrderedQuantity\":\"20\",\"Discount_Code\":\" \",\"NetPrice\":\"17.99\",\"OrderCurrency\":\" \",\"Size\":\"9-10 (M)\",\"Color\":\"Black\",\"SeasonCode\":\"SeasonCode\",\"TicketType\":\"TicketType\",\"PricatPriceCode\":\"PricatPriceCode\",\"WarehouseCode\":\"WarehouseCode\",\"UnitOfMeasure\":\"UnitOfMeasure\",\"InformationPriceE\":\"InformationPriceE\",\"InformationPriceF\":\"InformationPriceF\",\"Picture\":\"Picture\",\"SeriesNumber\":\"SeriesNumber\",\"ModelNumber\":\"ModelNumber\",\"BuyerSizeCode\":\"BuyerSizeCode\",\"VendorStyleNumber\":\"VendorStyleNumber\",\"BuyerItemNumber\":\"BuyerItemNumber\",\"CountryofOrigin\":\"CountryofOrigin\"},{\"LineNumber\":\"23\",\"EAN\":\"0009328222293\",\"ItemDescription\":\"Jordan Dri T-Shirt JB00\",\"OrderedQuantity\":\"20\",\"Discount_Code\":\" \",\"NetPrice\":\"17.99\",\"OrderCurrency\":\" \",\"Size\":\"7-8 (S)\",\"Color\":\"Black\",\"SeasonCode\":\"SeasonCode\",\"TicketType\":\"TicketType\",\"PricatPriceCode\":\"PricatPriceCode\",\"WarehouseCode\":\"WarehouseCode\",\"UnitOfMeasure\":\"UnitOfMeasure\",\"InformationPriceE\":\"InformationPriceE\",\"InformationPriceF\":\"InformationPriceF\",\"Picture\":\"Picture\",\"SeriesNumber\":\"SeriesNumber\",\"ModelNumber\":\"ModelNumber\",\"BuyerSizeCode\":\"BuyerSizeCode\",\"VendorStyleNumber\":\"VendorStyleNumber\",\"BuyerItemNumber\":\"BuyerItemNumber\",\"CountryofOrigin\":\"CountryofOrigin\"},{\"LineNumber\":\"24\",\"EAN\":\"0677838535730\",\"ItemDescription\":\"Jordan CH Pant JB11\",\"OrderedQuantity\":\"20\",\"Discount_Code\":\" \",\"NetPrice\":\"33.99\",\"OrderCurrency\":\" \",\"Size\":\"9-10 (M)\",\"Color\":\"BlackGrey\",\"SeasonCode\":\"SeasonCode\",\"TicketType\":\"TicketType\",\"PricatPriceCode\":\"PricatPriceCode\",\"WarehouseCode\":\"WarehouseCode\",\"UnitOfMeasure\":\"UnitOfMeasure\",\"InformationPriceE\":\"InformationPriceE\",\"InformationPriceF\":\"InformationPriceF\",\"Picture\":\"Picture\",\"SeriesNumber\":\"SeriesNumber\",\"ModelNumber\":\"ModelNumber\",\"BuyerSizeCode\":\"BuyerSizeCode\",\"VendorStyleNumber\":\"VendorStyleNumber\",\"BuyerItemNumber\":\"BuyerItemNumber\",\"CountryofOrigin\":\"CountryofOrigin\"},{\"LineNumber\":\"25\",\"EAN\":\"0677838535747\",\"ItemDescription\":\"Jordan CH Pant JB11\",\"OrderedQuantity\":\"20\",\"Discount_Code\":\" \",\"NetPrice\":\"33.99\",\"OrderCurrency\":\" \",\"Size\":\"11-12 (L)\",\"Color\":\"BlackGrey\",\"SeasonCode\":\"SeasonCode\",\"TicketType\":\"TicketType\",\"PricatPriceCode\":\"PricatPriceCode\",\"WarehouseCode\":\"WarehouseCode\",\"UnitOfMeasure\":\"UnitOfMeasure\",\"InformationPriceE\":\"InformationPriceE\",\"InformationPriceF\":\"InformationPriceF\",\"Picture\":\"Picture\",\"SeriesNumber\":\"SeriesNumber\",\"ModelNumber\":\"ModelNumber\",\"BuyerSizeCode\":\"BuyerSizeCode\",\"VendorStyleNumber\":\"VendorStyleNumber\",\"BuyerItemNumber\":\"BuyerItemNumber\",\"CountryofOrigin\":\"CountryofOrigin\"},{\"LineNumber\":\"26\",\"EAN\":\"0677838535754\",\"ItemDescription\":\"Jordan CH Pant JB11\",\"OrderedQuantity\":\"20\",\"Discount_Code\":\" \",\"NetPrice\":\"33.99\",\"OrderCurrency\":\" \",\"Size\":\"13 (XL)\",\"Color\":\"BlackGrey\",\"SeasonCode\":\"SeasonCode\",\"TicketType\":\"TicketType\",\"PricatPriceCode\":\"PricatPriceCode\",\"WarehouseCode\":\"WarehouseCode\",\"UnitOfMeasure\":\"UnitOfMeasure\",\"InformationPriceE\":\"InformationPriceE\",\"InformationPriceF\":\"InformationPriceF\",\"Picture\":\"Picture\",\"SeriesNumber\":\"SeriesNumber\",\"ModelNumber\":\"ModelNumber\",\"BuyerSizeCode\":\"BuyerSizeCode\",\"VendorStyleNumber\":\"VendorStyleNumber\",\"BuyerItemNumber\":\"BuyerItemNumber\",\"CountryofOrigin\":\"CountryofOrigin\"},{\"LineNumber\":\"27\",\"EAN\":\"0677838535679\",\"ItemDescription\":\"Jordan CH Pant JB11\",\"OrderedQuantity\":\"20\",\"Discount_Code\":\" \",\"NetPrice\":\"33.99\",\"OrderCurrency\":\" \",\"Size\":\"7-8 (S)\",\"Color\":\"BlackRed\",\"SeasonCode\":\"SeasonCode\",\"TicketType\":\"TicketType\",\"PricatPriceCode\":\"PricatPriceCode\",\"WarehouseCode\":\"WarehouseCode\",\"UnitOfMeasure\":\"UnitOfMeasure\",\"InformationPriceE\":\"InformationPriceE\",\"InformationPriceF\":\"InformationPriceF\",\"Picture\":\"Picture\",\"SeriesNumber\":\"SeriesNumber\",\"ModelNumber\":\"ModelNumber\",\"BuyerSizeCode\":\"BuyerSizeCode\",\"VendorStyleNumber\":\"VendorStyleNumber\",\"BuyerItemNumber\":\"BuyerItemNumber\",\"CountryofOrigin\":\"CountryofOrigin\"},{\"LineNumber\":\"28\",\"EAN\":\"0677838535686\",\"ItemDescription\":\"Jordan CH Pant JB11\",\"OrderedQuantity\":\"20\",\"Discount_Code\":\" \",\"NetPrice\":\"33.99\",\"OrderCurrency\":\" \",\"Size\":\"9-10 (M)\",\"Color\":\"BlackRed\",\"SeasonCode\":\"SeasonCode\",\"TicketType\":\"TicketType\",\"PricatPriceCode\":\"PricatPriceCode\",\"WarehouseCode\":\"WarehouseCode\",\"UnitOfMeasure\":\"UnitOfMeasure\",\"InformationPriceE\":\"InformationPriceE\",\"InformationPriceF\":\"InformationPriceF\",\"Picture\":\"Picture\",\"SeriesNumber\":\"SeriesNumber\",\"ModelNumber\":\"ModelNumber\",\"BuyerSizeCode\":\"BuyerSizeCode\",\"VendorStyleNumber\":\"VendorStyleNumber\",\"BuyerItemNumber\":\"BuyerItemNumber\",\"CountryofOrigin\":\"CountryofOrigin\"},{\"LineNumber\":\"29\",\"EAN\":\"0677838535693\",\"ItemDescription\":\"Jordan CH Pant JB11\",\"OrderedQuantity\":\"20\",\"Discount_Code\":\" \",\"NetPrice\":\"33.99\",\"OrderCurrency\":\" \",\"Size\":\"11-12 (L)\",\"Color\":\"BlackRed\",\"SeasonCode\":\"SeasonCode\",\"TicketType\":\"TicketType\",\"PricatPriceCode\":\"PricatPriceCode\",\"WarehouseCode\":\"WarehouseCode\",\"UnitOfMeasure\":\"UnitOfMeasure\",\"InformationPriceE\":\"InformationPriceE\",\"InformationPriceF\":\"InformationPriceF\",\"Picture\":\"Picture\",\"SeriesNumber\":\"SeriesNumber\",\"ModelNumber\":\"ModelNumber\",\"BuyerSizeCode\":\"BuyerSizeCode\",\"VendorStyleNumber\":\"VendorStyleNumber\",\"BuyerItemNumber\":\"BuyerItemNumber\",\"CountryofOrigin\":\"CountryofOrigin\"},{\"LineNumber\":\"30\",\"EAN\":\"0677838535723\",\"ItemDescription\":\"Jordan CH Pant JB11\",\"OrderedQuantity\":\"20\",\"Discount_Code\":\" \",\"NetPrice\":\"33.99\",\"OrderCurrency\":\" \",\"Size\":\"7-8 (S)\",\"Color\":\"BlackGrey\",\"SeasonCode\":\"SeasonCode\",\"TicketType\":\"TicketType\",\"PricatPriceCode\":\"PricatPriceCode\",\"WarehouseCode\":\"WarehouseCode\",\"UnitOfMeasure\":\"UnitOfMeasure\",\"InformationPriceE\":\"InformationPriceE\",\"InformationPriceF\":\"InformationPriceF\",\"Picture\":\"Picture\",\"SeriesNumber\":\"SeriesNumber\",\"ModelNumber\":\"ModelNumber\",\"BuyerSizeCode\":\"BuyerSizeCode\",\"VendorStyleNumber\":\"VendorStyleNumber\",\"BuyerItemNumber\":\"BuyerItemNumber\",\"CountryofOrigin\":\"CountryofOrigin\"},{\"LineNumber\":\"31\",\"EAN\":\"0677838535709\",\"ItemDescription\":\"Jordan CH Pant JB11\",\"OrderedQuantity\":\"20\",\"Discount_Code\":\" \",\"NetPrice\":\"33.99\",\"OrderCurrency\":\" \",\"Size\":\"13 (XL)\",\"Color\":\"BlackRed\",\"SeasonCode\":\"SeasonCode\",\"TicketType\":\"TicketType\",\"PricatPriceCode\":\"PricatPriceCode\",\"WarehouseCode\":\"WarehouseCode\",\"UnitOfMeasure\":\"UnitOfMeasure\",\"InformationPriceE\":\"InformationPriceE\",\"InformationPriceF\":\"InformationPriceF\",\"Picture\":\"Picture\",\"SeriesNumber\":\"SeriesNumber\",\"ModelNumber\":\"ModelNumber\",\"BuyerSizeCode\":\"BuyerSizeCode\",\"VendorStyleNumber\":\"VendorStyleNumber\",\"BuyerItemNumber\":\"BuyerItemNumber\",\"CountryofOrigin\":\"CountryofOrigin\"},{\"LineNumber\":\"32\",\"EAN\":\"0677838535242\",\"ItemDescription\":\"Jordan OTH Hood JnB11\",\"OrderedQuantity\":\"20\",\"Discount_Code\":\" \",\"NetPrice\":\"37.99\",\"OrderCurrency\":\" \",\"Size\":\"11-12 (L)\",\"Color\":\"BlackRed\",\"SeasonCode\":\"SeasonCode\",\"TicketType\":\"TicketType\",\"PricatPriceCode\":\"PricatPriceCode\",\"WarehouseCode\":\"WarehouseCode\",\"UnitOfMeasure\":\"UnitOfMeasure\",\"InformationPriceE\":\"InformationPriceE\",\"InformationPriceF\":\"InformationPriceF\",\"Picture\":\"Picture\",\"SeriesNumber\":\"SeriesNumber\",\"ModelNumber\":\"ModelNumber\",\"BuyerSizeCode\":\"BuyerSizeCode\",\"VendorStyleNumber\":\"VendorStyleNumber\",\"BuyerItemNumber\":\"BuyerItemNumber\",\"CountryofOrigin\":\"CountryofOrigin\"},{\"LineNumber\":\"33\",\"EAN\":\"0677838535259\",\"ItemDescription\":\"Jordan OTH Hood JnB11\",\"OrderedQuantity\":\"20\",\"Discount_Code\":\" \",\"NetPrice\":\"37.99\",\"OrderCurrency\":\" \",\"Size\":\"13 (XL)\",\"Color\":\"BlackRed\",\"SeasonCode\":\"SeasonCode\",\"TicketType\":\"TicketType\",\"PricatPriceCode\":\"PricatPriceCode\",\"WarehouseCode\":\"WarehouseCode\",\"UnitOfMeasure\":\"UnitOfMeasure\",\"InformationPriceE\":\"InformationPriceE\",\"InformationPriceF\":\"InformationPriceF\",\"Picture\":\"Picture\",\"SeriesNumber\":\"SeriesNumber\",\"ModelNumber\":\"ModelNumber\",\"BuyerSizeCode\":\"BuyerSizeCode\",\"VendorStyleNumber\":\"VendorStyleNumber\",\"BuyerItemNumber\":\"BuyerItemNumber\",\"CountryofOrigin\":\"CountryofOrigin\"},{\"LineNumber\":\"34\",\"EAN\":\"0677838535303\",\"ItemDescription\":\"Jordan OTH Hood JnB11\",\"OrderedQuantity\":\"20\",\"Discount_Code\":\" \",\"NetPrice\":\"37.99\",\"OrderCurrency\":\" \",\"Size\":\"13 (XL)\",\"Color\":\"BlackGrey\",\"SeasonCode\":\"SeasonCode\",\"TicketType\":\"TicketType\",\"PricatPriceCode\":\"PricatPriceCode\",\"WarehouseCode\":\"WarehouseCode\",\"UnitOfMeasure\":\"UnitOfMeasure\",\"InformationPriceE\":\"InformationPriceE\",\"InformationPriceF\":\"InformationPriceF\",\"Picture\":\"Picture\",\"SeriesNumber\":\"SeriesNumber\",\"ModelNumber\":\"ModelNumber\",\"BuyerSizeCode\":\"BuyerSizeCode\",\"VendorStyleNumber\":\"VendorStyleNumber\",\"BuyerItemNumber\":\"BuyerItemNumber\",\"CountryofOrigin\":\"CountryofOrigin\"},{\"LineNumber\":\"35\",\"EAN\":\"0677838535280\",\"ItemDescription\":\"Jordan OTH Hood JnB11\",\"OrderedQuantity\":\"20\",\"Discount_Code\":\" \",\"NetPrice\":\"37.99\",\"OrderCurrency\":\" \",\"Size\":\"9-10 (M)\",\"Color\":\"BlackGrey\",\"SeasonCode\":\"SeasonCode\",\"TicketType\":\"TicketType\",\"PricatPriceCode\":\"PricatPriceCode\",\"WarehouseCode\":\"WarehouseCode\",\"UnitOfMeasure\":\"UnitOfMeasure\",\"InformationPriceE\":\"InformationPriceE\",\"InformationPriceF\":\"InformationPriceF\",\"Picture\":\"Picture\",\"SeriesNumber\":\"SeriesNumber\",\"ModelNumber\":\"ModelNumber\",\"BuyerSizeCode\":\"BuyerSizeCode\",\"VendorStyleNumber\":\"VendorStyleNumber\",\"BuyerItemNumber\":\"BuyerItemNumber\",\"CountryofOrigin\":\"CountryofOrigin\"},{\"LineNumber\":\"36\",\"EAN\":\"0677838535273\",\"ItemDescription\":\"Jordan OTH Hood JnB11\",\"OrderedQuantity\":\"20\",\"Discount_Code\":\" \",\"NetPrice\":\"37.99\",\"OrderCurrency\":\" \",\"Size\":\"7-8 (S)\",\"Color\":\"BlackGrey\",\"SeasonCode\":\"SeasonCode\",\"TicketType\":\"TicketType\",\"PricatPriceCode\":\"PricatPriceCode\",\"WarehouseCode\":\"WarehouseCode\",\"UnitOfMeasure\":\"UnitOfMeasure\",\"InformationPriceE\":\"InformationPriceE\",\"InformationPriceF\":\"InformationPriceF\",\"Picture\":\"Picture\",\"SeriesNumber\":\"SeriesNumber\",\"ModelNumber\":\"ModelNumber\",\"BuyerSizeCode\":\"BuyerSizeCode\",\"VendorStyleNumber\":\"VendorStyleNumber\",\"BuyerItemNumber\":\"BuyerItemNumber\",\"CountryofOrigin\":\"CountryofOrigin\"},{\"LineNumber\":\"37\",\"EAN\":\"0677838535235\",\"ItemDescription\":\"Jordan OTH Hood JnB11\",\"OrderedQuantity\":\"20\",\"Discount_Code\":\" \",\"NetPrice\":\"37.99\",\"OrderCurrency\":\" \",\"Size\":\"9-10 (M)\",\"Color\":\"BlackRed\",\"SeasonCode\":\"SeasonCode\",\"TicketType\":\"TicketType\",\"PricatPriceCode\":\"PricatPriceCode\",\"WarehouseCode\":\"WarehouseCode\",\"UnitOfMeasure\":\"UnitOfMeasure\",\"InformationPriceE\":\"InformationPriceE\",\"InformationPriceF\":\"InformationPriceF\",\"Picture\":\"Picture\",\"SeriesNumber\":\"SeriesNumber\",\"ModelNumber\":\"ModelNumber\",\"BuyerSizeCode\":\"BuyerSizeCode\",\"VendorStyleNumber\":\"VendorStyleNumber\",\"BuyerItemNumber\":\"BuyerItemNumber\",\"CountryofOrigin\":\"CountryofOrigin\"},{\"LineNumber\":\"38\",\"EAN\":\"0677838535228\",\"ItemDescription\":\"Jordan OTH Hood JnB11\",\"OrderedQuantity\":\"20\",\"Discount_Code\":\" \",\"NetPrice\":\"37.99\",\"OrderCurrency\":\" \",\"Size\":\"7-8 (S)\",\"Color\":\"BlackRed\",\"SeasonCode\":\"SeasonCode\",\"TicketType\":\"TicketType\",\"PricatPriceCode\":\"PricatPriceCode\",\"WarehouseCode\":\"WarehouseCode\",\"UnitOfMeasure\":\"UnitOfMeasure\",\"InformationPriceE\":\"InformationPriceE\",\"InformationPriceF\":\"InformationPriceF\",\"Picture\":\"Picture\",\"SeriesNumber\":\"SeriesNumber\",\"ModelNumber\":\"ModelNumber\",\"BuyerSizeCode\":\"BuyerSizeCode\",\"VendorStyleNumber\":\"VendorStyleNumber\",\"BuyerItemNumber\":\"BuyerItemNumber\",\"CountryofOrigin\":\"CountryofOrigin\"},{\"LineNumber\":\"39\",\"EAN\":\"0677838535297\",\"ItemDescription\":\"Jordan OTH Hood JnB11\",\"OrderedQuantity\":\"20\",\"Discount_Code\":\" \",\"NetPrice\":\"37.99\",\"OrderCurrency\":\" \",\"Size\":\"11-12 (L)\",\"Color\":\"BlackGrey\",\"SeasonCode\":\"SeasonCode\",\"TicketType\":\"TicketType\",\"PricatPriceCode\":\"PricatPriceCode\",\"WarehouseCode\":\"WarehouseCode\",\"UnitOfMeasure\":\"UnitOfMeasure\",\"InformationPriceE\":\"InformationPriceE\",\"InformationPriceF\":\"InformationPriceF\",\"Picture\":\"Picture\",\"SeriesNumber\":\"SeriesNumber\",\"ModelNumber\":\"ModelNumber\",\"BuyerSizeCode\":\"BuyerSizeCode\",\"VendorStyleNumber\":\"VendorStyleNumber\",\"BuyerItemNumber\":\"BuyerItemNumber\",\"CountryofOrigin\":\"CountryofOrigin\"},{\"LineNumber\":\"40\",\"EAN\":\"0677838535198\",\"ItemDescription\":\"Jordan FZ Hood JB11\",\"OrderedQuantity\":\"20\",\"Discount_Code\":\" \",\"NetPrice\":\"39.99\",\"OrderCurrency\":\" \",\"Size\":\"11-12 (L)\",\"Color\":\"BlackGrey\",\"SeasonCode\":\"SeasonCode\",\"TicketType\":\"TicketType\",\"PricatPriceCode\":\"PricatPriceCode\",\"WarehouseCode\":\"WarehouseCode\",\"UnitOfMeasure\":\"UnitOfMeasure\",\"InformationPriceE\":\"InformationPriceE\",\"InformationPriceF\":\"InformationPriceF\",\"Picture\":\"Picture\",\"SeriesNumber\":\"SeriesNumber\",\"ModelNumber\":\"ModelNumber\",\"BuyerSizeCode\":\"BuyerSizeCode\",\"VendorStyleNumber\":\"VendorStyleNumber\",\"BuyerItemNumber\":\"BuyerItemNumber\",\"CountryofOrigin\":\"CountryofOrigin\"}]}}}") ;
Var.var2 = new String("{\"requestWrapperE\":") + row4.E + new String("}") ;// ###############################
        // ###############################
        // # Output tables

outApi = null;
outputE = null;


// # Output table : 'outApi'
outApi_tmp.body = null;
outApi_tmp.string = Var.var2;
outApi_tmp.statusCode = null;
outApi = outApi_tmp;

// # Output table : 'outputE'
outputE_tmp.E = Var.var2;
outputE = outputE_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_5 = false;










 


	tos_count_tMap_5++;

/**
 * [tMap_5 main ] stop
 */
	
	/**
	 * [tMap_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_begin ] stop
 */
// Start of branch "outApi"
if(outApi != null) { 



	
	/**
	 * [tRESTClient_5 main ] start
	 */

	

	
	
	currentComponent="tRESTClient_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"outApi");
					}
					
	row8 = null;	row7 = null;

// expected response body
javax.ws.rs.core.Response responseDoc_tRESTClient_5 = null;

try {
	// request body
	org.dom4j.Document requestDoc_tRESTClient_5 = null;
	String requestString_tRESTClient_5 = null;
			if (null != outApi.body) {
				requestDoc_tRESTClient_5 = outApi.body.getDocument();
			}
			requestString_tRESTClient_5 = outApi.string;

	Object requestBody_tRESTClient_5 = requestDoc_tRESTClient_5 != null ? requestDoc_tRESTClient_5 : requestString_tRESTClient_5;

	

    //resposne class name
	Class<?> responseClass_tRESTClient_5
		= String.class;

	// create web client instance
	org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean factoryBean_tRESTClient_5 =
			new org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean();

	boolean inOSGi = routines.system.BundleUtils.inOSGi();

	final java.util.List<org.apache.cxf.feature.Feature> features_tRESTClient_5 =
			new java.util.ArrayList<org.apache.cxf.feature.Feature>();

	
		String url = "https://haddad-europe.my.salesforce.com";
		// {baseUri}tRESTClient
		factoryBean_tRESTClient_5.setServiceName(new javax.xml.namespace.QName(url, "tRESTClient"));
		factoryBean_tRESTClient_5.setAddress(url);
	

	

	
		features_tRESTClient_5.add(new org.apache.cxf.feature.LoggingFeature());
	

	

	factoryBean_tRESTClient_5.setFeatures(features_tRESTClient_5);


	java.util.List<Object> providers_tRESTClient_5 = new java.util.ArrayList<Object>();
	providers_tRESTClient_5.add(new org.apache.cxf.jaxrs.provider.dom4j.DOM4JProvider() {
		// workaround for https://jira.talendforge.org/browse/TESB-7276
		public org.dom4j.Document readFrom(Class<org.dom4j.Document> cls,
											java.lang.reflect.Type type,
											java.lang.annotation.Annotation[] anns,
											javax.ws.rs.core.MediaType mt,
											javax.ws.rs.core.MultivaluedMap<String, String> headers,
											java.io.InputStream is)
				throws IOException, javax.ws.rs.WebApplicationException {
			String contentLength = headers.getFirst("Content-Length");
			if (!org.apache.cxf.common.util.StringUtils.isEmpty(contentLength)
					&& Integer.valueOf(contentLength) <= 0) {
				try {
					return org.dom4j.DocumentHelper.parseText("<root/>");
				} catch (org.dom4j.DocumentException e_tRESTClient_5) {
					e_tRESTClient_5.printStackTrace();
				}
				return null;
			}
			return super.readFrom(cls, type, anns, mt, headers, is);
		}
	});
	org.apache.cxf.jaxrs.provider.json.JSONProvider jsonProvider_tRESTClient_5 =
			new org.apache.cxf.jaxrs.provider.json.JSONProvider();
		jsonProvider_tRESTClient_5.setIgnoreNamespaces(true);
		jsonProvider_tRESTClient_5.setAttributesToElements(true);
	
	
		jsonProvider_tRESTClient_5.setSupportUnwrapped(true);
		jsonProvider_tRESTClient_5.setWrapperName("root");
	
	
		jsonProvider_tRESTClient_5.setDropRootElement(true);
		jsonProvider_tRESTClient_5.setConvertTypesToStrings(true);
	providers_tRESTClient_5.add(jsonProvider_tRESTClient_5);
	factoryBean_tRESTClient_5.setProviders(providers_tRESTClient_5);
	factoryBean_tRESTClient_5.setTransportId("http://cxf.apache.org/transports/http");

	boolean use_auth_tRESTClient_5 = false;
	if (use_auth_tRESTClient_5 && "SAML".equals("OAUTH2_BEARER")) {
		if (!inOSGi) {
			throw new IllegalArgumentException("SAML based security scenarios are not supported in Studio (standalone)");
		}
		// set SAML Token authentication
		
		 
	final String decryptedPassword_tRESTClient_5 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[sjwLR8pqCrRwvlUPBUhCS4+lVwikSa7JfXTEWmbjrYSGXphhluw=]");

		org.apache.cxf.ws.security.trust.STSClient stsClient =
			org.talend.esb.security.saml.STSClientUtils.createSTSClient(factoryBean_tRESTClient_5.getBus(),
				"otman.nikraj@haddadeurope.com.partial", decryptedPassword_tRESTClient_5);
		
		org.talend.esb.security.saml.SAMLRESTUtils.configureClient(factoryBean_tRESTClient_5, stsClient);
	}

	org.apache.cxf.jaxrs.client.WebClient webClient_tRESTClient_5 = factoryBean_tRESTClient_5.createWebClient();

	// set request path
	webClient_tRESTClient_5.path("/services/apexrest/APXX_OrderProductRestService/doPost_WrapperE");

	// set connection properties
	org.apache.cxf.jaxrs.client.ClientConfiguration clientConfig_tRESTClient_5 = org.apache.cxf.jaxrs.client.WebClient.getConfig(webClient_tRESTClient_5);
	org.apache.cxf.transport.http.HTTPConduit conduit_tRESTClient_5 = clientConfig_tRESTClient_5.getHttpConduit();

    if (clientConfig_tRESTClient_5.getEndpoint() != null
            && clientConfig_tRESTClient_5.getEndpoint().getEndpointInfo() != null) {
        clientConfig_tRESTClient_5.getEndpoint().getEndpointInfo().setProperty("enable.webclient.operation.reporting",
                                                                          true);
    }

	

        org.apache.cxf.configuration.jsse.TLSClientParameters tlsClientParameters_tRESTClient_5 = new org.apache.cxf.configuration.jsse.TLSClientParameters();
        tlsClientParameters_tRESTClient_5.setDisableCNCheck(true);
        conduit_tRESTClient_5.setTlsClientParameters(tlsClientParameters_tRESTClient_5);

	

	if (use_auth_tRESTClient_5 && "BASIC".equals("OAUTH2_BEARER")) {
		// set BASIC auth
		
		 
	final String decryptedPassword_tRESTClient_5 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[YA3iIHoS+bgHuFy3m8bloIchKRwp/h/nWdClPVSis/fAfL/1oLk=]");

		org.apache.cxf.configuration.security.AuthorizationPolicy authPolicy_tRESTClient_5 = new org.apache.cxf.configuration.security.AuthorizationPolicy();
			authPolicy_tRESTClient_5.setAuthorizationType("Basic");
			authPolicy_tRESTClient_5.setUserName("otman.nikraj@haddadeurope.com.partial");
			authPolicy_tRESTClient_5.setPassword(decryptedPassword_tRESTClient_5);
		conduit_tRESTClient_5.setAuthorization(authPolicy_tRESTClient_5);
	} else if (use_auth_tRESTClient_5 && "HTTP Digest".equals("OAUTH2_BEARER")) {
		// set Digest auth
		
		 
	final String decryptedPassword_tRESTClient_5 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[mf5nstLOxoO5zwjbFcunXLcHvL2I/xq13n8qcvA5KTX5YQNG/f0=]");

		org.apache.cxf.configuration.security.AuthorizationPolicy authPolicy_tRESTClient_5 = new org.apache.cxf.configuration.security.AuthorizationPolicy();
		authPolicy_tRESTClient_5.setAuthorizationType("Digest");
		authPolicy_tRESTClient_5.setUserName("otman.nikraj@haddadeurope.com.partial");
		authPolicy_tRESTClient_5.setPassword(decryptedPassword_tRESTClient_5);
		conduit_tRESTClient_5.setAuthorization(authPolicy_tRESTClient_5);
	}

	if (!inOSGi) {
		conduit_tRESTClient_5.getClient().setReceiveTimeout((long)(60 * 1000L));
		conduit_tRESTClient_5.getClient().setConnectionTimeout((long)(30 * 1000L));
		boolean use_proxy_tRESTClient_5 = false;
		if (use_proxy_tRESTClient_5) {
			
			 
	final String decryptedPassword_tRESTClient_5 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[D4eTEbua1XZlLCeYOtR5yxUPTjCiyPj4TMFBjw==]");

			conduit_tRESTClient_5.getClient().setProxyServer("61.163.92.4");
			conduit_tRESTClient_5.getClient().setProxyServerPort(Integer.valueOf(8080));
			conduit_tRESTClient_5.getProxyAuthorization().setUserName("");
			conduit_tRESTClient_5.getProxyAuthorization().setPassword(decryptedPassword_tRESTClient_5);
		}
	}
	
	
		conduit_tRESTClient_5.getClient().setAutoRedirect(true);
		clientConfig_tRESTClient_5.getRequestContext().put("http.redirect.relative.uri", true);
		clientConfig_tRESTClient_5.getRequestContext().put("http.redirect.same.host.only", false);
	

	

	
		// set Content-Type
		webClient_tRESTClient_5.type("application/json");
	

	
		// set Accept-Type
		webClient_tRESTClient_5.accept("application/json");
	

	
		// set optional query and header properties if any
	
		webClient_tRESTClient_5.header("Authorization", globalMap.get("tokentype")+ " " +globalMap.get("accesstoken"));
	
		webClient_tRESTClient_5.header("Accept", "application/json");
	
	if (use_auth_tRESTClient_5 && "OAUTH2_BEARER".equals("OAUTH2_BEARER")) {
		// set oAuth2 bearer token
		webClient_tRESTClient_5.header("Authorization", "Bearer " + globalMap.get("access_token"));
	}
	
	if (use_auth_tRESTClient_5 && "OIDC_PASSWORD_GRANT".equals("OAUTH2_BEARER")) {
 
	final String decryptedPassword_tRESTClient_5 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[wbVlN8INOGIgzFttG0pB7QZ2Ptg0ObZBNNhI/NMUVePuAdBuLz0=]");

        String username_tRESTClient_5 = "otman.nikraj@haddadeurope.com.partial";
        String password_tRESTClient_5 = decryptedPassword_tRESTClient_5;

        String bearerHeader_tRESTClient_5 = null;

        try {
			if (!inOSGi) {
				org.springframework.context.support.ClassPathXmlApplicationContext context_tRESTClient_5 =
					new org.springframework.context.support.ClassPathXmlApplicationContext("META-INF/tesb/oidc-context.xml");
				org.talend.esb.security.oidc.OidcConfiguration oidcConfiguration_tRESTClient_5 = context_tRESTClient_5.getBean(org.talend.esb.security.oidc.OidcConfiguration.class);
				bearerHeader_tRESTClient_5 = org.talend.esb.security.oidc.OidcClientUtils.oidcClientBearer(username_tRESTClient_5, password_tRESTClient_5, oidcConfiguration_tRESTClient_5);
			}else{
				bearerHeader_tRESTClient_5 = org.talend.esb.security.oidc.OidcClientUtils.oidcClientBearer(username_tRESTClient_5, password_tRESTClient_5);
			}
		} catch (Exception ex) {
            throw new javax.ws.rs.WebApplicationException("Failed to get OIDC access token: ", ex);
        }

		webClient_tRESTClient_5.header("Authorization", bearerHeader_tRESTClient_5);
	}
    
	// if FORM request then capture query parameters into Form, otherwise set them as queries
	
		
	


	try {
		// start send request
		
			
				responseDoc_tRESTClient_5 = webClient_tRESTClient_5.post(requestBody_tRESTClient_5);
			
		


		int webClientResponseStatus_tRESTClient_5 = webClient_tRESTClient_5.getResponse().getStatus();
		if (webClientResponseStatus_tRESTClient_5 >= 300) {
			throw new javax.ws.rs.WebApplicationException(webClient_tRESTClient_5.getResponse());
		}

		
			if (row7 == null) {
				row7 = new row7Struct();
			}

			row7.statusCode = webClientResponseStatus_tRESTClient_5;
			
				
				Object responseObj_tRESTClient_5 = null;
				if(responseDoc_tRESTClient_5 != null && responseDoc_tRESTClient_5.hasEntity()){
					responseObj_tRESTClient_5 = responseDoc_tRESTClient_5.readEntity(responseClass_tRESTClient_5);
				
				if(responseObj_tRESTClient_5 != null){
					if (responseClass_tRESTClient_5 == String.class) {
						row7.string = (String) responseObj_tRESTClient_5;
					} else {
						routines.system.Document responseTalendDoc_tRESTClient_5 = null;
						if (null != responseObj_tRESTClient_5) {
							responseTalendDoc_tRESTClient_5 = new routines.system.Document();
							responseTalendDoc_tRESTClient_5.setDocument((org.dom4j.Document) responseObj_tRESTClient_5);
						}
						row7.body = responseTalendDoc_tRESTClient_5;
					}
				}
			}
			


			globalMap.put("tRESTClient_5_HEADERS", webClient_tRESTClient_5.getResponse().getHeaders());
			
			
			
			// handle "oneway" for PUT, POST and PATCH with empty response payload
			if (webClientResponseStatus_tRESTClient_5 == 202 && responseObj_tRESTClient_5 == null){
				row7.string = "";
				return;
			}
			
		

	} catch (javax.ws.rs.WebApplicationException ex_tRESTClient_5) {
		
			if (row8 == null) {
				row8 = new row8Struct();
			}
			row8.errorCode = ex_tRESTClient_5.getResponse().getStatus();

			String errorMessage_tRESTClient_5 = null;
			try {
				errorMessage_tRESTClient_5 = ex_tRESTClient_5.getResponse().readEntity(String.class);
			} catch (Exception exe_tRESTClient_5) {
				// ignore
			}
			if (null == errorMessage_tRESTClient_5 || 0 == errorMessage_tRESTClient_5.trim().length()) {
				errorMessage_tRESTClient_5 = ex_tRESTClient_5.getMessage();
			}
			row8.errorMessage = errorMessage_tRESTClient_5;

			globalMap.put("tRESTClient_5_HEADERS", ex_tRESTClient_5.getResponse().getHeaders());
			
		
	}

} catch(Exception e_tRESTClient_5) {
	
		throw new TalendException(e_tRESTClient_5, currentComponent, globalMap);
	
}


 


	tos_count_tRESTClient_5++;

/**
 * [tRESTClient_5 main ] stop
 */
	
	/**
	 * [tRESTClient_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRESTClient_5";

	

 



/**
 * [tRESTClient_5 process_data_begin ] stop
 */
// Start of branch "row7"
if(row7 != null) { 



	
	/**
	 * [tLogRow_3 main ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row7");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_3 = new StringBuilder();




   				
	    		if(row7.body != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(row7.body)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append(";");
    			


   				
	    		if(row7.string != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(row7.string)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append(";");
    			


   				
	    		if(row7.statusCode != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(row7.statusCode)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_3 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_3 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_3);
                    }
                    consoleOut_tLogRow_3.println(strBuffer_tLogRow_3.toString());
                    consoleOut_tLogRow_3.flush();
                    nb_line_tLogRow_3++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_3++;

/**
 * [tLogRow_3 main ] stop
 */
	
	/**
	 * [tLogRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 process_data_end ] stop
 */

} // End of branch "row7"




// Start of branch "row8"
if(row8 != null) { 



	
	/**
	 * [tLogRow_2 main ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row8");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_2 = new StringBuilder();




   				
	    		if(row8.errorCode != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(row8.errorCode)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(row8.errorMessage != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(row8.errorMessage)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_2 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_2);
                    }
                    consoleOut_tLogRow_2.println(strBuffer_tLogRow_2.toString());
                    consoleOut_tLogRow_2.flush();
                    nb_line_tLogRow_2++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_2++;

/**
 * [tLogRow_2 main ] stop
 */
	
	/**
	 * [tLogRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 process_data_end ] stop
 */

} // End of branch "row8"




	
	/**
	 * [tRESTClient_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tRESTClient_5";

	

 



/**
 * [tRESTClient_5 process_data_end ] stop
 */

} // End of branch "outApi"




// Start of branch "outputE"
if(outputE != null) { 



	
	/**
	 * [tLogRow_1 main ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"outputE");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_1 = new StringBuilder();




   				
	    		if(outputE.E != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(outputE.E)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_1);
                    }
                    consoleOut_tLogRow_1.println(strBuffer_tLogRow_1.toString());
                    consoleOut_tLogRow_1.flush();
                    nb_line_tLogRow_1++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_1++;

/**
 * [tLogRow_1 main ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_end ] stop
 */

} // End of branch "outputE"




	
	/**
	 * [tMap_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_end ] stop
 */



	
	/**
	 * [tFileOutputJSON_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputJSON_2";

	

 



/**
 * [tFileOutputJSON_2 process_data_end ] stop
 */

} // End of branch "out4"




// Start of branch "out7"
if(out7 != null) { 



	
	/**
	 * [tFileOutputJSON_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputJSON_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out7");
					}
					


org.json.simple.JSONObject jsonRowtFileOutputJSON_1 = new org.json.simple.JSONObject();
			    	if(out7.E != null){
			    
					jsonRowtFileOutputJSON_1.put("E", out7.E);
				
					}else{
						jsonRowtFileOutputJSON_1.put("E", null);
					}
				

if(!isFirst_tFileOutputJSON_1){
	outtFileOutputJSON_1.append(",");
}
isFirst_tFileOutputJSON_1 = false;
outtFileOutputJSON_1.append(jsonRowtFileOutputJSON_1.toJSONString());
nb_line_tFileOutputJSON_1++;

 
     row21 = out7;


	tos_count_tFileOutputJSON_1++;

/**
 * [tFileOutputJSON_1 main ] stop
 */
	
	/**
	 * [tFileOutputJSON_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputJSON_1";

	

 



/**
 * [tFileOutputJSON_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_9 main ] start
	 */

	

	
	
	currentComponent="tMap_9";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row21");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_9 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_9 = false;
		  boolean mainRowRejected_tMap_9 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_9__Struct Var = Var__tMap_9;
Var.var1 = new String("{\"requestWrapperE\":{\"E\":{\"NumberOfLines\":\"41\",\"FileName\":\"SPORTSDIRECT_20201201-115346-41951112.dat\",\"Customer_EDI_ID\":\"5051538000005\",\"Customer_Order_Number\":\"41951112\",\"Document_Type\":\"Pre Order\",\"Ship_To\":\"5051538000074\",\"Invoice_To\":\"5051538000005\",\"Order_By\":\"5051538000005\",\"Vendor\":\"5051538000074\",\"OrderDate\":\"01-12-2020\",\"Delivery_Date\":\"01-03-2021\",\"Season\":\"SP21\",\"Reference_Customer_Order\":\"ReferenceCustomerOrder\",\"Comment_1\":\"Comment_1\",\"Comment_2\":\"Comment_2\",\"Order_By_Name\":\"SPORTSDIRECT\",\"Order_By_Address\":\"Brook Park, Meadow Lane Shirebrook, Mansfield Notts \",\"Order_By_PostalCode\":\"NG20 8RY\",\"Ship_To_Name\":\"SPORTSDIRECT MAG\",\"Ship_To_Address\":\"Brook Park, Meadow Lane Shirebrook Notts \",\"Ship_To_PostalCode\":\"NG20 8RY\",\"DepartmentNumber\":\"DepartmentNumber\",\"CustomerVendorNumber\":\"CustomerVendorNumber\",\"TransportInstructions\":\"TransportInstructions\",\"TermsofSale\":\"TermsofSale\",\"EffectiveDate\":\"2020-01-12\",\"ShipNotBeforeDate\":\"ShipNotBeforeDate\",\"ShipNoLaterDate\":\"ShipNoLaterDate\",\"CancelAfterDate\":\"CancelAfterDate\",\"Brand\":\"Nike\",\"OrderCurrency\":\"GBP\",\"L\":[{\"LineNumber\":\"1\",\"EAN\":\"0633731230134\",\"ItemDescription\":\"Nike Flc Tracksuit In00\",\"OrderedQuantity\":\"20\",\"Discount_Code\":\" \",\"NetPrice\":\"32.99\",\"OrderCurrency\":\" \",\"Size\":\"5-6 Yrs\",\"Color\":\"Navy\",\"SeasonCode\":\"SeasonCode\",\"TicketType\":\"TicketType\",\"PricatPriceCode\":\"PricatPriceCode\",\"WarehouseCode\":\"WarehouseCode\",\"UnitOfMeasure\":\"UnitOfMeasure\",\"InformationPriceE\":\"InformationPriceE\",\"InformationPriceF\":\"InformationPriceF\",\"Picture\":\"Picture\",\"SeriesNumber\":\"SeriesNumber\",\"ModelNumber\":\"ModelNumber\",\"BuyerSizeCode\":\"BuyerSizeCode\",\"VendorStyleNumber\":\"VendorStyleNumber\",\"BuyerItemNumber\":\"BuyerItemNumber\",\"CountryofOrigin\":\"CountryofOrigin\"},{\"LineNumber\":\"2\",\"EAN\":\"0633731230127\",\"ItemDescription\":\"Nike Flc Tracksuit In00\",\"OrderedQuantity\":\"20\",\"Discount_Code\":\" \",\"NetPrice\":\"32.99\",\"OrderCurrency\":\" \",\"Size\":\"4-5 Yrs\",\"Color\":\"Navy\",\"SeasonCode\":\"SeasonCode\",\"TicketType\":\"TicketType\",\"PricatPriceCode\":\"PricatPriceCode\",\"WarehouseCode\":\"WarehouseCode\",\"UnitOfMeasure\":\"UnitOfMeasure\",\"InformationPriceE\":\"InformationPriceE\",\"InformationPriceF\":\"InformationPriceF\",\"Picture\":\"Picture\",\"SeriesNumber\":\"SeriesNumber\",\"ModelNumber\":\"ModelNumber\",\"BuyerSizeCode\":\"BuyerSizeCode\",\"VendorStyleNumber\":\"VendorStyleNumber\",\"BuyerItemNumber\":\"BuyerItemNumber\",\"CountryofOrigin\":\"CountryofOrigin\"},{\"LineNumber\":\"3\",\"EAN\":\"0633731230110\",\"ItemDescription\":\"Nike Flc Tracksuit In00\",\"OrderedQuantity\":\"20\",\"Discount_Code\":\" \",\"NetPrice\":\"32.99\",\"OrderCurrency\":\" \",\"Size\":\"3-4 Yrs\",\"Color\":\"Navy\",\"SeasonCode\":\"SeasonCode\",\"TicketType\":\"TicketType\",\"PricatPriceCode\":\"PricatPriceCode\",\"WarehouseCode\":\"WarehouseCode\",\"UnitOfMeasure\":\"UnitOfMeasure\",\"InformationPriceE\":\"InformationPriceE\",\"InformationPriceF\":\"InformationPriceF\",\"Picture\":\"Picture\",\"SeriesNumber\":\"SeriesNumber\",\"ModelNumber\":\"ModelNumber\",\"BuyerSizeCode\":\"BuyerSizeCode\",\"VendorStyleNumber\":\"VendorStyleNumber\",\"BuyerItemNumber\":\"BuyerItemNumber\",\"CountryofOrigin\":\"CountryofOrigin\"},{\"LineNumber\":\"4\",\"EAN\":\"0633731230103\",\"ItemDescription\":\"Nike Flc Tracksuit In00\",\"OrderedQuantity\":\"20\",\"Discount_Code\":\" \",\"NetPrice\":\"32.99\",\"OrderCurrency\":\" \",\"Size\":\"2-3 Yrs\",\"Color\":\"Navy\",\"SeasonCode\":\"SeasonCode\",\"TicketType\":\"TicketType\",\"PricatPriceCode\":\"PricatPriceCode\",\"WarehouseCode\":\"WarehouseCode\",\"UnitOfMeasure\":\"UnitOfMeasure\",\"InformationPriceE\":\"InformationPriceE\",\"InformationPriceF\":\"InformationPriceF\",\"Picture\":\"Picture\",\"SeriesNumber\":\"SeriesNumber\",\"ModelNumber\":\"ModelNumber\",\"BuyerSizeCode\":\"BuyerSizeCode\",\"VendorStyleNumber\":\"VendorStyleNumber\",\"BuyerItemNumber\":\"BuyerItemNumber\",\"CountryofOrigin\":\"CountryofOrigin\"},{\"LineNumber\":\"5\",\"EAN\":\"0633731230141\",\"ItemDescription\":\"Nike Flc Tracksuit In00\",\"OrderedQuantity\":\"20\",\"Discount_Code\":\" \",\"NetPrice\":\"32.99\",\"OrderCurrency\":\" \",\"Size\":\"6-7 Yrs\",\"Color\":\"Navy\",\"SeasonCode\":\"SeasonCode\",\"TicketType\":\"TicketType\",\"PricatPriceCode\":\"PricatPriceCode\",\"WarehouseCode\":\"WarehouseCode\",\"UnitOfMeasure\":\"UnitOfMeasure\",\"InformationPriceE\":\"InformationPriceE\",\"InformationPriceF\":\"InformationPriceF\",\"Picture\":\"Picture\",\"SeriesNumber\":\"SeriesNumber\",\"ModelNumber\":\"ModelNumber\",\"BuyerSizeCode\":\"BuyerSizeCode\",\"VendorStyleNumber\":\"VendorStyleNumber\",\"BuyerItemNumber\":\"BuyerItemNumber\",\"CountryofOrigin\":\"CountryofOrigin\"},{\"LineNumber\":\"6\",\"EAN\":\"0633716839550\",\"ItemDescription\":\"Nike Flc Tracksuit In00\",\"OrderedQuantity\":\"20\",\"Discount_Code\":\" \",\"NetPrice\":\"32.99\",\"OrderCurrency\":\" \",\"Size\":\"3-4 Yrs\",\"Color\":\"Black\",\"SeasonCode\":\"SeasonCode\",\"TicketType\":\"TicketType\",\"PricatPriceCode\":\"PricatPriceCode\",\"WarehouseCode\":\"WarehouseCode\",\"UnitOfMeasure\":\"UnitOfMeasure\",\"InformationPriceE\":\"InformationPriceE\",\"InformationPriceF\":\"InformationPriceF\",\"Picture\":\"Picture\",\"SeriesNumber\":\"SeriesNumber\",\"ModelNumber\":\"ModelNumber\",\"BuyerSizeCode\":\"BuyerSizeCode\",\"VendorStyleNumber\":\"VendorStyleNumber\",\"BuyerItemNumber\":\"BuyerItemNumber\",\"CountryofOrigin\":\"CountryofOrigin\"},{\"LineNumber\":\"7\",\"EAN\":\"0633716839581\",\"ItemDescription\":\"Nike Flc Tracksuit In00\",\"OrderedQuantity\":\"20\",\"Discount_Code\":\" \",\"NetPrice\":\"32.99\",\"OrderCurrency\":\" \",\"Size\":\"6-7 Yrs\",\"Color\":\"Black\",\"SeasonCode\":\"SeasonCode\",\"TicketType\":\"TicketType\",\"PricatPriceCode\":\"PricatPriceCode\",\"WarehouseCode\":\"WarehouseCode\",\"UnitOfMeasure\":\"UnitOfMeasure\",\"InformationPriceE\":\"InformationPriceE\",\"InformationPriceF\":\"InformationPriceF\",\"Picture\":\"Picture\",\"SeriesNumber\":\"SeriesNumber\",\"ModelNumber\":\"ModelNumber\",\"BuyerSizeCode\":\"BuyerSizeCode\",\"VendorStyleNumber\":\"VendorStyleNumber\",\"BuyerItemNumber\":\"BuyerItemNumber\",\"CountryofOrigin\":\"CountryofOrigin\"},{\"LineNumber\":\"8\",\"EAN\":\"0633716839574\",\"ItemDescription\":\"Nike Flc Tracksuit In00\",\"OrderedQuantity\":\"20\",\"Discount_Code\":\" \",\"NetPrice\":\"32.99\",\"OrderCurrency\":\" \",\"Size\":\"5-6 Yrs\",\"Color\":\"Black\",\"SeasonCode\":\"SeasonCode\",\"TicketType\":\"TicketType\",\"PricatPriceCode\":\"PricatPriceCode\",\"WarehouseCode\":\"WarehouseCode\",\"UnitOfMeasure\":\"UnitOfMeasure\",\"InformationPriceE\":\"InformationPriceE\",\"InformationPriceF\":\"InformationPriceF\",\"Picture\":\"Picture\",\"SeriesNumber\":\"SeriesNumber\",\"ModelNumber\":\"ModelNumber\",\"BuyerSizeCode\":\"BuyerSizeCode\",\"VendorStyleNumber\":\"VendorStyleNumber\",\"BuyerItemNumber\":\"BuyerItemNumber\",\"CountryofOrigin\":\"CountryofOrigin\"},{\"LineNumber\":\"9\",\"EAN\":\"0633716839567\",\"ItemDescription\":\"Nike Flc Tracksuit In00\",\"OrderedQuantity\":\"20\",\"Discount_Code\":\" \",\"NetPrice\":\"32.99\",\"OrderCurrency\":\" \",\"Size\":\"4-5 Yrs\",\"Color\":\"Black\",\"SeasonCode\":\"SeasonCode\",\"TicketType\":\"TicketType\",\"PricatPriceCode\":\"PricatPriceCode\",\"WarehouseCode\":\"WarehouseCode\",\"UnitOfMeasure\":\"UnitOfMeasure\",\"InformationPriceE\":\"InformationPriceE\",\"InformationPriceF\":\"InformationPriceF\",\"Picture\":\"Picture\",\"SeriesNumber\":\"SeriesNumber\",\"ModelNumber\":\"ModelNumber\",\"BuyerSizeCode\":\"BuyerSizeCode\",\"VendorStyleNumber\":\"VendorStyleNumber\",\"BuyerItemNumber\":\"BuyerItemNumber\",\"CountryofOrigin\":\"CountryofOrigin\"},{\"LineNumber\":\"10\",\"EAN\":\"0633716839543\",\"ItemDescription\":\"Nike Flc Tracksuit In00\",\"OrderedQuantity\":\"20\",\"Discount_Code\":\" \",\"NetPrice\":\"32.99\",\"OrderCurrency\":\" \",\"Size\":\"2-3 Yrs\",\"Color\":\"Black\",\"SeasonCode\":\"SeasonCode\",\"TicketType\":\"TicketType\",\"PricatPriceCode\":\"PricatPriceCode\",\"WarehouseCode\":\"WarehouseCode\",\"UnitOfMeasure\":\"UnitOfMeasure\",\"InformationPriceE\":\"InformationPriceE\",\"InformationPriceF\":\"InformationPriceF\",\"Picture\":\"Picture\",\"SeriesNumber\":\"SeriesNumber\",\"ModelNumber\":\"ModelNumber\",\"BuyerSizeCode\":\"BuyerSizeCode\",\"VendorStyleNumber\":\"VendorStyleNumber\",\"BuyerItemNumber\":\"BuyerItemNumber\",\"CountryofOrigin\":\"CountryofOrigin\"},{\"LineNumber\":\"11\",\"EAN\":\"0009328374350\",\"ItemDescription\":\"Nike Flc Tracksuit Bb00\",\"OrderedQuantity\":\"20\",\"Discount_Code\":\" \",\"NetPrice\":\"27.99\",\"OrderCurrency\":\" \",\"Size\":\"18M\",\"Color\":\"Grey\",\"SeasonCode\":\"SeasonCode\",\"TicketType\":\"TicketType\",\"PricatPriceCode\":\"PricatPriceCode\",\"WarehouseCode\":\"WarehouseCode\",\"UnitOfMeasure\":\"UnitOfMeasure\",\"InformationPriceE\":\"InformationPriceE\",\"InformationPriceF\":\"InformationPriceF\",\"Picture\":\"Picture\",\"SeriesNumber\":\"SeriesNumber\",\"ModelNumber\":\"ModelNumber\",\"BuyerSizeCode\":\"BuyerSizeCode\",\"VendorStyleNumber\":\"VendorStyleNumber\",\"BuyerItemNumber\":\"BuyerItemNumber\",\"CountryofOrigin\":\"CountryofOrigin\"},{\"LineNumber\":\"12\",\"EAN\":\"0009328374367\",\"ItemDescription\":\"Nike Flc Tracksuit Bb00\",\"OrderedQuantity\":\"20\",\"Discount_Code\":\" \",\"NetPrice\":\"27.99\",\"OrderCurrency\":\" \",\"Size\":\"24M\",\"Color\":\"Grey\",\"SeasonCode\":\"SeasonCode\",\"TicketType\":\"TicketType\",\"PricatPriceCode\":\"PricatPriceCode\",\"WarehouseCode\":\"WarehouseCode\",\"UnitOfMeasure\":\"UnitOfMeasure\",\"InformationPriceE\":\"InformationPriceE\",\"InformationPriceF\":\"InformationPriceF\",\"Picture\":\"Picture\",\"SeriesNumber\":\"SeriesNumber\",\"ModelNumber\":\"ModelNumber\",\"BuyerSizeCode\":\"BuyerSizeCode\",\"VendorStyleNumber\":\"VendorStyleNumber\",\"BuyerItemNumber\":\"BuyerItemNumber\",\"CountryofOrigin\":\"CountryofOrigin\"},{\"LineNumber\":\"13\",\"EAN\":\"0009328374343\",\"ItemDescription\":\"Nike Flc Tracksuit Bb00\",\"OrderedQuantity\":\"20\",\"Discount_Code\":\" \",\"NetPrice\":\"27.99\",\"OrderCurrency\":\" \",\"Size\":\"12M\",\"Color\":\"Grey\",\"SeasonCode\":\"SeasonCode\",\"TicketType\":\"TicketType\",\"PricatPriceCode\":\"PricatPriceCode\",\"WarehouseCode\":\"WarehouseCode\",\"UnitOfMeasure\":\"UnitOfMeasure\",\"InformationPriceE\":\"InformationPriceE\",\"InformationPriceF\":\"InformationPriceF\",\"Picture\":\"Picture\",\"SeriesNumber\":\"SeriesNumber\",\"ModelNumber\":\"ModelNumber\",\"BuyerSizeCode\":\"BuyerSizeCode\",\"VendorStyleNumber\":\"VendorStyleNumber\",\"BuyerItemNumber\":\"BuyerItemNumber\",\"CountryofOrigin\":\"CountryofOrigin\"},{\"LineNumber\":\"14\",\"EAN\":\"0009328374312\",\"ItemDescription\":\"Nike Flc Tracksuit Bb00\",\"OrderedQuantity\":\"20\",\"Discount_Code\":\" \",\"NetPrice\":\"27.99\",\"OrderCurrency\":\" \",\"Size\":\"18M\",\"Color\":\"Black\",\"SeasonCode\":\"SeasonCode\",\"TicketType\":\"TicketType\",\"PricatPriceCode\":\"PricatPriceCode\",\"WarehouseCode\":\"WarehouseCode\",\"UnitOfMeasure\":\"UnitOfMeasure\",\"InformationPriceE\":\"InformationPriceE\",\"InformationPriceF\":\"InformationPriceF\",\"Picture\":\"Picture\",\"SeriesNumber\":\"SeriesNumber\",\"ModelNumber\":\"ModelNumber\",\"BuyerSizeCode\":\"BuyerSizeCode\",\"VendorStyleNumber\":\"VendorStyleNumber\",\"BuyerItemNumber\":\"BuyerItemNumber\",\"CountryofOrigin\":\"CountryofOrigin\"},{\"LineNumber\":\"15\",\"EAN\":\"0009328374329\",\"ItemDescription\":\"Nike Flc Tracksuit Bb00\",\"OrderedQuantity\":\"20\",\"Discount_Code\":\" \",\"NetPrice\":\"27.99\",\"OrderCurrency\":\" \",\"Size\":\"24M\",\"Color\":\"Black\",\"SeasonCode\":\"SeasonCode\",\"TicketType\":\"TicketType\",\"PricatPriceCode\":\"PricatPriceCode\",\"WarehouseCode\":\"WarehouseCode\",\"UnitOfMeasure\":\"UnitOfMeasure\",\"InformationPriceE\":\"InformationPriceE\",\"InformationPriceF\":\"InformationPriceF\",\"Picture\":\"Picture\",\"SeriesNumber\":\"SeriesNumber\",\"ModelNumber\":\"ModelNumber\",\"BuyerSizeCode\":\"BuyerSizeCode\",\"VendorStyleNumber\":\"VendorStyleNumber\",\"BuyerItemNumber\":\"BuyerItemNumber\",\"CountryofOrigin\":\"CountryofOrigin\"},{\"LineNumber\":\"16\",\"EAN\":\"0009328374305\",\"ItemDescription\":\"Nike Flc Tracksuit Bb00\",\"OrderedQuantity\":\"20\",\"Discount_Code\":\" \",\"NetPrice\":\"27.99\",\"OrderCurrency\":\" \",\"Size\":\"12M\",\"Color\":\"Black\",\"SeasonCode\":\"SeasonCode\",\"TicketType\":\"TicketType\",\"PricatPriceCode\":\"PricatPriceCode\",\"WarehouseCode\":\"WarehouseCode\",\"UnitOfMeasure\":\"UnitOfMeasure\",\"InformationPriceE\":\"InformationPriceE\",\"InformationPriceF\":\"InformationPriceF\",\"Picture\":\"Picture\",\"SeriesNumber\":\"SeriesNumber\",\"ModelNumber\":\"ModelNumber\",\"BuyerSizeCode\":\"BuyerSizeCode\",\"VendorStyleNumber\":\"VendorStyleNumber\",\"BuyerItemNumber\":\"BuyerItemNumber\",\"CountryofOrigin\":\"CountryofOrigin\"},{\"LineNumber\":\"17\",\"EAN\":\"0677838106114\",\"ItemDescription\":\"Jordan HBR Gymsack JB13\",\"OrderedQuantity\":\"20\",\"Discount_Code\":\" \",\"NetPrice\":\"17.99\",\"OrderCurrency\":\" \",\"Size\":\"One Size\",\"Color\":\"Black\",\"SeasonCode\":\"SeasonCode\",\"TicketType\":\"TicketType\",\"PricatPriceCode\":\"PricatPriceCode\",\"WarehouseCode\":\"WarehouseCode\",\"UnitOfMeasure\":\"UnitOfMeasure\",\"InformationPriceE\":\"InformationPriceE\",\"InformationPriceF\":\"InformationPriceF\",\"Picture\":\"Picture\",\"SeriesNumber\":\"SeriesNumber\",\"ModelNumber\":\"ModelNumber\",\"BuyerSizeCode\":\"BuyerSizeCode\",\"VendorStyleNumber\":\"VendorStyleNumber\",\"BuyerItemNumber\":\"BuyerItemNumber\",\"CountryofOrigin\":\"CountryofOrigin\"},{\"LineNumber\":\"18\",\"EAN\":\"0617847967528\",\"ItemDescription\":\"Jordan Snapback JB12\",\"OrderedQuantity\":\"20\",\"Discount_Code\":\" \",\"NetPrice\":\"16.99\",\"OrderCurrency\":\" \",\"Size\":\"Junior\",\"Color\":\"BlackRed\",\"SeasonCode\":\"SeasonCode\",\"TicketType\":\"TicketType\",\"PricatPriceCode\":\"PricatPriceCode\",\"WarehouseCode\":\"WarehouseCode\",\"UnitOfMeasure\":\"UnitOfMeasure\",\"InformationPriceE\":\"InformationPriceE\",\"InformationPriceF\":\"InformationPriceF\",\"Picture\":\"Picture\",\"SeriesNumber\":\"SeriesNumber\",\"ModelNumber\":\"ModelNumber\",\"BuyerSizeCode\":\"BuyerSizeCode\",\"VendorStyleNumber\":\"VendorStyleNumber\",\"BuyerItemNumber\":\"BuyerItemNumber\",\"CountryofOrigin\":\"CountryofOrigin\"},{\"LineNumber\":\"19\",\"EAN\":\"0677838787740\",\"ItemDescription\":\"Jordan HBR Cap JB12\",\"OrderedQuantity\":\"20\",\"Discount_Code\":\" \",\"NetPrice\":\"16.99\",\"OrderCurrency\":\" \",\"Size\":\"Junior\",\"Color\":\"Black\",\"SeasonCode\":\"SeasonCode\",\"TicketType\":\"TicketType\",\"PricatPriceCode\":\"PricatPriceCode\",\"WarehouseCode\":\"WarehouseCode\",\"UnitOfMeasure\":\"UnitOfMeasure\",\"InformationPriceE\":\"InformationPriceE\",\"InformationPriceF\":\"InformationPriceF\",\"Picture\":\"Picture\",\"SeriesNumber\":\"SeriesNumber\",\"ModelNumber\":\"ModelNumber\",\"BuyerSizeCode\":\"BuyerSizeCode\",\"VendorStyleNumber\":\"VendorStyleNumber\",\"BuyerItemNumber\":\"BuyerItemNumber\",\"CountryofOrigin\":\"CountryofOrigin\"},{\"LineNumber\":\"20\",\"EAN\":\"0009328222323\",\"ItemDescription\":\"Jordan Dri T-Shirt JB00\",\"OrderedQuantity\":\"20\",\"Discount_Code\":\" \",\"NetPrice\":\"17.99\",\"OrderCurrency\":\" \",\"Size\":\"13 (XL)\",\"Color\":\"Black\",\"SeasonCode\":\"SeasonCode\",\"TicketType\":\"TicketType\",\"PricatPriceCode\":\"PricatPriceCode\",\"WarehouseCode\":\"WarehouseCode\",\"UnitOfMeasure\":\"UnitOfMeasure\",\"InformationPriceE\":\"InformationPriceE\",\"InformationPriceF\":\"InformationPriceF\",\"Picture\":\"Picture\",\"SeriesNumber\":\"SeriesNumber\",\"ModelNumber\":\"ModelNumber\",\"BuyerSizeCode\":\"BuyerSizeCode\",\"VendorStyleNumber\":\"VendorStyleNumber\",\"BuyerItemNumber\":\"BuyerItemNumber\",\"CountryofOrigin\":\"CountryofOrigin\"},{\"LineNumber\":\"21\",\"EAN\":\"0009328222316\",\"ItemDescription\":\"Jordan Dri T-Shirt JB00\",\"OrderedQuantity\":\"20\",\"Discount_Code\":\" \",\"NetPrice\":\"17.99\",\"OrderCurrency\":\" \",\"Size\":\"11-12 (L)\",\"Color\":\"Black\",\"SeasonCode\":\"SeasonCode\",\"TicketType\":\"TicketType\",\"PricatPriceCode\":\"PricatPriceCode\",\"WarehouseCode\":\"WarehouseCode\",\"UnitOfMeasure\":\"UnitOfMeasure\",\"InformationPriceE\":\"InformationPriceE\",\"InformationPriceF\":\"InformationPriceF\",\"Picture\":\"Picture\",\"SeriesNumber\":\"SeriesNumber\",\"ModelNumber\":\"ModelNumber\",\"BuyerSizeCode\":\"BuyerSizeCode\",\"VendorStyleNumber\":\"VendorStyleNumber\",\"BuyerItemNumber\":\"BuyerItemNumber\",\"CountryofOrigin\":\"CountryofOrigin\"},{\"LineNumber\":\"22\",\"EAN\":\"0009328222309\",\"ItemDescription\":\"Jordan Dri T-Shirt JB00\",\"OrderedQuantity\":\"20\",\"Discount_Code\":\" \",\"NetPrice\":\"17.99\",\"OrderCurrency\":\" \",\"Size\":\"9-10 (M)\",\"Color\":\"Black\",\"SeasonCode\":\"SeasonCode\",\"TicketType\":\"TicketType\",\"PricatPriceCode\":\"PricatPriceCode\",\"WarehouseCode\":\"WarehouseCode\",\"UnitOfMeasure\":\"UnitOfMeasure\",\"InformationPriceE\":\"InformationPriceE\",\"InformationPriceF\":\"InformationPriceF\",\"Picture\":\"Picture\",\"SeriesNumber\":\"SeriesNumber\",\"ModelNumber\":\"ModelNumber\",\"BuyerSizeCode\":\"BuyerSizeCode\",\"VendorStyleNumber\":\"VendorStyleNumber\",\"BuyerItemNumber\":\"BuyerItemNumber\",\"CountryofOrigin\":\"CountryofOrigin\"},{\"LineNumber\":\"23\",\"EAN\":\"0009328222293\",\"ItemDescription\":\"Jordan Dri T-Shirt JB00\",\"OrderedQuantity\":\"20\",\"Discount_Code\":\" \",\"NetPrice\":\"17.99\",\"OrderCurrency\":\" \",\"Size\":\"7-8 (S)\",\"Color\":\"Black\",\"SeasonCode\":\"SeasonCode\",\"TicketType\":\"TicketType\",\"PricatPriceCode\":\"PricatPriceCode\",\"WarehouseCode\":\"WarehouseCode\",\"UnitOfMeasure\":\"UnitOfMeasure\",\"InformationPriceE\":\"InformationPriceE\",\"InformationPriceF\":\"InformationPriceF\",\"Picture\":\"Picture\",\"SeriesNumber\":\"SeriesNumber\",\"ModelNumber\":\"ModelNumber\",\"BuyerSizeCode\":\"BuyerSizeCode\",\"VendorStyleNumber\":\"VendorStyleNumber\",\"BuyerItemNumber\":\"BuyerItemNumber\",\"CountryofOrigin\":\"CountryofOrigin\"},{\"LineNumber\":\"24\",\"EAN\":\"0677838535730\",\"ItemDescription\":\"Jordan CH Pant JB11\",\"OrderedQuantity\":\"20\",\"Discount_Code\":\" \",\"NetPrice\":\"33.99\",\"OrderCurrency\":\" \",\"Size\":\"9-10 (M)\",\"Color\":\"BlackGrey\",\"SeasonCode\":\"SeasonCode\",\"TicketType\":\"TicketType\",\"PricatPriceCode\":\"PricatPriceCode\",\"WarehouseCode\":\"WarehouseCode\",\"UnitOfMeasure\":\"UnitOfMeasure\",\"InformationPriceE\":\"InformationPriceE\",\"InformationPriceF\":\"InformationPriceF\",\"Picture\":\"Picture\",\"SeriesNumber\":\"SeriesNumber\",\"ModelNumber\":\"ModelNumber\",\"BuyerSizeCode\":\"BuyerSizeCode\",\"VendorStyleNumber\":\"VendorStyleNumber\",\"BuyerItemNumber\":\"BuyerItemNumber\",\"CountryofOrigin\":\"CountryofOrigin\"},{\"LineNumber\":\"25\",\"EAN\":\"0677838535747\",\"ItemDescription\":\"Jordan CH Pant JB11\",\"OrderedQuantity\":\"20\",\"Discount_Code\":\" \",\"NetPrice\":\"33.99\",\"OrderCurrency\":\" \",\"Size\":\"11-12 (L)\",\"Color\":\"BlackGrey\",\"SeasonCode\":\"SeasonCode\",\"TicketType\":\"TicketType\",\"PricatPriceCode\":\"PricatPriceCode\",\"WarehouseCode\":\"WarehouseCode\",\"UnitOfMeasure\":\"UnitOfMeasure\",\"InformationPriceE\":\"InformationPriceE\",\"InformationPriceF\":\"InformationPriceF\",\"Picture\":\"Picture\",\"SeriesNumber\":\"SeriesNumber\",\"ModelNumber\":\"ModelNumber\",\"BuyerSizeCode\":\"BuyerSizeCode\",\"VendorStyleNumber\":\"VendorStyleNumber\",\"BuyerItemNumber\":\"BuyerItemNumber\",\"CountryofOrigin\":\"CountryofOrigin\"},{\"LineNumber\":\"26\",\"EAN\":\"0677838535754\",\"ItemDescription\":\"Jordan CH Pant JB11\",\"OrderedQuantity\":\"20\",\"Discount_Code\":\" \",\"NetPrice\":\"33.99\",\"OrderCurrency\":\" \",\"Size\":\"13 (XL)\",\"Color\":\"BlackGrey\",\"SeasonCode\":\"SeasonCode\",\"TicketType\":\"TicketType\",\"PricatPriceCode\":\"PricatPriceCode\",\"WarehouseCode\":\"WarehouseCode\",\"UnitOfMeasure\":\"UnitOfMeasure\",\"InformationPriceE\":\"InformationPriceE\",\"InformationPriceF\":\"InformationPriceF\",\"Picture\":\"Picture\",\"SeriesNumber\":\"SeriesNumber\",\"ModelNumber\":\"ModelNumber\",\"BuyerSizeCode\":\"BuyerSizeCode\",\"VendorStyleNumber\":\"VendorStyleNumber\",\"BuyerItemNumber\":\"BuyerItemNumber\",\"CountryofOrigin\":\"CountryofOrigin\"},{\"LineNumber\":\"27\",\"EAN\":\"0677838535679\",\"ItemDescription\":\"Jordan CH Pant JB11\",\"OrderedQuantity\":\"20\",\"Discount_Code\":\" \",\"NetPrice\":\"33.99\",\"OrderCurrency\":\" \",\"Size\":\"7-8 (S)\",\"Color\":\"BlackRed\",\"SeasonCode\":\"SeasonCode\",\"TicketType\":\"TicketType\",\"PricatPriceCode\":\"PricatPriceCode\",\"WarehouseCode\":\"WarehouseCode\",\"UnitOfMeasure\":\"UnitOfMeasure\",\"InformationPriceE\":\"InformationPriceE\",\"InformationPriceF\":\"InformationPriceF\",\"Picture\":\"Picture\",\"SeriesNumber\":\"SeriesNumber\",\"ModelNumber\":\"ModelNumber\",\"BuyerSizeCode\":\"BuyerSizeCode\",\"VendorStyleNumber\":\"VendorStyleNumber\",\"BuyerItemNumber\":\"BuyerItemNumber\",\"CountryofOrigin\":\"CountryofOrigin\"},{\"LineNumber\":\"28\",\"EAN\":\"0677838535686\",\"ItemDescription\":\"Jordan CH Pant JB11\",\"OrderedQuantity\":\"20\",\"Discount_Code\":\" \",\"NetPrice\":\"33.99\",\"OrderCurrency\":\" \",\"Size\":\"9-10 (M)\",\"Color\":\"BlackRed\",\"SeasonCode\":\"SeasonCode\",\"TicketType\":\"TicketType\",\"PricatPriceCode\":\"PricatPriceCode\",\"WarehouseCode\":\"WarehouseCode\",\"UnitOfMeasure\":\"UnitOfMeasure\",\"InformationPriceE\":\"InformationPriceE\",\"InformationPriceF\":\"InformationPriceF\",\"Picture\":\"Picture\",\"SeriesNumber\":\"SeriesNumber\",\"ModelNumber\":\"ModelNumber\",\"BuyerSizeCode\":\"BuyerSizeCode\",\"VendorStyleNumber\":\"VendorStyleNumber\",\"BuyerItemNumber\":\"BuyerItemNumber\",\"CountryofOrigin\":\"CountryofOrigin\"},{\"LineNumber\":\"29\",\"EAN\":\"0677838535693\",\"ItemDescription\":\"Jordan CH Pant JB11\",\"OrderedQuantity\":\"20\",\"Discount_Code\":\" \",\"NetPrice\":\"33.99\",\"OrderCurrency\":\" \",\"Size\":\"11-12 (L)\",\"Color\":\"BlackRed\",\"SeasonCode\":\"SeasonCode\",\"TicketType\":\"TicketType\",\"PricatPriceCode\":\"PricatPriceCode\",\"WarehouseCode\":\"WarehouseCode\",\"UnitOfMeasure\":\"UnitOfMeasure\",\"InformationPriceE\":\"InformationPriceE\",\"InformationPriceF\":\"InformationPriceF\",\"Picture\":\"Picture\",\"SeriesNumber\":\"SeriesNumber\",\"ModelNumber\":\"ModelNumber\",\"BuyerSizeCode\":\"BuyerSizeCode\",\"VendorStyleNumber\":\"VendorStyleNumber\",\"BuyerItemNumber\":\"BuyerItemNumber\",\"CountryofOrigin\":\"CountryofOrigin\"},{\"LineNumber\":\"30\",\"EAN\":\"0677838535723\",\"ItemDescription\":\"Jordan CH Pant JB11\",\"OrderedQuantity\":\"20\",\"Discount_Code\":\" \",\"NetPrice\":\"33.99\",\"OrderCurrency\":\" \",\"Size\":\"7-8 (S)\",\"Color\":\"BlackGrey\",\"SeasonCode\":\"SeasonCode\",\"TicketType\":\"TicketType\",\"PricatPriceCode\":\"PricatPriceCode\",\"WarehouseCode\":\"WarehouseCode\",\"UnitOfMeasure\":\"UnitOfMeasure\",\"InformationPriceE\":\"InformationPriceE\",\"InformationPriceF\":\"InformationPriceF\",\"Picture\":\"Picture\",\"SeriesNumber\":\"SeriesNumber\",\"ModelNumber\":\"ModelNumber\",\"BuyerSizeCode\":\"BuyerSizeCode\",\"VendorStyleNumber\":\"VendorStyleNumber\",\"BuyerItemNumber\":\"BuyerItemNumber\",\"CountryofOrigin\":\"CountryofOrigin\"},{\"LineNumber\":\"31\",\"EAN\":\"0677838535709\",\"ItemDescription\":\"Jordan CH Pant JB11\",\"OrderedQuantity\":\"20\",\"Discount_Code\":\" \",\"NetPrice\":\"33.99\",\"OrderCurrency\":\" \",\"Size\":\"13 (XL)\",\"Color\":\"BlackRed\",\"SeasonCode\":\"SeasonCode\",\"TicketType\":\"TicketType\",\"PricatPriceCode\":\"PricatPriceCode\",\"WarehouseCode\":\"WarehouseCode\",\"UnitOfMeasure\":\"UnitOfMeasure\",\"InformationPriceE\":\"InformationPriceE\",\"InformationPriceF\":\"InformationPriceF\",\"Picture\":\"Picture\",\"SeriesNumber\":\"SeriesNumber\",\"ModelNumber\":\"ModelNumber\",\"BuyerSizeCode\":\"BuyerSizeCode\",\"VendorStyleNumber\":\"VendorStyleNumber\",\"BuyerItemNumber\":\"BuyerItemNumber\",\"CountryofOrigin\":\"CountryofOrigin\"},{\"LineNumber\":\"32\",\"EAN\":\"0677838535242\",\"ItemDescription\":\"Jordan OTH Hood JnB11\",\"OrderedQuantity\":\"20\",\"Discount_Code\":\" \",\"NetPrice\":\"37.99\",\"OrderCurrency\":\" \",\"Size\":\"11-12 (L)\",\"Color\":\"BlackRed\",\"SeasonCode\":\"SeasonCode\",\"TicketType\":\"TicketType\",\"PricatPriceCode\":\"PricatPriceCode\",\"WarehouseCode\":\"WarehouseCode\",\"UnitOfMeasure\":\"UnitOfMeasure\",\"InformationPriceE\":\"InformationPriceE\",\"InformationPriceF\":\"InformationPriceF\",\"Picture\":\"Picture\",\"SeriesNumber\":\"SeriesNumber\",\"ModelNumber\":\"ModelNumber\",\"BuyerSizeCode\":\"BuyerSizeCode\",\"VendorStyleNumber\":\"VendorStyleNumber\",\"BuyerItemNumber\":\"BuyerItemNumber\",\"CountryofOrigin\":\"CountryofOrigin\"},{\"LineNumber\":\"33\",\"EAN\":\"0677838535259\",\"ItemDescription\":\"Jordan OTH Hood JnB11\",\"OrderedQuantity\":\"20\",\"Discount_Code\":\" \",\"NetPrice\":\"37.99\",\"OrderCurrency\":\" \",\"Size\":\"13 (XL)\",\"Color\":\"BlackRed\",\"SeasonCode\":\"SeasonCode\",\"TicketType\":\"TicketType\",\"PricatPriceCode\":\"PricatPriceCode\",\"WarehouseCode\":\"WarehouseCode\",\"UnitOfMeasure\":\"UnitOfMeasure\",\"InformationPriceE\":\"InformationPriceE\",\"InformationPriceF\":\"InformationPriceF\",\"Picture\":\"Picture\",\"SeriesNumber\":\"SeriesNumber\",\"ModelNumber\":\"ModelNumber\",\"BuyerSizeCode\":\"BuyerSizeCode\",\"VendorStyleNumber\":\"VendorStyleNumber\",\"BuyerItemNumber\":\"BuyerItemNumber\",\"CountryofOrigin\":\"CountryofOrigin\"},{\"LineNumber\":\"34\",\"EAN\":\"0677838535303\",\"ItemDescription\":\"Jordan OTH Hood JnB11\",\"OrderedQuantity\":\"20\",\"Discount_Code\":\" \",\"NetPrice\":\"37.99\",\"OrderCurrency\":\" \",\"Size\":\"13 (XL)\",\"Color\":\"BlackGrey\",\"SeasonCode\":\"SeasonCode\",\"TicketType\":\"TicketType\",\"PricatPriceCode\":\"PricatPriceCode\",\"WarehouseCode\":\"WarehouseCode\",\"UnitOfMeasure\":\"UnitOfMeasure\",\"InformationPriceE\":\"InformationPriceE\",\"InformationPriceF\":\"InformationPriceF\",\"Picture\":\"Picture\",\"SeriesNumber\":\"SeriesNumber\",\"ModelNumber\":\"ModelNumber\",\"BuyerSizeCode\":\"BuyerSizeCode\",\"VendorStyleNumber\":\"VendorStyleNumber\",\"BuyerItemNumber\":\"BuyerItemNumber\",\"CountryofOrigin\":\"CountryofOrigin\"},{\"LineNumber\":\"35\",\"EAN\":\"0677838535280\",\"ItemDescription\":\"Jordan OTH Hood JnB11\",\"OrderedQuantity\":\"20\",\"Discount_Code\":\" \",\"NetPrice\":\"37.99\",\"OrderCurrency\":\" \",\"Size\":\"9-10 (M)\",\"Color\":\"BlackGrey\",\"SeasonCode\":\"SeasonCode\",\"TicketType\":\"TicketType\",\"PricatPriceCode\":\"PricatPriceCode\",\"WarehouseCode\":\"WarehouseCode\",\"UnitOfMeasure\":\"UnitOfMeasure\",\"InformationPriceE\":\"InformationPriceE\",\"InformationPriceF\":\"InformationPriceF\",\"Picture\":\"Picture\",\"SeriesNumber\":\"SeriesNumber\",\"ModelNumber\":\"ModelNumber\",\"BuyerSizeCode\":\"BuyerSizeCode\",\"VendorStyleNumber\":\"VendorStyleNumber\",\"BuyerItemNumber\":\"BuyerItemNumber\",\"CountryofOrigin\":\"CountryofOrigin\"},{\"LineNumber\":\"36\",\"EAN\":\"0677838535273\",\"ItemDescription\":\"Jordan OTH Hood JnB11\",\"OrderedQuantity\":\"20\",\"Discount_Code\":\" \",\"NetPrice\":\"37.99\",\"OrderCurrency\":\" \",\"Size\":\"7-8 (S)\",\"Color\":\"BlackGrey\",\"SeasonCode\":\"SeasonCode\",\"TicketType\":\"TicketType\",\"PricatPriceCode\":\"PricatPriceCode\",\"WarehouseCode\":\"WarehouseCode\",\"UnitOfMeasure\":\"UnitOfMeasure\",\"InformationPriceE\":\"InformationPriceE\",\"InformationPriceF\":\"InformationPriceF\",\"Picture\":\"Picture\",\"SeriesNumber\":\"SeriesNumber\",\"ModelNumber\":\"ModelNumber\",\"BuyerSizeCode\":\"BuyerSizeCode\",\"VendorStyleNumber\":\"VendorStyleNumber\",\"BuyerItemNumber\":\"BuyerItemNumber\",\"CountryofOrigin\":\"CountryofOrigin\"},{\"LineNumber\":\"37\",\"EAN\":\"0677838535235\",\"ItemDescription\":\"Jordan OTH Hood JnB11\",\"OrderedQuantity\":\"20\",\"Discount_Code\":\" \",\"NetPrice\":\"37.99\",\"OrderCurrency\":\" \",\"Size\":\"9-10 (M)\",\"Color\":\"BlackRed\",\"SeasonCode\":\"SeasonCode\",\"TicketType\":\"TicketType\",\"PricatPriceCode\":\"PricatPriceCode\",\"WarehouseCode\":\"WarehouseCode\",\"UnitOfMeasure\":\"UnitOfMeasure\",\"InformationPriceE\":\"InformationPriceE\",\"InformationPriceF\":\"InformationPriceF\",\"Picture\":\"Picture\",\"SeriesNumber\":\"SeriesNumber\",\"ModelNumber\":\"ModelNumber\",\"BuyerSizeCode\":\"BuyerSizeCode\",\"VendorStyleNumber\":\"VendorStyleNumber\",\"BuyerItemNumber\":\"BuyerItemNumber\",\"CountryofOrigin\":\"CountryofOrigin\"},{\"LineNumber\":\"38\",\"EAN\":\"0677838535228\",\"ItemDescription\":\"Jordan OTH Hood JnB11\",\"OrderedQuantity\":\"20\",\"Discount_Code\":\" \",\"NetPrice\":\"37.99\",\"OrderCurrency\":\" \",\"Size\":\"7-8 (S)\",\"Color\":\"BlackRed\",\"SeasonCode\":\"SeasonCode\",\"TicketType\":\"TicketType\",\"PricatPriceCode\":\"PricatPriceCode\",\"WarehouseCode\":\"WarehouseCode\",\"UnitOfMeasure\":\"UnitOfMeasure\",\"InformationPriceE\":\"InformationPriceE\",\"InformationPriceF\":\"InformationPriceF\",\"Picture\":\"Picture\",\"SeriesNumber\":\"SeriesNumber\",\"ModelNumber\":\"ModelNumber\",\"BuyerSizeCode\":\"BuyerSizeCode\",\"VendorStyleNumber\":\"VendorStyleNumber\",\"BuyerItemNumber\":\"BuyerItemNumber\",\"CountryofOrigin\":\"CountryofOrigin\"},{\"LineNumber\":\"39\",\"EAN\":\"0677838535297\",\"ItemDescription\":\"Jordan OTH Hood JnB11\",\"OrderedQuantity\":\"20\",\"Discount_Code\":\" \",\"NetPrice\":\"37.99\",\"OrderCurrency\":\" \",\"Size\":\"11-12 (L)\",\"Color\":\"BlackGrey\",\"SeasonCode\":\"SeasonCode\",\"TicketType\":\"TicketType\",\"PricatPriceCode\":\"PricatPriceCode\",\"WarehouseCode\":\"WarehouseCode\",\"UnitOfMeasure\":\"UnitOfMeasure\",\"InformationPriceE\":\"InformationPriceE\",\"InformationPriceF\":\"InformationPriceF\",\"Picture\":\"Picture\",\"SeriesNumber\":\"SeriesNumber\",\"ModelNumber\":\"ModelNumber\",\"BuyerSizeCode\":\"BuyerSizeCode\",\"VendorStyleNumber\":\"VendorStyleNumber\",\"BuyerItemNumber\":\"BuyerItemNumber\",\"CountryofOrigin\":\"CountryofOrigin\"},{\"LineNumber\":\"40\",\"EAN\":\"0677838535198\",\"ItemDescription\":\"Jordan FZ Hood JB11\",\"OrderedQuantity\":\"20\",\"Discount_Code\":\" \",\"NetPrice\":\"39.99\",\"OrderCurrency\":\" \",\"Size\":\"11-12 (L)\",\"Color\":\"BlackGrey\",\"SeasonCode\":\"SeasonCode\",\"TicketType\":\"TicketType\",\"PricatPriceCode\":\"PricatPriceCode\",\"WarehouseCode\":\"WarehouseCode\",\"UnitOfMeasure\":\"UnitOfMeasure\",\"InformationPriceE\":\"InformationPriceE\",\"InformationPriceF\":\"InformationPriceF\",\"Picture\":\"Picture\",\"SeriesNumber\":\"SeriesNumber\",\"ModelNumber\":\"ModelNumber\",\"BuyerSizeCode\":\"BuyerSizeCode\",\"VendorStyleNumber\":\"VendorStyleNumber\",\"BuyerItemNumber\":\"BuyerItemNumber\",\"CountryofOrigin\":\"CountryofOrigin\"}]}}}") ;
Var.var2 = new String("{\"requestWrapperE\":") + row21.E + new String("}") ;// ###############################
        // ###############################
        // # Output tables

copyOfoutApi = null;
copyOfoutputE = null;


// # Output table : 'copyOfoutApi'
copyOfoutApi_tmp.body = null;
copyOfoutApi_tmp.string = Var.var2;
copyOfoutApi_tmp.statusCode = null;
copyOfoutApi = copyOfoutApi_tmp;

// # Output table : 'copyOfoutputE'
copyOfoutputE_tmp.E = Var.var2;
copyOfoutputE = copyOfoutputE_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_9 = false;










 


	tos_count_tMap_9++;

/**
 * [tMap_9 main ] stop
 */
	
	/**
	 * [tMap_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

 



/**
 * [tMap_9 process_data_begin ] stop
 */
// Start of branch "copyOfoutApi"
if(copyOfoutApi != null) { 



	
	/**
	 * [tRESTClient_2 main ] start
	 */

	

	
	
	currentComponent="tRESTClient_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfoutApi");
					}
					
	row23 = null;	row22 = null;

// expected response body
javax.ws.rs.core.Response responseDoc_tRESTClient_2 = null;

try {
	// request body
	org.dom4j.Document requestDoc_tRESTClient_2 = null;
	String requestString_tRESTClient_2 = null;
			if (null != copyOfoutApi.body) {
				requestDoc_tRESTClient_2 = copyOfoutApi.body.getDocument();
			}
			requestString_tRESTClient_2 = copyOfoutApi.string;

	Object requestBody_tRESTClient_2 = requestDoc_tRESTClient_2 != null ? requestDoc_tRESTClient_2 : requestString_tRESTClient_2;

	

    //resposne class name
	Class<?> responseClass_tRESTClient_2
		= String.class;

	// create web client instance
	org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean factoryBean_tRESTClient_2 =
			new org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean();

	boolean inOSGi = routines.system.BundleUtils.inOSGi();

	final java.util.List<org.apache.cxf.feature.Feature> features_tRESTClient_2 =
			new java.util.ArrayList<org.apache.cxf.feature.Feature>();

	
		String url = "https://haddad-europe.my.salesforce.com";
		// {baseUri}tRESTClient
		factoryBean_tRESTClient_2.setServiceName(new javax.xml.namespace.QName(url, "tRESTClient"));
		factoryBean_tRESTClient_2.setAddress(url);
	

	

	
		features_tRESTClient_2.add(new org.apache.cxf.feature.LoggingFeature());
	

	

	factoryBean_tRESTClient_2.setFeatures(features_tRESTClient_2);


	java.util.List<Object> providers_tRESTClient_2 = new java.util.ArrayList<Object>();
	providers_tRESTClient_2.add(new org.apache.cxf.jaxrs.provider.dom4j.DOM4JProvider() {
		// workaround for https://jira.talendforge.org/browse/TESB-7276
		public org.dom4j.Document readFrom(Class<org.dom4j.Document> cls,
											java.lang.reflect.Type type,
											java.lang.annotation.Annotation[] anns,
											javax.ws.rs.core.MediaType mt,
											javax.ws.rs.core.MultivaluedMap<String, String> headers,
											java.io.InputStream is)
				throws IOException, javax.ws.rs.WebApplicationException {
			String contentLength = headers.getFirst("Content-Length");
			if (!org.apache.cxf.common.util.StringUtils.isEmpty(contentLength)
					&& Integer.valueOf(contentLength) <= 0) {
				try {
					return org.dom4j.DocumentHelper.parseText("<root/>");
				} catch (org.dom4j.DocumentException e_tRESTClient_2) {
					e_tRESTClient_2.printStackTrace();
				}
				return null;
			}
			return super.readFrom(cls, type, anns, mt, headers, is);
		}
	});
	org.apache.cxf.jaxrs.provider.json.JSONProvider jsonProvider_tRESTClient_2 =
			new org.apache.cxf.jaxrs.provider.json.JSONProvider();
		jsonProvider_tRESTClient_2.setIgnoreNamespaces(true);
		jsonProvider_tRESTClient_2.setAttributesToElements(true);
	
	
		jsonProvider_tRESTClient_2.setSupportUnwrapped(true);
		jsonProvider_tRESTClient_2.setWrapperName("root");
	
	
		jsonProvider_tRESTClient_2.setDropRootElement(true);
		jsonProvider_tRESTClient_2.setConvertTypesToStrings(true);
	providers_tRESTClient_2.add(jsonProvider_tRESTClient_2);
	factoryBean_tRESTClient_2.setProviders(providers_tRESTClient_2);
	factoryBean_tRESTClient_2.setTransportId("http://cxf.apache.org/transports/http");

	boolean use_auth_tRESTClient_2 = false;
	if (use_auth_tRESTClient_2 && "SAML".equals("OAUTH2_BEARER")) {
		if (!inOSGi) {
			throw new IllegalArgumentException("SAML based security scenarios are not supported in Studio (standalone)");
		}
		// set SAML Token authentication
		
		 
	final String decryptedPassword_tRESTClient_2 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[2rXyTIVeP2vLjZdUROuMFqR3rnid+gjlf4ZK8cxbikM18PjkE40=]");

		org.apache.cxf.ws.security.trust.STSClient stsClient =
			org.talend.esb.security.saml.STSClientUtils.createSTSClient(factoryBean_tRESTClient_2.getBus(),
				"otman.nikraj@haddadeurope.com.partial", decryptedPassword_tRESTClient_2);
		
		org.talend.esb.security.saml.SAMLRESTUtils.configureClient(factoryBean_tRESTClient_2, stsClient);
	}

	org.apache.cxf.jaxrs.client.WebClient webClient_tRESTClient_2 = factoryBean_tRESTClient_2.createWebClient();

	// set request path
	webClient_tRESTClient_2.path("/services/apexrest/APXX_OrderProductRestService/doPost_WrapperE");

	// set connection properties
	org.apache.cxf.jaxrs.client.ClientConfiguration clientConfig_tRESTClient_2 = org.apache.cxf.jaxrs.client.WebClient.getConfig(webClient_tRESTClient_2);
	org.apache.cxf.transport.http.HTTPConduit conduit_tRESTClient_2 = clientConfig_tRESTClient_2.getHttpConduit();

    if (clientConfig_tRESTClient_2.getEndpoint() != null
            && clientConfig_tRESTClient_2.getEndpoint().getEndpointInfo() != null) {
        clientConfig_tRESTClient_2.getEndpoint().getEndpointInfo().setProperty("enable.webclient.operation.reporting",
                                                                          true);
    }

	

        org.apache.cxf.configuration.jsse.TLSClientParameters tlsClientParameters_tRESTClient_2 = new org.apache.cxf.configuration.jsse.TLSClientParameters();
        tlsClientParameters_tRESTClient_2.setDisableCNCheck(true);
        conduit_tRESTClient_2.setTlsClientParameters(tlsClientParameters_tRESTClient_2);

	

	if (use_auth_tRESTClient_2 && "BASIC".equals("OAUTH2_BEARER")) {
		// set BASIC auth
		
		 
	final String decryptedPassword_tRESTClient_2 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[dJlZ99jCaayPAEAgmtDcGoi5pTNeYwoB3lepZ6KpI4uX25zsoSU=]");

		org.apache.cxf.configuration.security.AuthorizationPolicy authPolicy_tRESTClient_2 = new org.apache.cxf.configuration.security.AuthorizationPolicy();
			authPolicy_tRESTClient_2.setAuthorizationType("Basic");
			authPolicy_tRESTClient_2.setUserName("otman.nikraj@haddadeurope.com.partial");
			authPolicy_tRESTClient_2.setPassword(decryptedPassword_tRESTClient_2);
		conduit_tRESTClient_2.setAuthorization(authPolicy_tRESTClient_2);
	} else if (use_auth_tRESTClient_2 && "HTTP Digest".equals("OAUTH2_BEARER")) {
		// set Digest auth
		
		 
	final String decryptedPassword_tRESTClient_2 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[0o2Ro4YqcynOltUvzB4z9EXbcABT6b5kd1oArAv4fJ5i7WJUPDg=]");

		org.apache.cxf.configuration.security.AuthorizationPolicy authPolicy_tRESTClient_2 = new org.apache.cxf.configuration.security.AuthorizationPolicy();
		authPolicy_tRESTClient_2.setAuthorizationType("Digest");
		authPolicy_tRESTClient_2.setUserName("otman.nikraj@haddadeurope.com.partial");
		authPolicy_tRESTClient_2.setPassword(decryptedPassword_tRESTClient_2);
		conduit_tRESTClient_2.setAuthorization(authPolicy_tRESTClient_2);
	}

	if (!inOSGi) {
		conduit_tRESTClient_2.getClient().setReceiveTimeout((long)(60 * 1000L));
		conduit_tRESTClient_2.getClient().setConnectionTimeout((long)(30 * 1000L));
		boolean use_proxy_tRESTClient_2 = false;
		if (use_proxy_tRESTClient_2) {
			
			 
	final String decryptedPassword_tRESTClient_2 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[KBvPD86PpVTO8OVhQ6wxCaXKGTiRKoySSPVQLQ==]");

			conduit_tRESTClient_2.getClient().setProxyServer("61.163.92.4");
			conduit_tRESTClient_2.getClient().setProxyServerPort(Integer.valueOf(8080));
			conduit_tRESTClient_2.getProxyAuthorization().setUserName("");
			conduit_tRESTClient_2.getProxyAuthorization().setPassword(decryptedPassword_tRESTClient_2);
		}
	}
	
	
		conduit_tRESTClient_2.getClient().setAutoRedirect(true);
		clientConfig_tRESTClient_2.getRequestContext().put("http.redirect.relative.uri", true);
		clientConfig_tRESTClient_2.getRequestContext().put("http.redirect.same.host.only", false);
	

	

	
		// set Content-Type
		webClient_tRESTClient_2.type("application/json");
	

	
		// set Accept-Type
		webClient_tRESTClient_2.accept("application/json");
	

	
		// set optional query and header properties if any
	
		webClient_tRESTClient_2.header("Authorization", globalMap.get("tokentype")+ " " +globalMap.get("accesstoken"));
	
		webClient_tRESTClient_2.header("Accept", "application/json");
	
	if (use_auth_tRESTClient_2 && "OAUTH2_BEARER".equals("OAUTH2_BEARER")) {
		// set oAuth2 bearer token
		webClient_tRESTClient_2.header("Authorization", "Bearer " + globalMap.get("access_token"));
	}
	
	if (use_auth_tRESTClient_2 && "OIDC_PASSWORD_GRANT".equals("OAUTH2_BEARER")) {
 
	final String decryptedPassword_tRESTClient_2 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[+kdd6ag8e7rMGNZCAZSJLMDWl7biKT1d4m+0y0YW6Lg/RLzWj3U=]");

        String username_tRESTClient_2 = "otman.nikraj@haddadeurope.com.partial";
        String password_tRESTClient_2 = decryptedPassword_tRESTClient_2;

        String bearerHeader_tRESTClient_2 = null;

        try {
			if (!inOSGi) {
				org.springframework.context.support.ClassPathXmlApplicationContext context_tRESTClient_2 =
					new org.springframework.context.support.ClassPathXmlApplicationContext("META-INF/tesb/oidc-context.xml");
				org.talend.esb.security.oidc.OidcConfiguration oidcConfiguration_tRESTClient_2 = context_tRESTClient_2.getBean(org.talend.esb.security.oidc.OidcConfiguration.class);
				bearerHeader_tRESTClient_2 = org.talend.esb.security.oidc.OidcClientUtils.oidcClientBearer(username_tRESTClient_2, password_tRESTClient_2, oidcConfiguration_tRESTClient_2);
			}else{
				bearerHeader_tRESTClient_2 = org.talend.esb.security.oidc.OidcClientUtils.oidcClientBearer(username_tRESTClient_2, password_tRESTClient_2);
			}
		} catch (Exception ex) {
            throw new javax.ws.rs.WebApplicationException("Failed to get OIDC access token: ", ex);
        }

		webClient_tRESTClient_2.header("Authorization", bearerHeader_tRESTClient_2);
	}
    
	// if FORM request then capture query parameters into Form, otherwise set them as queries
	
		
	


	try {
		// start send request
		
			
				responseDoc_tRESTClient_2 = webClient_tRESTClient_2.post(requestBody_tRESTClient_2);
			
		


		int webClientResponseStatus_tRESTClient_2 = webClient_tRESTClient_2.getResponse().getStatus();
		if (webClientResponseStatus_tRESTClient_2 >= 300) {
			throw new javax.ws.rs.WebApplicationException(webClient_tRESTClient_2.getResponse());
		}

		
			if (row22 == null) {
				row22 = new row22Struct();
			}

			row22.statusCode = webClientResponseStatus_tRESTClient_2;
			
				
				Object responseObj_tRESTClient_2 = null;
				if(responseDoc_tRESTClient_2 != null && responseDoc_tRESTClient_2.hasEntity()){
					responseObj_tRESTClient_2 = responseDoc_tRESTClient_2.readEntity(responseClass_tRESTClient_2);
				
				if(responseObj_tRESTClient_2 != null){
					if (responseClass_tRESTClient_2 == String.class) {
						row22.string = (String) responseObj_tRESTClient_2;
					} else {
						routines.system.Document responseTalendDoc_tRESTClient_2 = null;
						if (null != responseObj_tRESTClient_2) {
							responseTalendDoc_tRESTClient_2 = new routines.system.Document();
							responseTalendDoc_tRESTClient_2.setDocument((org.dom4j.Document) responseObj_tRESTClient_2);
						}
						row22.body = responseTalendDoc_tRESTClient_2;
					}
				}
			}
			


			globalMap.put("tRESTClient_2_HEADERS", webClient_tRESTClient_2.getResponse().getHeaders());
			
			
			
			// handle "oneway" for PUT, POST and PATCH with empty response payload
			if (webClientResponseStatus_tRESTClient_2 == 202 && responseObj_tRESTClient_2 == null){
				row22.string = "";
				return;
			}
			
		

	} catch (javax.ws.rs.WebApplicationException ex_tRESTClient_2) {
		
			if (row23 == null) {
				row23 = new row23Struct();
			}
			row23.errorCode = ex_tRESTClient_2.getResponse().getStatus();

			String errorMessage_tRESTClient_2 = null;
			try {
				errorMessage_tRESTClient_2 = ex_tRESTClient_2.getResponse().readEntity(String.class);
			} catch (Exception exe_tRESTClient_2) {
				// ignore
			}
			if (null == errorMessage_tRESTClient_2 || 0 == errorMessage_tRESTClient_2.trim().length()) {
				errorMessage_tRESTClient_2 = ex_tRESTClient_2.getMessage();
			}
			row23.errorMessage = errorMessage_tRESTClient_2;

			globalMap.put("tRESTClient_2_HEADERS", ex_tRESTClient_2.getResponse().getHeaders());
			
		
	}

} catch(Exception e_tRESTClient_2) {
	
		throw new TalendException(e_tRESTClient_2, currentComponent, globalMap);
	
}


 


	tos_count_tRESTClient_2++;

/**
 * [tRESTClient_2 main ] stop
 */
	
	/**
	 * [tRESTClient_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRESTClient_2";

	

 



/**
 * [tRESTClient_2 process_data_begin ] stop
 */
// Start of branch "row22"
if(row22 != null) { 



	
	/**
	 * [tLogRow_8 main ] start
	 */

	

	
	
	currentComponent="tLogRow_8";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row22");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_8 = new StringBuilder();




   				
	    		if(row22.body != null) { //              
                    							
       
				strBuffer_tLogRow_8.append(
				                String.valueOf(row22.body)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_8.append(";");
    			


   				
	    		if(row22.string != null) { //              
                    							
       
				strBuffer_tLogRow_8.append(
				                String.valueOf(row22.string)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_8.append(";");
    			


   				
	    		if(row22.statusCode != null) { //              
                    							
       
				strBuffer_tLogRow_8.append(
				                String.valueOf(row22.statusCode)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_8 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_8 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_8);
                    }
                    consoleOut_tLogRow_8.println(strBuffer_tLogRow_8.toString());
                    consoleOut_tLogRow_8.flush();
                    nb_line_tLogRow_8++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_8++;

/**
 * [tLogRow_8 main ] stop
 */
	
	/**
	 * [tLogRow_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_8";

	

 



/**
 * [tLogRow_8 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_8";

	

 



/**
 * [tLogRow_8 process_data_end ] stop
 */

} // End of branch "row22"




// Start of branch "row23"
if(row23 != null) { 



	
	/**
	 * [tLogRow_9 main ] start
	 */

	

	
	
	currentComponent="tLogRow_9";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row23");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_9 = new StringBuilder();




   				
	    		if(row23.errorCode != null) { //              
                    							
       
				strBuffer_tLogRow_9.append(
				                String.valueOf(row23.errorCode)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_9.append("|");
    			


   				
	    		if(row23.errorMessage != null) { //              
                    							
       
				strBuffer_tLogRow_9.append(
				                String.valueOf(row23.errorMessage)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_9 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_9 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_9);
                    }
                    consoleOut_tLogRow_9.println(strBuffer_tLogRow_9.toString());
                    consoleOut_tLogRow_9.flush();
                    nb_line_tLogRow_9++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_9++;

/**
 * [tLogRow_9 main ] stop
 */
	
	/**
	 * [tLogRow_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_9";

	

 



/**
 * [tLogRow_9 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_9";

	

 



/**
 * [tLogRow_9 process_data_end ] stop
 */

} // End of branch "row23"




	
	/**
	 * [tRESTClient_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tRESTClient_2";

	

 



/**
 * [tRESTClient_2 process_data_end ] stop
 */

} // End of branch "copyOfoutApi"




// Start of branch "copyOfoutputE"
if(copyOfoutputE != null) { 



	
	/**
	 * [tLogRow_5 main ] start
	 */

	

	
	
	currentComponent="tLogRow_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfoutputE");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_5 = new StringBuilder();




   				
	    		if(copyOfoutputE.E != null) { //              
                    							
       
				strBuffer_tLogRow_5.append(
				                String.valueOf(copyOfoutputE.E)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_5 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_5 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_5);
                    }
                    consoleOut_tLogRow_5.println(strBuffer_tLogRow_5.toString());
                    consoleOut_tLogRow_5.flush();
                    nb_line_tLogRow_5++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_5++;

/**
 * [tLogRow_5 main ] stop
 */
	
	/**
	 * [tLogRow_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_5";

	

 



/**
 * [tLogRow_5 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_5";

	

 



/**
 * [tLogRow_5 process_data_end ] stop
 */

} // End of branch "copyOfoutputE"




	
	/**
	 * [tMap_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

 



/**
 * [tMap_9 process_data_end ] stop
 */



	
	/**
	 * [tFileOutputJSON_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputJSON_1";

	

 



/**
 * [tFileOutputJSON_1 process_data_end ] stop
 */

} // End of branch "out7"




	
	/**
	 * [tMap_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_10";

	

 



/**
 * [tMap_10 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	

 



/**
 * [tLogRow_4 process_data_end ] stop
 */



	
	/**
	 * [tWriteJSONField_2_In process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_2";
	
	currentComponent="tWriteJSONField_2_In";

	

 



/**
 * [tWriteJSONField_2_In process_data_end ] stop
 */
	
	/**
	 * [tWriteJSONField_2_In end ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_2";
	
	currentComponent="tWriteJSONField_2_In";

	

					}
				}
				
					String readFinishWithExceptionMarkWithPipeId_tWriteJSONField_2_In = "tWriteJSONField_2_In_FINISH_WITH_EXCEPTION"+(queue_tWriteJSONField_2_In==null?"":queue_tWriteJSONField_2_In.hashCode());
					if(globalMap.containsKey(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_2_In)){
						if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
							globalMap.put(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_2_In, null);// syn
						}
						globalMap.remove(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_2_In);
						return;
					}
					globalMap.remove("queue_tWriteJSONField_2_In");
    			
				if(!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
					globalMap.put(readFinishMarkWithPipeId_tWriteJSONField_2_In,null);//syn
				}
				globalMap.remove(readFinishMarkWithPipeId_tWriteJSONField_2_In);
			
globalMap.put("tWriteJSONField_2_NB_LINE",nb_line_tWriteJSONField_2_In);
 

ok_Hash.put("tWriteJSONField_2_In", true);
end_Hash.put("tWriteJSONField_2_In", System.currentTimeMillis());




/**
 * [tWriteJSONField_2_In end ] stop
 */

	
	/**
	 * [tLogRow_4 end ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	


//////
//////
globalMap.put("tLogRow_4_NB_LINE",nb_line_tLogRow_4);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tLogRow_4", true);
end_Hash.put("tLogRow_4", System.currentTimeMillis());




/**
 * [tLogRow_4 end ] stop
 */

	
	/**
	 * [tMap_10 end ] start
	 */

	

	
	
	currentComponent="tMap_10";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tMap_10", true);
end_Hash.put("tMap_10", System.currentTimeMillis());




/**
 * [tMap_10 end ] stop
 */

	
	/**
	 * [tFileOutputJSON_2 end ] start
	 */

	

	
	
	currentComponent="tFileOutputJSON_2";

	

	outtFileOutputJSON_2.print("]}");
outtFileOutputJSON_2.close();
globalMap.put("tFileOutputJSON_2_NB_LINE",nb_line_tFileOutputJSON_2);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out4");
			  	}
			  	
 

ok_Hash.put("tFileOutputJSON_2", true);
end_Hash.put("tFileOutputJSON_2", System.currentTimeMillis());




/**
 * [tFileOutputJSON_2 end ] stop
 */

	
	/**
	 * [tMap_5 end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tMap_5", true);
end_Hash.put("tMap_5", System.currentTimeMillis());




/**
 * [tMap_5 end ] stop
 */

	
	/**
	 * [tRESTClient_5 end ] start
	 */

	

	
	
	currentComponent="tRESTClient_5";

	


if (globalMap.get("tRESTClient_5_NB_LINE") == null) {
	globalMap.put("tRESTClient_5_NB_LINE", 1);
}

// [tRESTCliend_end]
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"outApi");
			  	}
			  	
 

ok_Hash.put("tRESTClient_5", true);
end_Hash.put("tRESTClient_5", System.currentTimeMillis());




/**
 * [tRESTClient_5 end ] stop
 */

	
	/**
	 * [tLogRow_3 end ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	


//////
//////
globalMap.put("tLogRow_3_NB_LINE",nb_line_tLogRow_3);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7");
			  	}
			  	
 

ok_Hash.put("tLogRow_3", true);
end_Hash.put("tLogRow_3", System.currentTimeMillis());




/**
 * [tLogRow_3 end ] stop
 */




	
	/**
	 * [tLogRow_2 end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	


//////
//////
globalMap.put("tLogRow_2_NB_LINE",nb_line_tLogRow_2);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 

ok_Hash.put("tLogRow_2", true);
end_Hash.put("tLogRow_2", System.currentTimeMillis());




/**
 * [tLogRow_2 end ] stop
 */







	
	/**
	 * [tLogRow_1 end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	


//////
//////
globalMap.put("tLogRow_1_NB_LINE",nb_line_tLogRow_1);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"outputE");
			  	}
			  	
 

ok_Hash.put("tLogRow_1", true);
end_Hash.put("tLogRow_1", System.currentTimeMillis());




/**
 * [tLogRow_1 end ] stop
 */










	
	/**
	 * [tFileOutputJSON_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputJSON_1";

	

	outtFileOutputJSON_1.print("]}");
outtFileOutputJSON_1.close();
globalMap.put("tFileOutputJSON_1_NB_LINE",nb_line_tFileOutputJSON_1);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out7");
			  	}
			  	
 

ok_Hash.put("tFileOutputJSON_1", true);
end_Hash.put("tFileOutputJSON_1", System.currentTimeMillis());




/**
 * [tFileOutputJSON_1 end ] stop
 */

	
	/**
	 * [tMap_9 end ] start
	 */

	

	
	
	currentComponent="tMap_9";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row21");
			  	}
			  	
 

ok_Hash.put("tMap_9", true);
end_Hash.put("tMap_9", System.currentTimeMillis());




/**
 * [tMap_9 end ] stop
 */

	
	/**
	 * [tRESTClient_2 end ] start
	 */

	

	
	
	currentComponent="tRESTClient_2";

	


if (globalMap.get("tRESTClient_2_NB_LINE") == null) {
	globalMap.put("tRESTClient_2_NB_LINE", 1);
}

// [tRESTCliend_end]
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfoutApi");
			  	}
			  	
 

ok_Hash.put("tRESTClient_2", true);
end_Hash.put("tRESTClient_2", System.currentTimeMillis());




/**
 * [tRESTClient_2 end ] stop
 */

	
	/**
	 * [tLogRow_8 end ] start
	 */

	

	
	
	currentComponent="tLogRow_8";

	


//////
//////
globalMap.put("tLogRow_8_NB_LINE",nb_line_tLogRow_8);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row22");
			  	}
			  	
 

ok_Hash.put("tLogRow_8", true);
end_Hash.put("tLogRow_8", System.currentTimeMillis());




/**
 * [tLogRow_8 end ] stop
 */




	
	/**
	 * [tLogRow_9 end ] start
	 */

	

	
	
	currentComponent="tLogRow_9";

	


//////
//////
globalMap.put("tLogRow_9_NB_LINE",nb_line_tLogRow_9);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row23");
			  	}
			  	
 

ok_Hash.put("tLogRow_9", true);
end_Hash.put("tLogRow_9", System.currentTimeMillis());




/**
 * [tLogRow_9 end ] stop
 */







	
	/**
	 * [tLogRow_5 end ] start
	 */

	

	
	
	currentComponent="tLogRow_5";

	


//////
//////
globalMap.put("tLogRow_5_NB_LINE",nb_line_tLogRow_5);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfoutputE");
			  	}
			  	
 

ok_Hash.put("tLogRow_5", true);
end_Hash.put("tLogRow_5", System.currentTimeMillis());




/**
 * [tLogRow_5 end ] stop
 */















				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWriteJSONField_2_In finally ] start
	 */

	

	
	
		currentVirtualComponent = "tWriteJSONField_2";
	
	currentComponent="tWriteJSONField_2_In";

	

 



/**
 * [tWriteJSONField_2_In finally ] stop
 */

	
	/**
	 * [tLogRow_4 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	

 



/**
 * [tLogRow_4 finally ] stop
 */

	
	/**
	 * [tMap_10 finally ] start
	 */

	

	
	
	currentComponent="tMap_10";

	

 



/**
 * [tMap_10 finally ] stop
 */

	
	/**
	 * [tFileOutputJSON_2 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputJSON_2";

	

 



/**
 * [tFileOutputJSON_2 finally ] stop
 */

	
	/**
	 * [tMap_5 finally ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 finally ] stop
 */

	
	/**
	 * [tRESTClient_5 finally ] start
	 */

	

	
	
	currentComponent="tRESTClient_5";

	

 



/**
 * [tRESTClient_5 finally ] stop
 */

	
	/**
	 * [tLogRow_3 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 finally ] stop
 */




	
	/**
	 * [tLogRow_2 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 finally ] stop
 */







	
	/**
	 * [tLogRow_1 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 finally ] stop
 */










	
	/**
	 * [tFileOutputJSON_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputJSON_1";

	

 



/**
 * [tFileOutputJSON_1 finally ] stop
 */

	
	/**
	 * [tMap_9 finally ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

 



/**
 * [tMap_9 finally ] stop
 */

	
	/**
	 * [tRESTClient_2 finally ] start
	 */

	

	
	
	currentComponent="tRESTClient_2";

	

 



/**
 * [tRESTClient_2 finally ] stop
 */

	
	/**
	 * [tLogRow_8 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_8";

	

 



/**
 * [tLogRow_8 finally ] stop
 */




	
	/**
	 * [tLogRow_9 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_9";

	

 



/**
 * [tLogRow_9 finally ] stop
 */







	
	/**
	 * [tLogRow_5 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_5";

	

 



/**
 * [tLogRow_5 finally ] stop
 */















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWriteJSONField_2_In_SUBPROCESS_STATE", 1);
	}
	

public void connectionStatsLogs_CommitProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("connectionStatsLogs_Commit_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [connectionStatsLogs_Commit begin ] start
	 */

	

	
		
		ok_Hash.put("connectionStatsLogs_Commit", false);
		start_Hash.put("connectionStatsLogs_Commit", System.currentTimeMillis());
		
	
	currentComponent="connectionStatsLogs_Commit";

	
		int tos_count_connectionStatsLogs_Commit = 0;
		

 



/**
 * [connectionStatsLogs_Commit begin ] stop
 */
	
	/**
	 * [connectionStatsLogs_Commit main ] start
	 */

	

	
	
	currentComponent="connectionStatsLogs_Commit";

	

	java.sql.Connection conn_connectionStatsLogs_Commit = (java.sql.Connection)globalMap.get("conn_connectionStatsLogs");
	if(conn_connectionStatsLogs_Commit != null && !conn_connectionStatsLogs_Commit.isClosed())
	{
	
			
			conn_connectionStatsLogs_Commit.commit();
			
	
	}

 


	tos_count_connectionStatsLogs_Commit++;

/**
 * [connectionStatsLogs_Commit main ] stop
 */
	
	/**
	 * [connectionStatsLogs_Commit process_data_begin ] start
	 */

	

	
	
	currentComponent="connectionStatsLogs_Commit";

	

 



/**
 * [connectionStatsLogs_Commit process_data_begin ] stop
 */
	
	/**
	 * [connectionStatsLogs_Commit process_data_end ] start
	 */

	

	
	
	currentComponent="connectionStatsLogs_Commit";

	

 



/**
 * [connectionStatsLogs_Commit process_data_end ] stop
 */
	
	/**
	 * [connectionStatsLogs_Commit end ] start
	 */

	

	
	
	currentComponent="connectionStatsLogs_Commit";

	

 

ok_Hash.put("connectionStatsLogs_Commit", true);
end_Hash.put("connectionStatsLogs_Commit", System.currentTimeMillis());




/**
 * [connectionStatsLogs_Commit end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [connectionStatsLogs_Commit finally ] start
	 */

	

	
	
	currentComponent="connectionStatsLogs_Commit";

	

 



/**
 * [connectionStatsLogs_Commit finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("connectionStatsLogs_Commit_SUBPROCESS_STATE", 1);
	}
	

public void connectionStatsLogsProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("connectionStatsLogs_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [connectionStatsLogs begin ] start
	 */

	

	
		
		ok_Hash.put("connectionStatsLogs", false);
		start_Hash.put("connectionStatsLogs", System.currentTimeMillis());
		
	
	currentComponent="connectionStatsLogs";

	
		int tos_count_connectionStatsLogs = 0;
		
	

			    
		    String url_connectionStatsLogs = "jdbc:sqlserver://" + "neowise-testing.database.windows.net" ;
		String port_connectionStatsLogs = "1433";
		String dbname_connectionStatsLogs = "ads_hbe_erp" ;
    	if (!"".equals(port_connectionStatsLogs)) {
    		url_connectionStatsLogs += ":" + "1433";
    	}
    	if (!"".equals(dbname_connectionStatsLogs)) {
    				    
		    	url_connectionStatsLogs += ";databaseName=" + "ads_hbe_erp"; 
    	}
		url_connectionStatsLogs += ";appName=" + projectName + ";" + "";  
		String dbUser_connectionStatsLogs = "melusior";
		
		
			 
	final String decryptedPassword_connectionStatsLogs = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[qhNyCU1yqr+UrQcaWxZSFvQRvT3jtr4BWJN8Jpv9ZL3euZbYryL1vpSgQ1RePsIXHV93+JO65/0=]");
			String dbPwd_connectionStatsLogs = decryptedPassword_connectionStatsLogs;
		
	java.sql.Connection conn_connectionStatsLogs = null;
	
	
			String sharedConnectionName_connectionStatsLogs = "StatsAndLog_Shared_Connection";
			conn_connectionStatsLogs = SharedDBConnection.getDBConnection("com.microsoft.sqlserver.jdbc.SQLServerDriver",url_connectionStatsLogs,dbUser_connectionStatsLogs , dbPwd_connectionStatsLogs , sharedConnectionName_connectionStatsLogs);
	if (null != conn_connectionStatsLogs) {
		
			conn_connectionStatsLogs.setAutoCommit(false);
	}

	globalMap.put("dbschema_connectionStatsLogs", "talend");

	globalMap.put("db_connectionStatsLogs",  "ads_hbe_erp");

	globalMap.put("conn_connectionStatsLogs",conn_connectionStatsLogs);
	
	globalMap.put("shareIdentitySetting_connectionStatsLogs",  false);

 



/**
 * [connectionStatsLogs begin ] stop
 */
	
	/**
	 * [connectionStatsLogs main ] start
	 */

	

	
	
	currentComponent="connectionStatsLogs";

	

 


	tos_count_connectionStatsLogs++;

/**
 * [connectionStatsLogs main ] stop
 */
	
	/**
	 * [connectionStatsLogs process_data_begin ] start
	 */

	

	
	
	currentComponent="connectionStatsLogs";

	

 



/**
 * [connectionStatsLogs process_data_begin ] stop
 */
	
	/**
	 * [connectionStatsLogs process_data_end ] start
	 */

	

	
	
	currentComponent="connectionStatsLogs";

	

 



/**
 * [connectionStatsLogs process_data_end ] stop
 */
	
	/**
	 * [connectionStatsLogs end ] start
	 */

	

	
	
	currentComponent="connectionStatsLogs";

	

 

ok_Hash.put("connectionStatsLogs", true);
end_Hash.put("connectionStatsLogs", System.currentTimeMillis());




/**
 * [connectionStatsLogs end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [connectionStatsLogs finally ] start
	 */

	

	
	
	currentComponent="connectionStatsLogs";

	

 



/**
 * [connectionStatsLogs finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("connectionStatsLogs_SUBPROCESS_STATE", 1);
	}
	


public static class row_talendLogs_LOGSStruct implements routines.system.IPersistableRow<row_talendLogs_LOGSStruct> {
    final static byte[] commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI = new byte[0];
    static byte[] commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length) {
				if(length < 1024 && commonByteArray_DEV_tld_createOrderAndOrderProductEDI.length == 0) {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[1024];
				} else {
   					commonByteArray_DEV_tld_createOrderAndOrderProductEDI = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length);
			strReturn = new String(commonByteArray_DEV_tld_createOrderAndOrderProductEDI, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_tld_createOrderAndOrderProductEDI) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row_talendLogs_LOGSStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void talendLogs_LOGSProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("talendLogs_LOGS_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row_talendLogs_LOGSStruct row_talendLogs_LOGS = new row_talendLogs_LOGSStruct();




	
	/**
	 * [talendLogs_DB begin ] start
	 */

	

	
		
		ok_Hash.put("talendLogs_DB", false);
		start_Hash.put("talendLogs_DB", System.currentTimeMillis());
		
	
		currentVirtualComponent = "talendLogs_DB";
	
	currentComponent="talendLogs_DB";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Main");
					}
				
		int tos_count_talendLogs_DB = 0;
		



int nb_line_talendLogs_DB = 0;
int nb_line_update_talendLogs_DB = 0;
int nb_line_inserted_talendLogs_DB = 0;
int nb_line_deleted_talendLogs_DB = 0;
int nb_line_rejected_talendLogs_DB = 0;

int deletedCount_talendLogs_DB=0;
int updatedCount_talendLogs_DB=0;
int insertedCount_talendLogs_DB=0;
int rejectedCount_talendLogs_DB=0;
String dbschema_talendLogs_DB = null;
String tableName_talendLogs_DB = null;
boolean whetherReject_talendLogs_DB = false;

java.util.Calendar calendar_talendLogs_DB = java.util.Calendar.getInstance();
long year1_talendLogs_DB = TalendDate.parseDate("yyyy-MM-dd","0001-01-01").getTime();
long year2_talendLogs_DB = TalendDate.parseDate("yyyy-MM-dd","1753-01-01").getTime();
long year10000_talendLogs_DB = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss","9999-12-31 24:00:00").getTime();
long date_talendLogs_DB;

java.util.Calendar calendar_datetimeoffset_talendLogs_DB = java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone("UTC"));

	
java.sql.Connection conn_talendLogs_DB = null;
String dbUser_talendLogs_DB = null;
	dbschema_talendLogs_DB = (String)globalMap.get("dbschema_connectionStatsLogs");
	conn_talendLogs_DB = (java.sql.Connection)globalMap.get("conn_connectionStatsLogs");
	
   int batchSize_talendLogs_DB = 10000;
   int batchSizeCounter_talendLogs_DB=0;

if(dbschema_talendLogs_DB == null || dbschema_talendLogs_DB.trim().length() == 0) {
    tableName_talendLogs_DB = "log";
} else {
    tableName_talendLogs_DB = dbschema_talendLogs_DB + "].[" + "log";
}
	int count_talendLogs_DB=0;


                    // [%connection%][checktable][tableName]
                    String keyCheckTable_talendLogs_DB = conn_talendLogs_DB + "[checktable]" + "[" + "log" + "]";

                if(GlobalResource.resourceMap.get(keyCheckTable_talendLogs_DB)== null){//}

                    synchronized (GlobalResource.resourceLockMap.get(keyCheckTable_talendLogs_DB)) {//}
                        if(GlobalResource.resourceMap.get(keyCheckTable_talendLogs_DB)== null){//}
                                boolean whetherExist_talendLogs_DB = false;
                                try (java.sql.Statement isExistStmt_talendLogs_DB = conn_talendLogs_DB.createStatement()) {
                                    try {
                                        isExistStmt_talendLogs_DB.execute("SELECT TOP 1 1 FROM [" + tableName_talendLogs_DB + "]" );
                                        whetherExist_talendLogs_DB = true;
                                    } catch (java.lang.Exception e){
                                        whetherExist_talendLogs_DB = false;
                                    }
                                }
                                if(!whetherExist_talendLogs_DB) {
                                    try (java.sql.Statement stmtCreate_talendLogs_DB = conn_talendLogs_DB.createStatement()) {
                                        stmtCreate_talendLogs_DB.execute("CREATE TABLE [" + tableName_talendLogs_DB + "]([moment] DATETIME ,[pid] VARCHAR(20)  ,[root_pid] VARCHAR(20)  ,[father_pid] VARCHAR(20)  ,[project] VARCHAR(50)  ,[job] VARCHAR(255)  ,[context] VARCHAR(50)  ,[priority] INT ,[type] VARCHAR(255)  ,[origin] VARCHAR(255)  ,[message] VARCHAR(255)  ,[code] INT )");
                                    }
                                }
                            GlobalResource.resourceMap.put(keyCheckTable_talendLogs_DB, true);
            //{{{
                        } // end of if
                    } // end synchronized
                }
        String insert_talendLogs_DB = "INSERT INTO [" + tableName_talendLogs_DB + "] ([moment],[pid],[root_pid],[father_pid],[project],[job],[context],[priority],[type],[origin],[message],[code]) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)";

        java.sql.PreparedStatement pstmt_talendLogs_DB = null;
        String keyPsmt_talendLogs_DB = conn_talendLogs_DB + "[psmt]" + "[" + "log" + "]";
        pstmt_talendLogs_DB = SharedDBPreparedStatement.getSharedPreparedStatement(conn_talendLogs_DB,insert_talendLogs_DB,keyPsmt_talendLogs_DB);
        resourceMap.put("pstmt_talendLogs_DB", pstmt_talendLogs_DB);
 	boolean isShareIdentity_talendLogs_DB = globalMap.get("shareIdentitySetting_connectionStatsLogs") != null && (Boolean)globalMap.get("shareIdentitySetting_connectionStatsLogs") == true;

 



/**
 * [talendLogs_DB begin ] stop
 */



	
	/**
	 * [talendLogs_LOGS begin ] start
	 */

	

	
		
		ok_Hash.put("talendLogs_LOGS", false);
		start_Hash.put("talendLogs_LOGS", System.currentTimeMillis());
		
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	
		int tos_count_talendLogs_LOGS = 0;
		

try {
	for (LogCatcherUtils.LogCatcherMessage lcm : talendLogs_LOGS.getMessages()) {
		row_talendLogs_LOGS.type = lcm.getType();
		row_talendLogs_LOGS.origin = (lcm.getOrigin()==null || lcm.getOrigin().length()<1 ? null : lcm.getOrigin());
		row_talendLogs_LOGS.priority = lcm.getPriority();
		row_talendLogs_LOGS.message = lcm.getMessage();
		row_talendLogs_LOGS.code = lcm.getCode();
		
		row_talendLogs_LOGS.moment = java.util.Calendar.getInstance().getTime();
	
    	row_talendLogs_LOGS.pid = pid;
		row_talendLogs_LOGS.root_pid = rootPid;
		row_talendLogs_LOGS.father_pid = fatherPid;
	
    	row_talendLogs_LOGS.project = projectName;
    	row_talendLogs_LOGS.job = jobName;
    	row_talendLogs_LOGS.context = contextStr;
    		
 



/**
 * [talendLogs_LOGS begin ] stop
 */
	
	/**
	 * [talendLogs_LOGS main ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	

 


	tos_count_talendLogs_LOGS++;

/**
 * [talendLogs_LOGS main ] stop
 */
	
	/**
	 * [talendLogs_LOGS process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	

 



/**
 * [talendLogs_LOGS process_data_begin ] stop
 */

	
	/**
	 * [talendLogs_DB main ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_DB";
	
	currentComponent="talendLogs_DB";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"Main");
					}
					



        whetherReject_talendLogs_DB = false;
                    if(row_talendLogs_LOGS.moment != null) {
pstmt_talendLogs_DB.setTimestamp(1, new java.sql.Timestamp(row_talendLogs_LOGS.moment.getTime()));
} else {
pstmt_talendLogs_DB.setNull(1, java.sql.Types.DATE);
}

                    if(row_talendLogs_LOGS.pid == null) {
pstmt_talendLogs_DB.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_talendLogs_DB.setString(2, row_talendLogs_LOGS.pid);
}

                    if(row_talendLogs_LOGS.root_pid == null) {
pstmt_talendLogs_DB.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_talendLogs_DB.setString(3, row_talendLogs_LOGS.root_pid);
}

                    if(row_talendLogs_LOGS.father_pid == null) {
pstmt_talendLogs_DB.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_talendLogs_DB.setString(4, row_talendLogs_LOGS.father_pid);
}

                    if(row_talendLogs_LOGS.project == null) {
pstmt_talendLogs_DB.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_talendLogs_DB.setString(5, row_talendLogs_LOGS.project);
}

                    if(row_talendLogs_LOGS.job == null) {
pstmt_talendLogs_DB.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_talendLogs_DB.setString(6, row_talendLogs_LOGS.job);
}

                    if(row_talendLogs_LOGS.context == null) {
pstmt_talendLogs_DB.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_talendLogs_DB.setString(7, row_talendLogs_LOGS.context);
}

                    if(row_talendLogs_LOGS.priority == null) {
pstmt_talendLogs_DB.setNull(8, java.sql.Types.INTEGER);
} else {pstmt_talendLogs_DB.setInt(8, row_talendLogs_LOGS.priority);
}

                    if(row_talendLogs_LOGS.type == null) {
pstmt_talendLogs_DB.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_talendLogs_DB.setString(9, row_talendLogs_LOGS.type);
}

                    if(row_talendLogs_LOGS.origin == null) {
pstmt_talendLogs_DB.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_talendLogs_DB.setString(10, row_talendLogs_LOGS.origin);
}

                    if(row_talendLogs_LOGS.message == null) {
pstmt_talendLogs_DB.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_talendLogs_DB.setString(11, row_talendLogs_LOGS.message);
}

                    if(row_talendLogs_LOGS.code == null) {
pstmt_talendLogs_DB.setNull(12, java.sql.Types.INTEGER);
} else {pstmt_talendLogs_DB.setInt(12, row_talendLogs_LOGS.code);
}


        		pstmt_talendLogs_DB.addBatch();
        		nb_line_talendLogs_DB++;
    		 
    		  batchSizeCounter_talendLogs_DB++;
    		
            	//////////batch execute by batch size///////
            	class LimitBytesHelper_talendLogs_DB{
            		public int limitBytePart1(int counter,java.sql.PreparedStatement pstmt_talendLogs_DB) throws Exception {
                try {
						
						for(int countEach_talendLogs_DB: pstmt_talendLogs_DB.executeBatch()) {
							if(countEach_talendLogs_DB == -2 || countEach_talendLogs_DB == -3) {
								break;
							}
							counter += countEach_talendLogs_DB;
						}
						
                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_talendLogs_DB = 0;
					for(int countEach_talendLogs_DB: e.getUpdateCounts()) {
						counter += (countEach_talendLogs_DB < 0 ? 0 : countEach_talendLogs_DB);
					}
				
            	    	
                		System.err.println(e.getMessage());
                	
               			 }
    				return counter;
            	}
            	
            	public int limitBytePart2(int counter,java.sql.PreparedStatement pstmt_talendLogs_DB) throws Exception {
                try {
                		
						for(int countEach_talendLogs_DB: pstmt_talendLogs_DB.executeBatch()) {
							if(countEach_talendLogs_DB == -2 || countEach_talendLogs_DB == -3) {
								break;
							}
							counter += countEach_talendLogs_DB;
						}
						
                }catch (java.sql.BatchUpdateException e){
                	
                	
					for(int countEach_talendLogs_DB: e.getUpdateCounts()) {
						counter += (countEach_talendLogs_DB < 0 ? 0 : countEach_talendLogs_DB);
					}
					
            	    	
                        System.err.println(e.getMessage());
                	
                		}	
                	return counter;	
            	}
            }
    		if ((batchSize_talendLogs_DB > 0) && (batchSize_talendLogs_DB <= batchSizeCounter_talendLogs_DB)) {
    		
    		            
            	    		insertedCount_talendLogs_DB = new LimitBytesHelper_talendLogs_DB().limitBytePart1(insertedCount_talendLogs_DB,pstmt_talendLogs_DB);
            	    	
    			
			    batchSizeCounter_talendLogs_DB = 0;
			}
    		

    	////////////commit every////////////
    			

 


	tos_count_talendLogs_DB++;

/**
 * [talendLogs_DB main ] stop
 */
	
	/**
	 * [talendLogs_DB process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_DB";
	
	currentComponent="talendLogs_DB";

	

 



/**
 * [talendLogs_DB process_data_begin ] stop
 */
	
	/**
	 * [talendLogs_DB process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_DB";
	
	currentComponent="talendLogs_DB";

	

 



/**
 * [talendLogs_DB process_data_end ] stop
 */



	
	/**
	 * [talendLogs_LOGS process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	

 



/**
 * [talendLogs_LOGS process_data_end ] stop
 */
	
	/**
	 * [talendLogs_LOGS end ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	
	}
} catch (Exception e_talendLogs_LOGS) {
	logIgnoredError(String.format("talendLogs_LOGS - tLogCatcher failed to process log message(s) due to internal error: %s", e_talendLogs_LOGS), e_talendLogs_LOGS);
}

 

ok_Hash.put("talendLogs_LOGS", true);
end_Hash.put("talendLogs_LOGS", System.currentTimeMillis());




/**
 * [talendLogs_LOGS end ] stop
 */

	
	/**
	 * [talendLogs_DB end ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_DB";
	
	currentComponent="talendLogs_DB";

	



                try {
						int countSum_talendLogs_DB = 0;
						if (pstmt_talendLogs_DB != null && batchSizeCounter_talendLogs_DB > 0) {
							
							for(int countEach_talendLogs_DB: pstmt_talendLogs_DB.executeBatch()) {
								if(countEach_talendLogs_DB == -2 || countEach_talendLogs_DB == -3) {
									break;
								}
								countSum_talendLogs_DB += countEach_talendLogs_DB;
							}
							
						}
            	    	
            	    		insertedCount_talendLogs_DB += countSum_talendLogs_DB;
            	    	
                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_talendLogs_DB = 0;
					for(int countEach_talendLogs_DB: e.getUpdateCounts()) {
						countSum_talendLogs_DB += (countEach_talendLogs_DB < 0 ? 0 : countEach_talendLogs_DB);
					}
					
            	    		insertedCount_talendLogs_DB += countSum_talendLogs_DB;
            	    	
                		System.err.println(e.getMessage());
                	
            	}
        if(pstmt_talendLogs_DB != null) {
			
				SharedDBPreparedStatement.releasePreparedStatement(keyPsmt_talendLogs_DB);
			
        }
    resourceMap.put("statementClosed_talendLogs_DB", true);

	nb_line_deleted_talendLogs_DB=nb_line_deleted_talendLogs_DB+ deletedCount_talendLogs_DB;
	nb_line_update_talendLogs_DB=nb_line_update_talendLogs_DB + updatedCount_talendLogs_DB;
	nb_line_inserted_talendLogs_DB=nb_line_inserted_talendLogs_DB + insertedCount_talendLogs_DB;
	nb_line_rejected_talendLogs_DB=nb_line_rejected_talendLogs_DB + rejectedCount_talendLogs_DB;
	
        globalMap.put("talendLogs_DB_NB_LINE",nb_line_talendLogs_DB);
        globalMap.put("talendLogs_DB_NB_LINE_UPDATED",nb_line_update_talendLogs_DB);
        globalMap.put("talendLogs_DB_NB_LINE_INSERTED",nb_line_inserted_talendLogs_DB);
        globalMap.put("talendLogs_DB_NB_LINE_DELETED",nb_line_deleted_talendLogs_DB);
        globalMap.put("talendLogs_DB_NB_LINE_REJECTED", nb_line_rejected_talendLogs_DB);
    
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Main");
			  	}
			  	
 

ok_Hash.put("talendLogs_DB", true);
end_Hash.put("talendLogs_DB", System.currentTimeMillis());




/**
 * [talendLogs_DB end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:talendLogs_LOGS:sub_ok_talendLogs_connectionStatsLogs_Commit", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("sub_ok_talendLogs_connectionStatsLogs_Commit", 0, "ok");
								} 
							
							connectionStatsLogs_CommitProcess(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [talendLogs_LOGS finally ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	

 



/**
 * [talendLogs_LOGS finally ] stop
 */

	
	/**
	 * [talendLogs_DB finally ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_DB";
	
	currentComponent="talendLogs_DB";

	



    if (resourceMap.get("statementClosed_talendLogs_DB") == null) {
                java.sql.PreparedStatement pstmtToClose_talendLogs_DB = null;
                if ((pstmtToClose_talendLogs_DB = (java.sql.PreparedStatement) resourceMap.remove("pstmt_talendLogs_DB")) != null) {
                    pstmtToClose_talendLogs_DB.close();
                }
    }
 



/**
 * [talendLogs_DB finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("talendLogs_LOGS_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    
    private final org.talend.components.common.runtime.SharedConnectionsPool connectionPool = new org.talend.components.common.runtime.SharedConnectionsPool() {
    	public java.sql.Connection getDBConnection(String dbDriver, String url, String userName, String password, String dbConnectionName)
            throws ClassNotFoundException, java.sql.SQLException {
            return SharedDBConnection.getDBConnection(dbDriver, url, userName, password, dbConnectionName);
        }

    	public java.sql.Connection getDBConnection(String dbDriver, String url, String dbConnectionName)
            throws ClassNotFoundException, java.sql.SQLException {
            return SharedDBConnection.getDBConnection(dbDriver, url, dbConnectionName);
        }
    };
    
    private static final String GLOBAL_CONNECTION_POOL_KEY = "GLOBAL_CONNECTION_POOL";
    
    {
    	globalMap.put(GLOBAL_CONNECTION_POOL_KEY, connectionPool);
    }

    public static void main(String[] args){
        final tld_createOrderAndOrderProductEDI tld_createOrderAndOrderProductEDIClass = new tld_createOrderAndOrderProductEDI();

        int exitCode = tld_createOrderAndOrderProductEDIClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = tld_createOrderAndOrderProductEDI.class.getClassLoader().getResourceAsStream("dev/tld_createorderandorderproductedi_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = tld_createOrderAndOrderProductEDI.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("access_token", "id_String");
                            context.access_token=(String) context.getProperty("access_token");
                        context.setContextType("password", "id_String");
                            context.password=(String) context.getProperty("password");
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("access_token")) {
                context.access_token = (String) parentContextMap.get("access_token");
            }if (parentContextMap.containsKey("password")) {
                context.password = (String) parentContextMap.get("password");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;preStaLogConProcess(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_preStaLogCon) {
globalMap.put("preStaLogCon_SUBPROCESS_STATE", -1);

e_preStaLogCon.printStackTrace();

}



this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tRESTClient_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tRESTClient_1) {
globalMap.put("tRESTClient_1_SUBPROCESS_STATE", -1);

e_tRESTClient_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : tld_createOrderAndOrderProductEDI");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_connectionStatsLogs");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_connectionStatsLogs", globalMap.get("conn_connectionStatsLogs"));







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     898988 characters generated by Talend Open Studio for Data Integration 
 *     on the 7 décembre 2022 12:01:14 CET
 ************************************************************************************************/