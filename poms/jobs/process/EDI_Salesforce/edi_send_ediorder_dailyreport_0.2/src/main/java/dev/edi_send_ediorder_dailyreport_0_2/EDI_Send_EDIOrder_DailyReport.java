// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package dev.edi_send_ediorder_dailyreport_0_2;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tLibraryLoad_4
	//import java.util.List;

	//the import part of tJavaFlex_1
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: EDI_Send_EDIOrder_DailyReport Purpose: EDI_Send_EDIOrder_DailyReport<br>
 * Description: EDI_Send_EDIOrder_DailyReport <br>
 * @author user@talend.com
 * @version 7.3.1.20191031_1204-M3
 * @status 
 */
public class EDI_Send_EDIOrder_DailyReport implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(HasLines != null){
				
					this.setProperty("HasLines", HasLines.toString());
				
			}
			
			if(HtmlBody != null){
				
					this.setProperty("HtmlBody", HtmlBody.toString());
				
			}
			
			if(SMTP_Password != null){
				
					this.setProperty("SMTP_Password", SMTP_Password.toString());
				
			}
			
			if(SMTP_Port != null){
				
					this.setProperty("SMTP_Port", SMTP_Port.toString());
				
			}
			
			if(SMTP_Sender != null){
				
					this.setProperty("SMTP_Sender", SMTP_Sender.toString());
				
			}
			
			if(SMTP_Server != null){
				
					this.setProperty("SMTP_Server", SMTP_Server.toString());
				
			}
			
			if(SMTP_User != null){
				
					this.setProperty("SMTP_User", SMTP_User.toString());
				
			}
			
			if(COMARCH_RootFolder != null){
				
					this.setProperty("COMARCH_RootFolder", COMARCH_RootFolder.toString());
				
			}
			
			if(EDI_RecipientList != null){
				
					this.setProperty("EDI_RecipientList", EDI_RecipientList.toString());
				
			}
			
			if(ReportTemplate != null){
				
					this.setProperty("ReportTemplate", ReportTemplate.toString());
				
			}
			
			if(SalesforceApiVersion != null){
				
					this.setProperty("SalesforceApiVersion", SalesforceApiVersion.toString());
				
			}
			
			if(SalesForceClientId != null){
				
					this.setProperty("SalesForceClientId", SalesForceClientId.toString());
				
			}
			
			if(SalesForceClientSecret != null){
				
					this.setProperty("SalesForceClientSecret", SalesForceClientSecret.toString());
				
			}
			
			if(SalesforceMyDomainUrl != null){
				
					this.setProperty("SalesforceMyDomainUrl", SalesforceMyDomainUrl.toString());
				
			}
			
			if(SalesForceOAuthToken != null){
				
					this.setProperty("SalesForceOAuthToken", SalesForceOAuthToken.toString());
				
			}
			
			if(SalesforceOrderLibraryId != null){
				
					this.setProperty("SalesforceOrderLibraryId", SalesforceOrderLibraryId.toString());
				
			}
			
			if(SalesforceOrderPdfFolderId != null){
				
					this.setProperty("SalesforceOrderPdfFolderId", SalesforceOrderPdfFolderId.toString());
				
			}
			
			if(SalesforceOrderRT != null){
				
					this.setProperty("SalesforceOrderRT", SalesforceOrderRT.toString());
				
			}
			
			if(SalesforceOrderXmlFolderId != null){
				
					this.setProperty("SalesforceOrderXmlFolderId", SalesforceOrderXmlFolderId.toString());
				
			}
			
			if(SalesForcePassword != null){
				
					this.setProperty("SalesForcePassword", SalesForcePassword.toString());
				
			}
			
			if(SalesForceToken != null){
				
					this.setProperty("SalesForceToken", SalesForceToken.toString());
				
			}
			
			if(SalesForceURL != null){
				
					this.setProperty("SalesForceURL", SalesForceURL.toString());
				
			}
			
			if(SalesForceUsername != null){
				
					this.setProperty("SalesForceUsername", SalesForceUsername.toString());
				
			}
			
		}

public Boolean HasLines;
public Boolean getHasLines(){
	return this.HasLines;
}
public String HtmlBody;
public String getHtmlBody(){
	return this.HtmlBody;
}
public java.lang.String SMTP_Password;
public java.lang.String getSMTP_Password(){
	return this.SMTP_Password;
}
public String SMTP_Port;
public String getSMTP_Port(){
	return this.SMTP_Port;
}
public String SMTP_Sender;
public String getSMTP_Sender(){
	return this.SMTP_Sender;
}
public String SMTP_Server;
public String getSMTP_Server(){
	return this.SMTP_Server;
}
public String SMTP_User;
public String getSMTP_User(){
	return this.SMTP_User;
}
public String COMARCH_RootFolder;
public String getCOMARCH_RootFolder(){
	return this.COMARCH_RootFolder;
}
public String EDI_RecipientList;
public String getEDI_RecipientList(){
	return this.EDI_RecipientList;
}
public String ReportTemplate;
public String getReportTemplate(){
	return this.ReportTemplate;
}
public String SalesforceApiVersion;
public String getSalesforceApiVersion(){
	return this.SalesforceApiVersion;
}
public java.lang.String SalesForceClientId;
public java.lang.String getSalesForceClientId(){
	return this.SalesForceClientId;
}
public java.lang.String SalesForceClientSecret;
public java.lang.String getSalesForceClientSecret(){
	return this.SalesForceClientSecret;
}
public String SalesforceMyDomainUrl;
public String getSalesforceMyDomainUrl(){
	return this.SalesforceMyDomainUrl;
}
public String SalesForceOAuthToken;
public String getSalesForceOAuthToken(){
	return this.SalesForceOAuthToken;
}
public String SalesforceOrderLibraryId;
public String getSalesforceOrderLibraryId(){
	return this.SalesforceOrderLibraryId;
}
public String SalesforceOrderPdfFolderId;
public String getSalesforceOrderPdfFolderId(){
	return this.SalesforceOrderPdfFolderId;
}
public String SalesforceOrderRT;
public String getSalesforceOrderRT(){
	return this.SalesforceOrderRT;
}
public String SalesforceOrderXmlFolderId;
public String getSalesforceOrderXmlFolderId(){
	return this.SalesforceOrderXmlFolderId;
}
public java.lang.String SalesForcePassword;
public java.lang.String getSalesForcePassword(){
	return this.SalesForcePassword;
}
public java.lang.String SalesForceToken;
public java.lang.String getSalesForceToken(){
	return this.SalesForceToken;
}
public String SalesForceURL;
public String getSalesForceURL(){
	return this.SalesForceURL;
}
public String SalesForceUsername;
public String getSalesForceUsername(){
	return this.SalesForceUsername;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.2";
	private final String jobName = "EDI_Send_EDIOrder_DailyReport";
	private final String projectName = "DEV";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				EDI_Send_EDIOrder_DailyReport.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(EDI_Send_EDIOrder_DailyReport.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLibraryLoad_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLibraryLoad_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSalesforceConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSalesforceInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaFlex_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSalesforceInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSendMail_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSendMail_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tLibraryLoad_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSalesforceConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSalesforceInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSendMail_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	





public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";

	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk5", 0, "ok");
				}
				tLibraryLoad_4Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	

public void tLibraryLoad_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tLibraryLoad_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tLibraryLoad_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tLibraryLoad_4", false);
		start_Hash.put("tLibraryLoad_4", System.currentTimeMillis());
		
	
	currentComponent="tLibraryLoad_4";

	
		int tos_count_tLibraryLoad_4 = 0;
		



 



/**
 * [tLibraryLoad_4 begin ] stop
 */
	
	/**
	 * [tLibraryLoad_4 main ] start
	 */

	

	
	
	currentComponent="tLibraryLoad_4";

	

 


	tos_count_tLibraryLoad_4++;

/**
 * [tLibraryLoad_4 main ] stop
 */
	
	/**
	 * [tLibraryLoad_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLibraryLoad_4";

	

 



/**
 * [tLibraryLoad_4 process_data_begin ] stop
 */
	
	/**
	 * [tLibraryLoad_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tLibraryLoad_4";

	

 



/**
 * [tLibraryLoad_4 process_data_end ] stop
 */
	
	/**
	 * [tLibraryLoad_4 end ] start
	 */

	

	
	
	currentComponent="tLibraryLoad_4";

	

 

ok_Hash.put("tLibraryLoad_4", true);
end_Hash.put("tLibraryLoad_4", System.currentTimeMillis());




/**
 * [tLibraryLoad_4 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tLibraryLoad_4:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk9", 0, "ok");
								} 
							
							tSalesforceConnection_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tLibraryLoad_4 finally ] start
	 */

	

	
	
	currentComponent="tLibraryLoad_4";

	

 



/**
 * [tLibraryLoad_4 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tLibraryLoad_4_SUBPROCESS_STATE", 1);
	}
	

public void tSalesforceConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSalesforceConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tSalesforceConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tSalesforceConnection_1", false);
		start_Hash.put("tSalesforceConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tSalesforceConnection_1";

	
		int tos_count_tSalesforceConnection_1 = 0;
		


org.talend.components.api.component.ComponentDefinition def_tSalesforceConnection_1 =
        new org.talend.components.salesforce.tsalesforceconnection.TSalesforceConnectionDefinition();

org.talend.components.salesforce.SalesforceConnectionProperties props_tSalesforceConnection_1 =
        (org.talend.components.salesforce.SalesforceConnectionProperties) def_tSalesforceConnection_1.createRuntimeProperties();
 		                    props_tSalesforceConnection_1.setValue("endpoint",
 		                    context.SalesForceURL + "/services/Soap/u/" + context.SalesforceApiVersion);
 		                    
 		                    props_tSalesforceConnection_1.setValue("loginType",
 		                        org.talend.components.salesforce.SalesforceConnectionProperties.LoginType.Basic);
 		                    
 		                    props_tSalesforceConnection_1.setValue("bulkConnection",
 		                    true);
 		                    
 		                    props_tSalesforceConnection_1.setValue("needCompression",
 		                    false);
 		                    
 		                    props_tSalesforceConnection_1.setValue("timeout",
 		                    60000);
 		                    
 		                    props_tSalesforceConnection_1.setValue("httpTraceMessage",
 		                    false);
 		                    
 		                    props_tSalesforceConnection_1.setValue("clientId",
 		                    "");
 		                    
 		                    props_tSalesforceConnection_1.userPassword.setValue("securityKey",
 		                    context.SalesForceToken);
 		                    
 		                    props_tSalesforceConnection_1.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceConnection_1.userPassword.setValue("userId",
 		                    context.SalesForceUsername);
 		                    
 		                    props_tSalesforceConnection_1.userPassword.setValue("password",
 		                    context.SalesForcePassword);
 		                    
 		                    props_tSalesforceConnection_1.proxy.setValue("useProxy",
 		                    false);
 		                    
 		                    props_tSalesforceConnection_1.proxy.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceConnection_1.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSalesforceConnection");
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceConnection_1.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tSalesforceConnection_1 = props_tSalesforceConnection_1.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tSalesforceConnection_1 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceConnection_1 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tSalesforceConnection_1 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tSalesforceConnection_1.referencedComponent.setReference(referencedComponentProperties_tSalesforceConnection_1);
        }
    }
globalMap.put("tSalesforceConnection_1_COMPONENT_RUNTIME_PROPERTIES", props_tSalesforceConnection_1);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "7.3");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.28.0.SNAPSHOT");
java.net.URL mappings_url_tSalesforceConnection_1= this.getClass().getResource("/xmlMappings");
globalMap.put("tSalesforceConnection_1_MAPPINGS_URL", mappings_url_tSalesforceConnection_1);

org.talend.components.api.container.RuntimeContainer container_tSalesforceConnection_1 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tSalesforceConnection_1";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tSalesforceConnection_1 = 0;

org.talend.components.api.component.ConnectorTopology topology_tSalesforceConnection_1 = null;
topology_tSalesforceConnection_1 = org.talend.components.api.component.ConnectorTopology.NONE;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tSalesforceConnection_1 = def_tSalesforceConnection_1.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tSalesforceConnection_1, topology_tSalesforceConnection_1);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tSalesforceConnection_1 = def_tSalesforceConnection_1.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tSalesforceConnection_1 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tSalesforceConnection_1.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tSalesforceConnection_1 = componentRuntime_tSalesforceConnection_1.initialize(container_tSalesforceConnection_1, props_tSalesforceConnection_1);

if (initVr_tSalesforceConnection_1.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tSalesforceConnection_1.getMessage());
}

if(componentRuntime_tSalesforceConnection_1 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tSalesforceConnection_1 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tSalesforceConnection_1;
	compDriverInitialization_tSalesforceConnection_1.runAtDriver(container_tSalesforceConnection_1);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tSalesforceConnection_1 = null;
if(componentRuntime_tSalesforceConnection_1 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tSalesforceConnection_1 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tSalesforceConnection_1;
	org.talend.daikon.properties.ValidationResult vr_tSalesforceConnection_1 = sourceOrSink_tSalesforceConnection_1.validate(container_tSalesforceConnection_1);
	if (vr_tSalesforceConnection_1.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    	throw new RuntimeException(vr_tSalesforceConnection_1.getMessage());
	}
}

 



/**
 * [tSalesforceConnection_1 begin ] stop
 */
	
	/**
	 * [tSalesforceConnection_1 main ] start
	 */

	

	
	
	currentComponent="tSalesforceConnection_1";

	


 


	tos_count_tSalesforceConnection_1++;

/**
 * [tSalesforceConnection_1 main ] stop
 */
	
	/**
	 * [tSalesforceConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSalesforceConnection_1";

	


 



/**
 * [tSalesforceConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tSalesforceConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tSalesforceConnection_1";

	


 



/**
 * [tSalesforceConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tSalesforceConnection_1 end ] start
	 */

	

	
	
	currentComponent="tSalesforceConnection_1";

	
// end of generic

 

ok_Hash.put("tSalesforceConnection_1", true);
end_Hash.put("tSalesforceConnection_1", System.currentTimeMillis());




/**
 * [tSalesforceConnection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSalesforceConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tSalesforceConnection_1";

	
// finally of generic

 



/**
 * [tSalesforceConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSalesforceConnection_1_SUBPROCESS_STATE", 1);
	}
	


public static class logRowsStruct implements routines.system.IPersistableRow<logRowsStruct> {
    final static byte[] commonByteArrayLock_DEV_EDI_Send_EDIOrder_DailyReport = new byte[0];
    static byte[] commonByteArray_DEV_EDI_Send_EDIOrder_DailyReport = new byte[0];

	
			    public String Id;

				public String getId () {
					return this.Id;
				}
				
			    public String CreatedDate;

				public String getCreatedDate () {
					return this.CreatedDate;
				}
				
			    public String FileName__c;

				public String getFileName__c () {
					return this.FileName__c;
				}
				
			    public String Order__r_OrderNumber;

				public String getOrder__r_OrderNumber () {
					return this.Order__r_OrderNumber;
				}
				
			    public String EDI_PO_Numner__c;

				public String getEDI_PO_Numner__c () {
					return this.EDI_PO_Numner__c;
				}
				
			    public String Account_JDE_Number__c;

				public String getAccount_JDE_Number__c () {
					return this.Account_JDE_Number__c;
				}
				
			    public String Address_Name__c;

				public String getAddress_Name__c () {
					return this.Address_Name__c;
				}
				
			    public String Status__c;

				public String getStatus__c () {
					return this.Status__c;
				}
				
			    public String Error_Code__c;

				public String getError_Code__c () {
					return this.Error_Code__c;
				}
				
			    public String Error_Message__c;

				public String getError_Message__c () {
					return this.Error_Message__c;
				}
				
			    public String EDI_LogDetail_1__c;

				public String getEDI_LogDetail_1__c () {
					return this.EDI_LogDetail_1__c;
				}
				
			    public String EDI_LogDetail_2__c;

				public String getEDI_LogDetail_2__c () {
					return this.EDI_LogDetail_2__c;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EDI_Send_EDIOrder_DailyReport.length) {
				if(length < 1024 && commonByteArray_DEV_EDI_Send_EDIOrder_DailyReport.length == 0) {
   					commonByteArray_DEV_EDI_Send_EDIOrder_DailyReport = new byte[1024];
				} else {
   					commonByteArray_DEV_EDI_Send_EDIOrder_DailyReport = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EDI_Send_EDIOrder_DailyReport, 0, length);
			strReturn = new String(commonByteArray_DEV_EDI_Send_EDIOrder_DailyReport, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EDI_Send_EDIOrder_DailyReport) {

        	try {

        		int length = 0;
		
					this.Id = readString(dis);
					
					this.CreatedDate = readString(dis);
					
					this.FileName__c = readString(dis);
					
					this.Order__r_OrderNumber = readString(dis);
					
					this.EDI_PO_Numner__c = readString(dis);
					
					this.Account_JDE_Number__c = readString(dis);
					
					this.Address_Name__c = readString(dis);
					
					this.Status__c = readString(dis);
					
					this.Error_Code__c = readString(dis);
					
					this.Error_Message__c = readString(dis);
					
					this.EDI_LogDetail_1__c = readString(dis);
					
					this.EDI_LogDetail_2__c = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Id,dos);
					
					// String
				
						writeString(this.CreatedDate,dos);
					
					// String
				
						writeString(this.FileName__c,dos);
					
					// String
				
						writeString(this.Order__r_OrderNumber,dos);
					
					// String
				
						writeString(this.EDI_PO_Numner__c,dos);
					
					// String
				
						writeString(this.Account_JDE_Number__c,dos);
					
					// String
				
						writeString(this.Address_Name__c,dos);
					
					// String
				
						writeString(this.Status__c,dos);
					
					// String
				
						writeString(this.Error_Code__c,dos);
					
					// String
				
						writeString(this.Error_Message__c,dos);
					
					// String
				
						writeString(this.EDI_LogDetail_1__c,dos);
					
					// String
				
						writeString(this.EDI_LogDetail_2__c,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Id="+Id);
		sb.append(",CreatedDate="+CreatedDate);
		sb.append(",FileName__c="+FileName__c);
		sb.append(",Order__r_OrderNumber="+Order__r_OrderNumber);
		sb.append(",EDI_PO_Numner__c="+EDI_PO_Numner__c);
		sb.append(",Account_JDE_Number__c="+Account_JDE_Number__c);
		sb.append(",Address_Name__c="+Address_Name__c);
		sb.append(",Status__c="+Status__c);
		sb.append(",Error_Code__c="+Error_Code__c);
		sb.append(",Error_Message__c="+Error_Message__c);
		sb.append(",EDI_LogDetail_1__c="+EDI_LogDetail_1__c);
		sb.append(",EDI_LogDetail_2__c="+EDI_LogDetail_2__c);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(logRowsStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tSalesforceInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSalesforceInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		logRowsStruct logRows = new logRowsStruct();




	
	/**
	 * [tJavaFlex_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaFlex_1", false);
		start_Hash.put("tJavaFlex_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaFlex_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"logRows");
					}
				
		int tos_count_tJavaFlex_1 = 0;
		


// start part of your Java code
String bodyHTML = "";



 



/**
 * [tJavaFlex_1 begin ] stop
 */



	
	/**
	 * [tSalesforceInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tSalesforceInput_3", false);
		start_Hash.put("tSalesforceInput_3", System.currentTimeMillis());
		
	
	currentComponent="tSalesforceInput_3";

	
		int tos_count_tSalesforceInput_3 = 0;
		


org.talend.components.api.component.ComponentDefinition def_tSalesforceInput_3 =
        new org.talend.components.salesforce.tsalesforceinput.TSalesforceInputDefinition();

org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties props_tSalesforceInput_3 =
        (org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties) def_tSalesforceInput_3.createRuntimeProperties();
 		                    props_tSalesforceInput_3.setValue("queryMode",
 		                        org.talend.components.salesforce.tsalesforceinput.TSalesforceInputProperties.QueryMode.Bulk);
 		                    
 		                    props_tSalesforceInput_3.setValue("manualQuery",
 		                    true);
 		                    
 		                    props_tSalesforceInput_3.setValue("query",
 		                    "SELECT Id, CreatedDate, FileName__c, Order__r.OrderNumber, EDI_PO_Numner__c, Account_JDE_Number__c, Address_Name__c, St"
+"atus__c, Error_Code__c, Error_Message__c, EDI_LogDetail_1__c, EDI_LogDetail_2__c  FROM EDI_Log_Table__c WHERE CreatedDat"
+"e = TODAY ORDER BY CreatedDate");
 		                    
 		                    props_tSalesforceInput_3.setValue("safetySwitch",
 		                    true);
 		                    
 		                    props_tSalesforceInput_3.setValue("returnNullValue",
 		                    false);
 		                    
 		                    props_tSalesforceInput_3.setValue("jobTimeOut",
 		                    0);
 		                    
 		                    props_tSalesforceInput_3.setValue("pkChunking",
 		                    false);
 		                    
 		                    props_tSalesforceInput_3.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_3.connection.proxy.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_3.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tSalesforceInput_3.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tSalesforceConnection_1");
 		                    
 		                    props_tSalesforceInput_3.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSalesforceConnection");
 		                    
 		                    props_tSalesforceInput_3.module.setValue("moduleName",
 		                    "EDI_Log_Table__c");
 		                    
 		                    props_tSalesforceInput_3.module.connection.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_3.module.connection.proxy.userPassword.setValue("useAuth",
 		                    false);
 		                    
 		                    props_tSalesforceInput_3.module.connection.referencedComponent.setValue("referenceType",
 		                        org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE);
 		                    
 		                    props_tSalesforceInput_3.module.connection.referencedComponent.setValue("componentInstanceId",
 		                    "tSalesforceConnection_1");
 		                    
 		                    props_tSalesforceInput_3.module.connection.referencedComponent.setValue("referenceDefinitionName",
 		                    "tSalesforceConnection");
 		                    
 		                    class SchemaSettingTool_tSalesforceInput_3_1_fisrt {
 		                    		
 		                    		String getSchemaValue() {
 		                    				
 		                    						StringBuilder s = new StringBuilder();
                    						
     		                    						a("{\"type\":\"record\",",s);
     		                    						
     		                    						a("\"name\":\"MAIN\",\"fields\":[{",s);
     		                    						
     		                    						a("\"name\":\"Id\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"Id\",\"talend.field.dbColumnName\":\"Id\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"18\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Id\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"CreatedDate\",\"type\":\"string\",\"di.table.comment\":\"\",\"di.prop.di.date.noLogicalType\":\"true\",\"AVRO_TECHNICAL_KEY\":\"CreatedDate\",\"talend.field.dbColumnName\":\"CreatedDate\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"yyyy-MM-dd'T'HH:mm:ss'.000Z'\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"CreatedDate\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"FileName__c\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"Name\",\"talend.field.dbColumnName\":\"FileName__c\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"80\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"FileName__c\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"Order__r_OrderNumber\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"Order_Number__c\",\"talend.field.dbColumnName\":\"Order__r_OrderNumber\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"10\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Order__r_OrderNumber\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"EDI_PO_Numner__c\",\"type\":\"string\",\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"EDI_PO_Numner__c\",\"talend.field.dbColumnName\":\"EDI_PO_Numner__c\",\"di.column.talendType\":\"id_String\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"50\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"EDI_PO_Numner__c\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"Account_JDE_Number__c\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"Account_JDE_Number__c\",\"talend.field.dbColumnName\":\"Account_JDE_Number__c\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"10\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Account_JDE_Number__c\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"Address_Name__c\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"Address_Name__c\",\"talend.field.dbColumnName\":\"Address_Name__c\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"200\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Address_Name__c\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"Status__c\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"Status__c\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Status__c\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"Error_Code__c\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"Error_Code__c\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Error_Code__c\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"Error_Message__c\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"talend.field.dbType\":\"\",\"talend.field.dbColumnName\":\"Error_Message__c\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"Error_Message__c\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"EDI_LogDetail_1__c\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"EDI_LogDetail_1__c\",\"talend.field.dbColumnName\":\"EDI_LogDetail_1__c\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"32768\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"EDI_LogDetail_1__c\",\"di.column.relatedEntity\":\"\"},{",s);
     		                    						
     		                    						a("\"name\":\"EDI_LogDetail_2__c\",\"type\":[\"string\",\"null\"],\"di.table.comment\":\"\",\"AVRO_TECHNICAL_KEY\":\"EDI_LogDetail_3__c\",\"talend.field.dbColumnName\":\"EDI_LogDetail_2__c\",\"di.column.talendType\":\"id_String\",\"di.column.isNullable\":\"true\",\"talend.field.pattern\":\"\",\"talend.field.length\":\"32768\",\"di.column.relationshipType\":\"\",\"di.table.label\":\"EDI_LogDetail_2__c\",\"di.column.relatedEntity\":\"\"}],\"di.table.name\":\"MAIN\",\"di.table.label\":\"MAIN\"}",s);
     		                    						
     		                    				return s.toString();
     		                    		
 		                    		}
 		                    		
 		                    		void a(String part, StringBuilder strB) {
 		                    				strB.append(part);
 		                    		}
 		                    		
 		                    }
 		                    
 		                    SchemaSettingTool_tSalesforceInput_3_1_fisrt sst_tSalesforceInput_3_1_fisrt = new SchemaSettingTool_tSalesforceInput_3_1_fisrt();
 		                    
 		                    props_tSalesforceInput_3.module.main.setValue("schema",
 		                        new org.apache.avro.Schema.Parser().parse(sst_tSalesforceInput_3_1_fisrt.getSchemaValue()));
 		                    
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceInput_3.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tSalesforceInput_3 = props_tSalesforceInput_3.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tSalesforceInput_3 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceInput_3 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tSalesforceInput_3 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tSalesforceInput_3.connection.referencedComponent.setReference(referencedComponentProperties_tSalesforceInput_3);
        }
    }
    if (org.talend.components.api.properties.ComponentReferenceProperties.ReferenceType.COMPONENT_INSTANCE == props_tSalesforceInput_3.module.connection.referencedComponent.referenceType.getValue()) {
        final String referencedComponentInstanceId_tSalesforceInput_3 = props_tSalesforceInput_3.module.connection.referencedComponent.componentInstanceId.getStringValue();
        if (referencedComponentInstanceId_tSalesforceInput_3 != null) {
            org.talend.daikon.properties.Properties referencedComponentProperties_tSalesforceInput_3 = (org.talend.daikon.properties.Properties) globalMap.get(
                referencedComponentInstanceId_tSalesforceInput_3 + "_COMPONENT_RUNTIME_PROPERTIES");
            props_tSalesforceInput_3.module.connection.referencedComponent.setReference(referencedComponentProperties_tSalesforceInput_3);
        }
    }
globalMap.put("tSalesforceInput_3_COMPONENT_RUNTIME_PROPERTIES", props_tSalesforceInput_3);
globalMap.putIfAbsent("TALEND_PRODUCT_VERSION", "7.3");
globalMap.put("TALEND_COMPONENTS_VERSION", "0.28.0.SNAPSHOT");
java.net.URL mappings_url_tSalesforceInput_3= this.getClass().getResource("/xmlMappings");
globalMap.put("tSalesforceInput_3_MAPPINGS_URL", mappings_url_tSalesforceInput_3);

org.talend.components.api.container.RuntimeContainer container_tSalesforceInput_3 = new org.talend.components.api.container.RuntimeContainer() {
    public Object getComponentData(String componentId, String key) {
        return globalMap.get(componentId + "_" + key);
    }

    public void setComponentData(String componentId, String key, Object data) {
        globalMap.put(componentId + "_" + key, data);
    }

    public String getCurrentComponentId() {
        return "tSalesforceInput_3";
    }

    public Object getGlobalData(String key) {
    	return globalMap.get(key);
    }
};

int nb_line_tSalesforceInput_3 = 0;

org.talend.components.api.component.ConnectorTopology topology_tSalesforceInput_3 = null;
topology_tSalesforceInput_3 = org.talend.components.api.component.ConnectorTopology.OUTGOING;

org.talend.daikon.runtime.RuntimeInfo runtime_info_tSalesforceInput_3 = def_tSalesforceInput_3.getRuntimeInfo(
    org.talend.components.api.component.runtime.ExecutionEngine.DI, props_tSalesforceInput_3, topology_tSalesforceInput_3);
java.util.Set<org.talend.components.api.component.ConnectorTopology> supported_connector_topologies_tSalesforceInput_3 = def_tSalesforceInput_3.getSupportedConnectorTopologies();

org.talend.components.api.component.runtime.RuntimableRuntime componentRuntime_tSalesforceInput_3 = (org.talend.components.api.component.runtime.RuntimableRuntime)(Class.forName(runtime_info_tSalesforceInput_3.getRuntimeClassName()).newInstance());
org.talend.daikon.properties.ValidationResult initVr_tSalesforceInput_3 = componentRuntime_tSalesforceInput_3.initialize(container_tSalesforceInput_3, props_tSalesforceInput_3);

if (initVr_tSalesforceInput_3.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    throw new RuntimeException(initVr_tSalesforceInput_3.getMessage());
}

if(componentRuntime_tSalesforceInput_3 instanceof org.talend.components.api.component.runtime.ComponentDriverInitialization) {
	org.talend.components.api.component.runtime.ComponentDriverInitialization compDriverInitialization_tSalesforceInput_3 = (org.talend.components.api.component.runtime.ComponentDriverInitialization)componentRuntime_tSalesforceInput_3;
	compDriverInitialization_tSalesforceInput_3.runAtDriver(container_tSalesforceInput_3);
}

org.talend.components.api.component.runtime.SourceOrSink sourceOrSink_tSalesforceInput_3 = null;
if(componentRuntime_tSalesforceInput_3 instanceof org.talend.components.api.component.runtime.SourceOrSink) {
	sourceOrSink_tSalesforceInput_3 = (org.talend.components.api.component.runtime.SourceOrSink)componentRuntime_tSalesforceInput_3;
	org.talend.daikon.properties.ValidationResult vr_tSalesforceInput_3 = sourceOrSink_tSalesforceInput_3.validate(container_tSalesforceInput_3);
	if (vr_tSalesforceInput_3.getStatus() == org.talend.daikon.properties.ValidationResult.Result.ERROR ) {
    	throw new RuntimeException(vr_tSalesforceInput_3.getMessage());
	}
}

    org.talend.components.api.component.runtime.Source source_tSalesforceInput_3 =
            (org.talend.components.api.component.runtime.Source)sourceOrSink_tSalesforceInput_3;
    org.talend.components.api.component.runtime.Reader reader_tSalesforceInput_3 =
            source_tSalesforceInput_3.createReader(container_tSalesforceInput_3);
	reader_tSalesforceInput_3 = new org.talend.codegen.flowvariables.runtime.FlowVariablesReader(reader_tSalesforceInput_3, container_tSalesforceInput_3);

        boolean multi_output_is_allowed_tSalesforceInput_3 = false;
        org.talend.components.api.component.Connector c_tSalesforceInput_3 = null;
        for (org.talend.components.api.component.Connector currentConnector : props_tSalesforceInput_3.getAvailableConnectors(null, true)) {
            if (currentConnector.getName().equals("MAIN")) {
                c_tSalesforceInput_3 = currentConnector;
            }

            if (currentConnector.getName().equals("REJECT")) {//it's better to move the code to javajet
                multi_output_is_allowed_tSalesforceInput_3 = true;
            }
        }
        org.apache.avro.Schema schema_tSalesforceInput_3 = props_tSalesforceInput_3.getSchema(c_tSalesforceInput_3, true);

        org.talend.codegen.enforcer.OutgoingSchemaEnforcer outgoingEnforcer_tSalesforceInput_3 = org.talend.codegen.enforcer.EnforcerCreator.createOutgoingEnforcer(schema_tSalesforceInput_3, false);

        // Create a reusable factory that converts the output of the reader to an IndexedRecord.
        org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord> factory_tSalesforceInput_3 = null;

    // Iterate through the incoming data.
    boolean available_tSalesforceInput_3 = reader_tSalesforceInput_3.start();

    resourceMap.put("reader_tSalesforceInput_3", reader_tSalesforceInput_3);

    for (; available_tSalesforceInput_3; available_tSalesforceInput_3 = reader_tSalesforceInput_3.advance()) {
    	nb_line_tSalesforceInput_3++;

    	
        if (multi_output_is_allowed_tSalesforceInput_3) {
                logRows = null;

        }

        try {
            Object data_tSalesforceInput_3 = reader_tSalesforceInput_3.getCurrent();

                if(multi_output_is_allowed_tSalesforceInput_3) {
                    logRows = new logRowsStruct();
                }

        // Construct the factory once when the first data arrives.
        if (factory_tSalesforceInput_3 == null) {
            factory_tSalesforceInput_3 = (org.talend.daikon.avro.converter.IndexedRecordConverter<Object, ? extends org.apache.avro.generic.IndexedRecord>)
                    new org.talend.daikon.avro.AvroRegistry()
                            .createIndexedRecordConverter(data_tSalesforceInput_3.getClass());
        }

        // Enforce the outgoing schema on the input.
        outgoingEnforcer_tSalesforceInput_3.setWrapped(factory_tSalesforceInput_3.convertToAvro(data_tSalesforceInput_3));
                Object columnValue_0_tSalesforceInput_3 = outgoingEnforcer_tSalesforceInput_3.get(0);
                        logRows.Id = (String) (columnValue_0_tSalesforceInput_3);
                Object columnValue_1_tSalesforceInput_3 = outgoingEnforcer_tSalesforceInput_3.get(1);
                        logRows.CreatedDate = (String) (columnValue_1_tSalesforceInput_3);
                Object columnValue_2_tSalesforceInput_3 = outgoingEnforcer_tSalesforceInput_3.get(2);
                        logRows.FileName__c = (String) (columnValue_2_tSalesforceInput_3);
                Object columnValue_3_tSalesforceInput_3 = outgoingEnforcer_tSalesforceInput_3.get(3);
                        logRows.Order__r_OrderNumber = (String) (columnValue_3_tSalesforceInput_3);
                Object columnValue_4_tSalesforceInput_3 = outgoingEnforcer_tSalesforceInput_3.get(4);
                        logRows.EDI_PO_Numner__c = (String) (columnValue_4_tSalesforceInput_3);
                Object columnValue_5_tSalesforceInput_3 = outgoingEnforcer_tSalesforceInput_3.get(5);
                        logRows.Account_JDE_Number__c = (String) (columnValue_5_tSalesforceInput_3);
                Object columnValue_6_tSalesforceInput_3 = outgoingEnforcer_tSalesforceInput_3.get(6);
                        logRows.Address_Name__c = (String) (columnValue_6_tSalesforceInput_3);
                Object columnValue_7_tSalesforceInput_3 = outgoingEnforcer_tSalesforceInput_3.get(7);
                        logRows.Status__c = (String) (columnValue_7_tSalesforceInput_3);
                Object columnValue_8_tSalesforceInput_3 = outgoingEnforcer_tSalesforceInput_3.get(8);
                        logRows.Error_Code__c = (String) (columnValue_8_tSalesforceInput_3);
                Object columnValue_9_tSalesforceInput_3 = outgoingEnforcer_tSalesforceInput_3.get(9);
                        logRows.Error_Message__c = (String) (columnValue_9_tSalesforceInput_3);
                Object columnValue_10_tSalesforceInput_3 = outgoingEnforcer_tSalesforceInput_3.get(10);
                        logRows.EDI_LogDetail_1__c = (String) (columnValue_10_tSalesforceInput_3);
                Object columnValue_11_tSalesforceInput_3 = outgoingEnforcer_tSalesforceInput_3.get(11);
                        logRows.EDI_LogDetail_2__c = (String) (columnValue_11_tSalesforceInput_3);
        } catch (org.talend.components.api.exception.DataRejectException e_tSalesforceInput_3) {
        	java.util.Map<String,Object> info_tSalesforceInput_3 = e_tSalesforceInput_3.getRejectInfo();
            	//TODO use a method instead of getting method by the special key "error/errorMessage"
            	Object errorMessage_tSalesforceInput_3 = null;
            	if(info_tSalesforceInput_3.containsKey("error")){
            		errorMessage_tSalesforceInput_3 = info_tSalesforceInput_3.get("error");
        		}else if(info_tSalesforceInput_3.containsKey("errorMessage")){
            		errorMessage_tSalesforceInput_3 = info_tSalesforceInput_3.get("errorMessage");
        		}else{
        			errorMessage_tSalesforceInput_3 = "Rejected but error message missing";
        		}
        		errorMessage_tSalesforceInput_3 = "Row "+ nb_line_tSalesforceInput_3 + ": "+errorMessage_tSalesforceInput_3;
    			System.err.println(errorMessage_tSalesforceInput_3);
            	// If the record is reject, the main line record should put NULL
            	logRows = null;
    }
                java.lang.Iterable<?> outgoingMainRecordsList_tSalesforceInput_3 = new java.util.ArrayList<Object>();
                java.util.Iterator outgoingMainRecordsIt_tSalesforceInput_3 = null;


 



/**
 * [tSalesforceInput_3 begin ] stop
 */
	
	/**
	 * [tSalesforceInput_3 main ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_3";

	


 


	tos_count_tSalesforceInput_3++;

/**
 * [tSalesforceInput_3 main ] stop
 */
	
	/**
	 * [tSalesforceInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_3";

	


 



/**
 * [tSalesforceInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tJavaFlex_1 main ] start
	 */

	

	
	
	currentComponent="tJavaFlex_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"logRows");
					}
					



// here is the main part of the component,
// a piece of code executed in the row
// loop
context.HasLines = true;
bodyHTML += "<tr><td><table class=\"order-table\"  style=\"border-top: 2px solid #D32E3F; border-bottom: 2px solid #D32E3F; border-collapse: collapse;margin: 25px 0;font-size: 0.9em;font-family: sans-serif;min-width: 400px;width: 100%;\">";
bodyHTML += "<tbody>";
bodyHTML += "<tr><td colspan=\"2\">";
bodyHTML += "<b>Customer order number:</b> " + logRows.EDI_PO_Numner__c + "<br/>";
bodyHTML += "<b>Status:</b><span style=\"font-weight: bold; color: " + (logRows.Status__c.equals("OK") ? "#70ad47" : "#f20000") + ";\"> " + logRows.Status__c + "</span><br/><br/>";
bodyHTML += "<b>Order:</b> " + logRows.Order__r_OrderNumber + "<br/>";
bodyHTML += "<b>Created Date:</b> " + logRows.CreatedDate + "<br/>";
bodyHTML += "<b>File name:</b> " + logRows.FileName__c + "<br/>";
bodyHTML += "<b>Account JDE Number:</b> " + logRows.Account_JDE_Number__c + "<br/>";
bodyHTML += "<b>Address Name:</b> " + logRows.Address_Name__c + "<br/><br/>";

// If error
if(logRows.Error_Code__c != null && logRows.Error_Code__c != ""){
	bodyHTML += "<b>Error Code:</b> " + logRows.Error_Code__c + "<br/>";
	bodyHTML += "<b>Error Message:</b> " + logRows.Error_Message__c + "<br/><br/>";
}

bodyHTML += "</td></tr>";



bodyHTML += "<tr><td colspan=\"2\">&nbsp;</td></tr>";

// Lines warning
if((logRows.EDI_LogDetail_1__c != null && logRows.EDI_LogDetail_1__c != "") || (logRows.EDI_LogDetail_2__c != null && logRows.EDI_LogDetail_2__c != "")){
	bodyHTML += "<tr><td colspan=\"2\">";
	if(logRows.EDI_LogDetail_1__c != null && logRows.EDI_LogDetail_1__c != ""){
		bodyHTML += "<h4>Order lines to check</h4>" + logRows.EDI_LogDetail_1__c;
	}

	if(logRows.EDI_LogDetail_2__c != null && logRows.EDI_LogDetail_2__c != ""){
		bodyHTML += "<h4>Products not found in system or inactive</h4>" + logRows.EDI_LogDetail_2__c;
	}
	bodyHTML += "</td></tr>";
}
bodyHTML += "</tbody></table></td></tr>";




 


	tos_count_tJavaFlex_1++;

/**
 * [tJavaFlex_1 main ] stop
 */
	
	/**
	 * [tJavaFlex_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaFlex_1";

	

 



/**
 * [tJavaFlex_1 process_data_begin ] stop
 */
	
	/**
	 * [tJavaFlex_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaFlex_1";

	

 



/**
 * [tJavaFlex_1 process_data_end ] stop
 */



	
	/**
	 * [tSalesforceInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_3";

	


 



/**
 * [tSalesforceInput_3 process_data_end ] stop
 */
	
	/**
	 * [tSalesforceInput_3 end ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_3";

	
// end of generic


resourceMap.put("finish_tSalesforceInput_3", Boolean.TRUE);

    } // while
    reader_tSalesforceInput_3.close();
    final java.util.Map<String, Object> resultMap_tSalesforceInput_3 = reader_tSalesforceInput_3.getReturnValues();
if(resultMap_tSalesforceInput_3!=null) {
	for(java.util.Map.Entry<String,Object> entry_tSalesforceInput_3 : resultMap_tSalesforceInput_3.entrySet()) {
		switch(entry_tSalesforceInput_3.getKey()) {
		case org.talend.components.api.component.ComponentDefinition.RETURN_ERROR_MESSAGE :
			container_tSalesforceInput_3.setComponentData("tSalesforceInput_3", "ERROR_MESSAGE", entry_tSalesforceInput_3.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_TOTAL_RECORD_COUNT :
			container_tSalesforceInput_3.setComponentData("tSalesforceInput_3", "NB_LINE", entry_tSalesforceInput_3.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_SUCCESS_RECORD_COUNT :
			container_tSalesforceInput_3.setComponentData("tSalesforceInput_3", "NB_SUCCESS", entry_tSalesforceInput_3.getValue());
			break;
		case org.talend.components.api.component.ComponentDefinition.RETURN_REJECT_RECORD_COUNT :
			container_tSalesforceInput_3.setComponentData("tSalesforceInput_3", "NB_REJECT", entry_tSalesforceInput_3.getValue());
			break;
		default :
            StringBuilder studio_key_tSalesforceInput_3 = new StringBuilder();
            for (int i_tSalesforceInput_3 = 0; i_tSalesforceInput_3 < entry_tSalesforceInput_3.getKey().length(); i_tSalesforceInput_3++) {
                char ch_tSalesforceInput_3 = entry_tSalesforceInput_3.getKey().charAt(i_tSalesforceInput_3);
                if(Character.isUpperCase(ch_tSalesforceInput_3) && i_tSalesforceInput_3> 0) {
                	studio_key_tSalesforceInput_3.append('_');
                }
                studio_key_tSalesforceInput_3.append(ch_tSalesforceInput_3);
            }
			container_tSalesforceInput_3.setComponentData("tSalesforceInput_3", studio_key_tSalesforceInput_3.toString().toUpperCase(java.util.Locale.ENGLISH), entry_tSalesforceInput_3.getValue());
			break;
		}
	}
}

 

ok_Hash.put("tSalesforceInput_3", true);
end_Hash.put("tSalesforceInput_3", System.currentTimeMillis());




/**
 * [tSalesforceInput_3 end ] stop
 */

	
	/**
	 * [tJavaFlex_1 end ] start
	 */

	

	
	
	currentComponent="tJavaFlex_1";

	


// end of the component, outside/closing the loop
context.HtmlBody = context.ReportTemplate.replace("__BODY__",bodyHTML);
System.out.println("HTML Body:" + context.HtmlBody);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"logRows");
			  	}
			  	
 

ok_Hash.put("tJavaFlex_1", true);
end_Hash.put("tJavaFlex_1", System.currentTimeMillis());




/**
 * [tJavaFlex_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSalesforceInput_3 finally ] start
	 */

	

	
	
	currentComponent="tSalesforceInput_3";

	
// finally of generic


if(resourceMap.get("finish_tSalesforceInput_3")==null){
    if(resourceMap.get("reader_tSalesforceInput_3")!=null){
		try {
			((org.talend.components.api.component.runtime.Reader)resourceMap.get("reader_tSalesforceInput_3")).close();
		} catch (java.io.IOException e_tSalesforceInput_3) {
			String errorMessage_tSalesforceInput_3 = "failed to release the resource in tSalesforceInput_3 :" + e_tSalesforceInput_3.getMessage();
			System.err.println(errorMessage_tSalesforceInput_3);
		}
	}
}
 



/**
 * [tSalesforceInput_3 finally ] stop
 */

	
	/**
	 * [tJavaFlex_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaFlex_1";

	

 



/**
 * [tJavaFlex_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSalesforceInput_3_SUBPROCESS_STATE", 1);
	}
	

public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";

	
		int tos_count_tPostjob_1 = 0;
		

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk6", 0, "ok");
				}
				tSendMail_3Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	

public void tSendMail_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSendMail_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tSendMail_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tSendMail_3", false);
		start_Hash.put("tSendMail_3", System.currentTimeMillis());
		
	
	currentComponent="tSendMail_3";

	
		int tos_count_tSendMail_3 = 0;
		

 



/**
 * [tSendMail_3 begin ] stop
 */
	
	/**
	 * [tSendMail_3 main ] start
	 */

	

	
	
	currentComponent="tSendMail_3";

	

 

	String smtpHost_tSendMail_3 = context.SMTP_Server;
        String smtpPort_tSendMail_3 = context.SMTP_Port;
	String from_tSendMail_3 = (context.SMTP_Sender);
    String to_tSendMail_3 = (context.EDI_RecipientList).replace(";",",");
    String cc_tSendMail_3 = (("")==null || "".equals(""))?null:("").replace(";",",");
    String bcc_tSendMail_3 = (("")==null || "".equals(""))?null:("").replace(";",",");
    String subject_tSendMail_3 = ("[Talend Interface] EDI Report - " + TalendDate.formatDate("yyyy-MM-dd",TalendDate.getCurrentDate()));
    
	java.util.List<java.util.Map<String, String>> headers_tSendMail_3 = new java.util.ArrayList<java.util.Map<String,String>>();
	java.util.List<String> attachments_tSendMail_3 = new java.util.ArrayList<String>();
	java.util.List<String> contentTransferEncoding_tSendMail_3 = new java.util.ArrayList<String>();

	String message_tSendMail_3 = (((!context.HasLines) ? ("<p>No EDI orders created on " + TalendDate.formatDate("yyyy-MM-dd",TalendDate.getCurrentDate()) + ". </p>")
 : ("<p>Please find a summary of EDI created orders on " + TalendDate.formatDate("yyyy-MM-dd",TalendDate.getCurrentDate()) + ". </p>" + context.HtmlBody)) == null || "".equals((!context.HasLines) ? ("<p>No EDI orders created on " + TalendDate.formatDate("yyyy-MM-dd",TalendDate.getCurrentDate()) + ". </p>")
 : ("<p>Please find a summary of EDI created orders on " + TalendDate.formatDate("yyyy-MM-dd",TalendDate.getCurrentDate()) + ". </p>" + context.HtmlBody))) ? "\"\"" : ((!context.HasLines) ? ("<p>No EDI orders created on " + TalendDate.formatDate("yyyy-MM-dd",TalendDate.getCurrentDate()) + ". </p>")
 : ("<p>Please find a summary of EDI created orders on " + TalendDate.formatDate("yyyy-MM-dd",TalendDate.getCurrentDate()) + ". </p>" + context.HtmlBody)) ;
	java.util.Properties props_tSendMail_3 = System.getProperties();     
	props_tSendMail_3.put("mail.smtp.host", smtpHost_tSendMail_3);
	props_tSendMail_3.put("mail.smtp.port", smtpPort_tSendMail_3);
		props_tSendMail_3.put("mail.mime.encodefilename", "true");
		props_tSendMail_3.put("mail.smtp.starttls.enable","true");     
	try {
		
		
			props_tSendMail_3.put("mail.smtp.auth", "true");
			javax.mail.Session session_tSendMail_3 = javax.mail.Session.getInstance(props_tSendMail_3, new javax.mail.Authenticator(){         
				protected javax.mail.PasswordAuthentication getPasswordAuthentication() {
				
                
	final String decryptedPassword_tSendMail_3 = context.SMTP_Password; 
				
				
				return new javax.mail.PasswordAuthentication(context.SMTP_User, decryptedPassword_tSendMail_3); 
				}         
			});   
		
		
		javax.mail.Message msg_tSendMail_3 = new javax.mail.internet.MimeMessage(session_tSendMail_3);
		msg_tSendMail_3.setFrom(new javax.mail.internet.InternetAddress(from_tSendMail_3, null));
		msg_tSendMail_3.setRecipients(javax.mail.Message.RecipientType.TO,javax.mail.internet.InternetAddress.parse(to_tSendMail_3, false));
		if (cc_tSendMail_3 != null) msg_tSendMail_3.setRecipients(javax.mail.Message.RecipientType.CC, javax.mail.internet.InternetAddress.parse(cc_tSendMail_3, false));
		if (bcc_tSendMail_3 != null) msg_tSendMail_3.setRecipients(javax.mail.Message.RecipientType.BCC, javax.mail.internet.InternetAddress.parse(bcc_tSendMail_3, false));
		msg_tSendMail_3.setSubject(subject_tSendMail_3);

		for (int i_tSendMail_3 = 0; i_tSendMail_3 < headers_tSendMail_3.size(); i_tSendMail_3++) {
			java.util.Map<String, String> header_tSendMail_3 = headers_tSendMail_3.get(i_tSendMail_3);
			msg_tSendMail_3.setHeader(header_tSendMail_3.get("KEY"), header_tSendMail_3.get("VALUE"));    
		}  
		msg_tSendMail_3.setSentDate(new Date());
		msg_tSendMail_3.setHeader("X-Priority", "3"); //High->1 Normal->3 Low->5
		javax.mail.Multipart mp_tSendMail_3 = new javax.mail.internet.MimeMultipart();
		javax.mail.internet.MimeBodyPart mbpText_tSendMail_3 = new javax.mail.internet.MimeBodyPart();
		mbpText_tSendMail_3.setText(message_tSendMail_3,"ISO-8859-15", "html");
		mp_tSendMail_3.addBodyPart(mbpText_tSendMail_3);
  
		javax.mail.internet.MimeBodyPart mbpFile_tSendMail_3 = null;

		for (int i_tSendMail_3 = 0; i_tSendMail_3 < attachments_tSendMail_3.size(); i_tSendMail_3++){
			String filename_tSendMail_3 = attachments_tSendMail_3.get(i_tSendMail_3);
			javax.activation.FileDataSource fds_tSendMail_3 = null;
			java.io.File file_tSendMail_3 = new java.io.File(filename_tSendMail_3);
			
				if (!file_tSendMail_3.exists()){
					continue;
				}
			
    		if (file_tSendMail_3.isDirectory()){
				java.io.File[] subFiles_tSendMail_3 = file_tSendMail_3.listFiles();
				for(java.io.File subFile_tSendMail_3 : subFiles_tSendMail_3){
					if (subFile_tSendMail_3.isFile()){
						fds_tSendMail_3 = new javax.activation.FileDataSource(subFile_tSendMail_3.getAbsolutePath());
						mbpFile_tSendMail_3 = new javax.mail.internet.MimeBodyPart();
						mbpFile_tSendMail_3.setDataHandler(new javax.activation.DataHandler(fds_tSendMail_3));
						mbpFile_tSendMail_3.setFileName(javax.mail.internet.MimeUtility.encodeText(fds_tSendMail_3.getName()));
						if(contentTransferEncoding_tSendMail_3.get(i_tSendMail_3).equalsIgnoreCase("base64")){
							mbpFile_tSendMail_3.setHeader("Content-Transfer-Encoding", "base64");
						}
						mp_tSendMail_3.addBodyPart(mbpFile_tSendMail_3);
					}
				}
    		}else{
				mbpFile_tSendMail_3 = new javax.mail.internet.MimeBodyPart();
				fds_tSendMail_3 = new javax.activation.FileDataSource(filename_tSendMail_3);
				mbpFile_tSendMail_3.setDataHandler(new javax.activation.DataHandler(fds_tSendMail_3)); 
				mbpFile_tSendMail_3.setFileName(javax.mail.internet.MimeUtility.encodeText(fds_tSendMail_3.getName()));
				if(contentTransferEncoding_tSendMail_3.get(i_tSendMail_3).equalsIgnoreCase("base64")){
					mbpFile_tSendMail_3.setHeader("Content-Transfer-Encoding", "base64");
				}
				mp_tSendMail_3.addBodyPart(mbpFile_tSendMail_3);
			}
		}
		// -- set the content --
		msg_tSendMail_3.setContent(mp_tSendMail_3);
		// add handlers for main MIME types
		javax.activation.MailcapCommandMap mc_tSendMail_3 = ( javax.activation.MailcapCommandMap)javax.activation.CommandMap.getDefaultCommandMap();
		mc_tSendMail_3.addMailcap("text/html;; x-java-content-handler=com.sun.mail.handlers.text_html");
		mc_tSendMail_3.addMailcap("text/xml;; x-java-content-handler=com.sun.mail.handlers.text_xml");
		mc_tSendMail_3.addMailcap("text/plain;; x-java-content-handler=com.sun.mail.handlers.text_plain");
		mc_tSendMail_3.addMailcap("multipart/*;; x-java-content-handler=com.sun.mail.handlers.multipart_mixed");
		mc_tSendMail_3.addMailcap("message/rfc822;; x-java-content-handler=com.sun.mail.handlers.message_rfc822");
		javax.activation.CommandMap.setDefaultCommandMap(mc_tSendMail_3);
		// -- Send the message --
		javax.mail.Transport.send(msg_tSendMail_3);
	} catch(java.lang.Exception e){
  		
			throw(e);
		
	}finally{
		props_tSendMail_3.remove("mail.smtp.host");
		props_tSendMail_3.remove("mail.smtp.port");
		
		props_tSendMail_3.remove("mail.mime.encodefilename");
		
			props_tSendMail_3.remove("mail.smtp.starttls.enable");
		
		props_tSendMail_3.remove("mail.smtp.auth");     
	}

 


	tos_count_tSendMail_3++;

/**
 * [tSendMail_3 main ] stop
 */
	
	/**
	 * [tSendMail_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSendMail_3";

	

 



/**
 * [tSendMail_3 process_data_begin ] stop
 */
	
	/**
	 * [tSendMail_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tSendMail_3";

	

 



/**
 * [tSendMail_3 process_data_end ] stop
 */
	
	/**
	 * [tSendMail_3 end ] start
	 */

	

	
	
	currentComponent="tSendMail_3";

	

 

ok_Hash.put("tSendMail_3", true);
end_Hash.put("tSendMail_3", System.currentTimeMillis());




/**
 * [tSendMail_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSendMail_3 finally ] start
	 */

	

	
	
	currentComponent="tSendMail_3";

	

 



/**
 * [tSendMail_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSendMail_3_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Production";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    
    private final org.talend.components.common.runtime.SharedConnectionsPool connectionPool = new org.talend.components.common.runtime.SharedConnectionsPool() {
    	public java.sql.Connection getDBConnection(String dbDriver, String url, String userName, String password, String dbConnectionName)
            throws ClassNotFoundException, java.sql.SQLException {
            return SharedDBConnection.getDBConnection(dbDriver, url, userName, password, dbConnectionName);
        }

    	public java.sql.Connection getDBConnection(String dbDriver, String url, String dbConnectionName)
            throws ClassNotFoundException, java.sql.SQLException {
            return SharedDBConnection.getDBConnection(dbDriver, url, dbConnectionName);
        }
    };
    
    private static final String GLOBAL_CONNECTION_POOL_KEY = "GLOBAL_CONNECTION_POOL";
    
    {
    	globalMap.put(GLOBAL_CONNECTION_POOL_KEY, connectionPool);
    }

    public static void main(String[] args){
        final EDI_Send_EDIOrder_DailyReport EDI_Send_EDIOrder_DailyReportClass = new EDI_Send_EDIOrder_DailyReport();

        int exitCode = EDI_Send_EDIOrder_DailyReportClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = EDI_Send_EDIOrder_DailyReport.class.getClassLoader().getResourceAsStream("dev/edi_send_ediorder_dailyreport_0_2/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = EDI_Send_EDIOrder_DailyReport.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("HasLines", "id_Boolean");
                            try{
                                context.HasLines=routines.system.ParserUtils.parseTo_Boolean (context.getProperty("HasLines"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "HasLines", e.getMessage()));
                                context.HasLines=null;
                            }
                        context.setContextType("HtmlBody", "id_String");
                            context.HtmlBody=(String) context.getProperty("HtmlBody");
                        context.setContextType("SMTP_Password", "id_Password");
                            String pwd_SMTP_Password_value = context.getProperty("SMTP_Password");
                            context.SMTP_Password = null;
                            if(pwd_SMTP_Password_value!=null) {
                                if(context_param.containsKey("SMTP_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.SMTP_Password = pwd_SMTP_Password_value;
                                } else if (!pwd_SMTP_Password_value.isEmpty()) {
                                    try {
                                        context.SMTP_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_SMTP_Password_value);
                                        context.put("SMTP_Password",context.SMTP_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        context.setContextType("SMTP_Port", "id_String");
                            context.SMTP_Port=(String) context.getProperty("SMTP_Port");
                        context.setContextType("SMTP_Sender", "id_String");
                            context.SMTP_Sender=(String) context.getProperty("SMTP_Sender");
                        context.setContextType("SMTP_Server", "id_String");
                            context.SMTP_Server=(String) context.getProperty("SMTP_Server");
                        context.setContextType("SMTP_User", "id_String");
                            context.SMTP_User=(String) context.getProperty("SMTP_User");
                        context.setContextType("COMARCH_RootFolder", "id_String");
                            context.COMARCH_RootFolder=(String) context.getProperty("COMARCH_RootFolder");
                        context.setContextType("EDI_RecipientList", "id_String");
                            context.EDI_RecipientList=(String) context.getProperty("EDI_RecipientList");
                        context.setContextType("ReportTemplate", "id_String");
                            context.ReportTemplate=(String) context.getProperty("ReportTemplate");
                        context.setContextType("SalesforceApiVersion", "id_String");
                            context.SalesforceApiVersion=(String) context.getProperty("SalesforceApiVersion");
                        context.setContextType("SalesForceClientId", "id_Password");
                            String pwd_SalesForceClientId_value = context.getProperty("SalesForceClientId");
                            context.SalesForceClientId = null;
                            if(pwd_SalesForceClientId_value!=null) {
                                if(context_param.containsKey("SalesForceClientId")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.SalesForceClientId = pwd_SalesForceClientId_value;
                                } else if (!pwd_SalesForceClientId_value.isEmpty()) {
                                    try {
                                        context.SalesForceClientId = routines.system.PasswordEncryptUtil.decryptPassword(pwd_SalesForceClientId_value);
                                        context.put("SalesForceClientId",context.SalesForceClientId);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        context.setContextType("SalesForceClientSecret", "id_Password");
                            String pwd_SalesForceClientSecret_value = context.getProperty("SalesForceClientSecret");
                            context.SalesForceClientSecret = null;
                            if(pwd_SalesForceClientSecret_value!=null) {
                                if(context_param.containsKey("SalesForceClientSecret")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.SalesForceClientSecret = pwd_SalesForceClientSecret_value;
                                } else if (!pwd_SalesForceClientSecret_value.isEmpty()) {
                                    try {
                                        context.SalesForceClientSecret = routines.system.PasswordEncryptUtil.decryptPassword(pwd_SalesForceClientSecret_value);
                                        context.put("SalesForceClientSecret",context.SalesForceClientSecret);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        context.setContextType("SalesforceMyDomainUrl", "id_String");
                            context.SalesforceMyDomainUrl=(String) context.getProperty("SalesforceMyDomainUrl");
                        context.setContextType("SalesForceOAuthToken", "id_String");
                            context.SalesForceOAuthToken=(String) context.getProperty("SalesForceOAuthToken");
                        context.setContextType("SalesforceOrderLibraryId", "id_String");
                            context.SalesforceOrderLibraryId=(String) context.getProperty("SalesforceOrderLibraryId");
                        context.setContextType("SalesforceOrderPdfFolderId", "id_String");
                            context.SalesforceOrderPdfFolderId=(String) context.getProperty("SalesforceOrderPdfFolderId");
                        context.setContextType("SalesforceOrderRT", "id_String");
                            context.SalesforceOrderRT=(String) context.getProperty("SalesforceOrderRT");
                        context.setContextType("SalesforceOrderXmlFolderId", "id_String");
                            context.SalesforceOrderXmlFolderId=(String) context.getProperty("SalesforceOrderXmlFolderId");
                        context.setContextType("SalesForcePassword", "id_Password");
                            String pwd_SalesForcePassword_value = context.getProperty("SalesForcePassword");
                            context.SalesForcePassword = null;
                            if(pwd_SalesForcePassword_value!=null) {
                                if(context_param.containsKey("SalesForcePassword")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.SalesForcePassword = pwd_SalesForcePassword_value;
                                } else if (!pwd_SalesForcePassword_value.isEmpty()) {
                                    try {
                                        context.SalesForcePassword = routines.system.PasswordEncryptUtil.decryptPassword(pwd_SalesForcePassword_value);
                                        context.put("SalesForcePassword",context.SalesForcePassword);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        context.setContextType("SalesForceToken", "id_Password");
                            String pwd_SalesForceToken_value = context.getProperty("SalesForceToken");
                            context.SalesForceToken = null;
                            if(pwd_SalesForceToken_value!=null) {
                                if(context_param.containsKey("SalesForceToken")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.SalesForceToken = pwd_SalesForceToken_value;
                                } else if (!pwd_SalesForceToken_value.isEmpty()) {
                                    try {
                                        context.SalesForceToken = routines.system.PasswordEncryptUtil.decryptPassword(pwd_SalesForceToken_value);
                                        context.put("SalesForceToken",context.SalesForceToken);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        context.setContextType("SalesForceURL", "id_String");
                            context.SalesForceURL=(String) context.getProperty("SalesForceURL");
                        context.setContextType("SalesForceUsername", "id_String");
                            context.SalesForceUsername=(String) context.getProperty("SalesForceUsername");
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("HasLines")) {
                context.HasLines = (Boolean) parentContextMap.get("HasLines");
            }if (parentContextMap.containsKey("HtmlBody")) {
                context.HtmlBody = (String) parentContextMap.get("HtmlBody");
            }if (parentContextMap.containsKey("SMTP_Password")) {
                context.SMTP_Password = (java.lang.String) parentContextMap.get("SMTP_Password");
            }if (parentContextMap.containsKey("SMTP_Port")) {
                context.SMTP_Port = (String) parentContextMap.get("SMTP_Port");
            }if (parentContextMap.containsKey("SMTP_Sender")) {
                context.SMTP_Sender = (String) parentContextMap.get("SMTP_Sender");
            }if (parentContextMap.containsKey("SMTP_Server")) {
                context.SMTP_Server = (String) parentContextMap.get("SMTP_Server");
            }if (parentContextMap.containsKey("SMTP_User")) {
                context.SMTP_User = (String) parentContextMap.get("SMTP_User");
            }if (parentContextMap.containsKey("COMARCH_RootFolder")) {
                context.COMARCH_RootFolder = (String) parentContextMap.get("COMARCH_RootFolder");
            }if (parentContextMap.containsKey("EDI_RecipientList")) {
                context.EDI_RecipientList = (String) parentContextMap.get("EDI_RecipientList");
            }if (parentContextMap.containsKey("ReportTemplate")) {
                context.ReportTemplate = (String) parentContextMap.get("ReportTemplate");
            }if (parentContextMap.containsKey("SalesforceApiVersion")) {
                context.SalesforceApiVersion = (String) parentContextMap.get("SalesforceApiVersion");
            }if (parentContextMap.containsKey("SalesForceClientId")) {
                context.SalesForceClientId = (java.lang.String) parentContextMap.get("SalesForceClientId");
            }if (parentContextMap.containsKey("SalesForceClientSecret")) {
                context.SalesForceClientSecret = (java.lang.String) parentContextMap.get("SalesForceClientSecret");
            }if (parentContextMap.containsKey("SalesforceMyDomainUrl")) {
                context.SalesforceMyDomainUrl = (String) parentContextMap.get("SalesforceMyDomainUrl");
            }if (parentContextMap.containsKey("SalesForceOAuthToken")) {
                context.SalesForceOAuthToken = (String) parentContextMap.get("SalesForceOAuthToken");
            }if (parentContextMap.containsKey("SalesforceOrderLibraryId")) {
                context.SalesforceOrderLibraryId = (String) parentContextMap.get("SalesforceOrderLibraryId");
            }if (parentContextMap.containsKey("SalesforceOrderPdfFolderId")) {
                context.SalesforceOrderPdfFolderId = (String) parentContextMap.get("SalesforceOrderPdfFolderId");
            }if (parentContextMap.containsKey("SalesforceOrderRT")) {
                context.SalesforceOrderRT = (String) parentContextMap.get("SalesforceOrderRT");
            }if (parentContextMap.containsKey("SalesforceOrderXmlFolderId")) {
                context.SalesforceOrderXmlFolderId = (String) parentContextMap.get("SalesforceOrderXmlFolderId");
            }if (parentContextMap.containsKey("SalesForcePassword")) {
                context.SalesForcePassword = (java.lang.String) parentContextMap.get("SalesForcePassword");
            }if (parentContextMap.containsKey("SalesForceToken")) {
                context.SalesForceToken = (java.lang.String) parentContextMap.get("SalesForceToken");
            }if (parentContextMap.containsKey("SalesForceURL")) {
                context.SalesForceURL = (String) parentContextMap.get("SalesForceURL");
            }if (parentContextMap.containsKey("SalesForceUsername")) {
                context.SalesForceUsername = (String) parentContextMap.get("SalesForceUsername");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("SMTP_Password");
			parametersToEncrypt.add("SalesForceClientId");
			parametersToEncrypt.add("SalesForceClientSecret");
			parametersToEncrypt.add("SalesForcePassword");
			parametersToEncrypt.add("SalesForceToken");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}



this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tSalesforceInput_3Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tSalesforceInput_3) {
globalMap.put("tSalesforceInput_3_SUBPROCESS_STATE", -1);

e_tSalesforceInput_3.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : EDI_Send_EDIOrder_DailyReport");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();





            connections.put("conn_tSalesforceConnection_1", globalMap.get("conn_tSalesforceConnection_1"));


        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     113963 characters generated by Talend Open Studio for Data Integration 
 *     on the 12 juillet 2022 10:53:16 CEST
 ************************************************************************************************/