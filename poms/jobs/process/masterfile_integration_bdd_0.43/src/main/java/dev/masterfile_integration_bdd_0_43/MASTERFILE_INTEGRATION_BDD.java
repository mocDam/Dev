// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package dev.masterfile_integration_bdd_0_43;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.SharedRecipient;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJava_3
//import java.util.List;

//the import part of tJava_1
//import java.util.List;

//the import part of tJavaRow_1
//import java.util.List;

//the import part of tJava_2
//import java.util.List;

@SuppressWarnings("unused")

/**
 * Job: MASTERFILE_INTEGRATION_BDD Purpose: <br>
 * Description: 0.40 Ajout de la connexion PREPROD <br>
 * 
 * @author user@talend.com
 * @version 7.3.1.20191031_1204-M3
 * @status
 */
public class MASTERFILE_INTEGRATION_BDD implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (IntegrationPath != null) {

				this.setProperty("IntegrationPath", IntegrationPath.toString());

			}

			if (LogPath != null) {

				this.setProperty("LogPath", LogPath.toString());

			}

			if (insertSQLMode != null) {

				this.setProperty("insertSQLMode", insertSQLMode.toString());

			}

			if (new1 != null) {

				this.setProperty("new1", new1.toString());

			}

			if (SQLSERVER_AdditionalParams != null) {

				this.setProperty("SQLSERVER_AdditionalParams", SQLSERVER_AdditionalParams.toString());

			}

			if (SQLSERVER_Database != null) {

				this.setProperty("SQLSERVER_Database", SQLSERVER_Database.toString());

			}

			if (SQLSERVER_Login != null) {

				this.setProperty("SQLSERVER_Login", SQLSERVER_Login.toString());

			}

			if (SQLSERVER_Password != null) {

				this.setProperty("SQLSERVER_Password", SQLSERVER_Password.toString());

			}

			if (SQLSERVER_Port != null) {

				this.setProperty("SQLSERVER_Port", SQLSERVER_Port.toString());

			}

			if (SQLSERVER_Schema != null) {

				this.setProperty("SQLSERVER_Schema", SQLSERVER_Schema.toString());

			}

			if (SQLSERVER_Server != null) {

				this.setProperty("SQLSERVER_Server", SQLSERVER_Server.toString());

			}

			if (SQLSERVER_LOG_AdditionalParams != null) {

				this.setProperty("SQLSERVER_LOG_AdditionalParams", SQLSERVER_LOG_AdditionalParams.toString());

			}

			if (SQLSERVER_LOG_Database != null) {

				this.setProperty("SQLSERVER_LOG_Database", SQLSERVER_LOG_Database.toString());

			}

			if (SQLSERVER_LOG_Login != null) {

				this.setProperty("SQLSERVER_LOG_Login", SQLSERVER_LOG_Login.toString());

			}

			if (SQLSERVER_LOG_Password != null) {

				this.setProperty("SQLSERVER_LOG_Password", SQLSERVER_LOG_Password.toString());

			}

			if (SQLSERVER_LOG_Port != null) {

				this.setProperty("SQLSERVER_LOG_Port", SQLSERVER_LOG_Port.toString());

			}

			if (SQLSERVER_LOG_Schema != null) {

				this.setProperty("SQLSERVER_LOG_Schema", SQLSERVER_LOG_Schema.toString());

			}

			if (SQLSERVER_LOG_Server != null) {

				this.setProperty("SQLSERVER_LOG_Server", SQLSERVER_LOG_Server.toString());

			}

			if (SQLSERVERSCHEMA_MASTERFILE_AdditionalParams != null) {

				this.setProperty("SQLSERVERSCHEMA_MASTERFILE_AdditionalParams",
						SQLSERVERSCHEMA_MASTERFILE_AdditionalParams.toString());

			}

			if (SQLSERVERSCHEMA_MASTERFILE_Database != null) {

				this.setProperty("SQLSERVERSCHEMA_MASTERFILE_Database", SQLSERVERSCHEMA_MASTERFILE_Database.toString());

			}

			if (SQLSERVERSCHEMA_MASTERFILE_Login != null) {

				this.setProperty("SQLSERVERSCHEMA_MASTERFILE_Login", SQLSERVERSCHEMA_MASTERFILE_Login.toString());

			}

			if (SQLSERVERSCHEMA_MASTERFILE_Password != null) {

				this.setProperty("SQLSERVERSCHEMA_MASTERFILE_Password", SQLSERVERSCHEMA_MASTERFILE_Password.toString());

			}

			if (SQLSERVERSCHEMA_MASTERFILE_Port != null) {

				this.setProperty("SQLSERVERSCHEMA_MASTERFILE_Port", SQLSERVERSCHEMA_MASTERFILE_Port.toString());

			}

			if (SQLSERVERSCHEMA_MASTERFILE_Schema != null) {

				this.setProperty("SQLSERVERSCHEMA_MASTERFILE_Schema", SQLSERVERSCHEMA_MASTERFILE_Schema.toString());

			}

			if (SQLSERVERSCHEMA_MASTERFILE_Server != null) {

				this.setProperty("SQLSERVERSCHEMA_MASTERFILE_Server", SQLSERVERSCHEMA_MASTERFILE_Server.toString());

			}

		}

		public String IntegrationPath;

		public String getIntegrationPath() {
			return this.IntegrationPath;
		}

		public String LogPath;

		public String getLogPath() {
			return this.LogPath;
		}

		public Boolean insertSQLMode;

		public Boolean getInsertSQLMode() {
			return this.insertSQLMode;
		}

		public String new1;

		public String getNew1() {
			return this.new1;
		}

		public String SQLSERVER_AdditionalParams;

		public String getSQLSERVER_AdditionalParams() {
			return this.SQLSERVER_AdditionalParams;
		}

		public String SQLSERVER_Database;

		public String getSQLSERVER_Database() {
			return this.SQLSERVER_Database;
		}

		public String SQLSERVER_Login;

		public String getSQLSERVER_Login() {
			return this.SQLSERVER_Login;
		}

		public java.lang.String SQLSERVER_Password;

		public java.lang.String getSQLSERVER_Password() {
			return this.SQLSERVER_Password;
		}

		public String SQLSERVER_Port;

		public String getSQLSERVER_Port() {
			return this.SQLSERVER_Port;
		}

		public String SQLSERVER_Schema;

		public String getSQLSERVER_Schema() {
			return this.SQLSERVER_Schema;
		}

		public String SQLSERVER_Server;

		public String getSQLSERVER_Server() {
			return this.SQLSERVER_Server;
		}

		public String SQLSERVER_LOG_AdditionalParams;

		public String getSQLSERVER_LOG_AdditionalParams() {
			return this.SQLSERVER_LOG_AdditionalParams;
		}

		public String SQLSERVER_LOG_Database;

		public String getSQLSERVER_LOG_Database() {
			return this.SQLSERVER_LOG_Database;
		}

		public String SQLSERVER_LOG_Login;

		public String getSQLSERVER_LOG_Login() {
			return this.SQLSERVER_LOG_Login;
		}

		public java.lang.String SQLSERVER_LOG_Password;

		public java.lang.String getSQLSERVER_LOG_Password() {
			return this.SQLSERVER_LOG_Password;
		}

		public String SQLSERVER_LOG_Port;

		public String getSQLSERVER_LOG_Port() {
			return this.SQLSERVER_LOG_Port;
		}

		public String SQLSERVER_LOG_Schema;

		public String getSQLSERVER_LOG_Schema() {
			return this.SQLSERVER_LOG_Schema;
		}

		public String SQLSERVER_LOG_Server;

		public String getSQLSERVER_LOG_Server() {
			return this.SQLSERVER_LOG_Server;
		}

		public String SQLSERVERSCHEMA_MASTERFILE_AdditionalParams;

		public String getSQLSERVERSCHEMA_MASTERFILE_AdditionalParams() {
			return this.SQLSERVERSCHEMA_MASTERFILE_AdditionalParams;
		}

		public String SQLSERVERSCHEMA_MASTERFILE_Database;

		public String getSQLSERVERSCHEMA_MASTERFILE_Database() {
			return this.SQLSERVERSCHEMA_MASTERFILE_Database;
		}

		public String SQLSERVERSCHEMA_MASTERFILE_Login;

		public String getSQLSERVERSCHEMA_MASTERFILE_Login() {
			return this.SQLSERVERSCHEMA_MASTERFILE_Login;
		}

		public java.lang.String SQLSERVERSCHEMA_MASTERFILE_Password;

		public java.lang.String getSQLSERVERSCHEMA_MASTERFILE_Password() {
			return this.SQLSERVERSCHEMA_MASTERFILE_Password;
		}

		public String SQLSERVERSCHEMA_MASTERFILE_Port;

		public String getSQLSERVERSCHEMA_MASTERFILE_Port() {
			return this.SQLSERVERSCHEMA_MASTERFILE_Port;
		}

		public String SQLSERVERSCHEMA_MASTERFILE_Schema;

		public String getSQLSERVERSCHEMA_MASTERFILE_Schema() {
			return this.SQLSERVERSCHEMA_MASTERFILE_Schema;
		}

		public String SQLSERVERSCHEMA_MASTERFILE_Server;

		public String getSQLSERVERSCHEMA_MASTERFILE_Server() {
			return this.SQLSERVERSCHEMA_MASTERFILE_Server;
		}
	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.43";
	private final String jobName = "MASTERFILE_INTEGRATION_BDD";
	private final String projectName = "DEV";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	LogCatcherUtils tLogCatcher_3 = new LogCatcherUtils();
	LogCatcherUtils talendLogs_LOGS = new LogCatcherUtils();

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					MASTERFILE_INTEGRATION_BDD.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(MASTERFILE_INTEGRATION_BDD.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
						tLogCatcher_3.addMessage("Java Exception", currentComponent, 6,
								e.getClass().getName() + ":" + e.getMessage(), 1);
						talendLogs_LOGS.addMessage("Java Exception", currentComponent, 6,
								e.getClass().getName() + ":" + e.getMessage(), 1);
						try {
							tLogCatcher_3Process(globalMap);
						} finally {
							talendLogs_LOGSProcess(globalMap);
						}
					}
				} catch (TalendException e) {
					// do nothing

				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void preStaLogCon_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		preStaLogCon_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogCatcher_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLogCatcher_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLogCatcher_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostjob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFixedFlowInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileExist_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileExist_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileExist_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileExist_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileDelete_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileDelete_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tWarn_10_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tWarn_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tWarn_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tWarn_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tWarn_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tWarn_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileExist_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileExist_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileCopy_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileCopy_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tWarn_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tWarn_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tWarn_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileExist_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileExist_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileExist_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileExist_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tWarn_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tWarn_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tWarn_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tWarn_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileExist_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileExist_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileDelete_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileDelete_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tWarn_14_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tWarn_14_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tWarn_12_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tWarn_12_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tWarn_13_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tWarn_13_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tWarn_13_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileList_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileList_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSleep_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileList_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tWarn_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tWarn_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tWarn_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tWarn_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileProperties_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileProperties_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileProperties_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tWarn_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tWarn_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tWarn_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tWarn_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileExist_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileExist_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileCopy_10_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileCopy_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSetGlobalVar_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tSetGlobalVar_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tWarn_11_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tWarn_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void connectionStatsLogs_Commit_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		connectionStatsLogs_Commit_onSubJobError(exception, errorComponent, globalMap);
	}

	public void connectionStatsLogs_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		connectionStatsLogs_onSubJobError(exception, errorComponent, globalMap);
	}

	public void talendLogs_LOGS_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		talendLogs_DB_error(exception, errorComponent, globalMap);

	}

	public void talendLogs_DB_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		talendLogs_LOGS_onSubJobError(exception, errorComponent, globalMap);
	}

	public void preStaLogCon_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tLogCatcher_3_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostjob_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFixedFlowInput_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileExist_4_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileExist_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileDelete_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tWarn_10_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tWarn_6_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tWarn_8_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileExist_7_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileCopy_9_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tWarn_9_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileExist_5_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileExist_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tWarn_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tWarn_3_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileExist_3_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileDelete_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tWarn_14_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_3_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tWarn_12_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tWarn_13_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileList_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tWarn_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_7_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tWarn_4_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileProperties_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tWarn_7_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tWarn_5_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileExist_6_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileCopy_10_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tSetGlobalVar_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tWarn_11_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void connectionStatsLogs_Commit_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void connectionStatsLogs_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void talendLogs_LOGS_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void preStaLogConProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("preStaLogCon_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [preStaLogCon begin ] start
				 */

				ok_Hash.put("preStaLogCon", false);
				start_Hash.put("preStaLogCon", System.currentTimeMillis());

				currentComponent = "preStaLogCon";

				int tos_count_preStaLogCon = 0;

				/**
				 * [preStaLogCon begin ] stop
				 */

				/**
				 * [preStaLogCon main ] start
				 */

				currentComponent = "preStaLogCon";

				tos_count_preStaLogCon++;

				/**
				 * [preStaLogCon main ] stop
				 */

				/**
				 * [preStaLogCon process_data_begin ] start
				 */

				currentComponent = "preStaLogCon";

				/**
				 * [preStaLogCon process_data_begin ] stop
				 */

				/**
				 * [preStaLogCon process_data_end ] start
				 */

				currentComponent = "preStaLogCon";

				/**
				 * [preStaLogCon process_data_end ] stop
				 */

				/**
				 * [preStaLogCon end ] start
				 */

				currentComponent = "preStaLogCon";

				ok_Hash.put("preStaLogCon", true);
				end_Hash.put("preStaLogCon", System.currentTimeMillis());

				connectionStatsLogsProcess(globalMap);

				/**
				 * [preStaLogCon end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [preStaLogCon finally ] start
				 */

				currentComponent = "preStaLogCon";

				/**
				 * [preStaLogCon finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("preStaLogCon_SUBPROCESS_STATE", 1);
	}

	public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_DEV_MASTERFILE_INTEGRATION_BDD = new byte[0];
		static byte[] commonByteArray_DEV_MASTERFILE_INTEGRATION_BDD = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public Integer priority;

		public Integer getPriority() {
			return this.priority;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Integer code;

		public Integer getCode() {
			return this.code;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEV_MASTERFILE_INTEGRATION_BDD.length) {
					if (length < 1024 && commonByteArray_DEV_MASTERFILE_INTEGRATION_BDD.length == 0) {
						commonByteArray_DEV_MASTERFILE_INTEGRATION_BDD = new byte[1024];
					} else {
						commonByteArray_DEV_MASTERFILE_INTEGRATION_BDD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEV_MASTERFILE_INTEGRATION_BDD, 0, length);
				strReturn = new String(commonByteArray_DEV_MASTERFILE_INTEGRATION_BDD, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_MASTERFILE_INTEGRATION_BDD) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.root_pid = readString(dis);

					this.father_pid = readString(dis);

					this.project = readString(dis);

					this.job = readString(dis);

					this.context = readString(dis);

					this.priority = readInteger(dis);

					this.type = readString(dis);

					this.origin = readString(dis);

					this.message = readString(dis);

					this.code = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.root_pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.context, dos);

				// Integer

				writeInteger(this.priority, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message, dos);

				// Integer

				writeInteger(this.code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",context=" + context);
			sb.append(",priority=" + String.valueOf(priority));
			sb.append(",type=" + type);
			sb.append(",origin=" + origin);
			sb.append(",message=" + message);
			sb.append(",code=" + String.valueOf(code));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tLogCatcher_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tLogCatcher_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row7Struct row7 = new row7Struct();

				/**
				 * [tFileOutputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_3", false);
				start_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_3";

				int tos_count_tFileOutputDelimited_3 = 0;

				String fileName_tFileOutputDelimited_3 = "";
				fileName_tFileOutputDelimited_3 = (new java.io.File(
						context.LogPath + ((String) globalMap.get("LogFile")))).getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_3 = null;
				String extension_tFileOutputDelimited_3 = null;
				String directory_tFileOutputDelimited_3 = null;
				if ((fileName_tFileOutputDelimited_3.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_3.lastIndexOf(".") < fileName_tFileOutputDelimited_3
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
						extension_tFileOutputDelimited_3 = "";
					} else {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0,
								fileName_tFileOutputDelimited_3.lastIndexOf("."));
						extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(fileName_tFileOutputDelimited_3.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0,
							fileName_tFileOutputDelimited_3.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_3.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0,
								fileName_tFileOutputDelimited_3.lastIndexOf("."));
						extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(fileName_tFileOutputDelimited_3.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
						extension_tFileOutputDelimited_3 = "";
					}
					directory_tFileOutputDelimited_3 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_3 = true;
				java.io.File filetFileOutputDelimited_3 = new java.io.File(fileName_tFileOutputDelimited_3);
				globalMap.put("tFileOutputDelimited_3_FILE_NAME", fileName_tFileOutputDelimited_3);
				if (filetFileOutputDelimited_3.exists()) {
					throw new RuntimeException("The particular file \"" + filetFileOutputDelimited_3.getAbsoluteFile()
							+ "\" already exist. If you want to overwrite the file, please uncheck the"
							+ " \"Throw an error if the file already exist\" option in Advanced settings.");
				}
				int nb_line_tFileOutputDelimited_3 = 0;
				int splitedFileNo_tFileOutputDelimited_3 = 0;
				int currentRow_tFileOutputDelimited_3 = 0;

				final String OUT_DELIM_tFileOutputDelimited_3 = /** Start field tFileOutputDelimited_3:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_3:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_3 = /**
																		 * Start field
																		 * tFileOutputDelimited_3:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_3:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_3 != null && directory_tFileOutputDelimited_3.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_3 = new java.io.File(directory_tFileOutputDelimited_3);
					if (!dir_tFileOutputDelimited_3.exists()) {
						dir_tFileOutputDelimited_3.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_3 = null;

				java.io.File fileToDelete_tFileOutputDelimited_3 = new java.io.File(fileName_tFileOutputDelimited_3);
				if (fileToDelete_tFileOutputDelimited_3.exists()) {
					fileToDelete_tFileOutputDelimited_3.delete();
				}
				outtFileOutputDelimited_3 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_3, false), "ISO-8859-15"));

				resourceMap.put("out_tFileOutputDelimited_3", outtFileOutputDelimited_3);
				resourceMap.put("nb_line_tFileOutputDelimited_3", nb_line_tFileOutputDelimited_3);

				/**
				 * [tFileOutputDelimited_3 begin ] stop
				 */

				/**
				 * [tLogCatcher_3 begin ] start
				 */

				ok_Hash.put("tLogCatcher_3", false);
				start_Hash.put("tLogCatcher_3", System.currentTimeMillis());

				currentComponent = "tLogCatcher_3";

				int tos_count_tLogCatcher_3 = 0;

				try {
					for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_3.getMessages()) {
						row7.type = lcm.getType();
						row7.origin = (lcm.getOrigin() == null || lcm.getOrigin().length() < 1 ? null
								: lcm.getOrigin());
						row7.priority = lcm.getPriority();
						row7.message = lcm.getMessage();
						row7.code = lcm.getCode();

						row7.moment = java.util.Calendar.getInstance().getTime();

						row7.pid = pid;
						row7.root_pid = rootPid;
						row7.father_pid = fatherPid;

						row7.project = projectName;
						row7.job = jobName;
						row7.context = contextStr;

						/**
						 * [tLogCatcher_3 begin ] stop
						 */

						/**
						 * [tLogCatcher_3 main ] start
						 */

						currentComponent = "tLogCatcher_3";

						tos_count_tLogCatcher_3++;

						/**
						 * [tLogCatcher_3 main ] stop
						 */

						/**
						 * [tLogCatcher_3 process_data_begin ] start
						 */

						currentComponent = "tLogCatcher_3";

						/**
						 * [tLogCatcher_3 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_3 main ] start
						 */

						currentComponent = "tFileOutputDelimited_3";

						StringBuilder sb_tFileOutputDelimited_3 = new StringBuilder();
						if (row7.moment != null) {
							sb_tFileOutputDelimited_3
									.append(FormatterUtils.format_Date(row7.moment, "yyyy-MM-dd HH:mm:ss"));
						}
						sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
						if (row7.pid != null) {
							sb_tFileOutputDelimited_3.append(row7.pid);
						}
						sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
						if (row7.root_pid != null) {
							sb_tFileOutputDelimited_3.append(row7.root_pid);
						}
						sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
						if (row7.father_pid != null) {
							sb_tFileOutputDelimited_3.append(row7.father_pid);
						}
						sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
						if (row7.project != null) {
							sb_tFileOutputDelimited_3.append(row7.project);
						}
						sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
						if (row7.job != null) {
							sb_tFileOutputDelimited_3.append(row7.job);
						}
						sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
						if (row7.context != null) {
							sb_tFileOutputDelimited_3.append(row7.context);
						}
						sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
						if (row7.priority != null) {
							sb_tFileOutputDelimited_3.append(row7.priority);
						}
						sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
						if (row7.type != null) {
							sb_tFileOutputDelimited_3.append(row7.type);
						}
						sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
						if (row7.origin != null) {
							sb_tFileOutputDelimited_3.append(row7.origin);
						}
						sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
						if (row7.message != null) {
							sb_tFileOutputDelimited_3.append(row7.message);
						}
						sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
						if (row7.code != null) {
							sb_tFileOutputDelimited_3.append(row7.code);
						}
						sb_tFileOutputDelimited_3.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_3);

						nb_line_tFileOutputDelimited_3++;
						resourceMap.put("nb_line_tFileOutputDelimited_3", nb_line_tFileOutputDelimited_3);

						outtFileOutputDelimited_3.write(sb_tFileOutputDelimited_3.toString());

						tos_count_tFileOutputDelimited_3++;

						/**
						 * [tFileOutputDelimited_3 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_3 process_data_begin ] start
						 */

						currentComponent = "tFileOutputDelimited_3";

						/**
						 * [tFileOutputDelimited_3 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_3 process_data_end ] start
						 */

						currentComponent = "tFileOutputDelimited_3";

						/**
						 * [tFileOutputDelimited_3 process_data_end ] stop
						 */

						/**
						 * [tLogCatcher_3 process_data_end ] start
						 */

						currentComponent = "tLogCatcher_3";

						/**
						 * [tLogCatcher_3 process_data_end ] stop
						 */

						/**
						 * [tLogCatcher_3 end ] start
						 */

						currentComponent = "tLogCatcher_3";

					}
				} catch (Exception e_tLogCatcher_3) {
					logIgnoredError(String.format(
							"tLogCatcher_3 - tLogCatcher failed to process log message(s) due to internal error: %s",
							e_tLogCatcher_3), e_tLogCatcher_3);
				}

				ok_Hash.put("tLogCatcher_3", true);
				end_Hash.put("tLogCatcher_3", System.currentTimeMillis());

				/**
				 * [tLogCatcher_3 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 end ] start
				 */

				currentComponent = "tFileOutputDelimited_3";

				if (outtFileOutputDelimited_3 != null) {
					outtFileOutputDelimited_3.flush();
					outtFileOutputDelimited_3.close();
				}

				globalMap.put("tFileOutputDelimited_3_NB_LINE", nb_line_tFileOutputDelimited_3);
				globalMap.put("tFileOutputDelimited_3_FILE_NAME", fileName_tFileOutputDelimited_3);

				resourceMap.put("finish_tFileOutputDelimited_3", true);

				ok_Hash.put("tFileOutputDelimited_3", true);
				end_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_3 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tLogCatcher_3 finally ] start
				 */

				currentComponent = "tLogCatcher_3";

				/**
				 * [tLogCatcher_3 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_3";

				if (resourceMap.get("finish_tFileOutputDelimited_3") == null) {

					java.io.Writer outtFileOutputDelimited_3 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_3");
					if (outtFileOutputDelimited_3 != null) {
						outtFileOutputDelimited_3.flush();
						outtFileOutputDelimited_3.close();
					}

				}

				/**
				 * [tFileOutputDelimited_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tLogCatcher_3_SUBPROCESS_STATE", 1);
	}

	public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPostjob_1 begin ] start
				 */

				ok_Hash.put("tPostjob_1", false);
				start_Hash.put("tPostjob_1", System.currentTimeMillis());

				currentComponent = "tPostjob_1";

				int tos_count_tPostjob_1 = 0;

				/**
				 * [tPostjob_1 begin ] stop
				 */

				/**
				 * [tPostjob_1 main ] start
				 */

				currentComponent = "tPostjob_1";

				tos_count_tPostjob_1++;

				/**
				 * [tPostjob_1 main ] stop
				 */

				/**
				 * [tPostjob_1 process_data_begin ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 process_data_begin ] stop
				 */

				/**
				 * [tPostjob_1 process_data_end ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 process_data_end ] stop
				 */

				/**
				 * [tPostjob_1 end ] start
				 */

				currentComponent = "tPostjob_1";

				ok_Hash.put("tPostjob_1", true);
				end_Hash.put("tPostjob_1", System.currentTimeMillis());

				tFixedFlowInput_1Process(globalMap);

				/**
				 * [tPostjob_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPostjob_1 finally ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}

	public static class row18Struct implements routines.system.IPersistableRow<row18Struct> {
		final static byte[] commonByteArrayLock_DEV_MASTERFILE_INTEGRATION_BDD = new byte[0];
		static byte[] commonByteArray_DEV_MASTERFILE_INTEGRATION_BDD = new byte[0];

		public String newColumn;

		public String getNewColumn() {
			return this.newColumn;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEV_MASTERFILE_INTEGRATION_BDD.length) {
					if (length < 1024 && commonByteArray_DEV_MASTERFILE_INTEGRATION_BDD.length == 0) {
						commonByteArray_DEV_MASTERFILE_INTEGRATION_BDD = new byte[1024];
					} else {
						commonByteArray_DEV_MASTERFILE_INTEGRATION_BDD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEV_MASTERFILE_INTEGRATION_BDD, 0, length);
				strReturn = new String(commonByteArray_DEV_MASTERFILE_INTEGRATION_BDD, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_MASTERFILE_INTEGRATION_BDD) {

				try {

					int length = 0;

					this.newColumn = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.newColumn, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("newColumn=" + newColumn);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row18Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFixedFlowInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row18Struct row18 = new row18Struct();

				/**
				 * [tLogRow_2 begin ] start
				 */

				ok_Hash.put("tLogRow_2", false);
				start_Hash.put("tLogRow_2", System.currentTimeMillis());

				currentComponent = "tLogRow_2";

				int tos_count_tLogRow_2 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_2 = "|";
				java.io.PrintStream consoleOut_tLogRow_2 = null;

				StringBuilder strBuffer_tLogRow_2 = null;
				int nb_line_tLogRow_2 = 0;
///////////////////////    			

				/**
				 * [tLogRow_2 begin ] stop
				 */

				/**
				 * [tFixedFlowInput_1 begin ] start
				 */

				ok_Hash.put("tFixedFlowInput_1", false);
				start_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());

				currentComponent = "tFixedFlowInput_1";

				int tos_count_tFixedFlowInput_1 = 0;

				int nb_line_tFixedFlowInput_1 = 0;
				List<row18Struct> cacheList_tFixedFlowInput_1 = new java.util.ArrayList<row18Struct>();
				row18 = new row18Struct();
				row18.newColumn = "Post job";
				cacheList_tFixedFlowInput_1.add(row18);
				for (int i_tFixedFlowInput_1 = 0; i_tFixedFlowInput_1 < 2; i_tFixedFlowInput_1++) {
					for (row18Struct tmpRow_tFixedFlowInput_1 : cacheList_tFixedFlowInput_1) {
						nb_line_tFixedFlowInput_1++;
						row18 = tmpRow_tFixedFlowInput_1;

						/**
						 * [tFixedFlowInput_1 begin ] stop
						 */

						/**
						 * [tFixedFlowInput_1 main ] start
						 */

						currentComponent = "tFixedFlowInput_1";

						tos_count_tFixedFlowInput_1++;

						/**
						 * [tFixedFlowInput_1 main ] stop
						 */

						/**
						 * [tFixedFlowInput_1 process_data_begin ] start
						 */

						currentComponent = "tFixedFlowInput_1";

						/**
						 * [tFixedFlowInput_1 process_data_begin ] stop
						 */

						/**
						 * [tLogRow_2 main ] start
						 */

						currentComponent = "tLogRow_2";

///////////////////////		

						strBuffer_tLogRow_2 = new StringBuilder();

						if (row18.newColumn != null) { //

							strBuffer_tLogRow_2.append(String.valueOf(row18.newColumn));

						} //

						if (globalMap.get("tLogRow_CONSOLE") != null) {
							consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
						} else {
							consoleOut_tLogRow_2 = new java.io.PrintStream(
									new java.io.BufferedOutputStream(System.out));
							globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_2);
						}
						consoleOut_tLogRow_2.println(strBuffer_tLogRow_2.toString());
						consoleOut_tLogRow_2.flush();
						nb_line_tLogRow_2++;
//////

//////                    

///////////////////////    			

						tos_count_tLogRow_2++;

						/**
						 * [tLogRow_2 main ] stop
						 */

						/**
						 * [tLogRow_2 process_data_begin ] start
						 */

						currentComponent = "tLogRow_2";

						/**
						 * [tLogRow_2 process_data_begin ] stop
						 */

						/**
						 * [tLogRow_2 process_data_end ] start
						 */

						currentComponent = "tLogRow_2";

						/**
						 * [tLogRow_2 process_data_end ] stop
						 */

						/**
						 * [tFixedFlowInput_1 process_data_end ] start
						 */

						currentComponent = "tFixedFlowInput_1";

						/**
						 * [tFixedFlowInput_1 process_data_end ] stop
						 */

						/**
						 * [tFixedFlowInput_1 end ] start
						 */

						currentComponent = "tFixedFlowInput_1";

					}
				}
				cacheList_tFixedFlowInput_1.clear();
				globalMap.put("tFixedFlowInput_1_NB_LINE", nb_line_tFixedFlowInput_1);

				ok_Hash.put("tFixedFlowInput_1", true);
				end_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());

				/**
				 * [tFixedFlowInput_1 end ] stop
				 */

				/**
				 * [tLogRow_2 end ] start
				 */

				currentComponent = "tLogRow_2";

//////
//////
				globalMap.put("tLogRow_2_NB_LINE", nb_line_tLogRow_2);

///////////////////////    			

				ok_Hash.put("tLogRow_2", true);
				end_Hash.put("tLogRow_2", System.currentTimeMillis());

				tFileExist_4Process(globalMap);

				/**
				 * [tLogRow_2 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFixedFlowInput_1 finally ] start
				 */

				currentComponent = "tFixedFlowInput_1";

				/**
				 * [tFixedFlowInput_1 finally ] stop
				 */

				/**
				 * [tLogRow_2 finally ] start
				 */

				currentComponent = "tLogRow_2";

				/**
				 * [tLogRow_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 1);
	}

	public void tFileExist_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileExist_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tFileExist_4 begin ] start
				 */

				ok_Hash.put("tFileExist_4", false);
				start_Hash.put("tFileExist_4", System.currentTimeMillis());

				currentComponent = "tFileExist_4";

				int tos_count_tFileExist_4 = 0;

				/**
				 * [tFileExist_4 begin ] stop
				 */

				/**
				 * [tFileExist_4 main ] start
				 */

				currentComponent = "tFileExist_4";

				java.io.File file_tFileExist_4 = new java.io.File(
						context.LogPath + ((String) globalMap.get("LogFile")));
				if (!file_tFileExist_4.exists()) {
					globalMap.put("tFileExist_4_EXISTS", false);
				} else {
					globalMap.put("tFileExist_4_EXISTS", true);
				}

				globalMap.put("tFileExist_4_FILENAME", context.LogPath + ((String) globalMap.get("LogFile")));

				tos_count_tFileExist_4++;

				/**
				 * [tFileExist_4 main ] stop
				 */

				/**
				 * [tFileExist_4 process_data_begin ] start
				 */

				currentComponent = "tFileExist_4";

				/**
				 * [tFileExist_4 process_data_begin ] stop
				 */

				/**
				 * [tFileExist_4 process_data_end ] start
				 */

				currentComponent = "tFileExist_4";

				/**
				 * [tFileExist_4 process_data_end ] stop
				 */

				/**
				 * [tFileExist_4 end ] start
				 */

				currentComponent = "tFileExist_4";

				ok_Hash.put("tFileExist_4", true);
				end_Hash.put("tFileExist_4", System.currentTimeMillis());

				if (!((Boolean) globalMap.get("tFileExist_4_EXISTS"))) {

					tFileExist_1Process(globalMap);
				}

				if (((Boolean) globalMap.get("tFileExist_4_EXISTS"))) {

					tFileExist_7Process(globalMap);
				}

				/**
				 * [tFileExist_4 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileExist_4 finally ] start
				 */

				currentComponent = "tFileExist_4";

				/**
				 * [tFileExist_4 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileExist_4_SUBPROCESS_STATE", 1);
	}

	public void tFileExist_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileExist_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tFileExist_1 begin ] start
				 */

				ok_Hash.put("tFileExist_1", false);
				start_Hash.put("tFileExist_1", System.currentTimeMillis());

				currentComponent = "tFileExist_1";

				int tos_count_tFileExist_1 = 0;

				/**
				 * [tFileExist_1 begin ] stop
				 */

				/**
				 * [tFileExist_1 main ] start
				 */

				currentComponent = "tFileExist_1";

				java.io.File file_tFileExist_1 = new java.io.File(
						context.IntegrationPath + ((String) globalMap.get("tFileList_1_CURRENT_FILE")));
				if (!file_tFileExist_1.exists()) {
					globalMap.put("tFileExist_1_EXISTS", false);
				} else {
					globalMap.put("tFileExist_1_EXISTS", true);
				}

				globalMap.put("tFileExist_1_FILENAME",
						context.IntegrationPath + ((String) globalMap.get("tFileList_1_CURRENT_FILE")));

				tos_count_tFileExist_1++;

				/**
				 * [tFileExist_1 main ] stop
				 */

				/**
				 * [tFileExist_1 process_data_begin ] start
				 */

				currentComponent = "tFileExist_1";

				/**
				 * [tFileExist_1 process_data_begin ] stop
				 */

				/**
				 * [tFileExist_1 process_data_end ] start
				 */

				currentComponent = "tFileExist_1";

				/**
				 * [tFileExist_1 process_data_end ] stop
				 */

				/**
				 * [tFileExist_1 end ] start
				 */

				currentComponent = "tFileExist_1";

				ok_Hash.put("tFileExist_1", true);
				end_Hash.put("tFileExist_1", System.currentTimeMillis());

				if (((Boolean) globalMap.get("tFileExist_1_EXISTS"))) {

					tFileDelete_1Process(globalMap);
				}

				if (!((Boolean) globalMap.get("tFileExist_1_EXISTS"))) {

					tWarn_8Process(globalMap);
				}

				/**
				 * [tFileExist_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileExist_1 finally ] start
				 */

				currentComponent = "tFileExist_1";

				/**
				 * [tFileExist_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileExist_1_SUBPROCESS_STATE", 1);
	}

	public void tFileDelete_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileDelete_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tFileDelete_1 begin ] start
				 */

				ok_Hash.put("tFileDelete_1", false);
				start_Hash.put("tFileDelete_1", System.currentTimeMillis());

				currentComponent = "tFileDelete_1";

				int tos_count_tFileDelete_1 = 0;

				/**
				 * [tFileDelete_1 begin ] stop
				 */

				/**
				 * [tFileDelete_1 main ] start
				 */

				currentComponent = "tFileDelete_1";

				class DeleteFoldertFileDelete_1 {
					/**
					 * delete all the sub-files in 'file'
					 * 
					 * @param file
					 */
					public boolean delete(java.io.File file) {
						java.io.File[] files = file.listFiles();
						for (int i = 0; i < files.length; i++) {
							if (files[i].isFile()) {
								files[i].delete();
							} else if (files[i].isDirectory()) {
								if (!files[i].delete()) {
									delete(files[i]);
								}
							}
						}
						deleteDirectory(file);
						return file.delete();
					}

					/**
					 * delete all the sub-folders in 'file'
					 * 
					 * @param file
					 */
					private void deleteDirectory(java.io.File file) {
						java.io.File[] filed = file.listFiles();
						for (int i = 0; i < filed.length; i++) {
							if (filed[i].isDirectory()) {
								deleteDirectory(filed[i]);
							}
							filed[i].delete();
						}
					}

				}
				java.io.File file_tFileDelete_1 = new java.io.File(
						context.IntegrationPath + ((String) globalMap.get("tFileList_1_CURRENT_FILE")));
				if (file_tFileDelete_1.exists() && file_tFileDelete_1.isFile()) {
					if (file_tFileDelete_1.delete()) {
						globalMap.put("tFileDelete_1_CURRENT_STATUS", "File deleted.");
					} else {
						globalMap.put("tFileDelete_1_CURRENT_STATUS", "No file deleted.");
						throw new RuntimeException(
								"File " + file_tFileDelete_1.getAbsolutePath() + " can not be deleted.");
					}
				} else {
					globalMap.put("tFileDelete_1_CURRENT_STATUS", "File does not exist or is invalid.");
					throw new RuntimeException("File " + file_tFileDelete_1.getAbsolutePath()
							+ " does not exist or is invalid or is not a file.");
				}
				globalMap.put("tFileDelete_1_DELETE_PATH",
						context.IntegrationPath + ((String) globalMap.get("tFileList_1_CURRENT_FILE")));

				tos_count_tFileDelete_1++;

				/**
				 * [tFileDelete_1 main ] stop
				 */

				/**
				 * [tFileDelete_1 process_data_begin ] start
				 */

				currentComponent = "tFileDelete_1";

				/**
				 * [tFileDelete_1 process_data_begin ] stop
				 */

				/**
				 * [tFileDelete_1 process_data_end ] start
				 */

				currentComponent = "tFileDelete_1";

				/**
				 * [tFileDelete_1 process_data_end ] stop
				 */

				/**
				 * [tFileDelete_1 end ] start
				 */

				currentComponent = "tFileDelete_1";

				ok_Hash.put("tFileDelete_1", true);
				end_Hash.put("tFileDelete_1", System.currentTimeMillis());

				tWarn_10Process(globalMap);

				/**
				 * [tFileDelete_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileDelete_1 finally ] start
				 */

				currentComponent = "tFileDelete_1";

				/**
				 * [tFileDelete_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileDelete_1_SUBPROCESS_STATE", 1);
	}

	public void tWarn_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tWarn_10_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tWarn_10 begin ] start
				 */

				ok_Hash.put("tWarn_10", false);
				start_Hash.put("tWarn_10", System.currentTimeMillis());

				currentComponent = "tWarn_10";

				int tos_count_tWarn_10 = 0;

				/**
				 * [tWarn_10 begin ] stop
				 */

				/**
				 * [tWarn_10 main ] start
				 */

				currentComponent = "tWarn_10";

				try {

					resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_10", "", Thread.currentThread().getId() + "", "INFO",
							"", "Delete excel file : " + ((String) globalMap.get("tFileList_1_CURRENT_FILE")), "", "");
					talendLogs_LOGS.addMessage("tWarn", "tWarn_10", 3,
							"Delete excel file : " + ((String) globalMap.get("tFileList_1_CURRENT_FILE")), 3);
					talendLogs_LOGSProcess(globalMap);
					globalMap.put("tWarn_10_WARN_MESSAGES",
							"Delete excel file : " + ((String) globalMap.get("tFileList_1_CURRENT_FILE")));
					globalMap.put("tWarn_10_WARN_PRIORITY", 3);
					globalMap.put("tWarn_10_WARN_CODE", 3);

				} catch (Exception e_tWarn_10) {
					logIgnoredError(String.format("tWarn_10 - tWarn failed to log message due to internal error: %s",
							e_tWarn_10), e_tWarn_10);
				}

				tos_count_tWarn_10++;

				/**
				 * [tWarn_10 main ] stop
				 */

				/**
				 * [tWarn_10 process_data_begin ] start
				 */

				currentComponent = "tWarn_10";

				/**
				 * [tWarn_10 process_data_begin ] stop
				 */

				/**
				 * [tWarn_10 process_data_end ] start
				 */

				currentComponent = "tWarn_10";

				/**
				 * [tWarn_10 process_data_end ] stop
				 */

				/**
				 * [tWarn_10 end ] start
				 */

				currentComponent = "tWarn_10";

				ok_Hash.put("tWarn_10", true);
				end_Hash.put("tWarn_10", System.currentTimeMillis());

				tWarn_6Process(globalMap);

				/**
				 * [tWarn_10 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tWarn_10 finally ] start
				 */

				currentComponent = "tWarn_10";

				/**
				 * [tWarn_10 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tWarn_10_SUBPROCESS_STATE", 1);
	}

	public void tWarn_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tWarn_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tWarn_6 begin ] start
				 */

				ok_Hash.put("tWarn_6", false);
				start_Hash.put("tWarn_6", System.currentTimeMillis());

				currentComponent = "tWarn_6";

				int tos_count_tWarn_6 = 0;

				/**
				 * [tWarn_6 begin ] stop
				 */

				/**
				 * [tWarn_6 main ] start
				 */

				currentComponent = "tWarn_6";

				try {

					resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_6", "", Thread.currentThread().getId() + "", "INFO",
							"", "Job terminé", "", "");
					talendLogs_LOGS.addMessage("tWarn", "tWarn_6", 3, "Job terminé", 3);
					talendLogs_LOGSProcess(globalMap);
					globalMap.put("tWarn_6_WARN_MESSAGES", "Job terminé");
					globalMap.put("tWarn_6_WARN_PRIORITY", 3);
					globalMap.put("tWarn_6_WARN_CODE", 3);

				} catch (Exception e_tWarn_6) {
					logIgnoredError(
							String.format("tWarn_6 - tWarn failed to log message due to internal error: %s", e_tWarn_6),
							e_tWarn_6);
				}

				tos_count_tWarn_6++;

				/**
				 * [tWarn_6 main ] stop
				 */

				/**
				 * [tWarn_6 process_data_begin ] start
				 */

				currentComponent = "tWarn_6";

				/**
				 * [tWarn_6 process_data_begin ] stop
				 */

				/**
				 * [tWarn_6 process_data_end ] start
				 */

				currentComponent = "tWarn_6";

				/**
				 * [tWarn_6 process_data_end ] stop
				 */

				/**
				 * [tWarn_6 end ] start
				 */

				currentComponent = "tWarn_6";

				ok_Hash.put("tWarn_6", true);
				end_Hash.put("tWarn_6", System.currentTimeMillis());

				/**
				 * [tWarn_6 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tWarn_6 finally ] start
				 */

				currentComponent = "tWarn_6";

				/**
				 * [tWarn_6 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tWarn_6_SUBPROCESS_STATE", 1);
	}

	public void tWarn_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tWarn_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tWarn_8 begin ] start
				 */

				ok_Hash.put("tWarn_8", false);
				start_Hash.put("tWarn_8", System.currentTimeMillis());

				currentComponent = "tWarn_8";

				int tos_count_tWarn_8 = 0;

				/**
				 * [tWarn_8 begin ] stop
				 */

				/**
				 * [tWarn_8 main ] start
				 */

				currentComponent = "tWarn_8";

				try {

					resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_8", "", Thread.currentThread().getId() + "", "INFO",
							"", "Job terminé", "", "");
					talendLogs_LOGS.addMessage("tWarn", "tWarn_8", 3, "Job terminé", 3);
					talendLogs_LOGSProcess(globalMap);
					globalMap.put("tWarn_8_WARN_MESSAGES", "Job terminé");
					globalMap.put("tWarn_8_WARN_PRIORITY", 3);
					globalMap.put("tWarn_8_WARN_CODE", 3);

				} catch (Exception e_tWarn_8) {
					logIgnoredError(
							String.format("tWarn_8 - tWarn failed to log message due to internal error: %s", e_tWarn_8),
							e_tWarn_8);
				}

				tos_count_tWarn_8++;

				/**
				 * [tWarn_8 main ] stop
				 */

				/**
				 * [tWarn_8 process_data_begin ] start
				 */

				currentComponent = "tWarn_8";

				/**
				 * [tWarn_8 process_data_begin ] stop
				 */

				/**
				 * [tWarn_8 process_data_end ] start
				 */

				currentComponent = "tWarn_8";

				/**
				 * [tWarn_8 process_data_end ] stop
				 */

				/**
				 * [tWarn_8 end ] start
				 */

				currentComponent = "tWarn_8";

				ok_Hash.put("tWarn_8", true);
				end_Hash.put("tWarn_8", System.currentTimeMillis());

				/**
				 * [tWarn_8 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tWarn_8 finally ] start
				 */

				currentComponent = "tWarn_8";

				/**
				 * [tWarn_8 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tWarn_8_SUBPROCESS_STATE", 1);
	}

	public void tFileExist_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileExist_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tFileExist_7 begin ] start
				 */

				ok_Hash.put("tFileExist_7", false);
				start_Hash.put("tFileExist_7", System.currentTimeMillis());

				currentComponent = "tFileExist_7";

				int tos_count_tFileExist_7 = 0;

				/**
				 * [tFileExist_7 begin ] stop
				 */

				/**
				 * [tFileExist_7 main ] start
				 */

				currentComponent = "tFileExist_7";

				java.io.File file_tFileExist_7 = new java.io.File(
						context.IntegrationPath + ((String) globalMap.get("tFileList_1_CURRENT_FILE")));
				if (!file_tFileExist_7.exists()) {
					globalMap.put("tFileExist_7_EXISTS", false);
				} else {
					globalMap.put("tFileExist_7_EXISTS", true);
				}

				globalMap.put("tFileExist_7_FILENAME",
						context.IntegrationPath + ((String) globalMap.get("tFileList_1_CURRENT_FILE")));

				tos_count_tFileExist_7++;

				/**
				 * [tFileExist_7 main ] stop
				 */

				/**
				 * [tFileExist_7 process_data_begin ] start
				 */

				currentComponent = "tFileExist_7";

				/**
				 * [tFileExist_7 process_data_begin ] stop
				 */

				/**
				 * [tFileExist_7 process_data_end ] start
				 */

				currentComponent = "tFileExist_7";

				/**
				 * [tFileExist_7 process_data_end ] stop
				 */

				/**
				 * [tFileExist_7 end ] start
				 */

				currentComponent = "tFileExist_7";

				ok_Hash.put("tFileExist_7", true);
				end_Hash.put("tFileExist_7", System.currentTimeMillis());

				if (((Boolean) globalMap.get("tFileExist_7_EXISTS"))) {

					tFileCopy_9Process(globalMap);
				}

				/**
				 * [tFileExist_7 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileExist_7 finally ] start
				 */

				currentComponent = "tFileExist_7";

				/**
				 * [tFileExist_7 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileExist_7_SUBPROCESS_STATE", 1);
	}

	public void tFileCopy_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileCopy_9_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tFileCopy_9 begin ] start
				 */

				ok_Hash.put("tFileCopy_9", false);
				start_Hash.put("tFileCopy_9", System.currentTimeMillis());

				currentComponent = "tFileCopy_9";

				int tos_count_tFileCopy_9 = 0;

				/**
				 * [tFileCopy_9 begin ] stop
				 */

				/**
				 * [tFileCopy_9 main ] start
				 */

				currentComponent = "tFileCopy_9";

				String srcFileName_tFileCopy_9 = context.IntegrationPath
						+ ((String) globalMap.get("tFileList_1_CURRENT_FILE"));

				java.io.File srcFile_tFileCopy_9 = new java.io.File(srcFileName_tFileCopy_9);

				// here need check first, before mkdirs().
				if (!srcFile_tFileCopy_9.exists() || !srcFile_tFileCopy_9.isFile()) {
					String errorMessageFileDoesnotExistsOrIsNotAFile_tFileCopy_9 = String
							.format("The source File \"%s\" does not exist or is not a file.", srcFileName_tFileCopy_9);
					throw new RuntimeException(errorMessageFileDoesnotExistsOrIsNotAFile_tFileCopy_9);
				}
				String desDirName_tFileCopy_9 = context.LogPath;

				String desFileName_tFileCopy_9 = globalMap.get("dateError") + "_"
						+ ((String) globalMap.get("tFileList_1_CURRENT_FILE"));

				if (desFileName_tFileCopy_9 != null && ("").equals(desFileName_tFileCopy_9.trim())) {
					desFileName_tFileCopy_9 = "NewName.temp";
				}

				java.io.File desFile_tFileCopy_9 = new java.io.File(desDirName_tFileCopy_9, desFileName_tFileCopy_9);

				if (!srcFile_tFileCopy_9.getPath().equals(desFile_tFileCopy_9.getPath())) {
					java.io.File parentFile_tFileCopy_9 = desFile_tFileCopy_9.getParentFile();

					if (parentFile_tFileCopy_9 != null && !parentFile_tFileCopy_9.exists()) {
						parentFile_tFileCopy_9.mkdirs();
					}
					org.talend.FileCopy.copyFile(srcFile_tFileCopy_9.getPath(), desFile_tFileCopy_9.getPath(), true);
					java.io.File isRemoved_tFileCopy_9 = new java.io.File(
							context.IntegrationPath + ((String) globalMap.get("tFileList_1_CURRENT_FILE")));
					if (isRemoved_tFileCopy_9.exists()) {
						String errorMessageCouldNotRemoveFile_tFileCopy_9 = String.format(
								"tFileCopy_9 - The source file \"%s\" could not be removed from the folder because it is open or you only have read-only rights.",
								srcFileName_tFileCopy_9);
						throw new RuntimeException(errorMessageCouldNotRemoveFile_tFileCopy_9);
					}

				}
				globalMap.put("tFileCopy_9_DESTINATION_FILEPATH", desFile_tFileCopy_9.getPath());
				globalMap.put("tFileCopy_9_DESTINATION_FILENAME", desFile_tFileCopy_9.getName());

				globalMap.put("tFileCopy_9_SOURCE_DIRECTORY", srcFile_tFileCopy_9.getParent());
				globalMap.put("tFileCopy_9_DESTINATION_DIRECTORY", desFile_tFileCopy_9.getParent());

				tos_count_tFileCopy_9++;

				/**
				 * [tFileCopy_9 main ] stop
				 */

				/**
				 * [tFileCopy_9 process_data_begin ] start
				 */

				currentComponent = "tFileCopy_9";

				/**
				 * [tFileCopy_9 process_data_begin ] stop
				 */

				/**
				 * [tFileCopy_9 process_data_end ] start
				 */

				currentComponent = "tFileCopy_9";

				/**
				 * [tFileCopy_9 process_data_end ] stop
				 */

				/**
				 * [tFileCopy_9 end ] start
				 */

				currentComponent = "tFileCopy_9";

				ok_Hash.put("tFileCopy_9", true);
				end_Hash.put("tFileCopy_9", System.currentTimeMillis());

				tWarn_9Process(globalMap);

				/**
				 * [tFileCopy_9 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileCopy_9 finally ] start
				 */

				currentComponent = "tFileCopy_9";

				/**
				 * [tFileCopy_9 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileCopy_9_SUBPROCESS_STATE", 1);
	}

	public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_DEV_MASTERFILE_INTEGRATION_BDD = new byte[0];
		static byte[] commonByteArray_DEV_MASTERFILE_INTEGRATION_BDD = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_MASTERFILE_INTEGRATION_BDD) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tWarn_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tWarn_9_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();

				/**
				 * [tRunJob_4 begin ] start
				 */

				ok_Hash.put("tRunJob_4", false);
				start_Hash.put("tRunJob_4", System.currentTimeMillis());

				currentComponent = "tRunJob_4";

				int tos_count_tRunJob_4 = 0;

				/**
				 * [tRunJob_4 begin ] stop
				 */

				/**
				 * [tWarn_9 begin ] start
				 */

				ok_Hash.put("tWarn_9", false);
				start_Hash.put("tWarn_9", System.currentTimeMillis());

				currentComponent = "tWarn_9";

				int tos_count_tWarn_9 = 0;

				/**
				 * [tWarn_9 begin ] stop
				 */

				/**
				 * [tWarn_9 main ] start
				 */

				currentComponent = "tWarn_9";

				try {

					resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_9", "", Thread.currentThread().getId() + "", "ERROR",
							"", "Job en erreur", "", "");
					talendLogs_LOGS.addMessage("tWarn", "tWarn_9", 5, "Job en erreur", 4);
					talendLogs_LOGSProcess(globalMap);
					globalMap.put("tWarn_9_WARN_MESSAGES", "Job en erreur");
					globalMap.put("tWarn_9_WARN_PRIORITY", 5);
					globalMap.put("tWarn_9_WARN_CODE", 4);

				} catch (Exception e_tWarn_9) {
					logIgnoredError(
							String.format("tWarn_9 - tWarn failed to log message due to internal error: %s", e_tWarn_9),
							e_tWarn_9);
				}

				tos_count_tWarn_9++;

				/**
				 * [tWarn_9 main ] stop
				 */

				/**
				 * [tWarn_9 process_data_begin ] start
				 */

				currentComponent = "tWarn_9";

				/**
				 * [tWarn_9 process_data_begin ] stop
				 */

				/**
				 * [tRunJob_4 main ] start
				 */

				currentComponent = "tRunJob_4";

				java.util.List<String> paraList_tRunJob_4 = new java.util.ArrayList<String>();

				paraList_tRunJob_4.add("--father_pid=" + pid);

				paraList_tRunJob_4.add("--root_pid=" + rootPid);

				paraList_tRunJob_4.add("--father_node=tRunJob_4");

				paraList_tRunJob_4.add("--context=Default");

				if (enableLogStash) {
					paraList_tRunJob_4.add("--monitoring=" + enableLogStash);
				}

				// for feature:10589

				paraList_tRunJob_4.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_4.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_4 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_4 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_4".equals(tRunJobName_tRunJob_4) && childResumePath_tRunJob_4 != null) {
					paraList_tRunJob_4.add("--resuming_checkpoint_path="
							+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_4.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_4");

				java.util.Map<String, Object> parentContextMap_tRunJob_4 = new java.util.HashMap<String, Object>();

				Object obj_tRunJob_4 = null;

				obj_tRunJob_4 = "Error validation master file [Technical Error]";
				if (obj_tRunJob_4 != null) {
					paraList_tRunJob_4
							.add("--context_param Subject=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_4));
				} else {
					paraList_tRunJob_4.add(
							"--context_param Subject=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				parentContextMap_tRunJob_4.put("Subject", obj_tRunJob_4);

				obj_tRunJob_4 = "Validation occured with errors. Please check error file";
				if (obj_tRunJob_4 != null) {
					paraList_tRunJob_4
							.add("--context_param Content=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_4));
				} else {
					paraList_tRunJob_4.add(
							"--context_param Content=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				parentContextMap_tRunJob_4.put("Content", obj_tRunJob_4);

				obj_tRunJob_4 = context.LogPath + ((String) globalMap.get("LogFile"));
				if (obj_tRunJob_4 != null) {
					paraList_tRunJob_4.add(
							"--context_param AttachmentsList=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_4));
				} else {
					paraList_tRunJob_4.add("--context_param AttachmentsList="
							+ NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				parentContextMap_tRunJob_4.put("AttachmentsList", obj_tRunJob_4);

				obj_tRunJob_4 = routines.SharedRecipient.recipient;
				if (obj_tRunJob_4 != null) {
					paraList_tRunJob_4
							.add("--context_param ToAddress=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_4));
				} else {
					paraList_tRunJob_4.add(
							"--context_param ToAddress=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				parentContextMap_tRunJob_4.put("ToAddress", obj_tRunJob_4);

				dev.sendmailoffice365_0_1.SendMailOffice365 childJob_tRunJob_4 = new dev.sendmailoffice365_0_1.SendMailOffice365();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_4 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_4) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_4 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_4 : talendDataSources_tRunJob_4
							.entrySet()) {
						dataSources_tRunJob_4.put(talendDataSourceEntry_tRunJob_4.getKey(),
								talendDataSourceEntry_tRunJob_4.getValue().getRawDataSource());
					}
					childJob_tRunJob_4.setDataSources(dataSources_tRunJob_4);
				}

				childJob_tRunJob_4.parentContextMap = parentContextMap_tRunJob_4;

				String[][] childReturn_tRunJob_4 = childJob_tRunJob_4
						.runJob((String[]) paraList_tRunJob_4.toArray(new String[paraList_tRunJob_4.size()]));

				errorCode = childJob_tRunJob_4.getErrorCode();

				if (childJob_tRunJob_4.getErrorCode() == null) {
					globalMap.put("tRunJob_4_CHILD_RETURN_CODE",
							childJob_tRunJob_4.getStatus() != null && ("failure").equals(childJob_tRunJob_4.getStatus())
									? 1
									: 0);
				} else {
					globalMap.put("tRunJob_4_CHILD_RETURN_CODE", childJob_tRunJob_4.getErrorCode());
				}
				if (childJob_tRunJob_4.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_4_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_4.getExceptionStackTrace());
				}

				if (childJob_tRunJob_4.getErrorCode() != null || ("failure").equals(childJob_tRunJob_4.getStatus())) {
					java.lang.Exception ce_tRunJob_4 = childJob_tRunJob_4.getException();
					throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_4 != null)
							? (ce_tRunJob_4.getClass().getName() + ": " + ce_tRunJob_4.getMessage())
							: ""));
				}

				tos_count_tRunJob_4++;

				/**
				 * [tRunJob_4 main ] stop
				 */

				/**
				 * [tRunJob_4 process_data_begin ] start
				 */

				currentComponent = "tRunJob_4";

				/**
				 * [tRunJob_4 process_data_begin ] stop
				 */

				/**
				 * [tRunJob_4 process_data_end ] start
				 */

				currentComponent = "tRunJob_4";

				/**
				 * [tRunJob_4 process_data_end ] stop
				 */

				/**
				 * [tWarn_9 process_data_end ] start
				 */

				currentComponent = "tWarn_9";

				/**
				 * [tWarn_9 process_data_end ] stop
				 */

				/**
				 * [tWarn_9 end ] start
				 */

				currentComponent = "tWarn_9";

				ok_Hash.put("tWarn_9", true);
				end_Hash.put("tWarn_9", System.currentTimeMillis());

				/**
				 * [tWarn_9 end ] stop
				 */

				/**
				 * [tRunJob_4 end ] start
				 */

				currentComponent = "tRunJob_4";

				ok_Hash.put("tRunJob_4", true);
				end_Hash.put("tRunJob_4", System.currentTimeMillis());

				/**
				 * [tRunJob_4 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tWarn_9 finally ] start
				 */

				currentComponent = "tWarn_9";

				/**
				 * [tWarn_9 finally ] stop
				 */

				/**
				 * [tRunJob_4 finally ] start
				 */

				currentComponent = "tRunJob_4";

				/**
				 * [tRunJob_4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tWarn_9_SUBPROCESS_STATE", 1);
	}

	public void tFileExist_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileExist_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tFileExist_5 begin ] start
				 */

				ok_Hash.put("tFileExist_5", false);
				start_Hash.put("tFileExist_5", System.currentTimeMillis());

				currentComponent = "tFileExist_5";

				int tos_count_tFileExist_5 = 0;

				/**
				 * [tFileExist_5 begin ] stop
				 */

				/**
				 * [tFileExist_5 main ] start
				 */

				currentComponent = "tFileExist_5";

				java.io.File file_tFileExist_5 = new java.io.File(
						context.LogPath + ((String) globalMap.get("LogFile")));
				if (!file_tFileExist_5.exists()) {
					globalMap.put("tFileExist_5_EXISTS", false);
				} else {
					globalMap.put("tFileExist_5_EXISTS", true);
				}

				globalMap.put("tFileExist_5_FILENAME", context.LogPath + ((String) globalMap.get("LogFile")));

				tos_count_tFileExist_5++;

				/**
				 * [tFileExist_5 main ] stop
				 */

				/**
				 * [tFileExist_5 process_data_begin ] start
				 */

				currentComponent = "tFileExist_5";

				/**
				 * [tFileExist_5 process_data_begin ] stop
				 */

				/**
				 * [tFileExist_5 process_data_end ] start
				 */

				currentComponent = "tFileExist_5";

				/**
				 * [tFileExist_5 process_data_end ] stop
				 */

				/**
				 * [tFileExist_5 end ] start
				 */

				currentComponent = "tFileExist_5";

				ok_Hash.put("tFileExist_5", true);
				end_Hash.put("tFileExist_5", System.currentTimeMillis());

				if (((Boolean) globalMap.get("tFileExist_5_EXISTS"))) {

					tFixedFlowInput_1Process(globalMap);
				}

				if (!((Boolean) globalMap.get("tFileExist_5_EXISTS"))) {

					tFileExist_2Process(globalMap);
				}

				/**
				 * [tFileExist_5 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileExist_5 finally ] start
				 */

				currentComponent = "tFileExist_5";

				/**
				 * [tFileExist_5 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileExist_5_SUBPROCESS_STATE", 1);
	}

	public void tFileExist_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileExist_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tFileExist_2 begin ] start
				 */

				ok_Hash.put("tFileExist_2", false);
				start_Hash.put("tFileExist_2", System.currentTimeMillis());

				currentComponent = "tFileExist_2";

				int tos_count_tFileExist_2 = 0;

				/**
				 * [tFileExist_2 begin ] stop
				 */

				/**
				 * [tFileExist_2 main ] start
				 */

				currentComponent = "tFileExist_2";

				java.io.File file_tFileExist_2 = new java.io.File(
						context.IntegrationPath + ((String) globalMap.get("tFileList_1_CURRENT_FILE")));
				if (!file_tFileExist_2.exists()) {
					globalMap.put("tFileExist_2_EXISTS", false);
				} else {
					globalMap.put("tFileExist_2_EXISTS", true);
				}

				globalMap.put("tFileExist_2_FILENAME",
						context.IntegrationPath + ((String) globalMap.get("tFileList_1_CURRENT_FILE")));

				tos_count_tFileExist_2++;

				/**
				 * [tFileExist_2 main ] stop
				 */

				/**
				 * [tFileExist_2 process_data_begin ] start
				 */

				currentComponent = "tFileExist_2";

				/**
				 * [tFileExist_2 process_data_begin ] stop
				 */

				/**
				 * [tFileExist_2 process_data_end ] start
				 */

				currentComponent = "tFileExist_2";

				/**
				 * [tFileExist_2 process_data_end ] stop
				 */

				/**
				 * [tFileExist_2 end ] start
				 */

				currentComponent = "tFileExist_2";

				ok_Hash.put("tFileExist_2", true);
				end_Hash.put("tFileExist_2", System.currentTimeMillis());

				if (((Boolean) globalMap.get("tFileExist_2_EXISTS"))) {

					tWarn_2Process(globalMap);
				}

				if (!((Boolean) globalMap.get("tFileExist_2_EXISTS"))) {

					tJava_3Process(globalMap);
				}

				/**
				 * [tFileExist_2 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileExist_2 finally ] start
				 */

				currentComponent = "tFileExist_2";

				/**
				 * [tFileExist_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileExist_2_SUBPROCESS_STATE", 1);
	}

	public void tWarn_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tWarn_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tWarn_2 begin ] start
				 */

				ok_Hash.put("tWarn_2", false);
				start_Hash.put("tWarn_2", System.currentTimeMillis());

				currentComponent = "tWarn_2";

				int tos_count_tWarn_2 = 0;

				/**
				 * [tWarn_2 begin ] stop
				 */

				/**
				 * [tWarn_2 main ] start
				 */

				currentComponent = "tWarn_2";

				try {

					resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_2", "", Thread.currentThread().getId() + "", "INFO",
							"", "Validation OK", "", "");
					talendLogs_LOGS.addMessage("tWarn", "tWarn_2", 3, "Validation OK", 3);
					talendLogs_LOGSProcess(globalMap);
					globalMap.put("tWarn_2_WARN_MESSAGES", "Validation OK");
					globalMap.put("tWarn_2_WARN_PRIORITY", 3);
					globalMap.put("tWarn_2_WARN_CODE", 3);

				} catch (Exception e_tWarn_2) {
					logIgnoredError(
							String.format("tWarn_2 - tWarn failed to log message due to internal error: %s", e_tWarn_2),
							e_tWarn_2);
				}

				tos_count_tWarn_2++;

				/**
				 * [tWarn_2 main ] stop
				 */

				/**
				 * [tWarn_2 process_data_begin ] start
				 */

				currentComponent = "tWarn_2";

				/**
				 * [tWarn_2 process_data_begin ] stop
				 */

				/**
				 * [tWarn_2 process_data_end ] start
				 */

				currentComponent = "tWarn_2";

				/**
				 * [tWarn_2 process_data_end ] stop
				 */

				/**
				 * [tWarn_2 end ] start
				 */

				currentComponent = "tWarn_2";

				ok_Hash.put("tWarn_2", true);
				end_Hash.put("tWarn_2", System.currentTimeMillis());

				if (context.insertSQLMode) {

					tRunJob_2Process(globalMap);
				}

				/**
				 * [tWarn_2 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tWarn_2 finally ] start
				 */

				currentComponent = "tWarn_2";

				/**
				 * [tWarn_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tWarn_2_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRunJob_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_2 begin ] start
				 */

				ok_Hash.put("tRunJob_2", false);
				start_Hash.put("tRunJob_2", System.currentTimeMillis());

				currentComponent = "tRunJob_2";

				int tos_count_tRunJob_2 = 0;

				class DealChildJobLibrary_tRunJob_2 {

					public String replaceJarPathsFromCrcMap(String originalClassPathLine) throws java.lang.Exception {
						String classPathLine = "";
						String crcMapPath = new java.io.File("../crcMap").getCanonicalPath();
						if (isNeedAddLibsPath(crcMapPath)) {
							java.util.Map<String, String> crcMap = null;
							java.io.ObjectInputStream ois = new ObjectInputStream(
									new java.io.FileInputStream(crcMapPath));
							crcMap = (java.util.Map<String, String>) ois.readObject();
							ois.close();
							classPathLine = addLibsPath(originalClassPathLine, crcMap);
						} else {
							classPathLine = originalClassPathLine;
						}
						return classPathLine;
					}

					private boolean isNeedAddLibsPath(String crcMapPath) {
						if (!(new java.io.File(crcMapPath).exists())) {// when not use cache
							return false;
						}
						return true;
					}

					private String addLibsPath(String line, java.util.Map<String, String> crcMap) {
						for (java.util.Map.Entry<String, String> entry : crcMap.entrySet()) {
							line = adaptLibPaths(line, entry);
						}
						return line;
					}

					private String adaptLibPaths(String line, java.util.Map.Entry<String, String> entry) {
						String jarName = entry.getValue();
						String crc = entry.getKey();
						String libStringFinder = "../lib/" + jarName;
						if (line.contains(libStringFinder)) {
							line = line.replace(libStringFinder, "../../../cache/lib/" + crc + "/" + jarName);
						} else if (line.contains(":$ROOT_PATH/" + jarName + ":")) {
							line = line.replace(":$ROOT_PATH/" + jarName + ":",
									":$ROOT_PATH/../../../cache/lib/" + crc + "/" + jarName + ":");
						} else if (line.contains(";" + jarName + ";")) {
							line = line.replace(";" + jarName + ";",
									";../../../cache/lib/" + crc + "/" + jarName + ";");
						}
						return line;
					}

				}
				DealChildJobLibrary_tRunJob_2 dealChildJobLibrary_tRunJob_2 = new DealChildJobLibrary_tRunJob_2();

				class JVMArgumentHelper_tRunJob_2 {

					public void addArgumentsTo(java.util.List<String> target_argument_list,
							String argument_from_child) {

						target_argument_list.add(argument_from_child);
					}

				}

				JVMArgumentHelper_tRunJob_2 jvm_argument_helper_tRunJob_2 = new JVMArgumentHelper_tRunJob_2();

				/**
				 * [tRunJob_2 begin ] stop
				 */

				/**
				 * [tRunJob_2 main ] start
				 */

				currentComponent = "tRunJob_2";

				java.util.List<String> paraList_tRunJob_2 = new java.util.ArrayList<String>();

				String osName_tRunJob_2 = System.getProperty("os.name");
				if (osName_tRunJob_2 != null && osName_tRunJob_2.toLowerCase().startsWith("win")) {

					paraList_tRunJob_2.add("C:/Program Files/Java/jre-1.8/bin/java.exe");

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "-Xms256M");

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "-Xmx1024M");

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "-Xmx3048M");

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "-Xmx4096M");

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2,
							"-Dmail.smtp.ssl.protocols=TLSv1.2");

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "-Dfile.encoding=UTF-8");

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "-cp");

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2,
							dealChildJobLibrary_tRunJob_2.replaceJarPathsFromCrcMap(
									"C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/workspace/DEV/poms/jobs/process/masterfile_excel_to_sqlserver_0.10/target/classpath.jar;"));

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2,
							"dev.masterfile_excel_to_sqlserver_0_10.MASTERFILE_EXCEL_TO_SQLSERVER");

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "--father_pid=" + pid);

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "--root_pid=" + rootPid);

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "--father_node=tRunJob_2");

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "--context=Default");

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "%*");

				} else {

					paraList_tRunJob_2.add("C:/Program Files/Java/jre-1.8/bin/java.exe");

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "-Xms256M");

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "-Xmx1024M");

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "-Xmx3048M");

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "-Xmx4096M");

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2,
							"-Dmail.smtp.ssl.protocols=TLSv1.2");

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "-Dfile.encoding=UTF-8");

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "-cp");

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2,
							dealChildJobLibrary_tRunJob_2.replaceJarPathsFromCrcMap(
									"C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/workspace/DEV/poms/jobs/process/masterfile_excel_to_sqlserver_0.10/target/classes:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/workspace/DEV/poms/jobs/process/masterfile_excel_to_sqlserver_0.10/src/main/ext-resources:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/workspace/DEV/poms/code/routines/target/classes:.:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/talend/libraries/advancedPersistentLookupLib-1.2/6.0.0/advancedPersistentLookupLib-1.2-6.0.0.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/commons-collections/commons-collections/3.2.2/commons-collections-3.2.2.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/talend/libraries/commons-collections4-4.1/6.0.0/commons-collections4-4.1-6.0.0.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/apache/commons/commons-compress/1.19/commons-compress-1.19.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/apache/commons/commons-lang3/3.8.1/commons-lang3-3.8.1.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/apache/commons/commons-math3/3.6.1/commons-math3-3.6.1.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/talend/libraries/crypto-utils/6.0.0-SNAPSHOT/crypto-utils-6.0.0-SNAPSHOT.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/dom4j/dom4j/1.6.1/dom4j-1.6.1.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/talend/libraries/geronimo-stax-api_1.0_spec-1.0.1/6.0.0/geronimo-stax-api_1.0_spec-1.0.1-6.0.0.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/talend/libraries/jboss-serialization/6.0.0/jboss-serialization-6.0.0.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/log4j/log4j/1.2.17/log4j-1.2.17.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/talend/libraries/mssql-jdbc/6.0.0/mssql-jdbc-6.0.0.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/apache/poi/poi/4.1.0-20190523141255_modified_talend/poi-4.1.0-20190523141255_modified_talend.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/apache/poi/poi-ooxml/4.1.0-20190523141255_modified_talend/poi-ooxml-4.1.0-20190523141255_modified_talend.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/apache/poi/poi-ooxml-schemas/4.1.0-20190523141255_modified_talend/poi-ooxml-schemas-4.1.0-20190523141255_modified_talend.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/apache/poi/poi-scratchpad/4.1.0-20190523141255_modified_talend/poi-scratchpad-4.1.0-20190523141255_modified_talend.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/talend/libraries/simpleexcel-2.2-20190722/6.0.0/simpleexcel-2.2-20190722-6.0.0.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/talend/libraries/talendExcel-1.5-20190731/6.0.0/talendExcel-1.5-20190731-6.0.0.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/talend/libraries/talend_DB_mssqlUtil-1.3-20190523/6.0.0/talend_DB_mssqlUtil-1.3-20190523-6.0.0.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/talend/libraries/talend_file_enhanced_20070724/6.0.0/talend_file_enhanced_20070724-6.0.0.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/talend/components/lib/thashfile/3.1-20190910/thashfile-3.1-20190910.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/talend/libraries/trove/6.0.0/trove-6.0.0.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/apache/xmlbeans/xmlbeans/3.1.0/xmlbeans-3.1.0.jar:")
									.replace("$ROOT_PATH", System.getProperty("user.dir")));

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2,
							"dev.masterfile_excel_to_sqlserver_0_10.MASTERFILE_EXCEL_TO_SQLSERVER");

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "--father_pid=" + pid);

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "--root_pid=" + rootPid);

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "--father_node=tRunJob_2");

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "--context=Default");

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "$@");

				}

				if (enableLogStash) {
					paraList_tRunJob_2.add("--monitoring=" + enableLogStash);
				}

				// for feature:10589

				paraList_tRunJob_2.add("--stat_port=" + null);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_2.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_2 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_2 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_2".equals(tRunJobName_tRunJob_2) && childResumePath_tRunJob_2 != null) {
					paraList_tRunJob_2.add("--resuming_checkpoint_path="
							+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_2.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_2");

				java.util.Map<String, Object> parentContextMap_tRunJob_2 = new java.util.HashMap<String, Object>();

				context.synchronizeContext();
				class ContextProcessor_tRunJob_2 {
					private void transmitContext_0() {
						parentContextMap_tRunJob_2.put("IntegrationPath", context.IntegrationPath);
						paraList_tRunJob_2.add("--context_type " + "IntegrationPath" + "=" + "id_String");
						parentContextMap_tRunJob_2.put("LogPath", context.LogPath);
						paraList_tRunJob_2.add("--context_type " + "LogPath" + "=" + "id_String");
						parentContextMap_tRunJob_2.put("insertSQLMode", context.insertSQLMode);
						paraList_tRunJob_2.add("--context_type " + "insertSQLMode" + "=" + "id_Boolean");
						parentContextMap_tRunJob_2.put("new1", context.new1);
						paraList_tRunJob_2.add("--context_type " + "new1" + "=" + "id_String");
						parentContextMap_tRunJob_2.put("SQLSERVER_AdditionalParams",
								context.SQLSERVER_AdditionalParams);
						paraList_tRunJob_2.add("--context_type " + "SQLSERVER_AdditionalParams" + "=" + "id_String");
						parentContextMap_tRunJob_2.put("SQLSERVER_Database", context.SQLSERVER_Database);
						paraList_tRunJob_2.add("--context_type " + "SQLSERVER_Database" + "=" + "id_String");
						parentContextMap_tRunJob_2.put("SQLSERVER_Login", context.SQLSERVER_Login);
						paraList_tRunJob_2.add("--context_type " + "SQLSERVER_Login" + "=" + "id_String");
						parentContextMap_tRunJob_2.put("SQLSERVER_Password", context.SQLSERVER_Password);
						paraList_tRunJob_2.add("--context_type " + "SQLSERVER_Password" + "=" + "id_Password");
						parentContextMap_tRunJob_2.put("SQLSERVER_Port", context.SQLSERVER_Port);
						paraList_tRunJob_2.add("--context_type " + "SQLSERVER_Port" + "=" + "id_String");
						parentContextMap_tRunJob_2.put("SQLSERVER_Schema", context.SQLSERVER_Schema);
						paraList_tRunJob_2.add("--context_type " + "SQLSERVER_Schema" + "=" + "id_String");
						parentContextMap_tRunJob_2.put("SQLSERVER_Server", context.SQLSERVER_Server);
						paraList_tRunJob_2.add("--context_type " + "SQLSERVER_Server" + "=" + "id_String");
						parentContextMap_tRunJob_2.put("SQLSERVER_LOG_AdditionalParams",
								context.SQLSERVER_LOG_AdditionalParams);
						paraList_tRunJob_2
								.add("--context_type " + "SQLSERVER_LOG_AdditionalParams" + "=" + "id_String");
						parentContextMap_tRunJob_2.put("SQLSERVER_LOG_Database", context.SQLSERVER_LOG_Database);
						paraList_tRunJob_2.add("--context_type " + "SQLSERVER_LOG_Database" + "=" + "id_String");
						parentContextMap_tRunJob_2.put("SQLSERVER_LOG_Login", context.SQLSERVER_LOG_Login);
						paraList_tRunJob_2.add("--context_type " + "SQLSERVER_LOG_Login" + "=" + "id_String");
						parentContextMap_tRunJob_2.put("SQLSERVER_LOG_Password", context.SQLSERVER_LOG_Password);
						paraList_tRunJob_2.add("--context_type " + "SQLSERVER_LOG_Password" + "=" + "id_Password");
						parentContextMap_tRunJob_2.put("SQLSERVER_LOG_Port", context.SQLSERVER_LOG_Port);
						paraList_tRunJob_2.add("--context_type " + "SQLSERVER_LOG_Port" + "=" + "id_String");
						parentContextMap_tRunJob_2.put("SQLSERVER_LOG_Schema", context.SQLSERVER_LOG_Schema);
						paraList_tRunJob_2.add("--context_type " + "SQLSERVER_LOG_Schema" + "=" + "id_String");
						parentContextMap_tRunJob_2.put("SQLSERVER_LOG_Server", context.SQLSERVER_LOG_Server);
						paraList_tRunJob_2.add("--context_type " + "SQLSERVER_LOG_Server" + "=" + "id_String");
						parentContextMap_tRunJob_2.put("SQLSERVERSCHEMA_MASTERFILE_AdditionalParams",
								context.SQLSERVERSCHEMA_MASTERFILE_AdditionalParams);
						paraList_tRunJob_2.add(
								"--context_type " + "SQLSERVERSCHEMA_MASTERFILE_AdditionalParams" + "=" + "id_String");
						parentContextMap_tRunJob_2.put("SQLSERVERSCHEMA_MASTERFILE_Database",
								context.SQLSERVERSCHEMA_MASTERFILE_Database);
						paraList_tRunJob_2
								.add("--context_type " + "SQLSERVERSCHEMA_MASTERFILE_Database" + "=" + "id_String");
						parentContextMap_tRunJob_2.put("SQLSERVERSCHEMA_MASTERFILE_Login",
								context.SQLSERVERSCHEMA_MASTERFILE_Login);
						paraList_tRunJob_2
								.add("--context_type " + "SQLSERVERSCHEMA_MASTERFILE_Login" + "=" + "id_String");
						parentContextMap_tRunJob_2.put("SQLSERVERSCHEMA_MASTERFILE_Password",
								context.SQLSERVERSCHEMA_MASTERFILE_Password);
						paraList_tRunJob_2
								.add("--context_type " + "SQLSERVERSCHEMA_MASTERFILE_Password" + "=" + "id_Password");
						parentContextMap_tRunJob_2.put("SQLSERVERSCHEMA_MASTERFILE_Port",
								context.SQLSERVERSCHEMA_MASTERFILE_Port);
						paraList_tRunJob_2
								.add("--context_type " + "SQLSERVERSCHEMA_MASTERFILE_Port" + "=" + "id_String");
						parentContextMap_tRunJob_2.put("SQLSERVERSCHEMA_MASTERFILE_Schema",
								context.SQLSERVERSCHEMA_MASTERFILE_Schema);
						paraList_tRunJob_2
								.add("--context_type " + "SQLSERVERSCHEMA_MASTERFILE_Schema" + "=" + "id_String");
						parentContextMap_tRunJob_2.put("SQLSERVERSCHEMA_MASTERFILE_Server",
								context.SQLSERVERSCHEMA_MASTERFILE_Server);
						paraList_tRunJob_2
								.add("--context_type " + "SQLSERVERSCHEMA_MASTERFILE_Server" + "=" + "id_String");
					}

					public void transmitAllContext() {
						transmitContext_0();
					}
				}
				new ContextProcessor_tRunJob_2().transmitAllContext();
				java.util.Enumeration<?> propertyNames_tRunJob_2 = context.propertyNames();
				while (propertyNames_tRunJob_2.hasMoreElements()) {
					String key_tRunJob_2 = (String) propertyNames_tRunJob_2.nextElement();
					Object value_tRunJob_2 = (Object) context.get(key_tRunJob_2);
					if (value_tRunJob_2 != null) {
						paraList_tRunJob_2.add("--context_param " + key_tRunJob_2 + "=" + value_tRunJob_2);
					} else {
						paraList_tRunJob_2.add("--context_param " + key_tRunJob_2 + "="
								+ NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
					}

				}

				Object obj_tRunJob_2 = null;

				obj_tRunJob_2 = context.IntegrationPath;
				if (obj_tRunJob_2 != null) {
					paraList_tRunJob_2.add("--context_param IntegrationExcelPath="
							+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
				} else {
					paraList_tRunJob_2.add("--context_param IntegrationExcelPath="
							+ NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				parentContextMap_tRunJob_2.put("IntegrationExcelPath", obj_tRunJob_2);

				obj_tRunJob_2 = ((String) globalMap.get("tFileList_1_CURRENT_FILE"));
				if (obj_tRunJob_2 != null) {
					paraList_tRunJob_2
							.add("--context_param ExcelFileName=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
				} else {
					paraList_tRunJob_2.add("--context_param ExcelFileName="
							+ NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				parentContextMap_tRunJob_2.put("ExcelFileName", obj_tRunJob_2);

				obj_tRunJob_2 = context.LogPath;
				if (obj_tRunJob_2 != null) {
					paraList_tRunJob_2
							.add("--context_param LogPath=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
				} else {
					paraList_tRunJob_2.add(
							"--context_param LogPath=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				parentContextMap_tRunJob_2.put("LogPath", obj_tRunJob_2);

				obj_tRunJob_2 = context.LogPath + ((String) globalMap.get("LogFile"));
				if (obj_tRunJob_2 != null) {
					paraList_tRunJob_2
							.add("--context_param errorFile=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
				} else {
					paraList_tRunJob_2.add(
							"--context_param errorFile=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				parentContextMap_tRunJob_2.put("errorFile", obj_tRunJob_2);

				class ConsoleHelper_tRunJob_2 {
					private Thread getNormalThread(Process process) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(process.getInputStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											System.out.println(line);
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {

									ioe.printStackTrace();
								}
							}
						};
					}

					private Thread getErrorThread(Process process, StringBuffer sb) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(process.getErrorStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											sb.append(line).append("\n");
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {

									ioe.printStackTrace();
								}
							}
						};
					}
				}
				ConsoleHelper_tRunJob_2 consoleHelper_tRunJob_2 = new ConsoleHelper_tRunJob_2();

				Runtime runtime_tRunJob_2 = Runtime.getRuntime();
				Process ps_tRunJob_2 = null;

				// 0 indicates normal termination
				int result_tRunJob_2;
				StringBuffer errorMsg_tRunJob_2 = new StringBuffer();
				try {
					ps_tRunJob_2 = runtime_tRunJob_2
							.exec((String[]) paraList_tRunJob_2.toArray(new String[paraList_tRunJob_2.size()]));

					Thread normal_tRunJob_2 = consoleHelper_tRunJob_2.getNormalThread(ps_tRunJob_2);
					normal_tRunJob_2.start();

					Thread error_tRunJob_2 = consoleHelper_tRunJob_2.getErrorThread(ps_tRunJob_2, errorMsg_tRunJob_2);
					error_tRunJob_2.start();

					result_tRunJob_2 = ps_tRunJob_2.waitFor();
					normal_tRunJob_2.join(10000);
					error_tRunJob_2.join(10000);
				} catch (ThreadDeath tde) {
					ps_tRunJob_2.destroy();
					throw tde;
				}

				globalMap.put("tRunJob_2_CHILD_RETURN_CODE", result_tRunJob_2);
				if (result_tRunJob_2 != 0) {
					globalMap.put("tRunJob_2_CHILD_EXCEPTION_STACKTRACE", errorMsg_tRunJob_2.toString());

					throw new RuntimeException("Child job returns " + result_tRunJob_2
							+ ". It doesn't terminate normally.\n" + errorMsg_tRunJob_2.toString());

				}

				tos_count_tRunJob_2++;

				/**
				 * [tRunJob_2 main ] stop
				 */

				/**
				 * [tRunJob_2 process_data_begin ] start
				 */

				currentComponent = "tRunJob_2";

				/**
				 * [tRunJob_2 process_data_begin ] stop
				 */

				/**
				 * [tRunJob_2 process_data_end ] start
				 */

				currentComponent = "tRunJob_2";

				/**
				 * [tRunJob_2 process_data_end ] stop
				 */

				/**
				 * [tRunJob_2 end ] start
				 */

				currentComponent = "tRunJob_2";

				ok_Hash.put("tRunJob_2", true);
				end_Hash.put("tRunJob_2", System.currentTimeMillis());

				tWarn_3Process(globalMap);

				/**
				 * [tRunJob_2 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_2 finally ] start
				 */

				currentComponent = "tRunJob_2";

				/**
				 * [tRunJob_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_2_SUBPROCESS_STATE", 1);
	}

	public void tWarn_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tWarn_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tWarn_3 begin ] start
				 */

				ok_Hash.put("tWarn_3", false);
				start_Hash.put("tWarn_3", System.currentTimeMillis());

				currentComponent = "tWarn_3";

				int tos_count_tWarn_3 = 0;

				/**
				 * [tWarn_3 begin ] stop
				 */

				/**
				 * [tWarn_3 main ] start
				 */

				currentComponent = "tWarn_3";

				try {

					resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_3", "", Thread.currentThread().getId() + "", "INFO",
							"", "Insert to SQL OK", "", "");
					talendLogs_LOGS.addMessage("tWarn", "tWarn_3", 3, "Insert to SQL OK", 3);
					talendLogs_LOGSProcess(globalMap);
					globalMap.put("tWarn_3_WARN_MESSAGES", "Insert to SQL OK");
					globalMap.put("tWarn_3_WARN_PRIORITY", 3);
					globalMap.put("tWarn_3_WARN_CODE", 3);

				} catch (Exception e_tWarn_3) {
					logIgnoredError(
							String.format("tWarn_3 - tWarn failed to log message due to internal error: %s", e_tWarn_3),
							e_tWarn_3);
				}

				tos_count_tWarn_3++;

				/**
				 * [tWarn_3 main ] stop
				 */

				/**
				 * [tWarn_3 process_data_begin ] start
				 */

				currentComponent = "tWarn_3";

				/**
				 * [tWarn_3 process_data_begin ] stop
				 */

				/**
				 * [tWarn_3 process_data_end ] start
				 */

				currentComponent = "tWarn_3";

				/**
				 * [tWarn_3 process_data_end ] stop
				 */

				/**
				 * [tWarn_3 end ] start
				 */

				currentComponent = "tWarn_3";

				ok_Hash.put("tWarn_3", true);
				end_Hash.put("tWarn_3", System.currentTimeMillis());

				tFileExist_3Process(globalMap);

				/**
				 * [tWarn_3 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tWarn_3 finally ] start
				 */

				currentComponent = "tWarn_3";

				/**
				 * [tWarn_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tWarn_3_SUBPROCESS_STATE", 1);
	}

	public void tFileExist_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileExist_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tFileExist_3 begin ] start
				 */

				ok_Hash.put("tFileExist_3", false);
				start_Hash.put("tFileExist_3", System.currentTimeMillis());

				currentComponent = "tFileExist_3";

				int tos_count_tFileExist_3 = 0;

				/**
				 * [tFileExist_3 begin ] stop
				 */

				/**
				 * [tFileExist_3 main ] start
				 */

				currentComponent = "tFileExist_3";

				java.io.File file_tFileExist_3 = new java.io.File(
						context.IntegrationPath + ((String) globalMap.get("tFileList_1_CURRENT_FILE")));
				if (!file_tFileExist_3.exists()) {
					globalMap.put("tFileExist_3_EXISTS", false);
				} else {
					globalMap.put("tFileExist_3_EXISTS", true);
				}

				globalMap.put("tFileExist_3_FILENAME",
						context.IntegrationPath + ((String) globalMap.get("tFileList_1_CURRENT_FILE")));

				tos_count_tFileExist_3++;

				/**
				 * [tFileExist_3 main ] stop
				 */

				/**
				 * [tFileExist_3 process_data_begin ] start
				 */

				currentComponent = "tFileExist_3";

				/**
				 * [tFileExist_3 process_data_begin ] stop
				 */

				/**
				 * [tFileExist_3 process_data_end ] start
				 */

				currentComponent = "tFileExist_3";

				/**
				 * [tFileExist_3 process_data_end ] stop
				 */

				/**
				 * [tFileExist_3 end ] start
				 */

				currentComponent = "tFileExist_3";

				ok_Hash.put("tFileExist_3", true);
				end_Hash.put("tFileExist_3", System.currentTimeMillis());

				if (((Boolean) globalMap.get("tFileExist_3_EXISTS"))) {

					tFileDelete_2Process(globalMap);
				}

				/**
				 * [tFileExist_3 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileExist_3 finally ] start
				 */

				currentComponent = "tFileExist_3";

				/**
				 * [tFileExist_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileExist_3_SUBPROCESS_STATE", 1);
	}

	public void tFileDelete_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileDelete_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tFileDelete_2 begin ] start
				 */

				ok_Hash.put("tFileDelete_2", false);
				start_Hash.put("tFileDelete_2", System.currentTimeMillis());

				currentComponent = "tFileDelete_2";

				int tos_count_tFileDelete_2 = 0;

				/**
				 * [tFileDelete_2 begin ] stop
				 */

				/**
				 * [tFileDelete_2 main ] start
				 */

				currentComponent = "tFileDelete_2";

				class DeleteFoldertFileDelete_2 {
					/**
					 * delete all the sub-files in 'file'
					 * 
					 * @param file
					 */
					public boolean delete(java.io.File file) {
						java.io.File[] files = file.listFiles();
						for (int i = 0; i < files.length; i++) {
							if (files[i].isFile()) {
								files[i].delete();
							} else if (files[i].isDirectory()) {
								if (!files[i].delete()) {
									delete(files[i]);
								}
							}
						}
						deleteDirectory(file);
						return file.delete();
					}

					/**
					 * delete all the sub-folders in 'file'
					 * 
					 * @param file
					 */
					private void deleteDirectory(java.io.File file) {
						java.io.File[] filed = file.listFiles();
						for (int i = 0; i < filed.length; i++) {
							if (filed[i].isDirectory()) {
								deleteDirectory(filed[i]);
							}
							filed[i].delete();
						}
					}

				}
				java.io.File file_tFileDelete_2 = new java.io.File(
						context.IntegrationPath + ((String) globalMap.get("tFileList_1_CURRENT_FILE")));
				if (file_tFileDelete_2.exists() && file_tFileDelete_2.isFile()) {
					if (file_tFileDelete_2.delete()) {
						globalMap.put("tFileDelete_2_CURRENT_STATUS", "File deleted.");
					} else {
						globalMap.put("tFileDelete_2_CURRENT_STATUS", "No file deleted.");
						throw new RuntimeException(
								"File " + file_tFileDelete_2.getAbsolutePath() + " can not be deleted.");
					}
				} else {
					globalMap.put("tFileDelete_2_CURRENT_STATUS", "File does not exist or is invalid.");
					throw new RuntimeException("File " + file_tFileDelete_2.getAbsolutePath()
							+ " does not exist or is invalid or is not a file.");
				}
				globalMap.put("tFileDelete_2_DELETE_PATH",
						context.IntegrationPath + ((String) globalMap.get("tFileList_1_CURRENT_FILE")));

				tos_count_tFileDelete_2++;

				/**
				 * [tFileDelete_2 main ] stop
				 */

				/**
				 * [tFileDelete_2 process_data_begin ] start
				 */

				currentComponent = "tFileDelete_2";

				/**
				 * [tFileDelete_2 process_data_begin ] stop
				 */

				/**
				 * [tFileDelete_2 process_data_end ] start
				 */

				currentComponent = "tFileDelete_2";

				/**
				 * [tFileDelete_2 process_data_end ] stop
				 */

				/**
				 * [tFileDelete_2 end ] start
				 */

				currentComponent = "tFileDelete_2";

				ok_Hash.put("tFileDelete_2", true);
				end_Hash.put("tFileDelete_2", System.currentTimeMillis());

				tWarn_14Process(globalMap);

				/**
				 * [tFileDelete_2 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileDelete_2 finally ] start
				 */

				currentComponent = "tFileDelete_2";

				/**
				 * [tFileDelete_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileDelete_2_SUBPROCESS_STATE", 1);
	}

	public void tWarn_14Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tWarn_14_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tWarn_14 begin ] start
				 */

				ok_Hash.put("tWarn_14", false);
				start_Hash.put("tWarn_14", System.currentTimeMillis());

				currentComponent = "tWarn_14";

				int tos_count_tWarn_14 = 0;

				/**
				 * [tWarn_14 begin ] stop
				 */

				/**
				 * [tWarn_14 main ] start
				 */

				currentComponent = "tWarn_14";

				try {

					resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_14", "", Thread.currentThread().getId() + "", "INFO",
							"", "Delete excel file : " + ((String) globalMap.get("tFileList_1_CURRENT_FILE")), "", "");
					talendLogs_LOGS.addMessage("tWarn", "tWarn_14", 3,
							"Delete excel file : " + ((String) globalMap.get("tFileList_1_CURRENT_FILE")), 3);
					talendLogs_LOGSProcess(globalMap);
					globalMap.put("tWarn_14_WARN_MESSAGES",
							"Delete excel file : " + ((String) globalMap.get("tFileList_1_CURRENT_FILE")));
					globalMap.put("tWarn_14_WARN_PRIORITY", 3);
					globalMap.put("tWarn_14_WARN_CODE", 3);

				} catch (Exception e_tWarn_14) {
					logIgnoredError(String.format("tWarn_14 - tWarn failed to log message due to internal error: %s",
							e_tWarn_14), e_tWarn_14);
				}

				tos_count_tWarn_14++;

				/**
				 * [tWarn_14 main ] stop
				 */

				/**
				 * [tWarn_14 process_data_begin ] start
				 */

				currentComponent = "tWarn_14";

				/**
				 * [tWarn_14 process_data_begin ] stop
				 */

				/**
				 * [tWarn_14 process_data_end ] start
				 */

				currentComponent = "tWarn_14";

				/**
				 * [tWarn_14 process_data_end ] stop
				 */

				/**
				 * [tWarn_14 end ] start
				 */

				currentComponent = "tWarn_14";

				ok_Hash.put("tWarn_14", true);
				end_Hash.put("tWarn_14", System.currentTimeMillis());

				/**
				 * [tWarn_14 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tWarn_14 finally ] start
				 */

				currentComponent = "tWarn_14";

				/**
				 * [tWarn_14 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tWarn_14_SUBPROCESS_STATE", 1);
	}

	public void tJava_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tJava_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tJava_3 begin ] start
				 */

				ok_Hash.put("tJava_3", false);
				start_Hash.put("tJava_3", System.currentTimeMillis());

				currentComponent = "tJava_3";

				int tos_count_tJava_3 = 0;

				/**
				 * [tJava_3 begin ] stop
				 */

				/**
				 * [tJava_3 main ] start
				 */

				currentComponent = "tJava_3";

				tos_count_tJava_3++;

				/**
				 * [tJava_3 main ] stop
				 */

				/**
				 * [tJava_3 process_data_begin ] start
				 */

				currentComponent = "tJava_3";

				/**
				 * [tJava_3 process_data_begin ] stop
				 */

				/**
				 * [tJava_3 process_data_end ] start
				 */

				currentComponent = "tJava_3";

				/**
				 * [tJava_3 process_data_end ] stop
				 */

				/**
				 * [tJava_3 end ] start
				 */

				currentComponent = "tJava_3";

				ok_Hash.put("tJava_3", true);
				end_Hash.put("tJava_3", System.currentTimeMillis());

				tWarn_12Process(globalMap);

				/**
				 * [tJava_3 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_3 finally ] start
				 */

				currentComponent = "tJava_3";

				/**
				 * [tJava_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_3_SUBPROCESS_STATE", 1);
	}

	public void tWarn_12Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tWarn_12_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tWarn_12 begin ] start
				 */

				ok_Hash.put("tWarn_12", false);
				start_Hash.put("tWarn_12", System.currentTimeMillis());

				currentComponent = "tWarn_12";

				int tos_count_tWarn_12 = 0;

				/**
				 * [tWarn_12 begin ] stop
				 */

				/**
				 * [tWarn_12 main ] start
				 */

				currentComponent = "tWarn_12";

				try {

					resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_12", "", Thread.currentThread().getId() + "", "ERROR",
							"", "Validation KO. Check file : " + context.LogPath + globalMap.get("dateError")
									+ "_ERROR_" + ((String) globalMap.get("tFileList_1_CURRENT_FILE")),
							"", "");
					talendLogs_LOGS.addMessage("tWarn", "tWarn_12", 5,
							"Validation KO. Check file : " + context.LogPath + globalMap.get("dateError") + "_ERROR_"
									+ ((String) globalMap.get("tFileList_1_CURRENT_FILE")),
							4);
					talendLogs_LOGSProcess(globalMap);
					globalMap.put("tWarn_12_WARN_MESSAGES",
							"Validation KO. Check file : " + context.LogPath + globalMap.get("dateError") + "_ERROR_"
									+ ((String) globalMap.get("tFileList_1_CURRENT_FILE")));
					globalMap.put("tWarn_12_WARN_PRIORITY", 5);
					globalMap.put("tWarn_12_WARN_CODE", 4);

				} catch (Exception e_tWarn_12) {
					logIgnoredError(String.format("tWarn_12 - tWarn failed to log message due to internal error: %s",
							e_tWarn_12), e_tWarn_12);
				}

				tos_count_tWarn_12++;

				/**
				 * [tWarn_12 main ] stop
				 */

				/**
				 * [tWarn_12 process_data_begin ] start
				 */

				currentComponent = "tWarn_12";

				/**
				 * [tWarn_12 process_data_begin ] stop
				 */

				/**
				 * [tWarn_12 process_data_end ] start
				 */

				currentComponent = "tWarn_12";

				/**
				 * [tWarn_12 process_data_end ] stop
				 */

				/**
				 * [tWarn_12 end ] start
				 */

				currentComponent = "tWarn_12";

				ok_Hash.put("tWarn_12", true);
				end_Hash.put("tWarn_12", System.currentTimeMillis());

				tWarn_13Process(globalMap);

				/**
				 * [tWarn_12 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tWarn_12 finally ] start
				 */

				currentComponent = "tWarn_12";

				/**
				 * [tWarn_12 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tWarn_12_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_DEV_MASTERFILE_INTEGRATION_BDD = new byte[0];
		static byte[] commonByteArray_DEV_MASTERFILE_INTEGRATION_BDD = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_MASTERFILE_INTEGRATION_BDD) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tWarn_13Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tWarn_13_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();

				/**
				 * [tRunJob_3 begin ] start
				 */

				ok_Hash.put("tRunJob_3", false);
				start_Hash.put("tRunJob_3", System.currentTimeMillis());

				currentComponent = "tRunJob_3";

				int tos_count_tRunJob_3 = 0;

				/**
				 * [tRunJob_3 begin ] stop
				 */

				/**
				 * [tWarn_13 begin ] start
				 */

				ok_Hash.put("tWarn_13", false);
				start_Hash.put("tWarn_13", System.currentTimeMillis());

				currentComponent = "tWarn_13";

				int tos_count_tWarn_13 = 0;

				/**
				 * [tWarn_13 begin ] stop
				 */

				/**
				 * [tWarn_13 main ] start
				 */

				currentComponent = "tWarn_13";

				try {

					resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_13", "", Thread.currentThread().getId() + "", "ERROR",
							"", "Job en erreur", "", "");
					talendLogs_LOGS.addMessage("tWarn", "tWarn_13", 5, "Job en erreur", 4);
					talendLogs_LOGSProcess(globalMap);
					globalMap.put("tWarn_13_WARN_MESSAGES", "Job en erreur");
					globalMap.put("tWarn_13_WARN_PRIORITY", 5);
					globalMap.put("tWarn_13_WARN_CODE", 4);

				} catch (Exception e_tWarn_13) {
					logIgnoredError(String.format("tWarn_13 - tWarn failed to log message due to internal error: %s",
							e_tWarn_13), e_tWarn_13);
				}

				tos_count_tWarn_13++;

				/**
				 * [tWarn_13 main ] stop
				 */

				/**
				 * [tWarn_13 process_data_begin ] start
				 */

				currentComponent = "tWarn_13";

				/**
				 * [tWarn_13 process_data_begin ] stop
				 */

				/**
				 * [tRunJob_3 main ] start
				 */

				currentComponent = "tRunJob_3";

				java.util.List<String> paraList_tRunJob_3 = new java.util.ArrayList<String>();

				paraList_tRunJob_3.add("--father_pid=" + pid);

				paraList_tRunJob_3.add("--root_pid=" + rootPid);

				paraList_tRunJob_3.add("--father_node=tRunJob_3");

				paraList_tRunJob_3.add("--context=Default");

				if (enableLogStash) {
					paraList_tRunJob_3.add("--monitoring=" + enableLogStash);
				}

				// for feature:10589

				paraList_tRunJob_3.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_3.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_3 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_3 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_3".equals(tRunJobName_tRunJob_3) && childResumePath_tRunJob_3 != null) {
					paraList_tRunJob_3.add("--resuming_checkpoint_path="
							+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_3.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_3");

				java.util.Map<String, Object> parentContextMap_tRunJob_3 = new java.util.HashMap<String, Object>();

				Object obj_tRunJob_3 = null;

				obj_tRunJob_3 = "Error validation master file";
				if (obj_tRunJob_3 != null) {
					paraList_tRunJob_3
							.add("--context_param Subject=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
				} else {
					paraList_tRunJob_3.add(
							"--context_param Subject=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				parentContextMap_tRunJob_3.put("Subject", obj_tRunJob_3);

				obj_tRunJob_3 = "Validation occured with errors. Please check error file";
				if (obj_tRunJob_3 != null) {
					paraList_tRunJob_3
							.add("--context_param Content=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
				} else {
					paraList_tRunJob_3.add(
							"--context_param Content=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				parentContextMap_tRunJob_3.put("Content", obj_tRunJob_3);

				obj_tRunJob_3 = context.LogPath + globalMap.get("dateError") + "_ERROR_"
						+ ((String) globalMap.get("tFileList_1_CURRENT_FILE"));
				if (obj_tRunJob_3 != null) {
					paraList_tRunJob_3.add(
							"--context_param AttachmentsList=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
				} else {
					paraList_tRunJob_3.add("--context_param AttachmentsList="
							+ NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				parentContextMap_tRunJob_3.put("AttachmentsList", obj_tRunJob_3);

				obj_tRunJob_3 = routines.SharedRecipient.recipient;
				if (obj_tRunJob_3 != null) {
					paraList_tRunJob_3
							.add("--context_param ToAddress=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
				} else {
					paraList_tRunJob_3.add(
							"--context_param ToAddress=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				parentContextMap_tRunJob_3.put("ToAddress", obj_tRunJob_3);

				dev.sendmailoffice365_0_1.SendMailOffice365 childJob_tRunJob_3 = new dev.sendmailoffice365_0_1.SendMailOffice365();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_3 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_3) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_3 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_3 : talendDataSources_tRunJob_3
							.entrySet()) {
						dataSources_tRunJob_3.put(talendDataSourceEntry_tRunJob_3.getKey(),
								talendDataSourceEntry_tRunJob_3.getValue().getRawDataSource());
					}
					childJob_tRunJob_3.setDataSources(dataSources_tRunJob_3);
				}

				childJob_tRunJob_3.parentContextMap = parentContextMap_tRunJob_3;

				String[][] childReturn_tRunJob_3 = childJob_tRunJob_3
						.runJob((String[]) paraList_tRunJob_3.toArray(new String[paraList_tRunJob_3.size()]));

				errorCode = childJob_tRunJob_3.getErrorCode();

				if (childJob_tRunJob_3.getErrorCode() == null) {
					globalMap.put("tRunJob_3_CHILD_RETURN_CODE",
							childJob_tRunJob_3.getStatus() != null && ("failure").equals(childJob_tRunJob_3.getStatus())
									? 1
									: 0);
				} else {
					globalMap.put("tRunJob_3_CHILD_RETURN_CODE", childJob_tRunJob_3.getErrorCode());
				}
				if (childJob_tRunJob_3.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_3_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_3.getExceptionStackTrace());
				}

				if (childJob_tRunJob_3.getErrorCode() != null || ("failure").equals(childJob_tRunJob_3.getStatus())) {
					java.lang.Exception ce_tRunJob_3 = childJob_tRunJob_3.getException();
					throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_3 != null)
							? (ce_tRunJob_3.getClass().getName() + ": " + ce_tRunJob_3.getMessage())
							: ""));
				}

				tos_count_tRunJob_3++;

				/**
				 * [tRunJob_3 main ] stop
				 */

				/**
				 * [tRunJob_3 process_data_begin ] start
				 */

				currentComponent = "tRunJob_3";

				/**
				 * [tRunJob_3 process_data_begin ] stop
				 */

				/**
				 * [tRunJob_3 process_data_end ] start
				 */

				currentComponent = "tRunJob_3";

				/**
				 * [tRunJob_3 process_data_end ] stop
				 */

				/**
				 * [tWarn_13 process_data_end ] start
				 */

				currentComponent = "tWarn_13";

				/**
				 * [tWarn_13 process_data_end ] stop
				 */

				/**
				 * [tWarn_13 end ] start
				 */

				currentComponent = "tWarn_13";

				ok_Hash.put("tWarn_13", true);
				end_Hash.put("tWarn_13", System.currentTimeMillis());

				/**
				 * [tWarn_13 end ] stop
				 */

				/**
				 * [tRunJob_3 end ] start
				 */

				currentComponent = "tRunJob_3";

				ok_Hash.put("tRunJob_3", true);
				end_Hash.put("tRunJob_3", System.currentTimeMillis());

				/**
				 * [tRunJob_3 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tWarn_13 finally ] start
				 */

				currentComponent = "tWarn_13";

				/**
				 * [tWarn_13 finally ] stop
				 */

				/**
				 * [tRunJob_3 finally ] start
				 */

				currentComponent = "tRunJob_3";

				/**
				 * [tRunJob_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tWarn_13_SUBPROCESS_STATE", 1);
	}

	public void tFileList_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileList_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tFileList_1 begin ] start
				 */

				int NB_ITERATE_tSleep_4 = 0; // for statistics

				ok_Hash.put("tFileList_1", false);
				start_Hash.put("tFileList_1", System.currentTimeMillis());

				currentComponent = "tFileList_1";

				int tos_count_tFileList_1 = 0;

				String directory_tFileList_1 = context.IntegrationPath;
				final java.util.List<String> maskList_tFileList_1 = new java.util.ArrayList<String>();
				final java.util.List<java.util.regex.Pattern> patternList_tFileList_1 = new java.util.ArrayList<java.util.regex.Pattern>();
				maskList_tFileList_1.add("*.xlsx");
				for (final String filemask_tFileList_1 : maskList_tFileList_1) {
					String filemask_compile_tFileList_1 = filemask_tFileList_1;

					filemask_compile_tFileList_1 = org.apache.oro.text.GlobCompiler.globToPerl5(
							filemask_tFileList_1.toCharArray(), org.apache.oro.text.GlobCompiler.DEFAULT_MASK);

					java.util.regex.Pattern fileNamePattern_tFileList_1 = java.util.regex.Pattern
							.compile(filemask_compile_tFileList_1);
					patternList_tFileList_1.add(fileNamePattern_tFileList_1);
				}
				int NB_FILEtFileList_1 = 0;

				final boolean case_sensitive_tFileList_1 = true;
				final java.util.List<java.io.File> list_tFileList_1 = new java.util.ArrayList<java.io.File>();
				final java.util.Set<String> filePath_tFileList_1 = new java.util.HashSet<String>();
				java.io.File file_tFileList_1 = new java.io.File(directory_tFileList_1);

				file_tFileList_1.listFiles(new java.io.FilenameFilter() {
					public boolean accept(java.io.File dir, String name) {
						java.io.File file = new java.io.File(dir, name);
						if (!file.isDirectory()) {

							String fileName_tFileList_1 = file.getName();
							for (final java.util.regex.Pattern fileNamePattern_tFileList_1 : patternList_tFileList_1) {
								if (fileNamePattern_tFileList_1.matcher(fileName_tFileList_1).matches()) {
									if (!filePath_tFileList_1.contains(file.getAbsolutePath())) {
										list_tFileList_1.add(file);
										filePath_tFileList_1.add(file.getAbsolutePath());
									}
								}
							}
						}
						return true;
					}
				});
				java.util.Collections.sort(list_tFileList_1);

				for (int i_tFileList_1 = 0; i_tFileList_1 < list_tFileList_1.size(); i_tFileList_1++) {
					java.io.File files_tFileList_1 = list_tFileList_1.get(i_tFileList_1);
					String fileName_tFileList_1 = files_tFileList_1.getName();

					String currentFileName_tFileList_1 = files_tFileList_1.getName();
					String currentFilePath_tFileList_1 = files_tFileList_1.getAbsolutePath();
					String currentFileDirectory_tFileList_1 = files_tFileList_1.getParent();
					String currentFileExtension_tFileList_1 = null;

					if (files_tFileList_1.getName().contains(".") && files_tFileList_1.isFile()) {
						currentFileExtension_tFileList_1 = files_tFileList_1.getName()
								.substring(files_tFileList_1.getName().lastIndexOf(".") + 1);
					} else {
						currentFileExtension_tFileList_1 = "";
					}

					NB_FILEtFileList_1++;
					globalMap.put("tFileList_1_CURRENT_FILE", currentFileName_tFileList_1);
					globalMap.put("tFileList_1_CURRENT_FILEPATH", currentFilePath_tFileList_1);
					globalMap.put("tFileList_1_CURRENT_FILEDIRECTORY", currentFileDirectory_tFileList_1);
					globalMap.put("tFileList_1_CURRENT_FILEEXTENSION", currentFileExtension_tFileList_1);
					globalMap.put("tFileList_1_NB_FILE", NB_FILEtFileList_1);

					/**
					 * [tFileList_1 begin ] stop
					 */

					/**
					 * [tFileList_1 main ] start
					 */

					currentComponent = "tFileList_1";

					tos_count_tFileList_1++;

					/**
					 * [tFileList_1 main ] stop
					 */

					/**
					 * [tFileList_1 process_data_begin ] start
					 */

					currentComponent = "tFileList_1";

					/**
					 * [tFileList_1 process_data_begin ] stop
					 */
					NB_ITERATE_tSleep_4++;

					/**
					 * [tSleep_4 begin ] start
					 */

					ok_Hash.put("tSleep_4", false);
					start_Hash.put("tSleep_4", System.currentTimeMillis());

					currentComponent = "tSleep_4";

					int tos_count_tSleep_4 = 0;

					/**
					 * [tSleep_4 begin ] stop
					 */

					/**
					 * [tSleep_4 main ] start
					 */

					currentComponent = "tSleep_4";

					Thread.sleep((1) * 1000);

					tos_count_tSleep_4++;

					/**
					 * [tSleep_4 main ] stop
					 */

					/**
					 * [tSleep_4 process_data_begin ] start
					 */

					currentComponent = "tSleep_4";

					/**
					 * [tSleep_4 process_data_begin ] stop
					 */

					/**
					 * [tSleep_4 process_data_end ] start
					 */

					currentComponent = "tSleep_4";

					/**
					 * [tSleep_4 process_data_end ] stop
					 */

					/**
					 * [tSleep_4 end ] start
					 */

					currentComponent = "tSleep_4";

					ok_Hash.put("tSleep_4", true);
					end_Hash.put("tSleep_4", System.currentTimeMillis());

					tWarn_1Process(globalMap);

					/**
					 * [tSleep_4 end ] stop
					 */

					/**
					 * [tFileList_1 process_data_end ] start
					 */

					currentComponent = "tFileList_1";

					/**
					 * [tFileList_1 process_data_end ] stop
					 */

					/**
					 * [tFileList_1 end ] start
					 */

					currentComponent = "tFileList_1";

				}
				globalMap.put("tFileList_1_NB_FILE", NB_FILEtFileList_1);

				ok_Hash.put("tFileList_1", true);
				end_Hash.put("tFileList_1", System.currentTimeMillis());

				/**
				 * [tFileList_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileList_1 finally ] start
				 */

				currentComponent = "tFileList_1";

				/**
				 * [tFileList_1 finally ] stop
				 */

				/**
				 * [tSleep_4 finally ] start
				 */

				currentComponent = "tSleep_4";

				/**
				 * [tSleep_4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileList_1_SUBPROCESS_STATE", 1);
	}

	public void tWarn_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tWarn_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tWarn_1 begin ] start
				 */

				ok_Hash.put("tWarn_1", false);
				start_Hash.put("tWarn_1", System.currentTimeMillis());

				currentComponent = "tWarn_1";

				int tos_count_tWarn_1 = 0;

				/**
				 * [tWarn_1 begin ] stop
				 */

				/**
				 * [tWarn_1 main ] start
				 */

				currentComponent = "tWarn_1";

				try {

					resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_1", "", Thread.currentThread().getId() + "", "INFO",
							"", "Initialization fichier : " + ((String) globalMap.get("tFileList_1_CURRENT_FILE")), "",
							"");
					talendLogs_LOGS.addMessage("tWarn", "tWarn_1", 3,
							"Initialization fichier : " + ((String) globalMap.get("tFileList_1_CURRENT_FILE")), 3);
					talendLogs_LOGSProcess(globalMap);
					globalMap.put("tWarn_1_WARN_MESSAGES",
							"Initialization fichier : " + ((String) globalMap.get("tFileList_1_CURRENT_FILE")));
					globalMap.put("tWarn_1_WARN_PRIORITY", 3);
					globalMap.put("tWarn_1_WARN_CODE", 3);

				} catch (Exception e_tWarn_1) {
					logIgnoredError(
							String.format("tWarn_1 - tWarn failed to log message due to internal error: %s", e_tWarn_1),
							e_tWarn_1);
				}

				tos_count_tWarn_1++;

				/**
				 * [tWarn_1 main ] stop
				 */

				/**
				 * [tWarn_1 process_data_begin ] start
				 */

				currentComponent = "tWarn_1";

				/**
				 * [tWarn_1 process_data_begin ] stop
				 */

				/**
				 * [tWarn_1 process_data_end ] start
				 */

				currentComponent = "tWarn_1";

				/**
				 * [tWarn_1 process_data_end ] stop
				 */

				/**
				 * [tWarn_1 end ] start
				 */

				currentComponent = "tWarn_1";

				ok_Hash.put("tWarn_1", true);
				end_Hash.put("tWarn_1", System.currentTimeMillis());

				tRunJob_7Process(globalMap);

				/**
				 * [tWarn_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tWarn_1 finally ] start
				 */

				currentComponent = "tWarn_1";

				/**
				 * [tWarn_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tWarn_1_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRunJob_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_7 begin ] start
				 */

				ok_Hash.put("tRunJob_7", false);
				start_Hash.put("tRunJob_7", System.currentTimeMillis());

				currentComponent = "tRunJob_7";

				int tos_count_tRunJob_7 = 0;

				/**
				 * [tRunJob_7 begin ] stop
				 */

				/**
				 * [tRunJob_7 main ] start
				 */

				currentComponent = "tRunJob_7";

				java.util.List<String> paraList_tRunJob_7 = new java.util.ArrayList<String>();

				paraList_tRunJob_7.add("--father_pid=" + pid);

				paraList_tRunJob_7.add("--root_pid=" + rootPid);

				paraList_tRunJob_7.add("--father_node=tRunJob_7");

				paraList_tRunJob_7.add("--context=Default");

				if (enableLogStash) {
					paraList_tRunJob_7.add("--monitoring=" + enableLogStash);
				}

				// for feature:10589

				paraList_tRunJob_7.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_7.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_7 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_7 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_7".equals(tRunJobName_tRunJob_7) && childResumePath_tRunJob_7 != null) {
					paraList_tRunJob_7.add("--resuming_checkpoint_path="
							+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_7.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_7");

				java.util.Map<String, Object> parentContextMap_tRunJob_7 = new java.util.HashMap<String, Object>();

				context.synchronizeContext();
				class ContextProcessor_tRunJob_7 {
					private void transmitContext_0() {
						parentContextMap_tRunJob_7.put("IntegrationPath", context.IntegrationPath);
						paraList_tRunJob_7.add("--context_type " + "IntegrationPath" + "=" + "id_String");
						parentContextMap_tRunJob_7.put("LogPath", context.LogPath);
						paraList_tRunJob_7.add("--context_type " + "LogPath" + "=" + "id_String");
						parentContextMap_tRunJob_7.put("insertSQLMode", context.insertSQLMode);
						paraList_tRunJob_7.add("--context_type " + "insertSQLMode" + "=" + "id_Boolean");
						parentContextMap_tRunJob_7.put("new1", context.new1);
						paraList_tRunJob_7.add("--context_type " + "new1" + "=" + "id_String");
						parentContextMap_tRunJob_7.put("SQLSERVER_AdditionalParams",
								context.SQLSERVER_AdditionalParams);
						paraList_tRunJob_7.add("--context_type " + "SQLSERVER_AdditionalParams" + "=" + "id_String");
						parentContextMap_tRunJob_7.put("SQLSERVER_Database", context.SQLSERVER_Database);
						paraList_tRunJob_7.add("--context_type " + "SQLSERVER_Database" + "=" + "id_String");
						parentContextMap_tRunJob_7.put("SQLSERVER_Login", context.SQLSERVER_Login);
						paraList_tRunJob_7.add("--context_type " + "SQLSERVER_Login" + "=" + "id_String");
						parentContextMap_tRunJob_7.put("SQLSERVER_Password", context.SQLSERVER_Password);
						paraList_tRunJob_7.add("--context_type " + "SQLSERVER_Password" + "=" + "id_Password");
						parentContextMap_tRunJob_7.put("SQLSERVER_Port", context.SQLSERVER_Port);
						paraList_tRunJob_7.add("--context_type " + "SQLSERVER_Port" + "=" + "id_String");
						parentContextMap_tRunJob_7.put("SQLSERVER_Schema", context.SQLSERVER_Schema);
						paraList_tRunJob_7.add("--context_type " + "SQLSERVER_Schema" + "=" + "id_String");
						parentContextMap_tRunJob_7.put("SQLSERVER_Server", context.SQLSERVER_Server);
						paraList_tRunJob_7.add("--context_type " + "SQLSERVER_Server" + "=" + "id_String");
						parentContextMap_tRunJob_7.put("SQLSERVER_LOG_AdditionalParams",
								context.SQLSERVER_LOG_AdditionalParams);
						paraList_tRunJob_7
								.add("--context_type " + "SQLSERVER_LOG_AdditionalParams" + "=" + "id_String");
						parentContextMap_tRunJob_7.put("SQLSERVER_LOG_Database", context.SQLSERVER_LOG_Database);
						paraList_tRunJob_7.add("--context_type " + "SQLSERVER_LOG_Database" + "=" + "id_String");
						parentContextMap_tRunJob_7.put("SQLSERVER_LOG_Login", context.SQLSERVER_LOG_Login);
						paraList_tRunJob_7.add("--context_type " + "SQLSERVER_LOG_Login" + "=" + "id_String");
						parentContextMap_tRunJob_7.put("SQLSERVER_LOG_Password", context.SQLSERVER_LOG_Password);
						paraList_tRunJob_7.add("--context_type " + "SQLSERVER_LOG_Password" + "=" + "id_Password");
						parentContextMap_tRunJob_7.put("SQLSERVER_LOG_Port", context.SQLSERVER_LOG_Port);
						paraList_tRunJob_7.add("--context_type " + "SQLSERVER_LOG_Port" + "=" + "id_String");
						parentContextMap_tRunJob_7.put("SQLSERVER_LOG_Schema", context.SQLSERVER_LOG_Schema);
						paraList_tRunJob_7.add("--context_type " + "SQLSERVER_LOG_Schema" + "=" + "id_String");
						parentContextMap_tRunJob_7.put("SQLSERVER_LOG_Server", context.SQLSERVER_LOG_Server);
						paraList_tRunJob_7.add("--context_type " + "SQLSERVER_LOG_Server" + "=" + "id_String");
						parentContextMap_tRunJob_7.put("SQLSERVERSCHEMA_MASTERFILE_AdditionalParams",
								context.SQLSERVERSCHEMA_MASTERFILE_AdditionalParams);
						paraList_tRunJob_7.add(
								"--context_type " + "SQLSERVERSCHEMA_MASTERFILE_AdditionalParams" + "=" + "id_String");
						parentContextMap_tRunJob_7.put("SQLSERVERSCHEMA_MASTERFILE_Database",
								context.SQLSERVERSCHEMA_MASTERFILE_Database);
						paraList_tRunJob_7
								.add("--context_type " + "SQLSERVERSCHEMA_MASTERFILE_Database" + "=" + "id_String");
						parentContextMap_tRunJob_7.put("SQLSERVERSCHEMA_MASTERFILE_Login",
								context.SQLSERVERSCHEMA_MASTERFILE_Login);
						paraList_tRunJob_7
								.add("--context_type " + "SQLSERVERSCHEMA_MASTERFILE_Login" + "=" + "id_String");
						parentContextMap_tRunJob_7.put("SQLSERVERSCHEMA_MASTERFILE_Password",
								context.SQLSERVERSCHEMA_MASTERFILE_Password);
						paraList_tRunJob_7
								.add("--context_type " + "SQLSERVERSCHEMA_MASTERFILE_Password" + "=" + "id_Password");
						parentContextMap_tRunJob_7.put("SQLSERVERSCHEMA_MASTERFILE_Port",
								context.SQLSERVERSCHEMA_MASTERFILE_Port);
						paraList_tRunJob_7
								.add("--context_type " + "SQLSERVERSCHEMA_MASTERFILE_Port" + "=" + "id_String");
						parentContextMap_tRunJob_7.put("SQLSERVERSCHEMA_MASTERFILE_Schema",
								context.SQLSERVERSCHEMA_MASTERFILE_Schema);
						paraList_tRunJob_7
								.add("--context_type " + "SQLSERVERSCHEMA_MASTERFILE_Schema" + "=" + "id_String");
						parentContextMap_tRunJob_7.put("SQLSERVERSCHEMA_MASTERFILE_Server",
								context.SQLSERVERSCHEMA_MASTERFILE_Server);
						paraList_tRunJob_7
								.add("--context_type " + "SQLSERVERSCHEMA_MASTERFILE_Server" + "=" + "id_String");
					}

					public void transmitAllContext() {
						transmitContext_0();
					}
				}
				new ContextProcessor_tRunJob_7().transmitAllContext();
				java.util.Enumeration<?> propertyNames_tRunJob_7 = context.propertyNames();
				while (propertyNames_tRunJob_7.hasMoreElements()) {
					String key_tRunJob_7 = (String) propertyNames_tRunJob_7.nextElement();
					Object value_tRunJob_7 = (Object) context.get(key_tRunJob_7);
					if (value_tRunJob_7 != null) {
						paraList_tRunJob_7.add("--context_param " + key_tRunJob_7 + "=" + value_tRunJob_7);
					} else {
						paraList_tRunJob_7.add("--context_param " + key_tRunJob_7 + "="
								+ NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
					}

				}

				Object obj_tRunJob_7 = null;

				obj_tRunJob_7 = ((String) globalMap.get("tFileList_1_CURRENT_FILE"));
				if (obj_tRunJob_7 != null) {
					paraList_tRunJob_7
							.add("--context_param ExcelFileName=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_7));
				} else {
					paraList_tRunJob_7.add("--context_param ExcelFileName="
							+ NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				parentContextMap_tRunJob_7.put("ExcelFileName", obj_tRunJob_7);

				dev.buy_search_recipient_0_1.BUY_SEARCH_RECIPIENT childJob_tRunJob_7 = new dev.buy_search_recipient_0_1.BUY_SEARCH_RECIPIENT();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_7 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_7) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_7 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_7 : talendDataSources_tRunJob_7
							.entrySet()) {
						dataSources_tRunJob_7.put(talendDataSourceEntry_tRunJob_7.getKey(),
								talendDataSourceEntry_tRunJob_7.getValue().getRawDataSource());
					}
					childJob_tRunJob_7.setDataSources(dataSources_tRunJob_7);
				}

				childJob_tRunJob_7.parentContextMap = parentContextMap_tRunJob_7;

				String[][] childReturn_tRunJob_7 = childJob_tRunJob_7
						.runJob((String[]) paraList_tRunJob_7.toArray(new String[paraList_tRunJob_7.size()]));

				errorCode = childJob_tRunJob_7.getErrorCode();

				if (childJob_tRunJob_7.getErrorCode() == null) {
					globalMap.put("tRunJob_7_CHILD_RETURN_CODE",
							childJob_tRunJob_7.getStatus() != null && ("failure").equals(childJob_tRunJob_7.getStatus())
									? 1
									: 0);
				} else {
					globalMap.put("tRunJob_7_CHILD_RETURN_CODE", childJob_tRunJob_7.getErrorCode());
				}
				if (childJob_tRunJob_7.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_7_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_7.getExceptionStackTrace());
				}

				if (childJob_tRunJob_7.getErrorCode() != null || ("failure").equals(childJob_tRunJob_7.getStatus())) {
					java.lang.Exception ce_tRunJob_7 = childJob_tRunJob_7.getException();
					throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_7 != null)
							? (ce_tRunJob_7.getClass().getName() + ": " + ce_tRunJob_7.getMessage())
							: ""));
				}

				tos_count_tRunJob_7++;

				/**
				 * [tRunJob_7 main ] stop
				 */

				/**
				 * [tRunJob_7 process_data_begin ] start
				 */

				currentComponent = "tRunJob_7";

				/**
				 * [tRunJob_7 process_data_begin ] stop
				 */

				/**
				 * [tRunJob_7 process_data_end ] start
				 */

				currentComponent = "tRunJob_7";

				/**
				 * [tRunJob_7 process_data_end ] stop
				 */

				/**
				 * [tRunJob_7 end ] start
				 */

				currentComponent = "tRunJob_7";

				ok_Hash.put("tRunJob_7", true);
				end_Hash.put("tRunJob_7", System.currentTimeMillis());

				tWarn_4Process(globalMap);

				/**
				 * [tRunJob_7 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_7 finally ] start
				 */

				currentComponent = "tRunJob_7";

				/**
				 * [tRunJob_7 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_7_SUBPROCESS_STATE", 1);
	}

	public void tWarn_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tWarn_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tWarn_4 begin ] start
				 */

				ok_Hash.put("tWarn_4", false);
				start_Hash.put("tWarn_4", System.currentTimeMillis());

				currentComponent = "tWarn_4";

				int tos_count_tWarn_4 = 0;

				/**
				 * [tWarn_4 begin ] stop
				 */

				/**
				 * [tWarn_4 main ] start
				 */

				currentComponent = "tWarn_4";

				try {

					resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_4", "", Thread.currentThread().getId() + "", "INFO",
							"", "Search recipient OK", "", "");
					talendLogs_LOGS.addMessage("tWarn", "tWarn_4", 3, "Search recipient OK", 3);
					talendLogs_LOGSProcess(globalMap);
					globalMap.put("tWarn_4_WARN_MESSAGES", "Search recipient OK");
					globalMap.put("tWarn_4_WARN_PRIORITY", 3);
					globalMap.put("tWarn_4_WARN_CODE", 3);

				} catch (Exception e_tWarn_4) {
					logIgnoredError(
							String.format("tWarn_4 - tWarn failed to log message due to internal error: %s", e_tWarn_4),
							e_tWarn_4);
				}

				tos_count_tWarn_4++;

				/**
				 * [tWarn_4 main ] stop
				 */

				/**
				 * [tWarn_4 process_data_begin ] start
				 */

				currentComponent = "tWarn_4";

				/**
				 * [tWarn_4 process_data_begin ] stop
				 */

				/**
				 * [tWarn_4 process_data_end ] start
				 */

				currentComponent = "tWarn_4";

				/**
				 * [tWarn_4 process_data_end ] stop
				 */

				/**
				 * [tWarn_4 end ] start
				 */

				currentComponent = "tWarn_4";

				ok_Hash.put("tWarn_4", true);
				end_Hash.put("tWarn_4", System.currentTimeMillis());

				tJava_1Process(globalMap);

				/**
				 * [tWarn_4 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tWarn_4 finally ] start
				 */

				currentComponent = "tWarn_4";

				/**
				 * [tWarn_4 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tWarn_4_SUBPROCESS_STATE", 1);
	}

	public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tJava_1 begin ] start
				 */

				ok_Hash.put("tJava_1", false);
				start_Hash.put("tJava_1", System.currentTimeMillis());

				currentComponent = "tJava_1";

				int tos_count_tJava_1 = 0;

				System.out.println("Return from Search Recipient");

				System.out.println(routines.SharedRecipient.recipient);

				/**
				 * [tJava_1 begin ] stop
				 */

				/**
				 * [tJava_1 main ] start
				 */

				currentComponent = "tJava_1";

				tos_count_tJava_1++;

				/**
				 * [tJava_1 main ] stop
				 */

				/**
				 * [tJava_1 process_data_begin ] start
				 */

				currentComponent = "tJava_1";

				/**
				 * [tJava_1 process_data_begin ] stop
				 */

				/**
				 * [tJava_1 process_data_end ] start
				 */

				currentComponent = "tJava_1";

				/**
				 * [tJava_1 process_data_end ] stop
				 */

				/**
				 * [tJava_1 end ] start
				 */

				currentComponent = "tJava_1";

				ok_Hash.put("tJava_1", true);
				end_Hash.put("tJava_1", System.currentTimeMillis());

				tFileProperties_1Process(globalMap);

				/**
				 * [tJava_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_1 finally ] start
				 */

				currentComponent = "tJava_1";

				/**
				 * [tJava_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_DEV_MASTERFILE_INTEGRATION_BDD = new byte[0];
		static byte[] commonByteArray_DEV_MASTERFILE_INTEGRATION_BDD = new byte[0];

		public String abs_path;

		public String getAbs_path() {
			return this.abs_path;
		}

		public String dirname;

		public String getDirname() {
			return this.dirname;
		}

		public String basename;

		public String getBasename() {
			return this.basename;
		}

		public String mode_string;

		public String getMode_string() {
			return this.mode_string;
		}

		public Long size;

		public Long getSize() {
			return this.size;
		}

		public Long mtime;

		public Long getMtime() {
			return this.mtime;
		}

		public String mtime_string;

		public String getMtime_string() {
			return this.mtime_string;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEV_MASTERFILE_INTEGRATION_BDD.length) {
					if (length < 1024 && commonByteArray_DEV_MASTERFILE_INTEGRATION_BDD.length == 0) {
						commonByteArray_DEV_MASTERFILE_INTEGRATION_BDD = new byte[1024];
					} else {
						commonByteArray_DEV_MASTERFILE_INTEGRATION_BDD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEV_MASTERFILE_INTEGRATION_BDD, 0, length);
				strReturn = new String(commonByteArray_DEV_MASTERFILE_INTEGRATION_BDD, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_MASTERFILE_INTEGRATION_BDD) {

				try {

					int length = 0;

					this.abs_path = readString(dis);

					this.dirname = readString(dis);

					this.basename = readString(dis);

					this.mode_string = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.size = null;
					} else {
						this.size = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.mtime = null;
					} else {
						this.mtime = dis.readLong();
					}

					this.mtime_string = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.abs_path, dos);

				// String

				writeString(this.dirname, dos);

				// String

				writeString(this.basename, dos);

				// String

				writeString(this.mode_string, dos);

				// Long

				if (this.size == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.size);
				}

				// Long

				if (this.mtime == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.mtime);
				}

				// String

				writeString(this.mtime_string, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("abs_path=" + abs_path);
			sb.append(",dirname=" + dirname);
			sb.append(",basename=" + basename);
			sb.append(",mode_string=" + mode_string);
			sb.append(",size=" + String.valueOf(size));
			sb.append(",mtime=" + String.valueOf(mtime));
			sb.append(",mtime_string=" + mtime_string);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileProperties_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileProperties_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();

				/**
				 * [tJavaRow_1 begin ] start
				 */

				ok_Hash.put("tJavaRow_1", false);
				start_Hash.put("tJavaRow_1", System.currentTimeMillis());

				currentComponent = "tJavaRow_1";

				int tos_count_tJavaRow_1 = 0;

				int nb_line_tJavaRow_1 = 0;

				/**
				 * [tJavaRow_1 begin ] stop
				 */

				/**
				 * [tFileProperties_1 begin ] start
				 */

				ok_Hash.put("tFileProperties_1", false);
				start_Hash.put("tFileProperties_1", System.currentTimeMillis());

				currentComponent = "tFileProperties_1";

				int tos_count_tFileProperties_1 = 0;

				java.io.File file_tFileProperties_1 = new java.io.File(
						context.IntegrationPath + ((String) globalMap.get("tFileList_1_CURRENT_FILE")));
				row1 = new row1Struct();

				if (file_tFileProperties_1.exists()) {
					row1.abs_path = file_tFileProperties_1.getAbsolutePath();
					row1.dirname = file_tFileProperties_1.getParent();
					row1.basename = file_tFileProperties_1.getName();
					String r_tFileProperties_1 = (file_tFileProperties_1.canRead()) ? "r" : "-";
					String w_tFileProperties_1 = (file_tFileProperties_1.canWrite()) ? "w" : "-";
					// String x_ = (file_.canExecute())?"x":"-"; /*since JDK1.6*/
					row1.mode_string = r_tFileProperties_1 + w_tFileProperties_1;
					row1.size = file_tFileProperties_1.length();
					row1.mtime = file_tFileProperties_1.lastModified();
					row1.mtime_string = (new java.util.Date(file_tFileProperties_1.lastModified())).toString();

				}

				/**
				 * [tFileProperties_1 begin ] stop
				 */

				/**
				 * [tFileProperties_1 main ] start
				 */

				currentComponent = "tFileProperties_1";

				tos_count_tFileProperties_1++;

				/**
				 * [tFileProperties_1 main ] stop
				 */

				/**
				 * [tFileProperties_1 process_data_begin ] start
				 */

				currentComponent = "tFileProperties_1";

				/**
				 * [tFileProperties_1 process_data_begin ] stop
				 */

				/**
				 * [tJavaRow_1 main ] start
				 */

				currentComponent = "tJavaRow_1";

				// code sample:
//
// multiply by 2 the row identifier
// output_row.id = row1.id * 2;
//
// lowercase the name
// output_row.name = row1.name.toLowerCase();

				globalMap.put("fileSize", (long) row1.size);
				System.out.println(globalMap.get("fileSize"));

				nb_line_tJavaRow_1++;

				tos_count_tJavaRow_1++;

				/**
				 * [tJavaRow_1 main ] stop
				 */

				/**
				 * [tJavaRow_1 process_data_begin ] start
				 */

				currentComponent = "tJavaRow_1";

				/**
				 * [tJavaRow_1 process_data_begin ] stop
				 */

				/**
				 * [tJavaRow_1 process_data_end ] start
				 */

				currentComponent = "tJavaRow_1";

				/**
				 * [tJavaRow_1 process_data_end ] stop
				 */

				/**
				 * [tFileProperties_1 process_data_end ] start
				 */

				currentComponent = "tFileProperties_1";

				/**
				 * [tFileProperties_1 process_data_end ] stop
				 */

				/**
				 * [tFileProperties_1 end ] start
				 */

				currentComponent = "tFileProperties_1";

				ok_Hash.put("tFileProperties_1", true);
				end_Hash.put("tFileProperties_1", System.currentTimeMillis());

				/**
				 * [tFileProperties_1 end ] stop
				 */

				/**
				 * [tJavaRow_1 end ] start
				 */

				currentComponent = "tJavaRow_1";

				globalMap.put("tJavaRow_1_NB_LINE", nb_line_tJavaRow_1);

				ok_Hash.put("tJavaRow_1", true);
				end_Hash.put("tJavaRow_1", System.currentTimeMillis());

				if ((long) globalMap.get("fileSize") < 10000000) {

					tJava_2Process(globalMap);
				}

				if ((long) globalMap.get("fileSize") > 10000000) {

					tWarn_5Process(globalMap);
				}

				/**
				 * [tJavaRow_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileProperties_1 finally ] start
				 */

				currentComponent = "tFileProperties_1";

				/**
				 * [tFileProperties_1 finally ] stop
				 */

				/**
				 * [tJavaRow_1 finally ] start
				 */

				currentComponent = "tJavaRow_1";

				/**
				 * [tJavaRow_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileProperties_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tJava_2 begin ] start
				 */

				ok_Hash.put("tJava_2", false);
				start_Hash.put("tJava_2", System.currentTimeMillis());

				currentComponent = "tJava_2";

				int tos_count_tJava_2 = 0;

//context.ErrorDataEntity = "";

				/**
				 * [tJava_2 begin ] stop
				 */

				/**
				 * [tJava_2 main ] start
				 */

				currentComponent = "tJava_2";

				tos_count_tJava_2++;

				/**
				 * [tJava_2 main ] stop
				 */

				/**
				 * [tJava_2 process_data_begin ] start
				 */

				currentComponent = "tJava_2";

				/**
				 * [tJava_2 process_data_begin ] stop
				 */

				/**
				 * [tJava_2 process_data_end ] start
				 */

				currentComponent = "tJava_2";

				/**
				 * [tJava_2 process_data_end ] stop
				 */

				/**
				 * [tJava_2 end ] start
				 */

				currentComponent = "tJava_2";

				ok_Hash.put("tJava_2", true);
				end_Hash.put("tJava_2", System.currentTimeMillis());

				tWarn_7Process(globalMap);

				/**
				 * [tJava_2 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_2 finally ] start
				 */

				currentComponent = "tJava_2";

				/**
				 * [tJava_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}

	public void tWarn_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tWarn_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tWarn_7 begin ] start
				 */

				ok_Hash.put("tWarn_7", false);
				start_Hash.put("tWarn_7", System.currentTimeMillis());

				currentComponent = "tWarn_7";

				int tos_count_tWarn_7 = 0;

				/**
				 * [tWarn_7 begin ] stop
				 */

				/**
				 * [tWarn_7 main ] start
				 */

				currentComponent = "tWarn_7";

				try {

					resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_7", "", Thread.currentThread().getId() + "", "INFO",
							"", "File size : " + globalMap.get("fileSize"), "", "");
					talendLogs_LOGS.addMessage("tWarn", "tWarn_7", 3, "File size : " + globalMap.get("fileSize"), 3);
					talendLogs_LOGSProcess(globalMap);
					globalMap.put("tWarn_7_WARN_MESSAGES", "File size : " + globalMap.get("fileSize"));
					globalMap.put("tWarn_7_WARN_PRIORITY", 3);
					globalMap.put("tWarn_7_WARN_CODE", 3);

				} catch (Exception e_tWarn_7) {
					logIgnoredError(
							String.format("tWarn_7 - tWarn failed to log message due to internal error: %s", e_tWarn_7),
							e_tWarn_7);
				}

				tos_count_tWarn_7++;

				/**
				 * [tWarn_7 main ] stop
				 */

				/**
				 * [tWarn_7 process_data_begin ] start
				 */

				currentComponent = "tWarn_7";

				/**
				 * [tWarn_7 process_data_begin ] stop
				 */

				/**
				 * [tWarn_7 process_data_end ] start
				 */

				currentComponent = "tWarn_7";

				/**
				 * [tWarn_7 process_data_end ] stop
				 */

				/**
				 * [tWarn_7 end ] start
				 */

				currentComponent = "tWarn_7";

				ok_Hash.put("tWarn_7", true);
				end_Hash.put("tWarn_7", System.currentTimeMillis());

				tRunJob_1Process(globalMap);

				/**
				 * [tWarn_7 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tWarn_7 finally ] start
				 */

				currentComponent = "tWarn_7";

				/**
				 * [tWarn_7 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tWarn_7_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRunJob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_1 begin ] start
				 */

				ok_Hash.put("tRunJob_1", false);
				start_Hash.put("tRunJob_1", System.currentTimeMillis());

				currentComponent = "tRunJob_1";

				int tos_count_tRunJob_1 = 0;

				class DealChildJobLibrary_tRunJob_1 {

					public String replaceJarPathsFromCrcMap(String originalClassPathLine) throws java.lang.Exception {
						String classPathLine = "";
						String crcMapPath = new java.io.File("../crcMap").getCanonicalPath();
						if (isNeedAddLibsPath(crcMapPath)) {
							java.util.Map<String, String> crcMap = null;
							java.io.ObjectInputStream ois = new ObjectInputStream(
									new java.io.FileInputStream(crcMapPath));
							crcMap = (java.util.Map<String, String>) ois.readObject();
							ois.close();
							classPathLine = addLibsPath(originalClassPathLine, crcMap);
						} else {
							classPathLine = originalClassPathLine;
						}
						return classPathLine;
					}

					private boolean isNeedAddLibsPath(String crcMapPath) {
						if (!(new java.io.File(crcMapPath).exists())) {// when not use cache
							return false;
						}
						return true;
					}

					private String addLibsPath(String line, java.util.Map<String, String> crcMap) {
						for (java.util.Map.Entry<String, String> entry : crcMap.entrySet()) {
							line = adaptLibPaths(line, entry);
						}
						return line;
					}

					private String adaptLibPaths(String line, java.util.Map.Entry<String, String> entry) {
						String jarName = entry.getValue();
						String crc = entry.getKey();
						String libStringFinder = "../lib/" + jarName;
						if (line.contains(libStringFinder)) {
							line = line.replace(libStringFinder, "../../../cache/lib/" + crc + "/" + jarName);
						} else if (line.contains(":$ROOT_PATH/" + jarName + ":")) {
							line = line.replace(":$ROOT_PATH/" + jarName + ":",
									":$ROOT_PATH/../../../cache/lib/" + crc + "/" + jarName + ":");
						} else if (line.contains(";" + jarName + ";")) {
							line = line.replace(";" + jarName + ";",
									";../../../cache/lib/" + crc + "/" + jarName + ";");
						}
						return line;
					}

				}
				DealChildJobLibrary_tRunJob_1 dealChildJobLibrary_tRunJob_1 = new DealChildJobLibrary_tRunJob_1();

				class JVMArgumentHelper_tRunJob_1 {

					public void addArgumentsTo(java.util.List<String> target_argument_list,
							String argument_from_child) {

						target_argument_list.add(argument_from_child);
					}

				}

				JVMArgumentHelper_tRunJob_1 jvm_argument_helper_tRunJob_1 = new JVMArgumentHelper_tRunJob_1();

				/**
				 * [tRunJob_1 begin ] stop
				 */

				/**
				 * [tRunJob_1 main ] start
				 */

				currentComponent = "tRunJob_1";

				java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();

				String osName_tRunJob_1 = System.getProperty("os.name");
				if (osName_tRunJob_1 != null && osName_tRunJob_1.toLowerCase().startsWith("win")) {

					paraList_tRunJob_1.add("C:/Program Files/Java/jre-1.8/bin/java.exe");

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xms256M");

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xmx1024M");

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xmx3048M");

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xmx4096M");

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1,
							"-Dmail.smtp.ssl.protocols=TLSv1.2");

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Dfile.encoding=UTF-8");

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-cp");

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1,
							dealChildJobLibrary_tRunJob_1.replaceJarPathsFromCrcMap(
									"C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/workspace/DEV/poms/jobs/process/buy_validation_0.11/target/classpath.jar;"));

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1,
							"dev.buy_validation_0_11.BUY_VALIDATION");

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_pid=" + pid);

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--root_pid=" + rootPid);

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_node=tRunJob_1");

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--context=Default");

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "%*");

				} else {

					paraList_tRunJob_1.add("C:/Program Files/Java/jre-1.8/bin/java.exe");

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xms256M");

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xmx1024M");

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xmx3048M");

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xmx4096M");

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1,
							"-Dmail.smtp.ssl.protocols=TLSv1.2");

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Dfile.encoding=UTF-8");

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-cp");

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1,
							dealChildJobLibrary_tRunJob_1.replaceJarPathsFromCrcMap(
									"C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/workspace/DEV/poms/jobs/process/buy_validation_0.11/target/classes:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/workspace/DEV/poms/jobs/process/buy_validation_0.11/src/main/ext-resources:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/workspace/DEV/poms/code/routines/target/classes:.:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/talend/libraries/advancedPersistentLookupLib-1.2/6.0.0/advancedPersistentLookupLib-1.2-6.0.0.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/commons-collections/commons-collections/3.2.2/commons-collections-3.2.2.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/talend/libraries/commons-collections4-4.1/6.0.0/commons-collections4-4.1-6.0.0.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/apache/commons/commons-compress/1.19/commons-compress-1.19.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/apache/commons/commons-lang3/3.8.1/commons-lang3-3.8.1.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/apache/commons/commons-math3/3.6.1/commons-math3-3.6.1.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/talend/libraries/crypto-utils/6.0.0-SNAPSHOT/crypto-utils-6.0.0-SNAPSHOT.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/dom4j/dom4j/1.6.1/dom4j-1.6.1.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/talend/libraries/filecopy/2.0.0/filecopy-2.0.0.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/talend/libraries/geronimo-stax-api_1.0_spec-1.0.1/6.0.0/geronimo-stax-api_1.0_spec-1.0.1-6.0.0.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/talend/libraries/jboss-serialization/6.0.0/jboss-serialization-6.0.0.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/log4j/log4j/1.2.17/log4j-1.2.17.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/talend/libraries/mssql-jdbc/6.0.0/mssql-jdbc-6.0.0.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/apache/poi/poi/4.1.0-20190523141255_modified_talend/poi-4.1.0-20190523141255_modified_talend.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/apache/poi/poi-ooxml/4.1.0-20190523141255_modified_talend/poi-ooxml-4.1.0-20190523141255_modified_talend.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/apache/poi/poi-ooxml-schemas/4.1.0-20190523141255_modified_talend/poi-ooxml-schemas-4.1.0-20190523141255_modified_talend.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/apache/poi/poi-scratchpad/4.1.0-20190523141255_modified_talend/poi-scratchpad-4.1.0-20190523141255_modified_talend.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/talend/libraries/simpleexcel-2.2-20190722/6.0.0/simpleexcel-2.2-20190722-6.0.0.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/talend/libraries/talendExcel-1.5-20190731/6.0.0/talendExcel-1.5-20190731-6.0.0.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/talend/libraries/talend_DB_mssqlUtil-1.3-20190523/6.0.0/talend_DB_mssqlUtil-1.3-20190523-6.0.0.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/talend/libraries/talend_file_enhanced_20070724/6.0.0/talend_file_enhanced_20070724-6.0.0.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/talend/libraries/talendcsv/6.0.0/talendcsv-6.0.0.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/talend/components/lib/thashfile/3.1-20190910/thashfile-3.1-20190910.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/talend/libraries/trove/6.0.0/trove-6.0.0.jar:C:/TALEND/TOS_DI-20191031_1204-V7.3.1M3/configuration/.m2/repository/org/apache/xmlbeans/xmlbeans/3.1.0/xmlbeans-3.1.0.jar:")
									.replace("$ROOT_PATH", System.getProperty("user.dir")));

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1,
							"dev.buy_validation_0_11.BUY_VALIDATION");

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_pid=" + pid);

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--root_pid=" + rootPid);

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_node=tRunJob_1");

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--context=Default");

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "$@");

				}

				if (enableLogStash) {
					paraList_tRunJob_1.add("--monitoring=" + enableLogStash);
				}

				// for feature:10589

				paraList_tRunJob_1.add("--stat_port=" + null);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_1.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_1 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_1 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_1".equals(tRunJobName_tRunJob_1) && childResumePath_tRunJob_1 != null) {
					paraList_tRunJob_1.add("--resuming_checkpoint_path="
							+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_1");

				java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

				context.synchronizeContext();
				class ContextProcessor_tRunJob_1 {
					private void transmitContext_0() {
						parentContextMap_tRunJob_1.put("IntegrationPath", context.IntegrationPath);
						paraList_tRunJob_1.add("--context_type " + "IntegrationPath" + "=" + "id_String");
						parentContextMap_tRunJob_1.put("LogPath", context.LogPath);
						paraList_tRunJob_1.add("--context_type " + "LogPath" + "=" + "id_String");
						parentContextMap_tRunJob_1.put("insertSQLMode", context.insertSQLMode);
						paraList_tRunJob_1.add("--context_type " + "insertSQLMode" + "=" + "id_Boolean");
						parentContextMap_tRunJob_1.put("new1", context.new1);
						paraList_tRunJob_1.add("--context_type " + "new1" + "=" + "id_String");
						parentContextMap_tRunJob_1.put("SQLSERVER_AdditionalParams",
								context.SQLSERVER_AdditionalParams);
						paraList_tRunJob_1.add("--context_type " + "SQLSERVER_AdditionalParams" + "=" + "id_String");
						parentContextMap_tRunJob_1.put("SQLSERVER_Database", context.SQLSERVER_Database);
						paraList_tRunJob_1.add("--context_type " + "SQLSERVER_Database" + "=" + "id_String");
						parentContextMap_tRunJob_1.put("SQLSERVER_Login", context.SQLSERVER_Login);
						paraList_tRunJob_1.add("--context_type " + "SQLSERVER_Login" + "=" + "id_String");
						parentContextMap_tRunJob_1.put("SQLSERVER_Password", context.SQLSERVER_Password);
						paraList_tRunJob_1.add("--context_type " + "SQLSERVER_Password" + "=" + "id_Password");
						parentContextMap_tRunJob_1.put("SQLSERVER_Port", context.SQLSERVER_Port);
						paraList_tRunJob_1.add("--context_type " + "SQLSERVER_Port" + "=" + "id_String");
						parentContextMap_tRunJob_1.put("SQLSERVER_Schema", context.SQLSERVER_Schema);
						paraList_tRunJob_1.add("--context_type " + "SQLSERVER_Schema" + "=" + "id_String");
						parentContextMap_tRunJob_1.put("SQLSERVER_Server", context.SQLSERVER_Server);
						paraList_tRunJob_1.add("--context_type " + "SQLSERVER_Server" + "=" + "id_String");
						parentContextMap_tRunJob_1.put("SQLSERVER_LOG_AdditionalParams",
								context.SQLSERVER_LOG_AdditionalParams);
						paraList_tRunJob_1
								.add("--context_type " + "SQLSERVER_LOG_AdditionalParams" + "=" + "id_String");
						parentContextMap_tRunJob_1.put("SQLSERVER_LOG_Database", context.SQLSERVER_LOG_Database);
						paraList_tRunJob_1.add("--context_type " + "SQLSERVER_LOG_Database" + "=" + "id_String");
						parentContextMap_tRunJob_1.put("SQLSERVER_LOG_Login", context.SQLSERVER_LOG_Login);
						paraList_tRunJob_1.add("--context_type " + "SQLSERVER_LOG_Login" + "=" + "id_String");
						parentContextMap_tRunJob_1.put("SQLSERVER_LOG_Password", context.SQLSERVER_LOG_Password);
						paraList_tRunJob_1.add("--context_type " + "SQLSERVER_LOG_Password" + "=" + "id_Password");
						parentContextMap_tRunJob_1.put("SQLSERVER_LOG_Port", context.SQLSERVER_LOG_Port);
						paraList_tRunJob_1.add("--context_type " + "SQLSERVER_LOG_Port" + "=" + "id_String");
						parentContextMap_tRunJob_1.put("SQLSERVER_LOG_Schema", context.SQLSERVER_LOG_Schema);
						paraList_tRunJob_1.add("--context_type " + "SQLSERVER_LOG_Schema" + "=" + "id_String");
						parentContextMap_tRunJob_1.put("SQLSERVER_LOG_Server", context.SQLSERVER_LOG_Server);
						paraList_tRunJob_1.add("--context_type " + "SQLSERVER_LOG_Server" + "=" + "id_String");
						parentContextMap_tRunJob_1.put("SQLSERVERSCHEMA_MASTERFILE_AdditionalParams",
								context.SQLSERVERSCHEMA_MASTERFILE_AdditionalParams);
						paraList_tRunJob_1.add(
								"--context_type " + "SQLSERVERSCHEMA_MASTERFILE_AdditionalParams" + "=" + "id_String");
						parentContextMap_tRunJob_1.put("SQLSERVERSCHEMA_MASTERFILE_Database",
								context.SQLSERVERSCHEMA_MASTERFILE_Database);
						paraList_tRunJob_1
								.add("--context_type " + "SQLSERVERSCHEMA_MASTERFILE_Database" + "=" + "id_String");
						parentContextMap_tRunJob_1.put("SQLSERVERSCHEMA_MASTERFILE_Login",
								context.SQLSERVERSCHEMA_MASTERFILE_Login);
						paraList_tRunJob_1
								.add("--context_type " + "SQLSERVERSCHEMA_MASTERFILE_Login" + "=" + "id_String");
						parentContextMap_tRunJob_1.put("SQLSERVERSCHEMA_MASTERFILE_Password",
								context.SQLSERVERSCHEMA_MASTERFILE_Password);
						paraList_tRunJob_1
								.add("--context_type " + "SQLSERVERSCHEMA_MASTERFILE_Password" + "=" + "id_Password");
						parentContextMap_tRunJob_1.put("SQLSERVERSCHEMA_MASTERFILE_Port",
								context.SQLSERVERSCHEMA_MASTERFILE_Port);
						paraList_tRunJob_1
								.add("--context_type " + "SQLSERVERSCHEMA_MASTERFILE_Port" + "=" + "id_String");
						parentContextMap_tRunJob_1.put("SQLSERVERSCHEMA_MASTERFILE_Schema",
								context.SQLSERVERSCHEMA_MASTERFILE_Schema);
						paraList_tRunJob_1
								.add("--context_type " + "SQLSERVERSCHEMA_MASTERFILE_Schema" + "=" + "id_String");
						parentContextMap_tRunJob_1.put("SQLSERVERSCHEMA_MASTERFILE_Server",
								context.SQLSERVERSCHEMA_MASTERFILE_Server);
						paraList_tRunJob_1
								.add("--context_type " + "SQLSERVERSCHEMA_MASTERFILE_Server" + "=" + "id_String");
					}

					public void transmitAllContext() {
						transmitContext_0();
					}
				}
				new ContextProcessor_tRunJob_1().transmitAllContext();
				java.util.Enumeration<?> propertyNames_tRunJob_1 = context.propertyNames();
				while (propertyNames_tRunJob_1.hasMoreElements()) {
					String key_tRunJob_1 = (String) propertyNames_tRunJob_1.nextElement();
					Object value_tRunJob_1 = (Object) context.get(key_tRunJob_1);
					if (value_tRunJob_1 != null) {
						paraList_tRunJob_1.add("--context_param " + key_tRunJob_1 + "=" + value_tRunJob_1);
					} else {
						paraList_tRunJob_1.add("--context_param " + key_tRunJob_1 + "="
								+ NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
					}

				}

				Object obj_tRunJob_1 = null;

				obj_tRunJob_1 = context.IntegrationPath;
				if (obj_tRunJob_1 != null) {
					paraList_tRunJob_1.add("--context_param IntegrationExcelPath="
							+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
				} else {
					paraList_tRunJob_1.add("--context_param IntegrationExcelPath="
							+ NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				parentContextMap_tRunJob_1.put("IntegrationExcelPath", obj_tRunJob_1);

				obj_tRunJob_1 = ((String) globalMap.get("tFileList_1_CURRENT_FILE"));
				if (obj_tRunJob_1 != null) {
					paraList_tRunJob_1
							.add("--context_param ExcelFileName=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
				} else {
					paraList_tRunJob_1.add("--context_param ExcelFileName="
							+ NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				parentContextMap_tRunJob_1.put("ExcelFileName", obj_tRunJob_1);

				obj_tRunJob_1 = context.LogPath;
				if (obj_tRunJob_1 != null) {
					paraList_tRunJob_1
							.add("--context_param LogPath=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
				} else {
					paraList_tRunJob_1.add(
							"--context_param LogPath=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				parentContextMap_tRunJob_1.put("LogPath", obj_tRunJob_1);

				obj_tRunJob_1 = context.LogPath + ((String) globalMap.get("LogFile"));
				if (obj_tRunJob_1 != null) {
					paraList_tRunJob_1
							.add("--context_param errorFile=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
				} else {
					paraList_tRunJob_1.add(
							"--context_param errorFile=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				parentContextMap_tRunJob_1.put("errorFile", obj_tRunJob_1);

				obj_tRunJob_1 = globalMap.get("dateError");
				if (obj_tRunJob_1 != null) {
					paraList_tRunJob_1
							.add("--context_param dateError=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
				} else {
					paraList_tRunJob_1.add(
							"--context_param dateError=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
				}

				parentContextMap_tRunJob_1.put("dateError", obj_tRunJob_1);

				class ConsoleHelper_tRunJob_1 {
					private Thread getNormalThread(Process process) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(process.getInputStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											System.out.println(line);
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {

									ioe.printStackTrace();
								}
							}
						};
					}

					private Thread getErrorThread(Process process, StringBuffer sb) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(process.getErrorStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											sb.append(line).append("\n");
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {

									ioe.printStackTrace();
								}
							}
						};
					}
				}
				ConsoleHelper_tRunJob_1 consoleHelper_tRunJob_1 = new ConsoleHelper_tRunJob_1();

				Runtime runtime_tRunJob_1 = Runtime.getRuntime();
				Process ps_tRunJob_1 = null;

				// 0 indicates normal termination
				int result_tRunJob_1;
				StringBuffer errorMsg_tRunJob_1 = new StringBuffer();
				try {
					ps_tRunJob_1 = runtime_tRunJob_1
							.exec((String[]) paraList_tRunJob_1.toArray(new String[paraList_tRunJob_1.size()]));

					Thread normal_tRunJob_1 = consoleHelper_tRunJob_1.getNormalThread(ps_tRunJob_1);
					normal_tRunJob_1.start();

					Thread error_tRunJob_1 = consoleHelper_tRunJob_1.getErrorThread(ps_tRunJob_1, errorMsg_tRunJob_1);
					error_tRunJob_1.start();

					result_tRunJob_1 = ps_tRunJob_1.waitFor();
					normal_tRunJob_1.join(10000);
					error_tRunJob_1.join(10000);
				} catch (ThreadDeath tde) {
					ps_tRunJob_1.destroy();
					throw tde;
				}

				globalMap.put("tRunJob_1_CHILD_RETURN_CODE", result_tRunJob_1);
				if (result_tRunJob_1 != 0) {
					globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE", errorMsg_tRunJob_1.toString());

					throw new RuntimeException("Child job returns " + result_tRunJob_1
							+ ". It doesn't terminate normally.\n" + errorMsg_tRunJob_1.toString());

				}

				tos_count_tRunJob_1++;

				/**
				 * [tRunJob_1 main ] stop
				 */

				/**
				 * [tRunJob_1 process_data_begin ] start
				 */

				currentComponent = "tRunJob_1";

				/**
				 * [tRunJob_1 process_data_begin ] stop
				 */

				/**
				 * [tRunJob_1 process_data_end ] start
				 */

				currentComponent = "tRunJob_1";

				/**
				 * [tRunJob_1 process_data_end ] stop
				 */

				/**
				 * [tRunJob_1 end ] start
				 */

				currentComponent = "tRunJob_1";

				ok_Hash.put("tRunJob_1", true);
				end_Hash.put("tRunJob_1", System.currentTimeMillis());

				tFileExist_5Process(globalMap);

				/**
				 * [tRunJob_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_1 finally ] start
				 */

				currentComponent = "tRunJob_1";

				/**
				 * [tRunJob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_1_SUBPROCESS_STATE", 1);
	}

	public void tWarn_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tWarn_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tWarn_5 begin ] start
				 */

				ok_Hash.put("tWarn_5", false);
				start_Hash.put("tWarn_5", System.currentTimeMillis());

				currentComponent = "tWarn_5";

				int tos_count_tWarn_5 = 0;

				/**
				 * [tWarn_5 begin ] stop
				 */

				/**
				 * [tWarn_5 main ] start
				 */

				currentComponent = "tWarn_5";

				try {

					resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_5", "", Thread.currentThread().getId() + "", "ERROR",
							"", "File Size KO", "", "");
					talendLogs_LOGS.addMessage("tWarn", "tWarn_5", 5, "File Size KO", 4);
					talendLogs_LOGSProcess(globalMap);
					globalMap.put("tWarn_5_WARN_MESSAGES", "File Size KO");
					globalMap.put("tWarn_5_WARN_PRIORITY", 5);
					globalMap.put("tWarn_5_WARN_CODE", 4);

				} catch (Exception e_tWarn_5) {
					logIgnoredError(
							String.format("tWarn_5 - tWarn failed to log message due to internal error: %s", e_tWarn_5),
							e_tWarn_5);
				}

				tos_count_tWarn_5++;

				/**
				 * [tWarn_5 main ] stop
				 */

				/**
				 * [tWarn_5 process_data_begin ] start
				 */

				currentComponent = "tWarn_5";

				/**
				 * [tWarn_5 process_data_begin ] stop
				 */

				/**
				 * [tWarn_5 process_data_end ] start
				 */

				currentComponent = "tWarn_5";

				/**
				 * [tWarn_5 process_data_end ] stop
				 */

				/**
				 * [tWarn_5 end ] start
				 */

				currentComponent = "tWarn_5";

				ok_Hash.put("tWarn_5", true);
				end_Hash.put("tWarn_5", System.currentTimeMillis());

				tFileExist_6Process(globalMap);

				/**
				 * [tWarn_5 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tWarn_5 finally ] start
				 */

				currentComponent = "tWarn_5";

				/**
				 * [tWarn_5 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tWarn_5_SUBPROCESS_STATE", 1);
	}

	public void tFileExist_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileExist_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tFileExist_6 begin ] start
				 */

				ok_Hash.put("tFileExist_6", false);
				start_Hash.put("tFileExist_6", System.currentTimeMillis());

				currentComponent = "tFileExist_6";

				int tos_count_tFileExist_6 = 0;

				/**
				 * [tFileExist_6 begin ] stop
				 */

				/**
				 * [tFileExist_6 main ] start
				 */

				currentComponent = "tFileExist_6";

				java.io.File file_tFileExist_6 = new java.io.File(
						context.IntegrationPath + ((String) globalMap.get("tFileList_1_CURRENT_FILE")));
				if (!file_tFileExist_6.exists()) {
					globalMap.put("tFileExist_6_EXISTS", false);
				} else {
					globalMap.put("tFileExist_6_EXISTS", true);
				}

				globalMap.put("tFileExist_6_FILENAME",
						context.IntegrationPath + ((String) globalMap.get("tFileList_1_CURRENT_FILE")));

				tos_count_tFileExist_6++;

				/**
				 * [tFileExist_6 main ] stop
				 */

				/**
				 * [tFileExist_6 process_data_begin ] start
				 */

				currentComponent = "tFileExist_6";

				/**
				 * [tFileExist_6 process_data_begin ] stop
				 */

				/**
				 * [tFileExist_6 process_data_end ] start
				 */

				currentComponent = "tFileExist_6";

				/**
				 * [tFileExist_6 process_data_end ] stop
				 */

				/**
				 * [tFileExist_6 end ] start
				 */

				currentComponent = "tFileExist_6";

				ok_Hash.put("tFileExist_6", true);
				end_Hash.put("tFileExist_6", System.currentTimeMillis());

				if (((Boolean) globalMap.get("tFileExist_6_EXISTS"))) {

					tFileCopy_10Process(globalMap);
				}

				/**
				 * [tFileExist_6 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileExist_6 finally ] start
				 */

				currentComponent = "tFileExist_6";

				/**
				 * [tFileExist_6 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileExist_6_SUBPROCESS_STATE", 1);
	}

	public void tFileCopy_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileCopy_10_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tFileCopy_10 begin ] start
				 */

				ok_Hash.put("tFileCopy_10", false);
				start_Hash.put("tFileCopy_10", System.currentTimeMillis());

				currentComponent = "tFileCopy_10";

				int tos_count_tFileCopy_10 = 0;

				/**
				 * [tFileCopy_10 begin ] stop
				 */

				/**
				 * [tFileCopy_10 main ] start
				 */

				currentComponent = "tFileCopy_10";

				String srcFileName_tFileCopy_10 = context.IntegrationPath
						+ ((String) globalMap.get("tFileList_1_CURRENT_FILE"));

				java.io.File srcFile_tFileCopy_10 = new java.io.File(srcFileName_tFileCopy_10);

				// here need check first, before mkdirs().
				if (!srcFile_tFileCopy_10.exists() || !srcFile_tFileCopy_10.isFile()) {
					String errorMessageFileDoesnotExistsOrIsNotAFile_tFileCopy_10 = String.format(
							"The source File \"%s\" does not exist or is not a file.", srcFileName_tFileCopy_10);
					throw new RuntimeException(errorMessageFileDoesnotExistsOrIsNotAFile_tFileCopy_10);
				}
				String desDirName_tFileCopy_10 = context.LogPath;

				String desFileName_tFileCopy_10 = globalMap.get("dateError") + "_"
						+ ((String) globalMap.get("tFileList_1_CURRENT_FILE"));

				if (desFileName_tFileCopy_10 != null && ("").equals(desFileName_tFileCopy_10.trim())) {
					desFileName_tFileCopy_10 = "NewName.temp";
				}

				java.io.File desFile_tFileCopy_10 = new java.io.File(desDirName_tFileCopy_10, desFileName_tFileCopy_10);

				if (!srcFile_tFileCopy_10.getPath().equals(desFile_tFileCopy_10.getPath())) {
					java.io.File parentFile_tFileCopy_10 = desFile_tFileCopy_10.getParentFile();

					if (parentFile_tFileCopy_10 != null && !parentFile_tFileCopy_10.exists()) {
						parentFile_tFileCopy_10.mkdirs();
					}
					org.talend.FileCopy.copyFile(srcFile_tFileCopy_10.getPath(), desFile_tFileCopy_10.getPath(), true);
					java.io.File isRemoved_tFileCopy_10 = new java.io.File(
							context.IntegrationPath + ((String) globalMap.get("tFileList_1_CURRENT_FILE")));
					if (isRemoved_tFileCopy_10.exists()) {
						String errorMessageCouldNotRemoveFile_tFileCopy_10 = String.format(
								"tFileCopy_10 - The source file \"%s\" could not be removed from the folder because it is open or you only have read-only rights.",
								srcFileName_tFileCopy_10);
						throw new RuntimeException(errorMessageCouldNotRemoveFile_tFileCopy_10);
					}

				}
				globalMap.put("tFileCopy_10_DESTINATION_FILEPATH", desFile_tFileCopy_10.getPath());
				globalMap.put("tFileCopy_10_DESTINATION_FILENAME", desFile_tFileCopy_10.getName());

				globalMap.put("tFileCopy_10_SOURCE_DIRECTORY", srcFile_tFileCopy_10.getParent());
				globalMap.put("tFileCopy_10_DESTINATION_DIRECTORY", desFile_tFileCopy_10.getParent());

				tos_count_tFileCopy_10++;

				/**
				 * [tFileCopy_10 main ] stop
				 */

				/**
				 * [tFileCopy_10 process_data_begin ] start
				 */

				currentComponent = "tFileCopy_10";

				/**
				 * [tFileCopy_10 process_data_begin ] stop
				 */

				/**
				 * [tFileCopy_10 process_data_end ] start
				 */

				currentComponent = "tFileCopy_10";

				/**
				 * [tFileCopy_10 process_data_end ] stop
				 */

				/**
				 * [tFileCopy_10 end ] start
				 */

				currentComponent = "tFileCopy_10";

				ok_Hash.put("tFileCopy_10", true);
				end_Hash.put("tFileCopy_10", System.currentTimeMillis());

				/**
				 * [tFileCopy_10 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileCopy_10 finally ] start
				 */

				currentComponent = "tFileCopy_10";

				/**
				 * [tFileCopy_10 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileCopy_10_SUBPROCESS_STATE", 1);
	}

	public void tSetGlobalVar_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tSetGlobalVar_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tSetGlobalVar_2 begin ] start
				 */

				ok_Hash.put("tSetGlobalVar_2", false);
				start_Hash.put("tSetGlobalVar_2", System.currentTimeMillis());

				currentComponent = "tSetGlobalVar_2";

				int tos_count_tSetGlobalVar_2 = 0;

				/**
				 * [tSetGlobalVar_2 begin ] stop
				 */

				/**
				 * [tSetGlobalVar_2 main ] start
				 */

				currentComponent = "tSetGlobalVar_2";

				globalMap.put("LogFile", "logs_file" + TalendDate.formatDate("yyyy-MM-dd-HH-mm", new Date()) + ".txt");
				globalMap.put("dateError", TalendDate.formatDate("yyyy-MM-ddHHmmss", new Date()));
				globalMap.put("fileSize", "");

				tos_count_tSetGlobalVar_2++;

				/**
				 * [tSetGlobalVar_2 main ] stop
				 */

				/**
				 * [tSetGlobalVar_2 process_data_begin ] start
				 */

				currentComponent = "tSetGlobalVar_2";

				/**
				 * [tSetGlobalVar_2 process_data_begin ] stop
				 */

				/**
				 * [tSetGlobalVar_2 process_data_end ] start
				 */

				currentComponent = "tSetGlobalVar_2";

				/**
				 * [tSetGlobalVar_2 process_data_end ] stop
				 */

				/**
				 * [tSetGlobalVar_2 end ] start
				 */

				currentComponent = "tSetGlobalVar_2";

				ok_Hash.put("tSetGlobalVar_2", true);
				end_Hash.put("tSetGlobalVar_2", System.currentTimeMillis());

				tFileList_1Process(globalMap);

				/**
				 * [tSetGlobalVar_2 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tSetGlobalVar_2 finally ] start
				 */

				currentComponent = "tSetGlobalVar_2";

				/**
				 * [tSetGlobalVar_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tSetGlobalVar_2_SUBPROCESS_STATE", 1);
	}

	public void tWarn_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tWarn_11_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tWarn_11 begin ] start
				 */

				ok_Hash.put("tWarn_11", false);
				start_Hash.put("tWarn_11", System.currentTimeMillis());

				currentComponent = "tWarn_11";

				int tos_count_tWarn_11 = 0;

				/**
				 * [tWarn_11 begin ] stop
				 */

				/**
				 * [tWarn_11 main ] start
				 */

				currentComponent = "tWarn_11";

				try {

					resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_11", "", Thread.currentThread().getId() + "", "INFO",
							"", "Start job", "", "");
					talendLogs_LOGS.addMessage("tWarn", "tWarn_11", 3, "Start job", 3);
					talendLogs_LOGSProcess(globalMap);
					globalMap.put("tWarn_11_WARN_MESSAGES", "Start job");
					globalMap.put("tWarn_11_WARN_PRIORITY", 3);
					globalMap.put("tWarn_11_WARN_CODE", 3);

				} catch (Exception e_tWarn_11) {
					logIgnoredError(String.format("tWarn_11 - tWarn failed to log message due to internal error: %s",
							e_tWarn_11), e_tWarn_11);
				}

				tos_count_tWarn_11++;

				/**
				 * [tWarn_11 main ] stop
				 */

				/**
				 * [tWarn_11 process_data_begin ] start
				 */

				currentComponent = "tWarn_11";

				/**
				 * [tWarn_11 process_data_begin ] stop
				 */

				/**
				 * [tWarn_11 process_data_end ] start
				 */

				currentComponent = "tWarn_11";

				/**
				 * [tWarn_11 process_data_end ] stop
				 */

				/**
				 * [tWarn_11 end ] start
				 */

				currentComponent = "tWarn_11";

				ok_Hash.put("tWarn_11", true);
				end_Hash.put("tWarn_11", System.currentTimeMillis());

				tSetGlobalVar_2Process(globalMap);

				/**
				 * [tWarn_11 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tWarn_11 finally ] start
				 */

				currentComponent = "tWarn_11";

				/**
				 * [tWarn_11 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tWarn_11_SUBPROCESS_STATE", 1);
	}

	public void connectionStatsLogs_CommitProcess(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("connectionStatsLogs_Commit_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [connectionStatsLogs_Commit begin ] start
				 */

				ok_Hash.put("connectionStatsLogs_Commit", false);
				start_Hash.put("connectionStatsLogs_Commit", System.currentTimeMillis());

				currentComponent = "connectionStatsLogs_Commit";

				int tos_count_connectionStatsLogs_Commit = 0;

				/**
				 * [connectionStatsLogs_Commit begin ] stop
				 */

				/**
				 * [connectionStatsLogs_Commit main ] start
				 */

				currentComponent = "connectionStatsLogs_Commit";

				java.sql.Connection conn_connectionStatsLogs_Commit = (java.sql.Connection) globalMap
						.get("conn_connectionStatsLogs");
				if (conn_connectionStatsLogs_Commit != null && !conn_connectionStatsLogs_Commit.isClosed()) {

					conn_connectionStatsLogs_Commit.commit();

				}

				tos_count_connectionStatsLogs_Commit++;

				/**
				 * [connectionStatsLogs_Commit main ] stop
				 */

				/**
				 * [connectionStatsLogs_Commit process_data_begin ] start
				 */

				currentComponent = "connectionStatsLogs_Commit";

				/**
				 * [connectionStatsLogs_Commit process_data_begin ] stop
				 */

				/**
				 * [connectionStatsLogs_Commit process_data_end ] start
				 */

				currentComponent = "connectionStatsLogs_Commit";

				/**
				 * [connectionStatsLogs_Commit process_data_end ] stop
				 */

				/**
				 * [connectionStatsLogs_Commit end ] start
				 */

				currentComponent = "connectionStatsLogs_Commit";

				ok_Hash.put("connectionStatsLogs_Commit", true);
				end_Hash.put("connectionStatsLogs_Commit", System.currentTimeMillis());

				/**
				 * [connectionStatsLogs_Commit end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [connectionStatsLogs_Commit finally ] start
				 */

				currentComponent = "connectionStatsLogs_Commit";

				/**
				 * [connectionStatsLogs_Commit finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("connectionStatsLogs_Commit_SUBPROCESS_STATE", 1);
	}

	public void connectionStatsLogsProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("connectionStatsLogs_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [connectionStatsLogs begin ] start
				 */

				ok_Hash.put("connectionStatsLogs", false);
				start_Hash.put("connectionStatsLogs", System.currentTimeMillis());

				currentComponent = "connectionStatsLogs";

				int tos_count_connectionStatsLogs = 0;

				String url_connectionStatsLogs = "jdbc:sqlserver://" + context.SQLSERVER_LOG_Server;
				String port_connectionStatsLogs = context.SQLSERVER_LOG_Port;
				String dbname_connectionStatsLogs = context.SQLSERVER_LOG_Database;
				if (!"".equals(port_connectionStatsLogs)) {
					url_connectionStatsLogs += ":" + context.SQLSERVER_LOG_Port;
				}
				if (!"".equals(dbname_connectionStatsLogs)) {

					url_connectionStatsLogs += ";databaseName=" + context.SQLSERVER_LOG_Database;
				}
				url_connectionStatsLogs += ";appName=" + projectName + ";" + context.SQLSERVER_LOG_AdditionalParams;
				String dbUser_connectionStatsLogs = context.SQLSERVER_LOG_Login;

				final String decryptedPassword_connectionStatsLogs = context.SQLSERVER_LOG_Password;
				String dbPwd_connectionStatsLogs = decryptedPassword_connectionStatsLogs;

				java.sql.Connection conn_connectionStatsLogs = null;

				String sharedConnectionName_connectionStatsLogs = "jdbc:sqlserver://" + context.SQLSERVER_LOG_Server
						+ ":" + context.SQLSERVER_LOG_Port + ";DatabaseName=" + context.SQLSERVER_LOG_Schema + ";"
						+ context.SQLSERVER_LOG_AdditionalParams + "" + "_StatsAndLog_Shared_Connection";
				conn_connectionStatsLogs = SharedDBConnection.getDBConnection(
						"com.microsoft.sqlserver.jdbc.SQLServerDriver", url_connectionStatsLogs,
						dbUser_connectionStatsLogs, dbPwd_connectionStatsLogs,
						sharedConnectionName_connectionStatsLogs);
				if (null != conn_connectionStatsLogs) {

					conn_connectionStatsLogs.setAutoCommit(false);
				}

				globalMap.put("dbschema_connectionStatsLogs", context.SQLSERVER_LOG_Schema);

				globalMap.put("db_connectionStatsLogs", context.SQLSERVER_LOG_Database);

				globalMap.put("conn_connectionStatsLogs", conn_connectionStatsLogs);

				globalMap.put("shareIdentitySetting_connectionStatsLogs", false);

				/**
				 * [connectionStatsLogs begin ] stop
				 */

				/**
				 * [connectionStatsLogs main ] start
				 */

				currentComponent = "connectionStatsLogs";

				tos_count_connectionStatsLogs++;

				/**
				 * [connectionStatsLogs main ] stop
				 */

				/**
				 * [connectionStatsLogs process_data_begin ] start
				 */

				currentComponent = "connectionStatsLogs";

				/**
				 * [connectionStatsLogs process_data_begin ] stop
				 */

				/**
				 * [connectionStatsLogs process_data_end ] start
				 */

				currentComponent = "connectionStatsLogs";

				/**
				 * [connectionStatsLogs process_data_end ] stop
				 */

				/**
				 * [connectionStatsLogs end ] start
				 */

				currentComponent = "connectionStatsLogs";

				ok_Hash.put("connectionStatsLogs", true);
				end_Hash.put("connectionStatsLogs", System.currentTimeMillis());

				/**
				 * [connectionStatsLogs end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [connectionStatsLogs finally ] start
				 */

				currentComponent = "connectionStatsLogs";

				/**
				 * [connectionStatsLogs finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("connectionStatsLogs_SUBPROCESS_STATE", 1);
	}

	public static class row_talendLogs_LOGSStruct
			implements routines.system.IPersistableRow<row_talendLogs_LOGSStruct> {
		final static byte[] commonByteArrayLock_DEV_MASTERFILE_INTEGRATION_BDD = new byte[0];
		static byte[] commonByteArray_DEV_MASTERFILE_INTEGRATION_BDD = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public Integer priority;

		public Integer getPriority() {
			return this.priority;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Integer code;

		public Integer getCode() {
			return this.code;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEV_MASTERFILE_INTEGRATION_BDD.length) {
					if (length < 1024 && commonByteArray_DEV_MASTERFILE_INTEGRATION_BDD.length == 0) {
						commonByteArray_DEV_MASTERFILE_INTEGRATION_BDD = new byte[1024];
					} else {
						commonByteArray_DEV_MASTERFILE_INTEGRATION_BDD = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEV_MASTERFILE_INTEGRATION_BDD, 0, length);
				strReturn = new String(commonByteArray_DEV_MASTERFILE_INTEGRATION_BDD, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_MASTERFILE_INTEGRATION_BDD) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.root_pid = readString(dis);

					this.father_pid = readString(dis);

					this.project = readString(dis);

					this.job = readString(dis);

					this.context = readString(dis);

					this.priority = readInteger(dis);

					this.type = readString(dis);

					this.origin = readString(dis);

					this.message = readString(dis);

					this.code = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.root_pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.context, dos);

				// Integer

				writeInteger(this.priority, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message, dos);

				// Integer

				writeInteger(this.code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",context=" + context);
			sb.append(",priority=" + String.valueOf(priority));
			sb.append(",type=" + type);
			sb.append(",origin=" + origin);
			sb.append(",message=" + message);
			sb.append(",code=" + String.valueOf(code));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_talendLogs_LOGSStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void talendLogs_LOGSProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("talendLogs_LOGS_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row_talendLogs_LOGSStruct row_talendLogs_LOGS = new row_talendLogs_LOGSStruct();

				/**
				 * [talendLogs_DB begin ] start
				 */

				ok_Hash.put("talendLogs_DB", false);
				start_Hash.put("talendLogs_DB", System.currentTimeMillis());

				currentVirtualComponent = "talendLogs_DB";

				currentComponent = "talendLogs_DB";

				int tos_count_talendLogs_DB = 0;

				int nb_line_talendLogs_DB = 0;
				int nb_line_update_talendLogs_DB = 0;
				int nb_line_inserted_talendLogs_DB = 0;
				int nb_line_deleted_talendLogs_DB = 0;
				int nb_line_rejected_talendLogs_DB = 0;

				int deletedCount_talendLogs_DB = 0;
				int updatedCount_talendLogs_DB = 0;
				int insertedCount_talendLogs_DB = 0;
				int rejectedCount_talendLogs_DB = 0;
				String dbschema_talendLogs_DB = null;
				String tableName_talendLogs_DB = null;
				boolean whetherReject_talendLogs_DB = false;

				java.util.Calendar calendar_talendLogs_DB = java.util.Calendar.getInstance();
				long year1_talendLogs_DB = TalendDate.parseDate("yyyy-MM-dd", "0001-01-01").getTime();
				long year2_talendLogs_DB = TalendDate.parseDate("yyyy-MM-dd", "1753-01-01").getTime();
				long year10000_talendLogs_DB = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss", "9999-12-31 24:00:00")
						.getTime();
				long date_talendLogs_DB;

				java.util.Calendar calendar_datetimeoffset_talendLogs_DB = java.util.Calendar
						.getInstance(java.util.TimeZone.getTimeZone("UTC"));

				java.sql.Connection conn_talendLogs_DB = null;
				String dbUser_talendLogs_DB = null;
				dbschema_talendLogs_DB = (String) globalMap.get("dbschema_connectionStatsLogs");
				conn_talendLogs_DB = (java.sql.Connection) globalMap.get("conn_connectionStatsLogs");

				int batchSize_talendLogs_DB = 10000;
				int batchSizeCounter_talendLogs_DB = 0;

				if (dbschema_talendLogs_DB == null || dbschema_talendLogs_DB.trim().length() == 0) {
					tableName_talendLogs_DB = "log";
				} else {
					tableName_talendLogs_DB = dbschema_talendLogs_DB + "].[" + "log";
				}
				int count_talendLogs_DB = 0;

				// [%connection%][checktable][tableName]
				String keyCheckTable_talendLogs_DB = conn_talendLogs_DB + "[checktable]" + "[" + "log" + "]";

				if (GlobalResource.resourceMap.get(keyCheckTable_talendLogs_DB) == null) {// }

					synchronized (GlobalResource.resourceLockMap.get(keyCheckTable_talendLogs_DB)) {// }
						if (GlobalResource.resourceMap.get(keyCheckTable_talendLogs_DB) == null) {// }
							boolean whetherExist_talendLogs_DB = false;
							try (java.sql.Statement isExistStmt_talendLogs_DB = conn_talendLogs_DB.createStatement()) {
								try {
									isExistStmt_talendLogs_DB
											.execute("SELECT TOP 1 1 FROM [" + tableName_talendLogs_DB + "]");
									whetherExist_talendLogs_DB = true;
								} catch (java.lang.Exception e) {
									whetherExist_talendLogs_DB = false;
								}
							}
							if (!whetherExist_talendLogs_DB) {
								try (java.sql.Statement stmtCreate_talendLogs_DB = conn_talendLogs_DB
										.createStatement()) {
									stmtCreate_talendLogs_DB.execute("CREATE TABLE [" + tableName_talendLogs_DB
											+ "]([moment] DATETIME ,[pid] VARCHAR(20)  ,[root_pid] VARCHAR(20)  ,[father_pid] VARCHAR(20)  ,[project] VARCHAR(50)  ,[job] VARCHAR(255)  ,[context] VARCHAR(50)  ,[priority] INT ,[type] VARCHAR(255)  ,[origin] VARCHAR(255)  ,[message] VARCHAR(255)  ,[code] INT )");
								}
							}
							GlobalResource.resourceMap.put(keyCheckTable_talendLogs_DB, true);
							// {{{
						} // end of if
					} // end synchronized
				}
				String insert_talendLogs_DB = "INSERT INTO [" + tableName_talendLogs_DB
						+ "] ([moment],[pid],[root_pid],[father_pid],[project],[job],[context],[priority],[type],[origin],[message],[code]) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_talendLogs_DB = null;
				String keyPsmt_talendLogs_DB = conn_talendLogs_DB + "[psmt]" + "[" + "log" + "]";
				pstmt_talendLogs_DB = SharedDBPreparedStatement.getSharedPreparedStatement(conn_talendLogs_DB,
						insert_talendLogs_DB, keyPsmt_talendLogs_DB);
				resourceMap.put("pstmt_talendLogs_DB", pstmt_talendLogs_DB);
				boolean isShareIdentity_talendLogs_DB = globalMap
						.get("shareIdentitySetting_connectionStatsLogs") != null
						&& (Boolean) globalMap.get("shareIdentitySetting_connectionStatsLogs") == true;

				/**
				 * [talendLogs_DB begin ] stop
				 */

				/**
				 * [talendLogs_LOGS begin ] start
				 */

				ok_Hash.put("talendLogs_LOGS", false);
				start_Hash.put("talendLogs_LOGS", System.currentTimeMillis());

				currentVirtualComponent = "talendLogs_LOGS";

				currentComponent = "talendLogs_LOGS";

				int tos_count_talendLogs_LOGS = 0;

				try {
					for (LogCatcherUtils.LogCatcherMessage lcm : talendLogs_LOGS.getMessages()) {
						row_talendLogs_LOGS.type = lcm.getType();
						row_talendLogs_LOGS.origin = (lcm.getOrigin() == null || lcm.getOrigin().length() < 1 ? null
								: lcm.getOrigin());
						row_talendLogs_LOGS.priority = lcm.getPriority();
						row_talendLogs_LOGS.message = lcm.getMessage();
						row_talendLogs_LOGS.code = lcm.getCode();

						row_talendLogs_LOGS.moment = java.util.Calendar.getInstance().getTime();

						row_talendLogs_LOGS.pid = pid;
						row_talendLogs_LOGS.root_pid = rootPid;
						row_talendLogs_LOGS.father_pid = fatherPid;

						row_talendLogs_LOGS.project = projectName;
						row_talendLogs_LOGS.job = jobName;
						row_talendLogs_LOGS.context = contextStr;

						/**
						 * [talendLogs_LOGS begin ] stop
						 */

						/**
						 * [talendLogs_LOGS main ] start
						 */

						currentVirtualComponent = "talendLogs_LOGS";

						currentComponent = "talendLogs_LOGS";

						tos_count_talendLogs_LOGS++;

						/**
						 * [talendLogs_LOGS main ] stop
						 */

						/**
						 * [talendLogs_LOGS process_data_begin ] start
						 */

						currentVirtualComponent = "talendLogs_LOGS";

						currentComponent = "talendLogs_LOGS";

						/**
						 * [talendLogs_LOGS process_data_begin ] stop
						 */

						/**
						 * [talendLogs_DB main ] start
						 */

						currentVirtualComponent = "talendLogs_DB";

						currentComponent = "talendLogs_DB";

						whetherReject_talendLogs_DB = false;
						if (row_talendLogs_LOGS.moment != null) {
							pstmt_talendLogs_DB.setTimestamp(1,
									new java.sql.Timestamp(row_talendLogs_LOGS.moment.getTime()));
						} else {
							pstmt_talendLogs_DB.setNull(1, java.sql.Types.DATE);
						}

						if (row_talendLogs_LOGS.pid == null) {
							pstmt_talendLogs_DB.setNull(2, java.sql.Types.VARCHAR);
						} else {
							pstmt_talendLogs_DB.setString(2, row_talendLogs_LOGS.pid);
						}

						if (row_talendLogs_LOGS.root_pid == null) {
							pstmt_talendLogs_DB.setNull(3, java.sql.Types.VARCHAR);
						} else {
							pstmt_talendLogs_DB.setString(3, row_talendLogs_LOGS.root_pid);
						}

						if (row_talendLogs_LOGS.father_pid == null) {
							pstmt_talendLogs_DB.setNull(4, java.sql.Types.VARCHAR);
						} else {
							pstmt_talendLogs_DB.setString(4, row_talendLogs_LOGS.father_pid);
						}

						if (row_talendLogs_LOGS.project == null) {
							pstmt_talendLogs_DB.setNull(5, java.sql.Types.VARCHAR);
						} else {
							pstmt_talendLogs_DB.setString(5, row_talendLogs_LOGS.project);
						}

						if (row_talendLogs_LOGS.job == null) {
							pstmt_talendLogs_DB.setNull(6, java.sql.Types.VARCHAR);
						} else {
							pstmt_talendLogs_DB.setString(6, row_talendLogs_LOGS.job);
						}

						if (row_talendLogs_LOGS.context == null) {
							pstmt_talendLogs_DB.setNull(7, java.sql.Types.VARCHAR);
						} else {
							pstmt_talendLogs_DB.setString(7, row_talendLogs_LOGS.context);
						}

						if (row_talendLogs_LOGS.priority == null) {
							pstmt_talendLogs_DB.setNull(8, java.sql.Types.INTEGER);
						} else {
							pstmt_talendLogs_DB.setInt(8, row_talendLogs_LOGS.priority);
						}

						if (row_talendLogs_LOGS.type == null) {
							pstmt_talendLogs_DB.setNull(9, java.sql.Types.VARCHAR);
						} else {
							pstmt_talendLogs_DB.setString(9, row_talendLogs_LOGS.type);
						}

						if (row_talendLogs_LOGS.origin == null) {
							pstmt_talendLogs_DB.setNull(10, java.sql.Types.VARCHAR);
						} else {
							pstmt_talendLogs_DB.setString(10, row_talendLogs_LOGS.origin);
						}

						if (row_talendLogs_LOGS.message == null) {
							pstmt_talendLogs_DB.setNull(11, java.sql.Types.VARCHAR);
						} else {
							pstmt_talendLogs_DB.setString(11, row_talendLogs_LOGS.message);
						}

						if (row_talendLogs_LOGS.code == null) {
							pstmt_talendLogs_DB.setNull(12, java.sql.Types.INTEGER);
						} else {
							pstmt_talendLogs_DB.setInt(12, row_talendLogs_LOGS.code);
						}

						pstmt_talendLogs_DB.addBatch();
						nb_line_talendLogs_DB++;

						batchSizeCounter_talendLogs_DB++;

						////////// batch execute by batch size///////
						class LimitBytesHelper_talendLogs_DB {
							public int limitBytePart1(int counter, java.sql.PreparedStatement pstmt_talendLogs_DB)
									throws Exception {
								try {

									for (int countEach_talendLogs_DB : pstmt_talendLogs_DB.executeBatch()) {
										if (countEach_talendLogs_DB == -2 || countEach_talendLogs_DB == -3) {
											break;
										}
										counter += countEach_talendLogs_DB;
									}

								} catch (java.sql.BatchUpdateException e) {

									int countSum_talendLogs_DB = 0;
									for (int countEach_talendLogs_DB : e.getUpdateCounts()) {
										counter += (countEach_talendLogs_DB < 0 ? 0 : countEach_talendLogs_DB);
									}

									System.err.println(e.getMessage());

								}
								return counter;
							}

							public int limitBytePart2(int counter, java.sql.PreparedStatement pstmt_talendLogs_DB)
									throws Exception {
								try {

									for (int countEach_talendLogs_DB : pstmt_talendLogs_DB.executeBatch()) {
										if (countEach_talendLogs_DB == -2 || countEach_talendLogs_DB == -3) {
											break;
										}
										counter += countEach_talendLogs_DB;
									}

								} catch (java.sql.BatchUpdateException e) {

									for (int countEach_talendLogs_DB : e.getUpdateCounts()) {
										counter += (countEach_talendLogs_DB < 0 ? 0 : countEach_talendLogs_DB);
									}

									System.err.println(e.getMessage());

								}
								return counter;
							}
						}
						if ((batchSize_talendLogs_DB > 0)
								&& (batchSize_talendLogs_DB <= batchSizeCounter_talendLogs_DB)) {

							insertedCount_talendLogs_DB = new LimitBytesHelper_talendLogs_DB()
									.limitBytePart1(insertedCount_talendLogs_DB, pstmt_talendLogs_DB);

							batchSizeCounter_talendLogs_DB = 0;
						}

						//////////// commit every////////////

						tos_count_talendLogs_DB++;

						/**
						 * [talendLogs_DB main ] stop
						 */

						/**
						 * [talendLogs_DB process_data_begin ] start
						 */

						currentVirtualComponent = "talendLogs_DB";

						currentComponent = "talendLogs_DB";

						/**
						 * [talendLogs_DB process_data_begin ] stop
						 */

						/**
						 * [talendLogs_DB process_data_end ] start
						 */

						currentVirtualComponent = "talendLogs_DB";

						currentComponent = "talendLogs_DB";

						/**
						 * [talendLogs_DB process_data_end ] stop
						 */

						/**
						 * [talendLogs_LOGS process_data_end ] start
						 */

						currentVirtualComponent = "talendLogs_LOGS";

						currentComponent = "talendLogs_LOGS";

						/**
						 * [talendLogs_LOGS process_data_end ] stop
						 */

						/**
						 * [talendLogs_LOGS end ] start
						 */

						currentVirtualComponent = "talendLogs_LOGS";

						currentComponent = "talendLogs_LOGS";

					}
				} catch (Exception e_talendLogs_LOGS) {
					logIgnoredError(String.format(
							"talendLogs_LOGS - tLogCatcher failed to process log message(s) due to internal error: %s",
							e_talendLogs_LOGS), e_talendLogs_LOGS);
				}

				ok_Hash.put("talendLogs_LOGS", true);
				end_Hash.put("talendLogs_LOGS", System.currentTimeMillis());

				/**
				 * [talendLogs_LOGS end ] stop
				 */

				/**
				 * [talendLogs_DB end ] start
				 */

				currentVirtualComponent = "talendLogs_DB";

				currentComponent = "talendLogs_DB";

				try {
					int countSum_talendLogs_DB = 0;
					if (pstmt_talendLogs_DB != null && batchSizeCounter_talendLogs_DB > 0) {

						for (int countEach_talendLogs_DB : pstmt_talendLogs_DB.executeBatch()) {
							if (countEach_talendLogs_DB == -2 || countEach_talendLogs_DB == -3) {
								break;
							}
							countSum_talendLogs_DB += countEach_talendLogs_DB;
						}

					}

					insertedCount_talendLogs_DB += countSum_talendLogs_DB;

				} catch (java.sql.BatchUpdateException e) {

					int countSum_talendLogs_DB = 0;
					for (int countEach_talendLogs_DB : e.getUpdateCounts()) {
						countSum_talendLogs_DB += (countEach_talendLogs_DB < 0 ? 0 : countEach_talendLogs_DB);
					}

					insertedCount_talendLogs_DB += countSum_talendLogs_DB;

					System.err.println(e.getMessage());

				}
				if (pstmt_talendLogs_DB != null) {

					SharedDBPreparedStatement.releasePreparedStatement(keyPsmt_talendLogs_DB);

				}
				resourceMap.put("statementClosed_talendLogs_DB", true);

				nb_line_deleted_talendLogs_DB = nb_line_deleted_talendLogs_DB + deletedCount_talendLogs_DB;
				nb_line_update_talendLogs_DB = nb_line_update_talendLogs_DB + updatedCount_talendLogs_DB;
				nb_line_inserted_talendLogs_DB = nb_line_inserted_talendLogs_DB + insertedCount_talendLogs_DB;
				nb_line_rejected_talendLogs_DB = nb_line_rejected_talendLogs_DB + rejectedCount_talendLogs_DB;

				globalMap.put("talendLogs_DB_NB_LINE", nb_line_talendLogs_DB);
				globalMap.put("talendLogs_DB_NB_LINE_UPDATED", nb_line_update_talendLogs_DB);
				globalMap.put("talendLogs_DB_NB_LINE_INSERTED", nb_line_inserted_talendLogs_DB);
				globalMap.put("talendLogs_DB_NB_LINE_DELETED", nb_line_deleted_talendLogs_DB);
				globalMap.put("talendLogs_DB_NB_LINE_REJECTED", nb_line_rejected_talendLogs_DB);

				ok_Hash.put("talendLogs_DB", true);
				end_Hash.put("talendLogs_DB", System.currentTimeMillis());

				/**
				 * [talendLogs_DB end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:talendLogs_LOGS:sub_ok_talendLogs_connectionStatsLogs_Commit", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			connectionStatsLogs_CommitProcess(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [talendLogs_LOGS finally ] start
				 */

				currentVirtualComponent = "talendLogs_LOGS";

				currentComponent = "talendLogs_LOGS";

				/**
				 * [talendLogs_LOGS finally ] stop
				 */

				/**
				 * [talendLogs_DB finally ] start
				 */

				currentVirtualComponent = "talendLogs_DB";

				currentComponent = "talendLogs_DB";

				if (resourceMap.get("statementClosed_talendLogs_DB") == null) {
					java.sql.PreparedStatement pstmtToClose_talendLogs_DB = null;
					if ((pstmtToClose_talendLogs_DB = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_talendLogs_DB")) != null) {
						pstmtToClose_talendLogs_DB.close();
					}
				}

				/**
				 * [talendLogs_DB finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("talendLogs_LOGS_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final MASTERFILE_INTEGRATION_BDD MASTERFILE_INTEGRATION_BDDClass = new MASTERFILE_INTEGRATION_BDD();

		int exitCode = MASTERFILE_INTEGRATION_BDDClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = MASTERFILE_INTEGRATION_BDD.class.getClassLoader()
					.getResourceAsStream("dev/masterfile_integration_bdd_0_43/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = MASTERFILE_INTEGRATION_BDD.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
					context.setContextType("IntegrationPath", "id_String");
					context.IntegrationPath = (String) context.getProperty("IntegrationPath");
					context.setContextType("LogPath", "id_String");
					context.LogPath = (String) context.getProperty("LogPath");
					context.setContextType("insertSQLMode", "id_Boolean");
					try {
						context.insertSQLMode = routines.system.ParserUtils
								.parseTo_Boolean(context.getProperty("insertSQLMode"));
					} catch (NumberFormatException e) {
						System.err.println(String.format("Null value will be used for context parameter %s: %s",
								"insertSQLMode", e.getMessage()));
						context.insertSQLMode = null;
					}
					context.setContextType("new1", "id_String");
					context.new1 = (String) context.getProperty("new1");
					context.setContextType("SQLSERVER_AdditionalParams", "id_String");
					context.SQLSERVER_AdditionalParams = (String) context.getProperty("SQLSERVER_AdditionalParams");
					context.setContextType("SQLSERVER_Database", "id_String");
					context.SQLSERVER_Database = (String) context.getProperty("SQLSERVER_Database");
					context.setContextType("SQLSERVER_Login", "id_String");
					context.SQLSERVER_Login = (String) context.getProperty("SQLSERVER_Login");
					context.setContextType("SQLSERVER_Password", "id_Password");
					String pwd_SQLSERVER_Password_value = context.getProperty("SQLSERVER_Password");
					context.SQLSERVER_Password = null;
					if (pwd_SQLSERVER_Password_value != null) {
						if (context_param.containsKey("SQLSERVER_Password")) {// no need to decrypt if it come from
																				// program argument or parent job
																				// runtime
							context.SQLSERVER_Password = pwd_SQLSERVER_Password_value;
						} else if (!pwd_SQLSERVER_Password_value.isEmpty()) {
							try {
								context.SQLSERVER_Password = routines.system.PasswordEncryptUtil
										.decryptPassword(pwd_SQLSERVER_Password_value);
								context.put("SQLSERVER_Password", context.SQLSERVER_Password);
							} catch (java.lang.RuntimeException e) {
								// do nothing
							}
						}
					}
					context.setContextType("SQLSERVER_Port", "id_String");
					context.SQLSERVER_Port = (String) context.getProperty("SQLSERVER_Port");
					context.setContextType("SQLSERVER_Schema", "id_String");
					context.SQLSERVER_Schema = (String) context.getProperty("SQLSERVER_Schema");
					context.setContextType("SQLSERVER_Server", "id_String");
					context.SQLSERVER_Server = (String) context.getProperty("SQLSERVER_Server");
					context.setContextType("SQLSERVER_LOG_AdditionalParams", "id_String");
					context.SQLSERVER_LOG_AdditionalParams = (String) context
							.getProperty("SQLSERVER_LOG_AdditionalParams");
					context.setContextType("SQLSERVER_LOG_Database", "id_String");
					context.SQLSERVER_LOG_Database = (String) context.getProperty("SQLSERVER_LOG_Database");
					context.setContextType("SQLSERVER_LOG_Login", "id_String");
					context.SQLSERVER_LOG_Login = (String) context.getProperty("SQLSERVER_LOG_Login");
					context.setContextType("SQLSERVER_LOG_Password", "id_Password");
					String pwd_SQLSERVER_LOG_Password_value = context.getProperty("SQLSERVER_LOG_Password");
					context.SQLSERVER_LOG_Password = null;
					if (pwd_SQLSERVER_LOG_Password_value != null) {
						if (context_param.containsKey("SQLSERVER_LOG_Password")) {// no need to decrypt if it come from
																					// program argument or parent job
																					// runtime
							context.SQLSERVER_LOG_Password = pwd_SQLSERVER_LOG_Password_value;
						} else if (!pwd_SQLSERVER_LOG_Password_value.isEmpty()) {
							try {
								context.SQLSERVER_LOG_Password = routines.system.PasswordEncryptUtil
										.decryptPassword(pwd_SQLSERVER_LOG_Password_value);
								context.put("SQLSERVER_LOG_Password", context.SQLSERVER_LOG_Password);
							} catch (java.lang.RuntimeException e) {
								// do nothing
							}
						}
					}
					context.setContextType("SQLSERVER_LOG_Port", "id_String");
					context.SQLSERVER_LOG_Port = (String) context.getProperty("SQLSERVER_LOG_Port");
					context.setContextType("SQLSERVER_LOG_Schema", "id_String");
					context.SQLSERVER_LOG_Schema = (String) context.getProperty("SQLSERVER_LOG_Schema");
					context.setContextType("SQLSERVER_LOG_Server", "id_String");
					context.SQLSERVER_LOG_Server = (String) context.getProperty("SQLSERVER_LOG_Server");
					context.setContextType("SQLSERVERSCHEMA_MASTERFILE_AdditionalParams", "id_String");
					context.SQLSERVERSCHEMA_MASTERFILE_AdditionalParams = (String) context
							.getProperty("SQLSERVERSCHEMA_MASTERFILE_AdditionalParams");
					context.setContextType("SQLSERVERSCHEMA_MASTERFILE_Database", "id_String");
					context.SQLSERVERSCHEMA_MASTERFILE_Database = (String) context
							.getProperty("SQLSERVERSCHEMA_MASTERFILE_Database");
					context.setContextType("SQLSERVERSCHEMA_MASTERFILE_Login", "id_String");
					context.SQLSERVERSCHEMA_MASTERFILE_Login = (String) context
							.getProperty("SQLSERVERSCHEMA_MASTERFILE_Login");
					context.setContextType("SQLSERVERSCHEMA_MASTERFILE_Password", "id_Password");
					String pwd_SQLSERVERSCHEMA_MASTERFILE_Password_value = context
							.getProperty("SQLSERVERSCHEMA_MASTERFILE_Password");
					context.SQLSERVERSCHEMA_MASTERFILE_Password = null;
					if (pwd_SQLSERVERSCHEMA_MASTERFILE_Password_value != null) {
						if (context_param.containsKey("SQLSERVERSCHEMA_MASTERFILE_Password")) {// no need to decrypt if
																								// it come from program
																								// argument or parent
																								// job runtime
							context.SQLSERVERSCHEMA_MASTERFILE_Password = pwd_SQLSERVERSCHEMA_MASTERFILE_Password_value;
						} else if (!pwd_SQLSERVERSCHEMA_MASTERFILE_Password_value.isEmpty()) {
							try {
								context.SQLSERVERSCHEMA_MASTERFILE_Password = routines.system.PasswordEncryptUtil
										.decryptPassword(pwd_SQLSERVERSCHEMA_MASTERFILE_Password_value);
								context.put("SQLSERVERSCHEMA_MASTERFILE_Password",
										context.SQLSERVERSCHEMA_MASTERFILE_Password);
							} catch (java.lang.RuntimeException e) {
								// do nothing
							}
						}
					}
					context.setContextType("SQLSERVERSCHEMA_MASTERFILE_Port", "id_String");
					context.SQLSERVERSCHEMA_MASTERFILE_Port = (String) context
							.getProperty("SQLSERVERSCHEMA_MASTERFILE_Port");
					context.setContextType("SQLSERVERSCHEMA_MASTERFILE_Schema", "id_String");
					context.SQLSERVERSCHEMA_MASTERFILE_Schema = (String) context
							.getProperty("SQLSERVERSCHEMA_MASTERFILE_Schema");
					context.setContextType("SQLSERVERSCHEMA_MASTERFILE_Server", "id_String");
					context.SQLSERVERSCHEMA_MASTERFILE_Server = (String) context
							.getProperty("SQLSERVERSCHEMA_MASTERFILE_Server");
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("IntegrationPath")) {
				context.IntegrationPath = (String) parentContextMap.get("IntegrationPath");
			}
			if (parentContextMap.containsKey("LogPath")) {
				context.LogPath = (String) parentContextMap.get("LogPath");
			}
			if (parentContextMap.containsKey("insertSQLMode")) {
				context.insertSQLMode = (Boolean) parentContextMap.get("insertSQLMode");
			}
			if (parentContextMap.containsKey("new1")) {
				context.new1 = (String) parentContextMap.get("new1");
			}
			if (parentContextMap.containsKey("SQLSERVER_AdditionalParams")) {
				context.SQLSERVER_AdditionalParams = (String) parentContextMap.get("SQLSERVER_AdditionalParams");
			}
			if (parentContextMap.containsKey("SQLSERVER_Database")) {
				context.SQLSERVER_Database = (String) parentContextMap.get("SQLSERVER_Database");
			}
			if (parentContextMap.containsKey("SQLSERVER_Login")) {
				context.SQLSERVER_Login = (String) parentContextMap.get("SQLSERVER_Login");
			}
			if (parentContextMap.containsKey("SQLSERVER_Password")) {
				context.SQLSERVER_Password = (java.lang.String) parentContextMap.get("SQLSERVER_Password");
			}
			if (parentContextMap.containsKey("SQLSERVER_Port")) {
				context.SQLSERVER_Port = (String) parentContextMap.get("SQLSERVER_Port");
			}
			if (parentContextMap.containsKey("SQLSERVER_Schema")) {
				context.SQLSERVER_Schema = (String) parentContextMap.get("SQLSERVER_Schema");
			}
			if (parentContextMap.containsKey("SQLSERVER_Server")) {
				context.SQLSERVER_Server = (String) parentContextMap.get("SQLSERVER_Server");
			}
			if (parentContextMap.containsKey("SQLSERVER_LOG_AdditionalParams")) {
				context.SQLSERVER_LOG_AdditionalParams = (String) parentContextMap
						.get("SQLSERVER_LOG_AdditionalParams");
			}
			if (parentContextMap.containsKey("SQLSERVER_LOG_Database")) {
				context.SQLSERVER_LOG_Database = (String) parentContextMap.get("SQLSERVER_LOG_Database");
			}
			if (parentContextMap.containsKey("SQLSERVER_LOG_Login")) {
				context.SQLSERVER_LOG_Login = (String) parentContextMap.get("SQLSERVER_LOG_Login");
			}
			if (parentContextMap.containsKey("SQLSERVER_LOG_Password")) {
				context.SQLSERVER_LOG_Password = (java.lang.String) parentContextMap.get("SQLSERVER_LOG_Password");
			}
			if (parentContextMap.containsKey("SQLSERVER_LOG_Port")) {
				context.SQLSERVER_LOG_Port = (String) parentContextMap.get("SQLSERVER_LOG_Port");
			}
			if (parentContextMap.containsKey("SQLSERVER_LOG_Schema")) {
				context.SQLSERVER_LOG_Schema = (String) parentContextMap.get("SQLSERVER_LOG_Schema");
			}
			if (parentContextMap.containsKey("SQLSERVER_LOG_Server")) {
				context.SQLSERVER_LOG_Server = (String) parentContextMap.get("SQLSERVER_LOG_Server");
			}
			if (parentContextMap.containsKey("SQLSERVERSCHEMA_MASTERFILE_AdditionalParams")) {
				context.SQLSERVERSCHEMA_MASTERFILE_AdditionalParams = (String) parentContextMap
						.get("SQLSERVERSCHEMA_MASTERFILE_AdditionalParams");
			}
			if (parentContextMap.containsKey("SQLSERVERSCHEMA_MASTERFILE_Database")) {
				context.SQLSERVERSCHEMA_MASTERFILE_Database = (String) parentContextMap
						.get("SQLSERVERSCHEMA_MASTERFILE_Database");
			}
			if (parentContextMap.containsKey("SQLSERVERSCHEMA_MASTERFILE_Login")) {
				context.SQLSERVERSCHEMA_MASTERFILE_Login = (String) parentContextMap
						.get("SQLSERVERSCHEMA_MASTERFILE_Login");
			}
			if (parentContextMap.containsKey("SQLSERVERSCHEMA_MASTERFILE_Password")) {
				context.SQLSERVERSCHEMA_MASTERFILE_Password = (java.lang.String) parentContextMap
						.get("SQLSERVERSCHEMA_MASTERFILE_Password");
			}
			if (parentContextMap.containsKey("SQLSERVERSCHEMA_MASTERFILE_Port")) {
				context.SQLSERVERSCHEMA_MASTERFILE_Port = (String) parentContextMap
						.get("SQLSERVERSCHEMA_MASTERFILE_Port");
			}
			if (parentContextMap.containsKey("SQLSERVERSCHEMA_MASTERFILE_Schema")) {
				context.SQLSERVERSCHEMA_MASTERFILE_Schema = (String) parentContextMap
						.get("SQLSERVERSCHEMA_MASTERFILE_Schema");
			}
			if (parentContextMap.containsKey("SQLSERVERSCHEMA_MASTERFILE_Server")) {
				context.SQLSERVERSCHEMA_MASTERFILE_Server = (String) parentContextMap
						.get("SQLSERVERSCHEMA_MASTERFILE_Server");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		parametersToEncrypt.add("SQLSERVER_Password");
		parametersToEncrypt.add("SQLSERVER_LOG_Password");
		parametersToEncrypt.add("SQLSERVERSCHEMA_MASTERFILE_Password");
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		try {
			errorCode = null;
			preStaLogConProcess(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_preStaLogCon) {
			globalMap.put("preStaLogCon_SUBPROCESS_STATE", -1);

			e_preStaLogCon.printStackTrace();

		}

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tWarn_11Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tWarn_11) {
			globalMap.put("tWarn_11_SUBPROCESS_STATE", -1);

			e_tWarn_11.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		try {
			errorCode = null;
			tPostjob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPostjob_1) {
			globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

			e_tPostjob_1.printStackTrace();

		}

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : MASTERFILE_INTEGRATION_BDD");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeSqlDbConnections();

	}

	private void closeSqlDbConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_connectionStatsLogs");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_connectionStatsLogs", globalMap.get("conn_connectionStatsLogs"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 330688 characters generated by Talend Open Studio for Data Integration on the
 * 29 décembre 2023 11:01:15 GMT
 ************************************************************************************************/