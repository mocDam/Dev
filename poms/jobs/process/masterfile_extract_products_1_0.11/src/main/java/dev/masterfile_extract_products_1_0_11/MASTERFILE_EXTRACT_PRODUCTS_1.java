// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package dev.masterfile_extract_products_1_0_11;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJava_1
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: MASTERFILE_EXTRACT_PRODUCTS_1 Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.3.1.20191031_1204-M3
 * @status DEV
 */
public class MASTERFILE_EXTRACT_PRODUCTS_1 implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(ErrorHeader != null){
				
					this.setProperty("ErrorHeader", ErrorHeader.toString());
				
			}
			
			if(hasErrorHeader != null){
				
					this.setProperty("hasErrorHeader", hasErrorHeader.toString());
				
			}
			
			if(dateValidation != null){
				
					this.setProperty("dateValidation", dateValidation.toString());
				
			}
			
			if(timeValidation != null){
				
					this.setProperty("timeValidation", timeValidation.toString());
				
			}
			
			if(ReferentielPath != null){
				
					this.setProperty("ReferentielPath", ReferentielPath.toString());
				
			}
			
			if(IntegrationExcelPath != null){
				
					this.setProperty("IntegrationExcelPath", IntegrationExcelPath.toString());
				
			}
			
			if(ExcelFileName != null){
				
					this.setProperty("ExcelFileName", ExcelFileName.toString());
				
			}
			
			if(LogPath != null){
				
					this.setProperty("LogPath", LogPath.toString());
				
			}
			
			if(isNike != null){
				
					this.setProperty("isNike", isNike.toString());
				
			}
			
			if(ExtractPath != null){
				
					this.setProperty("ExtractPath", ExtractPath.toString());
				
			}
			
			if(ExtractPathHBE != null){
				
					this.setProperty("ExtractPathHBE", ExtractPathHBE.toString());
				
			}
			
			if(ExtractPathOTHER != null){
				
					this.setProperty("ExtractPathOTHER", ExtractPathOTHER.toString());
				
			}
			
			if(errorFile != null){
				
					this.setProperty("errorFile", errorFile.toString());
				
			}
			
			if(CreationDate != null){
				
					this.setProperty("CreationDate", CreationDate.toString());
				
			}
			
			if(SQLSERVER_Server != null){
				
					this.setProperty("SQLSERVER_Server", SQLSERVER_Server.toString());
				
			}
			
			if(SQLSERVER_Password != null){
				
					this.setProperty("SQLSERVER_Password", SQLSERVER_Password.toString());
				
			}
			
			if(SQLSERVER_AdditionalParams != null){
				
					this.setProperty("SQLSERVER_AdditionalParams", SQLSERVER_AdditionalParams.toString());
				
			}
			
			if(SQLSERVER_Database != null){
				
					this.setProperty("SQLSERVER_Database", SQLSERVER_Database.toString());
				
			}
			
			if(SQLSERVER_Port != null){
				
					this.setProperty("SQLSERVER_Port", SQLSERVER_Port.toString());
				
			}
			
			if(SQLSERVER_Schema != null){
				
					this.setProperty("SQLSERVER_Schema", SQLSERVER_Schema.toString());
				
			}
			
			if(SQLSERVER_Login != null){
				
					this.setProperty("SQLSERVER_Login", SQLSERVER_Login.toString());
				
			}
			
			if(SQLSERVER_LOG_Schema != null){
				
					this.setProperty("SQLSERVER_LOG_Schema", SQLSERVER_LOG_Schema.toString());
				
			}
			
			if(SQLSERVER_LOG_Server != null){
				
					this.setProperty("SQLSERVER_LOG_Server", SQLSERVER_LOG_Server.toString());
				
			}
			
			if(SQLSERVER_LOG_AdditionalParams != null){
				
					this.setProperty("SQLSERVER_LOG_AdditionalParams", SQLSERVER_LOG_AdditionalParams.toString());
				
			}
			
			if(SQLSERVER_LOG_Login != null){
				
					this.setProperty("SQLSERVER_LOG_Login", SQLSERVER_LOG_Login.toString());
				
			}
			
			if(SQLSERVER_LOG_Port != null){
				
					this.setProperty("SQLSERVER_LOG_Port", SQLSERVER_LOG_Port.toString());
				
			}
			
			if(SQLSERVER_LOG_Database != null){
				
					this.setProperty("SQLSERVER_LOG_Database", SQLSERVER_LOG_Database.toString());
				
			}
			
			if(SQLSERVER_LOG_Password != null){
				
					this.setProperty("SQLSERVER_LOG_Password", SQLSERVER_LOG_Password.toString());
				
			}
			
		}

public String ErrorHeader;
public String getErrorHeader(){
	return this.ErrorHeader;
}
public Boolean hasErrorHeader;
public Boolean getHasErrorHeader(){
	return this.hasErrorHeader;
}
public String dateValidation;
public String getDateValidation(){
	return this.dateValidation;
}
public String timeValidation;
public String getTimeValidation(){
	return this.timeValidation;
}
public String ReferentielPath;
public String getReferentielPath(){
	return this.ReferentielPath;
}
public String IntegrationExcelPath;
public String getIntegrationExcelPath(){
	return this.IntegrationExcelPath;
}
public String ExcelFileName;
public String getExcelFileName(){
	return this.ExcelFileName;
}
public String LogPath;
public String getLogPath(){
	return this.LogPath;
}
public Boolean isNike;
public Boolean getIsNike(){
	return this.isNike;
}
public String ExtractPath;
public String getExtractPath(){
	return this.ExtractPath;
}
public String ExtractPathHBE;
public String getExtractPathHBE(){
	return this.ExtractPathHBE;
}
public String ExtractPathOTHER;
public String getExtractPathOTHER(){
	return this.ExtractPathOTHER;
}
public String errorFile;
public String getErrorFile(){
	return this.errorFile;
}
public String CreationDate;
public String getCreationDate(){
	return this.CreationDate;
}
public String SQLSERVER_Server;
public String getSQLSERVER_Server(){
	return this.SQLSERVER_Server;
}
public java.lang.String SQLSERVER_Password;
public java.lang.String getSQLSERVER_Password(){
	return this.SQLSERVER_Password;
}
public String SQLSERVER_AdditionalParams;
public String getSQLSERVER_AdditionalParams(){
	return this.SQLSERVER_AdditionalParams;
}
public String SQLSERVER_Database;
public String getSQLSERVER_Database(){
	return this.SQLSERVER_Database;
}
public String SQLSERVER_Port;
public String getSQLSERVER_Port(){
	return this.SQLSERVER_Port;
}
public String SQLSERVER_Schema;
public String getSQLSERVER_Schema(){
	return this.SQLSERVER_Schema;
}
public String SQLSERVER_Login;
public String getSQLSERVER_Login(){
	return this.SQLSERVER_Login;
}
public String SQLSERVER_LOG_Schema;
public String getSQLSERVER_LOG_Schema(){
	return this.SQLSERVER_LOG_Schema;
}
public String SQLSERVER_LOG_Server;
public String getSQLSERVER_LOG_Server(){
	return this.SQLSERVER_LOG_Server;
}
public String SQLSERVER_LOG_AdditionalParams;
public String getSQLSERVER_LOG_AdditionalParams(){
	return this.SQLSERVER_LOG_AdditionalParams;
}
public String SQLSERVER_LOG_Login;
public String getSQLSERVER_LOG_Login(){
	return this.SQLSERVER_LOG_Login;
}
public String SQLSERVER_LOG_Port;
public String getSQLSERVER_LOG_Port(){
	return this.SQLSERVER_LOG_Port;
}
public String SQLSERVER_LOG_Database;
public String getSQLSERVER_LOG_Database(){
	return this.SQLSERVER_LOG_Database;
}
public java.lang.String SQLSERVER_LOG_Password;
public java.lang.String getSQLSERVER_LOG_Password(){
	return this.SQLSERVER_LOG_Password;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.11";
	private final String jobName = "MASTERFILE_EXTRACT_PRODUCTS_1";
	private final String projectName = "DEV";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	LogCatcherUtils talendLogs_LOGS = new LogCatcherUtils();

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				MASTERFILE_EXTRACT_PRODUCTS_1.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(MASTERFILE_EXTRACT_PRODUCTS_1.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
				talendLogs_LOGS.addMessage("Java Exception", currentComponent, 6, e.getClass().getName() + ":" + e.getMessage(), 1);
				talendLogs_LOGSProcess(globalMap);
			}
			} catch (TalendException e) {
				// do nothing
			
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void preStaLogCon_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					preStaLogCon_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUnite_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_19_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUnite_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_27_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_24_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_21_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_25_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_24_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_19_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_20_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_21_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_26_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_25_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_20_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_23_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_23_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_22_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWarn_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tWarn_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_22_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row50_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row22_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row45_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_copyOfcopyOfsortie_fashion_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row49_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void connectionStatsLogs_Commit_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					connectionStatsLogs_Commit_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void connectionStatsLogs_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					connectionStatsLogs_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void talendLogs_LOGS_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							talendLogs_DB_error(exception, errorComponent, globalMap);
						
						}
					
			public void talendLogs_DB_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					talendLogs_LOGS_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void preStaLogCon_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_10_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWarn_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void connectionStatsLogs_Commit_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void connectionStatsLogs_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void talendLogs_LOGS_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	





public void preStaLogConProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("preStaLogCon_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [preStaLogCon begin ] start
	 */

	

	
		
		ok_Hash.put("preStaLogCon", false);
		start_Hash.put("preStaLogCon", System.currentTimeMillis());
		
	
	currentComponent="preStaLogCon";

	
		int tos_count_preStaLogCon = 0;
		

 



/**
 * [preStaLogCon begin ] stop
 */
	
	/**
	 * [preStaLogCon main ] start
	 */

	

	
	
	currentComponent="preStaLogCon";

	

 


	tos_count_preStaLogCon++;

/**
 * [preStaLogCon main ] stop
 */
	
	/**
	 * [preStaLogCon process_data_begin ] start
	 */

	

	
	
	currentComponent="preStaLogCon";

	

 



/**
 * [preStaLogCon process_data_begin ] stop
 */
	
	/**
	 * [preStaLogCon process_data_end ] start
	 */

	

	
	
	currentComponent="preStaLogCon";

	

 



/**
 * [preStaLogCon process_data_end ] stop
 */
	
	/**
	 * [preStaLogCon end ] start
	 */

	

	
	
	currentComponent="preStaLogCon";

	

 

ok_Hash.put("preStaLogCon", true);
end_Hash.put("preStaLogCon", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("after_preStaLogCon_connectionStatsLogs", 0, "ok");
				}
				connectionStatsLogsProcess(globalMap);



/**
 * [preStaLogCon end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [preStaLogCon finally ] start
	 */

	

	
	
	currentComponent="preStaLogCon";

	

 



/**
 * [preStaLogCon finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("preStaLogCon_SUBPROCESS_STATE", 1);
	}
	

public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";

	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tJava_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	

public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";

	
		int tos_count_tJava_1 = 0;
		


System.out.println("SUB JOB EXTRACT PRODUCT 1");
System.out.println(context.ExcelFileName);
System.out.println(context.CreationDate);

 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_begin ] stop
 */
	
	/**
	 * [tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_end ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());




/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	

public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";

	
		int tos_count_tPostjob_1 = 0;
		

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());




/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	


public static class row13Struct implements routines.system.IPersistableRow<row13Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String PRODUCTNUMBER;

				public String getPRODUCTNUMBER () {
					return this.PRODUCTNUMBER;
				}
				
			    public String ATTRIBUTETYPENAME;

				public String getATTRIBUTETYPENAME () {
					return this.ATTRIBUTETYPENAME;
				}
				
			    public String ATTRIBUTENAME;

				public String getATTRIBUTENAME () {
					return this.ATTRIBUTENAME;
				}
				
			    public String TEXTVALUE;

				public String getTEXTVALUE () {
					return this.TEXTVALUE;
				}
				
			    public String INTEGERVALUE;

				public String getINTEGERVALUE () {
					return this.INTEGERVALUE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.PRODUCTNUMBER = readString(dis);
					
					this.ATTRIBUTETYPENAME = readString(dis);
					
					this.ATTRIBUTENAME = readString(dis);
					
					this.TEXTVALUE = readString(dis);
					
					this.INTEGERVALUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTNUMBER,dos);
					
					// String
				
						writeString(this.ATTRIBUTETYPENAME,dos);
					
					// String
				
						writeString(this.ATTRIBUTENAME,dos);
					
					// String
				
						writeString(this.TEXTVALUE,dos);
					
					// String
				
						writeString(this.INTEGERVALUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTNUMBER="+PRODUCTNUMBER);
		sb.append(",ATTRIBUTETYPENAME="+ATTRIBUTETYPENAME);
		sb.append(",ATTRIBUTENAME="+ATTRIBUTENAME);
		sb.append(",TEXTVALUE="+TEXTVALUE);
		sb.append(",INTEGERVALUE="+INTEGERVALUE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row13Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String PRODUCTNUMBER;

				public String getPRODUCTNUMBER () {
					return this.PRODUCTNUMBER;
				}
				
			    public String ATTRIBUTETYPENAME;

				public String getATTRIBUTETYPENAME () {
					return this.ATTRIBUTETYPENAME;
				}
				
			    public String ATTRIBUTENAME;

				public String getATTRIBUTENAME () {
					return this.ATTRIBUTENAME;
				}
				
			    public String TEXTVALUE;

				public String getTEXTVALUE () {
					return this.TEXTVALUE;
				}
				
			    public String INTEGERVALUE;

				public String getINTEGERVALUE () {
					return this.INTEGERVALUE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.PRODUCTNUMBER = readString(dis);
					
					this.ATTRIBUTETYPENAME = readString(dis);
					
					this.ATTRIBUTENAME = readString(dis);
					
					this.TEXTVALUE = readString(dis);
					
					this.INTEGERVALUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTNUMBER,dos);
					
					// String
				
						writeString(this.ATTRIBUTETYPENAME,dos);
					
					// String
				
						writeString(this.ATTRIBUTENAME,dos);
					
					// String
				
						writeString(this.TEXTVALUE,dos);
					
					// String
				
						writeString(this.INTEGERVALUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTNUMBER="+PRODUCTNUMBER);
		sb.append(",ATTRIBUTETYPENAME="+ATTRIBUTETYPENAME);
		sb.append(",ATTRIBUTENAME="+ATTRIBUTENAME);
		sb.append(",TEXTVALUE="+TEXTVALUE);
		sb.append(",INTEGERVALUE="+INTEGERVALUE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String PRODUCTNUMBER;

				public String getPRODUCTNUMBER () {
					return this.PRODUCTNUMBER;
				}
				
			    public String ATTRIBUTETYPENAME;

				public String getATTRIBUTETYPENAME () {
					return this.ATTRIBUTETYPENAME;
				}
				
			    public String ATTRIBUTENAME;

				public String getATTRIBUTENAME () {
					return this.ATTRIBUTENAME;
				}
				
			    public String TEXTVALUE;

				public String getTEXTVALUE () {
					return this.TEXTVALUE;
				}
				
			    public String INTEGERVALUE;

				public String getINTEGERVALUE () {
					return this.INTEGERVALUE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.PRODUCTNUMBER = readString(dis);
					
					this.ATTRIBUTETYPENAME = readString(dis);
					
					this.ATTRIBUTENAME = readString(dis);
					
					this.TEXTVALUE = readString(dis);
					
					this.INTEGERVALUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTNUMBER,dos);
					
					// String
				
						writeString(this.ATTRIBUTETYPENAME,dos);
					
					// String
				
						writeString(this.ATTRIBUTENAME,dos);
					
					// String
				
						writeString(this.TEXTVALUE,dos);
					
					// String
				
						writeString(this.INTEGERVALUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTNUMBER="+PRODUCTNUMBER);
		sb.append(",ATTRIBUTETYPENAME="+ATTRIBUTETYPENAME);
		sb.append(",ATTRIBUTENAME="+ATTRIBUTENAME);
		sb.append(",TEXTVALUE="+TEXTVALUE);
		sb.append(",INTEGERVALUE="+INTEGERVALUE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row11Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String PRODUCTNUMBER;

				public String getPRODUCTNUMBER () {
					return this.PRODUCTNUMBER;
				}
				
			    public String ATTRIBUTETYPENAME;

				public String getATTRIBUTETYPENAME () {
					return this.ATTRIBUTETYPENAME;
				}
				
			    public String ATTRIBUTENAME;

				public String getATTRIBUTENAME () {
					return this.ATTRIBUTENAME;
				}
				
			    public String TEXTVALUE;

				public String getTEXTVALUE () {
					return this.TEXTVALUE;
				}
				
			    public String INTEGERVALUE;

				public String getINTEGERVALUE () {
					return this.INTEGERVALUE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.PRODUCTNUMBER = readString(dis);
					
					this.ATTRIBUTETYPENAME = readString(dis);
					
					this.ATTRIBUTENAME = readString(dis);
					
					this.TEXTVALUE = readString(dis);
					
					this.INTEGERVALUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTNUMBER,dos);
					
					// String
				
						writeString(this.ATTRIBUTETYPENAME,dos);
					
					// String
				
						writeString(this.ATTRIBUTENAME,dos);
					
					// String
				
						writeString(this.TEXTVALUE,dos);
					
					// String
				
						writeString(this.INTEGERVALUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTNUMBER="+PRODUCTNUMBER);
		sb.append(",ATTRIBUTETYPENAME="+ATTRIBUTETYPENAME);
		sb.append(",ATTRIBUTENAME="+ATTRIBUTENAME);
		sb.append(",TEXTVALUE="+TEXTVALUE);
		sb.append(",INTEGERVALUE="+INTEGERVALUE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row12Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row15Struct implements routines.system.IPersistableRow<row15Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String PRODUCTNUMBER;

				public String getPRODUCTNUMBER () {
					return this.PRODUCTNUMBER;
				}
				
			    public String ATTRIBUTETYPENAME;

				public String getATTRIBUTETYPENAME () {
					return this.ATTRIBUTETYPENAME;
				}
				
			    public String ATTRIBUTENAME;

				public String getATTRIBUTENAME () {
					return this.ATTRIBUTENAME;
				}
				
			    public String TEXTVALUE;

				public String getTEXTVALUE () {
					return this.TEXTVALUE;
				}
				
			    public String INTEGERVALUE;

				public String getINTEGERVALUE () {
					return this.INTEGERVALUE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.PRODUCTNUMBER = readString(dis);
					
					this.ATTRIBUTETYPENAME = readString(dis);
					
					this.ATTRIBUTENAME = readString(dis);
					
					this.TEXTVALUE = readString(dis);
					
					this.INTEGERVALUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTNUMBER,dos);
					
					// String
				
						writeString(this.ATTRIBUTETYPENAME,dos);
					
					// String
				
						writeString(this.ATTRIBUTENAME,dos);
					
					// String
				
						writeString(this.TEXTVALUE,dos);
					
					// String
				
						writeString(this.INTEGERVALUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTNUMBER="+PRODUCTNUMBER);
		sb.append(",ATTRIBUTETYPENAME="+ATTRIBUTETYPENAME);
		sb.append(",ATTRIBUTENAME="+ATTRIBUTENAME);
		sb.append(",TEXTVALUE="+TEXTVALUE);
		sb.append(",INTEGERVALUE="+INTEGERVALUE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row15Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row21Struct implements routines.system.IPersistableRow<row21Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String PRODUCTNUMBER;

				public String getPRODUCTNUMBER () {
					return this.PRODUCTNUMBER;
				}
				
			    public String ATTRIBUTETYPENAME;

				public String getATTRIBUTETYPENAME () {
					return this.ATTRIBUTETYPENAME;
				}
				
			    public String ATTRIBUTENAME;

				public String getATTRIBUTENAME () {
					return this.ATTRIBUTENAME;
				}
				
			    public String TEXTVALUE;

				public String getTEXTVALUE () {
					return this.TEXTVALUE;
				}
				
			    public String INTEGERVALUE;

				public String getINTEGERVALUE () {
					return this.INTEGERVALUE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.PRODUCTNUMBER = readString(dis);
					
					this.ATTRIBUTETYPENAME = readString(dis);
					
					this.ATTRIBUTENAME = readString(dis);
					
					this.TEXTVALUE = readString(dis);
					
					this.INTEGERVALUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTNUMBER,dos);
					
					// String
				
						writeString(this.ATTRIBUTETYPENAME,dos);
					
					// String
				
						writeString(this.ATTRIBUTENAME,dos);
					
					// String
				
						writeString(this.TEXTVALUE,dos);
					
					// String
				
						writeString(this.INTEGERVALUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTNUMBER="+PRODUCTNUMBER);
		sb.append(",ATTRIBUTETYPENAME="+ATTRIBUTETYPENAME);
		sb.append(",ATTRIBUTENAME="+ATTRIBUTENAME);
		sb.append(",TEXTVALUE="+TEXTVALUE);
		sb.append(",INTEGERVALUE="+INTEGERVALUE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row21Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row35Struct implements routines.system.IPersistableRow<row35Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String PRODUCTNUMBER;

				public String getPRODUCTNUMBER () {
					return this.PRODUCTNUMBER;
				}
				
			    public String ATTRIBUTETYPENAME;

				public String getATTRIBUTETYPENAME () {
					return this.ATTRIBUTETYPENAME;
				}
				
			    public String ATTRIBUTENAME;

				public String getATTRIBUTENAME () {
					return this.ATTRIBUTENAME;
				}
				
			    public String TEXTVALUE;

				public String getTEXTVALUE () {
					return this.TEXTVALUE;
				}
				
			    public String INTEGERVALUE;

				public String getINTEGERVALUE () {
					return this.INTEGERVALUE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.PRODUCTNUMBER = readString(dis);
					
					this.ATTRIBUTETYPENAME = readString(dis);
					
					this.ATTRIBUTENAME = readString(dis);
					
					this.TEXTVALUE = readString(dis);
					
					this.INTEGERVALUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTNUMBER,dos);
					
					// String
				
						writeString(this.ATTRIBUTETYPENAME,dos);
					
					// String
				
						writeString(this.ATTRIBUTENAME,dos);
					
					// String
				
						writeString(this.TEXTVALUE,dos);
					
					// String
				
						writeString(this.INTEGERVALUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTNUMBER="+PRODUCTNUMBER);
		sb.append(",ATTRIBUTETYPENAME="+ATTRIBUTETYPENAME);
		sb.append(",ATTRIBUTENAME="+ATTRIBUTENAME);
		sb.append(",TEXTVALUE="+TEXTVALUE);
		sb.append(",INTEGERVALUE="+INTEGERVALUE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row35Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row26Struct implements routines.system.IPersistableRow<row26Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String PRODUCTNUMBER;

				public String getPRODUCTNUMBER () {
					return this.PRODUCTNUMBER;
				}
				
			    public String ATTRIBUTETYPENAME;

				public String getATTRIBUTETYPENAME () {
					return this.ATTRIBUTETYPENAME;
				}
				
			    public String ATTRIBUTENAME;

				public String getATTRIBUTENAME () {
					return this.ATTRIBUTENAME;
				}
				
			    public String TEXTVALUE;

				public String getTEXTVALUE () {
					return this.TEXTVALUE;
				}
				
			    public String INTEGERVALUE;

				public String getINTEGERVALUE () {
					return this.INTEGERVALUE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.PRODUCTNUMBER = readString(dis);
					
					this.ATTRIBUTETYPENAME = readString(dis);
					
					this.ATTRIBUTENAME = readString(dis);
					
					this.TEXTVALUE = readString(dis);
					
					this.INTEGERVALUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTNUMBER,dos);
					
					// String
				
						writeString(this.ATTRIBUTETYPENAME,dos);
					
					// String
				
						writeString(this.ATTRIBUTENAME,dos);
					
					// String
				
						writeString(this.TEXTVALUE,dos);
					
					// String
				
						writeString(this.INTEGERVALUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTNUMBER="+PRODUCTNUMBER);
		sb.append(",ATTRIBUTETYPENAME="+ATTRIBUTETYPENAME);
		sb.append(",ATTRIBUTENAME="+ATTRIBUTENAME);
		sb.append(",TEXTVALUE="+TEXTVALUE);
		sb.append(",INTEGERVALUE="+INTEGERVALUE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row26Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row47Struct implements routines.system.IPersistableRow<row47Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String PRODUCTNUMBER;

				public String getPRODUCTNUMBER () {
					return this.PRODUCTNUMBER;
				}
				
			    public String ATTRIBUTETYPENAME;

				public String getATTRIBUTETYPENAME () {
					return this.ATTRIBUTETYPENAME;
				}
				
			    public String ATTRIBUTENAME;

				public String getATTRIBUTENAME () {
					return this.ATTRIBUTENAME;
				}
				
			    public String TEXTVALUE;

				public String getTEXTVALUE () {
					return this.TEXTVALUE;
				}
				
			    public String INTEGERVALUE;

				public String getINTEGERVALUE () {
					return this.INTEGERVALUE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.PRODUCTNUMBER = readString(dis);
					
					this.ATTRIBUTETYPENAME = readString(dis);
					
					this.ATTRIBUTENAME = readString(dis);
					
					this.TEXTVALUE = readString(dis);
					
					this.INTEGERVALUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTNUMBER,dos);
					
					// String
				
						writeString(this.ATTRIBUTETYPENAME,dos);
					
					// String
				
						writeString(this.ATTRIBUTENAME,dos);
					
					// String
				
						writeString(this.TEXTVALUE,dos);
					
					// String
				
						writeString(this.INTEGERVALUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTNUMBER="+PRODUCTNUMBER);
		sb.append(",ATTRIBUTETYPENAME="+ATTRIBUTETYPENAME);
		sb.append(",ATTRIBUTENAME="+ATTRIBUTENAME);
		sb.append(",TEXTVALUE="+TEXTVALUE);
		sb.append(",INTEGERVALUE="+INTEGERVALUE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row47Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tHashInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row11Struct row11 = new row11Struct();

		row12Struct row12 = new row12Struct();

		row15Struct row15 = new row15Struct();

		row21Struct row21 = new row21Struct();

		row26Struct row26 = new row26Struct();

		row35Struct row35 = new row35Struct();

		row47Struct row47 = new row47Struct();

			row9Struct row9 = new row9Struct();
row13Struct row13 = new row13Struct();





	
	/**
	 * [tFileOutputExcel_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_3", false);
		start_Hash.put("tFileOutputExcel_3", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row13");
					}
				
		int tos_count_tFileOutputExcel_3 = 0;
		


		int columnIndex_tFileOutputExcel_3 = 0;
		
		String fileName_tFileOutputExcel_3=context.ExtractPathOTHER + "Product attribute values V3.xlsx";
		int nb_line_tFileOutputExcel_3 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_3 = new org.talend.ExcelTool();
		
		xlsxTool_tFileOutputExcel_3.setSheet("Product attribute values V2");
		xlsxTool_tFileOutputExcel_3.setAppend(false,true);
		xlsxTool_tFileOutputExcel_3.setRecalculateFormula(false);
		xlsxTool_tFileOutputExcel_3.setXY(false,0,10,false);
		
		java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_3 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap.get("concurrentHashMap");
		java.lang.Object lockObj_tFileOutputExcel_3 = chm_tFileOutputExcel_3.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_3", k -> new Object());
		synchronized (lockObj_tFileOutputExcel_3) {
			
				xlsxTool_tFileOutputExcel_3.prepareXlsxFile(fileName_tFileOutputExcel_3);
			
		}
		
		xlsxTool_tFileOutputExcel_3.setFont("");
		
		if (xlsxTool_tFileOutputExcel_3.getStartRow() == 0){
		
		xlsxTool_tFileOutputExcel_3.addRow();
		
		xlsxTool_tFileOutputExcel_3.addCellValue("PRODUCTNUMBER");
		
		xlsxTool_tFileOutputExcel_3.addCellValue("ATTRIBUTETYPENAME");
		
		xlsxTool_tFileOutputExcel_3.addCellValue("ATTRIBUTENAME");
		
		xlsxTool_tFileOutputExcel_3.addCellValue("TEXTVALUE");
		
		xlsxTool_tFileOutputExcel_3.addCellValue("INTEGERVALUE");
		
		nb_line_tFileOutputExcel_3++; 
		
	}
		

 



/**
 * [tFileOutputExcel_3 begin ] stop
 */



	
	/**
	 * [tUniqRow_19 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_19", false);
		start_Hash.put("tUniqRow_19", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_19";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row9");
					}
				
		int tos_count_tUniqRow_19 = 0;
		

	
		class KeyStruct_tUniqRow_19 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String PRODUCTNUMBER;
					String ATTRIBUTENAME;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.PRODUCTNUMBER == null) ? 0 : this.PRODUCTNUMBER.hashCode());
								
								result = prime * result + ((this.ATTRIBUTENAME == null) ? 0 : this.ATTRIBUTENAME.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_19 other = (KeyStruct_tUniqRow_19) obj;
				
									if (this.PRODUCTNUMBER == null) {
										if (other.PRODUCTNUMBER != null) 
											return false;
								
									} else if (!this.PRODUCTNUMBER.equals(other.PRODUCTNUMBER))
								 
										return false;
								
									if (this.ATTRIBUTENAME == null) {
										if (other.ATTRIBUTENAME != null) 
											return false;
								
									} else if (!this.ATTRIBUTENAME.equals(other.ATTRIBUTENAME))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_19 = 0;
int nb_duplicates_tUniqRow_19 = 0;
KeyStruct_tUniqRow_19 finder_tUniqRow_19 = new KeyStruct_tUniqRow_19();
java.util.Set<KeyStruct_tUniqRow_19> keystUniqRow_19 = new java.util.HashSet<KeyStruct_tUniqRow_19>(); 

 



/**
 * [tUniqRow_19 begin ] stop
 */



	
	/**
	 * [tUnite_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tUnite_1", false);
		start_Hash.put("tUnite_1", System.currentTimeMillis());
		
	
	currentComponent="tUnite_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row12","row35","row11","row21","row15","row26","row47");
					}
				
		int tos_count_tUnite_1 = 0;
		

int nb_line_tUnite_1 = 0;

 



/**
 * [tUnite_1 begin ] stop
 */
	
	/**
	 * [tHashInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_1", false);
		start_Hash.put("tHashInput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_1";

	
		int tos_count_tHashInput_1 = 0;
		


int nb_line_tHashInput_1 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<Main1Struct> tHashFile_tHashInput_1 = mf_tHashInput_1.getAdvancedMemoryHashFile("tHashFile_MASTERFILE_EXTRACT_PRODUCTS_1_" + pid +"_tHashOutput_1");
if(tHashFile_tHashInput_1==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<Main1Struct> iterator_tHashInput_1 = tHashFile_tHashInput_1.iterator();
while (iterator_tHashInput_1.hasNext()) {
    Main1Struct next_tHashInput_1 = iterator_tHashInput_1.next();

	row11.PRODUCTNUMBER = next_tHashInput_1.PRODUCTNUMBER;
	row11.ATTRIBUTETYPENAME = next_tHashInput_1.ATTRIBUTETYPENAME;
	row11.ATTRIBUTENAME = next_tHashInput_1.ATTRIBUTENAME;
	row11.TEXTVALUE = next_tHashInput_1.TEXTVALUE;
	row11.INTEGERVALUE = next_tHashInput_1.INTEGERVALUE;
 



/**
 * [tHashInput_1 begin ] stop
 */
	
	/**
	 * [tHashInput_1 main ] start
	 */

	

	
	
	currentComponent="tHashInput_1";

	

 


	tos_count_tHashInput_1++;

/**
 * [tHashInput_1 main ] stop
 */
	
	/**
	 * [tHashInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_1";

	

 



/**
 * [tHashInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_1 main ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1,"row11");
						}
						
//////////
 

// for output
			row9 = new row9Struct();
								
			row9.PRODUCTNUMBER = row11.PRODUCTNUMBER;								
			row9.ATTRIBUTETYPENAME = row11.ATTRIBUTETYPENAME;								
			row9.ATTRIBUTENAME = row11.ATTRIBUTENAME;								
			row9.TEXTVALUE = row11.TEXTVALUE;								
			row9.INTEGERVALUE = row11.INTEGERVALUE;			

			nb_line_tUnite_1++;

//////////
 


	tos_count_tUnite_1++;

/**
 * [tUnite_1 main ] stop
 */
	
	/**
	 * [tUnite_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 process_data_begin ] stop
 */

	
	/**
	 * [tUniqRow_19 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_19";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row9");
					}
					
row13 = null;			
if(row9.PRODUCTNUMBER == null){
	finder_tUniqRow_19.PRODUCTNUMBER = null;
}else{
	finder_tUniqRow_19.PRODUCTNUMBER = row9.PRODUCTNUMBER.toLowerCase();
}
if(row9.ATTRIBUTENAME == null){
	finder_tUniqRow_19.ATTRIBUTENAME = null;
}else{
	finder_tUniqRow_19.ATTRIBUTENAME = row9.ATTRIBUTENAME.toLowerCase();
}	
finder_tUniqRow_19.hashCodeDirty = true;
if (!keystUniqRow_19.contains(finder_tUniqRow_19)) {
		KeyStruct_tUniqRow_19 new_tUniqRow_19 = new KeyStruct_tUniqRow_19();

		
if(row9.PRODUCTNUMBER == null){
	new_tUniqRow_19.PRODUCTNUMBER = null;
}else{
	new_tUniqRow_19.PRODUCTNUMBER = row9.PRODUCTNUMBER.toLowerCase();
}
if(row9.ATTRIBUTENAME == null){
	new_tUniqRow_19.ATTRIBUTENAME = null;
}else{
	new_tUniqRow_19.ATTRIBUTENAME = row9.ATTRIBUTENAME.toLowerCase();
}
		
		keystUniqRow_19.add(new_tUniqRow_19);if(row13 == null){ 
	
	row13 = new row13Struct();
}row13.PRODUCTNUMBER = row9.PRODUCTNUMBER;			row13.ATTRIBUTETYPENAME = row9.ATTRIBUTETYPENAME;			row13.ATTRIBUTENAME = row9.ATTRIBUTENAME;			row13.TEXTVALUE = row9.TEXTVALUE;			row13.INTEGERVALUE = row9.INTEGERVALUE;					
		nb_uniques_tUniqRow_19++;
	} else {
	  nb_duplicates_tUniqRow_19++;
	}

 


	tos_count_tUniqRow_19++;

/**
 * [tUniqRow_19 main ] stop
 */
	
	/**
	 * [tUniqRow_19 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_19";

	

 



/**
 * [tUniqRow_19 process_data_begin ] stop
 */
// Start of branch "row13"
if(row13 != null) { 



	
	/**
	 * [tFileOutputExcel_3 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row13");
					}
					

				xlsxTool_tFileOutputExcel_3.addRow();
									   				
	    				if(row13.PRODUCTNUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(row13.PRODUCTNUMBER));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(row13.ATTRIBUTETYPENAME != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(row13.ATTRIBUTETYPENAME));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(row13.ATTRIBUTENAME != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(row13.ATTRIBUTENAME));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(row13.TEXTVALUE != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(row13.TEXTVALUE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(row13.INTEGERVALUE != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(row13.INTEGERVALUE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_3++;
				
 


	tos_count_tFileOutputExcel_3++;

/**
 * [tFileOutputExcel_3 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";

	

 



/**
 * [tFileOutputExcel_3 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";

	

 



/**
 * [tFileOutputExcel_3 process_data_end ] stop
 */

} // End of branch "row13"




	
	/**
	 * [tUniqRow_19 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_19";

	

 



/**
 * [tUniqRow_19 process_data_end ] stop
 */



	
	/**
	 * [tUnite_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";

	

 



/**
 * [tHashInput_1 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_1 end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";

	
    

		
			nb_line_tHashInput_1++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_MASTERFILE_EXTRACT_PRODUCTS_1_" + pid +"_tHashOutput_1");
	


	globalMap.put("tHashInput_1_NB_LINE", nb_line_tHashInput_1);       

 

ok_Hash.put("tHashInput_1", true);
end_Hash.put("tHashInput_1", System.currentTimeMillis());




/**
 * [tHashInput_1 end ] stop
 */
	
	/**
	 * [tHashInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_2", false);
		start_Hash.put("tHashInput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_2";

	
		int tos_count_tHashInput_2 = 0;
		


int nb_line_tHashInput_2 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row10Struct> tHashFile_tHashInput_2 = mf_tHashInput_2.getAdvancedMemoryHashFile("tHashFile_MASTERFILE_EXTRACT_PRODUCTS_1_" + pid +"_tHashOutput_2");
if(tHashFile_tHashInput_2==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row10Struct> iterator_tHashInput_2 = tHashFile_tHashInput_2.iterator();
while (iterator_tHashInput_2.hasNext()) {
    row10Struct next_tHashInput_2 = iterator_tHashInput_2.next();

	row12.PRODUCTNUMBER = next_tHashInput_2.PRODUCTNUMBER;
	row12.ATTRIBUTETYPENAME = next_tHashInput_2.ATTRIBUTETYPENAME;
	row12.ATTRIBUTENAME = next_tHashInput_2.ATTRIBUTENAME;
	row12.TEXTVALUE = next_tHashInput_2.TEXTVALUE;
	row12.INTEGERVALUE = next_tHashInput_2.INTEGERVALUE;
 



/**
 * [tHashInput_2 begin ] stop
 */
	
	/**
	 * [tHashInput_2 main ] start
	 */

	

	
	
	currentComponent="tHashInput_2";

	

 


	tos_count_tHashInput_2++;

/**
 * [tHashInput_2 main ] stop
 */
	
	/**
	 * [tHashInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_2";

	

 



/**
 * [tHashInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_1 main ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1,"row12");
						}
						
//////////
 

// for output
			row9 = new row9Struct();
								
			row9.PRODUCTNUMBER = row12.PRODUCTNUMBER;								
			row9.ATTRIBUTETYPENAME = row12.ATTRIBUTETYPENAME;								
			row9.ATTRIBUTENAME = row12.ATTRIBUTENAME;								
			row9.TEXTVALUE = row12.TEXTVALUE;								
			row9.INTEGERVALUE = row12.INTEGERVALUE;			

			nb_line_tUnite_1++;

//////////
 


	tos_count_tUnite_1++;

/**
 * [tUnite_1 main ] stop
 */
	
	/**
	 * [tUnite_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 process_data_begin ] stop
 */

	
	/**
	 * [tUniqRow_19 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_19";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row9");
					}
					
row13 = null;			
if(row9.PRODUCTNUMBER == null){
	finder_tUniqRow_19.PRODUCTNUMBER = null;
}else{
	finder_tUniqRow_19.PRODUCTNUMBER = row9.PRODUCTNUMBER.toLowerCase();
}
if(row9.ATTRIBUTENAME == null){
	finder_tUniqRow_19.ATTRIBUTENAME = null;
}else{
	finder_tUniqRow_19.ATTRIBUTENAME = row9.ATTRIBUTENAME.toLowerCase();
}	
finder_tUniqRow_19.hashCodeDirty = true;
if (!keystUniqRow_19.contains(finder_tUniqRow_19)) {
		KeyStruct_tUniqRow_19 new_tUniqRow_19 = new KeyStruct_tUniqRow_19();

		
if(row9.PRODUCTNUMBER == null){
	new_tUniqRow_19.PRODUCTNUMBER = null;
}else{
	new_tUniqRow_19.PRODUCTNUMBER = row9.PRODUCTNUMBER.toLowerCase();
}
if(row9.ATTRIBUTENAME == null){
	new_tUniqRow_19.ATTRIBUTENAME = null;
}else{
	new_tUniqRow_19.ATTRIBUTENAME = row9.ATTRIBUTENAME.toLowerCase();
}
		
		keystUniqRow_19.add(new_tUniqRow_19);if(row13 == null){ 
	
	row13 = new row13Struct();
}row13.PRODUCTNUMBER = row9.PRODUCTNUMBER;			row13.ATTRIBUTETYPENAME = row9.ATTRIBUTETYPENAME;			row13.ATTRIBUTENAME = row9.ATTRIBUTENAME;			row13.TEXTVALUE = row9.TEXTVALUE;			row13.INTEGERVALUE = row9.INTEGERVALUE;					
		nb_uniques_tUniqRow_19++;
	} else {
	  nb_duplicates_tUniqRow_19++;
	}

 


	tos_count_tUniqRow_19++;

/**
 * [tUniqRow_19 main ] stop
 */
	
	/**
	 * [tUniqRow_19 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_19";

	

 



/**
 * [tUniqRow_19 process_data_begin ] stop
 */
// Start of branch "row13"
if(row13 != null) { 



	
	/**
	 * [tFileOutputExcel_3 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row13");
					}
					

				xlsxTool_tFileOutputExcel_3.addRow();
									   				
	    				if(row13.PRODUCTNUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(row13.PRODUCTNUMBER));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(row13.ATTRIBUTETYPENAME != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(row13.ATTRIBUTETYPENAME));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(row13.ATTRIBUTENAME != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(row13.ATTRIBUTENAME));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(row13.TEXTVALUE != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(row13.TEXTVALUE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(row13.INTEGERVALUE != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(row13.INTEGERVALUE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_3++;
				
 


	tos_count_tFileOutputExcel_3++;

/**
 * [tFileOutputExcel_3 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";

	

 



/**
 * [tFileOutputExcel_3 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";

	

 



/**
 * [tFileOutputExcel_3 process_data_end ] stop
 */

} // End of branch "row13"




	
	/**
	 * [tUniqRow_19 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_19";

	

 



/**
 * [tUniqRow_19 process_data_end ] stop
 */



	
	/**
	 * [tUnite_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";

	

 



/**
 * [tHashInput_2 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_2 end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";

	
    

		
			nb_line_tHashInput_2++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_MASTERFILE_EXTRACT_PRODUCTS_1_" + pid +"_tHashOutput_2");
	


	globalMap.put("tHashInput_2_NB_LINE", nb_line_tHashInput_2);       

 

ok_Hash.put("tHashInput_2", true);
end_Hash.put("tHashInput_2", System.currentTimeMillis());




/**
 * [tHashInput_2 end ] stop
 */
	
	/**
	 * [tHashInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_3", false);
		start_Hash.put("tHashInput_3", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_3";

	
		int tos_count_tHashInput_3 = 0;
		


int nb_line_tHashInput_3 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_3=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row14Struct> tHashFile_tHashInput_3 = mf_tHashInput_3.getAdvancedMemoryHashFile("tHashFile_MASTERFILE_EXTRACT_PRODUCTS_1_" + pid +"_tHashOutput_3");
if(tHashFile_tHashInput_3==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row14Struct> iterator_tHashInput_3 = tHashFile_tHashInput_3.iterator();
while (iterator_tHashInput_3.hasNext()) {
    row14Struct next_tHashInput_3 = iterator_tHashInput_3.next();

	row15.PRODUCTNUMBER = next_tHashInput_3.PRODUCTNUMBER;
	row15.ATTRIBUTETYPENAME = next_tHashInput_3.ATTRIBUTETYPENAME;
	row15.ATTRIBUTENAME = next_tHashInput_3.ATTRIBUTENAME;
	row15.TEXTVALUE = next_tHashInput_3.TEXTVALUE;
	row15.INTEGERVALUE = next_tHashInput_3.INTEGERVALUE;
 



/**
 * [tHashInput_3 begin ] stop
 */
	
	/**
	 * [tHashInput_3 main ] start
	 */

	

	
	
	currentComponent="tHashInput_3";

	

 


	tos_count_tHashInput_3++;

/**
 * [tHashInput_3 main ] stop
 */
	
	/**
	 * [tHashInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_3";

	

 



/**
 * [tHashInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_1 main ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1,"row15");
						}
						
//////////
 

// for output
			row9 = new row9Struct();
								
			row9.PRODUCTNUMBER = row15.PRODUCTNUMBER;								
			row9.ATTRIBUTETYPENAME = row15.ATTRIBUTETYPENAME;								
			row9.ATTRIBUTENAME = row15.ATTRIBUTENAME;								
			row9.TEXTVALUE = row15.TEXTVALUE;								
			row9.INTEGERVALUE = row15.INTEGERVALUE;			

			nb_line_tUnite_1++;

//////////
 


	tos_count_tUnite_1++;

/**
 * [tUnite_1 main ] stop
 */
	
	/**
	 * [tUnite_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 process_data_begin ] stop
 */

	
	/**
	 * [tUniqRow_19 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_19";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row9");
					}
					
row13 = null;			
if(row9.PRODUCTNUMBER == null){
	finder_tUniqRow_19.PRODUCTNUMBER = null;
}else{
	finder_tUniqRow_19.PRODUCTNUMBER = row9.PRODUCTNUMBER.toLowerCase();
}
if(row9.ATTRIBUTENAME == null){
	finder_tUniqRow_19.ATTRIBUTENAME = null;
}else{
	finder_tUniqRow_19.ATTRIBUTENAME = row9.ATTRIBUTENAME.toLowerCase();
}	
finder_tUniqRow_19.hashCodeDirty = true;
if (!keystUniqRow_19.contains(finder_tUniqRow_19)) {
		KeyStruct_tUniqRow_19 new_tUniqRow_19 = new KeyStruct_tUniqRow_19();

		
if(row9.PRODUCTNUMBER == null){
	new_tUniqRow_19.PRODUCTNUMBER = null;
}else{
	new_tUniqRow_19.PRODUCTNUMBER = row9.PRODUCTNUMBER.toLowerCase();
}
if(row9.ATTRIBUTENAME == null){
	new_tUniqRow_19.ATTRIBUTENAME = null;
}else{
	new_tUniqRow_19.ATTRIBUTENAME = row9.ATTRIBUTENAME.toLowerCase();
}
		
		keystUniqRow_19.add(new_tUniqRow_19);if(row13 == null){ 
	
	row13 = new row13Struct();
}row13.PRODUCTNUMBER = row9.PRODUCTNUMBER;			row13.ATTRIBUTETYPENAME = row9.ATTRIBUTETYPENAME;			row13.ATTRIBUTENAME = row9.ATTRIBUTENAME;			row13.TEXTVALUE = row9.TEXTVALUE;			row13.INTEGERVALUE = row9.INTEGERVALUE;					
		nb_uniques_tUniqRow_19++;
	} else {
	  nb_duplicates_tUniqRow_19++;
	}

 


	tos_count_tUniqRow_19++;

/**
 * [tUniqRow_19 main ] stop
 */
	
	/**
	 * [tUniqRow_19 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_19";

	

 



/**
 * [tUniqRow_19 process_data_begin ] stop
 */
// Start of branch "row13"
if(row13 != null) { 



	
	/**
	 * [tFileOutputExcel_3 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row13");
					}
					

				xlsxTool_tFileOutputExcel_3.addRow();
									   				
	    				if(row13.PRODUCTNUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(row13.PRODUCTNUMBER));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(row13.ATTRIBUTETYPENAME != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(row13.ATTRIBUTETYPENAME));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(row13.ATTRIBUTENAME != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(row13.ATTRIBUTENAME));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(row13.TEXTVALUE != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(row13.TEXTVALUE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(row13.INTEGERVALUE != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(row13.INTEGERVALUE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_3++;
				
 


	tos_count_tFileOutputExcel_3++;

/**
 * [tFileOutputExcel_3 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";

	

 



/**
 * [tFileOutputExcel_3 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";

	

 



/**
 * [tFileOutputExcel_3 process_data_end ] stop
 */

} // End of branch "row13"




	
	/**
	 * [tUniqRow_19 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_19";

	

 



/**
 * [tUniqRow_19 process_data_end ] stop
 */



	
	/**
	 * [tUnite_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_3";

	

 



/**
 * [tHashInput_3 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_3 end ] start
	 */

	

	
	
	currentComponent="tHashInput_3";

	
    

		
			nb_line_tHashInput_3++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_MASTERFILE_EXTRACT_PRODUCTS_1_" + pid +"_tHashOutput_3");
	


	globalMap.put("tHashInput_3_NB_LINE", nb_line_tHashInput_3);       

 

ok_Hash.put("tHashInput_3", true);
end_Hash.put("tHashInput_3", System.currentTimeMillis());




/**
 * [tHashInput_3 end ] stop
 */
	
	/**
	 * [tHashInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_6", false);
		start_Hash.put("tHashInput_6", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_6";

	
		int tos_count_tHashInput_6 = 0;
		


int nb_line_tHashInput_6 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_6=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row20Struct> tHashFile_tHashInput_6 = mf_tHashInput_6.getAdvancedMemoryHashFile("tHashFile_MASTERFILE_EXTRACT_PRODUCTS_1_" + pid +"_tHashOutput_6");
if(tHashFile_tHashInput_6==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row20Struct> iterator_tHashInput_6 = tHashFile_tHashInput_6.iterator();
while (iterator_tHashInput_6.hasNext()) {
    row20Struct next_tHashInput_6 = iterator_tHashInput_6.next();

	row21.PRODUCTNUMBER = next_tHashInput_6.PRODUCTNUMBER;
	row21.ATTRIBUTETYPENAME = next_tHashInput_6.ATTRIBUTETYPENAME;
	row21.ATTRIBUTENAME = next_tHashInput_6.ATTRIBUTENAME;
	row21.TEXTVALUE = next_tHashInput_6.TEXTVALUE;
	row21.INTEGERVALUE = next_tHashInput_6.INTEGERVALUE;
 



/**
 * [tHashInput_6 begin ] stop
 */
	
	/**
	 * [tHashInput_6 main ] start
	 */

	

	
	
	currentComponent="tHashInput_6";

	

 


	tos_count_tHashInput_6++;

/**
 * [tHashInput_6 main ] stop
 */
	
	/**
	 * [tHashInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_6";

	

 



/**
 * [tHashInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_1 main ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1,"row21");
						}
						
//////////
 

// for output
			row9 = new row9Struct();
								
			row9.PRODUCTNUMBER = row21.PRODUCTNUMBER;								
			row9.ATTRIBUTETYPENAME = row21.ATTRIBUTETYPENAME;								
			row9.ATTRIBUTENAME = row21.ATTRIBUTENAME;								
			row9.TEXTVALUE = row21.TEXTVALUE;								
			row9.INTEGERVALUE = row21.INTEGERVALUE;			

			nb_line_tUnite_1++;

//////////
 


	tos_count_tUnite_1++;

/**
 * [tUnite_1 main ] stop
 */
	
	/**
	 * [tUnite_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 process_data_begin ] stop
 */

	
	/**
	 * [tUniqRow_19 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_19";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row9");
					}
					
row13 = null;			
if(row9.PRODUCTNUMBER == null){
	finder_tUniqRow_19.PRODUCTNUMBER = null;
}else{
	finder_tUniqRow_19.PRODUCTNUMBER = row9.PRODUCTNUMBER.toLowerCase();
}
if(row9.ATTRIBUTENAME == null){
	finder_tUniqRow_19.ATTRIBUTENAME = null;
}else{
	finder_tUniqRow_19.ATTRIBUTENAME = row9.ATTRIBUTENAME.toLowerCase();
}	
finder_tUniqRow_19.hashCodeDirty = true;
if (!keystUniqRow_19.contains(finder_tUniqRow_19)) {
		KeyStruct_tUniqRow_19 new_tUniqRow_19 = new KeyStruct_tUniqRow_19();

		
if(row9.PRODUCTNUMBER == null){
	new_tUniqRow_19.PRODUCTNUMBER = null;
}else{
	new_tUniqRow_19.PRODUCTNUMBER = row9.PRODUCTNUMBER.toLowerCase();
}
if(row9.ATTRIBUTENAME == null){
	new_tUniqRow_19.ATTRIBUTENAME = null;
}else{
	new_tUniqRow_19.ATTRIBUTENAME = row9.ATTRIBUTENAME.toLowerCase();
}
		
		keystUniqRow_19.add(new_tUniqRow_19);if(row13 == null){ 
	
	row13 = new row13Struct();
}row13.PRODUCTNUMBER = row9.PRODUCTNUMBER;			row13.ATTRIBUTETYPENAME = row9.ATTRIBUTETYPENAME;			row13.ATTRIBUTENAME = row9.ATTRIBUTENAME;			row13.TEXTVALUE = row9.TEXTVALUE;			row13.INTEGERVALUE = row9.INTEGERVALUE;					
		nb_uniques_tUniqRow_19++;
	} else {
	  nb_duplicates_tUniqRow_19++;
	}

 


	tos_count_tUniqRow_19++;

/**
 * [tUniqRow_19 main ] stop
 */
	
	/**
	 * [tUniqRow_19 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_19";

	

 



/**
 * [tUniqRow_19 process_data_begin ] stop
 */
// Start of branch "row13"
if(row13 != null) { 



	
	/**
	 * [tFileOutputExcel_3 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row13");
					}
					

				xlsxTool_tFileOutputExcel_3.addRow();
									   				
	    				if(row13.PRODUCTNUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(row13.PRODUCTNUMBER));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(row13.ATTRIBUTETYPENAME != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(row13.ATTRIBUTETYPENAME));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(row13.ATTRIBUTENAME != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(row13.ATTRIBUTENAME));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(row13.TEXTVALUE != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(row13.TEXTVALUE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(row13.INTEGERVALUE != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(row13.INTEGERVALUE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_3++;
				
 


	tos_count_tFileOutputExcel_3++;

/**
 * [tFileOutputExcel_3 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";

	

 



/**
 * [tFileOutputExcel_3 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";

	

 



/**
 * [tFileOutputExcel_3 process_data_end ] stop
 */

} // End of branch "row13"




	
	/**
	 * [tUniqRow_19 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_19";

	

 



/**
 * [tUniqRow_19 process_data_end ] stop
 */



	
	/**
	 * [tUnite_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_6";

	

 



/**
 * [tHashInput_6 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_6 end ] start
	 */

	

	
	
	currentComponent="tHashInput_6";

	
    

		
			nb_line_tHashInput_6++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_MASTERFILE_EXTRACT_PRODUCTS_1_" + pid +"_tHashOutput_6");
	


	globalMap.put("tHashInput_6_NB_LINE", nb_line_tHashInput_6);       

 

ok_Hash.put("tHashInput_6", true);
end_Hash.put("tHashInput_6", System.currentTimeMillis());




/**
 * [tHashInput_6 end ] stop
 */
	
	/**
	 * [tHashInput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_8", false);
		start_Hash.put("tHashInput_8", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_8";

	
		int tos_count_tHashInput_8 = 0;
		


int nb_line_tHashInput_8 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_8=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<sortie_attributeStruct> tHashFile_tHashInput_8 = mf_tHashInput_8.getAdvancedMemoryHashFile("tHashFile_MASTERFILE_EXTRACT_PRODUCTS_1_" + pid +"_tHashOutput_8");
if(tHashFile_tHashInput_8==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<sortie_attributeStruct> iterator_tHashInput_8 = tHashFile_tHashInput_8.iterator();
while (iterator_tHashInput_8.hasNext()) {
    sortie_attributeStruct next_tHashInput_8 = iterator_tHashInput_8.next();

	row26.PRODUCTNUMBER = next_tHashInput_8.PRODUCTNUMBER;
	row26.ATTRIBUTETYPENAME = next_tHashInput_8.ATTRIBUTETYPENAME;
	row26.ATTRIBUTENAME = next_tHashInput_8.ATTRIBUTENAME;
	row26.TEXTVALUE = next_tHashInput_8.TEXTVALUE;
	row26.INTEGERVALUE = next_tHashInput_8.INTEGERVALUE;
 



/**
 * [tHashInput_8 begin ] stop
 */
	
	/**
	 * [tHashInput_8 main ] start
	 */

	

	
	
	currentComponent="tHashInput_8";

	

 


	tos_count_tHashInput_8++;

/**
 * [tHashInput_8 main ] stop
 */
	
	/**
	 * [tHashInput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_8";

	

 



/**
 * [tHashInput_8 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_1 main ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1,"row26");
						}
						
//////////
 

// for output
			row9 = new row9Struct();
								
			row9.PRODUCTNUMBER = row26.PRODUCTNUMBER;								
			row9.ATTRIBUTETYPENAME = row26.ATTRIBUTETYPENAME;								
			row9.ATTRIBUTENAME = row26.ATTRIBUTENAME;								
			row9.TEXTVALUE = row26.TEXTVALUE;								
			row9.INTEGERVALUE = row26.INTEGERVALUE;			

			nb_line_tUnite_1++;

//////////
 


	tos_count_tUnite_1++;

/**
 * [tUnite_1 main ] stop
 */
	
	/**
	 * [tUnite_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 process_data_begin ] stop
 */

	
	/**
	 * [tUniqRow_19 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_19";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row9");
					}
					
row13 = null;			
if(row9.PRODUCTNUMBER == null){
	finder_tUniqRow_19.PRODUCTNUMBER = null;
}else{
	finder_tUniqRow_19.PRODUCTNUMBER = row9.PRODUCTNUMBER.toLowerCase();
}
if(row9.ATTRIBUTENAME == null){
	finder_tUniqRow_19.ATTRIBUTENAME = null;
}else{
	finder_tUniqRow_19.ATTRIBUTENAME = row9.ATTRIBUTENAME.toLowerCase();
}	
finder_tUniqRow_19.hashCodeDirty = true;
if (!keystUniqRow_19.contains(finder_tUniqRow_19)) {
		KeyStruct_tUniqRow_19 new_tUniqRow_19 = new KeyStruct_tUniqRow_19();

		
if(row9.PRODUCTNUMBER == null){
	new_tUniqRow_19.PRODUCTNUMBER = null;
}else{
	new_tUniqRow_19.PRODUCTNUMBER = row9.PRODUCTNUMBER.toLowerCase();
}
if(row9.ATTRIBUTENAME == null){
	new_tUniqRow_19.ATTRIBUTENAME = null;
}else{
	new_tUniqRow_19.ATTRIBUTENAME = row9.ATTRIBUTENAME.toLowerCase();
}
		
		keystUniqRow_19.add(new_tUniqRow_19);if(row13 == null){ 
	
	row13 = new row13Struct();
}row13.PRODUCTNUMBER = row9.PRODUCTNUMBER;			row13.ATTRIBUTETYPENAME = row9.ATTRIBUTETYPENAME;			row13.ATTRIBUTENAME = row9.ATTRIBUTENAME;			row13.TEXTVALUE = row9.TEXTVALUE;			row13.INTEGERVALUE = row9.INTEGERVALUE;					
		nb_uniques_tUniqRow_19++;
	} else {
	  nb_duplicates_tUniqRow_19++;
	}

 


	tos_count_tUniqRow_19++;

/**
 * [tUniqRow_19 main ] stop
 */
	
	/**
	 * [tUniqRow_19 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_19";

	

 



/**
 * [tUniqRow_19 process_data_begin ] stop
 */
// Start of branch "row13"
if(row13 != null) { 



	
	/**
	 * [tFileOutputExcel_3 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row13");
					}
					

				xlsxTool_tFileOutputExcel_3.addRow();
									   				
	    				if(row13.PRODUCTNUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(row13.PRODUCTNUMBER));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(row13.ATTRIBUTETYPENAME != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(row13.ATTRIBUTETYPENAME));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(row13.ATTRIBUTENAME != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(row13.ATTRIBUTENAME));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(row13.TEXTVALUE != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(row13.TEXTVALUE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(row13.INTEGERVALUE != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(row13.INTEGERVALUE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_3++;
				
 


	tos_count_tFileOutputExcel_3++;

/**
 * [tFileOutputExcel_3 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";

	

 



/**
 * [tFileOutputExcel_3 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";

	

 



/**
 * [tFileOutputExcel_3 process_data_end ] stop
 */

} // End of branch "row13"




	
	/**
	 * [tUniqRow_19 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_19";

	

 



/**
 * [tUniqRow_19 process_data_end ] stop
 */



	
	/**
	 * [tUnite_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_8";

	

 



/**
 * [tHashInput_8 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_8 end ] start
	 */

	

	
	
	currentComponent="tHashInput_8";

	
    

		
			nb_line_tHashInput_8++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_MASTERFILE_EXTRACT_PRODUCTS_1_" + pid +"_tHashOutput_8");
	


	globalMap.put("tHashInput_8_NB_LINE", nb_line_tHashInput_8);       

 

ok_Hash.put("tHashInput_8", true);
end_Hash.put("tHashInput_8", System.currentTimeMillis());




/**
 * [tHashInput_8 end ] stop
 */
	
	/**
	 * [tHashInput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_9", false);
		start_Hash.put("tHashInput_9", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_9";

	
		int tos_count_tHashInput_9 = 0;
		


int nb_line_tHashInput_9 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_9=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row34Struct> tHashFile_tHashInput_9 = mf_tHashInput_9.getAdvancedMemoryHashFile("tHashFile_MASTERFILE_EXTRACT_PRODUCTS_1_" + pid +"_tHashOutput_9");
if(tHashFile_tHashInput_9==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row34Struct> iterator_tHashInput_9 = tHashFile_tHashInput_9.iterator();
while (iterator_tHashInput_9.hasNext()) {
    row34Struct next_tHashInput_9 = iterator_tHashInput_9.next();

	row35.PRODUCTNUMBER = next_tHashInput_9.PRODUCTNUMBER;
	row35.ATTRIBUTETYPENAME = next_tHashInput_9.ATTRIBUTETYPENAME;
	row35.ATTRIBUTENAME = next_tHashInput_9.ATTRIBUTENAME;
	row35.TEXTVALUE = next_tHashInput_9.TEXTVALUE;
 



/**
 * [tHashInput_9 begin ] stop
 */
	
	/**
	 * [tHashInput_9 main ] start
	 */

	

	
	
	currentComponent="tHashInput_9";

	

 


	tos_count_tHashInput_9++;

/**
 * [tHashInput_9 main ] stop
 */
	
	/**
	 * [tHashInput_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_9";

	

 



/**
 * [tHashInput_9 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_1 main ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1,"row35");
						}
						
//////////
 

// for output
			row9 = new row9Struct();
								
			row9.PRODUCTNUMBER = row35.PRODUCTNUMBER;								
			row9.ATTRIBUTETYPENAME = row35.ATTRIBUTETYPENAME;								
			row9.ATTRIBUTENAME = row35.ATTRIBUTENAME;								
			row9.TEXTVALUE = row35.TEXTVALUE;								
			row9.INTEGERVALUE = row35.INTEGERVALUE;			

			nb_line_tUnite_1++;

//////////
 


	tos_count_tUnite_1++;

/**
 * [tUnite_1 main ] stop
 */
	
	/**
	 * [tUnite_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 process_data_begin ] stop
 */

	
	/**
	 * [tUniqRow_19 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_19";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row9");
					}
					
row13 = null;			
if(row9.PRODUCTNUMBER == null){
	finder_tUniqRow_19.PRODUCTNUMBER = null;
}else{
	finder_tUniqRow_19.PRODUCTNUMBER = row9.PRODUCTNUMBER.toLowerCase();
}
if(row9.ATTRIBUTENAME == null){
	finder_tUniqRow_19.ATTRIBUTENAME = null;
}else{
	finder_tUniqRow_19.ATTRIBUTENAME = row9.ATTRIBUTENAME.toLowerCase();
}	
finder_tUniqRow_19.hashCodeDirty = true;
if (!keystUniqRow_19.contains(finder_tUniqRow_19)) {
		KeyStruct_tUniqRow_19 new_tUniqRow_19 = new KeyStruct_tUniqRow_19();

		
if(row9.PRODUCTNUMBER == null){
	new_tUniqRow_19.PRODUCTNUMBER = null;
}else{
	new_tUniqRow_19.PRODUCTNUMBER = row9.PRODUCTNUMBER.toLowerCase();
}
if(row9.ATTRIBUTENAME == null){
	new_tUniqRow_19.ATTRIBUTENAME = null;
}else{
	new_tUniqRow_19.ATTRIBUTENAME = row9.ATTRIBUTENAME.toLowerCase();
}
		
		keystUniqRow_19.add(new_tUniqRow_19);if(row13 == null){ 
	
	row13 = new row13Struct();
}row13.PRODUCTNUMBER = row9.PRODUCTNUMBER;			row13.ATTRIBUTETYPENAME = row9.ATTRIBUTETYPENAME;			row13.ATTRIBUTENAME = row9.ATTRIBUTENAME;			row13.TEXTVALUE = row9.TEXTVALUE;			row13.INTEGERVALUE = row9.INTEGERVALUE;					
		nb_uniques_tUniqRow_19++;
	} else {
	  nb_duplicates_tUniqRow_19++;
	}

 


	tos_count_tUniqRow_19++;

/**
 * [tUniqRow_19 main ] stop
 */
	
	/**
	 * [tUniqRow_19 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_19";

	

 



/**
 * [tUniqRow_19 process_data_begin ] stop
 */
// Start of branch "row13"
if(row13 != null) { 



	
	/**
	 * [tFileOutputExcel_3 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row13");
					}
					

				xlsxTool_tFileOutputExcel_3.addRow();
									   				
	    				if(row13.PRODUCTNUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(row13.PRODUCTNUMBER));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(row13.ATTRIBUTETYPENAME != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(row13.ATTRIBUTETYPENAME));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(row13.ATTRIBUTENAME != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(row13.ATTRIBUTENAME));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(row13.TEXTVALUE != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(row13.TEXTVALUE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(row13.INTEGERVALUE != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(row13.INTEGERVALUE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_3++;
				
 


	tos_count_tFileOutputExcel_3++;

/**
 * [tFileOutputExcel_3 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";

	

 



/**
 * [tFileOutputExcel_3 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";

	

 



/**
 * [tFileOutputExcel_3 process_data_end ] stop
 */

} // End of branch "row13"




	
	/**
	 * [tUniqRow_19 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_19";

	

 



/**
 * [tUniqRow_19 process_data_end ] stop
 */



	
	/**
	 * [tUnite_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_9";

	

 



/**
 * [tHashInput_9 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_9 end ] start
	 */

	

	
	
	currentComponent="tHashInput_9";

	
    

		
			nb_line_tHashInput_9++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_MASTERFILE_EXTRACT_PRODUCTS_1_" + pid +"_tHashOutput_9");
	


	globalMap.put("tHashInput_9_NB_LINE", nb_line_tHashInput_9);       

 

ok_Hash.put("tHashInput_9", true);
end_Hash.put("tHashInput_9", System.currentTimeMillis());




/**
 * [tHashInput_9 end ] stop
 */
	
	/**
	 * [tHashInput_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_13", false);
		start_Hash.put("tHashInput_13", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_13";

	
		int tos_count_tHashInput_13 = 0;
		


int nb_line_tHashInput_13 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_13=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row48Struct> tHashFile_tHashInput_13 = mf_tHashInput_13.getAdvancedMemoryHashFile("tHashFile_MASTERFILE_EXTRACT_PRODUCTS_1_" + pid +"_tHashOutput_12");
if(tHashFile_tHashInput_13==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row48Struct> iterator_tHashInput_13 = tHashFile_tHashInput_13.iterator();
while (iterator_tHashInput_13.hasNext()) {
    row48Struct next_tHashInput_13 = iterator_tHashInput_13.next();

	row47.PRODUCTNUMBER = next_tHashInput_13.PRODUCTNUMBER;
	row47.ATTRIBUTETYPENAME = next_tHashInput_13.ATTRIBUTETYPENAME;
	row47.ATTRIBUTENAME = next_tHashInput_13.ATTRIBUTENAME;
	row47.TEXTVALUE = next_tHashInput_13.TEXTVALUE;
 



/**
 * [tHashInput_13 begin ] stop
 */
	
	/**
	 * [tHashInput_13 main ] start
	 */

	

	
	
	currentComponent="tHashInput_13";

	

 


	tos_count_tHashInput_13++;

/**
 * [tHashInput_13 main ] stop
 */
	
	/**
	 * [tHashInput_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_13";

	

 



/**
 * [tHashInput_13 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_1 main ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1,"row47");
						}
						
//////////
 

// for output
			row9 = new row9Struct();
								
			row9.PRODUCTNUMBER = row47.PRODUCTNUMBER;								
			row9.ATTRIBUTETYPENAME = row47.ATTRIBUTETYPENAME;								
			row9.ATTRIBUTENAME = row47.ATTRIBUTENAME;								
			row9.TEXTVALUE = row47.TEXTVALUE;								
			row9.INTEGERVALUE = row47.INTEGERVALUE;			

			nb_line_tUnite_1++;

//////////
 


	tos_count_tUnite_1++;

/**
 * [tUnite_1 main ] stop
 */
	
	/**
	 * [tUnite_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 process_data_begin ] stop
 */

	
	/**
	 * [tUniqRow_19 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_19";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row9");
					}
					
row13 = null;			
if(row9.PRODUCTNUMBER == null){
	finder_tUniqRow_19.PRODUCTNUMBER = null;
}else{
	finder_tUniqRow_19.PRODUCTNUMBER = row9.PRODUCTNUMBER.toLowerCase();
}
if(row9.ATTRIBUTENAME == null){
	finder_tUniqRow_19.ATTRIBUTENAME = null;
}else{
	finder_tUniqRow_19.ATTRIBUTENAME = row9.ATTRIBUTENAME.toLowerCase();
}	
finder_tUniqRow_19.hashCodeDirty = true;
if (!keystUniqRow_19.contains(finder_tUniqRow_19)) {
		KeyStruct_tUniqRow_19 new_tUniqRow_19 = new KeyStruct_tUniqRow_19();

		
if(row9.PRODUCTNUMBER == null){
	new_tUniqRow_19.PRODUCTNUMBER = null;
}else{
	new_tUniqRow_19.PRODUCTNUMBER = row9.PRODUCTNUMBER.toLowerCase();
}
if(row9.ATTRIBUTENAME == null){
	new_tUniqRow_19.ATTRIBUTENAME = null;
}else{
	new_tUniqRow_19.ATTRIBUTENAME = row9.ATTRIBUTENAME.toLowerCase();
}
		
		keystUniqRow_19.add(new_tUniqRow_19);if(row13 == null){ 
	
	row13 = new row13Struct();
}row13.PRODUCTNUMBER = row9.PRODUCTNUMBER;			row13.ATTRIBUTETYPENAME = row9.ATTRIBUTETYPENAME;			row13.ATTRIBUTENAME = row9.ATTRIBUTENAME;			row13.TEXTVALUE = row9.TEXTVALUE;			row13.INTEGERVALUE = row9.INTEGERVALUE;					
		nb_uniques_tUniqRow_19++;
	} else {
	  nb_duplicates_tUniqRow_19++;
	}

 


	tos_count_tUniqRow_19++;

/**
 * [tUniqRow_19 main ] stop
 */
	
	/**
	 * [tUniqRow_19 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_19";

	

 



/**
 * [tUniqRow_19 process_data_begin ] stop
 */
// Start of branch "row13"
if(row13 != null) { 



	
	/**
	 * [tFileOutputExcel_3 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row13");
					}
					

				xlsxTool_tFileOutputExcel_3.addRow();
									   				
	    				if(row13.PRODUCTNUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(row13.PRODUCTNUMBER));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(row13.ATTRIBUTETYPENAME != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(row13.ATTRIBUTETYPENAME));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(row13.ATTRIBUTENAME != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(row13.ATTRIBUTENAME));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(row13.TEXTVALUE != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(row13.TEXTVALUE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(row13.INTEGERVALUE != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(row13.INTEGERVALUE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_3++;
				
 


	tos_count_tFileOutputExcel_3++;

/**
 * [tFileOutputExcel_3 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";

	

 



/**
 * [tFileOutputExcel_3 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";

	

 



/**
 * [tFileOutputExcel_3 process_data_end ] stop
 */

} // End of branch "row13"




	
	/**
	 * [tUniqRow_19 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_19";

	

 



/**
 * [tUniqRow_19 process_data_end ] stop
 */



	
	/**
	 * [tUnite_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_13";

	

 



/**
 * [tHashInput_13 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_13 end ] start
	 */

	

	
	
	currentComponent="tHashInput_13";

	
    

		
			nb_line_tHashInput_13++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_MASTERFILE_EXTRACT_PRODUCTS_1_" + pid +"_tHashOutput_12");
	


	globalMap.put("tHashInput_13_NB_LINE", nb_line_tHashInput_13);       

 

ok_Hash.put("tHashInput_13", true);
end_Hash.put("tHashInput_13", System.currentTimeMillis());




/**
 * [tHashInput_13 end ] stop
 */
	
	/**
	 * [tUnite_1 end ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

globalMap.put("tUnite_1_NB_LINE", nb_line_tUnite_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row12","row35","row11","row21","row15","row26","row47");
			  	}
			  	
 

ok_Hash.put("tUnite_1", true);
end_Hash.put("tUnite_1", System.currentTimeMillis());




/**
 * [tUnite_1 end ] stop
 */

	
	/**
	 * [tUniqRow_19 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_19";

	

globalMap.put("tUniqRow_19_NB_UNIQUES",nb_uniques_tUniqRow_19);
globalMap.put("tUniqRow_19_NB_DUPLICATES",nb_duplicates_tUniqRow_19);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row9");
			  	}
			  	
 

ok_Hash.put("tUniqRow_19", true);
end_Hash.put("tUniqRow_19", System.currentTimeMillis());




/**
 * [tUniqRow_19 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_3 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";

	

	
	
	
			xlsxTool_tFileOutputExcel_3.writeExcel(fileName_tFileOutputExcel_3,true);
	
		
			nb_line_tFileOutputExcel_3 = nb_line_tFileOutputExcel_3 -1;
		
		globalMap.put("tFileOutputExcel_3_NB_LINE",nb_line_tFileOutputExcel_3);
		
		

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row13");
			  	}
			  	
 

ok_Hash.put("tFileOutputExcel_3", true);
end_Hash.put("tFileOutputExcel_3", System.currentTimeMillis());




/**
 * [tFileOutputExcel_3 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_1";

	

 



/**
 * [tHashInput_1 finally ] stop
 */
	
	/**
	 * [tHashInput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_2";

	

 



/**
 * [tHashInput_2 finally ] stop
 */
	
	/**
	 * [tHashInput_3 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_3";

	

 



/**
 * [tHashInput_3 finally ] stop
 */
	
	/**
	 * [tHashInput_6 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_6";

	

 



/**
 * [tHashInput_6 finally ] stop
 */
	
	/**
	 * [tHashInput_8 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_8";

	

 



/**
 * [tHashInput_8 finally ] stop
 */
	
	/**
	 * [tHashInput_9 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_9";

	

 



/**
 * [tHashInput_9 finally ] stop
 */
	
	/**
	 * [tHashInput_13 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_13";

	

 



/**
 * [tHashInput_13 finally ] stop
 */
	
	/**
	 * [tUnite_1 finally ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 finally ] stop
 */

	
	/**
	 * [tUniqRow_19 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_19";

	

 



/**
 * [tUniqRow_19 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_3 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";

	

 



/**
 * [tFileOutputExcel_3 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class barcodeStruct implements routines.system.IPersistableRow<barcodeStruct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String PRODUCTQUANTITYUNITSYMBOL;

				public String getPRODUCTQUANTITYUNITSYMBOL () {
					return this.PRODUCTQUANTITYUNITSYMBOL;
				}
				
			    public String BARCODESETUPID;

				public String getBARCODESETUPID () {
					return this.BARCODESETUPID;
				}
				
			    public String BARCODE;

				public String getBARCODE () {
					return this.BARCODE;
				}
				
			    public String PRODUCTDESCRIPTION;

				public String getPRODUCTDESCRIPTION () {
					return this.PRODUCTDESCRIPTION;
				}
				
			    public String PRODUCTQUANTITY;

				public String getPRODUCTQUANTITY () {
					return this.PRODUCTQUANTITY;
				}
				
			    public String ASSOCIATIONID;

				public String getASSOCIATIONID () {
					return this.ASSOCIATIONID;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.ITEMNUMBER = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.PRODUCTQUANTITYUNITSYMBOL = readString(dis);
					
					this.BARCODESETUPID = readString(dis);
					
					this.BARCODE = readString(dis);
					
					this.PRODUCTDESCRIPTION = readString(dis);
					
					this.PRODUCTQUANTITY = readString(dis);
					
					this.ASSOCIATIONID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.PRODUCTQUANTITYUNITSYMBOL,dos);
					
					// String
				
						writeString(this.BARCODESETUPID,dos);
					
					// String
				
						writeString(this.BARCODE,dos);
					
					// String
				
						writeString(this.PRODUCTDESCRIPTION,dos);
					
					// String
				
						writeString(this.PRODUCTQUANTITY,dos);
					
					// String
				
						writeString(this.ASSOCIATIONID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",PRODUCTQUANTITYUNITSYMBOL="+PRODUCTQUANTITYUNITSYMBOL);
		sb.append(",BARCODESETUPID="+BARCODESETUPID);
		sb.append(",BARCODE="+BARCODE);
		sb.append(",PRODUCTDESCRIPTION="+PRODUCTDESCRIPTION);
		sb.append(",PRODUCTQUANTITY="+PRODUCTQUANTITY);
		sb.append(",ASSOCIATIONID="+ASSOCIATIONID);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(barcodeStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class barcodeV3Struct implements routines.system.IPersistableRow<barcodeV3Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String PRODUCTQUANTITYUNITSYMBOL;

				public String getPRODUCTQUANTITYUNITSYMBOL () {
					return this.PRODUCTQUANTITYUNITSYMBOL;
				}
				
			    public String BARCODESETUPID;

				public String getBARCODESETUPID () {
					return this.BARCODESETUPID;
				}
				
			    public String BARCODE;

				public String getBARCODE () {
					return this.BARCODE;
				}
				
			    public String PRODUCTDESCRIPTION;

				public String getPRODUCTDESCRIPTION () {
					return this.PRODUCTDESCRIPTION;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.ITEMNUMBER = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.PRODUCTQUANTITYUNITSYMBOL = readString(dis);
					
					this.BARCODESETUPID = readString(dis);
					
					this.BARCODE = readString(dis);
					
					this.PRODUCTDESCRIPTION = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.PRODUCTQUANTITYUNITSYMBOL,dos);
					
					// String
				
						writeString(this.BARCODESETUPID,dos);
					
					// String
				
						writeString(this.BARCODE,dos);
					
					// String
				
						writeString(this.PRODUCTDESCRIPTION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",PRODUCTQUANTITYUNITSYMBOL="+PRODUCTQUANTITYUNITSYMBOL);
		sb.append(",BARCODESETUPID="+BARCODESETUPID);
		sb.append(",BARCODE="+BARCODE);
		sb.append(",PRODUCTDESCRIPTION="+PRODUCTDESCRIPTION);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(barcodeV3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row42Struct implements routines.system.IPersistableRow<row42Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String PRODUCTQUANTITYUNITSYMBOL;

				public String getPRODUCTQUANTITYUNITSYMBOL () {
					return this.PRODUCTQUANTITYUNITSYMBOL;
				}
				
			    public String BARCODESETUPID;

				public String getBARCODESETUPID () {
					return this.BARCODESETUPID;
				}
				
			    public String BARCODE;

				public String getBARCODE () {
					return this.BARCODE;
				}
				
			    public String PRODUCTDESCRIPTION;

				public String getPRODUCTDESCRIPTION () {
					return this.PRODUCTDESCRIPTION;
				}
				
			    public String PRODUCTQUANTITY;

				public String getPRODUCTQUANTITY () {
					return this.PRODUCTQUANTITY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.ITEMNUMBER = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.PRODUCTQUANTITYUNITSYMBOL = readString(dis);
					
					this.BARCODESETUPID = readString(dis);
					
					this.BARCODE = readString(dis);
					
					this.PRODUCTDESCRIPTION = readString(dis);
					
					this.PRODUCTQUANTITY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.PRODUCTQUANTITYUNITSYMBOL,dos);
					
					// String
				
						writeString(this.BARCODESETUPID,dos);
					
					// String
				
						writeString(this.BARCODE,dos);
					
					// String
				
						writeString(this.PRODUCTDESCRIPTION,dos);
					
					// String
				
						writeString(this.PRODUCTQUANTITY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",PRODUCTQUANTITYUNITSYMBOL="+PRODUCTQUANTITYUNITSYMBOL);
		sb.append(",BARCODESETUPID="+BARCODESETUPID);
		sb.append(",BARCODE="+BARCODE);
		sb.append(",PRODUCTDESCRIPTION="+PRODUCTDESCRIPTION);
		sb.append(",PRODUCTQUANTITY="+PRODUCTQUANTITY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row42Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row38Struct implements routines.system.IPersistableRow<row38Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String PRODUCTQUANTITYUNITSYMBOL;

				public String getPRODUCTQUANTITYUNITSYMBOL () {
					return this.PRODUCTQUANTITYUNITSYMBOL;
				}
				
			    public String BARCODESETUPID;

				public String getBARCODESETUPID () {
					return this.BARCODESETUPID;
				}
				
			    public String BARCODE;

				public String getBARCODE () {
					return this.BARCODE;
				}
				
			    public String PRODUCTDESCRIPTION;

				public String getPRODUCTDESCRIPTION () {
					return this.PRODUCTDESCRIPTION;
				}
				
			    public String PRODUCTQUANTITY;

				public String getPRODUCTQUANTITY () {
					return this.PRODUCTQUANTITY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.ITEMNUMBER = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.PRODUCTQUANTITYUNITSYMBOL = readString(dis);
					
					this.BARCODESETUPID = readString(dis);
					
					this.BARCODE = readString(dis);
					
					this.PRODUCTDESCRIPTION = readString(dis);
					
					this.PRODUCTQUANTITY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.PRODUCTQUANTITYUNITSYMBOL,dos);
					
					// String
				
						writeString(this.BARCODESETUPID,dos);
					
					// String
				
						writeString(this.BARCODE,dos);
					
					// String
				
						writeString(this.PRODUCTDESCRIPTION,dos);
					
					// String
				
						writeString(this.PRODUCTQUANTITY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",PRODUCTQUANTITYUNITSYMBOL="+PRODUCTQUANTITYUNITSYMBOL);
		sb.append(",BARCODESETUPID="+BARCODESETUPID);
		sb.append(",BARCODE="+BARCODE);
		sb.append(",PRODUCTDESCRIPTION="+PRODUCTDESCRIPTION);
		sb.append(",PRODUCTQUANTITY="+PRODUCTQUANTITY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row38Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tHashInput_10Struct implements routines.system.IPersistableRow<after_tHashInput_10Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String PRODUCTQUANTITYUNITSYMBOL;

				public String getPRODUCTQUANTITYUNITSYMBOL () {
					return this.PRODUCTQUANTITYUNITSYMBOL;
				}
				
			    public String BARCODESETUPID;

				public String getBARCODESETUPID () {
					return this.BARCODESETUPID;
				}
				
			    public String BARCODE;

				public String getBARCODE () {
					return this.BARCODE;
				}
				
			    public String PRODUCTDESCRIPTION;

				public String getPRODUCTDESCRIPTION () {
					return this.PRODUCTDESCRIPTION;
				}
				
			    public String PRODUCTQUANTITY;

				public String getPRODUCTQUANTITY () {
					return this.PRODUCTQUANTITY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.ITEMNUMBER = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.PRODUCTQUANTITYUNITSYMBOL = readString(dis);
					
					this.BARCODESETUPID = readString(dis);
					
					this.BARCODE = readString(dis);
					
					this.PRODUCTDESCRIPTION = readString(dis);
					
					this.PRODUCTQUANTITY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.PRODUCTQUANTITYUNITSYMBOL,dos);
					
					// String
				
						writeString(this.BARCODESETUPID,dos);
					
					// String
				
						writeString(this.BARCODE,dos);
					
					// String
				
						writeString(this.PRODUCTDESCRIPTION,dos);
					
					// String
				
						writeString(this.PRODUCTQUANTITY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",PRODUCTQUANTITYUNITSYMBOL="+PRODUCTQUANTITYUNITSYMBOL);
		sb.append(",BARCODESETUPID="+BARCODESETUPID);
		sb.append(",BARCODE="+BARCODE);
		sb.append(",PRODUCTDESCRIPTION="+PRODUCTDESCRIPTION);
		sb.append(",PRODUCTQUANTITY="+PRODUCTQUANTITY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tHashInput_10Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row41Struct implements routines.system.IPersistableRow<row41Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String PRODUCTQUANTITYUNITSYMBOL;

				public String getPRODUCTQUANTITYUNITSYMBOL () {
					return this.PRODUCTQUANTITYUNITSYMBOL;
				}
				
			    public String BARCODESETUPID;

				public String getBARCODESETUPID () {
					return this.BARCODESETUPID;
				}
				
			    public String BARCODE;

				public String getBARCODE () {
					return this.BARCODE;
				}
				
			    public String PRODUCTDESCRIPTION;

				public String getPRODUCTDESCRIPTION () {
					return this.PRODUCTDESCRIPTION;
				}
				
			    public String PRODUCTQUANTITY;

				public String getPRODUCTQUANTITY () {
					return this.PRODUCTQUANTITY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.ITEMNUMBER = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.PRODUCTQUANTITYUNITSYMBOL = readString(dis);
					
					this.BARCODESETUPID = readString(dis);
					
					this.BARCODE = readString(dis);
					
					this.PRODUCTDESCRIPTION = readString(dis);
					
					this.PRODUCTQUANTITY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.PRODUCTQUANTITYUNITSYMBOL,dos);
					
					// String
				
						writeString(this.BARCODESETUPID,dos);
					
					// String
				
						writeString(this.BARCODE,dos);
					
					// String
				
						writeString(this.PRODUCTDESCRIPTION,dos);
					
					// String
				
						writeString(this.PRODUCTQUANTITY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",PRODUCTQUANTITYUNITSYMBOL="+PRODUCTQUANTITYUNITSYMBOL);
		sb.append(",BARCODESETUPID="+BARCODESETUPID);
		sb.append(",BARCODE="+BARCODE);
		sb.append(",PRODUCTDESCRIPTION="+PRODUCTDESCRIPTION);
		sb.append(",PRODUCTQUANTITY="+PRODUCTQUANTITY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row41Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tHashInput_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_10_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_4Process(globalMap);

		row38Struct row38 = new row38Struct();

		row41Struct row41 = new row41Struct();

			row42Struct row42 = new row42Struct();
barcodeStruct barcode = new barcodeStruct();
barcodeV3Struct barcodeV3 = new barcodeV3Struct();





	
	/**
	 * [tFileOutputExcel_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_10", false);
		start_Hash.put("tFileOutputExcel_10", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_10";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"barcode");
					}
				
		int tos_count_tFileOutputExcel_10 = 0;
		


		int columnIndex_tFileOutputExcel_10 = 0;
		
		String fileName_tFileOutputExcel_10=context.ExtractPathOTHER + "Item - barcode associations.xlsx";
		int nb_line_tFileOutputExcel_10 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_10 = new org.talend.ExcelTool();
		
		xlsxTool_tFileOutputExcel_10.setSheet("Item - barcode associations.xlsx");
		xlsxTool_tFileOutputExcel_10.setAppend(false,true);
		xlsxTool_tFileOutputExcel_10.setRecalculateFormula(false);
		xlsxTool_tFileOutputExcel_10.setXY(false,0,10,false);
		
		java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_10 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap.get("concurrentHashMap");
		java.lang.Object lockObj_tFileOutputExcel_10 = chm_tFileOutputExcel_10.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_10", k -> new Object());
		synchronized (lockObj_tFileOutputExcel_10) {
			
				xlsxTool_tFileOutputExcel_10.prepareXlsxFile(fileName_tFileOutputExcel_10);
			
		}
		
		xlsxTool_tFileOutputExcel_10.setFont("");
		
		if (xlsxTool_tFileOutputExcel_10.getStartRow() == 0){
		
		xlsxTool_tFileOutputExcel_10.addRow();
		
		xlsxTool_tFileOutputExcel_10.addCellValue("ITEMNUMBER");
		
		xlsxTool_tFileOutputExcel_10.addCellValue("PRODUCTCOLORID");
		
		xlsxTool_tFileOutputExcel_10.addCellValue("PRODUCTSIZEID");
		
		xlsxTool_tFileOutputExcel_10.addCellValue("PRODUCTSTYLEID");
		
		xlsxTool_tFileOutputExcel_10.addCellValue("PRODUCTQUANTITYUNITSYMBOL");
		
		xlsxTool_tFileOutputExcel_10.addCellValue("BARCODESETUPID");
		
		xlsxTool_tFileOutputExcel_10.addCellValue("BARCODE");
		
		xlsxTool_tFileOutputExcel_10.addCellValue("PRODUCTDESCRIPTION");
		
		xlsxTool_tFileOutputExcel_10.addCellValue("PRODUCTQUANTITY");
		
		xlsxTool_tFileOutputExcel_10.addCellValue("ASSOCIATIONID");
		
		nb_line_tFileOutputExcel_10++; 
		
	}
		

 



/**
 * [tFileOutputExcel_10 begin ] stop
 */




	
	/**
	 * [tFileOutputExcel_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_15", false);
		start_Hash.put("tFileOutputExcel_15", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_15";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"barcodeV3");
					}
				
		int tos_count_tFileOutputExcel_15 = 0;
		


		int columnIndex_tFileOutputExcel_15 = 0;
		
		String fileName_tFileOutputExcel_15=context.ExtractPathOTHER + "Item - barcodes V3.xlsx";
		int nb_line_tFileOutputExcel_15 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_15 = new org.talend.ExcelTool();
		
		xlsxTool_tFileOutputExcel_15.setSheet("Item - barcodes V3.xlsx");
		xlsxTool_tFileOutputExcel_15.setAppend(false,true);
		xlsxTool_tFileOutputExcel_15.setRecalculateFormula(false);
		xlsxTool_tFileOutputExcel_15.setXY(false,0,10,false);
		
		java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_15 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap.get("concurrentHashMap");
		java.lang.Object lockObj_tFileOutputExcel_15 = chm_tFileOutputExcel_15.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_15", k -> new Object());
		synchronized (lockObj_tFileOutputExcel_15) {
			
				xlsxTool_tFileOutputExcel_15.prepareXlsxFile(fileName_tFileOutputExcel_15);
			
		}
		
		xlsxTool_tFileOutputExcel_15.setFont("");
		
		if (xlsxTool_tFileOutputExcel_15.getStartRow() == 0){
		
		xlsxTool_tFileOutputExcel_15.addRow();
		
		xlsxTool_tFileOutputExcel_15.addCellValue("ITEMNUMBER");
		
		xlsxTool_tFileOutputExcel_15.addCellValue("PRODUCTCOLORID");
		
		xlsxTool_tFileOutputExcel_15.addCellValue("PRODUCTSIZEID");
		
		xlsxTool_tFileOutputExcel_15.addCellValue("PRODUCTSTYLEID");
		
		xlsxTool_tFileOutputExcel_15.addCellValue("PRODUCTQUANTITYUNITSYMBOL");
		
		xlsxTool_tFileOutputExcel_15.addCellValue("BARCODESETUPID");
		
		xlsxTool_tFileOutputExcel_15.addCellValue("BARCODE");
		
		xlsxTool_tFileOutputExcel_15.addCellValue("PRODUCTDESCRIPTION");
		
		nb_line_tFileOutputExcel_15++; 
		
	}
		

 



/**
 * [tFileOutputExcel_15 begin ] stop
 */



	
	/**
	 * [tMap_27 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_27", false);
		start_Hash.put("tMap_27", System.currentTimeMillis());
		
	
	currentComponent="tMap_27";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row42");
					}
				
		int tos_count_tMap_27 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row50Struct> tHash_Lookup_row50 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row50Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row50Struct>) 
					globalMap.get( "tHash_Lookup_row50" ))
					;					
					
	

row50Struct row50HashKey = new row50Struct();
row50Struct row50Default = new row50Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_27__Struct  {
}
Var__tMap_27__Struct Var__tMap_27 = new Var__tMap_27__Struct();
// ###############################

// ###############################
// # Outputs initialization
barcodeStruct barcode_tmp = new barcodeStruct();
barcodeV3Struct barcodeV3_tmp = new barcodeV3Struct();
// ###############################

        
        



        









 



/**
 * [tMap_27 begin ] stop
 */



	
	/**
	 * [tUnite_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tUnite_2", false);
		start_Hash.put("tUnite_2", System.currentTimeMillis());
		
	
	currentComponent="tUnite_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row41","row38");
					}
				
		int tos_count_tUnite_2 = 0;
		

int nb_line_tUnite_2 = 0;

 



/**
 * [tUnite_2 begin ] stop
 */
	
	/**
	 * [tHashInput_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_10", false);
		start_Hash.put("tHashInput_10", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_10";

	
		int tos_count_tHashInput_10 = 0;
		


int nb_line_tHashInput_10 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_10=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row37Struct> tHashFile_tHashInput_10 = mf_tHashInput_10.getAdvancedMemoryHashFile("tHashFile_MASTERFILE_EXTRACT_PRODUCTS_1_" + pid +"_tHashOutput_10");
if(tHashFile_tHashInput_10==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row37Struct> iterator_tHashInput_10 = tHashFile_tHashInput_10.iterator();
while (iterator_tHashInput_10.hasNext()) {
    row37Struct next_tHashInput_10 = iterator_tHashInput_10.next();

	row38.ITEMNUMBER = next_tHashInput_10.ITEMNUMBER;
	row38.PRODUCTCOLORID = next_tHashInput_10.PRODUCTCOLORID;
	row38.PRODUCTSIZEID = next_tHashInput_10.PRODUCTSIZEID;
	row38.PRODUCTSTYLEID = next_tHashInput_10.PRODUCTSTYLEID;
	row38.PRODUCTQUANTITYUNITSYMBOL = next_tHashInput_10.PRODUCTQUANTITYUNITSYMBOL;
	row38.BARCODESETUPID = next_tHashInput_10.BARCODESETUPID;
	row38.BARCODE = next_tHashInput_10.BARCODE;
	row38.PRODUCTDESCRIPTION = next_tHashInput_10.PRODUCTDESCRIPTION;
	row38.PRODUCTQUANTITY = next_tHashInput_10.PRODUCTQUANTITY;
 



/**
 * [tHashInput_10 begin ] stop
 */
	
	/**
	 * [tHashInput_10 main ] start
	 */

	

	
	
	currentComponent="tHashInput_10";

	

 


	tos_count_tHashInput_10++;

/**
 * [tHashInput_10 main ] stop
 */
	
	/**
	 * [tHashInput_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_10";

	

 



/**
 * [tHashInput_10 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_2 main ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1,"row38");
						}
						
//////////
 

// for output
			row42 = new row42Struct();
								
			row42.ITEMNUMBER = row38.ITEMNUMBER;								
			row42.PRODUCTCOLORID = row38.PRODUCTCOLORID;								
			row42.PRODUCTSIZEID = row38.PRODUCTSIZEID;								
			row42.PRODUCTSTYLEID = row38.PRODUCTSTYLEID;								
			row42.PRODUCTQUANTITYUNITSYMBOL = row38.PRODUCTQUANTITYUNITSYMBOL;								
			row42.BARCODESETUPID = row38.BARCODESETUPID;								
			row42.BARCODE = row38.BARCODE;								
			row42.PRODUCTDESCRIPTION = row38.PRODUCTDESCRIPTION;								
			row42.PRODUCTQUANTITY = row38.PRODUCTQUANTITY;			

			nb_line_tUnite_2++;

//////////
 


	tos_count_tUnite_2++;

/**
 * [tUnite_2 main ] stop
 */
	
	/**
	 * [tUnite_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	

 



/**
 * [tUnite_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_27 main ] start
	 */

	

	
	
	currentComponent="tMap_27";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row42");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_27 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_27 = false;
		  boolean mainRowRejected_tMap_27 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row50" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow50 = false;
       		  	    	
       		  	    	
 							row50Struct row50ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_27) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_27 = false;
								
                        		    		row50HashKey.ITEMNUMBER = row42.ITEMNUMBER ;
                        		    		
                        		    		row50HashKey.PRODUCTSIZEID = row42.PRODUCTSIZEID ;
                        		    		
                        		    		row50HashKey.PRODUCTSTYLEID = row42.PRODUCTSTYLEID ;
                        		    		
                        		    		row50HashKey.PRODUCTCOLORID = row42.PRODUCTCOLORID ;
                        		    		
                        		    		row50HashKey.BARCODESETUPID = row42.BARCODESETUPID ;
                        		    		

								
		                        	row50HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row50.lookup( row50HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row50 != null && tHash_Lookup_row50.getCount(row50HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row50' and it contains more one result from keys :  row50.ITEMNUMBER = '" + row50HashKey.ITEMNUMBER + "', row50.PRODUCTSIZEID = '" + row50HashKey.PRODUCTSIZEID + "', row50.PRODUCTSTYLEID = '" + row50HashKey.PRODUCTSTYLEID + "', row50.PRODUCTCOLORID = '" + row50HashKey.PRODUCTCOLORID + "', row50.BARCODESETUPID = '" + row50HashKey.BARCODESETUPID + "'");
								} // G 071
							

							row50Struct row50 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row50Struct fromLookup_row50 = null;
							row50 = row50Default;
										 
							
								 
							
							
								if (tHash_Lookup_row50 !=null && tHash_Lookup_row50.hasNext()) { // G 099
								
							
								
								fromLookup_row50 = tHash_Lookup_row50.next();

							
							
								} // G 099
							
							

							if(fromLookup_row50 != null) {
								row50 = fromLookup_row50;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_27__Struct Var = Var__tMap_27;// ###############################
        // ###############################
        // # Output tables

barcode = null;
barcodeV3 = null;


// # Output table : 'barcode'
// # Filter conditions 
if( 

row50.ASSOCIATIONID  != null &&  !row50.BARCODE .equals( row42.BARCODE)

 ) {
barcode_tmp.ITEMNUMBER = row42.ITEMNUMBER ;
barcode_tmp.PRODUCTCOLORID = row42.PRODUCTCOLORID ;
barcode_tmp.PRODUCTSIZEID = row42.PRODUCTSIZEID ;
barcode_tmp.PRODUCTSTYLEID = row42.PRODUCTSTYLEID ;
barcode_tmp.PRODUCTQUANTITYUNITSYMBOL = row42.PRODUCTQUANTITYUNITSYMBOL ;
barcode_tmp.BARCODESETUPID = row42.BARCODESETUPID ;
barcode_tmp.BARCODE = row42.BARCODE ;
barcode_tmp.PRODUCTDESCRIPTION = row42.PRODUCTDESCRIPTION ;
barcode_tmp.PRODUCTQUANTITY = row42.PRODUCTQUANTITY ;
barcode_tmp.ASSOCIATIONID = row50.ASSOCIATIONID ;
barcode = barcode_tmp;
} // closing filter/reject

// # Output table : 'barcodeV3'
// # Filter conditions 
if( 

row50.ASSOCIATIONID  == null

 ) {
barcodeV3_tmp.ITEMNUMBER = row42.ITEMNUMBER ;
barcodeV3_tmp.PRODUCTCOLORID = row42.PRODUCTCOLORID ;
barcodeV3_tmp.PRODUCTSIZEID = row42.PRODUCTSIZEID ;
barcodeV3_tmp.PRODUCTSTYLEID = row42.PRODUCTSTYLEID ;
barcodeV3_tmp.PRODUCTQUANTITYUNITSYMBOL = row42.PRODUCTQUANTITYUNITSYMBOL ;
barcodeV3_tmp.BARCODESETUPID = row42.BARCODESETUPID ;
barcodeV3_tmp.BARCODE = row42.BARCODE ;
barcodeV3_tmp.PRODUCTDESCRIPTION = row42.PRODUCTDESCRIPTION ;
barcodeV3 = barcodeV3_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_27 = false;










 


	tos_count_tMap_27++;

/**
 * [tMap_27 main ] stop
 */
	
	/**
	 * [tMap_27 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_27";

	

 



/**
 * [tMap_27 process_data_begin ] stop
 */
// Start of branch "barcode"
if(barcode != null) { 



	
	/**
	 * [tFileOutputExcel_10 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_10";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"barcode");
					}
					

				xlsxTool_tFileOutputExcel_10.addRow();
									   				
	    				if(barcode.ITEMNUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_10.addCellValue(String.valueOf(barcode.ITEMNUMBER));
	    				} else {
	    					xlsxTool_tFileOutputExcel_10.addCellNullValue();
	    				}
					
									   				
	    				if(barcode.PRODUCTCOLORID != null) {
    				
							xlsxTool_tFileOutputExcel_10.addCellValue(String.valueOf(barcode.PRODUCTCOLORID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_10.addCellNullValue();
	    				}
					
									   				
	    				if(barcode.PRODUCTSIZEID != null) {
    				
							xlsxTool_tFileOutputExcel_10.addCellValue(String.valueOf(barcode.PRODUCTSIZEID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_10.addCellNullValue();
	    				}
					
									   				
	    				if(barcode.PRODUCTSTYLEID != null) {
    				
							xlsxTool_tFileOutputExcel_10.addCellValue(String.valueOf(barcode.PRODUCTSTYLEID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_10.addCellNullValue();
	    				}
					
									   				
	    				if(barcode.PRODUCTQUANTITYUNITSYMBOL != null) {
    				
							xlsxTool_tFileOutputExcel_10.addCellValue(String.valueOf(barcode.PRODUCTQUANTITYUNITSYMBOL));
	    				} else {
	    					xlsxTool_tFileOutputExcel_10.addCellNullValue();
	    				}
					
									   				
	    				if(barcode.BARCODESETUPID != null) {
    				
							xlsxTool_tFileOutputExcel_10.addCellValue(String.valueOf(barcode.BARCODESETUPID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_10.addCellNullValue();
	    				}
					
									   				
	    				if(barcode.BARCODE != null) {
    				
							xlsxTool_tFileOutputExcel_10.addCellValue(String.valueOf(barcode.BARCODE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_10.addCellNullValue();
	    				}
					
									   				
	    				if(barcode.PRODUCTDESCRIPTION != null) {
    				
							xlsxTool_tFileOutputExcel_10.addCellValue(String.valueOf(barcode.PRODUCTDESCRIPTION));
	    				} else {
	    					xlsxTool_tFileOutputExcel_10.addCellNullValue();
	    				}
					
									   				
	    				if(barcode.PRODUCTQUANTITY != null) {
    				
							xlsxTool_tFileOutputExcel_10.addCellValue(String.valueOf(barcode.PRODUCTQUANTITY));
	    				} else {
	    					xlsxTool_tFileOutputExcel_10.addCellNullValue();
	    				}
					
									   				
	    				if(barcode.ASSOCIATIONID != null) {
    				
							xlsxTool_tFileOutputExcel_10.addCellValue(String.valueOf(barcode.ASSOCIATIONID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_10.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_10++;
				
 


	tos_count_tFileOutputExcel_10++;

/**
 * [tFileOutputExcel_10 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_10";

	

 



/**
 * [tFileOutputExcel_10 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_10";

	

 



/**
 * [tFileOutputExcel_10 process_data_end ] stop
 */

} // End of branch "barcode"




// Start of branch "barcodeV3"
if(barcodeV3 != null) { 



	
	/**
	 * [tFileOutputExcel_15 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_15";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"barcodeV3");
					}
					

				xlsxTool_tFileOutputExcel_15.addRow();
									   				
	    				if(barcodeV3.ITEMNUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_15.addCellValue(String.valueOf(barcodeV3.ITEMNUMBER));
	    				} else {
	    					xlsxTool_tFileOutputExcel_15.addCellNullValue();
	    				}
					
									   				
	    				if(barcodeV3.PRODUCTCOLORID != null) {
    				
							xlsxTool_tFileOutputExcel_15.addCellValue(String.valueOf(barcodeV3.PRODUCTCOLORID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_15.addCellNullValue();
	    				}
					
									   				
	    				if(barcodeV3.PRODUCTSIZEID != null) {
    				
							xlsxTool_tFileOutputExcel_15.addCellValue(String.valueOf(barcodeV3.PRODUCTSIZEID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_15.addCellNullValue();
	    				}
					
									   				
	    				if(barcodeV3.PRODUCTSTYLEID != null) {
    				
							xlsxTool_tFileOutputExcel_15.addCellValue(String.valueOf(barcodeV3.PRODUCTSTYLEID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_15.addCellNullValue();
	    				}
					
									   				
	    				if(barcodeV3.PRODUCTQUANTITYUNITSYMBOL != null) {
    				
							xlsxTool_tFileOutputExcel_15.addCellValue(String.valueOf(barcodeV3.PRODUCTQUANTITYUNITSYMBOL));
	    				} else {
	    					xlsxTool_tFileOutputExcel_15.addCellNullValue();
	    				}
					
									   				
	    				if(barcodeV3.BARCODESETUPID != null) {
    				
							xlsxTool_tFileOutputExcel_15.addCellValue(String.valueOf(barcodeV3.BARCODESETUPID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_15.addCellNullValue();
	    				}
					
									   				
	    				if(barcodeV3.BARCODE != null) {
    				
							xlsxTool_tFileOutputExcel_15.addCellValue(String.valueOf(barcodeV3.BARCODE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_15.addCellNullValue();
	    				}
					
									   				
	    				if(barcodeV3.PRODUCTDESCRIPTION != null) {
    				
							xlsxTool_tFileOutputExcel_15.addCellValue(String.valueOf(barcodeV3.PRODUCTDESCRIPTION));
	    				} else {
	    					xlsxTool_tFileOutputExcel_15.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_15++;
				
 


	tos_count_tFileOutputExcel_15++;

/**
 * [tFileOutputExcel_15 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_15";

	

 



/**
 * [tFileOutputExcel_15 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_15";

	

 



/**
 * [tFileOutputExcel_15 process_data_end ] stop
 */

} // End of branch "barcodeV3"




	
	/**
	 * [tMap_27 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_27";

	

 



/**
 * [tMap_27 process_data_end ] stop
 */



	
	/**
	 * [tUnite_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	

 



/**
 * [tUnite_2 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_10";

	

 



/**
 * [tHashInput_10 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_10 end ] start
	 */

	

	
	
	currentComponent="tHashInput_10";

	
    

		
			nb_line_tHashInput_10++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_MASTERFILE_EXTRACT_PRODUCTS_1_" + pid +"_tHashOutput_10");
	


	globalMap.put("tHashInput_10_NB_LINE", nb_line_tHashInput_10);       

 

ok_Hash.put("tHashInput_10", true);
end_Hash.put("tHashInput_10", System.currentTimeMillis());




/**
 * [tHashInput_10 end ] stop
 */
	
	/**
	 * [tHashInput_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_11", false);
		start_Hash.put("tHashInput_11", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_11";

	
		int tos_count_tHashInput_11 = 0;
		


int nb_line_tHashInput_11 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_11=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row40Struct> tHashFile_tHashInput_11 = mf_tHashInput_11.getAdvancedMemoryHashFile("tHashFile_MASTERFILE_EXTRACT_PRODUCTS_1_" + pid +"_tHashOutput_11");
if(tHashFile_tHashInput_11==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row40Struct> iterator_tHashInput_11 = tHashFile_tHashInput_11.iterator();
while (iterator_tHashInput_11.hasNext()) {
    row40Struct next_tHashInput_11 = iterator_tHashInput_11.next();

	row41.ITEMNUMBER = next_tHashInput_11.ITEMNUMBER;
	row41.PRODUCTCOLORID = next_tHashInput_11.PRODUCTCOLORID;
	row41.PRODUCTSIZEID = next_tHashInput_11.PRODUCTSIZEID;
	row41.PRODUCTSTYLEID = next_tHashInput_11.PRODUCTSTYLEID;
	row41.PRODUCTQUANTITYUNITSYMBOL = next_tHashInput_11.PRODUCTQUANTITYUNITSYMBOL;
	row41.BARCODESETUPID = next_tHashInput_11.BARCODESETUPID;
	row41.BARCODE = next_tHashInput_11.BARCODE;
	row41.PRODUCTDESCRIPTION = next_tHashInput_11.PRODUCTDESCRIPTION;
	row41.PRODUCTQUANTITY = next_tHashInput_11.PRODUCTQUANTITY;
 



/**
 * [tHashInput_11 begin ] stop
 */
	
	/**
	 * [tHashInput_11 main ] start
	 */

	

	
	
	currentComponent="tHashInput_11";

	

 


	tos_count_tHashInput_11++;

/**
 * [tHashInput_11 main ] stop
 */
	
	/**
	 * [tHashInput_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_11";

	

 



/**
 * [tHashInput_11 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_2 main ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1,"row41");
						}
						
//////////
 

// for output
			row42 = new row42Struct();
								
			row42.ITEMNUMBER = row41.ITEMNUMBER;								
			row42.PRODUCTCOLORID = row41.PRODUCTCOLORID;								
			row42.PRODUCTSIZEID = row41.PRODUCTSIZEID;								
			row42.PRODUCTSTYLEID = row41.PRODUCTSTYLEID;								
			row42.PRODUCTQUANTITYUNITSYMBOL = row41.PRODUCTQUANTITYUNITSYMBOL;								
			row42.BARCODESETUPID = row41.BARCODESETUPID;								
			row42.BARCODE = row41.BARCODE;								
			row42.PRODUCTDESCRIPTION = row41.PRODUCTDESCRIPTION;								
			row42.PRODUCTQUANTITY = row41.PRODUCTQUANTITY;			

			nb_line_tUnite_2++;

//////////
 


	tos_count_tUnite_2++;

/**
 * [tUnite_2 main ] stop
 */
	
	/**
	 * [tUnite_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	

 



/**
 * [tUnite_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_27 main ] start
	 */

	

	
	
	currentComponent="tMap_27";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row42");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_27 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_27 = false;
		  boolean mainRowRejected_tMap_27 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row50" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow50 = false;
       		  	    	
       		  	    	
 							row50Struct row50ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_27) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_27 = false;
								
                        		    		row50HashKey.ITEMNUMBER = row42.ITEMNUMBER ;
                        		    		
                        		    		row50HashKey.PRODUCTSIZEID = row42.PRODUCTSIZEID ;
                        		    		
                        		    		row50HashKey.PRODUCTSTYLEID = row42.PRODUCTSTYLEID ;
                        		    		
                        		    		row50HashKey.PRODUCTCOLORID = row42.PRODUCTCOLORID ;
                        		    		
                        		    		row50HashKey.BARCODESETUPID = row42.BARCODESETUPID ;
                        		    		

								
		                        	row50HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row50.lookup( row50HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row50 != null && tHash_Lookup_row50.getCount(row50HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row50' and it contains more one result from keys :  row50.ITEMNUMBER = '" + row50HashKey.ITEMNUMBER + "', row50.PRODUCTSIZEID = '" + row50HashKey.PRODUCTSIZEID + "', row50.PRODUCTSTYLEID = '" + row50HashKey.PRODUCTSTYLEID + "', row50.PRODUCTCOLORID = '" + row50HashKey.PRODUCTCOLORID + "', row50.BARCODESETUPID = '" + row50HashKey.BARCODESETUPID + "'");
								} // G 071
							

							row50Struct row50 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row50Struct fromLookup_row50 = null;
							row50 = row50Default;
										 
							
								 
							
							
								if (tHash_Lookup_row50 !=null && tHash_Lookup_row50.hasNext()) { // G 099
								
							
								
								fromLookup_row50 = tHash_Lookup_row50.next();

							
							
								} // G 099
							
							

							if(fromLookup_row50 != null) {
								row50 = fromLookup_row50;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_27__Struct Var = Var__tMap_27;// ###############################
        // ###############################
        // # Output tables

barcode = null;
barcodeV3 = null;


// # Output table : 'barcode'
// # Filter conditions 
if( 

row50.ASSOCIATIONID  != null &&  !row50.BARCODE .equals( row42.BARCODE)

 ) {
barcode_tmp.ITEMNUMBER = row42.ITEMNUMBER ;
barcode_tmp.PRODUCTCOLORID = row42.PRODUCTCOLORID ;
barcode_tmp.PRODUCTSIZEID = row42.PRODUCTSIZEID ;
barcode_tmp.PRODUCTSTYLEID = row42.PRODUCTSTYLEID ;
barcode_tmp.PRODUCTQUANTITYUNITSYMBOL = row42.PRODUCTQUANTITYUNITSYMBOL ;
barcode_tmp.BARCODESETUPID = row42.BARCODESETUPID ;
barcode_tmp.BARCODE = row42.BARCODE ;
barcode_tmp.PRODUCTDESCRIPTION = row42.PRODUCTDESCRIPTION ;
barcode_tmp.PRODUCTQUANTITY = row42.PRODUCTQUANTITY ;
barcode_tmp.ASSOCIATIONID = row50.ASSOCIATIONID ;
barcode = barcode_tmp;
} // closing filter/reject

// # Output table : 'barcodeV3'
// # Filter conditions 
if( 

row50.ASSOCIATIONID  == null

 ) {
barcodeV3_tmp.ITEMNUMBER = row42.ITEMNUMBER ;
barcodeV3_tmp.PRODUCTCOLORID = row42.PRODUCTCOLORID ;
barcodeV3_tmp.PRODUCTSIZEID = row42.PRODUCTSIZEID ;
barcodeV3_tmp.PRODUCTSTYLEID = row42.PRODUCTSTYLEID ;
barcodeV3_tmp.PRODUCTQUANTITYUNITSYMBOL = row42.PRODUCTQUANTITYUNITSYMBOL ;
barcodeV3_tmp.BARCODESETUPID = row42.BARCODESETUPID ;
barcodeV3_tmp.BARCODE = row42.BARCODE ;
barcodeV3_tmp.PRODUCTDESCRIPTION = row42.PRODUCTDESCRIPTION ;
barcodeV3 = barcodeV3_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_27 = false;










 


	tos_count_tMap_27++;

/**
 * [tMap_27 main ] stop
 */
	
	/**
	 * [tMap_27 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_27";

	

 



/**
 * [tMap_27 process_data_begin ] stop
 */
// Start of branch "barcode"
if(barcode != null) { 



	
	/**
	 * [tFileOutputExcel_10 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_10";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"barcode");
					}
					

				xlsxTool_tFileOutputExcel_10.addRow();
									   				
	    				if(barcode.ITEMNUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_10.addCellValue(String.valueOf(barcode.ITEMNUMBER));
	    				} else {
	    					xlsxTool_tFileOutputExcel_10.addCellNullValue();
	    				}
					
									   				
	    				if(barcode.PRODUCTCOLORID != null) {
    				
							xlsxTool_tFileOutputExcel_10.addCellValue(String.valueOf(barcode.PRODUCTCOLORID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_10.addCellNullValue();
	    				}
					
									   				
	    				if(barcode.PRODUCTSIZEID != null) {
    				
							xlsxTool_tFileOutputExcel_10.addCellValue(String.valueOf(barcode.PRODUCTSIZEID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_10.addCellNullValue();
	    				}
					
									   				
	    				if(barcode.PRODUCTSTYLEID != null) {
    				
							xlsxTool_tFileOutputExcel_10.addCellValue(String.valueOf(barcode.PRODUCTSTYLEID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_10.addCellNullValue();
	    				}
					
									   				
	    				if(barcode.PRODUCTQUANTITYUNITSYMBOL != null) {
    				
							xlsxTool_tFileOutputExcel_10.addCellValue(String.valueOf(barcode.PRODUCTQUANTITYUNITSYMBOL));
	    				} else {
	    					xlsxTool_tFileOutputExcel_10.addCellNullValue();
	    				}
					
									   				
	    				if(barcode.BARCODESETUPID != null) {
    				
							xlsxTool_tFileOutputExcel_10.addCellValue(String.valueOf(barcode.BARCODESETUPID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_10.addCellNullValue();
	    				}
					
									   				
	    				if(barcode.BARCODE != null) {
    				
							xlsxTool_tFileOutputExcel_10.addCellValue(String.valueOf(barcode.BARCODE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_10.addCellNullValue();
	    				}
					
									   				
	    				if(barcode.PRODUCTDESCRIPTION != null) {
    				
							xlsxTool_tFileOutputExcel_10.addCellValue(String.valueOf(barcode.PRODUCTDESCRIPTION));
	    				} else {
	    					xlsxTool_tFileOutputExcel_10.addCellNullValue();
	    				}
					
									   				
	    				if(barcode.PRODUCTQUANTITY != null) {
    				
							xlsxTool_tFileOutputExcel_10.addCellValue(String.valueOf(barcode.PRODUCTQUANTITY));
	    				} else {
	    					xlsxTool_tFileOutputExcel_10.addCellNullValue();
	    				}
					
									   				
	    				if(barcode.ASSOCIATIONID != null) {
    				
							xlsxTool_tFileOutputExcel_10.addCellValue(String.valueOf(barcode.ASSOCIATIONID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_10.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_10++;
				
 


	tos_count_tFileOutputExcel_10++;

/**
 * [tFileOutputExcel_10 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_10";

	

 



/**
 * [tFileOutputExcel_10 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_10";

	

 



/**
 * [tFileOutputExcel_10 process_data_end ] stop
 */

} // End of branch "barcode"




// Start of branch "barcodeV3"
if(barcodeV3 != null) { 



	
	/**
	 * [tFileOutputExcel_15 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_15";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"barcodeV3");
					}
					

				xlsxTool_tFileOutputExcel_15.addRow();
									   				
	    				if(barcodeV3.ITEMNUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_15.addCellValue(String.valueOf(barcodeV3.ITEMNUMBER));
	    				} else {
	    					xlsxTool_tFileOutputExcel_15.addCellNullValue();
	    				}
					
									   				
	    				if(barcodeV3.PRODUCTCOLORID != null) {
    				
							xlsxTool_tFileOutputExcel_15.addCellValue(String.valueOf(barcodeV3.PRODUCTCOLORID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_15.addCellNullValue();
	    				}
					
									   				
	    				if(barcodeV3.PRODUCTSIZEID != null) {
    				
							xlsxTool_tFileOutputExcel_15.addCellValue(String.valueOf(barcodeV3.PRODUCTSIZEID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_15.addCellNullValue();
	    				}
					
									   				
	    				if(barcodeV3.PRODUCTSTYLEID != null) {
    				
							xlsxTool_tFileOutputExcel_15.addCellValue(String.valueOf(barcodeV3.PRODUCTSTYLEID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_15.addCellNullValue();
	    				}
					
									   				
	    				if(barcodeV3.PRODUCTQUANTITYUNITSYMBOL != null) {
    				
							xlsxTool_tFileOutputExcel_15.addCellValue(String.valueOf(barcodeV3.PRODUCTQUANTITYUNITSYMBOL));
	    				} else {
	    					xlsxTool_tFileOutputExcel_15.addCellNullValue();
	    				}
					
									   				
	    				if(barcodeV3.BARCODESETUPID != null) {
    				
							xlsxTool_tFileOutputExcel_15.addCellValue(String.valueOf(barcodeV3.BARCODESETUPID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_15.addCellNullValue();
	    				}
					
									   				
	    				if(barcodeV3.BARCODE != null) {
    				
							xlsxTool_tFileOutputExcel_15.addCellValue(String.valueOf(barcodeV3.BARCODE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_15.addCellNullValue();
	    				}
					
									   				
	    				if(barcodeV3.PRODUCTDESCRIPTION != null) {
    				
							xlsxTool_tFileOutputExcel_15.addCellValue(String.valueOf(barcodeV3.PRODUCTDESCRIPTION));
	    				} else {
	    					xlsxTool_tFileOutputExcel_15.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_15++;
				
 


	tos_count_tFileOutputExcel_15++;

/**
 * [tFileOutputExcel_15 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_15";

	

 



/**
 * [tFileOutputExcel_15 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_15";

	

 



/**
 * [tFileOutputExcel_15 process_data_end ] stop
 */

} // End of branch "barcodeV3"




	
	/**
	 * [tMap_27 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_27";

	

 



/**
 * [tMap_27 process_data_end ] stop
 */



	
	/**
	 * [tUnite_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	

 



/**
 * [tUnite_2 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_11";

	

 



/**
 * [tHashInput_11 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_11 end ] start
	 */

	

	
	
	currentComponent="tHashInput_11";

	
    

		
			nb_line_tHashInput_11++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_MASTERFILE_EXTRACT_PRODUCTS_1_" + pid +"_tHashOutput_11");
	


	globalMap.put("tHashInput_11_NB_LINE", nb_line_tHashInput_11);       

 

ok_Hash.put("tHashInput_11", true);
end_Hash.put("tHashInput_11", System.currentTimeMillis());




/**
 * [tHashInput_11 end ] stop
 */
	
	/**
	 * [tUnite_2 end ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	

globalMap.put("tUnite_2_NB_LINE", nb_line_tUnite_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row41","row38");
			  	}
			  	
 

ok_Hash.put("tUnite_2", true);
end_Hash.put("tUnite_2", System.currentTimeMillis());




/**
 * [tUnite_2 end ] stop
 */

	
	/**
	 * [tMap_27 end ] start
	 */

	

	
	
	currentComponent="tMap_27";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row50 != null) {
						tHash_Lookup_row50.endGet();
					}
					globalMap.remove( "tHash_Lookup_row50" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row42");
			  	}
			  	
 

ok_Hash.put("tMap_27", true);
end_Hash.put("tMap_27", System.currentTimeMillis());




/**
 * [tMap_27 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_10 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_10";

	

	
	
	
			xlsxTool_tFileOutputExcel_10.writeExcel(fileName_tFileOutputExcel_10,true);
	
		
			nb_line_tFileOutputExcel_10 = nb_line_tFileOutputExcel_10 -1;
		
		globalMap.put("tFileOutputExcel_10_NB_LINE",nb_line_tFileOutputExcel_10);
		
		

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"barcode");
			  	}
			  	
 

ok_Hash.put("tFileOutputExcel_10", true);
end_Hash.put("tFileOutputExcel_10", System.currentTimeMillis());




/**
 * [tFileOutputExcel_10 end ] stop
 */




	
	/**
	 * [tFileOutputExcel_15 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_15";

	

	
	
	
			xlsxTool_tFileOutputExcel_15.writeExcel(fileName_tFileOutputExcel_15,true);
	
		
			nb_line_tFileOutputExcel_15 = nb_line_tFileOutputExcel_15 -1;
		
		globalMap.put("tFileOutputExcel_15_NB_LINE",nb_line_tFileOutputExcel_15);
		
		

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"barcodeV3");
			  	}
			  	
 

ok_Hash.put("tFileOutputExcel_15", true);
end_Hash.put("tFileOutputExcel_15", System.currentTimeMillis());




/**
 * [tFileOutputExcel_15 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_27"
					     			globalMap.remove("tHash_Lookup_row50"); 
				     			
				try{
					
	
	/**
	 * [tHashInput_10 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_10";

	

 



/**
 * [tHashInput_10 finally ] stop
 */
	
	/**
	 * [tHashInput_11 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_11";

	

 



/**
 * [tHashInput_11 finally ] stop
 */
	
	/**
	 * [tUnite_2 finally ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	

 



/**
 * [tUnite_2 finally ] stop
 */

	
	/**
	 * [tMap_27 finally ] start
	 */

	

	
	
	currentComponent="tMap_27";

	

 



/**
 * [tMap_27 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_10 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_10";

	

 



/**
 * [tFileOutputExcel_10 finally ] stop
 */




	
	/**
	 * [tFileOutputExcel_15 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_15";

	

 



/**
 * [tFileOutputExcel_15 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_10_SUBPROCESS_STATE", 1);
	}
	


public static class row50Struct implements routines.system.IPersistableComparableLookupRow<row50Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String BARCODESETUPID;

				public String getBARCODESETUPID () {
					return this.BARCODESETUPID;
				}
				
			    public String BARCODE;

				public String getBARCODE () {
					return this.BARCODE;
				}
				
			    public String ASSOCIATIONID;

				public String getASSOCIATIONID () {
					return this.ASSOCIATIONID;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ITEMNUMBER == null) ? 0 : this.ITEMNUMBER.hashCode());
					
						result = prime * result + ((this.PRODUCTSIZEID == null) ? 0 : this.PRODUCTSIZEID.hashCode());
					
						result = prime * result + ((this.PRODUCTSTYLEID == null) ? 0 : this.PRODUCTSTYLEID.hashCode());
					
						result = prime * result + ((this.PRODUCTCOLORID == null) ? 0 : this.PRODUCTCOLORID.hashCode());
					
						result = prime * result + ((this.BARCODESETUPID == null) ? 0 : this.BARCODESETUPID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row50Struct other = (row50Struct) obj;
		
						if (this.ITEMNUMBER == null) {
							if (other.ITEMNUMBER != null)
								return false;
						
						} else if (!this.ITEMNUMBER.equals(other.ITEMNUMBER))
						
							return false;
					
						if (this.PRODUCTSIZEID == null) {
							if (other.PRODUCTSIZEID != null)
								return false;
						
						} else if (!this.PRODUCTSIZEID.equals(other.PRODUCTSIZEID))
						
							return false;
					
						if (this.PRODUCTSTYLEID == null) {
							if (other.PRODUCTSTYLEID != null)
								return false;
						
						} else if (!this.PRODUCTSTYLEID.equals(other.PRODUCTSTYLEID))
						
							return false;
					
						if (this.PRODUCTCOLORID == null) {
							if (other.PRODUCTCOLORID != null)
								return false;
						
						} else if (!this.PRODUCTCOLORID.equals(other.PRODUCTCOLORID))
						
							return false;
					
						if (this.BARCODESETUPID == null) {
							if (other.BARCODESETUPID != null)
								return false;
						
						} else if (!this.BARCODESETUPID.equals(other.BARCODESETUPID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row50Struct other) {

		other.ITEMNUMBER = this.ITEMNUMBER;
	            other.PRODUCTSIZEID = this.PRODUCTSIZEID;
	            other.PRODUCTSTYLEID = this.PRODUCTSTYLEID;
	            other.PRODUCTCOLORID = this.PRODUCTCOLORID;
	            other.BARCODESETUPID = this.BARCODESETUPID;
	            other.BARCODE = this.BARCODE;
	            other.ASSOCIATIONID = this.ASSOCIATIONID;
	            
	}

	public void copyKeysDataTo(row50Struct other) {

		other.ITEMNUMBER = this.ITEMNUMBER;
	            	other.PRODUCTSIZEID = this.PRODUCTSIZEID;
	            	other.PRODUCTSTYLEID = this.PRODUCTSTYLEID;
	            	other.PRODUCTCOLORID = this.PRODUCTCOLORID;
	            	other.BARCODESETUPID = this.BARCODESETUPID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.ITEMNUMBER = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.BARCODESETUPID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.BARCODESETUPID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.BARCODE = readString(dis,ois);
					
						this.ASSOCIATIONID = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.BARCODE, dos, oos);
					
						writeString(this.ASSOCIATIONID, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",BARCODESETUPID="+BARCODESETUPID);
		sb.append(",BARCODE="+BARCODE);
		sb.append(",ASSOCIATIONID="+ASSOCIATIONID);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row50Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ITEMNUMBER, other.ITEMNUMBER);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.PRODUCTSIZEID, other.PRODUCTSIZEID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.PRODUCTSTYLEID, other.PRODUCTSTYLEID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.PRODUCTCOLORID, other.PRODUCTCOLORID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.BARCODESETUPID, other.BARCODESETUPID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row50Struct row50 = new row50Struct();




	
	/**
	 * [tAdvancedHash_row50 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row50", false);
		start_Hash.put("tAdvancedHash_row50", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row50";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row50");
					}
				
		int tos_count_tAdvancedHash_row50 = 0;
		

			   		// connection name:row50
			   		// source node:tDBInput_4 - inputs:(after_tHashInput_10) outputs:(row50,row50) | target node:tAdvancedHash_row50 - inputs:(row50) outputs:()
			   		// linked node: tMap_27 - inputs:(row42,row50) outputs:(barcode,barcodeV3)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row50 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row50Struct> tHash_Lookup_row50 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row50Struct>getLookup(matchingModeEnum_row50);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row50", tHash_Lookup_row50);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row50 begin ] stop
 */



	
	/**
	 * [tDBInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_4", false);
		start_Hash.put("tDBInput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_4";

	
		int tos_count_tDBInput_4 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_4 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_4 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_4  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_4, talendToDBArray_tDBInput_4); 
		    int nb_line_tDBInput_4 = 0;
		    java.sql.Connection conn_tDBInput_4 = null;
				String driverClass_tDBInput_4 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
			    java.lang.Class jdbcclazz_tDBInput_4 = java.lang.Class.forName(driverClass_tDBInput_4);
					String dbUser_tDBInput_4 = context.SQLSERVER_Login;
					
					
					
	final String decryptedPassword_tDBInput_4 = context.SQLSERVER_Password; 
					
					String dbPwd_tDBInput_4 = decryptedPassword_tDBInput_4;
				
		    String port_tDBInput_4 = context.SQLSERVER_Port;
		    String dbname_tDBInput_4 = context.SQLSERVER_Database ;		    
		    String url_tDBInput_4 = "jdbc:sqlserver://" + context.SQLSERVER_Server ;
		    if (!"".equals(port_tDBInput_4)) {
		    	url_tDBInput_4 += ":" + context.SQLSERVER_Port;
		    }
		    if (!"".equals(dbname_tDBInput_4)) {		    
		    	url_tDBInput_4 += ";databaseName=" + context.SQLSERVER_Database; 
		    }
		    url_tDBInput_4 += ";appName=" + projectName + ";" + context.SQLSERVER_AdditionalParams;
		    String dbschema_tDBInput_4 = context.SQLSERVER_Schema;
				
				conn_tDBInput_4 = java.sql.DriverManager.getConnection(url_tDBInput_4,dbUser_tDBInput_4,dbPwd_tDBInput_4);
		        
		    
			java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();

		    String dbquery_tDBInput_4 = "\nSelect a.ITEMNUMBER,a.PRODUCTSIZEID,a.PRODUCTSTYLEID,a.PRODUCTCOLORID,a.BARCODESETUPID,a.BARCODE, a.ASSOCIATIONID\nfr"
+"om data.D365_ItemBarcodeAssociations a inner join\n(\nselect ITEMNUMBER,PRODUCTSIZEID,PRODUCTSTYLEID,PRODUCTCOLORID,BARC"
+"ODESETUPID, MAX(ASSOCIATIONId) as maxassociation from data.D365_ItemBarcodeAssociations\ngroup by ITEMNUMBER,PRODUCTSIZE"
+"ID,PRODUCTSTYLEID,PRODUCTCOLORID,BARCODESETUPID) b\non a.ITEMNUMBER = b.ITEMNUMBER\nand a.PRODUCTSIZEID = b.PRODUCTSIZEI"
+"D\nand a.PRODUCTSTYLEID = b.PRODUCTSTYLEID\nand a.PRODUCTCOLORID = b.PRODUCTCOLORID\nand a.BARCODESETUPID = b.BARCODESET"
+"UPID\nand a.ASSOCIATIONID = b.maxassociation\n\n";
			

            	globalMap.put("tDBInput_4_QUERY",dbquery_tDBInput_4);
		    java.sql.ResultSet rs_tDBInput_4 = null;

		    try {
		    	rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
		    	int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

		    String tmpContent_tDBInput_4 = null;
		    
		    
		    while (rs_tDBInput_4.next()) {
		        nb_line_tDBInput_4++;
		        
							if(colQtyInRs_tDBInput_4 < 1) {
								row50.ITEMNUMBER = null;
							} else {
	                         		
           		tmpContent_tDBInput_4 = rs_tDBInput_4.getString(1);
            if(tmpContent_tDBInput_4 != null) {
            	if (talendToDBList_tDBInput_4 .contains(rsmd_tDBInput_4.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		row50.ITEMNUMBER = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
            	} else {
                	row50.ITEMNUMBER = tmpContent_tDBInput_4;
                }
            } else {
                row50.ITEMNUMBER = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 2) {
								row50.PRODUCTSIZEID = null;
							} else {
	                         		
           		tmpContent_tDBInput_4 = rs_tDBInput_4.getString(2);
            if(tmpContent_tDBInput_4 != null) {
            	if (talendToDBList_tDBInput_4 .contains(rsmd_tDBInput_4.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		row50.PRODUCTSIZEID = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
            	} else {
                	row50.PRODUCTSIZEID = tmpContent_tDBInput_4;
                }
            } else {
                row50.PRODUCTSIZEID = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 3) {
								row50.PRODUCTSTYLEID = null;
							} else {
	                         		
           		tmpContent_tDBInput_4 = rs_tDBInput_4.getString(3);
            if(tmpContent_tDBInput_4 != null) {
            	if (talendToDBList_tDBInput_4 .contains(rsmd_tDBInput_4.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
            		row50.PRODUCTSTYLEID = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
            	} else {
                	row50.PRODUCTSTYLEID = tmpContent_tDBInput_4;
                }
            } else {
                row50.PRODUCTSTYLEID = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 4) {
								row50.PRODUCTCOLORID = null;
							} else {
	                         		
           		tmpContent_tDBInput_4 = rs_tDBInput_4.getString(4);
            if(tmpContent_tDBInput_4 != null) {
            	if (talendToDBList_tDBInput_4 .contains(rsmd_tDBInput_4.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
            		row50.PRODUCTCOLORID = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
            	} else {
                	row50.PRODUCTCOLORID = tmpContent_tDBInput_4;
                }
            } else {
                row50.PRODUCTCOLORID = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 5) {
								row50.BARCODESETUPID = null;
							} else {
	                         		
           		tmpContent_tDBInput_4 = rs_tDBInput_4.getString(5);
            if(tmpContent_tDBInput_4 != null) {
            	if (talendToDBList_tDBInput_4 .contains(rsmd_tDBInput_4.getColumnTypeName(5).toUpperCase(java.util.Locale.ENGLISH))) {
            		row50.BARCODESETUPID = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
            	} else {
                	row50.BARCODESETUPID = tmpContent_tDBInput_4;
                }
            } else {
                row50.BARCODESETUPID = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 6) {
								row50.BARCODE = null;
							} else {
	                         		
           		tmpContent_tDBInput_4 = rs_tDBInput_4.getString(6);
            if(tmpContent_tDBInput_4 != null) {
            	if (talendToDBList_tDBInput_4 .contains(rsmd_tDBInput_4.getColumnTypeName(6).toUpperCase(java.util.Locale.ENGLISH))) {
            		row50.BARCODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
            	} else {
                	row50.BARCODE = tmpContent_tDBInput_4;
                }
            } else {
                row50.BARCODE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 7) {
								row50.ASSOCIATIONID = null;
							} else {
	                         		
           		tmpContent_tDBInput_4 = rs_tDBInput_4.getString(7);
            if(tmpContent_tDBInput_4 != null) {
            	if (talendToDBList_tDBInput_4 .contains(rsmd_tDBInput_4.getColumnTypeName(7).toUpperCase(java.util.Locale.ENGLISH))) {
            		row50.ASSOCIATIONID = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
            	} else {
                	row50.ASSOCIATIONID = tmpContent_tDBInput_4;
                }
            } else {
                row50.ASSOCIATIONID = null;
            }
		                    }
					





 



/**
 * [tDBInput_4 begin ] stop
 */
	
	/**
	 * [tDBInput_4 main ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 


	tos_count_tDBInput_4++;

/**
 * [tDBInput_4 main ] stop
 */
	
	/**
	 * [tDBInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row50 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row50";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row50");
					}
					


			   
			   

					row50Struct row50_HashRow = new row50Struct();
		   	   	   
				
				row50_HashRow.ITEMNUMBER = row50.ITEMNUMBER;
				
				row50_HashRow.PRODUCTSIZEID = row50.PRODUCTSIZEID;
				
				row50_HashRow.PRODUCTSTYLEID = row50.PRODUCTSTYLEID;
				
				row50_HashRow.PRODUCTCOLORID = row50.PRODUCTCOLORID;
				
				row50_HashRow.BARCODESETUPID = row50.BARCODESETUPID;
				
				row50_HashRow.BARCODE = row50.BARCODE;
				
				row50_HashRow.ASSOCIATIONID = row50.ASSOCIATIONID;
				
			tHash_Lookup_row50.put(row50_HashRow);
			
            




 


	tos_count_tAdvancedHash_row50++;

/**
 * [tAdvancedHash_row50 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row50 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row50";

	

 



/**
 * [tAdvancedHash_row50 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row50 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row50";

	

 



/**
 * [tAdvancedHash_row50 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_4 end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

	}
}finally{
	if (rs_tDBInput_4 != null) {
		rs_tDBInput_4.close();
	}
	if (stmt_tDBInput_4 != null) {
		stmt_tDBInput_4.close();
	}
		if(conn_tDBInput_4 != null && !conn_tDBInput_4.isClosed()) {
			
			conn_tDBInput_4.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_4_NB_LINE",nb_line_tDBInput_4);

 

ok_Hash.put("tDBInput_4", true);
end_Hash.put("tDBInput_4", System.currentTimeMillis());




/**
 * [tDBInput_4 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row50 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row50";

	

tHash_Lookup_row50.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row50");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row50", true);
end_Hash.put("tAdvancedHash_row50", System.currentTimeMillis());




/**
 * [tAdvancedHash_row50 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row50 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row50";

	

 



/**
 * [tAdvancedHash_row50 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class row43Struct implements routines.system.IPersistableRow<row43Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String PRODUCTMASTERNUMBER;

				public String getPRODUCTMASTERNUMBER () {
					return this.PRODUCTMASTERNUMBER;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String PRODUCTNAME;

				public String getPRODUCTNAME () {
					return this.PRODUCTNAME;
				}
				
			    public String PRODUCTSEARCHNAME;

				public String getPRODUCTSEARCHNAME () {
					return this.PRODUCTSEARCHNAME;
				}
				
			    public String PRODUCTVARIANTNUMBER;

				public String getPRODUCTVARIANTNUMBER () {
					return this.PRODUCTVARIANTNUMBER;
				}
				
			    public String PRODUCTDESCRIPTION;

				public String getPRODUCTDESCRIPTION () {
					return this.PRODUCTDESCRIPTION;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.PRODUCTMASTERNUMBER = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.PRODUCTNAME = readString(dis);
					
					this.PRODUCTSEARCHNAME = readString(dis);
					
					this.PRODUCTVARIANTNUMBER = readString(dis);
					
					this.PRODUCTDESCRIPTION = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTMASTERNUMBER,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.PRODUCTNAME,dos);
					
					// String
				
						writeString(this.PRODUCTSEARCHNAME,dos);
					
					// String
				
						writeString(this.PRODUCTVARIANTNUMBER,dos);
					
					// String
				
						writeString(this.PRODUCTDESCRIPTION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTMASTERNUMBER="+PRODUCTMASTERNUMBER);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",PRODUCTNAME="+PRODUCTNAME);
		sb.append(",PRODUCTSEARCHNAME="+PRODUCTSEARCHNAME);
		sb.append(",PRODUCTVARIANTNUMBER="+PRODUCTVARIANTNUMBER);
		sb.append(",PRODUCTDESCRIPTION="+PRODUCTDESCRIPTION);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row43Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class Main2Struct implements routines.system.IPersistableRow<Main2Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String PRODUCTMASTERNUMBER;

				public String getPRODUCTMASTERNUMBER () {
					return this.PRODUCTMASTERNUMBER;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String PRODUCTNAME;

				public String getPRODUCTNAME () {
					return this.PRODUCTNAME;
				}
				
			    public String PRODUCTSEARCHNAME;

				public String getPRODUCTSEARCHNAME () {
					return this.PRODUCTSEARCHNAME;
				}
				
			    public String PRODUCTVARIANTNUMBER;

				public String getPRODUCTVARIANTNUMBER () {
					return this.PRODUCTVARIANTNUMBER;
				}
				
			    public String PRODUCTDESCRIPTION;

				public String getPRODUCTDESCRIPTION () {
					return this.PRODUCTDESCRIPTION;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.PRODUCTMASTERNUMBER = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.PRODUCTNAME = readString(dis);
					
					this.PRODUCTSEARCHNAME = readString(dis);
					
					this.PRODUCTVARIANTNUMBER = readString(dis);
					
					this.PRODUCTDESCRIPTION = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTMASTERNUMBER,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.PRODUCTNAME,dos);
					
					// String
				
						writeString(this.PRODUCTSEARCHNAME,dos);
					
					// String
				
						writeString(this.PRODUCTVARIANTNUMBER,dos);
					
					// String
				
						writeString(this.PRODUCTDESCRIPTION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTMASTERNUMBER="+PRODUCTMASTERNUMBER);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",PRODUCTNAME="+PRODUCTNAME);
		sb.append(",PRODUCTSEARCHNAME="+PRODUCTSEARCHNAME);
		sb.append(",PRODUCTVARIANTNUMBER="+PRODUCTVARIANTNUMBER);
		sb.append(",PRODUCTDESCRIPTION="+PRODUCTDESCRIPTION);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Main2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row19Struct implements routines.system.IPersistableRow<row19Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String PRODUCTMASTERNUMBER;

				public String getPRODUCTMASTERNUMBER () {
					return this.PRODUCTMASTERNUMBER;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String PRODUCTNAME;

				public String getPRODUCTNAME () {
					return this.PRODUCTNAME;
				}
				
			    public String PRODUCTSEARCHNAME;

				public String getPRODUCTSEARCHNAME () {
					return this.PRODUCTSEARCHNAME;
				}
				
			    public String PRODUCTVARIANTNUMBER;

				public String getPRODUCTVARIANTNUMBER () {
					return this.PRODUCTVARIANTNUMBER;
				}
				
			    public String PRODUCTDESCRIPTION;

				public String getPRODUCTDESCRIPTION () {
					return this.PRODUCTDESCRIPTION;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.PRODUCTMASTERNUMBER = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.PRODUCTNAME = readString(dis);
					
					this.PRODUCTSEARCHNAME = readString(dis);
					
					this.PRODUCTVARIANTNUMBER = readString(dis);
					
					this.PRODUCTDESCRIPTION = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTMASTERNUMBER,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.PRODUCTNAME,dos);
					
					// String
				
						writeString(this.PRODUCTSEARCHNAME,dos);
					
					// String
				
						writeString(this.PRODUCTVARIANTNUMBER,dos);
					
					// String
				
						writeString(this.PRODUCTDESCRIPTION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTMASTERNUMBER="+PRODUCTMASTERNUMBER);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",PRODUCTNAME="+PRODUCTNAME);
		sb.append(",PRODUCTSEARCHNAME="+PRODUCTSEARCHNAME);
		sb.append(",PRODUCTVARIANTNUMBER="+PRODUCTVARIANTNUMBER);
		sb.append(",PRODUCTDESCRIPTION="+PRODUCTDESCRIPTION);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row19Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tHashInput_4Struct implements routines.system.IPersistableRow<after_tHashInput_4Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String PRODUCTMASTERNUMBER;

				public String getPRODUCTMASTERNUMBER () {
					return this.PRODUCTMASTERNUMBER;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String PRODUCTNAME;

				public String getPRODUCTNAME () {
					return this.PRODUCTNAME;
				}
				
			    public String PRODUCTSEARCHNAME;

				public String getPRODUCTSEARCHNAME () {
					return this.PRODUCTSEARCHNAME;
				}
				
			    public String PRODUCTVARIANTNUMBER;

				public String getPRODUCTVARIANTNUMBER () {
					return this.PRODUCTVARIANTNUMBER;
				}
				
			    public String PRODUCTDESCRIPTION;

				public String getPRODUCTDESCRIPTION () {
					return this.PRODUCTDESCRIPTION;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.PRODUCTMASTERNUMBER = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.PRODUCTNAME = readString(dis);
					
					this.PRODUCTSEARCHNAME = readString(dis);
					
					this.PRODUCTVARIANTNUMBER = readString(dis);
					
					this.PRODUCTDESCRIPTION = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTMASTERNUMBER,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.PRODUCTNAME,dos);
					
					// String
				
						writeString(this.PRODUCTSEARCHNAME,dos);
					
					// String
				
						writeString(this.PRODUCTVARIANTNUMBER,dos);
					
					// String
				
						writeString(this.PRODUCTDESCRIPTION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTMASTERNUMBER="+PRODUCTMASTERNUMBER);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",PRODUCTNAME="+PRODUCTNAME);
		sb.append(",PRODUCTSEARCHNAME="+PRODUCTSEARCHNAME);
		sb.append(",PRODUCTVARIANTNUMBER="+PRODUCTVARIANTNUMBER);
		sb.append(",PRODUCTDESCRIPTION="+PRODUCTDESCRIPTION);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tHashInput_4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tHashInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tHashInput_5Process(globalMap);

		row19Struct row19 = new row19Struct();
Main2Struct Main2 = new Main2Struct();
row43Struct row43 = new row43Struct();






	
	/**
	 * [tFileOutputExcel_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_12", false);
		start_Hash.put("tFileOutputExcel_12", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_12";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row43");
					}
				
		int tos_count_tFileOutputExcel_12 = 0;
		


		int columnIndex_tFileOutputExcel_12 = 0;
		
		String fileName_tFileOutputExcel_12=context.ExtractPathHBE + "Product variants V2.xlsx";
		int nb_line_tFileOutputExcel_12 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_12 = new org.talend.ExcelTool();
		
		xlsxTool_tFileOutputExcel_12.setSheet("Product variants V2");
		xlsxTool_tFileOutputExcel_12.setAppend(false,true);
		xlsxTool_tFileOutputExcel_12.setRecalculateFormula(false);
		xlsxTool_tFileOutputExcel_12.setXY(false,0,10,false);
		
		java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_12 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap.get("concurrentHashMap");
		java.lang.Object lockObj_tFileOutputExcel_12 = chm_tFileOutputExcel_12.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_12", k -> new Object());
		synchronized (lockObj_tFileOutputExcel_12) {
			
				xlsxTool_tFileOutputExcel_12.prepareXlsxFile(fileName_tFileOutputExcel_12);
			
		}
		
		xlsxTool_tFileOutputExcel_12.setFont("");
		
		if (xlsxTool_tFileOutputExcel_12.getStartRow() == 0){
		
		xlsxTool_tFileOutputExcel_12.addRow();
		
		xlsxTool_tFileOutputExcel_12.addCellValue("PRODUCTMASTERNUMBER");
		
		xlsxTool_tFileOutputExcel_12.addCellValue("PRODUCTCOLORID");
		
		xlsxTool_tFileOutputExcel_12.addCellValue("PRODUCTSIZEID");
		
		xlsxTool_tFileOutputExcel_12.addCellValue("PRODUCTSTYLEID");
		
		xlsxTool_tFileOutputExcel_12.addCellValue("PRODUCTNAME");
		
		xlsxTool_tFileOutputExcel_12.addCellValue("PRODUCTSEARCHNAME");
		
		xlsxTool_tFileOutputExcel_12.addCellValue("PRODUCTVARIANTNUMBER");
		
		xlsxTool_tFileOutputExcel_12.addCellValue("PRODUCTDESCRIPTION");
		
		nb_line_tFileOutputExcel_12++; 
		
	}
		

 



/**
 * [tFileOutputExcel_12 begin ] stop
 */



	
	/**
	 * [tUniqRow_21 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_21", false);
		start_Hash.put("tUniqRow_21", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_21";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Main2");
					}
				
		int tos_count_tUniqRow_21 = 0;
		

	
		class KeyStruct_tUniqRow_21 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String PRODUCTMASTERNUMBER;
					String PRODUCTCOLORID;
					String PRODUCTSIZEID;
					String PRODUCTSTYLEID;
					String PRODUCTNAME;
					String PRODUCTSEARCHNAME;
					String PRODUCTVARIANTNUMBER;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.PRODUCTMASTERNUMBER == null) ? 0 : this.PRODUCTMASTERNUMBER.hashCode());
								
								result = prime * result + ((this.PRODUCTCOLORID == null) ? 0 : this.PRODUCTCOLORID.hashCode());
								
								result = prime * result + ((this.PRODUCTSIZEID == null) ? 0 : this.PRODUCTSIZEID.hashCode());
								
								result = prime * result + ((this.PRODUCTSTYLEID == null) ? 0 : this.PRODUCTSTYLEID.hashCode());
								
								result = prime * result + ((this.PRODUCTNAME == null) ? 0 : this.PRODUCTNAME.hashCode());
								
								result = prime * result + ((this.PRODUCTSEARCHNAME == null) ? 0 : this.PRODUCTSEARCHNAME.hashCode());
								
								result = prime * result + ((this.PRODUCTVARIANTNUMBER == null) ? 0 : this.PRODUCTVARIANTNUMBER.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_21 other = (KeyStruct_tUniqRow_21) obj;
				
									if (this.PRODUCTMASTERNUMBER == null) {
										if (other.PRODUCTMASTERNUMBER != null) 
											return false;
								
									} else if (!this.PRODUCTMASTERNUMBER.equals(other.PRODUCTMASTERNUMBER))
								 
										return false;
								
									if (this.PRODUCTCOLORID == null) {
										if (other.PRODUCTCOLORID != null) 
											return false;
								
									} else if (!this.PRODUCTCOLORID.equals(other.PRODUCTCOLORID))
								 
										return false;
								
									if (this.PRODUCTSIZEID == null) {
										if (other.PRODUCTSIZEID != null) 
											return false;
								
									} else if (!this.PRODUCTSIZEID.equals(other.PRODUCTSIZEID))
								 
										return false;
								
									if (this.PRODUCTSTYLEID == null) {
										if (other.PRODUCTSTYLEID != null) 
											return false;
								
									} else if (!this.PRODUCTSTYLEID.equals(other.PRODUCTSTYLEID))
								 
										return false;
								
									if (this.PRODUCTNAME == null) {
										if (other.PRODUCTNAME != null) 
											return false;
								
									} else if (!this.PRODUCTNAME.equals(other.PRODUCTNAME))
								 
										return false;
								
									if (this.PRODUCTSEARCHNAME == null) {
										if (other.PRODUCTSEARCHNAME != null) 
											return false;
								
									} else if (!this.PRODUCTSEARCHNAME.equals(other.PRODUCTSEARCHNAME))
								 
										return false;
								
									if (this.PRODUCTVARIANTNUMBER == null) {
										if (other.PRODUCTVARIANTNUMBER != null) 
											return false;
								
									} else if (!this.PRODUCTVARIANTNUMBER.equals(other.PRODUCTVARIANTNUMBER))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_21 = 0;
int nb_duplicates_tUniqRow_21 = 0;
KeyStruct_tUniqRow_21 finder_tUniqRow_21 = new KeyStruct_tUniqRow_21();
java.util.Set<KeyStruct_tUniqRow_21> keystUniqRow_21 = new java.util.HashSet<KeyStruct_tUniqRow_21>(); 

 



/**
 * [tUniqRow_21 begin ] stop
 */



	
	/**
	 * [tMap_24 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_24", false);
		start_Hash.put("tMap_24", System.currentTimeMillis());
		
	
	currentComponent="tMap_24";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row19");
					}
				
		int tos_count_tMap_24 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct> tHash_Lookup_row22 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct>) 
					globalMap.get( "tHash_Lookup_row22" ))
					;					
					
	

row22Struct row22HashKey = new row22Struct();
row22Struct row22Default = new row22Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_24__Struct  {
}
Var__tMap_24__Struct Var__tMap_24 = new Var__tMap_24__Struct();
// ###############################

// ###############################
// # Outputs initialization
Main2Struct Main2_tmp = new Main2Struct();
// ###############################

        
        



        









 



/**
 * [tMap_24 begin ] stop
 */



	
	/**
	 * [tHashInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_4", false);
		start_Hash.put("tHashInput_4", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_4";

	
		int tos_count_tHashInput_4 = 0;
		


int nb_line_tHashInput_4 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_4=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row18Struct> tHashFile_tHashInput_4 = mf_tHashInput_4.getAdvancedMemoryHashFile("tHashFile_MASTERFILE_EXTRACT_PRODUCTS_1_" + pid +"_tHashOutput_4");
if(tHashFile_tHashInput_4==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row18Struct> iterator_tHashInput_4 = tHashFile_tHashInput_4.iterator();
while (iterator_tHashInput_4.hasNext()) {
    row18Struct next_tHashInput_4 = iterator_tHashInput_4.next();

	row19.PRODUCTMASTERNUMBER = next_tHashInput_4.PRODUCTMASTERNUMBER;
	row19.PRODUCTCOLORID = next_tHashInput_4.PRODUCTCOLORID;
	row19.PRODUCTSIZEID = next_tHashInput_4.PRODUCTSIZEID;
	row19.PRODUCTSTYLEID = next_tHashInput_4.PRODUCTSTYLEID;
	row19.PRODUCTNAME = next_tHashInput_4.PRODUCTNAME;
	row19.PRODUCTSEARCHNAME = next_tHashInput_4.PRODUCTSEARCHNAME;
	row19.PRODUCTVARIANTNUMBER = next_tHashInput_4.PRODUCTVARIANTNUMBER;
	row19.PRODUCTDESCRIPTION = next_tHashInput_4.PRODUCTDESCRIPTION;
 



/**
 * [tHashInput_4 begin ] stop
 */
	
	/**
	 * [tHashInput_4 main ] start
	 */

	

	
	
	currentComponent="tHashInput_4";

	

 


	tos_count_tHashInput_4++;

/**
 * [tHashInput_4 main ] stop
 */
	
	/**
	 * [tHashInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_4";

	

 



/**
 * [tHashInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tMap_24 main ] start
	 */

	

	
	
	currentComponent="tMap_24";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row19");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_24 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_24 = false;
		  boolean mainRowRejected_tMap_24 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row22" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow22 = false;
       		  	    	
       		  	    	
 							row22Struct row22ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_24) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_24 = false;
								
                        		    		row22HashKey.PRODUCTMASTERNUMBER = row19.PRODUCTMASTERNUMBER ;
                        		    		

								
		                        	row22HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row22.lookup( row22HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row22 != null && tHash_Lookup_row22.getCount(row22HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row22' and it contains more one result from keys :  row22.PRODUCTMASTERNUMBER = '" + row22HashKey.PRODUCTMASTERNUMBER + "'");
								} // G 071
							

							row22Struct row22 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row22Struct fromLookup_row22 = null;
							row22 = row22Default;
										 
							
								 
							
							
								if (tHash_Lookup_row22 !=null && tHash_Lookup_row22.hasNext()) { // G 099
								
							
								
								fromLookup_row22 = tHash_Lookup_row22.next();

							
							
								} // G 099
							
							

							if(fromLookup_row22 != null) {
								row22 = fromLookup_row22;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_24__Struct Var = Var__tMap_24;// ###############################
        // ###############################
        // # Output tables

Main2 = null;


// # Output table : 'Main2'
Main2_tmp.PRODUCTMASTERNUMBER = row19.PRODUCTMASTERNUMBER ;
Main2_tmp.PRODUCTCOLORID = row19.PRODUCTCOLORID ;
Main2_tmp.PRODUCTSIZEID = row19.PRODUCTSIZEID ;
Main2_tmp.PRODUCTSTYLEID = row19.PRODUCTSTYLEID ;
Main2_tmp.PRODUCTNAME = row22.DESCRIPTION ;
Main2_tmp.PRODUCTSEARCHNAME = row19.PRODUCTSEARCHNAME ;
Main2_tmp.PRODUCTVARIANTNUMBER = row19.PRODUCTVARIANTNUMBER ;
Main2_tmp.PRODUCTDESCRIPTION = "";
Main2 = Main2_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_24 = false;










 


	tos_count_tMap_24++;

/**
 * [tMap_24 main ] stop
 */
	
	/**
	 * [tMap_24 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_24";

	

 



/**
 * [tMap_24 process_data_begin ] stop
 */
// Start of branch "Main2"
if(Main2 != null) { 



	
	/**
	 * [tUniqRow_21 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_21";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"Main2");
					}
					
row43 = null;			
if(Main2.PRODUCTMASTERNUMBER == null){
	finder_tUniqRow_21.PRODUCTMASTERNUMBER = null;
}else{
	finder_tUniqRow_21.PRODUCTMASTERNUMBER = Main2.PRODUCTMASTERNUMBER.toLowerCase();
}
if(Main2.PRODUCTCOLORID == null){
	finder_tUniqRow_21.PRODUCTCOLORID = null;
}else{
	finder_tUniqRow_21.PRODUCTCOLORID = Main2.PRODUCTCOLORID.toLowerCase();
}
if(Main2.PRODUCTSIZEID == null){
	finder_tUniqRow_21.PRODUCTSIZEID = null;
}else{
	finder_tUniqRow_21.PRODUCTSIZEID = Main2.PRODUCTSIZEID.toLowerCase();
}
if(Main2.PRODUCTSTYLEID == null){
	finder_tUniqRow_21.PRODUCTSTYLEID = null;
}else{
	finder_tUniqRow_21.PRODUCTSTYLEID = Main2.PRODUCTSTYLEID.toLowerCase();
}
if(Main2.PRODUCTNAME == null){
	finder_tUniqRow_21.PRODUCTNAME = null;
}else{
	finder_tUniqRow_21.PRODUCTNAME = Main2.PRODUCTNAME.toLowerCase();
}
if(Main2.PRODUCTSEARCHNAME == null){
	finder_tUniqRow_21.PRODUCTSEARCHNAME = null;
}else{
	finder_tUniqRow_21.PRODUCTSEARCHNAME = Main2.PRODUCTSEARCHNAME.toLowerCase();
}
if(Main2.PRODUCTVARIANTNUMBER == null){
	finder_tUniqRow_21.PRODUCTVARIANTNUMBER = null;
}else{
	finder_tUniqRow_21.PRODUCTVARIANTNUMBER = Main2.PRODUCTVARIANTNUMBER.toLowerCase();
}	
finder_tUniqRow_21.hashCodeDirty = true;
if (!keystUniqRow_21.contains(finder_tUniqRow_21)) {
		KeyStruct_tUniqRow_21 new_tUniqRow_21 = new KeyStruct_tUniqRow_21();

		
if(Main2.PRODUCTMASTERNUMBER == null){
	new_tUniqRow_21.PRODUCTMASTERNUMBER = null;
}else{
	new_tUniqRow_21.PRODUCTMASTERNUMBER = Main2.PRODUCTMASTERNUMBER.toLowerCase();
}
if(Main2.PRODUCTCOLORID == null){
	new_tUniqRow_21.PRODUCTCOLORID = null;
}else{
	new_tUniqRow_21.PRODUCTCOLORID = Main2.PRODUCTCOLORID.toLowerCase();
}
if(Main2.PRODUCTSIZEID == null){
	new_tUniqRow_21.PRODUCTSIZEID = null;
}else{
	new_tUniqRow_21.PRODUCTSIZEID = Main2.PRODUCTSIZEID.toLowerCase();
}
if(Main2.PRODUCTSTYLEID == null){
	new_tUniqRow_21.PRODUCTSTYLEID = null;
}else{
	new_tUniqRow_21.PRODUCTSTYLEID = Main2.PRODUCTSTYLEID.toLowerCase();
}
if(Main2.PRODUCTNAME == null){
	new_tUniqRow_21.PRODUCTNAME = null;
}else{
	new_tUniqRow_21.PRODUCTNAME = Main2.PRODUCTNAME.toLowerCase();
}
if(Main2.PRODUCTSEARCHNAME == null){
	new_tUniqRow_21.PRODUCTSEARCHNAME = null;
}else{
	new_tUniqRow_21.PRODUCTSEARCHNAME = Main2.PRODUCTSEARCHNAME.toLowerCase();
}
if(Main2.PRODUCTVARIANTNUMBER == null){
	new_tUniqRow_21.PRODUCTVARIANTNUMBER = null;
}else{
	new_tUniqRow_21.PRODUCTVARIANTNUMBER = Main2.PRODUCTVARIANTNUMBER.toLowerCase();
}
		
		keystUniqRow_21.add(new_tUniqRow_21);if(row43 == null){ 
	
	row43 = new row43Struct();
}row43.PRODUCTMASTERNUMBER = Main2.PRODUCTMASTERNUMBER;			row43.PRODUCTCOLORID = Main2.PRODUCTCOLORID;			row43.PRODUCTSIZEID = Main2.PRODUCTSIZEID;			row43.PRODUCTSTYLEID = Main2.PRODUCTSTYLEID;			row43.PRODUCTNAME = Main2.PRODUCTNAME;			row43.PRODUCTSEARCHNAME = Main2.PRODUCTSEARCHNAME;			row43.PRODUCTVARIANTNUMBER = Main2.PRODUCTVARIANTNUMBER;			row43.PRODUCTDESCRIPTION = Main2.PRODUCTDESCRIPTION;					
		nb_uniques_tUniqRow_21++;
	} else {
	  nb_duplicates_tUniqRow_21++;
	}

 


	tos_count_tUniqRow_21++;

/**
 * [tUniqRow_21 main ] stop
 */
	
	/**
	 * [tUniqRow_21 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_21";

	

 



/**
 * [tUniqRow_21 process_data_begin ] stop
 */
// Start of branch "row43"
if(row43 != null) { 



	
	/**
	 * [tFileOutputExcel_12 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_12";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row43");
					}
					

				xlsxTool_tFileOutputExcel_12.addRow();
									   				
	    				if(row43.PRODUCTMASTERNUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(row43.PRODUCTMASTERNUMBER));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(row43.PRODUCTCOLORID != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(row43.PRODUCTCOLORID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(row43.PRODUCTSIZEID != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(row43.PRODUCTSIZEID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(row43.PRODUCTSTYLEID != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(row43.PRODUCTSTYLEID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(row43.PRODUCTNAME != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(row43.PRODUCTNAME));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(row43.PRODUCTSEARCHNAME != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(row43.PRODUCTSEARCHNAME));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(row43.PRODUCTVARIANTNUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(row43.PRODUCTVARIANTNUMBER));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(row43.PRODUCTDESCRIPTION != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(row43.PRODUCTDESCRIPTION));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_12++;
				
 


	tos_count_tFileOutputExcel_12++;

/**
 * [tFileOutputExcel_12 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_12";

	

 



/**
 * [tFileOutputExcel_12 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_12";

	

 



/**
 * [tFileOutputExcel_12 process_data_end ] stop
 */

} // End of branch "row43"




	
	/**
	 * [tUniqRow_21 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_21";

	

 



/**
 * [tUniqRow_21 process_data_end ] stop
 */

} // End of branch "Main2"




	
	/**
	 * [tMap_24 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_24";

	

 



/**
 * [tMap_24 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_4";

	

 



/**
 * [tHashInput_4 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_4 end ] start
	 */

	

	
	
	currentComponent="tHashInput_4";

	
    

		
			nb_line_tHashInput_4++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_MASTERFILE_EXTRACT_PRODUCTS_1_" + pid +"_tHashOutput_4");
	


	globalMap.put("tHashInput_4_NB_LINE", nb_line_tHashInput_4);       

 

ok_Hash.put("tHashInput_4", true);
end_Hash.put("tHashInput_4", System.currentTimeMillis());




/**
 * [tHashInput_4 end ] stop
 */

	
	/**
	 * [tMap_24 end ] start
	 */

	

	
	
	currentComponent="tMap_24";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row22 != null) {
						tHash_Lookup_row22.endGet();
					}
					globalMap.remove( "tHash_Lookup_row22" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row19");
			  	}
			  	
 

ok_Hash.put("tMap_24", true);
end_Hash.put("tMap_24", System.currentTimeMillis());




/**
 * [tMap_24 end ] stop
 */

	
	/**
	 * [tUniqRow_21 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_21";

	

globalMap.put("tUniqRow_21_NB_UNIQUES",nb_uniques_tUniqRow_21);
globalMap.put("tUniqRow_21_NB_DUPLICATES",nb_duplicates_tUniqRow_21);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Main2");
			  	}
			  	
 

ok_Hash.put("tUniqRow_21", true);
end_Hash.put("tUniqRow_21", System.currentTimeMillis());




/**
 * [tUniqRow_21 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_12 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_12";

	

	
	
	
			xlsxTool_tFileOutputExcel_12.writeExcel(fileName_tFileOutputExcel_12,true);
	
		
			nb_line_tFileOutputExcel_12 = nb_line_tFileOutputExcel_12 -1;
		
		globalMap.put("tFileOutputExcel_12_NB_LINE",nb_line_tFileOutputExcel_12);
		
		

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row43");
			  	}
			  	
 

ok_Hash.put("tFileOutputExcel_12", true);
end_Hash.put("tFileOutputExcel_12", System.currentTimeMillis());




/**
 * [tFileOutputExcel_12 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_24"
					     			globalMap.remove("tHash_Lookup_row22"); 
				     			
				try{
					
	
	/**
	 * [tHashInput_4 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_4";

	

 



/**
 * [tHashInput_4 finally ] stop
 */

	
	/**
	 * [tMap_24 finally ] start
	 */

	

	
	
	currentComponent="tMap_24";

	

 



/**
 * [tMap_24 finally ] stop
 */

	
	/**
	 * [tUniqRow_21 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_21";

	

 



/**
 * [tUniqRow_21 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_12 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_12";

	

 



/**
 * [tFileOutputExcel_12 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class row22Struct implements routines.system.IPersistableComparableLookupRow<row22Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String PRODUCTMASTERNUMBER;

				public String getPRODUCTMASTERNUMBER () {
					return this.PRODUCTMASTERNUMBER;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.PRODUCTMASTERNUMBER == null) ? 0 : this.PRODUCTMASTERNUMBER.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row22Struct other = (row22Struct) obj;
		
						if (this.PRODUCTMASTERNUMBER == null) {
							if (other.PRODUCTMASTERNUMBER != null)
								return false;
						
						} else if (!this.PRODUCTMASTERNUMBER.equals(other.PRODUCTMASTERNUMBER))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row22Struct other) {

		other.PRODUCTMASTERNUMBER = this.PRODUCTMASTERNUMBER;
	            other.DESCRIPTION = this.DESCRIPTION;
	            
	}

	public void copyKeysDataTo(row22Struct other) {

		other.PRODUCTMASTERNUMBER = this.PRODUCTMASTERNUMBER;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.PRODUCTMASTERNUMBER = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTMASTERNUMBER,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.DESCRIPTION = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.DESCRIPTION, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTMASTERNUMBER="+PRODUCTMASTERNUMBER);
		sb.append(",DESCRIPTION="+DESCRIPTION);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row22Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.PRODUCTMASTERNUMBER, other.PRODUCTMASTERNUMBER);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tHashInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row22Struct row22 = new row22Struct();




	
	/**
	 * [tAdvancedHash_row22 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row22", false);
		start_Hash.put("tAdvancedHash_row22", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row22";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row22");
					}
				
		int tos_count_tAdvancedHash_row22 = 0;
		

			   		// connection name:row22
			   		// source node:tHashInput_5 - inputs:(after_tHashInput_4) outputs:(row22,row22) | target node:tAdvancedHash_row22 - inputs:(row22) outputs:()
			   		// linked node: tMap_24 - inputs:(row19,row22) outputs:(Main2)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row22 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct> tHash_Lookup_row22 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row22Struct>getLookup(matchingModeEnum_row22);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row22", tHash_Lookup_row22);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row22 begin ] stop
 */



	
	/**
	 * [tHashInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_5", false);
		start_Hash.put("tHashInput_5", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_5";

	
		int tos_count_tHashInput_5 = 0;
		


int nb_line_tHashInput_5 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_5=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<sortie_Ref_DescriptionStruct> tHashFile_tHashInput_5 = mf_tHashInput_5.getAdvancedMemoryHashFile("tHashFile_MASTERFILE_EXTRACT_PRODUCTS_1_" + pid +"_tHashOutput_5");
if(tHashFile_tHashInput_5==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<sortie_Ref_DescriptionStruct> iterator_tHashInput_5 = tHashFile_tHashInput_5.iterator();
while (iterator_tHashInput_5.hasNext()) {
    sortie_Ref_DescriptionStruct next_tHashInput_5 = iterator_tHashInput_5.next();

	row22.PRODUCTMASTERNUMBER = next_tHashInput_5.PRODUCTMASTERNUMBER;
	row22.DESCRIPTION = next_tHashInput_5.DESCRIPTION;
 



/**
 * [tHashInput_5 begin ] stop
 */
	
	/**
	 * [tHashInput_5 main ] start
	 */

	

	
	
	currentComponent="tHashInput_5";

	

 


	tos_count_tHashInput_5++;

/**
 * [tHashInput_5 main ] stop
 */
	
	/**
	 * [tHashInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_5";

	

 



/**
 * [tHashInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row22 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row22";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row22");
					}
					


			   
			   

					row22Struct row22_HashRow = new row22Struct();
		   	   	   
				
				row22_HashRow.PRODUCTMASTERNUMBER = row22.PRODUCTMASTERNUMBER;
				
				row22_HashRow.DESCRIPTION = row22.DESCRIPTION;
				
			tHash_Lookup_row22.put(row22_HashRow);
			
            




 


	tos_count_tAdvancedHash_row22++;

/**
 * [tAdvancedHash_row22 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row22";

	

 



/**
 * [tAdvancedHash_row22 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row22 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row22";

	

 



/**
 * [tAdvancedHash_row22 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_5";

	

 



/**
 * [tHashInput_5 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_5 end ] start
	 */

	

	
	
	currentComponent="tHashInput_5";

	
    

		
			nb_line_tHashInput_5++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_MASTERFILE_EXTRACT_PRODUCTS_1_" + pid +"_tHashOutput_5");
	


	globalMap.put("tHashInput_5_NB_LINE", nb_line_tHashInput_5);       

 

ok_Hash.put("tHashInput_5", true);
end_Hash.put("tHashInput_5", System.currentTimeMillis());




/**
 * [tHashInput_5 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row22 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row22";

	

tHash_Lookup_row22.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row22");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row22", true);
end_Hash.put("tAdvancedHash_row22", System.currentTimeMillis());




/**
 * [tAdvancedHash_row22 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_5 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_5";

	

 



/**
 * [tHashInput_5 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row22 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row22";

	

 



/**
 * [tAdvancedHash_row22 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class row46Struct implements routines.system.IPersistableRow<row46Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String PRODUCTMASTERNUMBER;

				public String getPRODUCTMASTERNUMBER () {
					return this.PRODUCTMASTERNUMBER;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String PRODUCTNAME;

				public String getPRODUCTNAME () {
					return this.PRODUCTNAME;
				}
				
			    public String PRODUCTSEARCHNAME;

				public String getPRODUCTSEARCHNAME () {
					return this.PRODUCTSEARCHNAME;
				}
				
			    public String PRODUCTVARIANTNUMBER;

				public String getPRODUCTVARIANTNUMBER () {
					return this.PRODUCTVARIANTNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public String RetailVariantId;

				public String getRetailVariantId () {
					return this.RetailVariantId;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.PRODUCTMASTERNUMBER = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.PRODUCTNAME = readString(dis);
					
					this.PRODUCTSEARCHNAME = readString(dis);
					
					this.PRODUCTVARIANTNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
					this.RetailVariantId = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTMASTERNUMBER,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.PRODUCTNAME,dos);
					
					// String
				
						writeString(this.PRODUCTSEARCHNAME,dos);
					
					// String
				
						writeString(this.PRODUCTVARIANTNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// String
				
						writeString(this.RetailVariantId,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTMASTERNUMBER="+PRODUCTMASTERNUMBER);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",PRODUCTNAME="+PRODUCTNAME);
		sb.append(",PRODUCTSEARCHNAME="+PRODUCTSEARCHNAME);
		sb.append(",PRODUCTVARIANTNUMBER="+PRODUCTVARIANTNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",RetailVariantId="+RetailVariantId);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row46Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_released_variant2Struct implements routines.system.IPersistableRow<sortie_released_variant2Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String PRODUCTMASTERNUMBER;

				public String getPRODUCTMASTERNUMBER () {
					return this.PRODUCTMASTERNUMBER;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String PRODUCTNAME;

				public String getPRODUCTNAME () {
					return this.PRODUCTNAME;
				}
				
			    public String PRODUCTSEARCHNAME;

				public String getPRODUCTSEARCHNAME () {
					return this.PRODUCTSEARCHNAME;
				}
				
			    public String PRODUCTVARIANTNUMBER;

				public String getPRODUCTVARIANTNUMBER () {
					return this.PRODUCTVARIANTNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public String RetailVariantId;

				public String getRetailVariantId () {
					return this.RetailVariantId;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.PRODUCTMASTERNUMBER = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.PRODUCTNAME = readString(dis);
					
					this.PRODUCTSEARCHNAME = readString(dis);
					
					this.PRODUCTVARIANTNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
					this.RetailVariantId = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTMASTERNUMBER,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.PRODUCTNAME,dos);
					
					// String
				
						writeString(this.PRODUCTSEARCHNAME,dos);
					
					// String
				
						writeString(this.PRODUCTVARIANTNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// String
				
						writeString(this.RetailVariantId,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTMASTERNUMBER="+PRODUCTMASTERNUMBER);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",PRODUCTNAME="+PRODUCTNAME);
		sb.append(",PRODUCTSEARCHNAME="+PRODUCTSEARCHNAME);
		sb.append(",PRODUCTVARIANTNUMBER="+PRODUCTVARIANTNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",RetailVariantId="+RetailVariantId);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_released_variant2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row44Struct implements routines.system.IPersistableRow<row44Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String PRODUCTMASTERNUMBER;

				public String getPRODUCTMASTERNUMBER () {
					return this.PRODUCTMASTERNUMBER;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String PRODUCTNAME;

				public String getPRODUCTNAME () {
					return this.PRODUCTNAME;
				}
				
			    public String PRODUCTSEARCHNAME;

				public String getPRODUCTSEARCHNAME () {
					return this.PRODUCTSEARCHNAME;
				}
				
			    public String PRODUCTVARIANTNUMBER;

				public String getPRODUCTVARIANTNUMBER () {
					return this.PRODUCTVARIANTNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.PRODUCTMASTERNUMBER = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.PRODUCTNAME = readString(dis);
					
					this.PRODUCTSEARCHNAME = readString(dis);
					
					this.PRODUCTVARIANTNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTMASTERNUMBER,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.PRODUCTNAME,dos);
					
					// String
				
						writeString(this.PRODUCTSEARCHNAME,dos);
					
					// String
				
						writeString(this.PRODUCTVARIANTNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTMASTERNUMBER="+PRODUCTMASTERNUMBER);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",PRODUCTNAME="+PRODUCTNAME);
		sb.append(",PRODUCTSEARCHNAME="+PRODUCTSEARCHNAME);
		sb.append(",PRODUCTVARIANTNUMBER="+PRODUCTVARIANTNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row44Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tHashInput_7Struct implements routines.system.IPersistableRow<after_tHashInput_7Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String PRODUCTMASTERNUMBER;

				public String getPRODUCTMASTERNUMBER () {
					return this.PRODUCTMASTERNUMBER;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String PRODUCTNAME;

				public String getPRODUCTNAME () {
					return this.PRODUCTNAME;
				}
				
			    public String PRODUCTSEARCHNAME;

				public String getPRODUCTSEARCHNAME () {
					return this.PRODUCTSEARCHNAME;
				}
				
			    public String PRODUCTVARIANTNUMBER;

				public String getPRODUCTVARIANTNUMBER () {
					return this.PRODUCTVARIANTNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.PRODUCTMASTERNUMBER = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.PRODUCTNAME = readString(dis);
					
					this.PRODUCTSEARCHNAME = readString(dis);
					
					this.PRODUCTVARIANTNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTMASTERNUMBER,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.PRODUCTNAME,dos);
					
					// String
				
						writeString(this.PRODUCTSEARCHNAME,dos);
					
					// String
				
						writeString(this.PRODUCTVARIANTNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTMASTERNUMBER="+PRODUCTMASTERNUMBER);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",PRODUCTNAME="+PRODUCTNAME);
		sb.append(",PRODUCTSEARCHNAME="+PRODUCTSEARCHNAME);
		sb.append(",PRODUCTVARIANTNUMBER="+PRODUCTVARIANTNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tHashInput_7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tHashInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tHashInput_12Process(globalMap);

		row44Struct row44 = new row44Struct();
sortie_released_variant2Struct sortie_released_variant2 = new sortie_released_variant2Struct();
row46Struct row46 = new row46Struct();






	
	/**
	 * [tFileOutputExcel_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_14", false);
		start_Hash.put("tFileOutputExcel_14", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_14";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row46");
					}
				
		int tos_count_tFileOutputExcel_14 = 0;
		


		int columnIndex_tFileOutputExcel_14 = 0;
		
		String fileName_tFileOutputExcel_14=context.ExtractPathOTHER + "Released product variants V2.xlsx";
		int nb_line_tFileOutputExcel_14 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_14 = new org.talend.ExcelTool();
		
		xlsxTool_tFileOutputExcel_14.setSheet("Released product variants V2");
		xlsxTool_tFileOutputExcel_14.setAppend(false,true);
		xlsxTool_tFileOutputExcel_14.setRecalculateFormula(false);
		xlsxTool_tFileOutputExcel_14.setXY(false,0,10,false);
		
		java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_14 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap.get("concurrentHashMap");
		java.lang.Object lockObj_tFileOutputExcel_14 = chm_tFileOutputExcel_14.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_14", k -> new Object());
		synchronized (lockObj_tFileOutputExcel_14) {
			
				xlsxTool_tFileOutputExcel_14.prepareXlsxFile(fileName_tFileOutputExcel_14);
			
		}
		
		xlsxTool_tFileOutputExcel_14.setFont("");
		
		if (xlsxTool_tFileOutputExcel_14.getStartRow() == 0){
		
		xlsxTool_tFileOutputExcel_14.addRow();
		
		xlsxTool_tFileOutputExcel_14.addCellValue("PRODUCTMASTERNUMBER");
		
		xlsxTool_tFileOutputExcel_14.addCellValue("PRODUCTCOLORID");
		
		xlsxTool_tFileOutputExcel_14.addCellValue("PRODUCTSIZEID");
		
		xlsxTool_tFileOutputExcel_14.addCellValue("PRODUCTSTYLEID");
		
		xlsxTool_tFileOutputExcel_14.addCellValue("PRODUCTNAME");
		
		xlsxTool_tFileOutputExcel_14.addCellValue("PRODUCTSEARCHNAME");
		
		xlsxTool_tFileOutputExcel_14.addCellValue("PRODUCTVARIANTNUMBER");
		
		xlsxTool_tFileOutputExcel_14.addCellValue("ITEMNUMBER");
		
		xlsxTool_tFileOutputExcel_14.addCellValue("RetailVariantId");
		
		nb_line_tFileOutputExcel_14++; 
		
	}
		

 



/**
 * [tFileOutputExcel_14 begin ] stop
 */



	
	/**
	 * [tUniqRow_24 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_24", false);
		start_Hash.put("tUniqRow_24", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_24";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_released_variant2");
					}
				
		int tos_count_tUniqRow_24 = 0;
		

	
		class KeyStruct_tUniqRow_24 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String PRODUCTMASTERNUMBER;
					String PRODUCTCOLORID;
					String PRODUCTSIZEID;
					String PRODUCTSTYLEID;
					String PRODUCTNAME;
					String PRODUCTSEARCHNAME;
					String PRODUCTVARIANTNUMBER;
					String ITEMNUMBER;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.PRODUCTMASTERNUMBER == null) ? 0 : this.PRODUCTMASTERNUMBER.hashCode());
								
								result = prime * result + ((this.PRODUCTCOLORID == null) ? 0 : this.PRODUCTCOLORID.hashCode());
								
								result = prime * result + ((this.PRODUCTSIZEID == null) ? 0 : this.PRODUCTSIZEID.hashCode());
								
								result = prime * result + ((this.PRODUCTSTYLEID == null) ? 0 : this.PRODUCTSTYLEID.hashCode());
								
								result = prime * result + ((this.PRODUCTNAME == null) ? 0 : this.PRODUCTNAME.hashCode());
								
								result = prime * result + ((this.PRODUCTSEARCHNAME == null) ? 0 : this.PRODUCTSEARCHNAME.hashCode());
								
								result = prime * result + ((this.PRODUCTVARIANTNUMBER == null) ? 0 : this.PRODUCTVARIANTNUMBER.hashCode());
								
								result = prime * result + ((this.ITEMNUMBER == null) ? 0 : this.ITEMNUMBER.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_24 other = (KeyStruct_tUniqRow_24) obj;
				
									if (this.PRODUCTMASTERNUMBER == null) {
										if (other.PRODUCTMASTERNUMBER != null) 
											return false;
								
									} else if (!this.PRODUCTMASTERNUMBER.equals(other.PRODUCTMASTERNUMBER))
								 
										return false;
								
									if (this.PRODUCTCOLORID == null) {
										if (other.PRODUCTCOLORID != null) 
											return false;
								
									} else if (!this.PRODUCTCOLORID.equals(other.PRODUCTCOLORID))
								 
										return false;
								
									if (this.PRODUCTSIZEID == null) {
										if (other.PRODUCTSIZEID != null) 
											return false;
								
									} else if (!this.PRODUCTSIZEID.equals(other.PRODUCTSIZEID))
								 
										return false;
								
									if (this.PRODUCTSTYLEID == null) {
										if (other.PRODUCTSTYLEID != null) 
											return false;
								
									} else if (!this.PRODUCTSTYLEID.equals(other.PRODUCTSTYLEID))
								 
										return false;
								
									if (this.PRODUCTNAME == null) {
										if (other.PRODUCTNAME != null) 
											return false;
								
									} else if (!this.PRODUCTNAME.equals(other.PRODUCTNAME))
								 
										return false;
								
									if (this.PRODUCTSEARCHNAME == null) {
										if (other.PRODUCTSEARCHNAME != null) 
											return false;
								
									} else if (!this.PRODUCTSEARCHNAME.equals(other.PRODUCTSEARCHNAME))
								 
										return false;
								
									if (this.PRODUCTVARIANTNUMBER == null) {
										if (other.PRODUCTVARIANTNUMBER != null) 
											return false;
								
									} else if (!this.PRODUCTVARIANTNUMBER.equals(other.PRODUCTVARIANTNUMBER))
								 
										return false;
								
									if (this.ITEMNUMBER == null) {
										if (other.ITEMNUMBER != null) 
											return false;
								
									} else if (!this.ITEMNUMBER.equals(other.ITEMNUMBER))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_24 = 0;
int nb_duplicates_tUniqRow_24 = 0;
KeyStruct_tUniqRow_24 finder_tUniqRow_24 = new KeyStruct_tUniqRow_24();
java.util.Set<KeyStruct_tUniqRow_24> keystUniqRow_24 = new java.util.HashSet<KeyStruct_tUniqRow_24>(); 

 



/**
 * [tUniqRow_24 begin ] stop
 */



	
	/**
	 * [tMap_25 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_25", false);
		start_Hash.put("tMap_25", System.currentTimeMillis());
		
	
	currentComponent="tMap_25";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row44");
					}
				
		int tos_count_tMap_25 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row45Struct> tHash_Lookup_row45 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row45Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row45Struct>) 
					globalMap.get( "tHash_Lookup_row45" ))
					;					
					
	

row45Struct row45HashKey = new row45Struct();
row45Struct row45Default = new row45Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_25__Struct  {
}
Var__tMap_25__Struct Var__tMap_25 = new Var__tMap_25__Struct();
// ###############################

// ###############################
// # Outputs initialization
sortie_released_variant2Struct sortie_released_variant2_tmp = new sortie_released_variant2Struct();
// ###############################

        
        



        









 



/**
 * [tMap_25 begin ] stop
 */



	
	/**
	 * [tHashInput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_7", false);
		start_Hash.put("tHashInput_7", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_7";

	
		int tos_count_tHashInput_7 = 0;
		


int nb_line_tHashInput_7 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_7=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row30Struct> tHashFile_tHashInput_7 = mf_tHashInput_7.getAdvancedMemoryHashFile("tHashFile_MASTERFILE_EXTRACT_PRODUCTS_1_" + pid +"_tHashOutput_7");
if(tHashFile_tHashInput_7==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row30Struct> iterator_tHashInput_7 = tHashFile_tHashInput_7.iterator();
while (iterator_tHashInput_7.hasNext()) {
    row30Struct next_tHashInput_7 = iterator_tHashInput_7.next();

	row44.PRODUCTMASTERNUMBER = next_tHashInput_7.PRODUCTMASTERNUMBER;
	row44.PRODUCTCOLORID = next_tHashInput_7.PRODUCTCOLORID;
	row44.PRODUCTSIZEID = next_tHashInput_7.PRODUCTSIZEID;
	row44.PRODUCTSTYLEID = next_tHashInput_7.PRODUCTSTYLEID;
	row44.PRODUCTNAME = next_tHashInput_7.PRODUCTNAME;
	row44.PRODUCTSEARCHNAME = next_tHashInput_7.PRODUCTSEARCHNAME;
	row44.PRODUCTVARIANTNUMBER = next_tHashInput_7.PRODUCTVARIANTNUMBER;
	row44.ITEMNUMBER = next_tHashInput_7.ITEMNUMBER;
 



/**
 * [tHashInput_7 begin ] stop
 */
	
	/**
	 * [tHashInput_7 main ] start
	 */

	

	
	
	currentComponent="tHashInput_7";

	

 


	tos_count_tHashInput_7++;

/**
 * [tHashInput_7 main ] stop
 */
	
	/**
	 * [tHashInput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_7";

	

 



/**
 * [tHashInput_7 process_data_begin ] stop
 */

	
	/**
	 * [tMap_25 main ] start
	 */

	

	
	
	currentComponent="tMap_25";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row44");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_25 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_25 = false;
		  boolean mainRowRejected_tMap_25 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row45" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow45 = false;
       		  	    	
       		  	    	
 							row45Struct row45ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_25) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_25 = false;
								
                        		    		row45HashKey.PRODUCTMASTERNUMBER = row44.PRODUCTMASTERNUMBER ;
                        		    		

								
		                        	row45HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row45.lookup( row45HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row45 != null && tHash_Lookup_row45.getCount(row45HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row45' and it contains more one result from keys :  row45.PRODUCTMASTERNUMBER = '" + row45HashKey.PRODUCTMASTERNUMBER + "'");
								} // G 071
							

							row45Struct row45 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row45Struct fromLookup_row45 = null;
							row45 = row45Default;
										 
							
								 
							
							
								if (tHash_Lookup_row45 !=null && tHash_Lookup_row45.hasNext()) { // G 099
								
							
								
								fromLookup_row45 = tHash_Lookup_row45.next();

							
							
								} // G 099
							
							

							if(fromLookup_row45 != null) {
								row45 = fromLookup_row45;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_25__Struct Var = Var__tMap_25;// ###############################
        // ###############################
        // # Output tables

sortie_released_variant2 = null;


// # Output table : 'sortie_released_variant2'
sortie_released_variant2_tmp.PRODUCTMASTERNUMBER = row44.PRODUCTMASTERNUMBER ;
sortie_released_variant2_tmp.PRODUCTCOLORID = row44.PRODUCTCOLORID ;
sortie_released_variant2_tmp.PRODUCTSIZEID = row44.PRODUCTSIZEID ;
sortie_released_variant2_tmp.PRODUCTSTYLEID = row44.PRODUCTSTYLEID ;
sortie_released_variant2_tmp.PRODUCTNAME = row45.DESCRIPTION ;
sortie_released_variant2_tmp.PRODUCTSEARCHNAME = row44.PRODUCTSEARCHNAME ;
sortie_released_variant2_tmp.PRODUCTVARIANTNUMBER = row44.PRODUCTVARIANTNUMBER ;
sortie_released_variant2_tmp.ITEMNUMBER = row44.ITEMNUMBER ;
sortie_released_variant2_tmp.RetailVariantId = "";
sortie_released_variant2 = sortie_released_variant2_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_25 = false;










 


	tos_count_tMap_25++;

/**
 * [tMap_25 main ] stop
 */
	
	/**
	 * [tMap_25 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_25";

	

 



/**
 * [tMap_25 process_data_begin ] stop
 */
// Start of branch "sortie_released_variant2"
if(sortie_released_variant2 != null) { 



	
	/**
	 * [tUniqRow_24 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_24";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_released_variant2");
					}
					
row46 = null;			
if(sortie_released_variant2.PRODUCTMASTERNUMBER == null){
	finder_tUniqRow_24.PRODUCTMASTERNUMBER = null;
}else{
	finder_tUniqRow_24.PRODUCTMASTERNUMBER = sortie_released_variant2.PRODUCTMASTERNUMBER.toLowerCase();
}
if(sortie_released_variant2.PRODUCTCOLORID == null){
	finder_tUniqRow_24.PRODUCTCOLORID = null;
}else{
	finder_tUniqRow_24.PRODUCTCOLORID = sortie_released_variant2.PRODUCTCOLORID.toLowerCase();
}
if(sortie_released_variant2.PRODUCTSIZEID == null){
	finder_tUniqRow_24.PRODUCTSIZEID = null;
}else{
	finder_tUniqRow_24.PRODUCTSIZEID = sortie_released_variant2.PRODUCTSIZEID.toLowerCase();
}
if(sortie_released_variant2.PRODUCTSTYLEID == null){
	finder_tUniqRow_24.PRODUCTSTYLEID = null;
}else{
	finder_tUniqRow_24.PRODUCTSTYLEID = sortie_released_variant2.PRODUCTSTYLEID.toLowerCase();
}
if(sortie_released_variant2.PRODUCTNAME == null){
	finder_tUniqRow_24.PRODUCTNAME = null;
}else{
	finder_tUniqRow_24.PRODUCTNAME = sortie_released_variant2.PRODUCTNAME.toLowerCase();
}
if(sortie_released_variant2.PRODUCTSEARCHNAME == null){
	finder_tUniqRow_24.PRODUCTSEARCHNAME = null;
}else{
	finder_tUniqRow_24.PRODUCTSEARCHNAME = sortie_released_variant2.PRODUCTSEARCHNAME.toLowerCase();
}
if(sortie_released_variant2.PRODUCTVARIANTNUMBER == null){
	finder_tUniqRow_24.PRODUCTVARIANTNUMBER = null;
}else{
	finder_tUniqRow_24.PRODUCTVARIANTNUMBER = sortie_released_variant2.PRODUCTVARIANTNUMBER.toLowerCase();
}
if(sortie_released_variant2.ITEMNUMBER == null){
	finder_tUniqRow_24.ITEMNUMBER = null;
}else{
	finder_tUniqRow_24.ITEMNUMBER = sortie_released_variant2.ITEMNUMBER.toLowerCase();
}	
finder_tUniqRow_24.hashCodeDirty = true;
if (!keystUniqRow_24.contains(finder_tUniqRow_24)) {
		KeyStruct_tUniqRow_24 new_tUniqRow_24 = new KeyStruct_tUniqRow_24();

		
if(sortie_released_variant2.PRODUCTMASTERNUMBER == null){
	new_tUniqRow_24.PRODUCTMASTERNUMBER = null;
}else{
	new_tUniqRow_24.PRODUCTMASTERNUMBER = sortie_released_variant2.PRODUCTMASTERNUMBER.toLowerCase();
}
if(sortie_released_variant2.PRODUCTCOLORID == null){
	new_tUniqRow_24.PRODUCTCOLORID = null;
}else{
	new_tUniqRow_24.PRODUCTCOLORID = sortie_released_variant2.PRODUCTCOLORID.toLowerCase();
}
if(sortie_released_variant2.PRODUCTSIZEID == null){
	new_tUniqRow_24.PRODUCTSIZEID = null;
}else{
	new_tUniqRow_24.PRODUCTSIZEID = sortie_released_variant2.PRODUCTSIZEID.toLowerCase();
}
if(sortie_released_variant2.PRODUCTSTYLEID == null){
	new_tUniqRow_24.PRODUCTSTYLEID = null;
}else{
	new_tUniqRow_24.PRODUCTSTYLEID = sortie_released_variant2.PRODUCTSTYLEID.toLowerCase();
}
if(sortie_released_variant2.PRODUCTNAME == null){
	new_tUniqRow_24.PRODUCTNAME = null;
}else{
	new_tUniqRow_24.PRODUCTNAME = sortie_released_variant2.PRODUCTNAME.toLowerCase();
}
if(sortie_released_variant2.PRODUCTSEARCHNAME == null){
	new_tUniqRow_24.PRODUCTSEARCHNAME = null;
}else{
	new_tUniqRow_24.PRODUCTSEARCHNAME = sortie_released_variant2.PRODUCTSEARCHNAME.toLowerCase();
}
if(sortie_released_variant2.PRODUCTVARIANTNUMBER == null){
	new_tUniqRow_24.PRODUCTVARIANTNUMBER = null;
}else{
	new_tUniqRow_24.PRODUCTVARIANTNUMBER = sortie_released_variant2.PRODUCTVARIANTNUMBER.toLowerCase();
}
if(sortie_released_variant2.ITEMNUMBER == null){
	new_tUniqRow_24.ITEMNUMBER = null;
}else{
	new_tUniqRow_24.ITEMNUMBER = sortie_released_variant2.ITEMNUMBER.toLowerCase();
}
		
		keystUniqRow_24.add(new_tUniqRow_24);if(row46 == null){ 
	
	row46 = new row46Struct();
}row46.PRODUCTMASTERNUMBER = sortie_released_variant2.PRODUCTMASTERNUMBER;			row46.PRODUCTCOLORID = sortie_released_variant2.PRODUCTCOLORID;			row46.PRODUCTSIZEID = sortie_released_variant2.PRODUCTSIZEID;			row46.PRODUCTSTYLEID = sortie_released_variant2.PRODUCTSTYLEID;			row46.PRODUCTNAME = sortie_released_variant2.PRODUCTNAME;			row46.PRODUCTSEARCHNAME = sortie_released_variant2.PRODUCTSEARCHNAME;			row46.PRODUCTVARIANTNUMBER = sortie_released_variant2.PRODUCTVARIANTNUMBER;			row46.ITEMNUMBER = sortie_released_variant2.ITEMNUMBER;			row46.RetailVariantId = sortie_released_variant2.RetailVariantId;					
		nb_uniques_tUniqRow_24++;
	} else {
	  nb_duplicates_tUniqRow_24++;
	}

 


	tos_count_tUniqRow_24++;

/**
 * [tUniqRow_24 main ] stop
 */
	
	/**
	 * [tUniqRow_24 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_24";

	

 



/**
 * [tUniqRow_24 process_data_begin ] stop
 */
// Start of branch "row46"
if(row46 != null) { 



	
	/**
	 * [tFileOutputExcel_14 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_14";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row46");
					}
					

				xlsxTool_tFileOutputExcel_14.addRow();
									   				
	    				if(row46.PRODUCTMASTERNUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_14.addCellValue(String.valueOf(row46.PRODUCTMASTERNUMBER));
	    				} else {
	    					xlsxTool_tFileOutputExcel_14.addCellNullValue();
	    				}
					
									   				
	    				if(row46.PRODUCTCOLORID != null) {
    				
							xlsxTool_tFileOutputExcel_14.addCellValue(String.valueOf(row46.PRODUCTCOLORID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_14.addCellNullValue();
	    				}
					
									   				
	    				if(row46.PRODUCTSIZEID != null) {
    				
							xlsxTool_tFileOutputExcel_14.addCellValue(String.valueOf(row46.PRODUCTSIZEID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_14.addCellNullValue();
	    				}
					
									   				
	    				if(row46.PRODUCTSTYLEID != null) {
    				
							xlsxTool_tFileOutputExcel_14.addCellValue(String.valueOf(row46.PRODUCTSTYLEID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_14.addCellNullValue();
	    				}
					
									   				
	    				if(row46.PRODUCTNAME != null) {
    				
							xlsxTool_tFileOutputExcel_14.addCellValue(String.valueOf(row46.PRODUCTNAME));
	    				} else {
	    					xlsxTool_tFileOutputExcel_14.addCellNullValue();
	    				}
					
									   				
	    				if(row46.PRODUCTSEARCHNAME != null) {
    				
							xlsxTool_tFileOutputExcel_14.addCellValue(String.valueOf(row46.PRODUCTSEARCHNAME));
	    				} else {
	    					xlsxTool_tFileOutputExcel_14.addCellNullValue();
	    				}
					
									   				
	    				if(row46.PRODUCTVARIANTNUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_14.addCellValue(String.valueOf(row46.PRODUCTVARIANTNUMBER));
	    				} else {
	    					xlsxTool_tFileOutputExcel_14.addCellNullValue();
	    				}
					
									   				
	    				if(row46.ITEMNUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_14.addCellValue(String.valueOf(row46.ITEMNUMBER));
	    				} else {
	    					xlsxTool_tFileOutputExcel_14.addCellNullValue();
	    				}
					
									   				
	    				if(row46.RetailVariantId != null) {
    				
							xlsxTool_tFileOutputExcel_14.addCellValue(String.valueOf(row46.RetailVariantId));
	    				} else {
	    					xlsxTool_tFileOutputExcel_14.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_14++;
				
 


	tos_count_tFileOutputExcel_14++;

/**
 * [tFileOutputExcel_14 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_14";

	

 



/**
 * [tFileOutputExcel_14 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_14";

	

 



/**
 * [tFileOutputExcel_14 process_data_end ] stop
 */

} // End of branch "row46"




	
	/**
	 * [tUniqRow_24 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_24";

	

 



/**
 * [tUniqRow_24 process_data_end ] stop
 */

} // End of branch "sortie_released_variant2"




	
	/**
	 * [tMap_25 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_25";

	

 



/**
 * [tMap_25 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_7";

	

 



/**
 * [tHashInput_7 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_7 end ] start
	 */

	

	
	
	currentComponent="tHashInput_7";

	
    

		
			nb_line_tHashInput_7++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_MASTERFILE_EXTRACT_PRODUCTS_1_" + pid +"_tHashOutput_7");
	


	globalMap.put("tHashInput_7_NB_LINE", nb_line_tHashInput_7);       

 

ok_Hash.put("tHashInput_7", true);
end_Hash.put("tHashInput_7", System.currentTimeMillis());




/**
 * [tHashInput_7 end ] stop
 */

	
	/**
	 * [tMap_25 end ] start
	 */

	

	
	
	currentComponent="tMap_25";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row45 != null) {
						tHash_Lookup_row45.endGet();
					}
					globalMap.remove( "tHash_Lookup_row45" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row44");
			  	}
			  	
 

ok_Hash.put("tMap_25", true);
end_Hash.put("tMap_25", System.currentTimeMillis());




/**
 * [tMap_25 end ] stop
 */

	
	/**
	 * [tUniqRow_24 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_24";

	

globalMap.put("tUniqRow_24_NB_UNIQUES",nb_uniques_tUniqRow_24);
globalMap.put("tUniqRow_24_NB_DUPLICATES",nb_duplicates_tUniqRow_24);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_released_variant2");
			  	}
			  	
 

ok_Hash.put("tUniqRow_24", true);
end_Hash.put("tUniqRow_24", System.currentTimeMillis());




/**
 * [tUniqRow_24 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_14 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_14";

	

	
	
	
			xlsxTool_tFileOutputExcel_14.writeExcel(fileName_tFileOutputExcel_14,true);
	
		
			nb_line_tFileOutputExcel_14 = nb_line_tFileOutputExcel_14 -1;
		
		globalMap.put("tFileOutputExcel_14_NB_LINE",nb_line_tFileOutputExcel_14);
		
		

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row46");
			  	}
			  	
 

ok_Hash.put("tFileOutputExcel_14", true);
end_Hash.put("tFileOutputExcel_14", System.currentTimeMillis());




/**
 * [tFileOutputExcel_14 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_25"
					     			globalMap.remove("tHash_Lookup_row45"); 
				     			
				try{
					
	
	/**
	 * [tHashInput_7 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_7";

	

 



/**
 * [tHashInput_7 finally ] stop
 */

	
	/**
	 * [tMap_25 finally ] start
	 */

	

	
	
	currentComponent="tMap_25";

	

 



/**
 * [tMap_25 finally ] stop
 */

	
	/**
	 * [tUniqRow_24 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_24";

	

 



/**
 * [tUniqRow_24 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_14 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_14";

	

 



/**
 * [tFileOutputExcel_14 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_7_SUBPROCESS_STATE", 1);
	}
	


public static class row45Struct implements routines.system.IPersistableComparableLookupRow<row45Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String PRODUCTMASTERNUMBER;

				public String getPRODUCTMASTERNUMBER () {
					return this.PRODUCTMASTERNUMBER;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.PRODUCTMASTERNUMBER == null) ? 0 : this.PRODUCTMASTERNUMBER.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row45Struct other = (row45Struct) obj;
		
						if (this.PRODUCTMASTERNUMBER == null) {
							if (other.PRODUCTMASTERNUMBER != null)
								return false;
						
						} else if (!this.PRODUCTMASTERNUMBER.equals(other.PRODUCTMASTERNUMBER))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row45Struct other) {

		other.PRODUCTMASTERNUMBER = this.PRODUCTMASTERNUMBER;
	            other.DESCRIPTION = this.DESCRIPTION;
	            
	}

	public void copyKeysDataTo(row45Struct other) {

		other.PRODUCTMASTERNUMBER = this.PRODUCTMASTERNUMBER;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.PRODUCTMASTERNUMBER = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTMASTERNUMBER,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.DESCRIPTION = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.DESCRIPTION, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTMASTERNUMBER="+PRODUCTMASTERNUMBER);
		sb.append(",DESCRIPTION="+DESCRIPTION);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row45Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.PRODUCTMASTERNUMBER, other.PRODUCTMASTERNUMBER);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tHashInput_12Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_12_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row45Struct row45 = new row45Struct();




	
	/**
	 * [tAdvancedHash_row45 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row45", false);
		start_Hash.put("tAdvancedHash_row45", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row45";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row45");
					}
				
		int tos_count_tAdvancedHash_row45 = 0;
		

			   		// connection name:row45
			   		// source node:tHashInput_12 - inputs:(after_tHashInput_7) outputs:(row45,row45) | target node:tAdvancedHash_row45 - inputs:(row45) outputs:()
			   		// linked node: tMap_25 - inputs:(row44,row45) outputs:(sortie_released_variant2)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row45 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row45Struct> tHash_Lookup_row45 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row45Struct>getLookup(matchingModeEnum_row45);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row45", tHash_Lookup_row45);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row45 begin ] stop
 */



	
	/**
	 * [tHashInput_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_12", false);
		start_Hash.put("tHashInput_12", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_12";

	
		int tos_count_tHashInput_12 = 0;
		


int nb_line_tHashInput_12 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_12=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<sortie_hashoutputStruct> tHashFile_tHashInput_12 = mf_tHashInput_12.getAdvancedMemoryHashFile("tHashFile_MASTERFILE_EXTRACT_PRODUCTS_1_" + pid +"_tHashOutput_13");
if(tHashFile_tHashInput_12==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<sortie_hashoutputStruct> iterator_tHashInput_12 = tHashFile_tHashInput_12.iterator();
while (iterator_tHashInput_12.hasNext()) {
    sortie_hashoutputStruct next_tHashInput_12 = iterator_tHashInput_12.next();

	row45.PRODUCTMASTERNUMBER = next_tHashInput_12.PRODUCTMASTERNUMBER;
	row45.DESCRIPTION = next_tHashInput_12.DESCRIPTION;
 



/**
 * [tHashInput_12 begin ] stop
 */
	
	/**
	 * [tHashInput_12 main ] start
	 */

	

	
	
	currentComponent="tHashInput_12";

	

 


	tos_count_tHashInput_12++;

/**
 * [tHashInput_12 main ] stop
 */
	
	/**
	 * [tHashInput_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_12";

	

 



/**
 * [tHashInput_12 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row45 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row45";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row45");
					}
					


			   
			   

					row45Struct row45_HashRow = new row45Struct();
		   	   	   
				
				row45_HashRow.PRODUCTMASTERNUMBER = row45.PRODUCTMASTERNUMBER;
				
				row45_HashRow.DESCRIPTION = row45.DESCRIPTION;
				
			tHash_Lookup_row45.put(row45_HashRow);
			
            




 


	tos_count_tAdvancedHash_row45++;

/**
 * [tAdvancedHash_row45 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row45 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row45";

	

 



/**
 * [tAdvancedHash_row45 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row45 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row45";

	

 



/**
 * [tAdvancedHash_row45 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_12";

	

 



/**
 * [tHashInput_12 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_12 end ] start
	 */

	

	
	
	currentComponent="tHashInput_12";

	
    

		
			nb_line_tHashInput_12++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_MASTERFILE_EXTRACT_PRODUCTS_1_" + pid +"_tHashOutput_13");
	


	globalMap.put("tHashInput_12_NB_LINE", nb_line_tHashInput_12);       

 

ok_Hash.put("tHashInput_12", true);
end_Hash.put("tHashInput_12", System.currentTimeMillis());




/**
 * [tHashInput_12 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row45 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row45";

	

tHash_Lookup_row45.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row45");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row45", true);
end_Hash.put("tAdvancedHash_row45", System.currentTimeMillis());




/**
 * [tAdvancedHash_row45 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_12 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_12";

	

 



/**
 * [tHashInput_12 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row45 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row45";

	

 



/**
 * [tAdvancedHash_row45 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_12_SUBPROCESS_STATE", 1);
	}
	


public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String PRODUCTSEARCHNAME;

				public String getPRODUCTSEARCHNAME () {
					return this.PRODUCTSEARCHNAME;
				}
				
			    public String PRODUCTDESCRIPTION;

				public String getPRODUCTDESCRIPTION () {
					return this.PRODUCTDESCRIPTION;
				}
				
			    public String PRODUCTNAME;

				public String getPRODUCTNAME () {
					return this.PRODUCTNAME;
				}
				
			    public String PRODUCTNUMBER;

				public String getPRODUCTNUMBER () {
					return this.PRODUCTNUMBER;
				}
				
			    public String RETAILPRODUCTCATEGORYNAME;

				public String getRETAILPRODUCTCATEGORYNAME () {
					return this.RETAILPRODUCTCATEGORYNAME;
				}
				
			    public String PRODUCTSUBTYPE;

				public String getPRODUCTSUBTYPE () {
					return this.PRODUCTSUBTYPE;
				}
				
			    public String PRODUCTTYPE;

				public String getPRODUCTTYPE () {
					return this.PRODUCTTYPE;
				}
				
			    public String KRFBRANDID;

				public String getKRFBRANDID () {
					return this.KRFBRANDID;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.PRODUCTSEARCHNAME = readString(dis);
					
					this.PRODUCTDESCRIPTION = readString(dis);
					
					this.PRODUCTNAME = readString(dis);
					
					this.PRODUCTNUMBER = readString(dis);
					
					this.RETAILPRODUCTCATEGORYNAME = readString(dis);
					
					this.PRODUCTSUBTYPE = readString(dis);
					
					this.PRODUCTTYPE = readString(dis);
					
					this.KRFBRANDID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTSEARCHNAME,dos);
					
					// String
				
						writeString(this.PRODUCTDESCRIPTION,dos);
					
					// String
				
						writeString(this.PRODUCTNAME,dos);
					
					// String
				
						writeString(this.PRODUCTNUMBER,dos);
					
					// String
				
						writeString(this.RETAILPRODUCTCATEGORYNAME,dos);
					
					// String
				
						writeString(this.PRODUCTSUBTYPE,dos);
					
					// String
				
						writeString(this.PRODUCTTYPE,dos);
					
					// String
				
						writeString(this.KRFBRANDID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTSEARCHNAME="+PRODUCTSEARCHNAME);
		sb.append(",PRODUCTDESCRIPTION="+PRODUCTDESCRIPTION);
		sb.append(",PRODUCTNAME="+PRODUCTNAME);
		sb.append(",PRODUCTNUMBER="+PRODUCTNUMBER);
		sb.append(",RETAILPRODUCTCATEGORYNAME="+RETAILPRODUCTCATEGORYNAME);
		sb.append(",PRODUCTSUBTYPE="+PRODUCTSUBTYPE);
		sb.append(",PRODUCTTYPE="+PRODUCTTYPE);
		sb.append(",KRFBRANDID="+KRFBRANDID);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String PRODUCTSEARCHNAME;

				public String getPRODUCTSEARCHNAME () {
					return this.PRODUCTSEARCHNAME;
				}
				
			    public String PRODUCTDESCRIPTION;

				public String getPRODUCTDESCRIPTION () {
					return this.PRODUCTDESCRIPTION;
				}
				
			    public String PRODUCTNAME;

				public String getPRODUCTNAME () {
					return this.PRODUCTNAME;
				}
				
			    public String PRODUCTNUMBER;

				public String getPRODUCTNUMBER () {
					return this.PRODUCTNUMBER;
				}
				
			    public String RETAILPRODUCTCATEGORYNAME;

				public String getRETAILPRODUCTCATEGORYNAME () {
					return this.RETAILPRODUCTCATEGORYNAME;
				}
				
			    public String PRODUCTSUBTYPE;

				public String getPRODUCTSUBTYPE () {
					return this.PRODUCTSUBTYPE;
				}
				
			    public String PRODUCTTYPE;

				public String getPRODUCTTYPE () {
					return this.PRODUCTTYPE;
				}
				
			    public String KRFBRANDID;

				public String getKRFBRANDID () {
					return this.KRFBRANDID;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.PRODUCTSEARCHNAME = readString(dis);
					
					this.PRODUCTDESCRIPTION = readString(dis);
					
					this.PRODUCTNAME = readString(dis);
					
					this.PRODUCTNUMBER = readString(dis);
					
					this.RETAILPRODUCTCATEGORYNAME = readString(dis);
					
					this.PRODUCTSUBTYPE = readString(dis);
					
					this.PRODUCTTYPE = readString(dis);
					
					this.KRFBRANDID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTSEARCHNAME,dos);
					
					// String
				
						writeString(this.PRODUCTDESCRIPTION,dos);
					
					// String
				
						writeString(this.PRODUCTNAME,dos);
					
					// String
				
						writeString(this.PRODUCTNUMBER,dos);
					
					// String
				
						writeString(this.RETAILPRODUCTCATEGORYNAME,dos);
					
					// String
				
						writeString(this.PRODUCTSUBTYPE,dos);
					
					// String
				
						writeString(this.PRODUCTTYPE,dos);
					
					// String
				
						writeString(this.KRFBRANDID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTSEARCHNAME="+PRODUCTSEARCHNAME);
		sb.append(",PRODUCTDESCRIPTION="+PRODUCTDESCRIPTION);
		sb.append(",PRODUCTNAME="+PRODUCTNAME);
		sb.append(",PRODUCTNUMBER="+PRODUCTNUMBER);
		sb.append(",RETAILPRODUCTCATEGORYNAME="+RETAILPRODUCTCATEGORYNAME);
		sb.append(",PRODUCTSUBTYPE="+PRODUCTSUBTYPE);
		sb.append(",PRODUCTTYPE="+PRODUCTTYPE);
		sb.append(",KRFBRANDID="+KRFBRANDID);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public String ORIGINCOUNTRYREGIONID;

				public String getORIGINCOUNTRYREGIONID () {
					return this.ORIGINCOUNTRYREGIONID;
				}
				
			    public String PRODUCTCOVERAGEGROUPID;

				public String getPRODUCTCOVERAGEGROUPID () {
					return this.PRODUCTCOVERAGEGROUPID;
				}
				
			    public String PRODUCTNUMBER;

				public String getPRODUCTNUMBER () {
					return this.PRODUCTNUMBER;
				}
				
			    public String PRODUCTSEARCHNAME;

				public String getPRODUCTSEARCHNAME () {
					return this.PRODUCTSEARCHNAME;
				}
				
			    public String PRODUCTSUBTYPE;

				public String getPRODUCTSUBTYPE () {
					return this.PRODUCTSUBTYPE;
				}
				
			    public String PRODUCTTYPE;

				public String getPRODUCTTYPE () {
					return this.PRODUCTTYPE;
				}
				
			    public String SEARCHNAME;

				public String getSEARCHNAME () {
					return this.SEARCHNAME;
				}
				
			    public String SPLWMSLOCATIONID;

				public String getSPLWMSLOCATIONID () {
					return this.SPLWMSLOCATIONID;
				}
				
			    public String ISUNITCOSTPRODUCTVARIANTSPECIFIC;

				public String getISUNITCOSTPRODUCTVARIANTSPECIFIC () {
					return this.ISUNITCOSTPRODUCTVARIANTSPECIFIC;
				}
				
			    public String GPLMEMO;

				public String getGPLMEMO () {
					return this.GPLMEMO;
				}
				
			    public String DEFAULTLEDGERDIMENSIONDISPLAYVALUE;

				public String getDEFAULTLEDGERDIMENSIONDISPLAYVALUE () {
					return this.DEFAULTLEDGERDIMENSIONDISPLAYVALUE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.ITEMNUMBER = readString(dis);
					
					this.ORIGINCOUNTRYREGIONID = readString(dis);
					
					this.PRODUCTCOVERAGEGROUPID = readString(dis);
					
					this.PRODUCTNUMBER = readString(dis);
					
					this.PRODUCTSEARCHNAME = readString(dis);
					
					this.PRODUCTSUBTYPE = readString(dis);
					
					this.PRODUCTTYPE = readString(dis);
					
					this.SEARCHNAME = readString(dis);
					
					this.SPLWMSLOCATIONID = readString(dis);
					
					this.ISUNITCOSTPRODUCTVARIANTSPECIFIC = readString(dis);
					
					this.GPLMEMO = readString(dis);
					
					this.DEFAULTLEDGERDIMENSIONDISPLAYVALUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// String
				
						writeString(this.ORIGINCOUNTRYREGIONID,dos);
					
					// String
				
						writeString(this.PRODUCTCOVERAGEGROUPID,dos);
					
					// String
				
						writeString(this.PRODUCTNUMBER,dos);
					
					// String
				
						writeString(this.PRODUCTSEARCHNAME,dos);
					
					// String
				
						writeString(this.PRODUCTSUBTYPE,dos);
					
					// String
				
						writeString(this.PRODUCTTYPE,dos);
					
					// String
				
						writeString(this.SEARCHNAME,dos);
					
					// String
				
						writeString(this.SPLWMSLOCATIONID,dos);
					
					// String
				
						writeString(this.ISUNITCOSTPRODUCTVARIANTSPECIFIC,dos);
					
					// String
				
						writeString(this.GPLMEMO,dos);
					
					// String
				
						writeString(this.DEFAULTLEDGERDIMENSIONDISPLAYVALUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITEMNUMBER="+ITEMNUMBER);
		sb.append(",ORIGINCOUNTRYREGIONID="+ORIGINCOUNTRYREGIONID);
		sb.append(",PRODUCTCOVERAGEGROUPID="+PRODUCTCOVERAGEGROUPID);
		sb.append(",PRODUCTNUMBER="+PRODUCTNUMBER);
		sb.append(",PRODUCTSEARCHNAME="+PRODUCTSEARCHNAME);
		sb.append(",PRODUCTSUBTYPE="+PRODUCTSUBTYPE);
		sb.append(",PRODUCTTYPE="+PRODUCTTYPE);
		sb.append(",SEARCHNAME="+SEARCHNAME);
		sb.append(",SPLWMSLOCATIONID="+SPLWMSLOCATIONID);
		sb.append(",ISUNITCOSTPRODUCTVARIANTSPECIFIC="+ISUNITCOSTPRODUCTVARIANTSPECIFIC);
		sb.append(",GPLMEMO="+GPLMEMO);
		sb.append(",DEFAULTLEDGERDIMENSIONDISPLAYVALUE="+DEFAULTLEDGERDIMENSIONDISPLAYVALUE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class Main1Struct implements routines.system.IPersistableRow<Main1Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String PRODUCTNUMBER;

				public String getPRODUCTNUMBER () {
					return this.PRODUCTNUMBER;
				}
				
			    public String ATTRIBUTETYPENAME;

				public String getATTRIBUTETYPENAME () {
					return this.ATTRIBUTETYPENAME;
				}
				
			    public String ATTRIBUTENAME;

				public String getATTRIBUTENAME () {
					return this.ATTRIBUTENAME;
				}
				
			    public String TEXTVALUE;

				public String getTEXTVALUE () {
					return this.TEXTVALUE;
				}
				
			    public String INTEGERVALUE;

				public String getINTEGERVALUE () {
					return this.INTEGERVALUE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.PRODUCTNUMBER = readString(dis);
					
					this.ATTRIBUTETYPENAME = readString(dis);
					
					this.ATTRIBUTENAME = readString(dis);
					
					this.TEXTVALUE = readString(dis);
					
					this.INTEGERVALUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTNUMBER,dos);
					
					// String
				
						writeString(this.ATTRIBUTETYPENAME,dos);
					
					// String
				
						writeString(this.ATTRIBUTENAME,dos);
					
					// String
				
						writeString(this.TEXTVALUE,dos);
					
					// String
				
						writeString(this.INTEGERVALUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTNUMBER="+PRODUCTNUMBER);
		sb.append(",ATTRIBUTETYPENAME="+ATTRIBUTETYPENAME);
		sb.append(",ATTRIBUTENAME="+ATTRIBUTENAME);
		sb.append(",TEXTVALUE="+TEXTVALUE);
		sb.append(",INTEGERVALUE="+INTEGERVALUE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Main1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String PRODUCTNUMBER;

				public String getPRODUCTNUMBER () {
					return this.PRODUCTNUMBER;
				}
				
			    public String ATTRIBUTETYPENAME;

				public String getATTRIBUTETYPENAME () {
					return this.ATTRIBUTETYPENAME;
				}
				
			    public String ATTRIBUTENAME;

				public String getATTRIBUTENAME () {
					return this.ATTRIBUTENAME;
				}
				
			    public String TEXTVALUE;

				public String getTEXTVALUE () {
					return this.TEXTVALUE;
				}
				
			    public String INTEGERVALUE;

				public String getINTEGERVALUE () {
					return this.INTEGERVALUE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.PRODUCTNUMBER = readString(dis);
					
					this.ATTRIBUTETYPENAME = readString(dis);
					
					this.ATTRIBUTENAME = readString(dis);
					
					this.TEXTVALUE = readString(dis);
					
					this.INTEGERVALUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTNUMBER,dos);
					
					// String
				
						writeString(this.ATTRIBUTETYPENAME,dos);
					
					// String
				
						writeString(this.ATTRIBUTENAME,dos);
					
					// String
				
						writeString(this.TEXTVALUE,dos);
					
					// String
				
						writeString(this.INTEGERVALUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTNUMBER="+PRODUCTNUMBER);
		sb.append(",ATTRIBUTETYPENAME="+ATTRIBUTETYPENAME);
		sb.append(",ATTRIBUTENAME="+ATTRIBUTENAME);
		sb.append(",TEXTVALUE="+TEXTVALUE);
		sb.append(",INTEGERVALUE="+INTEGERVALUE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row14Struct implements routines.system.IPersistableRow<row14Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String PRODUCTNUMBER;

				public String getPRODUCTNUMBER () {
					return this.PRODUCTNUMBER;
				}
				
			    public String ATTRIBUTETYPENAME;

				public String getATTRIBUTETYPENAME () {
					return this.ATTRIBUTETYPENAME;
				}
				
			    public String ATTRIBUTENAME;

				public String getATTRIBUTENAME () {
					return this.ATTRIBUTENAME;
				}
				
			    public String TEXTVALUE;

				public String getTEXTVALUE () {
					return this.TEXTVALUE;
				}
				
			    public String INTEGERVALUE;

				public String getINTEGERVALUE () {
					return this.INTEGERVALUE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.PRODUCTNUMBER = readString(dis);
					
					this.ATTRIBUTETYPENAME = readString(dis);
					
					this.ATTRIBUTENAME = readString(dis);
					
					this.TEXTVALUE = readString(dis);
					
					this.INTEGERVALUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTNUMBER,dos);
					
					// String
				
						writeString(this.ATTRIBUTETYPENAME,dos);
					
					// String
				
						writeString(this.ATTRIBUTENAME,dos);
					
					// String
				
						writeString(this.TEXTVALUE,dos);
					
					// String
				
						writeString(this.INTEGERVALUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTNUMBER="+PRODUCTNUMBER);
		sb.append(",ATTRIBUTETYPENAME="+ATTRIBUTETYPENAME);
		sb.append(",ATTRIBUTENAME="+ATTRIBUTENAME);
		sb.append(",TEXTVALUE="+TEXTVALUE);
		sb.append(",INTEGERVALUE="+INTEGERVALUE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row14Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row20Struct implements routines.system.IPersistableRow<row20Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String PRODUCTNUMBER;

				public String getPRODUCTNUMBER () {
					return this.PRODUCTNUMBER;
				}
				
			    public String ATTRIBUTETYPENAME;

				public String getATTRIBUTETYPENAME () {
					return this.ATTRIBUTETYPENAME;
				}
				
			    public String ATTRIBUTENAME;

				public String getATTRIBUTENAME () {
					return this.ATTRIBUTENAME;
				}
				
			    public String TEXTVALUE;

				public String getTEXTVALUE () {
					return this.TEXTVALUE;
				}
				
			    public String INTEGERVALUE;

				public String getINTEGERVALUE () {
					return this.INTEGERVALUE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.PRODUCTNUMBER = readString(dis);
					
					this.ATTRIBUTETYPENAME = readString(dis);
					
					this.ATTRIBUTENAME = readString(dis);
					
					this.TEXTVALUE = readString(dis);
					
					this.INTEGERVALUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTNUMBER,dos);
					
					// String
				
						writeString(this.ATTRIBUTETYPENAME,dos);
					
					// String
				
						writeString(this.ATTRIBUTENAME,dos);
					
					// String
				
						writeString(this.TEXTVALUE,dos);
					
					// String
				
						writeString(this.INTEGERVALUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTNUMBER="+PRODUCTNUMBER);
		sb.append(",ATTRIBUTETYPENAME="+ATTRIBUTETYPENAME);
		sb.append(",ATTRIBUTENAME="+ATTRIBUTENAME);
		sb.append(",TEXTVALUE="+TEXTVALUE);
		sb.append(",INTEGERVALUE="+INTEGERVALUE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row20Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row36Struct implements routines.system.IPersistableRow<row36Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String ARESALESDEFAULTORDERSETTINGSOVERRIDDEN;

				public String getARESALESDEFAULTORDERSETTINGSOVERRIDDEN () {
					return this.ARESALESDEFAULTORDERSETTINGSOVERRIDDEN;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public String SALESQUANTITYMULTIPLES;

				public String getSALESQUANTITYMULTIPLES () {
					return this.SALESQUANTITYMULTIPLES;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.ARESALESDEFAULTORDERSETTINGSOVERRIDDEN = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
					this.SALESQUANTITYMULTIPLES = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ARESALESDEFAULTORDERSETTINGSOVERRIDDEN,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// String
				
						writeString(this.SALESQUANTITYMULTIPLES,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ARESALESDEFAULTORDERSETTINGSOVERRIDDEN="+ARESALESDEFAULTORDERSETTINGSOVERRIDDEN);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",SALESQUANTITYMULTIPLES="+SALESQUANTITYMULTIPLES);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row36Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_attributeStruct implements routines.system.IPersistableRow<sortie_attributeStruct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String PRODUCTNUMBER;

				public String getPRODUCTNUMBER () {
					return this.PRODUCTNUMBER;
				}
				
			    public String ATTRIBUTETYPENAME;

				public String getATTRIBUTETYPENAME () {
					return this.ATTRIBUTETYPENAME;
				}
				
			    public String ATTRIBUTENAME;

				public String getATTRIBUTENAME () {
					return this.ATTRIBUTENAME;
				}
				
			    public String TEXTVALUE;

				public String getTEXTVALUE () {
					return this.TEXTVALUE;
				}
				
			    public String INTEGERVALUE;

				public String getINTEGERVALUE () {
					return this.INTEGERVALUE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.PRODUCTNUMBER = readString(dis);
					
					this.ATTRIBUTETYPENAME = readString(dis);
					
					this.ATTRIBUTENAME = readString(dis);
					
					this.TEXTVALUE = readString(dis);
					
					this.INTEGERVALUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTNUMBER,dos);
					
					// String
				
						writeString(this.ATTRIBUTETYPENAME,dos);
					
					// String
				
						writeString(this.ATTRIBUTENAME,dos);
					
					// String
				
						writeString(this.TEXTVALUE,dos);
					
					// String
				
						writeString(this.INTEGERVALUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTNUMBER="+PRODUCTNUMBER);
		sb.append(",ATTRIBUTETYPENAME="+ATTRIBUTETYPENAME);
		sb.append(",ATTRIBUTENAME="+ATTRIBUTENAME);
		sb.append(",TEXTVALUE="+TEXTVALUE);
		sb.append(",INTEGERVALUE="+INTEGERVALUE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_attributeStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_defaultordersettingsStruct implements routines.system.IPersistableRow<sortie_defaultordersettingsStruct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String ARESALESDEFAULTORDERSETTINGSOVERRIDDEN;

				public String getARESALESDEFAULTORDERSETTINGSOVERRIDDEN () {
					return this.ARESALESDEFAULTORDERSETTINGSOVERRIDDEN;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public String SALESQUANTITYMULTIPLES;

				public String getSALESQUANTITYMULTIPLES () {
					return this.SALESQUANTITYMULTIPLES;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.ARESALESDEFAULTORDERSETTINGSOVERRIDDEN = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
					this.SALESQUANTITYMULTIPLES = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ARESALESDEFAULTORDERSETTINGSOVERRIDDEN,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// String
				
						writeString(this.SALESQUANTITYMULTIPLES,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ARESALESDEFAULTORDERSETTINGSOVERRIDDEN="+ARESALESDEFAULTORDERSETTINGSOVERRIDDEN);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",SALESQUANTITYMULTIPLES="+SALESQUANTITYMULTIPLES);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_defaultordersettingsStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row25Struct implements routines.system.IPersistableRow<row25Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String PRODUCTNUMBER;

				public String getPRODUCTNUMBER () {
					return this.PRODUCTNUMBER;
				}
				
			    public String ATTRIBUTETYPENAME;

				public String getATTRIBUTETYPENAME () {
					return this.ATTRIBUTETYPENAME;
				}
				
			    public String ATTRIBUTENAME;

				public String getATTRIBUTENAME () {
					return this.ATTRIBUTENAME;
				}
				
			    public String TEXTVALUE;

				public String getTEXTVALUE () {
					return this.TEXTVALUE;
				}
				
			    public String INTEGERVALUE;

				public String getINTEGERVALUE () {
					return this.INTEGERVALUE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.PRODUCTNUMBER = readString(dis);
					
					this.ATTRIBUTETYPENAME = readString(dis);
					
					this.ATTRIBUTENAME = readString(dis);
					
					this.TEXTVALUE = readString(dis);
					
					this.INTEGERVALUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTNUMBER,dos);
					
					// String
				
						writeString(this.ATTRIBUTETYPENAME,dos);
					
					// String
				
						writeString(this.ATTRIBUTENAME,dos);
					
					// String
				
						writeString(this.TEXTVALUE,dos);
					
					// String
				
						writeString(this.INTEGERVALUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTNUMBER="+PRODUCTNUMBER);
		sb.append(",ATTRIBUTETYPENAME="+ATTRIBUTETYPENAME);
		sb.append(",ATTRIBUTENAME="+ATTRIBUTENAME);
		sb.append(",TEXTVALUE="+TEXTVALUE);
		sb.append(",INTEGERVALUE="+INTEGERVALUE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row25Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class Main3Struct implements routines.system.IPersistableRow<Main3Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String PRODUCTNUMBER;

				public String getPRODUCTNUMBER () {
					return this.PRODUCTNUMBER;
				}
				
			    public String ATTRIBUTETYPENAME;

				public String getATTRIBUTETYPENAME () {
					return this.ATTRIBUTETYPENAME;
				}
				
			    public String ATTRIBUTENAME;

				public String getATTRIBUTENAME () {
					return this.ATTRIBUTENAME;
				}
				
			    public String TEXTVALUE;

				public String getTEXTVALUE () {
					return this.TEXTVALUE;
				}
				
			    public String INTEGERVALUE;

				public String getINTEGERVALUE () {
					return this.INTEGERVALUE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.PRODUCTNUMBER = readString(dis);
					
					this.ATTRIBUTETYPENAME = readString(dis);
					
					this.ATTRIBUTENAME = readString(dis);
					
					this.TEXTVALUE = readString(dis);
					
					this.INTEGERVALUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTNUMBER,dos);
					
					// String
				
						writeString(this.ATTRIBUTETYPENAME,dos);
					
					// String
				
						writeString(this.ATTRIBUTENAME,dos);
					
					// String
				
						writeString(this.TEXTVALUE,dos);
					
					// String
				
						writeString(this.INTEGERVALUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTNUMBER="+PRODUCTNUMBER);
		sb.append(",ATTRIBUTETYPENAME="+ATTRIBUTETYPENAME);
		sb.append(",ATTRIBUTENAME="+ATTRIBUTENAME);
		sb.append(",TEXTVALUE="+TEXTVALUE);
		sb.append(",INTEGERVALUE="+INTEGERVALUE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Main3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row27Struct implements routines.system.IPersistableRow<row27Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String PRODUCTMASTERNUMBER;

				public String getPRODUCTMASTERNUMBER () {
					return this.PRODUCTMASTERNUMBER;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.PRODUCTMASTERNUMBER = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTMASTERNUMBER,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTMASTERNUMBER="+PRODUCTMASTERNUMBER);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row27Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row28Struct implements routines.system.IPersistableRow<row28Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String PRODUCTMASTERNUMBER;

				public String getPRODUCTMASTERNUMBER () {
					return this.PRODUCTMASTERNUMBER;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.PRODUCTMASTERNUMBER = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTMASTERNUMBER,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTMASTERNUMBER="+PRODUCTMASTERNUMBER);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row28Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row29Struct implements routines.system.IPersistableRow<row29Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String PRODUCTMASTERNUMBER;

				public String getPRODUCTMASTERNUMBER () {
					return this.PRODUCTMASTERNUMBER;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.PRODUCTMASTERNUMBER = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTMASTERNUMBER,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTMASTERNUMBER="+PRODUCTMASTERNUMBER);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row29Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row18Struct implements routines.system.IPersistableRow<row18Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String PRODUCTMASTERNUMBER;

				public String getPRODUCTMASTERNUMBER () {
					return this.PRODUCTMASTERNUMBER;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String PRODUCTNAME;

				public String getPRODUCTNAME () {
					return this.PRODUCTNAME;
				}
				
			    public String PRODUCTSEARCHNAME;

				public String getPRODUCTSEARCHNAME () {
					return this.PRODUCTSEARCHNAME;
				}
				
			    public String PRODUCTVARIANTNUMBER;

				public String getPRODUCTVARIANTNUMBER () {
					return this.PRODUCTVARIANTNUMBER;
				}
				
			    public String PRODUCTDESCRIPTION;

				public String getPRODUCTDESCRIPTION () {
					return this.PRODUCTDESCRIPTION;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.PRODUCTMASTERNUMBER = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.PRODUCTNAME = readString(dis);
					
					this.PRODUCTSEARCHNAME = readString(dis);
					
					this.PRODUCTVARIANTNUMBER = readString(dis);
					
					this.PRODUCTDESCRIPTION = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTMASTERNUMBER,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.PRODUCTNAME,dos);
					
					// String
				
						writeString(this.PRODUCTSEARCHNAME,dos);
					
					// String
				
						writeString(this.PRODUCTVARIANTNUMBER,dos);
					
					// String
				
						writeString(this.PRODUCTDESCRIPTION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTMASTERNUMBER="+PRODUCTMASTERNUMBER);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",PRODUCTNAME="+PRODUCTNAME);
		sb.append(",PRODUCTSEARCHNAME="+PRODUCTSEARCHNAME);
		sb.append(",PRODUCTVARIANTNUMBER="+PRODUCTVARIANTNUMBER);
		sb.append(",PRODUCTDESCRIPTION="+PRODUCTDESCRIPTION);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row18Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row32Struct implements routines.system.IPersistableRow<row32Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String CHANNELCODE;

				public String getCHANNELCODE () {
					return this.CHANNELCODE;
				}
				
			    public String ITEMID;

				public String getITEMID () {
					return this.ITEMID;
				}
				
			    public String INVENTSIZEID;

				public String getINVENTSIZEID () {
					return this.INVENTSIZEID;
				}
				
			    public String INVENTSTYLEID;

				public String getINVENTSTYLEID () {
					return this.INVENTSTYLEID;
				}
				
			    public String INVENTCOLORID;

				public String getINVENTCOLORID () {
					return this.INVENTCOLORID;
				}
				
			    public String PRODUCTSTATUSID;

				public String getPRODUCTSTATUSID () {
					return this.PRODUCTSTATUSID;
				}
				
			    public String SEASONCODE;

				public String getSEASONCODE () {
					return this.SEASONCODE;
				}
				
			    public Integer SPLSPCB;

				public Integer getSPLSPCB () {
					return this.SPLSPCB;
				}
				
			    public String SPLSUSTAINABILITY;

				public String getSPLSUSTAINABILITY () {
					return this.SPLSUSTAINABILITY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.CHANNELCODE = readString(dis);
					
					this.ITEMID = readString(dis);
					
					this.INVENTSIZEID = readString(dis);
					
					this.INVENTSTYLEID = readString(dis);
					
					this.INVENTCOLORID = readString(dis);
					
					this.PRODUCTSTATUSID = readString(dis);
					
					this.SEASONCODE = readString(dis);
					
						this.SPLSPCB = readInteger(dis);
					
					this.SPLSUSTAINABILITY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CHANNELCODE,dos);
					
					// String
				
						writeString(this.ITEMID,dos);
					
					// String
				
						writeString(this.INVENTSIZEID,dos);
					
					// String
				
						writeString(this.INVENTSTYLEID,dos);
					
					// String
				
						writeString(this.INVENTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSTATUSID,dos);
					
					// String
				
						writeString(this.SEASONCODE,dos);
					
					// Integer
				
						writeInteger(this.SPLSPCB,dos);
					
					// String
				
						writeString(this.SPLSUSTAINABILITY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CHANNELCODE="+CHANNELCODE);
		sb.append(",ITEMID="+ITEMID);
		sb.append(",INVENTSIZEID="+INVENTSIZEID);
		sb.append(",INVENTSTYLEID="+INVENTSTYLEID);
		sb.append(",INVENTCOLORID="+INVENTCOLORID);
		sb.append(",PRODUCTSTATUSID="+PRODUCTSTATUSID);
		sb.append(",SEASONCODE="+SEASONCODE);
		sb.append(",SPLSPCB="+String.valueOf(SPLSPCB));
		sb.append(",SPLSUSTAINABILITY="+SPLSUSTAINABILITY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row32Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row40Struct implements routines.system.IPersistableRow<row40Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String PRODUCTQUANTITYUNITSYMBOL;

				public String getPRODUCTQUANTITYUNITSYMBOL () {
					return this.PRODUCTQUANTITYUNITSYMBOL;
				}
				
			    public String BARCODESETUPID;

				public String getBARCODESETUPID () {
					return this.BARCODESETUPID;
				}
				
			    public String BARCODE;

				public String getBARCODE () {
					return this.BARCODE;
				}
				
			    public String PRODUCTDESCRIPTION;

				public String getPRODUCTDESCRIPTION () {
					return this.PRODUCTDESCRIPTION;
				}
				
			    public String PRODUCTQUANTITY;

				public String getPRODUCTQUANTITY () {
					return this.PRODUCTQUANTITY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.ITEMNUMBER = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.PRODUCTQUANTITYUNITSYMBOL = readString(dis);
					
					this.BARCODESETUPID = readString(dis);
					
					this.BARCODE = readString(dis);
					
					this.PRODUCTDESCRIPTION = readString(dis);
					
					this.PRODUCTQUANTITY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.PRODUCTQUANTITYUNITSYMBOL,dos);
					
					// String
				
						writeString(this.BARCODESETUPID,dos);
					
					// String
				
						writeString(this.BARCODE,dos);
					
					// String
				
						writeString(this.PRODUCTDESCRIPTION,dos);
					
					// String
				
						writeString(this.PRODUCTQUANTITY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",PRODUCTQUANTITYUNITSYMBOL="+PRODUCTQUANTITYUNITSYMBOL);
		sb.append(",BARCODESETUPID="+BARCODESETUPID);
		sb.append(",BARCODE="+BARCODE);
		sb.append(",PRODUCTDESCRIPTION="+PRODUCTDESCRIPTION);
		sb.append(",PRODUCTQUANTITY="+PRODUCTQUANTITY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row40Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row39Struct implements routines.system.IPersistableRow<row39Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String PRODUCTQUANTITYUNITSYMBOL;

				public String getPRODUCTQUANTITYUNITSYMBOL () {
					return this.PRODUCTQUANTITYUNITSYMBOL;
				}
				
			    public String BARCODESETUPID;

				public String getBARCODESETUPID () {
					return this.BARCODESETUPID;
				}
				
			    public String BARCODE;

				public String getBARCODE () {
					return this.BARCODE;
				}
				
			    public String PRODUCTDESCRIPTION;

				public String getPRODUCTDESCRIPTION () {
					return this.PRODUCTDESCRIPTION;
				}
				
			    public String PRODUCTQUANTITY;

				public String getPRODUCTQUANTITY () {
					return this.PRODUCTQUANTITY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.ITEMNUMBER = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.PRODUCTQUANTITYUNITSYMBOL = readString(dis);
					
					this.BARCODESETUPID = readString(dis);
					
					this.BARCODE = readString(dis);
					
					this.PRODUCTDESCRIPTION = readString(dis);
					
					this.PRODUCTQUANTITY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.PRODUCTQUANTITYUNITSYMBOL,dos);
					
					// String
				
						writeString(this.BARCODESETUPID,dos);
					
					// String
				
						writeString(this.BARCODE,dos);
					
					// String
				
						writeString(this.PRODUCTDESCRIPTION,dos);
					
					// String
				
						writeString(this.PRODUCTQUANTITY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",PRODUCTQUANTITYUNITSYMBOL="+PRODUCTQUANTITYUNITSYMBOL);
		sb.append(",BARCODESETUPID="+BARCODESETUPID);
		sb.append(",BARCODE="+BARCODE);
		sb.append(",PRODUCTDESCRIPTION="+PRODUCTDESCRIPTION);
		sb.append(",PRODUCTQUANTITY="+PRODUCTQUANTITY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row39Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row34Struct implements routines.system.IPersistableRow<row34Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String PRODUCTNUMBER;

				public String getPRODUCTNUMBER () {
					return this.PRODUCTNUMBER;
				}
				
			    public String ATTRIBUTETYPENAME;

				public String getATTRIBUTETYPENAME () {
					return this.ATTRIBUTETYPENAME;
				}
				
			    public String ATTRIBUTENAME;

				public String getATTRIBUTENAME () {
					return this.ATTRIBUTENAME;
				}
				
			    public String TEXTVALUE;

				public String getTEXTVALUE () {
					return this.TEXTVALUE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.PRODUCTNUMBER = readString(dis);
					
					this.ATTRIBUTETYPENAME = readString(dis);
					
					this.ATTRIBUTENAME = readString(dis);
					
					this.TEXTVALUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTNUMBER,dos);
					
					// String
				
						writeString(this.ATTRIBUTETYPENAME,dos);
					
					// String
				
						writeString(this.ATTRIBUTENAME,dos);
					
					// String
				
						writeString(this.TEXTVALUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTNUMBER="+PRODUCTNUMBER);
		sb.append(",ATTRIBUTETYPENAME="+ATTRIBUTETYPENAME);
		sb.append(",ATTRIBUTENAME="+ATTRIBUTENAME);
		sb.append(",TEXTVALUE="+TEXTVALUE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row34Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row17Struct implements routines.system.IPersistableRow<row17Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String PRODUCTMASTERNUMBER;

				public String getPRODUCTMASTERNUMBER () {
					return this.PRODUCTMASTERNUMBER;
				}
				
			    public String PRODUCTMASTERCOLORID;

				public String getPRODUCTMASTERCOLORID () {
					return this.PRODUCTMASTERCOLORID;
				}
				
			    public String LANGUAGEID;

				public String getLANGUAGEID () {
					return this.LANGUAGEID;
				}
				
			    public String TRANSLATEDCOLORDESCRIPTION;

				public String getTRANSLATEDCOLORDESCRIPTION () {
					return this.TRANSLATEDCOLORDESCRIPTION;
				}
				
			    public String TRANSLATEDCOLORNAME;

				public String getTRANSLATEDCOLORNAME () {
					return this.TRANSLATEDCOLORNAME;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.PRODUCTMASTERNUMBER = readString(dis);
					
					this.PRODUCTMASTERCOLORID = readString(dis);
					
					this.LANGUAGEID = readString(dis);
					
					this.TRANSLATEDCOLORDESCRIPTION = readString(dis);
					
					this.TRANSLATEDCOLORNAME = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTMASTERNUMBER,dos);
					
					// String
				
						writeString(this.PRODUCTMASTERCOLORID,dos);
					
					// String
				
						writeString(this.LANGUAGEID,dos);
					
					// String
				
						writeString(this.TRANSLATEDCOLORDESCRIPTION,dos);
					
					// String
				
						writeString(this.TRANSLATEDCOLORNAME,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTMASTERNUMBER="+PRODUCTMASTERNUMBER);
		sb.append(",PRODUCTMASTERCOLORID="+PRODUCTMASTERCOLORID);
		sb.append(",LANGUAGEID="+LANGUAGEID);
		sb.append(",TRANSLATEDCOLORDESCRIPTION="+TRANSLATEDCOLORDESCRIPTION);
		sb.append(",TRANSLATEDCOLORNAME="+TRANSLATEDCOLORNAME);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row17Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row48Struct implements routines.system.IPersistableRow<row48Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String PRODUCTNUMBER;

				public String getPRODUCTNUMBER () {
					return this.PRODUCTNUMBER;
				}
				
			    public String ATTRIBUTETYPENAME;

				public String getATTRIBUTETYPENAME () {
					return this.ATTRIBUTETYPENAME;
				}
				
			    public String ATTRIBUTENAME;

				public String getATTRIBUTENAME () {
					return this.ATTRIBUTENAME;
				}
				
			    public String TEXTVALUE;

				public String getTEXTVALUE () {
					return this.TEXTVALUE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.PRODUCTNUMBER = readString(dis);
					
					this.ATTRIBUTETYPENAME = readString(dis);
					
					this.ATTRIBUTENAME = readString(dis);
					
					this.TEXTVALUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTNUMBER,dos);
					
					// String
				
						writeString(this.ATTRIBUTETYPENAME,dos);
					
					// String
				
						writeString(this.ATTRIBUTENAME,dos);
					
					// String
				
						writeString(this.TEXTVALUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTNUMBER="+PRODUCTNUMBER);
		sb.append(",ATTRIBUTETYPENAME="+ATTRIBUTETYPENAME);
		sb.append(",ATTRIBUTENAME="+ATTRIBUTENAME);
		sb.append(",TEXTVALUE="+TEXTVALUE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row48Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row31Struct implements routines.system.IPersistableRow<row31Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String PRODUCTNUMBER;

				public String getPRODUCTNUMBER () {
					return this.PRODUCTNUMBER;
				}
				
			    public String ATTRIBUTETYPENAME;

				public String getATTRIBUTETYPENAME () {
					return this.ATTRIBUTETYPENAME;
				}
				
			    public String ATTRIBUTENAME;

				public String getATTRIBUTENAME () {
					return this.ATTRIBUTENAME;
				}
				
			    public String TEXTVALUE;

				public String getTEXTVALUE () {
					return this.TEXTVALUE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.PRODUCTNUMBER = readString(dis);
					
					this.ATTRIBUTETYPENAME = readString(dis);
					
					this.ATTRIBUTENAME = readString(dis);
					
					this.TEXTVALUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTNUMBER,dos);
					
					// String
				
						writeString(this.ATTRIBUTETYPENAME,dos);
					
					// String
				
						writeString(this.ATTRIBUTENAME,dos);
					
					// String
				
						writeString(this.TEXTVALUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTNUMBER="+PRODUCTNUMBER);
		sb.append(",ATTRIBUTETYPENAME="+ATTRIBUTETYPENAME);
		sb.append(",ATTRIBUTENAME="+ATTRIBUTENAME);
		sb.append(",TEXTVALUE="+TEXTVALUE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row31Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct implements routines.system.IPersistableRow<copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String PRODUCTNUMBER;

				public String getPRODUCTNUMBER () {
					return this.PRODUCTNUMBER;
				}
				
			    public String ATTRIBUTETYPENAME;

				public String getATTRIBUTETYPENAME () {
					return this.ATTRIBUTETYPENAME;
				}
				
			    public String ATTRIBUTENAME;

				public String getATTRIBUTENAME () {
					return this.ATTRIBUTENAME;
				}
				
			    public String TEXTVALUE;

				public String getTEXTVALUE () {
					return this.TEXTVALUE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.PRODUCTNUMBER = readString(dis);
					
					this.ATTRIBUTETYPENAME = readString(dis);
					
					this.ATTRIBUTENAME = readString(dis);
					
					this.TEXTVALUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTNUMBER,dos);
					
					// String
				
						writeString(this.ATTRIBUTETYPENAME,dos);
					
					// String
				
						writeString(this.ATTRIBUTENAME,dos);
					
					// String
				
						writeString(this.TEXTVALUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTNUMBER="+PRODUCTNUMBER);
		sb.append(",ATTRIBUTETYPENAME="+ATTRIBUTETYPENAME);
		sb.append(",ATTRIBUTENAME="+ATTRIBUTENAME);
		sb.append(",TEXTVALUE="+TEXTVALUE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_full_barcodeStruct implements routines.system.IPersistableRow<sortie_full_barcodeStruct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				
			    public String EAN;

				public String getEAN () {
					return this.EAN;
				}
				
			    public String LABELD365;

				public String getLABELD365 () {
					return this.LABELD365;
				}
				
			    public String PRODUCT_CHANNEL;

				public String getPRODUCT_CHANNEL () {
					return this.PRODUCT_CHANNEL;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
					this.EAN = readString(dis);
					
					this.LABELD365 = readString(dis);
					
					this.PRODUCT_CHANNEL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
					// String
				
						writeString(this.EAN,dos);
					
					// String
				
						writeString(this.LABELD365,dos);
					
					// String
				
						writeString(this.PRODUCT_CHANNEL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
		sb.append(",EAN="+EAN);
		sb.append(",LABELD365="+LABELD365);
		sb.append(",PRODUCT_CHANNEL="+PRODUCT_CHANNEL);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_full_barcodeStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfsortie_colorStruct implements routines.system.IPersistableRow<copyOfsortie_colorStruct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String PRODUCTMASTERNUMBER;

				public String getPRODUCTMASTERNUMBER () {
					return this.PRODUCTMASTERNUMBER;
				}
				
			    public String PRODUCTMASTERCOLORID;

				public String getPRODUCTMASTERCOLORID () {
					return this.PRODUCTMASTERCOLORID;
				}
				
			    public String LANGUAGEID;

				public String getLANGUAGEID () {
					return this.LANGUAGEID;
				}
				
			    public String TRANSLATEDCOLORDESCRIPTION;

				public String getTRANSLATEDCOLORDESCRIPTION () {
					return this.TRANSLATEDCOLORDESCRIPTION;
				}
				
			    public String TRANSLATEDCOLORNAME;

				public String getTRANSLATEDCOLORNAME () {
					return this.TRANSLATEDCOLORNAME;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.PRODUCTMASTERNUMBER = readString(dis);
					
					this.PRODUCTMASTERCOLORID = readString(dis);
					
					this.LANGUAGEID = readString(dis);
					
					this.TRANSLATEDCOLORDESCRIPTION = readString(dis);
					
					this.TRANSLATEDCOLORNAME = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTMASTERNUMBER,dos);
					
					// String
				
						writeString(this.PRODUCTMASTERCOLORID,dos);
					
					// String
				
						writeString(this.LANGUAGEID,dos);
					
					// String
				
						writeString(this.TRANSLATEDCOLORDESCRIPTION,dos);
					
					// String
				
						writeString(this.TRANSLATEDCOLORNAME,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTMASTERNUMBER="+PRODUCTMASTERNUMBER);
		sb.append(",PRODUCTMASTERCOLORID="+PRODUCTMASTERCOLORID);
		sb.append(",LANGUAGEID="+LANGUAGEID);
		sb.append(",TRANSLATEDCOLORDESCRIPTION="+TRANSLATEDCOLORDESCRIPTION);
		sb.append(",TRANSLATEDCOLORNAME="+TRANSLATEDCOLORNAME);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfsortie_colorStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_fullStruct implements routines.system.IPersistableRow<copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_fullStruct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				
			    public String EAN;

				public String getEAN () {
					return this.EAN;
				}
				
			    public String LABELD365;

				public String getLABELD365 () {
					return this.LABELD365;
				}
				
			    public String PRODUCT_CHANNEL;

				public String getPRODUCT_CHANNEL () {
					return this.PRODUCT_CHANNEL;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
					this.EAN = readString(dis);
					
					this.LABELD365 = readString(dis);
					
					this.PRODUCT_CHANNEL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
					// String
				
						writeString(this.EAN,dos);
					
					// String
				
						writeString(this.LABELD365,dos);
					
					// String
				
						writeString(this.PRODUCT_CHANNEL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
		sb.append(",EAN="+EAN);
		sb.append(",LABELD365="+LABELD365);
		sb.append(",PRODUCT_CHANNEL="+PRODUCT_CHANNEL);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_fullStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct implements routines.system.IPersistableRow<copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String PRODUCTNUMBER;

				public String getPRODUCTNUMBER () {
					return this.PRODUCTNUMBER;
				}
				
			    public String ATTRIBUTETYPENAME;

				public String getATTRIBUTETYPENAME () {
					return this.ATTRIBUTETYPENAME;
				}
				
			    public String ATTRIBUTENAME;

				public String getATTRIBUTENAME () {
					return this.ATTRIBUTENAME;
				}
				
			    public String TEXTVALUE;

				public String getTEXTVALUE () {
					return this.TEXTVALUE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.PRODUCTNUMBER = readString(dis);
					
					this.ATTRIBUTETYPENAME = readString(dis);
					
					this.ATTRIBUTENAME = readString(dis);
					
					this.TEXTVALUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTNUMBER,dos);
					
					// String
				
						writeString(this.ATTRIBUTETYPENAME,dos);
					
					// String
				
						writeString(this.ATTRIBUTENAME,dos);
					
					// String
				
						writeString(this.TEXTVALUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTNUMBER="+PRODUCTNUMBER);
		sb.append(",ATTRIBUTETYPENAME="+ATTRIBUTETYPENAME);
		sb.append(",ATTRIBUTENAME="+ATTRIBUTENAME);
		sb.append(",TEXTVALUE="+TEXTVALUE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row37Struct implements routines.system.IPersistableRow<row37Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String PRODUCTQUANTITYUNITSYMBOL;

				public String getPRODUCTQUANTITYUNITSYMBOL () {
					return this.PRODUCTQUANTITYUNITSYMBOL;
				}
				
			    public String BARCODESETUPID;

				public String getBARCODESETUPID () {
					return this.BARCODESETUPID;
				}
				
			    public String BARCODE;

				public String getBARCODE () {
					return this.BARCODE;
				}
				
			    public String PRODUCTDESCRIPTION;

				public String getPRODUCTDESCRIPTION () {
					return this.PRODUCTDESCRIPTION;
				}
				
			    public String PRODUCTQUANTITY;

				public String getPRODUCTQUANTITY () {
					return this.PRODUCTQUANTITY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.ITEMNUMBER = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.PRODUCTQUANTITYUNITSYMBOL = readString(dis);
					
					this.BARCODESETUPID = readString(dis);
					
					this.BARCODE = readString(dis);
					
					this.PRODUCTDESCRIPTION = readString(dis);
					
					this.PRODUCTQUANTITY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.PRODUCTQUANTITYUNITSYMBOL,dos);
					
					// String
				
						writeString(this.BARCODESETUPID,dos);
					
					// String
				
						writeString(this.BARCODE,dos);
					
					// String
				
						writeString(this.PRODUCTDESCRIPTION,dos);
					
					// String
				
						writeString(this.PRODUCTQUANTITY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",PRODUCTQUANTITYUNITSYMBOL="+PRODUCTQUANTITYUNITSYMBOL);
		sb.append(",BARCODESETUPID="+BARCODESETUPID);
		sb.append(",BARCODE="+BARCODE);
		sb.append(",PRODUCTDESCRIPTION="+PRODUCTDESCRIPTION);
		sb.append(",PRODUCTQUANTITY="+PRODUCTQUANTITY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row37Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row33Struct implements routines.system.IPersistableRow<row33Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String PRODUCTQUANTITYUNITSYMBOL;

				public String getPRODUCTQUANTITYUNITSYMBOL () {
					return this.PRODUCTQUANTITYUNITSYMBOL;
				}
				
			    public String BARCODESETUPID;

				public String getBARCODESETUPID () {
					return this.BARCODESETUPID;
				}
				
			    public String BARCODE;

				public String getBARCODE () {
					return this.BARCODE;
				}
				
			    public String PRODUCTDESCRIPTION;

				public String getPRODUCTDESCRIPTION () {
					return this.PRODUCTDESCRIPTION;
				}
				
			    public String PRODUCTQUANTITY;

				public String getPRODUCTQUANTITY () {
					return this.PRODUCTQUANTITY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.ITEMNUMBER = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.PRODUCTQUANTITYUNITSYMBOL = readString(dis);
					
					this.BARCODESETUPID = readString(dis);
					
					this.BARCODE = readString(dis);
					
					this.PRODUCTDESCRIPTION = readString(dis);
					
					this.PRODUCTQUANTITY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.PRODUCTQUANTITYUNITSYMBOL,dos);
					
					// String
				
						writeString(this.BARCODESETUPID,dos);
					
					// String
				
						writeString(this.BARCODE,dos);
					
					// String
				
						writeString(this.PRODUCTDESCRIPTION,dos);
					
					// String
				
						writeString(this.PRODUCTQUANTITY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",PRODUCTQUANTITYUNITSYMBOL="+PRODUCTQUANTITYUNITSYMBOL);
		sb.append(",BARCODESETUPID="+BARCODESETUPID);
		sb.append(",BARCODE="+BARCODE);
		sb.append(",PRODUCTDESCRIPTION="+PRODUCTDESCRIPTION);
		sb.append(",PRODUCTQUANTITY="+PRODUCTQUANTITY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row33Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_barcodeStruct implements routines.system.IPersistableRow<sortie_barcodeStruct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String PRODUCTQUANTITYUNITSYMBOL;

				public String getPRODUCTQUANTITYUNITSYMBOL () {
					return this.PRODUCTQUANTITYUNITSYMBOL;
				}
				
			    public String BARCODESETUPID;

				public String getBARCODESETUPID () {
					return this.BARCODESETUPID;
				}
				
			    public String BARCODE;

				public String getBARCODE () {
					return this.BARCODE;
				}
				
			    public String PRODUCTDESCRIPTION;

				public String getPRODUCTDESCRIPTION () {
					return this.PRODUCTDESCRIPTION;
				}
				
			    public String PRODUCTQUANTITY;

				public String getPRODUCTQUANTITY () {
					return this.PRODUCTQUANTITY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.ITEMNUMBER = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.PRODUCTQUANTITYUNITSYMBOL = readString(dis);
					
					this.BARCODESETUPID = readString(dis);
					
					this.BARCODE = readString(dis);
					
					this.PRODUCTDESCRIPTION = readString(dis);
					
					this.PRODUCTQUANTITY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.PRODUCTQUANTITYUNITSYMBOL,dos);
					
					// String
				
						writeString(this.BARCODESETUPID,dos);
					
					// String
				
						writeString(this.BARCODE,dos);
					
					// String
				
						writeString(this.PRODUCTDESCRIPTION,dos);
					
					// String
				
						writeString(this.PRODUCTQUANTITY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",PRODUCTQUANTITYUNITSYMBOL="+PRODUCTQUANTITYUNITSYMBOL);
		sb.append(",BARCODESETUPID="+BARCODESETUPID);
		sb.append(",BARCODE="+BARCODE);
		sb.append(",PRODUCTDESCRIPTION="+PRODUCTDESCRIPTION);
		sb.append(",PRODUCTQUANTITY="+PRODUCTQUANTITY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_barcodeStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_full_barcode_1Struct implements routines.system.IPersistableRow<sortie_full_barcode_1Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				
			    public String EAN;

				public String getEAN () {
					return this.EAN;
				}
				
			    public String LABELD365;

				public String getLABELD365 () {
					return this.LABELD365;
				}
				
			    public String PRODUCT_CHANNEL;

				public String getPRODUCT_CHANNEL () {
					return this.PRODUCT_CHANNEL;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
					this.EAN = readString(dis);
					
					this.LABELD365 = readString(dis);
					
					this.PRODUCT_CHANNEL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
					// String
				
						writeString(this.EAN,dos);
					
					// String
				
						writeString(this.LABELD365,dos);
					
					// String
				
						writeString(this.PRODUCT_CHANNEL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
		sb.append(",EAN="+EAN);
		sb.append(",LABELD365="+LABELD365);
		sb.append(",PRODUCT_CHANNEL="+PRODUCT_CHANNEL);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_full_barcode_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_EANStruct implements routines.system.IPersistableRow<sortie_EANStruct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String PRODUCTQUANTITYUNITSYMBOL;

				public String getPRODUCTQUANTITYUNITSYMBOL () {
					return this.PRODUCTQUANTITYUNITSYMBOL;
				}
				
			    public String BARCODESETUPID;

				public String getBARCODESETUPID () {
					return this.BARCODESETUPID;
				}
				
			    public String BARCODE;

				public String getBARCODE () {
					return this.BARCODE;
				}
				
			    public String PRODUCTDESCRIPTION;

				public String getPRODUCTDESCRIPTION () {
					return this.PRODUCTDESCRIPTION;
				}
				
			    public String PRODUCTQUANTITY;

				public String getPRODUCTQUANTITY () {
					return this.PRODUCTQUANTITY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.ITEMNUMBER = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.PRODUCTQUANTITYUNITSYMBOL = readString(dis);
					
					this.BARCODESETUPID = readString(dis);
					
					this.BARCODE = readString(dis);
					
					this.PRODUCTDESCRIPTION = readString(dis);
					
					this.PRODUCTQUANTITY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.PRODUCTQUANTITYUNITSYMBOL,dos);
					
					// String
				
						writeString(this.BARCODESETUPID,dos);
					
					// String
				
						writeString(this.BARCODE,dos);
					
					// String
				
						writeString(this.PRODUCTDESCRIPTION,dos);
					
					// String
				
						writeString(this.PRODUCTQUANTITY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",PRODUCTQUANTITYUNITSYMBOL="+PRODUCTQUANTITYUNITSYMBOL);
		sb.append(",BARCODESETUPID="+BARCODESETUPID);
		sb.append(",BARCODE="+BARCODE);
		sb.append(",PRODUCTDESCRIPTION="+PRODUCTDESCRIPTION);
		sb.append(",PRODUCTQUANTITY="+PRODUCTQUANTITY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_EANStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfsortie_released_product_variantStruct implements routines.system.IPersistableRow<copyOfsortie_released_product_variantStruct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				
			    public String EAN;

				public String getEAN () {
					return this.EAN;
				}
				
			    public String LABELD365;

				public String getLABELD365 () {
					return this.LABELD365;
				}
				
			    public String PRODUCT_CHANNEL;

				public String getPRODUCT_CHANNEL () {
					return this.PRODUCT_CHANNEL;
				}
				
			    public String SUSTAINABILITY;

				public String getSUSTAINABILITY () {
					return this.SUSTAINABILITY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
					this.EAN = readString(dis);
					
					this.LABELD365 = readString(dis);
					
					this.PRODUCT_CHANNEL = readString(dis);
					
					this.SUSTAINABILITY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
					// String
				
						writeString(this.EAN,dos);
					
					// String
				
						writeString(this.LABELD365,dos);
					
					// String
				
						writeString(this.PRODUCT_CHANNEL,dos);
					
					// String
				
						writeString(this.SUSTAINABILITY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
		sb.append(",EAN="+EAN);
		sb.append(",LABELD365="+LABELD365);
		sb.append(",PRODUCT_CHANNEL="+PRODUCT_CHANNEL);
		sb.append(",SUSTAINABILITY="+SUSTAINABILITY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfsortie_released_product_variantStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_product_statusStruct implements routines.system.IPersistableRow<sortie_product_statusStruct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String CHANNELCODE;

				public String getCHANNELCODE () {
					return this.CHANNELCODE;
				}
				
			    public String ITEMID;

				public String getITEMID () {
					return this.ITEMID;
				}
				
			    public String INVENTSIZEID;

				public String getINVENTSIZEID () {
					return this.INVENTSIZEID;
				}
				
			    public String INVENTSTYLEID;

				public String getINVENTSTYLEID () {
					return this.INVENTSTYLEID;
				}
				
			    public String INVENTCOLORID;

				public String getINVENTCOLORID () {
					return this.INVENTCOLORID;
				}
				
			    public String PRODUCTSTATUSID;

				public String getPRODUCTSTATUSID () {
					return this.PRODUCTSTATUSID;
				}
				
			    public String SEASONCODE;

				public String getSEASONCODE () {
					return this.SEASONCODE;
				}
				
			    public Integer SPLSPCB;

				public Integer getSPLSPCB () {
					return this.SPLSPCB;
				}
				
			    public String SPLSUSTAINABILITY;

				public String getSPLSUSTAINABILITY () {
					return this.SPLSUSTAINABILITY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.CHANNELCODE = readString(dis);
					
					this.ITEMID = readString(dis);
					
					this.INVENTSIZEID = readString(dis);
					
					this.INVENTSTYLEID = readString(dis);
					
					this.INVENTCOLORID = readString(dis);
					
					this.PRODUCTSTATUSID = readString(dis);
					
					this.SEASONCODE = readString(dis);
					
						this.SPLSPCB = readInteger(dis);
					
					this.SPLSUSTAINABILITY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CHANNELCODE,dos);
					
					// String
				
						writeString(this.ITEMID,dos);
					
					// String
				
						writeString(this.INVENTSIZEID,dos);
					
					// String
				
						writeString(this.INVENTSTYLEID,dos);
					
					// String
				
						writeString(this.INVENTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSTATUSID,dos);
					
					// String
				
						writeString(this.SEASONCODE,dos);
					
					// Integer
				
						writeInteger(this.SPLSPCB,dos);
					
					// String
				
						writeString(this.SPLSUSTAINABILITY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CHANNELCODE="+CHANNELCODE);
		sb.append(",ITEMID="+ITEMID);
		sb.append(",INVENTSIZEID="+INVENTSIZEID);
		sb.append(",INVENTSTYLEID="+INVENTSTYLEID);
		sb.append(",INVENTCOLORID="+INVENTCOLORID);
		sb.append(",PRODUCTSTATUSID="+PRODUCTSTATUSID);
		sb.append(",SEASONCODE="+SEASONCODE);
		sb.append(",SPLSPCB="+String.valueOf(SPLSPCB));
		sb.append(",SPLSUSTAINABILITY="+SPLSUSTAINABILITY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_product_statusStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row30Struct implements routines.system.IPersistableRow<row30Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String PRODUCTMASTERNUMBER;

				public String getPRODUCTMASTERNUMBER () {
					return this.PRODUCTMASTERNUMBER;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String PRODUCTNAME;

				public String getPRODUCTNAME () {
					return this.PRODUCTNAME;
				}
				
			    public String PRODUCTSEARCHNAME;

				public String getPRODUCTSEARCHNAME () {
					return this.PRODUCTSEARCHNAME;
				}
				
			    public String PRODUCTVARIANTNUMBER;

				public String getPRODUCTVARIANTNUMBER () {
					return this.PRODUCTVARIANTNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.PRODUCTMASTERNUMBER = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.PRODUCTNAME = readString(dis);
					
					this.PRODUCTSEARCHNAME = readString(dis);
					
					this.PRODUCTVARIANTNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTMASTERNUMBER,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.PRODUCTNAME,dos);
					
					// String
				
						writeString(this.PRODUCTSEARCHNAME,dos);
					
					// String
				
						writeString(this.PRODUCTVARIANTNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTMASTERNUMBER="+PRODUCTMASTERNUMBER);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",PRODUCTNAME="+PRODUCTNAME);
		sb.append(",PRODUCTSEARCHNAME="+PRODUCTSEARCHNAME);
		sb.append(",PRODUCTVARIANTNUMBER="+PRODUCTVARIANTNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row30Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_released_product_variantStruct implements routines.system.IPersistableRow<sortie_released_product_variantStruct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String PRODUCTMASTERNUMBER;

				public String getPRODUCTMASTERNUMBER () {
					return this.PRODUCTMASTERNUMBER;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String PRODUCTNAME;

				public String getPRODUCTNAME () {
					return this.PRODUCTNAME;
				}
				
			    public String PRODUCTSEARCHNAME;

				public String getPRODUCTSEARCHNAME () {
					return this.PRODUCTSEARCHNAME;
				}
				
			    public String PRODUCTVARIANTNUMBER;

				public String getPRODUCTVARIANTNUMBER () {
					return this.PRODUCTVARIANTNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.PRODUCTMASTERNUMBER = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.PRODUCTNAME = readString(dis);
					
					this.PRODUCTSEARCHNAME = readString(dis);
					
					this.PRODUCTVARIANTNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTMASTERNUMBER,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.PRODUCTNAME,dos);
					
					// String
				
						writeString(this.PRODUCTSEARCHNAME,dos);
					
					// String
				
						writeString(this.PRODUCTVARIANTNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTMASTERNUMBER="+PRODUCTMASTERNUMBER);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",PRODUCTNAME="+PRODUCTNAME);
		sb.append(",PRODUCTSEARCHNAME="+PRODUCTSEARCHNAME);
		sb.append(",PRODUCTVARIANTNUMBER="+PRODUCTVARIANTNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_released_product_variantStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_full_varianStruct implements routines.system.IPersistableRow<sortie_full_varianStruct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				
			    public String EAN;

				public String getEAN () {
					return this.EAN;
				}
				
			    public String LABELD365;

				public String getLABELD365 () {
					return this.LABELD365;
				}
				
			    public String PRODUCT_CHANNEL;

				public String getPRODUCT_CHANNEL () {
					return this.PRODUCT_CHANNEL;
				}
				
			    public String SUSTAINABILITY;

				public String getSUSTAINABILITY () {
					return this.SUSTAINABILITY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
					this.EAN = readString(dis);
					
					this.LABELD365 = readString(dis);
					
					this.PRODUCT_CHANNEL = readString(dis);
					
					this.SUSTAINABILITY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
					// String
				
						writeString(this.EAN,dos);
					
					// String
				
						writeString(this.LABELD365,dos);
					
					// String
				
						writeString(this.PRODUCT_CHANNEL,dos);
					
					// String
				
						writeString(this.SUSTAINABILITY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
		sb.append(",EAN="+EAN);
		sb.append(",LABELD365="+LABELD365);
		sb.append(",PRODUCT_CHANNEL="+PRODUCT_CHANNEL);
		sb.append(",SUSTAINABILITY="+SUSTAINABILITY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_full_varianStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_full_product_variantStruct implements routines.system.IPersistableRow<sortie_full_product_variantStruct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				
			    public String EAN;

				public String getEAN () {
					return this.EAN;
				}
				
			    public String LABELD365;

				public String getLABELD365 () {
					return this.LABELD365;
				}
				
			    public String PRODUCT_CHANNEL;

				public String getPRODUCT_CHANNEL () {
					return this.PRODUCT_CHANNEL;
				}
				
			    public String SUSTAINABILITY;

				public String getSUSTAINABILITY () {
					return this.SUSTAINABILITY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
					this.EAN = readString(dis);
					
					this.LABELD365 = readString(dis);
					
					this.PRODUCT_CHANNEL = readString(dis);
					
					this.SUSTAINABILITY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
					// String
				
						writeString(this.EAN,dos);
					
					// String
				
						writeString(this.LABELD365,dos);
					
					// String
				
						writeString(this.PRODUCT_CHANNEL,dos);
					
					// String
				
						writeString(this.SUSTAINABILITY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
		sb.append(",EAN="+EAN);
		sb.append(",LABELD365="+LABELD365);
		sb.append(",PRODUCT_CHANNEL="+PRODUCT_CHANNEL);
		sb.append(",SUSTAINABILITY="+SUSTAINABILITY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_full_product_variantStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_product_variantStruct implements routines.system.IPersistableRow<sortie_product_variantStruct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String PRODUCTMASTERNUMBER;

				public String getPRODUCTMASTERNUMBER () {
					return this.PRODUCTMASTERNUMBER;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String PRODUCTNAME;

				public String getPRODUCTNAME () {
					return this.PRODUCTNAME;
				}
				
			    public String PRODUCTSEARCHNAME;

				public String getPRODUCTSEARCHNAME () {
					return this.PRODUCTSEARCHNAME;
				}
				
			    public String PRODUCTVARIANTNUMBER;

				public String getPRODUCTVARIANTNUMBER () {
					return this.PRODUCTVARIANTNUMBER;
				}
				
			    public String PRODUCTDESCRIPTION;

				public String getPRODUCTDESCRIPTION () {
					return this.PRODUCTDESCRIPTION;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.PRODUCTMASTERNUMBER = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.PRODUCTNAME = readString(dis);
					
					this.PRODUCTSEARCHNAME = readString(dis);
					
					this.PRODUCTVARIANTNUMBER = readString(dis);
					
					this.PRODUCTDESCRIPTION = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTMASTERNUMBER,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.PRODUCTNAME,dos);
					
					// String
				
						writeString(this.PRODUCTSEARCHNAME,dos);
					
					// String
				
						writeString(this.PRODUCTVARIANTNUMBER,dos);
					
					// String
				
						writeString(this.PRODUCTDESCRIPTION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTMASTERNUMBER="+PRODUCTMASTERNUMBER);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",PRODUCTNAME="+PRODUCTNAME);
		sb.append(",PRODUCTSEARCHNAME="+PRODUCTSEARCHNAME);
		sb.append(",PRODUCTVARIANTNUMBER="+PRODUCTVARIANTNUMBER);
		sb.append(",PRODUCTDESCRIPTION="+PRODUCTDESCRIPTION);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_product_variantStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_full_fitsStruct implements routines.system.IPersistableRow<sortie_full_fitsStruct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				
			    public String EAN;

				public String getEAN () {
					return this.EAN;
				}
				
			    public String LABELD365;

				public String getLABELD365 () {
					return this.LABELD365;
				}
				
			    public String PRODUCT_CHANNEL;

				public String getPRODUCT_CHANNEL () {
					return this.PRODUCT_CHANNEL;
				}
				
			    public String SUSTAINABILITY;

				public String getSUSTAINABILITY () {
					return this.SUSTAINABILITY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
					this.EAN = readString(dis);
					
					this.LABELD365 = readString(dis);
					
					this.PRODUCT_CHANNEL = readString(dis);
					
					this.SUSTAINABILITY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
					// String
				
						writeString(this.EAN,dos);
					
					// String
				
						writeString(this.LABELD365,dos);
					
					// String
				
						writeString(this.PRODUCT_CHANNEL,dos);
					
					// String
				
						writeString(this.SUSTAINABILITY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
		sb.append(",EAN="+EAN);
		sb.append(",LABELD365="+LABELD365);
		sb.append(",PRODUCT_CHANNEL="+PRODUCT_CHANNEL);
		sb.append(",SUSTAINABILITY="+SUSTAINABILITY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_full_fitsStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_fitsStruct implements routines.system.IPersistableRow<sortie_fitsStruct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String PRODUCTMASTERNUMBER;

				public String getPRODUCTMASTERNUMBER () {
					return this.PRODUCTMASTERNUMBER;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.PRODUCTMASTERNUMBER = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTMASTERNUMBER,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTMASTERNUMBER="+PRODUCTMASTERNUMBER);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_fitsStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_Ref_DescriptionStruct implements routines.system.IPersistableRow<sortie_Ref_DescriptionStruct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String PRODUCTMASTERNUMBER;

				public String getPRODUCTMASTERNUMBER () {
					return this.PRODUCTMASTERNUMBER;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.PRODUCTMASTERNUMBER = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTMASTERNUMBER,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTMASTERNUMBER="+PRODUCTMASTERNUMBER);
		sb.append(",DESCRIPTION="+DESCRIPTION);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_Ref_DescriptionStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_hashoutputStruct implements routines.system.IPersistableRow<sortie_hashoutputStruct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String PRODUCTMASTERNUMBER;

				public String getPRODUCTMASTERNUMBER () {
					return this.PRODUCTMASTERNUMBER;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.PRODUCTMASTERNUMBER = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTMASTERNUMBER,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTMASTERNUMBER="+PRODUCTMASTERNUMBER);
		sb.append(",DESCRIPTION="+DESCRIPTION);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_hashoutputStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_full_sizeStruct implements routines.system.IPersistableRow<sortie_full_sizeStruct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				
			    public String EAN;

				public String getEAN () {
					return this.EAN;
				}
				
			    public String LABELD365;

				public String getLABELD365 () {
					return this.LABELD365;
				}
				
			    public String PRODUCT_CHANNEL;

				public String getPRODUCT_CHANNEL () {
					return this.PRODUCT_CHANNEL;
				}
				
			    public String SUSTAINABILITY;

				public String getSUSTAINABILITY () {
					return this.SUSTAINABILITY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
					this.EAN = readString(dis);
					
					this.LABELD365 = readString(dis);
					
					this.PRODUCT_CHANNEL = readString(dis);
					
					this.SUSTAINABILITY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
					// String
				
						writeString(this.EAN,dos);
					
					// String
				
						writeString(this.LABELD365,dos);
					
					// String
				
						writeString(this.PRODUCT_CHANNEL,dos);
					
					// String
				
						writeString(this.SUSTAINABILITY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
		sb.append(",EAN="+EAN);
		sb.append(",LABELD365="+LABELD365);
		sb.append(",PRODUCT_CHANNEL="+PRODUCT_CHANNEL);
		sb.append(",SUSTAINABILITY="+SUSTAINABILITY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_full_sizeStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_sizeStruct implements routines.system.IPersistableRow<sortie_sizeStruct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String PRODUCTMASTERNUMBER;

				public String getPRODUCTMASTERNUMBER () {
					return this.PRODUCTMASTERNUMBER;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.PRODUCTMASTERNUMBER = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTMASTERNUMBER,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTMASTERNUMBER="+PRODUCTMASTERNUMBER);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_sizeStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_full_Struct implements routines.system.IPersistableRow<sortie_full_Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				
			    public String EAN;

				public String getEAN () {
					return this.EAN;
				}
				
			    public String LABELD365;

				public String getLABELD365 () {
					return this.LABELD365;
				}
				
			    public String PRODUCT_CHANNEL;

				public String getPRODUCT_CHANNEL () {
					return this.PRODUCT_CHANNEL;
				}
				
			    public String SUSTAINABILITY;

				public String getSUSTAINABILITY () {
					return this.SUSTAINABILITY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
					this.EAN = readString(dis);
					
					this.LABELD365 = readString(dis);
					
					this.PRODUCT_CHANNEL = readString(dis);
					
					this.SUSTAINABILITY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
					// String
				
						writeString(this.EAN,dos);
					
					// String
				
						writeString(this.LABELD365,dos);
					
					// String
				
						writeString(this.PRODUCT_CHANNEL,dos);
					
					// String
				
						writeString(this.SUSTAINABILITY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
		sb.append(",EAN="+EAN);
		sb.append(",LABELD365="+LABELD365);
		sb.append(",PRODUCT_CHANNEL="+PRODUCT_CHANNEL);
		sb.append(",SUSTAINABILITY="+SUSTAINABILITY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_full_Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_colorStruct implements routines.system.IPersistableRow<sortie_colorStruct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String PRODUCTMASTERNUMBER;

				public String getPRODUCTMASTERNUMBER () {
					return this.PRODUCTMASTERNUMBER;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.PRODUCTMASTERNUMBER = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTMASTERNUMBER,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTMASTERNUMBER="+PRODUCTMASTERNUMBER);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_colorStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_fullStruct implements routines.system.IPersistableRow<copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_fullStruct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				
			    public String EAN;

				public String getEAN () {
					return this.EAN;
				}
				
			    public String LABELD365;

				public String getLABELD365 () {
					return this.LABELD365;
				}
				
			    public String PRODUCT_CHANNEL;

				public String getPRODUCT_CHANNEL () {
					return this.PRODUCT_CHANNEL;
				}
				
			    public String SUSTAINABILITY;

				public String getSUSTAINABILITY () {
					return this.SUSTAINABILITY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
					this.EAN = readString(dis);
					
					this.LABELD365 = readString(dis);
					
					this.PRODUCT_CHANNEL = readString(dis);
					
					this.SUSTAINABILITY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
					// String
				
						writeString(this.EAN,dos);
					
					// String
				
						writeString(this.LABELD365,dos);
					
					// String
				
						writeString(this.PRODUCT_CHANNEL,dos);
					
					// String
				
						writeString(this.SUSTAINABILITY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
		sb.append(",EAN="+EAN);
		sb.append(",LABELD365="+LABELD365);
		sb.append(",PRODUCT_CHANNEL="+PRODUCT_CHANNEL);
		sb.append(",SUSTAINABILITY="+SUSTAINABILITY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_fullStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct implements routines.system.IPersistableRow<copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String PRODUCTNUMBER;

				public String getPRODUCTNUMBER () {
					return this.PRODUCTNUMBER;
				}
				
			    public String ATTRIBUTETYPENAME;

				public String getATTRIBUTETYPENAME () {
					return this.ATTRIBUTETYPENAME;
				}
				
			    public String ATTRIBUTENAME;

				public String getATTRIBUTENAME () {
					return this.ATTRIBUTENAME;
				}
				
			    public String TEXTVALUE;

				public String getTEXTVALUE () {
					return this.TEXTVALUE;
				}
				
			    public String INTEGERVALUE;

				public String getINTEGERVALUE () {
					return this.INTEGERVALUE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.PRODUCTNUMBER = readString(dis);
					
					this.ATTRIBUTETYPENAME = readString(dis);
					
					this.ATTRIBUTENAME = readString(dis);
					
					this.TEXTVALUE = readString(dis);
					
					this.INTEGERVALUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTNUMBER,dos);
					
					// String
				
						writeString(this.ATTRIBUTETYPENAME,dos);
					
					// String
				
						writeString(this.ATTRIBUTENAME,dos);
					
					// String
				
						writeString(this.TEXTVALUE,dos);
					
					// String
				
						writeString(this.INTEGERVALUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTNUMBER="+PRODUCTNUMBER);
		sb.append(",ATTRIBUTETYPENAME="+ATTRIBUTETYPENAME);
		sb.append(",ATTRIBUTENAME="+ATTRIBUTENAME);
		sb.append(",TEXTVALUE="+TEXTVALUE);
		sb.append(",INTEGERVALUE="+INTEGERVALUE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_fullStruct implements routines.system.IPersistableRow<copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_fullStruct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				
			    public String EAN;

				public String getEAN () {
					return this.EAN;
				}
				
			    public String LABELD365;

				public String getLABELD365 () {
					return this.LABELD365;
				}
				
			    public String PRODUCT_CHANNEL;

				public String getPRODUCT_CHANNEL () {
					return this.PRODUCT_CHANNEL;
				}
				
			    public String SUSTAINABILITY;

				public String getSUSTAINABILITY () {
					return this.SUSTAINABILITY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
					this.EAN = readString(dis);
					
					this.LABELD365 = readString(dis);
					
					this.PRODUCT_CHANNEL = readString(dis);
					
					this.SUSTAINABILITY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
					// String
				
						writeString(this.EAN,dos);
					
					// String
				
						writeString(this.LABELD365,dos);
					
					// String
				
						writeString(this.PRODUCT_CHANNEL,dos);
					
					// String
				
						writeString(this.SUSTAINABILITY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
		sb.append(",EAN="+EAN);
		sb.append(",LABELD365="+LABELD365);
		sb.append(",PRODUCT_CHANNEL="+PRODUCT_CHANNEL);
		sb.append(",SUSTAINABILITY="+SUSTAINABILITY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_fullStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct implements routines.system.IPersistableRow<copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String PRODUCTNUMBER;

				public String getPRODUCTNUMBER () {
					return this.PRODUCTNUMBER;
				}
				
			    public String ATTRIBUTETYPENAME;

				public String getATTRIBUTETYPENAME () {
					return this.ATTRIBUTETYPENAME;
				}
				
			    public String ATTRIBUTENAME;

				public String getATTRIBUTENAME () {
					return this.ATTRIBUTENAME;
				}
				
			    public String TEXTVALUE;

				public String getTEXTVALUE () {
					return this.TEXTVALUE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.PRODUCTNUMBER = readString(dis);
					
					this.ATTRIBUTETYPENAME = readString(dis);
					
					this.ATTRIBUTENAME = readString(dis);
					
					this.TEXTVALUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTNUMBER,dos);
					
					// String
				
						writeString(this.ATTRIBUTETYPENAME,dos);
					
					// String
				
						writeString(this.ATTRIBUTENAME,dos);
					
					// String
				
						writeString(this.TEXTVALUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTNUMBER="+PRODUCTNUMBER);
		sb.append(",ATTRIBUTETYPENAME="+ATTRIBUTETYPENAME);
		sb.append(",ATTRIBUTENAME="+ATTRIBUTENAME);
		sb.append(",TEXTVALUE="+TEXTVALUE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_fullStruct implements routines.system.IPersistableRow<copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_fullStruct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				
			    public String EAN;

				public String getEAN () {
					return this.EAN;
				}
				
			    public String LABELD365;

				public String getLABELD365 () {
					return this.LABELD365;
				}
				
			    public String PRODUCT_CHANNEL;

				public String getPRODUCT_CHANNEL () {
					return this.PRODUCT_CHANNEL;
				}
				
			    public String SUSTAINABILITY;

				public String getSUSTAINABILITY () {
					return this.SUSTAINABILITY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
					this.EAN = readString(dis);
					
					this.LABELD365 = readString(dis);
					
					this.PRODUCT_CHANNEL = readString(dis);
					
					this.SUSTAINABILITY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
					// String
				
						writeString(this.EAN,dos);
					
					// String
				
						writeString(this.LABELD365,dos);
					
					// String
				
						writeString(this.PRODUCT_CHANNEL,dos);
					
					// String
				
						writeString(this.SUSTAINABILITY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
		sb.append(",EAN="+EAN);
		sb.append(",LABELD365="+LABELD365);
		sb.append(",PRODUCT_CHANNEL="+PRODUCT_CHANNEL);
		sb.append(",SUSTAINABILITY="+SUSTAINABILITY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_fullStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct implements routines.system.IPersistableRow<copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String PRODUCTNUMBER;

				public String getPRODUCTNUMBER () {
					return this.PRODUCTNUMBER;
				}
				
			    public String ATTRIBUTETYPENAME;

				public String getATTRIBUTETYPENAME () {
					return this.ATTRIBUTETYPENAME;
				}
				
			    public String ATTRIBUTENAME;

				public String getATTRIBUTENAME () {
					return this.ATTRIBUTENAME;
				}
				
			    public String TEXTVALUE;

				public String getTEXTVALUE () {
					return this.TEXTVALUE;
				}
				
			    public String INTEGERVALUE;

				public String getINTEGERVALUE () {
					return this.INTEGERVALUE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.PRODUCTNUMBER = readString(dis);
					
					this.ATTRIBUTETYPENAME = readString(dis);
					
					this.ATTRIBUTENAME = readString(dis);
					
					this.TEXTVALUE = readString(dis);
					
					this.INTEGERVALUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTNUMBER,dos);
					
					// String
				
						writeString(this.ATTRIBUTETYPENAME,dos);
					
					// String
				
						writeString(this.ATTRIBUTENAME,dos);
					
					// String
				
						writeString(this.TEXTVALUE,dos);
					
					// String
				
						writeString(this.INTEGERVALUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTNUMBER="+PRODUCTNUMBER);
		sb.append(",ATTRIBUTETYPENAME="+ATTRIBUTETYPENAME);
		sb.append(",ATTRIBUTENAME="+ATTRIBUTENAME);
		sb.append(",TEXTVALUE="+TEXTVALUE);
		sb.append(",INTEGERVALUE="+INTEGERVALUE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_fullStruct implements routines.system.IPersistableRow<copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_fullStruct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				
			    public String EAN;

				public String getEAN () {
					return this.EAN;
				}
				
			    public String LABELD365;

				public String getLABELD365 () {
					return this.LABELD365;
				}
				
			    public String PRODUCT_CHANNEL;

				public String getPRODUCT_CHANNEL () {
					return this.PRODUCT_CHANNEL;
				}
				
			    public String SUSTAINABILITY;

				public String getSUSTAINABILITY () {
					return this.SUSTAINABILITY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
					this.EAN = readString(dis);
					
					this.LABELD365 = readString(dis);
					
					this.PRODUCT_CHANNEL = readString(dis);
					
					this.SUSTAINABILITY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
					// String
				
						writeString(this.EAN,dos);
					
					// String
				
						writeString(this.LABELD365,dos);
					
					// String
				
						writeString(this.PRODUCT_CHANNEL,dos);
					
					// String
				
						writeString(this.SUSTAINABILITY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
		sb.append(",EAN="+EAN);
		sb.append(",LABELD365="+LABELD365);
		sb.append(",PRODUCT_CHANNEL="+PRODUCT_CHANNEL);
		sb.append(",SUSTAINABILITY="+SUSTAINABILITY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_fullStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct implements routines.system.IPersistableRow<copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String PRODUCTNUMBER;

				public String getPRODUCTNUMBER () {
					return this.PRODUCTNUMBER;
				}
				
			    public String ATTRIBUTETYPENAME;

				public String getATTRIBUTETYPENAME () {
					return this.ATTRIBUTETYPENAME;
				}
				
			    public String ATTRIBUTENAME;

				public String getATTRIBUTENAME () {
					return this.ATTRIBUTENAME;
				}
				
			    public String TEXTVALUE;

				public String getTEXTVALUE () {
					return this.TEXTVALUE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.PRODUCTNUMBER = readString(dis);
					
					this.ATTRIBUTETYPENAME = readString(dis);
					
					this.ATTRIBUTENAME = readString(dis);
					
					this.TEXTVALUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTNUMBER,dos);
					
					// String
				
						writeString(this.ATTRIBUTETYPENAME,dos);
					
					// String
				
						writeString(this.ATTRIBUTENAME,dos);
					
					// String
				
						writeString(this.TEXTVALUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTNUMBER="+PRODUCTNUMBER);
		sb.append(",ATTRIBUTETYPENAME="+ATTRIBUTETYPENAME);
		sb.append(",ATTRIBUTENAME="+ATTRIBUTENAME);
		sb.append(",TEXTVALUE="+TEXTVALUE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfcopyOfcopyOfcopyOfsortie_fullStruct implements routines.system.IPersistableRow<copyOfcopyOfcopyOfcopyOfcopyOfsortie_fullStruct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				
			    public String EAN;

				public String getEAN () {
					return this.EAN;
				}
				
			    public String LABELD365;

				public String getLABELD365 () {
					return this.LABELD365;
				}
				
			    public String PRODUCT_CHANNEL;

				public String getPRODUCT_CHANNEL () {
					return this.PRODUCT_CHANNEL;
				}
				
			    public String SUSTAINABILITY;

				public String getSUSTAINABILITY () {
					return this.SUSTAINABILITY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
					this.EAN = readString(dis);
					
					this.LABELD365 = readString(dis);
					
					this.PRODUCT_CHANNEL = readString(dis);
					
					this.SUSTAINABILITY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
					// String
				
						writeString(this.EAN,dos);
					
					// String
				
						writeString(this.LABELD365,dos);
					
					// String
				
						writeString(this.PRODUCT_CHANNEL,dos);
					
					// String
				
						writeString(this.SUSTAINABILITY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
		sb.append(",EAN="+EAN);
		sb.append(",LABELD365="+LABELD365);
		sb.append(",PRODUCT_CHANNEL="+PRODUCT_CHANNEL);
		sb.append(",SUSTAINABILITY="+SUSTAINABILITY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfcopyOfcopyOfcopyOfsortie_fullStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct implements routines.system.IPersistableRow<copyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String PRODUCTNUMBER;

				public String getPRODUCTNUMBER () {
					return this.PRODUCTNUMBER;
				}
				
			    public String ATTRIBUTETYPENAME;

				public String getATTRIBUTETYPENAME () {
					return this.ATTRIBUTETYPENAME;
				}
				
			    public String ATTRIBUTENAME;

				public String getATTRIBUTENAME () {
					return this.ATTRIBUTENAME;
				}
				
			    public String TEXTVALUE;

				public String getTEXTVALUE () {
					return this.TEXTVALUE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.PRODUCTNUMBER = readString(dis);
					
					this.ATTRIBUTETYPENAME = readString(dis);
					
					this.ATTRIBUTENAME = readString(dis);
					
					this.TEXTVALUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTNUMBER,dos);
					
					// String
				
						writeString(this.ATTRIBUTETYPENAME,dos);
					
					// String
				
						writeString(this.ATTRIBUTENAME,dos);
					
					// String
				
						writeString(this.TEXTVALUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTNUMBER="+PRODUCTNUMBER);
		sb.append(",ATTRIBUTETYPENAME="+ATTRIBUTETYPENAME);
		sb.append(",ATTRIBUTENAME="+ATTRIBUTENAME);
		sb.append(",TEXTVALUE="+TEXTVALUE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfcopyOfcopyOfsortie_fullStruct implements routines.system.IPersistableRow<copyOfcopyOfcopyOfcopyOfsortie_fullStruct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				
			    public String EAN;

				public String getEAN () {
					return this.EAN;
				}
				
			    public String LABELD365;

				public String getLABELD365 () {
					return this.LABELD365;
				}
				
			    public String PRODUCT_CHANNEL;

				public String getPRODUCT_CHANNEL () {
					return this.PRODUCT_CHANNEL;
				}
				
			    public String SUSTAINABILITY;

				public String getSUSTAINABILITY () {
					return this.SUSTAINABILITY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
					this.EAN = readString(dis);
					
					this.LABELD365 = readString(dis);
					
					this.PRODUCT_CHANNEL = readString(dis);
					
					this.SUSTAINABILITY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
					// String
				
						writeString(this.EAN,dos);
					
					// String
				
						writeString(this.LABELD365,dos);
					
					// String
				
						writeString(this.PRODUCT_CHANNEL,dos);
					
					// String
				
						writeString(this.SUSTAINABILITY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
		sb.append(",EAN="+EAN);
		sb.append(",LABELD365="+LABELD365);
		sb.append(",PRODUCT_CHANNEL="+PRODUCT_CHANNEL);
		sb.append(",SUSTAINABILITY="+SUSTAINABILITY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfcopyOfcopyOfsortie_fullStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfcopyOfcopyOfsortie_productStruct implements routines.system.IPersistableRow<copyOfcopyOfcopyOfcopyOfsortie_productStruct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String PRODUCTNUMBER;

				public String getPRODUCTNUMBER () {
					return this.PRODUCTNUMBER;
				}
				
			    public String ATTRIBUTETYPENAME;

				public String getATTRIBUTETYPENAME () {
					return this.ATTRIBUTETYPENAME;
				}
				
			    public String ATTRIBUTENAME;

				public String getATTRIBUTENAME () {
					return this.ATTRIBUTENAME;
				}
				
			    public String TEXTVALUE;

				public String getTEXTVALUE () {
					return this.TEXTVALUE;
				}
				
			    public String INTEGERVALUE;

				public String getINTEGERVALUE () {
					return this.INTEGERVALUE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.PRODUCTNUMBER = readString(dis);
					
					this.ATTRIBUTETYPENAME = readString(dis);
					
					this.ATTRIBUTENAME = readString(dis);
					
					this.TEXTVALUE = readString(dis);
					
					this.INTEGERVALUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTNUMBER,dos);
					
					// String
				
						writeString(this.ATTRIBUTETYPENAME,dos);
					
					// String
				
						writeString(this.ATTRIBUTENAME,dos);
					
					// String
				
						writeString(this.TEXTVALUE,dos);
					
					// String
				
						writeString(this.INTEGERVALUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTNUMBER="+PRODUCTNUMBER);
		sb.append(",ATTRIBUTETYPENAME="+ATTRIBUTETYPENAME);
		sb.append(",ATTRIBUTENAME="+ATTRIBUTENAME);
		sb.append(",TEXTVALUE="+TEXTVALUE);
		sb.append(",INTEGERVALUE="+INTEGERVALUE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfcopyOfcopyOfsortie_productStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfcopyOfsortie_fullStruct implements routines.system.IPersistableRow<copyOfcopyOfcopyOfsortie_fullStruct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				
			    public String EAN;

				public String getEAN () {
					return this.EAN;
				}
				
			    public String LABELD365;

				public String getLABELD365 () {
					return this.LABELD365;
				}
				
			    public String PRODUCT_CHANNEL;

				public String getPRODUCT_CHANNEL () {
					return this.PRODUCT_CHANNEL;
				}
				
			    public String SUSTAINABILITY;

				public String getSUSTAINABILITY () {
					return this.SUSTAINABILITY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
					this.EAN = readString(dis);
					
					this.LABELD365 = readString(dis);
					
					this.PRODUCT_CHANNEL = readString(dis);
					
					this.SUSTAINABILITY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
					// String
				
						writeString(this.EAN,dos);
					
					// String
				
						writeString(this.LABELD365,dos);
					
					// String
				
						writeString(this.PRODUCT_CHANNEL,dos);
					
					// String
				
						writeString(this.SUSTAINABILITY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
		sb.append(",EAN="+EAN);
		sb.append(",LABELD365="+LABELD365);
		sb.append(",PRODUCT_CHANNEL="+PRODUCT_CHANNEL);
		sb.append(",SUSTAINABILITY="+SUSTAINABILITY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfcopyOfsortie_fullStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfcopyOfsortie_productStruct implements routines.system.IPersistableRow<copyOfcopyOfcopyOfsortie_productStruct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String PRODUCTNUMBER;

				public String getPRODUCTNUMBER () {
					return this.PRODUCTNUMBER;
				}
				
			    public String ATTRIBUTETYPENAME;

				public String getATTRIBUTETYPENAME () {
					return this.ATTRIBUTETYPENAME;
				}
				
			    public String ATTRIBUTENAME;

				public String getATTRIBUTENAME () {
					return this.ATTRIBUTENAME;
				}
				
			    public String TEXTVALUE;

				public String getTEXTVALUE () {
					return this.TEXTVALUE;
				}
				
			    public String INTEGERVALUE;

				public String getINTEGERVALUE () {
					return this.INTEGERVALUE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.PRODUCTNUMBER = readString(dis);
					
					this.ATTRIBUTETYPENAME = readString(dis);
					
					this.ATTRIBUTENAME = readString(dis);
					
					this.TEXTVALUE = readString(dis);
					
					this.INTEGERVALUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTNUMBER,dos);
					
					// String
				
						writeString(this.ATTRIBUTETYPENAME,dos);
					
					// String
				
						writeString(this.ATTRIBUTENAME,dos);
					
					// String
				
						writeString(this.TEXTVALUE,dos);
					
					// String
				
						writeString(this.INTEGERVALUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTNUMBER="+PRODUCTNUMBER);
		sb.append(",ATTRIBUTETYPENAME="+ATTRIBUTETYPENAME);
		sb.append(",ATTRIBUTENAME="+ATTRIBUTENAME);
		sb.append(",TEXTVALUE="+TEXTVALUE);
		sb.append(",INTEGERVALUE="+INTEGERVALUE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfcopyOfsortie_productStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfsortie_fullStruct implements routines.system.IPersistableRow<copyOfcopyOfsortie_fullStruct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				
			    public String EAN;

				public String getEAN () {
					return this.EAN;
				}
				
			    public String LABELD365;

				public String getLABELD365 () {
					return this.LABELD365;
				}
				
			    public String PRODUCT_CHANNEL;

				public String getPRODUCT_CHANNEL () {
					return this.PRODUCT_CHANNEL;
				}
				
			    public String SUSTAINABILITY;

				public String getSUSTAINABILITY () {
					return this.SUSTAINABILITY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
					this.EAN = readString(dis);
					
					this.LABELD365 = readString(dis);
					
					this.PRODUCT_CHANNEL = readString(dis);
					
					this.SUSTAINABILITY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
					// String
				
						writeString(this.EAN,dos);
					
					// String
				
						writeString(this.LABELD365,dos);
					
					// String
				
						writeString(this.PRODUCT_CHANNEL,dos);
					
					// String
				
						writeString(this.SUSTAINABILITY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
		sb.append(",EAN="+EAN);
		sb.append(",LABELD365="+LABELD365);
		sb.append(",PRODUCT_CHANNEL="+PRODUCT_CHANNEL);
		sb.append(",SUSTAINABILITY="+SUSTAINABILITY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfsortie_fullStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfsortie_productStruct implements routines.system.IPersistableRow<copyOfcopyOfsortie_productStruct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String PRODUCTNUMBER;

				public String getPRODUCTNUMBER () {
					return this.PRODUCTNUMBER;
				}
				
			    public String ATTRIBUTETYPENAME;

				public String getATTRIBUTETYPENAME () {
					return this.ATTRIBUTETYPENAME;
				}
				
			    public String ATTRIBUTENAME;

				public String getATTRIBUTENAME () {
					return this.ATTRIBUTENAME;
				}
				
			    public String TEXTVALUE;

				public String getTEXTVALUE () {
					return this.TEXTVALUE;
				}
				
			    public String INTEGERVALUE;

				public String getINTEGERVALUE () {
					return this.INTEGERVALUE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.PRODUCTNUMBER = readString(dis);
					
					this.ATTRIBUTETYPENAME = readString(dis);
					
					this.ATTRIBUTENAME = readString(dis);
					
					this.TEXTVALUE = readString(dis);
					
					this.INTEGERVALUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTNUMBER,dos);
					
					// String
				
						writeString(this.ATTRIBUTETYPENAME,dos);
					
					// String
				
						writeString(this.ATTRIBUTENAME,dos);
					
					// String
				
						writeString(this.TEXTVALUE,dos);
					
					// String
				
						writeString(this.INTEGERVALUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTNUMBER="+PRODUCTNUMBER);
		sb.append(",ATTRIBUTETYPENAME="+ATTRIBUTETYPENAME);
		sb.append(",ATTRIBUTENAME="+ATTRIBUTENAME);
		sb.append(",TEXTVALUE="+TEXTVALUE);
		sb.append(",INTEGERVALUE="+INTEGERVALUE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfsortie_productStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfsortie_fullStruct implements routines.system.IPersistableRow<copyOfsortie_fullStruct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				
			    public String EAN;

				public String getEAN () {
					return this.EAN;
				}
				
			    public String LABELD365;

				public String getLABELD365 () {
					return this.LABELD365;
				}
				
			    public String PRODUCT_CHANNEL;

				public String getPRODUCT_CHANNEL () {
					return this.PRODUCT_CHANNEL;
				}
				
			    public String SUSTAINABILITY;

				public String getSUSTAINABILITY () {
					return this.SUSTAINABILITY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
					this.EAN = readString(dis);
					
					this.LABELD365 = readString(dis);
					
					this.PRODUCT_CHANNEL = readString(dis);
					
					this.SUSTAINABILITY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
					// String
				
						writeString(this.EAN,dos);
					
					// String
				
						writeString(this.LABELD365,dos);
					
					// String
				
						writeString(this.PRODUCT_CHANNEL,dos);
					
					// String
				
						writeString(this.SUSTAINABILITY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
		sb.append(",EAN="+EAN);
		sb.append(",LABELD365="+LABELD365);
		sb.append(",PRODUCT_CHANNEL="+PRODUCT_CHANNEL);
		sb.append(",SUSTAINABILITY="+SUSTAINABILITY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfsortie_fullStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfsortie_productStruct implements routines.system.IPersistableRow<copyOfsortie_productStruct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public String ORIGINCOUNTRYREGIONID;

				public String getORIGINCOUNTRYREGIONID () {
					return this.ORIGINCOUNTRYREGIONID;
				}
				
			    public String PRODUCTCOVERAGEGROUPID;

				public String getPRODUCTCOVERAGEGROUPID () {
					return this.PRODUCTCOVERAGEGROUPID;
				}
				
			    public String PRODUCTNUMBER;

				public String getPRODUCTNUMBER () {
					return this.PRODUCTNUMBER;
				}
				
			    public String PRODUCTSEARCHNAME;

				public String getPRODUCTSEARCHNAME () {
					return this.PRODUCTSEARCHNAME;
				}
				
			    public String PRODUCTSUBTYPE;

				public String getPRODUCTSUBTYPE () {
					return this.PRODUCTSUBTYPE;
				}
				
			    public String PRODUCTTYPE;

				public String getPRODUCTTYPE () {
					return this.PRODUCTTYPE;
				}
				
			    public String SEARCHNAME;

				public String getSEARCHNAME () {
					return this.SEARCHNAME;
				}
				
			    public String SPLWMSLOCATIONID;

				public String getSPLWMSLOCATIONID () {
					return this.SPLWMSLOCATIONID;
				}
				
			    public String ISUNITCOSTPRODUCTVARIANTSPECIFIC;

				public String getISUNITCOSTPRODUCTVARIANTSPECIFIC () {
					return this.ISUNITCOSTPRODUCTVARIANTSPECIFIC;
				}
				
			    public String GPLMEMO;

				public String getGPLMEMO () {
					return this.GPLMEMO;
				}
				
			    public String DEFAULTLEDGERDIMENSIONDISPLAYVALUE;

				public String getDEFAULTLEDGERDIMENSIONDISPLAYVALUE () {
					return this.DEFAULTLEDGERDIMENSIONDISPLAYVALUE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.ITEMNUMBER = readString(dis);
					
					this.ORIGINCOUNTRYREGIONID = readString(dis);
					
					this.PRODUCTCOVERAGEGROUPID = readString(dis);
					
					this.PRODUCTNUMBER = readString(dis);
					
					this.PRODUCTSEARCHNAME = readString(dis);
					
					this.PRODUCTSUBTYPE = readString(dis);
					
					this.PRODUCTTYPE = readString(dis);
					
					this.SEARCHNAME = readString(dis);
					
					this.SPLWMSLOCATIONID = readString(dis);
					
					this.ISUNITCOSTPRODUCTVARIANTSPECIFIC = readString(dis);
					
					this.GPLMEMO = readString(dis);
					
					this.DEFAULTLEDGERDIMENSIONDISPLAYVALUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// String
				
						writeString(this.ORIGINCOUNTRYREGIONID,dos);
					
					// String
				
						writeString(this.PRODUCTCOVERAGEGROUPID,dos);
					
					// String
				
						writeString(this.PRODUCTNUMBER,dos);
					
					// String
				
						writeString(this.PRODUCTSEARCHNAME,dos);
					
					// String
				
						writeString(this.PRODUCTSUBTYPE,dos);
					
					// String
				
						writeString(this.PRODUCTTYPE,dos);
					
					// String
				
						writeString(this.SEARCHNAME,dos);
					
					// String
				
						writeString(this.SPLWMSLOCATIONID,dos);
					
					// String
				
						writeString(this.ISUNITCOSTPRODUCTVARIANTSPECIFIC,dos);
					
					// String
				
						writeString(this.GPLMEMO,dos);
					
					// String
				
						writeString(this.DEFAULTLEDGERDIMENSIONDISPLAYVALUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITEMNUMBER="+ITEMNUMBER);
		sb.append(",ORIGINCOUNTRYREGIONID="+ORIGINCOUNTRYREGIONID);
		sb.append(",PRODUCTCOVERAGEGROUPID="+PRODUCTCOVERAGEGROUPID);
		sb.append(",PRODUCTNUMBER="+PRODUCTNUMBER);
		sb.append(",PRODUCTSEARCHNAME="+PRODUCTSEARCHNAME);
		sb.append(",PRODUCTSUBTYPE="+PRODUCTSUBTYPE);
		sb.append(",PRODUCTTYPE="+PRODUCTTYPE);
		sb.append(",SEARCHNAME="+SEARCHNAME);
		sb.append(",SPLWMSLOCATIONID="+SPLWMSLOCATIONID);
		sb.append(",ISUNITCOSTPRODUCTVARIANTSPECIFIC="+ISUNITCOSTPRODUCTVARIANTSPECIFIC);
		sb.append(",GPLMEMO="+GPLMEMO);
		sb.append(",DEFAULTLEDGERDIMENSIONDISPLAYVALUE="+DEFAULTLEDGERDIMENSIONDISPLAYVALUE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfsortie_productStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				
			    public String EAN;

				public String getEAN () {
					return this.EAN;
				}
				
			    public String LABELD365;

				public String getLABELD365 () {
					return this.LABELD365;
				}
				
			    public String PRODUCT_CHANNEL;

				public String getPRODUCT_CHANNEL () {
					return this.PRODUCT_CHANNEL;
				}
				
			    public String SUSTAINABILITY;

				public String getSUSTAINABILITY () {
					return this.SUSTAINABILITY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
					this.EAN = readString(dis);
					
					this.LABELD365 = readString(dis);
					
					this.PRODUCT_CHANNEL = readString(dis);
					
					this.SUSTAINABILITY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
					// String
				
						writeString(this.EAN,dos);
					
					// String
				
						writeString(this.LABELD365,dos);
					
					// String
				
						writeString(this.PRODUCT_CHANNEL,dos);
					
					// String
				
						writeString(this.SUSTAINABILITY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
		sb.append(",EAN="+EAN);
		sb.append(",LABELD365="+LABELD365);
		sb.append(",PRODUCT_CHANNEL="+PRODUCT_CHANNEL);
		sb.append(",SUSTAINABILITY="+SUSTAINABILITY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_fullStruct implements routines.system.IPersistableRow<sortie_fullStruct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				
			    public String EAN;

				public String getEAN () {
					return this.EAN;
				}
				
			    public String LABELD365;

				public String getLABELD365 () {
					return this.LABELD365;
				}
				
			    public String PRODUCT_CHANNEL;

				public String getPRODUCT_CHANNEL () {
					return this.PRODUCT_CHANNEL;
				}
				
			    public String SUSTAINABILITY;

				public String getSUSTAINABILITY () {
					return this.SUSTAINABILITY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
					this.EAN = readString(dis);
					
					this.LABELD365 = readString(dis);
					
					this.PRODUCT_CHANNEL = readString(dis);
					
					this.SUSTAINABILITY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
					// String
				
						writeString(this.EAN,dos);
					
					// String
				
						writeString(this.LABELD365,dos);
					
					// String
				
						writeString(this.PRODUCT_CHANNEL,dos);
					
					// String
				
						writeString(this.SUSTAINABILITY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
		sb.append(",EAN="+EAN);
		sb.append(",LABELD365="+LABELD365);
		sb.append(",PRODUCT_CHANNEL="+PRODUCT_CHANNEL);
		sb.append(",SUSTAINABILITY="+SUSTAINABILITY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_fullStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_productStruct implements routines.system.IPersistableRow<sortie_productStruct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String PRODUCTSEARCHNAME;

				public String getPRODUCTSEARCHNAME () {
					return this.PRODUCTSEARCHNAME;
				}
				
			    public String PRODUCTDESCRIPTION;

				public String getPRODUCTDESCRIPTION () {
					return this.PRODUCTDESCRIPTION;
				}
				
			    public String PRODUCTNAME;

				public String getPRODUCTNAME () {
					return this.PRODUCTNAME;
				}
				
			    public String PRODUCTNUMBER;

				public String getPRODUCTNUMBER () {
					return this.PRODUCTNUMBER;
				}
				
			    public String RETAILPRODUCTCATEGORYNAME;

				public String getRETAILPRODUCTCATEGORYNAME () {
					return this.RETAILPRODUCTCATEGORYNAME;
				}
				
			    public String PRODUCTSUBTYPE;

				public String getPRODUCTSUBTYPE () {
					return this.PRODUCTSUBTYPE;
				}
				
			    public String PRODUCTTYPE;

				public String getPRODUCTTYPE () {
					return this.PRODUCTTYPE;
				}
				
			    public String KRFBRANDID;

				public String getKRFBRANDID () {
					return this.KRFBRANDID;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.PRODUCTSEARCHNAME = readString(dis);
					
					this.PRODUCTDESCRIPTION = readString(dis);
					
					this.PRODUCTNAME = readString(dis);
					
					this.PRODUCTNUMBER = readString(dis);
					
					this.RETAILPRODUCTCATEGORYNAME = readString(dis);
					
					this.PRODUCTSUBTYPE = readString(dis);
					
					this.PRODUCTTYPE = readString(dis);
					
					this.KRFBRANDID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTSEARCHNAME,dos);
					
					// String
				
						writeString(this.PRODUCTDESCRIPTION,dos);
					
					// String
				
						writeString(this.PRODUCTNAME,dos);
					
					// String
				
						writeString(this.PRODUCTNUMBER,dos);
					
					// String
				
						writeString(this.RETAILPRODUCTCATEGORYNAME,dos);
					
					// String
				
						writeString(this.PRODUCTSUBTYPE,dos);
					
					// String
				
						writeString(this.PRODUCTTYPE,dos);
					
					// String
				
						writeString(this.KRFBRANDID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTSEARCHNAME="+PRODUCTSEARCHNAME);
		sb.append(",PRODUCTDESCRIPTION="+PRODUCTDESCRIPTION);
		sb.append(",PRODUCTNAME="+PRODUCTNAME);
		sb.append(",PRODUCTNUMBER="+PRODUCTNUMBER);
		sb.append(",RETAILPRODUCTCATEGORYNAME="+RETAILPRODUCTCATEGORYNAME);
		sb.append(",PRODUCTSUBTYPE="+PRODUCTSUBTYPE);
		sb.append(",PRODUCTTYPE="+PRODUCTTYPE);
		sb.append(",KRFBRANDID="+KRFBRANDID);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_productStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_ExcelStruct implements routines.system.IPersistableRow<sortie_ExcelStruct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				
			    public String EAN;

				public String getEAN () {
					return this.EAN;
				}
				
			    public String LABELD365;

				public String getLABELD365 () {
					return this.LABELD365;
				}
				
			    public String PRODUCT_CHANNEL;

				public String getPRODUCT_CHANNEL () {
					return this.PRODUCT_CHANNEL;
				}
				
			    public String SUSTAINABILITY;

				public String getSUSTAINABILITY () {
					return this.SUSTAINABILITY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
					this.EAN = readString(dis);
					
					this.LABELD365 = readString(dis);
					
					this.PRODUCT_CHANNEL = readString(dis);
					
					this.SUSTAINABILITY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
					// String
				
						writeString(this.EAN,dos);
					
					// String
				
						writeString(this.LABELD365,dos);
					
					// String
				
						writeString(this.PRODUCT_CHANNEL,dos);
					
					// String
				
						writeString(this.SUSTAINABILITY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
		sb.append(",EAN="+EAN);
		sb.append(",LABELD365="+LABELD365);
		sb.append(",PRODUCT_CHANNEL="+PRODUCT_CHANNEL);
		sb.append(",SUSTAINABILITY="+SUSTAINABILITY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_ExcelStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				
			    public String EAN;

				public String getEAN () {
					return this.EAN;
				}
				
			    public String PRODUCT_CHANNEL;

				public String getPRODUCT_CHANNEL () {
					return this.PRODUCT_CHANNEL;
				}
				
			    public String SUSTAINABILITY;

				public String getSUSTAINABILITY () {
					return this.SUSTAINABILITY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
					this.EAN = readString(dis);
					
					this.PRODUCT_CHANNEL = readString(dis);
					
					this.SUSTAINABILITY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
					// String
				
						writeString(this.EAN,dos);
					
					// String
				
						writeString(this.PRODUCT_CHANNEL,dos);
					
					// String
				
						writeString(this.SUSTAINABILITY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
		sb.append(",EAN="+EAN);
		sb.append(",PRODUCT_CHANNEL="+PRODUCT_CHANNEL);
		sb.append(",SUSTAINABILITY="+SUSTAINABILITY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_Excel1Struct implements routines.system.IPersistableRow<sortie_Excel1Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				
			    public String EAN;

				public String getEAN () {
					return this.EAN;
				}
				
			    public String PRODUCT_CHANNEL;

				public String getPRODUCT_CHANNEL () {
					return this.PRODUCT_CHANNEL;
				}
				
			    public String SUSTAINABILITY;

				public String getSUSTAINABILITY () {
					return this.SUSTAINABILITY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
					this.EAN = readString(dis);
					
					this.PRODUCT_CHANNEL = readString(dis);
					
					this.SUSTAINABILITY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
					// String
				
						writeString(this.EAN,dos);
					
					// String
				
						writeString(this.PRODUCT_CHANNEL,dos);
					
					// String
				
						writeString(this.SUSTAINABILITY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
		sb.append(",EAN="+EAN);
		sb.append(",PRODUCT_CHANNEL="+PRODUCT_CHANNEL);
		sb.append(",SUSTAINABILITY="+SUSTAINABILITY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_Excel1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_CHANNEL;

				public String getPRODUCT_CHANNEL () {
					return this.PRODUCT_CHANNEL;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String EAN;

				public String getEAN () {
					return this.EAN;
				}
				
			    public String DELIVERYFLOW;

				public String getDELIVERYFLOW () {
					return this.DELIVERYFLOW;
				}
				
			    public String SUSTAINABILITY;

				public String getSUSTAINABILITY () {
					return this.SUSTAINABILITY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.LBL = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_CHANNEL = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.EAN = readString(dis);
					
					this.DELIVERYFLOW = readString(dis);
					
					this.SUSTAINABILITY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_CHANNEL,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.EAN,dos);
					
					// String
				
						writeString(this.DELIVERYFLOW,dos);
					
					// String
				
						writeString(this.SUSTAINABILITY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",LBL="+LBL);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",FASHION="+FASHION);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_CHANNEL="+PRODUCT_CHANNEL);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",EAN="+EAN);
		sb.append(",DELIVERYFLOW="+DELIVERYFLOW);
		sb.append(",SUSTAINABILITY="+SUSTAINABILITY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_5Struct implements routines.system.IPersistableRow<after_tDBInput_5Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_CHANNEL;

				public String getPRODUCT_CHANNEL () {
					return this.PRODUCT_CHANNEL;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String EAN;

				public String getEAN () {
					return this.EAN;
				}
				
			    public String DELIVERYFLOW;

				public String getDELIVERYFLOW () {
					return this.DELIVERYFLOW;
				}
				
			    public String SUSTAINABILITY;

				public String getSUSTAINABILITY () {
					return this.SUSTAINABILITY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.LBL = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_CHANNEL = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.EAN = readString(dis);
					
					this.DELIVERYFLOW = readString(dis);
					
					this.SUSTAINABILITY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_CHANNEL,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.EAN,dos);
					
					// String
				
						writeString(this.DELIVERYFLOW,dos);
					
					// String
				
						writeString(this.SUSTAINABILITY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",LBL="+LBL);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",FASHION="+FASHION);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_CHANNEL="+PRODUCT_CHANNEL);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",EAN="+EAN);
		sb.append(",DELIVERYFLOW="+DELIVERYFLOW);
		sb.append(",SUSTAINABILITY="+SUSTAINABILITY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_1Process(globalMap);
		tDBInput_2Process(globalMap);
		tDBInput_3Process(globalMap);

		row1Struct row1 = new row1Struct();
sortie_Excel1Struct sortie_Excel1 = new sortie_Excel1Struct();
row7Struct row7 = new row7Struct();
sortie_ExcelStruct sortie_Excel = new sortie_ExcelStruct();
sortie_fullStruct sortie_full = new sortie_fullStruct();
sortie_fullStruct row6 = sortie_full;
copyOfsortie_fullStruct copyOfsortie_full = new copyOfsortie_fullStruct();
copyOfcopyOfsortie_fullStruct copyOfcopyOfsortie_full = new copyOfcopyOfsortie_fullStruct();
copyOfcopyOfcopyOfsortie_fullStruct copyOfcopyOfcopyOfsortie_full = new copyOfcopyOfcopyOfsortie_fullStruct();
copyOfcopyOfcopyOfcopyOfsortie_fullStruct copyOfcopyOfcopyOfcopyOfsortie_full = new copyOfcopyOfcopyOfcopyOfsortie_fullStruct();
copyOfcopyOfcopyOfcopyOfcopyOfsortie_fullStruct copyOfcopyOfcopyOfcopyOfcopyOfsortie_full = new copyOfcopyOfcopyOfcopyOfcopyOfsortie_fullStruct();
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_fullStruct copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full = new copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_fullStruct();
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_fullStruct copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full = new copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_fullStruct();
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_fullStruct copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full = new copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_fullStruct();
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_fullStruct copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full = new copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_fullStruct();
sortie_full_Struct sortie_full_ = new sortie_full_Struct();
sortie_full_sizeStruct sortie_full_size = new sortie_full_sizeStruct();
sortie_full_fitsStruct sortie_full_fits = new sortie_full_fitsStruct();
sortie_full_product_variantStruct sortie_full_product_variant = new sortie_full_product_variantStruct();
sortie_released_product_variantStruct sortie_released_product_variant = new sortie_released_product_variantStruct();
row30Struct row30 = new row30Struct();
sortie_full_varianStruct sortie_full_varian = new sortie_full_varianStruct();
copyOfsortie_released_product_variantStruct copyOfsortie_released_product_variant = new copyOfsortie_released_product_variantStruct();
sortie_barcodeStruct sortie_barcode = new sortie_barcodeStruct();
row33Struct row33 = new row33Struct();
row37Struct row37 = new row37Struct();
sortie_full_barcode_1Struct sortie_full_barcode_1 = new sortie_full_barcode_1Struct();
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_fullStruct copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full = new copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_fullStruct();
sortie_full_barcodeStruct sortie_full_barcode = new sortie_full_barcodeStruct();
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product = new copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct();
row31Struct row31 = new row31Struct();
row48Struct row48 = new row48Struct();
copyOfsortie_colorStruct copyOfsortie_color = new copyOfsortie_colorStruct();
row17Struct row17 = new row17Struct();
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product = new copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct();
row34Struct row34 = new row34Struct();
sortie_EANStruct sortie_EAN = new sortie_EANStruct();
row39Struct row39 = new row39Struct();
row40Struct row40 = new row40Struct();
sortie_product_statusStruct sortie_product_status = new sortie_product_statusStruct();
row32Struct row32 = new row32Struct();
sortie_product_variantStruct sortie_product_variant = new sortie_product_variantStruct();
row18Struct row18 = new row18Struct();
sortie_fitsStruct sortie_fits = new sortie_fitsStruct();
row29Struct row29 = new row29Struct();
sortie_Ref_DescriptionStruct sortie_Ref_Description = new sortie_Ref_DescriptionStruct();
sortie_hashoutputStruct sortie_hashoutput = new sortie_hashoutputStruct();
sortie_sizeStruct sortie_size = new sortie_sizeStruct();
row28Struct row28 = new row28Struct();
sortie_colorStruct sortie_color = new sortie_colorStruct();
row27Struct row27 = new row27Struct();
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product = new copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct();
Main3Struct Main3 = new Main3Struct();
row25Struct row25 = new row25Struct();
sortie_attributeStruct sortie_attribute = new sortie_attributeStruct();
sortie_defaultordersettingsStruct sortie_defaultordersettings = new sortie_defaultordersettingsStruct();
row36Struct row36 = new row36Struct();
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product = new copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct();
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product = new copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct();
row20Struct row20 = new row20Struct();
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product = new copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct();
copyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct copyOfcopyOfcopyOfcopyOfcopyOfsortie_product = new copyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct();
copyOfcopyOfcopyOfcopyOfsortie_productStruct copyOfcopyOfcopyOfcopyOfsortie_product = new copyOfcopyOfcopyOfcopyOfsortie_productStruct();
row14Struct row14 = new row14Struct();
copyOfcopyOfcopyOfsortie_productStruct copyOfcopyOfcopyOfsortie_product = new copyOfcopyOfcopyOfsortie_productStruct();
row10Struct row10 = new row10Struct();
copyOfcopyOfsortie_productStruct copyOfcopyOfsortie_product = new copyOfcopyOfsortie_productStruct();
Main1Struct Main1 = new Main1Struct();
copyOfsortie_productStruct copyOfsortie_product = new copyOfsortie_productStruct();
row8Struct row8 = new row8Struct();
sortie_productStruct sortie_product = new sortie_productStruct();
sortie_productStruct row4 = sortie_product;
row5Struct row5 = new row5Struct();
























	
	/**
	 * [tHashOutput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_7", false);
		start_Hash.put("tHashOutput_7", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_7";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row30");
					}
				
		int tos_count_tHashOutput_7 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_7=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row30Struct> tHashFile_tHashOutput_7 = null;
		String hashKey_tHashOutput_7 = "tHashFile_MASTERFILE_EXTRACT_PRODUCTS_1_" + pid + "_tHashOutput_7";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_7)){
			    if(mf_tHashOutput_7.getResourceMap().get(hashKey_tHashOutput_7) == null){
	      		    mf_tHashOutput_7.getResourceMap().put(hashKey_tHashOutput_7, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row30Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_7 = mf_tHashOutput_7.getResourceMap().get(hashKey_tHashOutput_7);
			    }else{
			    	tHashFile_tHashOutput_7 = mf_tHashOutput_7.getResourceMap().get(hashKey_tHashOutput_7);
			    }
			}
        int nb_line_tHashOutput_7 = 0;
 



/**
 * [tHashOutput_7 begin ] stop
 */



	
	/**
	 * [tUniqRow_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_15", false);
		start_Hash.put("tUniqRow_15", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_15";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_released_product_variant");
					}
				
		int tos_count_tUniqRow_15 = 0;
		

	
		class KeyStruct_tUniqRow_15 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String PRODUCTMASTERNUMBER;
					String PRODUCTCOLORID;
					String PRODUCTSIZEID;
					String PRODUCTSTYLEID;
					String PRODUCTNAME;
					String PRODUCTSEARCHNAME;
					String PRODUCTVARIANTNUMBER;
					String ITEMNUMBER;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.PRODUCTMASTERNUMBER == null) ? 0 : this.PRODUCTMASTERNUMBER.hashCode());
								
								result = prime * result + ((this.PRODUCTCOLORID == null) ? 0 : this.PRODUCTCOLORID.hashCode());
								
								result = prime * result + ((this.PRODUCTSIZEID == null) ? 0 : this.PRODUCTSIZEID.hashCode());
								
								result = prime * result + ((this.PRODUCTSTYLEID == null) ? 0 : this.PRODUCTSTYLEID.hashCode());
								
								result = prime * result + ((this.PRODUCTNAME == null) ? 0 : this.PRODUCTNAME.hashCode());
								
								result = prime * result + ((this.PRODUCTSEARCHNAME == null) ? 0 : this.PRODUCTSEARCHNAME.hashCode());
								
								result = prime * result + ((this.PRODUCTVARIANTNUMBER == null) ? 0 : this.PRODUCTVARIANTNUMBER.hashCode());
								
								result = prime * result + ((this.ITEMNUMBER == null) ? 0 : this.ITEMNUMBER.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_15 other = (KeyStruct_tUniqRow_15) obj;
				
									if (this.PRODUCTMASTERNUMBER == null) {
										if (other.PRODUCTMASTERNUMBER != null) 
											return false;
								
									} else if (!this.PRODUCTMASTERNUMBER.equals(other.PRODUCTMASTERNUMBER))
								 
										return false;
								
									if (this.PRODUCTCOLORID == null) {
										if (other.PRODUCTCOLORID != null) 
											return false;
								
									} else if (!this.PRODUCTCOLORID.equals(other.PRODUCTCOLORID))
								 
										return false;
								
									if (this.PRODUCTSIZEID == null) {
										if (other.PRODUCTSIZEID != null) 
											return false;
								
									} else if (!this.PRODUCTSIZEID.equals(other.PRODUCTSIZEID))
								 
										return false;
								
									if (this.PRODUCTSTYLEID == null) {
										if (other.PRODUCTSTYLEID != null) 
											return false;
								
									} else if (!this.PRODUCTSTYLEID.equals(other.PRODUCTSTYLEID))
								 
										return false;
								
									if (this.PRODUCTNAME == null) {
										if (other.PRODUCTNAME != null) 
											return false;
								
									} else if (!this.PRODUCTNAME.equals(other.PRODUCTNAME))
								 
										return false;
								
									if (this.PRODUCTSEARCHNAME == null) {
										if (other.PRODUCTSEARCHNAME != null) 
											return false;
								
									} else if (!this.PRODUCTSEARCHNAME.equals(other.PRODUCTSEARCHNAME))
								 
										return false;
								
									if (this.PRODUCTVARIANTNUMBER == null) {
										if (other.PRODUCTVARIANTNUMBER != null) 
											return false;
								
									} else if (!this.PRODUCTVARIANTNUMBER.equals(other.PRODUCTVARIANTNUMBER))
								 
										return false;
								
									if (this.ITEMNUMBER == null) {
										if (other.ITEMNUMBER != null) 
											return false;
								
									} else if (!this.ITEMNUMBER.equals(other.ITEMNUMBER))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_15 = 0;
int nb_duplicates_tUniqRow_15 = 0;
KeyStruct_tUniqRow_15 finder_tUniqRow_15 = new KeyStruct_tUniqRow_15();
java.util.Set<KeyStruct_tUniqRow_15> keystUniqRow_15 = new java.util.HashSet<KeyStruct_tUniqRow_15>(); 

 



/**
 * [tUniqRow_15 begin ] stop
 */








	
	/**
	 * [tHashOutput_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_10", false);
		start_Hash.put("tHashOutput_10", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_10";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row37");
					}
				
		int tos_count_tHashOutput_10 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_10=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row37Struct> tHashFile_tHashOutput_10 = null;
		String hashKey_tHashOutput_10 = "tHashFile_MASTERFILE_EXTRACT_PRODUCTS_1_" + pid + "_tHashOutput_10";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_10)){
			    if(mf_tHashOutput_10.getResourceMap().get(hashKey_tHashOutput_10) == null){
	      		    mf_tHashOutput_10.getResourceMap().put(hashKey_tHashOutput_10, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row37Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_10 = mf_tHashOutput_10.getResourceMap().get(hashKey_tHashOutput_10);
			    }else{
			    	tHashFile_tHashOutput_10 = mf_tHashOutput_10.getResourceMap().get(hashKey_tHashOutput_10);
			    }
			}
        int nb_line_tHashOutput_10 = 0;
 



/**
 * [tHashOutput_10 begin ] stop
 */



	
	/**
	 * [tFilterRow_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_4", false);
		start_Hash.put("tFilterRow_4", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row33");
					}
				
		int tos_count_tFilterRow_4 = 0;
		
    int nb_line_tFilterRow_4 = 0;
    int nb_line_ok_tFilterRow_4 = 0;
    int nb_line_reject_tFilterRow_4 = 0;

    class Operator_tFilterRow_4 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_4(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_4 begin ] stop
 */



	
	/**
	 * [tUniqRow_17 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_17", false);
		start_Hash.put("tUniqRow_17", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_17";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_barcode");
					}
				
		int tos_count_tUniqRow_17 = 0;
		

	
		class KeyStruct_tUniqRow_17 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String ITEMNUMBER;
					String PRODUCTCOLORID;
					String PRODUCTSIZEID;
					String PRODUCTSTYLEID;
					String PRODUCTQUANTITYUNITSYMBOL;
					String BARCODESETUPID;
					String BARCODE;
					String PRODUCTDESCRIPTION;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.ITEMNUMBER == null) ? 0 : this.ITEMNUMBER.hashCode());
								
								result = prime * result + ((this.PRODUCTCOLORID == null) ? 0 : this.PRODUCTCOLORID.hashCode());
								
								result = prime * result + ((this.PRODUCTSIZEID == null) ? 0 : this.PRODUCTSIZEID.hashCode());
								
								result = prime * result + ((this.PRODUCTSTYLEID == null) ? 0 : this.PRODUCTSTYLEID.hashCode());
								
								result = prime * result + ((this.PRODUCTQUANTITYUNITSYMBOL == null) ? 0 : this.PRODUCTQUANTITYUNITSYMBOL.hashCode());
								
								result = prime * result + ((this.BARCODESETUPID == null) ? 0 : this.BARCODESETUPID.hashCode());
								
								result = prime * result + ((this.BARCODE == null) ? 0 : this.BARCODE.hashCode());
								
								result = prime * result + ((this.PRODUCTDESCRIPTION == null) ? 0 : this.PRODUCTDESCRIPTION.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_17 other = (KeyStruct_tUniqRow_17) obj;
				
									if (this.ITEMNUMBER == null) {
										if (other.ITEMNUMBER != null) 
											return false;
								
									} else if (!this.ITEMNUMBER.equals(other.ITEMNUMBER))
								 
										return false;
								
									if (this.PRODUCTCOLORID == null) {
										if (other.PRODUCTCOLORID != null) 
											return false;
								
									} else if (!this.PRODUCTCOLORID.equals(other.PRODUCTCOLORID))
								 
										return false;
								
									if (this.PRODUCTSIZEID == null) {
										if (other.PRODUCTSIZEID != null) 
											return false;
								
									} else if (!this.PRODUCTSIZEID.equals(other.PRODUCTSIZEID))
								 
										return false;
								
									if (this.PRODUCTSTYLEID == null) {
										if (other.PRODUCTSTYLEID != null) 
											return false;
								
									} else if (!this.PRODUCTSTYLEID.equals(other.PRODUCTSTYLEID))
								 
										return false;
								
									if (this.PRODUCTQUANTITYUNITSYMBOL == null) {
										if (other.PRODUCTQUANTITYUNITSYMBOL != null) 
											return false;
								
									} else if (!this.PRODUCTQUANTITYUNITSYMBOL.equals(other.PRODUCTQUANTITYUNITSYMBOL))
								 
										return false;
								
									if (this.BARCODESETUPID == null) {
										if (other.BARCODESETUPID != null) 
											return false;
								
									} else if (!this.BARCODESETUPID.equals(other.BARCODESETUPID))
								 
										return false;
								
									if (this.BARCODE == null) {
										if (other.BARCODE != null) 
											return false;
								
									} else if (!this.BARCODE.equals(other.BARCODE))
								 
										return false;
								
									if (this.PRODUCTDESCRIPTION == null) {
										if (other.PRODUCTDESCRIPTION != null) 
											return false;
								
									} else if (!this.PRODUCTDESCRIPTION.equals(other.PRODUCTDESCRIPTION))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_17 = 0;
int nb_duplicates_tUniqRow_17 = 0;
KeyStruct_tUniqRow_17 finder_tUniqRow_17 = new KeyStruct_tUniqRow_17();
java.util.Set<KeyStruct_tUniqRow_17> keystUniqRow_17 = new java.util.HashSet<KeyStruct_tUniqRow_17>(); 

 



/**
 * [tUniqRow_17 begin ] stop
 */









	
	/**
	 * [tHashOutput_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_12", false);
		start_Hash.put("tHashOutput_12", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_12";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row48");
					}
				
		int tos_count_tHashOutput_12 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_12=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row48Struct> tHashFile_tHashOutput_12 = null;
		String hashKey_tHashOutput_12 = "tHashFile_MASTERFILE_EXTRACT_PRODUCTS_1_" + pid + "_tHashOutput_12";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_12)){
			    if(mf_tHashOutput_12.getResourceMap().get(hashKey_tHashOutput_12) == null){
	      		    mf_tHashOutput_12.getResourceMap().put(hashKey_tHashOutput_12, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row48Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_12 = mf_tHashOutput_12.getResourceMap().get(hashKey_tHashOutput_12);
			    }else{
			    	tHashFile_tHashOutput_12 = mf_tHashOutput_12.getResourceMap().get(hashKey_tHashOutput_12);
			    }
			}
        int nb_line_tHashOutput_12 = 0;
 



/**
 * [tHashOutput_12 begin ] stop
 */



	
	/**
	 * [tFilterRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_1", false);
		start_Hash.put("tFilterRow_1", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row31");
					}
				
		int tos_count_tFilterRow_1 = 0;
		
    int nb_line_tFilterRow_1 = 0;
    int nb_line_ok_tFilterRow_1 = 0;
    int nb_line_reject_tFilterRow_1 = 0;

    class Operator_tFilterRow_1 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_1(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_1 begin ] stop
 */



	
	/**
	 * [tUniqRow_25 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_25", false);
		start_Hash.put("tUniqRow_25", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_25";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product");
					}
				
		int tos_count_tUniqRow_25 = 0;
		

	
		class KeyStruct_tUniqRow_25 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String PRODUCTNUMBER;
					String ATTRIBUTETYPENAME;
					String ATTRIBUTENAME;
					String TEXTVALUE;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.PRODUCTNUMBER == null) ? 0 : this.PRODUCTNUMBER.hashCode());
								
								result = prime * result + ((this.ATTRIBUTETYPENAME == null) ? 0 : this.ATTRIBUTETYPENAME.hashCode());
								
								result = prime * result + ((this.ATTRIBUTENAME == null) ? 0 : this.ATTRIBUTENAME.hashCode());
								
								result = prime * result + ((this.TEXTVALUE == null) ? 0 : this.TEXTVALUE.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_25 other = (KeyStruct_tUniqRow_25) obj;
				
									if (this.PRODUCTNUMBER == null) {
										if (other.PRODUCTNUMBER != null) 
											return false;
								
									} else if (!this.PRODUCTNUMBER.equals(other.PRODUCTNUMBER))
								 
										return false;
								
									if (this.ATTRIBUTETYPENAME == null) {
										if (other.ATTRIBUTETYPENAME != null) 
											return false;
								
									} else if (!this.ATTRIBUTETYPENAME.equals(other.ATTRIBUTETYPENAME))
								 
										return false;
								
									if (this.ATTRIBUTENAME == null) {
										if (other.ATTRIBUTENAME != null) 
											return false;
								
									} else if (!this.ATTRIBUTENAME.equals(other.ATTRIBUTENAME))
								 
										return false;
								
									if (this.TEXTVALUE == null) {
										if (other.TEXTVALUE != null) 
											return false;
								
									} else if (!this.TEXTVALUE.equals(other.TEXTVALUE))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_25 = 0;
int nb_duplicates_tUniqRow_25 = 0;
KeyStruct_tUniqRow_25 finder_tUniqRow_25 = new KeyStruct_tUniqRow_25();
java.util.Set<KeyStruct_tUniqRow_25> keystUniqRow_25 = new java.util.HashSet<KeyStruct_tUniqRow_25>(); 

 



/**
 * [tUniqRow_25 begin ] stop
 */



	
	/**
	 * [tMap_26 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_26", false);
		start_Hash.put("tMap_26", System.currentTimeMillis());
		
	
	currentComponent="tMap_26";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_full_barcode");
					}
				
		int tos_count_tMap_26 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_26__Struct  {
}
Var__tMap_26__Struct Var__tMap_26 = new Var__tMap_26__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product_tmp = new copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct();
// ###############################

        
        



        









 



/**
 * [tMap_26 begin ] stop
 */





	
	/**
	 * [tFileOutputExcel_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_11", false);
		start_Hash.put("tFileOutputExcel_11", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_11";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row17");
					}
				
		int tos_count_tFileOutputExcel_11 = 0;
		


		int columnIndex_tFileOutputExcel_11 = 0;
		
		String fileName_tFileOutputExcel_11=context.ExtractPathHBE + "Product master color translations.xlsx";
		int nb_line_tFileOutputExcel_11 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_11 = new org.talend.ExcelTool();
		
		xlsxTool_tFileOutputExcel_11.setSheet("Product master color translation");
		xlsxTool_tFileOutputExcel_11.setAppend(false,true);
		xlsxTool_tFileOutputExcel_11.setRecalculateFormula(false);
		xlsxTool_tFileOutputExcel_11.setXY(false,0,10,false);
		
		java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_11 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap.get("concurrentHashMap");
		java.lang.Object lockObj_tFileOutputExcel_11 = chm_tFileOutputExcel_11.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_11", k -> new Object());
		synchronized (lockObj_tFileOutputExcel_11) {
			
				xlsxTool_tFileOutputExcel_11.prepareXlsxFile(fileName_tFileOutputExcel_11);
			
		}
		
		xlsxTool_tFileOutputExcel_11.setFont("");
		
		if (xlsxTool_tFileOutputExcel_11.getStartRow() == 0){
		
		xlsxTool_tFileOutputExcel_11.addRow();
		
		xlsxTool_tFileOutputExcel_11.addCellValue("PRODUCTMASTERNUMBER");
		
		xlsxTool_tFileOutputExcel_11.addCellValue("PRODUCTMASTERCOLORID");
		
		xlsxTool_tFileOutputExcel_11.addCellValue("LANGUAGEID");
		
		xlsxTool_tFileOutputExcel_11.addCellValue("TRANSLATEDCOLORDESCRIPTION");
		
		xlsxTool_tFileOutputExcel_11.addCellValue("TRANSLATEDCOLORNAME");
		
		nb_line_tFileOutputExcel_11++; 
		
	}
		

 



/**
 * [tFileOutputExcel_11 begin ] stop
 */



	
	/**
	 * [tUniqRow_20 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_20", false);
		start_Hash.put("tUniqRow_20", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_20";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfsortie_color");
					}
				
		int tos_count_tUniqRow_20 = 0;
		

	
		class KeyStruct_tUniqRow_20 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String PRODUCTMASTERNUMBER;
					String PRODUCTMASTERCOLORID;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.PRODUCTMASTERNUMBER == null) ? 0 : this.PRODUCTMASTERNUMBER.hashCode());
								
								result = prime * result + ((this.PRODUCTMASTERCOLORID == null) ? 0 : this.PRODUCTMASTERCOLORID.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_20 other = (KeyStruct_tUniqRow_20) obj;
				
									if (this.PRODUCTMASTERNUMBER == null) {
										if (other.PRODUCTMASTERNUMBER != null) 
											return false;
								
									} else if (!this.PRODUCTMASTERNUMBER.equals(other.PRODUCTMASTERNUMBER))
								 
										return false;
								
									if (this.PRODUCTMASTERCOLORID == null) {
										if (other.PRODUCTMASTERCOLORID != null) 
											return false;
								
									} else if (!this.PRODUCTMASTERCOLORID.equals(other.PRODUCTMASTERCOLORID))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_20 = 0;
int nb_duplicates_tUniqRow_20 = 0;
KeyStruct_tUniqRow_20 finder_tUniqRow_20 = new KeyStruct_tUniqRow_20();
java.util.Set<KeyStruct_tUniqRow_20> keystUniqRow_20 = new java.util.HashSet<KeyStruct_tUniqRow_20>(); 

 



/**
 * [tUniqRow_20 begin ] stop
 */



	
	/**
	 * [tMap_21 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_21", false);
		start_Hash.put("tMap_21", System.currentTimeMillis());
		
	
	currentComponent="tMap_21";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full");
					}
				
		int tos_count_tMap_21 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct> tHash_Lookup_row16 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct>) 
					globalMap.get( "tHash_Lookup_row16" ))
					;					
					
	

row16Struct row16HashKey = new row16Struct();
row16Struct row16Default = new row16Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_21__Struct  {
}
Var__tMap_21__Struct Var__tMap_21 = new Var__tMap_21__Struct();
// ###############################

// ###############################
// # Outputs initialization
sortie_full_barcodeStruct sortie_full_barcode_tmp = new sortie_full_barcodeStruct();
copyOfsortie_colorStruct copyOfsortie_color_tmp = new copyOfsortie_colorStruct();
// ###############################

        
        



        









 



/**
 * [tMap_21 begin ] stop
 */





	
	/**
	 * [tHashOutput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_9", false);
		start_Hash.put("tHashOutput_9", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_9";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row34");
					}
				
		int tos_count_tHashOutput_9 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_9=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row34Struct> tHashFile_tHashOutput_9 = null;
		String hashKey_tHashOutput_9 = "tHashFile_MASTERFILE_EXTRACT_PRODUCTS_1_" + pid + "_tHashOutput_9";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_9)){
			    if(mf_tHashOutput_9.getResourceMap().get(hashKey_tHashOutput_9) == null){
	      		    mf_tHashOutput_9.getResourceMap().put(hashKey_tHashOutput_9, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row34Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_9 = mf_tHashOutput_9.getResourceMap().get(hashKey_tHashOutput_9);
			    }else{
			    	tHashFile_tHashOutput_9 = mf_tHashOutput_9.getResourceMap().get(hashKey_tHashOutput_9);
			    }
			}
        int nb_line_tHashOutput_9 = 0;
 



/**
 * [tHashOutput_9 begin ] stop
 */



	
	/**
	 * [tUniqRow_18 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_18", false);
		start_Hash.put("tUniqRow_18", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_18";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product");
					}
				
		int tos_count_tUniqRow_18 = 0;
		

	
		class KeyStruct_tUniqRow_18 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String PRODUCTNUMBER;
					String ATTRIBUTETYPENAME;
					String ATTRIBUTENAME;
					String TEXTVALUE;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.PRODUCTNUMBER == null) ? 0 : this.PRODUCTNUMBER.hashCode());
								
								result = prime * result + ((this.ATTRIBUTETYPENAME == null) ? 0 : this.ATTRIBUTETYPENAME.hashCode());
								
								result = prime * result + ((this.ATTRIBUTENAME == null) ? 0 : this.ATTRIBUTENAME.hashCode());
								
								result = prime * result + ((this.TEXTVALUE == null) ? 0 : this.TEXTVALUE.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_18 other = (KeyStruct_tUniqRow_18) obj;
				
									if (this.PRODUCTNUMBER == null) {
										if (other.PRODUCTNUMBER != null) 
											return false;
								
									} else if (!this.PRODUCTNUMBER.equals(other.PRODUCTNUMBER))
								 
										return false;
								
									if (this.ATTRIBUTETYPENAME == null) {
										if (other.ATTRIBUTETYPENAME != null) 
											return false;
								
									} else if (!this.ATTRIBUTETYPENAME.equals(other.ATTRIBUTETYPENAME))
								 
										return false;
								
									if (this.ATTRIBUTENAME == null) {
										if (other.ATTRIBUTENAME != null) 
											return false;
								
									} else if (!this.ATTRIBUTENAME.equals(other.ATTRIBUTENAME))
								 
										return false;
								
									if (this.TEXTVALUE == null) {
										if (other.TEXTVALUE != null) 
											return false;
								
									} else if (!this.TEXTVALUE.equals(other.TEXTVALUE))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_18 = 0;
int nb_duplicates_tUniqRow_18 = 0;
KeyStruct_tUniqRow_18 finder_tUniqRow_18 = new KeyStruct_tUniqRow_18();
java.util.Set<KeyStruct_tUniqRow_18> keystUniqRow_18 = new java.util.HashSet<KeyStruct_tUniqRow_18>(); 

 



/**
 * [tUniqRow_18 begin ] stop
 */



	
	/**
	 * [tMap_20 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_20", false);
		start_Hash.put("tMap_20", System.currentTimeMillis());
		
	
	currentComponent="tMap_20";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_full_barcode_1");
					}
				
		int tos_count_tMap_20 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_20__Struct  {
}
Var__tMap_20__Struct Var__tMap_20 = new Var__tMap_20__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_fullStruct copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp = new copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_fullStruct();
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product_tmp = new copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct();
// ###############################

        
        



        









 



/**
 * [tMap_20 begin ] stop
 */






	
	/**
	 * [tHashOutput_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_11", false);
		start_Hash.put("tHashOutput_11", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_11";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row40");
					}
				
		int tos_count_tHashOutput_11 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_11=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row40Struct> tHashFile_tHashOutput_11 = null;
		String hashKey_tHashOutput_11 = "tHashFile_MASTERFILE_EXTRACT_PRODUCTS_1_" + pid + "_tHashOutput_11";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_11)){
			    if(mf_tHashOutput_11.getResourceMap().get(hashKey_tHashOutput_11) == null){
	      		    mf_tHashOutput_11.getResourceMap().put(hashKey_tHashOutput_11, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row40Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_11 = mf_tHashOutput_11.getResourceMap().get(hashKey_tHashOutput_11);
			    }else{
			    	tHashFile_tHashOutput_11 = mf_tHashOutput_11.getResourceMap().get(hashKey_tHashOutput_11);
			    }
			}
        int nb_line_tHashOutput_11 = 0;
 



/**
 * [tHashOutput_11 begin ] stop
 */



	
	/**
	 * [tFilterRow_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_5", false);
		start_Hash.put("tFilterRow_5", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row39");
					}
				
		int tos_count_tFilterRow_5 = 0;
		
    int nb_line_tFilterRow_5 = 0;
    int nb_line_ok_tFilterRow_5 = 0;
    int nb_line_reject_tFilterRow_5 = 0;

    class Operator_tFilterRow_5 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_5(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_5 begin ] stop
 */



	
	/**
	 * [tUniqRow_23 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_23", false);
		start_Hash.put("tUniqRow_23", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_23";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_EAN");
					}
				
		int tos_count_tUniqRow_23 = 0;
		

	
		class KeyStruct_tUniqRow_23 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String ITEMNUMBER;
					String PRODUCTCOLORID;
					String PRODUCTSIZEID;
					String PRODUCTSTYLEID;
					String PRODUCTQUANTITYUNITSYMBOL;
					String BARCODESETUPID;
					String BARCODE;
					String PRODUCTDESCRIPTION;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.ITEMNUMBER == null) ? 0 : this.ITEMNUMBER.hashCode());
								
								result = prime * result + ((this.PRODUCTCOLORID == null) ? 0 : this.PRODUCTCOLORID.hashCode());
								
								result = prime * result + ((this.PRODUCTSIZEID == null) ? 0 : this.PRODUCTSIZEID.hashCode());
								
								result = prime * result + ((this.PRODUCTSTYLEID == null) ? 0 : this.PRODUCTSTYLEID.hashCode());
								
								result = prime * result + ((this.PRODUCTQUANTITYUNITSYMBOL == null) ? 0 : this.PRODUCTQUANTITYUNITSYMBOL.hashCode());
								
								result = prime * result + ((this.BARCODESETUPID == null) ? 0 : this.BARCODESETUPID.hashCode());
								
								result = prime * result + ((this.BARCODE == null) ? 0 : this.BARCODE.hashCode());
								
								result = prime * result + ((this.PRODUCTDESCRIPTION == null) ? 0 : this.PRODUCTDESCRIPTION.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_23 other = (KeyStruct_tUniqRow_23) obj;
				
									if (this.ITEMNUMBER == null) {
										if (other.ITEMNUMBER != null) 
											return false;
								
									} else if (!this.ITEMNUMBER.equals(other.ITEMNUMBER))
								 
										return false;
								
									if (this.PRODUCTCOLORID == null) {
										if (other.PRODUCTCOLORID != null) 
											return false;
								
									} else if (!this.PRODUCTCOLORID.equals(other.PRODUCTCOLORID))
								 
										return false;
								
									if (this.PRODUCTSIZEID == null) {
										if (other.PRODUCTSIZEID != null) 
											return false;
								
									} else if (!this.PRODUCTSIZEID.equals(other.PRODUCTSIZEID))
								 
										return false;
								
									if (this.PRODUCTSTYLEID == null) {
										if (other.PRODUCTSTYLEID != null) 
											return false;
								
									} else if (!this.PRODUCTSTYLEID.equals(other.PRODUCTSTYLEID))
								 
										return false;
								
									if (this.PRODUCTQUANTITYUNITSYMBOL == null) {
										if (other.PRODUCTQUANTITYUNITSYMBOL != null) 
											return false;
								
									} else if (!this.PRODUCTQUANTITYUNITSYMBOL.equals(other.PRODUCTQUANTITYUNITSYMBOL))
								 
										return false;
								
									if (this.BARCODESETUPID == null) {
										if (other.BARCODESETUPID != null) 
											return false;
								
									} else if (!this.BARCODESETUPID.equals(other.BARCODESETUPID))
								 
										return false;
								
									if (this.BARCODE == null) {
										if (other.BARCODE != null) 
											return false;
								
									} else if (!this.BARCODE.equals(other.BARCODE))
								 
										return false;
								
									if (this.PRODUCTDESCRIPTION == null) {
										if (other.PRODUCTDESCRIPTION != null) 
											return false;
								
									} else if (!this.PRODUCTDESCRIPTION.equals(other.PRODUCTDESCRIPTION))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_23 = 0;
int nb_duplicates_tUniqRow_23 = 0;
KeyStruct_tUniqRow_23 finder_tUniqRow_23 = new KeyStruct_tUniqRow_23();
java.util.Set<KeyStruct_tUniqRow_23> keystUniqRow_23 = new java.util.HashSet<KeyStruct_tUniqRow_23>(); 

 



/**
 * [tUniqRow_23 begin ] stop
 */



	
	/**
	 * [tMap_19 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_19", false);
		start_Hash.put("tMap_19", System.currentTimeMillis());
		
	
	currentComponent="tMap_19";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfsortie_released_product_variant");
					}
				
		int tos_count_tMap_19 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_19__Struct  {
}
Var__tMap_19__Struct Var__tMap_19 = new Var__tMap_19__Struct();
// ###############################

// ###############################
// # Outputs initialization
sortie_barcodeStruct sortie_barcode_tmp = new sortie_barcodeStruct();
sortie_full_barcode_1Struct sortie_full_barcode_1_tmp = new sortie_full_barcode_1Struct();
sortie_EANStruct sortie_EAN_tmp = new sortie_EANStruct();
// ###############################

        
        



        









 



/**
 * [tMap_19 begin ] stop
 */





	
	/**
	 * [tFileOutputExcel_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_9", false);
		start_Hash.put("tFileOutputExcel_9", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_9";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row32");
					}
				
		int tos_count_tFileOutputExcel_9 = 0;
		


		int columnIndex_tFileOutputExcel_9 = 0;
		
		String fileName_tFileOutputExcel_9=context.ExtractPathOTHER+ "K3 Fashion - Product status.xlsx";
		int nb_line_tFileOutputExcel_9 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_9 = new org.talend.ExcelTool();
		
		xlsxTool_tFileOutputExcel_9.setSheet("K3 Fashion - Product status");
		xlsxTool_tFileOutputExcel_9.setAppend(false,true);
		xlsxTool_tFileOutputExcel_9.setRecalculateFormula(false);
		xlsxTool_tFileOutputExcel_9.setXY(false,0,10,false);
		
		java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_9 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap.get("concurrentHashMap");
		java.lang.Object lockObj_tFileOutputExcel_9 = chm_tFileOutputExcel_9.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_9", k -> new Object());
		synchronized (lockObj_tFileOutputExcel_9) {
			
				xlsxTool_tFileOutputExcel_9.prepareXlsxFile(fileName_tFileOutputExcel_9);
			
		}
		
		xlsxTool_tFileOutputExcel_9.setFont("");
		
		if (xlsxTool_tFileOutputExcel_9.getStartRow() == 0){
		
		xlsxTool_tFileOutputExcel_9.addRow();
		
		xlsxTool_tFileOutputExcel_9.addCellValue("CHANNELCODE");
		
		xlsxTool_tFileOutputExcel_9.addCellValue("ITEMID");
		
		xlsxTool_tFileOutputExcel_9.addCellValue("INVENTSIZEID");
		
		xlsxTool_tFileOutputExcel_9.addCellValue("INVENTSTYLEID");
		
		xlsxTool_tFileOutputExcel_9.addCellValue("INVENTCOLORID");
		
		xlsxTool_tFileOutputExcel_9.addCellValue("PRODUCTSTATUSID");
		
		xlsxTool_tFileOutputExcel_9.addCellValue("SEASONCODE");
		
		xlsxTool_tFileOutputExcel_9.addCellValue("SPLSPCB");
		
		xlsxTool_tFileOutputExcel_9.addCellValue("SPLSUSTAINABILITY");
		
		nb_line_tFileOutputExcel_9++; 
		
	}
		

 



/**
 * [tFileOutputExcel_9 begin ] stop
 */



	
	/**
	 * [tUniqRow_16 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_16", false);
		start_Hash.put("tUniqRow_16", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_16";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_product_status");
					}
				
		int tos_count_tUniqRow_16 = 0;
		

	
		class KeyStruct_tUniqRow_16 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String ITEMID;
					String INVENTSIZEID;
					String INVENTSTYLEID;
					String INVENTCOLORID;
					String PRODUCTSTATUSID;
					String SEASONCODE;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.ITEMID == null) ? 0 : this.ITEMID.hashCode());
								
								result = prime * result + ((this.INVENTSIZEID == null) ? 0 : this.INVENTSIZEID.hashCode());
								
								result = prime * result + ((this.INVENTSTYLEID == null) ? 0 : this.INVENTSTYLEID.hashCode());
								
								result = prime * result + ((this.INVENTCOLORID == null) ? 0 : this.INVENTCOLORID.hashCode());
								
								result = prime * result + ((this.PRODUCTSTATUSID == null) ? 0 : this.PRODUCTSTATUSID.hashCode());
								
								result = prime * result + ((this.SEASONCODE == null) ? 0 : this.SEASONCODE.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_16 other = (KeyStruct_tUniqRow_16) obj;
				
									if (this.ITEMID == null) {
										if (other.ITEMID != null) 
											return false;
								
									} else if (!this.ITEMID.equals(other.ITEMID))
								 
										return false;
								
									if (this.INVENTSIZEID == null) {
										if (other.INVENTSIZEID != null) 
											return false;
								
									} else if (!this.INVENTSIZEID.equals(other.INVENTSIZEID))
								 
										return false;
								
									if (this.INVENTSTYLEID == null) {
										if (other.INVENTSTYLEID != null) 
											return false;
								
									} else if (!this.INVENTSTYLEID.equals(other.INVENTSTYLEID))
								 
										return false;
								
									if (this.INVENTCOLORID == null) {
										if (other.INVENTCOLORID != null) 
											return false;
								
									} else if (!this.INVENTCOLORID.equals(other.INVENTCOLORID))
								 
										return false;
								
									if (this.PRODUCTSTATUSID == null) {
										if (other.PRODUCTSTATUSID != null) 
											return false;
								
									} else if (!this.PRODUCTSTATUSID.equals(other.PRODUCTSTATUSID))
								 
										return false;
								
									if (this.SEASONCODE == null) {
										if (other.SEASONCODE != null) 
											return false;
								
									} else if (!this.SEASONCODE.equals(other.SEASONCODE))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_16 = 0;
int nb_duplicates_tUniqRow_16 = 0;
KeyStruct_tUniqRow_16 finder_tUniqRow_16 = new KeyStruct_tUniqRow_16();
java.util.Set<KeyStruct_tUniqRow_16> keystUniqRow_16 = new java.util.HashSet<KeyStruct_tUniqRow_16>(); 

 



/**
 * [tUniqRow_16 begin ] stop
 */



	
	/**
	 * [tMap_18 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_18", false);
		start_Hash.put("tMap_18", System.currentTimeMillis());
		
	
	currentComponent="tMap_18";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_full_varian");
					}
				
		int tos_count_tMap_18 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row49Struct> tHash_Lookup_row49 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row49Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row49Struct>) 
					globalMap.get( "tHash_Lookup_row49" ))
					;					
					
	

row49Struct row49HashKey = new row49Struct();
row49Struct row49Default = new row49Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_18__Struct  {
}
Var__tMap_18__Struct Var__tMap_18 = new Var__tMap_18__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfsortie_released_product_variantStruct copyOfsortie_released_product_variant_tmp = new copyOfsortie_released_product_variantStruct();
sortie_product_statusStruct sortie_product_status_tmp = new sortie_product_statusStruct();
// ###############################

        
        



        









 



/**
 * [tMap_18 begin ] stop
 */



	
	/**
	 * [tMap_17 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_17", false);
		start_Hash.put("tMap_17", System.currentTimeMillis());
		
	
	currentComponent="tMap_17";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_full_product_variant");
					}
				
		int tos_count_tMap_17 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_17__Struct  {
}
Var__tMap_17__Struct Var__tMap_17 = new Var__tMap_17__Struct();
// ###############################

// ###############################
// # Outputs initialization
sortie_released_product_variantStruct sortie_released_product_variant_tmp = new sortie_released_product_variantStruct();
sortie_full_varianStruct sortie_full_varian_tmp = new sortie_full_varianStruct();
// ###############################

        
        



        









 



/**
 * [tMap_17 begin ] stop
 */





	
	/**
	 * [tHashOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_4", false);
		start_Hash.put("tHashOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row18");
					}
				
		int tos_count_tHashOutput_4 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_4=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row18Struct> tHashFile_tHashOutput_4 = null;
		String hashKey_tHashOutput_4 = "tHashFile_MASTERFILE_EXTRACT_PRODUCTS_1_" + pid + "_tHashOutput_4";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_4)){
			    if(mf_tHashOutput_4.getResourceMap().get(hashKey_tHashOutput_4) == null){
	      		    mf_tHashOutput_4.getResourceMap().put(hashKey_tHashOutput_4, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row18Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_4 = mf_tHashOutput_4.getResourceMap().get(hashKey_tHashOutput_4);
			    }else{
			    	tHashFile_tHashOutput_4 = mf_tHashOutput_4.getResourceMap().get(hashKey_tHashOutput_4);
			    }
			}
        int nb_line_tHashOutput_4 = 0;
 



/**
 * [tHashOutput_4 begin ] stop
 */



	
	/**
	 * [tUniqRow_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_14", false);
		start_Hash.put("tUniqRow_14", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_14";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_product_variant");
					}
				
		int tos_count_tUniqRow_14 = 0;
		

	
		class KeyStruct_tUniqRow_14 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String PRODUCTMASTERNUMBER;
					String PRODUCTCOLORID;
					String PRODUCTSIZEID;
					String PRODUCTSTYLEID;
					String PRODUCTNAME;
					String PRODUCTSEARCHNAME;
					String PRODUCTVARIANTNUMBER;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.PRODUCTMASTERNUMBER == null) ? 0 : this.PRODUCTMASTERNUMBER.hashCode());
								
								result = prime * result + ((this.PRODUCTCOLORID == null) ? 0 : this.PRODUCTCOLORID.hashCode());
								
								result = prime * result + ((this.PRODUCTSIZEID == null) ? 0 : this.PRODUCTSIZEID.hashCode());
								
								result = prime * result + ((this.PRODUCTSTYLEID == null) ? 0 : this.PRODUCTSTYLEID.hashCode());
								
								result = prime * result + ((this.PRODUCTNAME == null) ? 0 : this.PRODUCTNAME.hashCode());
								
								result = prime * result + ((this.PRODUCTSEARCHNAME == null) ? 0 : this.PRODUCTSEARCHNAME.hashCode());
								
								result = prime * result + ((this.PRODUCTVARIANTNUMBER == null) ? 0 : this.PRODUCTVARIANTNUMBER.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_14 other = (KeyStruct_tUniqRow_14) obj;
				
									if (this.PRODUCTMASTERNUMBER == null) {
										if (other.PRODUCTMASTERNUMBER != null) 
											return false;
								
									} else if (!this.PRODUCTMASTERNUMBER.equals(other.PRODUCTMASTERNUMBER))
								 
										return false;
								
									if (this.PRODUCTCOLORID == null) {
										if (other.PRODUCTCOLORID != null) 
											return false;
								
									} else if (!this.PRODUCTCOLORID.equals(other.PRODUCTCOLORID))
								 
										return false;
								
									if (this.PRODUCTSIZEID == null) {
										if (other.PRODUCTSIZEID != null) 
											return false;
								
									} else if (!this.PRODUCTSIZEID.equals(other.PRODUCTSIZEID))
								 
										return false;
								
									if (this.PRODUCTSTYLEID == null) {
										if (other.PRODUCTSTYLEID != null) 
											return false;
								
									} else if (!this.PRODUCTSTYLEID.equals(other.PRODUCTSTYLEID))
								 
										return false;
								
									if (this.PRODUCTNAME == null) {
										if (other.PRODUCTNAME != null) 
											return false;
								
									} else if (!this.PRODUCTNAME.equals(other.PRODUCTNAME))
								 
										return false;
								
									if (this.PRODUCTSEARCHNAME == null) {
										if (other.PRODUCTSEARCHNAME != null) 
											return false;
								
									} else if (!this.PRODUCTSEARCHNAME.equals(other.PRODUCTSEARCHNAME))
								 
										return false;
								
									if (this.PRODUCTVARIANTNUMBER == null) {
										if (other.PRODUCTVARIANTNUMBER != null) 
											return false;
								
									} else if (!this.PRODUCTVARIANTNUMBER.equals(other.PRODUCTVARIANTNUMBER))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_14 = 0;
int nb_duplicates_tUniqRow_14 = 0;
KeyStruct_tUniqRow_14 finder_tUniqRow_14 = new KeyStruct_tUniqRow_14();
java.util.Set<KeyStruct_tUniqRow_14> keystUniqRow_14 = new java.util.HashSet<KeyStruct_tUniqRow_14>(); 

 



/**
 * [tUniqRow_14 begin ] stop
 */



	
	/**
	 * [tMap_16 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_16", false);
		start_Hash.put("tMap_16", System.currentTimeMillis());
		
	
	currentComponent="tMap_16";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_full_fits");
					}
				
		int tos_count_tMap_16 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_16__Struct  {
}
Var__tMap_16__Struct Var__tMap_16 = new Var__tMap_16__Struct();
// ###############################

// ###############################
// # Outputs initialization
sortie_full_product_variantStruct sortie_full_product_variant_tmp = new sortie_full_product_variantStruct();
sortie_product_variantStruct sortie_product_variant_tmp = new sortie_product_variantStruct();
// ###############################

        
        



        









 



/**
 * [tMap_16 begin ] stop
 */





	
	/**
	 * [tFileOutputExcel_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_6", false);
		start_Hash.put("tFileOutputExcel_6", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_6";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row29");
					}
				
		int tos_count_tFileOutputExcel_6 = 0;
		


		int columnIndex_tFileOutputExcel_6 = 0;
		
		String fileName_tFileOutputExcel_6=context.ExtractPathHBE + "Product master fits.xlsx";
		int nb_line_tFileOutputExcel_6 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_6 = new org.talend.ExcelTool();
		
		xlsxTool_tFileOutputExcel_6.setSheet("Product master fits");
		xlsxTool_tFileOutputExcel_6.setAppend(false,true);
		xlsxTool_tFileOutputExcel_6.setRecalculateFormula(false);
		xlsxTool_tFileOutputExcel_6.setXY(false,0,10,false);
		
		java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_6 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap.get("concurrentHashMap");
		java.lang.Object lockObj_tFileOutputExcel_6 = chm_tFileOutputExcel_6.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_6", k -> new Object());
		synchronized (lockObj_tFileOutputExcel_6) {
			
				xlsxTool_tFileOutputExcel_6.prepareXlsxFile(fileName_tFileOutputExcel_6);
			
		}
		
		xlsxTool_tFileOutputExcel_6.setFont("");
		
		if (xlsxTool_tFileOutputExcel_6.getStartRow() == 0){
		
		xlsxTool_tFileOutputExcel_6.addRow();
		
		xlsxTool_tFileOutputExcel_6.addCellValue("PRODUCTMASTERNUMBER");
		
		xlsxTool_tFileOutputExcel_6.addCellValue("PRODUCTSTYLEID");
		
		nb_line_tFileOutputExcel_6++; 
		
	}
		

 



/**
 * [tFileOutputExcel_6 begin ] stop
 */



	
	/**
	 * [tUniqRow_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_13", false);
		start_Hash.put("tUniqRow_13", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_13";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_fits");
					}
				
		int tos_count_tUniqRow_13 = 0;
		

	
		class KeyStruct_tUniqRow_13 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String PRODUCTMASTERNUMBER;
					String PRODUCTSTYLEID;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.PRODUCTMASTERNUMBER == null) ? 0 : this.PRODUCTMASTERNUMBER.hashCode());
								
								result = prime * result + ((this.PRODUCTSTYLEID == null) ? 0 : this.PRODUCTSTYLEID.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_13 other = (KeyStruct_tUniqRow_13) obj;
				
									if (this.PRODUCTMASTERNUMBER == null) {
										if (other.PRODUCTMASTERNUMBER != null) 
											return false;
								
									} else if (!this.PRODUCTMASTERNUMBER.equals(other.PRODUCTMASTERNUMBER))
								 
										return false;
								
									if (this.PRODUCTSTYLEID == null) {
										if (other.PRODUCTSTYLEID != null) 
											return false;
								
									} else if (!this.PRODUCTSTYLEID.equals(other.PRODUCTSTYLEID))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_13 = 0;
int nb_duplicates_tUniqRow_13 = 0;
KeyStruct_tUniqRow_13 finder_tUniqRow_13 = new KeyStruct_tUniqRow_13();
java.util.Set<KeyStruct_tUniqRow_13> keystUniqRow_13 = new java.util.HashSet<KeyStruct_tUniqRow_13>(); 

 



/**
 * [tUniqRow_13 begin ] stop
 */




	
	/**
	 * [tHashOutput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_5", false);
		start_Hash.put("tHashOutput_5", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_Ref_Description");
					}
				
		int tos_count_tHashOutput_5 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_5=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<sortie_Ref_DescriptionStruct> tHashFile_tHashOutput_5 = null;
		String hashKey_tHashOutput_5 = "tHashFile_MASTERFILE_EXTRACT_PRODUCTS_1_" + pid + "_tHashOutput_5";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_5)){
			    if(mf_tHashOutput_5.getResourceMap().get(hashKey_tHashOutput_5) == null){
	      		    mf_tHashOutput_5.getResourceMap().put(hashKey_tHashOutput_5, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<sortie_Ref_DescriptionStruct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_5 = mf_tHashOutput_5.getResourceMap().get(hashKey_tHashOutput_5);
			    }else{
			    	tHashFile_tHashOutput_5 = mf_tHashOutput_5.getResourceMap().get(hashKey_tHashOutput_5);
			    }
			}
        int nb_line_tHashOutput_5 = 0;
 



/**
 * [tHashOutput_5 begin ] stop
 */




	
	/**
	 * [tHashOutput_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_13", false);
		start_Hash.put("tHashOutput_13", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_13";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_hashoutput");
					}
				
		int tos_count_tHashOutput_13 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_13=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<sortie_hashoutputStruct> tHashFile_tHashOutput_13 = null;
		String hashKey_tHashOutput_13 = "tHashFile_MASTERFILE_EXTRACT_PRODUCTS_1_" + pid + "_tHashOutput_13";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_13)){
			    if(mf_tHashOutput_13.getResourceMap().get(hashKey_tHashOutput_13) == null){
	      		    mf_tHashOutput_13.getResourceMap().put(hashKey_tHashOutput_13, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<sortie_hashoutputStruct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_13 = mf_tHashOutput_13.getResourceMap().get(hashKey_tHashOutput_13);
			    }else{
			    	tHashFile_tHashOutput_13 = mf_tHashOutput_13.getResourceMap().get(hashKey_tHashOutput_13);
			    }
			}
        int nb_line_tHashOutput_13 = 0;
 



/**
 * [tHashOutput_13 begin ] stop
 */



	
	/**
	 * [tMap_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_15", false);
		start_Hash.put("tMap_15", System.currentTimeMillis());
		
	
	currentComponent="tMap_15";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_full_size");
					}
				
		int tos_count_tMap_15 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_15__Struct  {
}
Var__tMap_15__Struct Var__tMap_15 = new Var__tMap_15__Struct();
// ###############################

// ###############################
// # Outputs initialization
sortie_full_fitsStruct sortie_full_fits_tmp = new sortie_full_fitsStruct();
sortie_fitsStruct sortie_fits_tmp = new sortie_fitsStruct();
sortie_Ref_DescriptionStruct sortie_Ref_Description_tmp = new sortie_Ref_DescriptionStruct();
sortie_hashoutputStruct sortie_hashoutput_tmp = new sortie_hashoutputStruct();
// ###############################

        
        



        









 



/**
 * [tMap_15 begin ] stop
 */





	
	/**
	 * [tFileOutputExcel_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_5", false);
		start_Hash.put("tFileOutputExcel_5", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row28");
					}
				
		int tos_count_tFileOutputExcel_5 = 0;
		


		int columnIndex_tFileOutputExcel_5 = 0;
		
		String fileName_tFileOutputExcel_5=context.ExtractPathHBE + "Product master sizes.xlsx";
		int nb_line_tFileOutputExcel_5 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_5 = new org.talend.ExcelTool();
		
		xlsxTool_tFileOutputExcel_5.setSheet("Product master sizes");
		xlsxTool_tFileOutputExcel_5.setAppend(false,true);
		xlsxTool_tFileOutputExcel_5.setRecalculateFormula(false);
		xlsxTool_tFileOutputExcel_5.setXY(false,0,10,false);
		
		java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_5 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap.get("concurrentHashMap");
		java.lang.Object lockObj_tFileOutputExcel_5 = chm_tFileOutputExcel_5.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_5", k -> new Object());
		synchronized (lockObj_tFileOutputExcel_5) {
			
				xlsxTool_tFileOutputExcel_5.prepareXlsxFile(fileName_tFileOutputExcel_5);
			
		}
		
		xlsxTool_tFileOutputExcel_5.setFont("");
		
		if (xlsxTool_tFileOutputExcel_5.getStartRow() == 0){
		
		xlsxTool_tFileOutputExcel_5.addRow();
		
		xlsxTool_tFileOutputExcel_5.addCellValue("PRODUCTMASTERNUMBER");
		
		xlsxTool_tFileOutputExcel_5.addCellValue("PRODUCTSIZEID");
		
		nb_line_tFileOutputExcel_5++; 
		
	}
		

 



/**
 * [tFileOutputExcel_5 begin ] stop
 */



	
	/**
	 * [tUniqRow_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_12", false);
		start_Hash.put("tUniqRow_12", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_12";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_size");
					}
				
		int tos_count_tUniqRow_12 = 0;
		

	
		class KeyStruct_tUniqRow_12 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String PRODUCTMASTERNUMBER;
					String PRODUCTSIZEID;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.PRODUCTMASTERNUMBER == null) ? 0 : this.PRODUCTMASTERNUMBER.hashCode());
								
								result = prime * result + ((this.PRODUCTSIZEID == null) ? 0 : this.PRODUCTSIZEID.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_12 other = (KeyStruct_tUniqRow_12) obj;
				
									if (this.PRODUCTMASTERNUMBER == null) {
										if (other.PRODUCTMASTERNUMBER != null) 
											return false;
								
									} else if (!this.PRODUCTMASTERNUMBER.equals(other.PRODUCTMASTERNUMBER))
								 
										return false;
								
									if (this.PRODUCTSIZEID == null) {
										if (other.PRODUCTSIZEID != null) 
											return false;
								
									} else if (!this.PRODUCTSIZEID.equals(other.PRODUCTSIZEID))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_12 = 0;
int nb_duplicates_tUniqRow_12 = 0;
KeyStruct_tUniqRow_12 finder_tUniqRow_12 = new KeyStruct_tUniqRow_12();
java.util.Set<KeyStruct_tUniqRow_12> keystUniqRow_12 = new java.util.HashSet<KeyStruct_tUniqRow_12>(); 

 



/**
 * [tUniqRow_12 begin ] stop
 */



	
	/**
	 * [tMap_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_14", false);
		start_Hash.put("tMap_14", System.currentTimeMillis());
		
	
	currentComponent="tMap_14";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_full_");
					}
				
		int tos_count_tMap_14 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_14__Struct  {
}
Var__tMap_14__Struct Var__tMap_14 = new Var__tMap_14__Struct();
// ###############################

// ###############################
// # Outputs initialization
sortie_full_sizeStruct sortie_full_size_tmp = new sortie_full_sizeStruct();
sortie_sizeStruct sortie_size_tmp = new sortie_sizeStruct();
// ###############################

        
        



        









 



/**
 * [tMap_14 begin ] stop
 */





	
	/**
	 * [tFileOutputExcel_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_4", false);
		start_Hash.put("tFileOutputExcel_4", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row27");
					}
				
		int tos_count_tFileOutputExcel_4 = 0;
		


		int columnIndex_tFileOutputExcel_4 = 0;
		
		String fileName_tFileOutputExcel_4=context.ExtractPathHBE + "Product master colors.xlsx";
		int nb_line_tFileOutputExcel_4 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_4 = new org.talend.ExcelTool();
		
		xlsxTool_tFileOutputExcel_4.setSheet("Product master colors");
		xlsxTool_tFileOutputExcel_4.setAppend(false,true);
		xlsxTool_tFileOutputExcel_4.setRecalculateFormula(false);
		xlsxTool_tFileOutputExcel_4.setXY(false,0,10,false);
		
		java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_4 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap.get("concurrentHashMap");
		java.lang.Object lockObj_tFileOutputExcel_4 = chm_tFileOutputExcel_4.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_4", k -> new Object());
		synchronized (lockObj_tFileOutputExcel_4) {
			
				xlsxTool_tFileOutputExcel_4.prepareXlsxFile(fileName_tFileOutputExcel_4);
			
		}
		
		xlsxTool_tFileOutputExcel_4.setFont("");
		
		if (xlsxTool_tFileOutputExcel_4.getStartRow() == 0){
		
		xlsxTool_tFileOutputExcel_4.addRow();
		
		xlsxTool_tFileOutputExcel_4.addCellValue("PRODUCTMASTERNUMBER");
		
		xlsxTool_tFileOutputExcel_4.addCellValue("PRODUCTCOLORID");
		
		nb_line_tFileOutputExcel_4++; 
		
	}
		

 



/**
 * [tFileOutputExcel_4 begin ] stop
 */



	
	/**
	 * [tUniqRow_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_11", false);
		start_Hash.put("tUniqRow_11", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_11";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_color");
					}
				
		int tos_count_tUniqRow_11 = 0;
		

	
		class KeyStruct_tUniqRow_11 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String PRODUCTMASTERNUMBER;
					String PRODUCTCOLORID;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.PRODUCTMASTERNUMBER == null) ? 0 : this.PRODUCTMASTERNUMBER.hashCode());
								
								result = prime * result + ((this.PRODUCTCOLORID == null) ? 0 : this.PRODUCTCOLORID.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_11 other = (KeyStruct_tUniqRow_11) obj;
				
									if (this.PRODUCTMASTERNUMBER == null) {
										if (other.PRODUCTMASTERNUMBER != null) 
											return false;
								
									} else if (!this.PRODUCTMASTERNUMBER.equals(other.PRODUCTMASTERNUMBER))
								 
										return false;
								
									if (this.PRODUCTCOLORID == null) {
										if (other.PRODUCTCOLORID != null) 
											return false;
								
									} else if (!this.PRODUCTCOLORID.equals(other.PRODUCTCOLORID))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_11 = 0;
int nb_duplicates_tUniqRow_11 = 0;
KeyStruct_tUniqRow_11 finder_tUniqRow_11 = new KeyStruct_tUniqRow_11();
java.util.Set<KeyStruct_tUniqRow_11> keystUniqRow_11 = new java.util.HashSet<KeyStruct_tUniqRow_11>(); 

 



/**
 * [tUniqRow_11 begin ] stop
 */



	
	/**
	 * [tMap_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_13", false);
		start_Hash.put("tMap_13", System.currentTimeMillis());
		
	
	currentComponent="tMap_13";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full");
					}
				
		int tos_count_tMap_13 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_13__Struct  {
}
Var__tMap_13__Struct Var__tMap_13 = new Var__tMap_13__Struct();
// ###############################

// ###############################
// # Outputs initialization
sortie_full_Struct sortie_full__tmp = new sortie_full_Struct();
sortie_colorStruct sortie_color_tmp = new sortie_colorStruct();
// ###############################

        
        



        









 



/**
 * [tMap_13 begin ] stop
 */







	
	/**
	 * [tHashOutput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_8", false);
		start_Hash.put("tHashOutput_8", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_8";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_attribute");
					}
				
		int tos_count_tHashOutput_8 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_8=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<sortie_attributeStruct> tHashFile_tHashOutput_8 = null;
		String hashKey_tHashOutput_8 = "tHashFile_MASTERFILE_EXTRACT_PRODUCTS_1_" + pid + "_tHashOutput_8";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_8)){
			    if(mf_tHashOutput_8.getResourceMap().get(hashKey_tHashOutput_8) == null){
	      		    mf_tHashOutput_8.getResourceMap().put(hashKey_tHashOutput_8, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<sortie_attributeStruct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_8 = mf_tHashOutput_8.getResourceMap().get(hashKey_tHashOutput_8);
			    }else{
			    	tHashFile_tHashOutput_8 = mf_tHashOutput_8.getResourceMap().get(hashKey_tHashOutput_8);
			    }
			}
        int nb_line_tHashOutput_8 = 0;
 



/**
 * [tHashOutput_8 begin ] stop
 */





	
	/**
	 * [tFileOutputExcel_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_13", false);
		start_Hash.put("tFileOutputExcel_13", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_13";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row36");
					}
				
		int tos_count_tFileOutputExcel_13 = 0;
		


		int columnIndex_tFileOutputExcel_13 = 0;
		
		String fileName_tFileOutputExcel_13=context.ExtractPathOTHER + "Product default order settings v3.xlsx";
		int nb_line_tFileOutputExcel_13 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_13 = new org.talend.ExcelTool();
		
		xlsxTool_tFileOutputExcel_13.setSheet("Product default order settings v3");
		xlsxTool_tFileOutputExcel_13.setAppend(false,true);
		xlsxTool_tFileOutputExcel_13.setRecalculateFormula(false);
		xlsxTool_tFileOutputExcel_13.setXY(false,0,10,false);
		
		java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_13 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap.get("concurrentHashMap");
		java.lang.Object lockObj_tFileOutputExcel_13 = chm_tFileOutputExcel_13.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_13", k -> new Object());
		synchronized (lockObj_tFileOutputExcel_13) {
			
				xlsxTool_tFileOutputExcel_13.prepareXlsxFile(fileName_tFileOutputExcel_13);
			
		}
		
		xlsxTool_tFileOutputExcel_13.setFont("");
		
		if (xlsxTool_tFileOutputExcel_13.getStartRow() == 0){
		
		xlsxTool_tFileOutputExcel_13.addRow();
		
		xlsxTool_tFileOutputExcel_13.addCellValue("ARESALESDEFAULTORDERSETTINGSOVERRIDDEN");
		
		xlsxTool_tFileOutputExcel_13.addCellValue("ITEMNUMBER");
		
		xlsxTool_tFileOutputExcel_13.addCellValue("SALESQUANTITYMULTIPLES");
		
		nb_line_tFileOutputExcel_13++; 
		
	}
		

 



/**
 * [tFileOutputExcel_13 begin ] stop
 */



	
	/**
	 * [tUniqRow_22 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_22", false);
		start_Hash.put("tUniqRow_22", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_22";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_defaultordersettings");
					}
				
		int tos_count_tUniqRow_22 = 0;
		

	
		class KeyStruct_tUniqRow_22 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String ITEMNUMBER;
					String SALESQUANTITYMULTIPLES;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.ITEMNUMBER == null) ? 0 : this.ITEMNUMBER.hashCode());
								
								result = prime * result + ((this.SALESQUANTITYMULTIPLES == null) ? 0 : this.SALESQUANTITYMULTIPLES.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_22 other = (KeyStruct_tUniqRow_22) obj;
				
									if (this.ITEMNUMBER == null) {
										if (other.ITEMNUMBER != null) 
											return false;
								
									} else if (!this.ITEMNUMBER.equals(other.ITEMNUMBER))
								 
										return false;
								
									if (this.SALESQUANTITYMULTIPLES == null) {
										if (other.SALESQUANTITYMULTIPLES != null) 
											return false;
								
									} else if (!this.SALESQUANTITYMULTIPLES.equals(other.SALESQUANTITYMULTIPLES))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_22 = 0;
int nb_duplicates_tUniqRow_22 = 0;
KeyStruct_tUniqRow_22 finder_tUniqRow_22 = new KeyStruct_tUniqRow_22();
java.util.Set<KeyStruct_tUniqRow_22> keystUniqRow_22 = new java.util.HashSet<KeyStruct_tUniqRow_22>(); 

 



/**
 * [tUniqRow_22 begin ] stop
 */



	
	/**
	 * [tMap_23 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_23", false);
		start_Hash.put("tMap_23", System.currentTimeMillis());
		
	
	currentComponent="tMap_23";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row25");
					}
				
		int tos_count_tMap_23 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_23__Struct  {
}
Var__tMap_23__Struct Var__tMap_23 = new Var__tMap_23__Struct();
// ###############################

// ###############################
// # Outputs initialization
sortie_attributeStruct sortie_attribute_tmp = new sortie_attributeStruct();
sortie_defaultordersettingsStruct sortie_defaultordersettings_tmp = new sortie_defaultordersettingsStruct();
// ###############################

        
        



        









 



/**
 * [tMap_23 begin ] stop
 */



	
	/**
	 * [tFilterRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_3", false);
		start_Hash.put("tFilterRow_3", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Main3");
					}
				
		int tos_count_tFilterRow_3 = 0;
		
    int nb_line_tFilterRow_3 = 0;
    int nb_line_ok_tFilterRow_3 = 0;
    int nb_line_reject_tFilterRow_3 = 0;

    class Operator_tFilterRow_3 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_3(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_3 begin ] stop
 */



	
	/**
	 * [tUniqRow_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_10", false);
		start_Hash.put("tUniqRow_10", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_10";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product");
					}
				
		int tos_count_tUniqRow_10 = 0;
		

	
		class KeyStruct_tUniqRow_10 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String PRODUCTNUMBER;
					String ATTRIBUTETYPENAME;
					String ATTRIBUTENAME;
					String TEXTVALUE;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.PRODUCTNUMBER == null) ? 0 : this.PRODUCTNUMBER.hashCode());
								
								result = prime * result + ((this.ATTRIBUTETYPENAME == null) ? 0 : this.ATTRIBUTETYPENAME.hashCode());
								
								result = prime * result + ((this.ATTRIBUTENAME == null) ? 0 : this.ATTRIBUTENAME.hashCode());
								
								result = prime * result + ((this.TEXTVALUE == null) ? 0 : this.TEXTVALUE.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_10 other = (KeyStruct_tUniqRow_10) obj;
				
									if (this.PRODUCTNUMBER == null) {
										if (other.PRODUCTNUMBER != null) 
											return false;
								
									} else if (!this.PRODUCTNUMBER.equals(other.PRODUCTNUMBER))
								 
										return false;
								
									if (this.ATTRIBUTETYPENAME == null) {
										if (other.ATTRIBUTETYPENAME != null) 
											return false;
								
									} else if (!this.ATTRIBUTETYPENAME.equals(other.ATTRIBUTETYPENAME))
								 
										return false;
								
									if (this.ATTRIBUTENAME == null) {
										if (other.ATTRIBUTENAME != null) 
											return false;
								
									} else if (!this.ATTRIBUTENAME.equals(other.ATTRIBUTENAME))
								 
										return false;
								
									if (this.TEXTVALUE == null) {
										if (other.TEXTVALUE != null) 
											return false;
								
									} else if (!this.TEXTVALUE.equals(other.TEXTVALUE))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_10 = 0;
int nb_duplicates_tUniqRow_10 = 0;
KeyStruct_tUniqRow_10 finder_tUniqRow_10 = new KeyStruct_tUniqRow_10();
java.util.Set<KeyStruct_tUniqRow_10> keystUniqRow_10 = new java.util.HashSet<KeyStruct_tUniqRow_10>(); 

 



/**
 * [tUniqRow_10 begin ] stop
 */



	
	/**
	 * [tMap_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_12", false);
		start_Hash.put("tMap_12", System.currentTimeMillis());
		
	
	currentComponent="tMap_12";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full");
					}
				
		int tos_count_tMap_12 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_12__Struct  {
}
Var__tMap_12__Struct Var__tMap_12 = new Var__tMap_12__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_fullStruct copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp = new copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_fullStruct();
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product_tmp = new copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct();
// ###############################

        
        



        









 



/**
 * [tMap_12 begin ] stop
 */




	
	/**
	 * [tUniqRow_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_9", false);
		start_Hash.put("tUniqRow_9", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_9";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product");
					}
				
		int tos_count_tUniqRow_9 = 0;
		

	
		class KeyStruct_tUniqRow_9 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String PRODUCTNUMBER;
					String ATTRIBUTETYPENAME;
					String ATTRIBUTENAME;
					String TEXTVALUE;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.PRODUCTNUMBER == null) ? 0 : this.PRODUCTNUMBER.hashCode());
								
								result = prime * result + ((this.ATTRIBUTETYPENAME == null) ? 0 : this.ATTRIBUTETYPENAME.hashCode());
								
								result = prime * result + ((this.ATTRIBUTENAME == null) ? 0 : this.ATTRIBUTENAME.hashCode());
								
								result = prime * result + ((this.TEXTVALUE == null) ? 0 : this.TEXTVALUE.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_9 other = (KeyStruct_tUniqRow_9) obj;
				
									if (this.PRODUCTNUMBER == null) {
										if (other.PRODUCTNUMBER != null) 
											return false;
								
									} else if (!this.PRODUCTNUMBER.equals(other.PRODUCTNUMBER))
								 
										return false;
								
									if (this.ATTRIBUTETYPENAME == null) {
										if (other.ATTRIBUTETYPENAME != null) 
											return false;
								
									} else if (!this.ATTRIBUTETYPENAME.equals(other.ATTRIBUTETYPENAME))
								 
										return false;
								
									if (this.ATTRIBUTENAME == null) {
										if (other.ATTRIBUTENAME != null) 
											return false;
								
									} else if (!this.ATTRIBUTENAME.equals(other.ATTRIBUTENAME))
								 
										return false;
								
									if (this.TEXTVALUE == null) {
										if (other.TEXTVALUE != null) 
											return false;
								
									} else if (!this.TEXTVALUE.equals(other.TEXTVALUE))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_9 = 0;
int nb_duplicates_tUniqRow_9 = 0;
KeyStruct_tUniqRow_9 finder_tUniqRow_9 = new KeyStruct_tUniqRow_9();
java.util.Set<KeyStruct_tUniqRow_9> keystUniqRow_9 = new java.util.HashSet<KeyStruct_tUniqRow_9>(); 

 



/**
 * [tUniqRow_9 begin ] stop
 */



	
	/**
	 * [tMap_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_11", false);
		start_Hash.put("tMap_11", System.currentTimeMillis());
		
	
	currentComponent="tMap_11";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full");
					}
				
		int tos_count_tMap_11 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_11__Struct  {
}
Var__tMap_11__Struct Var__tMap_11 = new Var__tMap_11__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_fullStruct copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp = new copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_fullStruct();
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product_tmp = new copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct();
// ###############################

        
        



        









 



/**
 * [tMap_11 begin ] stop
 */





	
	/**
	 * [tHashOutput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_6", false);
		start_Hash.put("tHashOutput_6", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_6";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row20");
					}
				
		int tos_count_tHashOutput_6 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_6=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row20Struct> tHashFile_tHashOutput_6 = null;
		String hashKey_tHashOutput_6 = "tHashFile_MASTERFILE_EXTRACT_PRODUCTS_1_" + pid + "_tHashOutput_6";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_6)){
			    if(mf_tHashOutput_6.getResourceMap().get(hashKey_tHashOutput_6) == null){
	      		    mf_tHashOutput_6.getResourceMap().put(hashKey_tHashOutput_6, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row20Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_6 = mf_tHashOutput_6.getResourceMap().get(hashKey_tHashOutput_6);
			    }else{
			    	tHashFile_tHashOutput_6 = mf_tHashOutput_6.getResourceMap().get(hashKey_tHashOutput_6);
			    }
			}
        int nb_line_tHashOutput_6 = 0;
 



/**
 * [tHashOutput_6 begin ] stop
 */



	
	/**
	 * [tUniqRow_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_8", false);
		start_Hash.put("tUniqRow_8", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_8";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product");
					}
				
		int tos_count_tUniqRow_8 = 0;
		

	
		class KeyStruct_tUniqRow_8 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String PRODUCTNUMBER;
					String ATTRIBUTETYPENAME;
					String ATTRIBUTENAME;
					String TEXTVALUE;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.PRODUCTNUMBER == null) ? 0 : this.PRODUCTNUMBER.hashCode());
								
								result = prime * result + ((this.ATTRIBUTETYPENAME == null) ? 0 : this.ATTRIBUTETYPENAME.hashCode());
								
								result = prime * result + ((this.ATTRIBUTENAME == null) ? 0 : this.ATTRIBUTENAME.hashCode());
								
								result = prime * result + ((this.TEXTVALUE == null) ? 0 : this.TEXTVALUE.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_8 other = (KeyStruct_tUniqRow_8) obj;
				
									if (this.PRODUCTNUMBER == null) {
										if (other.PRODUCTNUMBER != null) 
											return false;
								
									} else if (!this.PRODUCTNUMBER.equals(other.PRODUCTNUMBER))
								 
										return false;
								
									if (this.ATTRIBUTETYPENAME == null) {
										if (other.ATTRIBUTETYPENAME != null) 
											return false;
								
									} else if (!this.ATTRIBUTETYPENAME.equals(other.ATTRIBUTETYPENAME))
								 
										return false;
								
									if (this.ATTRIBUTENAME == null) {
										if (other.ATTRIBUTENAME != null) 
											return false;
								
									} else if (!this.ATTRIBUTENAME.equals(other.ATTRIBUTENAME))
								 
										return false;
								
									if (this.TEXTVALUE == null) {
										if (other.TEXTVALUE != null) 
											return false;
								
									} else if (!this.TEXTVALUE.equals(other.TEXTVALUE))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_8 = 0;
int nb_duplicates_tUniqRow_8 = 0;
KeyStruct_tUniqRow_8 finder_tUniqRow_8 = new KeyStruct_tUniqRow_8();
java.util.Set<KeyStruct_tUniqRow_8> keystUniqRow_8 = new java.util.HashSet<KeyStruct_tUniqRow_8>(); 

 



/**
 * [tUniqRow_8 begin ] stop
 */



	
	/**
	 * [tMap_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_10", false);
		start_Hash.put("tMap_10", System.currentTimeMillis());
		
	
	currentComponent="tMap_10";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full");
					}
				
		int tos_count_tMap_10 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_10__Struct  {
}
Var__tMap_10__Struct Var__tMap_10 = new Var__tMap_10__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_fullStruct copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp = new copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_fullStruct();
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product_tmp = new copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct();
// ###############################

        
        



        









 



/**
 * [tMap_10 begin ] stop
 */




	
	/**
	 * [tUniqRow_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_7", false);
		start_Hash.put("tUniqRow_7", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_7";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product");
					}
				
		int tos_count_tUniqRow_7 = 0;
		

	
		class KeyStruct_tUniqRow_7 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String PRODUCTNUMBER;
					String ATTRIBUTETYPENAME;
					String ATTRIBUTENAME;
					String TEXTVALUE;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.PRODUCTNUMBER == null) ? 0 : this.PRODUCTNUMBER.hashCode());
								
								result = prime * result + ((this.ATTRIBUTETYPENAME == null) ? 0 : this.ATTRIBUTETYPENAME.hashCode());
								
								result = prime * result + ((this.ATTRIBUTENAME == null) ? 0 : this.ATTRIBUTENAME.hashCode());
								
								result = prime * result + ((this.TEXTVALUE == null) ? 0 : this.TEXTVALUE.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_7 other = (KeyStruct_tUniqRow_7) obj;
				
									if (this.PRODUCTNUMBER == null) {
										if (other.PRODUCTNUMBER != null) 
											return false;
								
									} else if (!this.PRODUCTNUMBER.equals(other.PRODUCTNUMBER))
								 
										return false;
								
									if (this.ATTRIBUTETYPENAME == null) {
										if (other.ATTRIBUTETYPENAME != null) 
											return false;
								
									} else if (!this.ATTRIBUTETYPENAME.equals(other.ATTRIBUTETYPENAME))
								 
										return false;
								
									if (this.ATTRIBUTENAME == null) {
										if (other.ATTRIBUTENAME != null) 
											return false;
								
									} else if (!this.ATTRIBUTENAME.equals(other.ATTRIBUTENAME))
								 
										return false;
								
									if (this.TEXTVALUE == null) {
										if (other.TEXTVALUE != null) 
											return false;
								
									} else if (!this.TEXTVALUE.equals(other.TEXTVALUE))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_7 = 0;
int nb_duplicates_tUniqRow_7 = 0;
KeyStruct_tUniqRow_7 finder_tUniqRow_7 = new KeyStruct_tUniqRow_7();
java.util.Set<KeyStruct_tUniqRow_7> keystUniqRow_7 = new java.util.HashSet<KeyStruct_tUniqRow_7>(); 

 



/**
 * [tUniqRow_7 begin ] stop
 */



	
	/**
	 * [tMap_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_9", false);
		start_Hash.put("tMap_9", System.currentTimeMillis());
		
	
	currentComponent="tMap_9";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfcopyOfcopyOfcopyOfsortie_full");
					}
				
		int tos_count_tMap_9 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_9__Struct  {
}
Var__tMap_9__Struct Var__tMap_9 = new Var__tMap_9__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_fullStruct copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp = new copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_fullStruct();
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product_tmp = new copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct();
// ###############################

        
        



        









 



/**
 * [tMap_9 begin ] stop
 */




	
	/**
	 * [tUniqRow_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_6", false);
		start_Hash.put("tUniqRow_6", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_6";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfcopyOfcopyOfcopyOfsortie_product");
					}
				
		int tos_count_tUniqRow_6 = 0;
		

	
		class KeyStruct_tUniqRow_6 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String PRODUCTNUMBER;
					String ATTRIBUTETYPENAME;
					String ATTRIBUTENAME;
					String TEXTVALUE;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.PRODUCTNUMBER == null) ? 0 : this.PRODUCTNUMBER.hashCode());
								
								result = prime * result + ((this.ATTRIBUTETYPENAME == null) ? 0 : this.ATTRIBUTETYPENAME.hashCode());
								
								result = prime * result + ((this.ATTRIBUTENAME == null) ? 0 : this.ATTRIBUTENAME.hashCode());
								
								result = prime * result + ((this.TEXTVALUE == null) ? 0 : this.TEXTVALUE.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_6 other = (KeyStruct_tUniqRow_6) obj;
				
									if (this.PRODUCTNUMBER == null) {
										if (other.PRODUCTNUMBER != null) 
											return false;
								
									} else if (!this.PRODUCTNUMBER.equals(other.PRODUCTNUMBER))
								 
										return false;
								
									if (this.ATTRIBUTETYPENAME == null) {
										if (other.ATTRIBUTETYPENAME != null) 
											return false;
								
									} else if (!this.ATTRIBUTETYPENAME.equals(other.ATTRIBUTETYPENAME))
								 
										return false;
								
									if (this.ATTRIBUTENAME == null) {
										if (other.ATTRIBUTENAME != null) 
											return false;
								
									} else if (!this.ATTRIBUTENAME.equals(other.ATTRIBUTENAME))
								 
										return false;
								
									if (this.TEXTVALUE == null) {
										if (other.TEXTVALUE != null) 
											return false;
								
									} else if (!this.TEXTVALUE.equals(other.TEXTVALUE))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_6 = 0;
int nb_duplicates_tUniqRow_6 = 0;
KeyStruct_tUniqRow_6 finder_tUniqRow_6 = new KeyStruct_tUniqRow_6();
java.util.Set<KeyStruct_tUniqRow_6> keystUniqRow_6 = new java.util.HashSet<KeyStruct_tUniqRow_6>(); 

 



/**
 * [tUniqRow_6 begin ] stop
 */



	
	/**
	 * [tMap_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_8", false);
		start_Hash.put("tMap_8", System.currentTimeMillis());
		
	
	currentComponent="tMap_8";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfcopyOfcopyOfsortie_full");
					}
				
		int tos_count_tMap_8 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_8__Struct  {
}
Var__tMap_8__Struct Var__tMap_8 = new Var__tMap_8__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfcopyOfcopyOfcopyOfcopyOfsortie_fullStruct copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp = new copyOfcopyOfcopyOfcopyOfcopyOfsortie_fullStruct();
copyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct copyOfcopyOfcopyOfcopyOfcopyOfsortie_product_tmp = new copyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct();
// ###############################

        
        



        









 



/**
 * [tMap_8 begin ] stop
 */





	
	/**
	 * [tHashOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_3", false);
		start_Hash.put("tHashOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row14");
					}
				
		int tos_count_tHashOutput_3 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_3=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row14Struct> tHashFile_tHashOutput_3 = null;
		String hashKey_tHashOutput_3 = "tHashFile_MASTERFILE_EXTRACT_PRODUCTS_1_" + pid + "_tHashOutput_3";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_3)){
			    if(mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3) == null){
	      		    mf_tHashOutput_3.getResourceMap().put(hashKey_tHashOutput_3, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row14Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_3 = mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3);
			    }else{
			    	tHashFile_tHashOutput_3 = mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3);
			    }
			}
        int nb_line_tHashOutput_3 = 0;
 



/**
 * [tHashOutput_3 begin ] stop
 */



	
	/**
	 * [tUniqRow_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_5", false);
		start_Hash.put("tUniqRow_5", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfcopyOfcopyOfsortie_product");
					}
				
		int tos_count_tUniqRow_5 = 0;
		

	
		class KeyStruct_tUniqRow_5 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String PRODUCTNUMBER;
					String ATTRIBUTETYPENAME;
					String ATTRIBUTENAME;
					String TEXTVALUE;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.PRODUCTNUMBER == null) ? 0 : this.PRODUCTNUMBER.hashCode());
								
								result = prime * result + ((this.ATTRIBUTETYPENAME == null) ? 0 : this.ATTRIBUTETYPENAME.hashCode());
								
								result = prime * result + ((this.ATTRIBUTENAME == null) ? 0 : this.ATTRIBUTENAME.hashCode());
								
								result = prime * result + ((this.TEXTVALUE == null) ? 0 : this.TEXTVALUE.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_5 other = (KeyStruct_tUniqRow_5) obj;
				
									if (this.PRODUCTNUMBER == null) {
										if (other.PRODUCTNUMBER != null) 
											return false;
								
									} else if (!this.PRODUCTNUMBER.equals(other.PRODUCTNUMBER))
								 
										return false;
								
									if (this.ATTRIBUTETYPENAME == null) {
										if (other.ATTRIBUTETYPENAME != null) 
											return false;
								
									} else if (!this.ATTRIBUTETYPENAME.equals(other.ATTRIBUTETYPENAME))
								 
										return false;
								
									if (this.ATTRIBUTENAME == null) {
										if (other.ATTRIBUTENAME != null) 
											return false;
								
									} else if (!this.ATTRIBUTENAME.equals(other.ATTRIBUTENAME))
								 
										return false;
								
									if (this.TEXTVALUE == null) {
										if (other.TEXTVALUE != null) 
											return false;
								
									} else if (!this.TEXTVALUE.equals(other.TEXTVALUE))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_5 = 0;
int nb_duplicates_tUniqRow_5 = 0;
KeyStruct_tUniqRow_5 finder_tUniqRow_5 = new KeyStruct_tUniqRow_5();
java.util.Set<KeyStruct_tUniqRow_5> keystUniqRow_5 = new java.util.HashSet<KeyStruct_tUniqRow_5>(); 

 



/**
 * [tUniqRow_5 begin ] stop
 */



	
	/**
	 * [tMap_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_7", false);
		start_Hash.put("tMap_7", System.currentTimeMillis());
		
	
	currentComponent="tMap_7";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfcopyOfsortie_full");
					}
				
		int tos_count_tMap_7 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_7__Struct  {
}
Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfcopyOfcopyOfcopyOfsortie_fullStruct copyOfcopyOfcopyOfcopyOfsortie_full_tmp = new copyOfcopyOfcopyOfcopyOfsortie_fullStruct();
copyOfcopyOfcopyOfcopyOfsortie_productStruct copyOfcopyOfcopyOfcopyOfsortie_product_tmp = new copyOfcopyOfcopyOfcopyOfsortie_productStruct();
// ###############################

        
        



        









 



/**
 * [tMap_7 begin ] stop
 */





	
	/**
	 * [tHashOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_2", false);
		start_Hash.put("tHashOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row10");
					}
				
		int tos_count_tHashOutput_2 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row10Struct> tHashFile_tHashOutput_2 = null;
		String hashKey_tHashOutput_2 = "tHashFile_MASTERFILE_EXTRACT_PRODUCTS_1_" + pid + "_tHashOutput_2";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_2)){
			    if(mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2) == null){
	      		    mf_tHashOutput_2.getResourceMap().put(hashKey_tHashOutput_2, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row10Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }else{
			    	tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }
			}
        int nb_line_tHashOutput_2 = 0;
 



/**
 * [tHashOutput_2 begin ] stop
 */



	
	/**
	 * [tUniqRow_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_4", false);
		start_Hash.put("tUniqRow_4", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfcopyOfsortie_product");
					}
				
		int tos_count_tUniqRow_4 = 0;
		

	
		class KeyStruct_tUniqRow_4 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String PRODUCTNUMBER;
					String ATTRIBUTETYPENAME;
					String ATTRIBUTENAME;
					String TEXTVALUE;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.PRODUCTNUMBER == null) ? 0 : this.PRODUCTNUMBER.hashCode());
								
								result = prime * result + ((this.ATTRIBUTETYPENAME == null) ? 0 : this.ATTRIBUTETYPENAME.hashCode());
								
								result = prime * result + ((this.ATTRIBUTENAME == null) ? 0 : this.ATTRIBUTENAME.hashCode());
								
								result = prime * result + ((this.TEXTVALUE == null) ? 0 : this.TEXTVALUE.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_4 other = (KeyStruct_tUniqRow_4) obj;
				
									if (this.PRODUCTNUMBER == null) {
										if (other.PRODUCTNUMBER != null) 
											return false;
								
									} else if (!this.PRODUCTNUMBER.equals(other.PRODUCTNUMBER))
								 
										return false;
								
									if (this.ATTRIBUTETYPENAME == null) {
										if (other.ATTRIBUTETYPENAME != null) 
											return false;
								
									} else if (!this.ATTRIBUTETYPENAME.equals(other.ATTRIBUTETYPENAME))
								 
										return false;
								
									if (this.ATTRIBUTENAME == null) {
										if (other.ATTRIBUTENAME != null) 
											return false;
								
									} else if (!this.ATTRIBUTENAME.equals(other.ATTRIBUTENAME))
								 
										return false;
								
									if (this.TEXTVALUE == null) {
										if (other.TEXTVALUE != null) 
											return false;
								
									} else if (!this.TEXTVALUE.equals(other.TEXTVALUE))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_4 = 0;
int nb_duplicates_tUniqRow_4 = 0;
KeyStruct_tUniqRow_4 finder_tUniqRow_4 = new KeyStruct_tUniqRow_4();
java.util.Set<KeyStruct_tUniqRow_4> keystUniqRow_4 = new java.util.HashSet<KeyStruct_tUniqRow_4>(); 

 



/**
 * [tUniqRow_4 begin ] stop
 */



	
	/**
	 * [tMap_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_6", false);
		start_Hash.put("tMap_6", System.currentTimeMillis());
		
	
	currentComponent="tMap_6";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfsortie_full");
					}
				
		int tos_count_tMap_6 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_6__Struct  {
}
Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfcopyOfcopyOfsortie_fullStruct copyOfcopyOfcopyOfsortie_full_tmp = new copyOfcopyOfcopyOfsortie_fullStruct();
copyOfcopyOfcopyOfsortie_productStruct copyOfcopyOfcopyOfsortie_product_tmp = new copyOfcopyOfcopyOfsortie_productStruct();
// ###############################

        
        



        









 



/**
 * [tMap_6 begin ] stop
 */





	
	/**
	 * [tHashOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_1", false);
		start_Hash.put("tHashOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Main1");
					}
				
		int tos_count_tHashOutput_1 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<Main1Struct> tHashFile_tHashOutput_1 = null;
		String hashKey_tHashOutput_1 = "tHashFile_MASTERFILE_EXTRACT_PRODUCTS_1_" + pid + "_tHashOutput_1";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_1)){
			    if(mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1) == null){
	      		    mf_tHashOutput_1.getResourceMap().put(hashKey_tHashOutput_1, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<Main1Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }else{
			    	tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }
			}
        int nb_line_tHashOutput_1 = 0;
 



/**
 * [tHashOutput_1 begin ] stop
 */



	
	/**
	 * [tUniqRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_3", false);
		start_Hash.put("tUniqRow_3", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfsortie_product");
					}
				
		int tos_count_tUniqRow_3 = 0;
		

	
		class KeyStruct_tUniqRow_3 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String PRODUCTNUMBER;
					String ATTRIBUTETYPENAME;
					String ATTRIBUTENAME;
					String TEXTVALUE;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.PRODUCTNUMBER == null) ? 0 : this.PRODUCTNUMBER.hashCode());
								
								result = prime * result + ((this.ATTRIBUTETYPENAME == null) ? 0 : this.ATTRIBUTETYPENAME.hashCode());
								
								result = prime * result + ((this.ATTRIBUTENAME == null) ? 0 : this.ATTRIBUTENAME.hashCode());
								
								result = prime * result + ((this.TEXTVALUE == null) ? 0 : this.TEXTVALUE.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_3 other = (KeyStruct_tUniqRow_3) obj;
				
									if (this.PRODUCTNUMBER == null) {
										if (other.PRODUCTNUMBER != null) 
											return false;
								
									} else if (!this.PRODUCTNUMBER.equals(other.PRODUCTNUMBER))
								 
										return false;
								
									if (this.ATTRIBUTETYPENAME == null) {
										if (other.ATTRIBUTETYPENAME != null) 
											return false;
								
									} else if (!this.ATTRIBUTETYPENAME.equals(other.ATTRIBUTETYPENAME))
								 
										return false;
								
									if (this.ATTRIBUTENAME == null) {
										if (other.ATTRIBUTENAME != null) 
											return false;
								
									} else if (!this.ATTRIBUTENAME.equals(other.ATTRIBUTENAME))
								 
										return false;
								
									if (this.TEXTVALUE == null) {
										if (other.TEXTVALUE != null) 
											return false;
								
									} else if (!this.TEXTVALUE.equals(other.TEXTVALUE))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_3 = 0;
int nb_duplicates_tUniqRow_3 = 0;
KeyStruct_tUniqRow_3 finder_tUniqRow_3 = new KeyStruct_tUniqRow_3();
java.util.Set<KeyStruct_tUniqRow_3> keystUniqRow_3 = new java.util.HashSet<KeyStruct_tUniqRow_3>(); 

 



/**
 * [tUniqRow_3 begin ] stop
 */



	
	/**
	 * [tMap_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_5", false);
		start_Hash.put("tMap_5", System.currentTimeMillis());
		
	
	currentComponent="tMap_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfsortie_full");
					}
				
		int tos_count_tMap_5 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_5__Struct  {
}
Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfcopyOfsortie_fullStruct copyOfcopyOfsortie_full_tmp = new copyOfcopyOfsortie_fullStruct();
copyOfcopyOfsortie_productStruct copyOfcopyOfsortie_product_tmp = new copyOfcopyOfsortie_productStruct();
// ###############################

        
        



        









 



/**
 * [tMap_5 begin ] stop
 */





	
	/**
	 * [tFileOutputExcel_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_2", false);
		start_Hash.put("tFileOutputExcel_2", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tFileOutputExcel_2 = 0;
		


		int columnIndex_tFileOutputExcel_2 = 0;
		
		String fileName_tFileOutputExcel_2=context.ExtractPathOTHER + "Released products V2.xlsx";
		int nb_line_tFileOutputExcel_2 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_2 = new org.talend.ExcelTool();
		
		xlsxTool_tFileOutputExcel_2.setSheet("Released products V2");
		xlsxTool_tFileOutputExcel_2.setAppend(false,true);
		xlsxTool_tFileOutputExcel_2.setRecalculateFormula(false);
		xlsxTool_tFileOutputExcel_2.setXY(false,0,10,false);
		
		java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_2 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap.get("concurrentHashMap");
		java.lang.Object lockObj_tFileOutputExcel_2 = chm_tFileOutputExcel_2.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_2", k -> new Object());
		synchronized (lockObj_tFileOutputExcel_2) {
			
				xlsxTool_tFileOutputExcel_2.prepareXlsxFile(fileName_tFileOutputExcel_2);
			
		}
		
		xlsxTool_tFileOutputExcel_2.setFont("");
		
		if (xlsxTool_tFileOutputExcel_2.getStartRow() == 0){
		
		xlsxTool_tFileOutputExcel_2.addRow();
		
		xlsxTool_tFileOutputExcel_2.addCellValue("ITEMNUMBER");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("ORIGINCOUNTRYREGIONID");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("PRODUCTCOVERAGEGROUPID");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("PRODUCTNUMBER");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("PRODUCTSEARCHNAME");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("PRODUCTSUBTYPE");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("PRODUCTTYPE");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("SEARCHNAME");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("SPLWMSLOCATIONID");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("ISUNITCOSTPRODUCTVARIANTSPECIFIC");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("GPLMEMO");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("DEFAULTLEDGERDIMENSIONDISPLAYVALUE");
		
		nb_line_tFileOutputExcel_2++; 
		
	}
		

 



/**
 * [tFileOutputExcel_2 begin ] stop
 */



	
	/**
	 * [tUniqRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_2", false);
		start_Hash.put("tUniqRow_2", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfsortie_product");
					}
				
		int tos_count_tUniqRow_2 = 0;
		

	
		class KeyStruct_tUniqRow_2 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String ITEMNUMBER;
					String ORIGINCOUNTRYREGIONID;
					String PRODUCTCOVERAGEGROUPID;
					String PRODUCTNUMBER;
					String PRODUCTSEARCHNAME;
					String PRODUCTSUBTYPE;
					String PRODUCTTYPE;
					String SEARCHNAME;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.ITEMNUMBER == null) ? 0 : this.ITEMNUMBER.hashCode());
								
								result = prime * result + ((this.ORIGINCOUNTRYREGIONID == null) ? 0 : this.ORIGINCOUNTRYREGIONID.hashCode());
								
								result = prime * result + ((this.PRODUCTCOVERAGEGROUPID == null) ? 0 : this.PRODUCTCOVERAGEGROUPID.hashCode());
								
								result = prime * result + ((this.PRODUCTNUMBER == null) ? 0 : this.PRODUCTNUMBER.hashCode());
								
								result = prime * result + ((this.PRODUCTSEARCHNAME == null) ? 0 : this.PRODUCTSEARCHNAME.hashCode());
								
								result = prime * result + ((this.PRODUCTSUBTYPE == null) ? 0 : this.PRODUCTSUBTYPE.hashCode());
								
								result = prime * result + ((this.PRODUCTTYPE == null) ? 0 : this.PRODUCTTYPE.hashCode());
								
								result = prime * result + ((this.SEARCHNAME == null) ? 0 : this.SEARCHNAME.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_2 other = (KeyStruct_tUniqRow_2) obj;
				
									if (this.ITEMNUMBER == null) {
										if (other.ITEMNUMBER != null) 
											return false;
								
									} else if (!this.ITEMNUMBER.equals(other.ITEMNUMBER))
								 
										return false;
								
									if (this.ORIGINCOUNTRYREGIONID == null) {
										if (other.ORIGINCOUNTRYREGIONID != null) 
											return false;
								
									} else if (!this.ORIGINCOUNTRYREGIONID.equals(other.ORIGINCOUNTRYREGIONID))
								 
										return false;
								
									if (this.PRODUCTCOVERAGEGROUPID == null) {
										if (other.PRODUCTCOVERAGEGROUPID != null) 
											return false;
								
									} else if (!this.PRODUCTCOVERAGEGROUPID.equals(other.PRODUCTCOVERAGEGROUPID))
								 
										return false;
								
									if (this.PRODUCTNUMBER == null) {
										if (other.PRODUCTNUMBER != null) 
											return false;
								
									} else if (!this.PRODUCTNUMBER.equals(other.PRODUCTNUMBER))
								 
										return false;
								
									if (this.PRODUCTSEARCHNAME == null) {
										if (other.PRODUCTSEARCHNAME != null) 
											return false;
								
									} else if (!this.PRODUCTSEARCHNAME.equals(other.PRODUCTSEARCHNAME))
								 
										return false;
								
									if (this.PRODUCTSUBTYPE == null) {
										if (other.PRODUCTSUBTYPE != null) 
											return false;
								
									} else if (!this.PRODUCTSUBTYPE.equals(other.PRODUCTSUBTYPE))
								 
										return false;
								
									if (this.PRODUCTTYPE == null) {
										if (other.PRODUCTTYPE != null) 
											return false;
								
									} else if (!this.PRODUCTTYPE.equals(other.PRODUCTTYPE))
								 
										return false;
								
									if (this.SEARCHNAME == null) {
										if (other.SEARCHNAME != null) 
											return false;
								
									} else if (!this.SEARCHNAME.equals(other.SEARCHNAME))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_2 = 0;
int nb_duplicates_tUniqRow_2 = 0;
KeyStruct_tUniqRow_2 finder_tUniqRow_2 = new KeyStruct_tUniqRow_2();
java.util.Set<KeyStruct_tUniqRow_2> keystUniqRow_2 = new java.util.HashSet<KeyStruct_tUniqRow_2>(); 

 



/**
 * [tUniqRow_2 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfsortie_fullStruct copyOfsortie_full_tmp = new copyOfsortie_fullStruct();
copyOfsortie_productStruct copyOfsortie_product_tmp = new copyOfsortie_productStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tLogRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_2", false);
		start_Hash.put("tLogRow_2", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_full");
					}
				
		int tos_count_tLogRow_2 = 0;
		

 



/**
 * [tLogRow_2 begin ] stop
 */






	
	/**
	 * [tFileOutputExcel_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_1", false);
		start_Hash.put("tFileOutputExcel_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tFileOutputExcel_1 = 0;
		


		int columnIndex_tFileOutputExcel_1 = 0;
		
		String fileName_tFileOutputExcel_1=context.ExtractPathHBE + "Products V2.xlsx";
		int nb_line_tFileOutputExcel_1 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_1 = new org.talend.ExcelTool();
		
		xlsxTool_tFileOutputExcel_1.setSheet("Products_V2");
		xlsxTool_tFileOutputExcel_1.setAppend(false,true);
		xlsxTool_tFileOutputExcel_1.setRecalculateFormula(false);
		xlsxTool_tFileOutputExcel_1.setXY(false,0,10,false);
		
		java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_1 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap.get("concurrentHashMap");
		java.lang.Object lockObj_tFileOutputExcel_1 = chm_tFileOutputExcel_1.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_1", k -> new Object());
		synchronized (lockObj_tFileOutputExcel_1) {
			
				xlsxTool_tFileOutputExcel_1.prepareXlsxFile(fileName_tFileOutputExcel_1);
			
		}
		
		xlsxTool_tFileOutputExcel_1.setFont("");
		
		if (xlsxTool_tFileOutputExcel_1.getStartRow() == 0){
		
		xlsxTool_tFileOutputExcel_1.addRow();
		
		xlsxTool_tFileOutputExcel_1.addCellValue("PRODUCTSEARCHNAME");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("PRODUCTDESCRIPTION");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("PRODUCTNAME");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("PRODUCTNUMBER");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("RETAILPRODUCTCATEGORYNAME");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("PRODUCTSUBTYPE");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("PRODUCTTYPE");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("KRFBRANDID");
		
		nb_line_tFileOutputExcel_1++; 
		
	}
		

 



/**
 * [tFileOutputExcel_1 begin ] stop
 */



	
	/**
	 * [tUniqRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_1", false);
		start_Hash.put("tUniqRow_1", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tUniqRow_1 = 0;
		

	
		class KeyStruct_tUniqRow_1 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String PRODUCTSEARCHNAME;
					String PRODUCTNUMBER;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.PRODUCTSEARCHNAME == null) ? 0 : this.PRODUCTSEARCHNAME.hashCode());
								
								result = prime * result + ((this.PRODUCTNUMBER == null) ? 0 : this.PRODUCTNUMBER.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_1 other = (KeyStruct_tUniqRow_1) obj;
				
									if (this.PRODUCTSEARCHNAME == null) {
										if (other.PRODUCTSEARCHNAME != null) 
											return false;
								
									} else if (!this.PRODUCTSEARCHNAME.equals(other.PRODUCTSEARCHNAME))
								 
										return false;
								
									if (this.PRODUCTNUMBER == null) {
										if (other.PRODUCTNUMBER != null) 
											return false;
								
									} else if (!this.PRODUCTNUMBER.equals(other.PRODUCTNUMBER))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_1 = 0;
int nb_duplicates_tUniqRow_1 = 0;
KeyStruct_tUniqRow_1 finder_tUniqRow_1 = new KeyStruct_tUniqRow_1();
java.util.Set<KeyStruct_tUniqRow_1> keystUniqRow_1 = new java.util.HashSet<KeyStruct_tUniqRow_1>(); 

 



/**
 * [tUniqRow_1 begin ] stop
 */



	
	/**
	 * [tLogRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_3", false);
		start_Hash.put("tLogRow_3", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_product");
					}
				
		int tos_count_tLogRow_3 = 0;
		

 



/**
 * [tLogRow_3 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_Excel");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
sortie_fullStruct sortie_full_tmp = new sortie_fullStruct();
sortie_productStruct sortie_product_tmp = new sortie_productStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7");
					}
				
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<copyOfcopyOfsortie_fashionStruct> tHash_Lookup_copyOfcopyOfsortie_fashion = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<copyOfcopyOfsortie_fashionStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<copyOfcopyOfsortie_fashionStruct>) 
					globalMap.get( "tHash_Lookup_copyOfcopyOfsortie_fashion" ))
					;					
					
	

copyOfcopyOfsortie_fashionStruct copyOfcopyOfsortie_fashionHashKey = new copyOfcopyOfsortie_fashionStruct();
copyOfcopyOfsortie_fashionStruct copyOfcopyOfsortie_fashionDefault = new copyOfcopyOfsortie_fashionStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
sortie_ExcelStruct sortie_Excel_tmp = new sortie_ExcelStruct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tFilterRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_2", false);
		start_Hash.put("tFilterRow_2", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_Excel1");
					}
				
		int tos_count_tFilterRow_2 = 0;
		
    int nb_line_tFilterRow_2 = 0;
    int nb_line_ok_tFilterRow_2 = 0;
    int nb_line_reject_tFilterRow_2 = 0;

    class Operator_tFilterRow_2 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_2(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_2 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
sortie_Excel1Struct sortie_Excel1_tmp = new sortie_Excel1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tDBInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_5", false);
		start_Hash.put("tDBInput_5", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_5";

	
		int tos_count_tDBInput_5 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_5 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_5 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_5  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_5, talendToDBArray_tDBInput_5); 
		    int nb_line_tDBInput_5 = 0;
		    java.sql.Connection conn_tDBInput_5 = null;
				String driverClass_tDBInput_5 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
			    java.lang.Class jdbcclazz_tDBInput_5 = java.lang.Class.forName(driverClass_tDBInput_5);
					String dbUser_tDBInput_5 = context.SQLSERVER_Login;
					
					
					
	final String decryptedPassword_tDBInput_5 = context.SQLSERVER_Password; 
					
					String dbPwd_tDBInput_5 = decryptedPassword_tDBInput_5;
				
		    String port_tDBInput_5 = context.SQLSERVER_Port;
		    String dbname_tDBInput_5 = context.SQLSERVER_Database ;		    
		    String url_tDBInput_5 = "jdbc:sqlserver://" + context.SQLSERVER_Server ;
		    if (!"".equals(port_tDBInput_5)) {
		    	url_tDBInput_5 += ":" + context.SQLSERVER_Port;
		    }
		    if (!"".equals(dbname_tDBInput_5)) {		    
		    	url_tDBInput_5 += ";databaseName=" + context.SQLSERVER_Database; 
		    }
		    url_tDBInput_5 += ";appName=" + projectName + ";" + context.SQLSERVER_AdditionalParams;
		    String dbschema_tDBInput_5 = context.SQLSERVER_Schema;
				
				conn_tDBInput_5 = java.sql.DriverManager.getConnection(url_tDBInput_5,dbUser_tDBInput_5,dbPwd_tDBInput_5);
		        
		    
			java.sql.Statement stmt_tDBInput_5 = conn_tDBInput_5.createStatement();

		    String dbquery_tDBInput_5 = "select [BRAND]\n      ,[SEASON]\n      ,[CATEGORY]\n      ,[REF]\n      ,[DESCRIPTION]\n      ,[STYLE]\n      ,[COLOR]"
+"\n      ,[COLORNAME]\n      ,[STYLE_COLOR]\n      ,[STYLECOLORLABEL]\n      ,[LBL]\n      ,[GENDER]\n      ,[AGE_RANGE]\n"
+"      ,[SIZE_RANGE]\n      ,[SIZE]\n      ,[US_SIZE]\n      ,[CM_SIZE]\n      ,[FASHION]\n      ,[PRODUCT]\n      ,[PROD"
+"UCT_CHANNEL]\n      ,[PRODUCT_STATUS]\n      ,[PRODUCT_TIER]\n      ,[ACCT_EXCLUS]\n      ,[EUR_RRP]\n      ,[EUR_WSP]\n"
+"      ,[GBP_RRP]\n      ,[GBP_WSP]\n      ,[CHF_RRP]\n      ,[CHF_WSP]\n      ,[DKK_RRP]\n      ,[DKK_WSP]\n      ,[NOK_"
+"RRP]\n      ,[NOK_WSP]\n      ,[SEK_RRP]\n      ,[SEK_WSP]\n      ,[EUR_FINN_RRP]\n      ,[EUR_FINN_WSP]\n      ,[CARTON"
+"_QTY]\n      ,[FABRICATION]\n      ,[COO]\n      ,[CUSTOM_TARIFF_CODE]\n      ,[UPC]\n      ,[EAN]\n      ,[DELIVERYFLOW"
+"]\n      ,[SUSTAINABILITY]  from  [masterfile].[Products] where ProductExtractDate is null and  fileName = " + "'" + context.ExcelFileName + "'" +
" and CreationDate = " + "'" + context.CreationDate + "'"
;
			

            	globalMap.put("tDBInput_5_QUERY",dbquery_tDBInput_5);
		    java.sql.ResultSet rs_tDBInput_5 = null;

		    try {
		    	rs_tDBInput_5 = stmt_tDBInput_5.executeQuery(dbquery_tDBInput_5);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_5 = rs_tDBInput_5.getMetaData();
		    	int colQtyInRs_tDBInput_5 = rsmd_tDBInput_5.getColumnCount();

		    String tmpContent_tDBInput_5 = null;
		    
		    
		    while (rs_tDBInput_5.next()) {
		        nb_line_tDBInput_5++;
		        
							if(colQtyInRs_tDBInput_5 < 1) {
								row1.BRAND = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(1);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.BRAND = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.BRAND = tmpContent_tDBInput_5;
                }
            } else {
                row1.BRAND = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 2) {
								row1.SEASON = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(2);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.SEASON = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.SEASON = tmpContent_tDBInput_5;
                }
            } else {
                row1.SEASON = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 3) {
								row1.CATEGORY = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(3);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.CATEGORY = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.CATEGORY = tmpContent_tDBInput_5;
                }
            } else {
                row1.CATEGORY = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 4) {
								row1.REF = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(4);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.REF = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.REF = tmpContent_tDBInput_5;
                }
            } else {
                row1.REF = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 5) {
								row1.DESCRIPTION = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(5);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(5).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.DESCRIPTION = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.DESCRIPTION = tmpContent_tDBInput_5;
                }
            } else {
                row1.DESCRIPTION = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 6) {
								row1.STYLE = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(6);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(6).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.STYLE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.STYLE = tmpContent_tDBInput_5;
                }
            } else {
                row1.STYLE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 7) {
								row1.COLOR = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(7);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(7).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.COLOR = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.COLOR = tmpContent_tDBInput_5;
                }
            } else {
                row1.COLOR = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 8) {
								row1.COLORNAME = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(8);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(8).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.COLORNAME = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.COLORNAME = tmpContent_tDBInput_5;
                }
            } else {
                row1.COLORNAME = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 9) {
								row1.STYLE_COLOR = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(9);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(9).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.STYLE_COLOR = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.STYLE_COLOR = tmpContent_tDBInput_5;
                }
            } else {
                row1.STYLE_COLOR = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 10) {
								row1.STYLECOLORLABEL = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(10);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(10).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.STYLECOLORLABEL = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.STYLECOLORLABEL = tmpContent_tDBInput_5;
                }
            } else {
                row1.STYLECOLORLABEL = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 11) {
								row1.LBL = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(11);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(11).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.LBL = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.LBL = tmpContent_tDBInput_5;
                }
            } else {
                row1.LBL = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 12) {
								row1.GENDER = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(12);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(12).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.GENDER = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.GENDER = tmpContent_tDBInput_5;
                }
            } else {
                row1.GENDER = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 13) {
								row1.AGE_RANGE = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(13);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(13).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.AGE_RANGE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.AGE_RANGE = tmpContent_tDBInput_5;
                }
            } else {
                row1.AGE_RANGE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 14) {
								row1.SIZE_RANGE = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(14);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(14).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.SIZE_RANGE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.SIZE_RANGE = tmpContent_tDBInput_5;
                }
            } else {
                row1.SIZE_RANGE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 15) {
								row1.SIZE = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(15);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(15).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.SIZE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.SIZE = tmpContent_tDBInput_5;
                }
            } else {
                row1.SIZE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 16) {
								row1.US_SIZE = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(16);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(16).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.US_SIZE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.US_SIZE = tmpContent_tDBInput_5;
                }
            } else {
                row1.US_SIZE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 17) {
								row1.CM_SIZE = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(17);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(17).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.CM_SIZE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.CM_SIZE = tmpContent_tDBInput_5;
                }
            } else {
                row1.CM_SIZE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 18) {
								row1.FASHION = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(18);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(18).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.FASHION = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.FASHION = tmpContent_tDBInput_5;
                }
            } else {
                row1.FASHION = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 19) {
								row1.PRODUCT = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(19);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(19).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.PRODUCT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.PRODUCT = tmpContent_tDBInput_5;
                }
            } else {
                row1.PRODUCT = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 20) {
								row1.PRODUCT_CHANNEL = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(20);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(20).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.PRODUCT_CHANNEL = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.PRODUCT_CHANNEL = tmpContent_tDBInput_5;
                }
            } else {
                row1.PRODUCT_CHANNEL = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 21) {
								row1.PRODUCT_STATUS = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(21);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(21).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.PRODUCT_STATUS = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.PRODUCT_STATUS = tmpContent_tDBInput_5;
                }
            } else {
                row1.PRODUCT_STATUS = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 22) {
								row1.PRODUCT_TIER = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(22);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(22).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.PRODUCT_TIER = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.PRODUCT_TIER = tmpContent_tDBInput_5;
                }
            } else {
                row1.PRODUCT_TIER = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 23) {
								row1.ACCT_EXCLUS = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(23);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(23).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.ACCT_EXCLUS = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.ACCT_EXCLUS = tmpContent_tDBInput_5;
                }
            } else {
                row1.ACCT_EXCLUS = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 24) {
								row1.EUR_RRP = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(24);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(24).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.EUR_RRP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.EUR_RRP = tmpContent_tDBInput_5;
                }
            } else {
                row1.EUR_RRP = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 25) {
								row1.EUR_WSP = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(25);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(25).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.EUR_WSP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.EUR_WSP = tmpContent_tDBInput_5;
                }
            } else {
                row1.EUR_WSP = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 26) {
								row1.GBP_RRP = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(26);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(26).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.GBP_RRP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.GBP_RRP = tmpContent_tDBInput_5;
                }
            } else {
                row1.GBP_RRP = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 27) {
								row1.GBP_WSP = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(27);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(27).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.GBP_WSP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.GBP_WSP = tmpContent_tDBInput_5;
                }
            } else {
                row1.GBP_WSP = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 28) {
								row1.CHF_RRP = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(28);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(28).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.CHF_RRP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.CHF_RRP = tmpContent_tDBInput_5;
                }
            } else {
                row1.CHF_RRP = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 29) {
								row1.CHF_WSP = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(29);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(29).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.CHF_WSP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.CHF_WSP = tmpContent_tDBInput_5;
                }
            } else {
                row1.CHF_WSP = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 30) {
								row1.DKK_RRP = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(30);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(30).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.DKK_RRP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.DKK_RRP = tmpContent_tDBInput_5;
                }
            } else {
                row1.DKK_RRP = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 31) {
								row1.DKK_WSP = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(31);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(31).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.DKK_WSP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.DKK_WSP = tmpContent_tDBInput_5;
                }
            } else {
                row1.DKK_WSP = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 32) {
								row1.NOK_RRP = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(32);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(32).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.NOK_RRP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.NOK_RRP = tmpContent_tDBInput_5;
                }
            } else {
                row1.NOK_RRP = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 33) {
								row1.NOK_WSP = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(33);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(33).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.NOK_WSP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.NOK_WSP = tmpContent_tDBInput_5;
                }
            } else {
                row1.NOK_WSP = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 34) {
								row1.SEK_RRP = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(34);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(34).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.SEK_RRP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.SEK_RRP = tmpContent_tDBInput_5;
                }
            } else {
                row1.SEK_RRP = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 35) {
								row1.SEK_WSP = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(35);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(35).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.SEK_WSP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.SEK_WSP = tmpContent_tDBInput_5;
                }
            } else {
                row1.SEK_WSP = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 36) {
								row1.EUR_FINN_RRP = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(36);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(36).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.EUR_FINN_RRP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.EUR_FINN_RRP = tmpContent_tDBInput_5;
                }
            } else {
                row1.EUR_FINN_RRP = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 37) {
								row1.EUR_FINN_WSP = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(37);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(37).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.EUR_FINN_WSP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.EUR_FINN_WSP = tmpContent_tDBInput_5;
                }
            } else {
                row1.EUR_FINN_WSP = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 38) {
								row1.CARTON_QTY = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(38);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(38).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.CARTON_QTY = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.CARTON_QTY = tmpContent_tDBInput_5;
                }
            } else {
                row1.CARTON_QTY = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 39) {
								row1.FABRICATION = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(39);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(39).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.FABRICATION = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.FABRICATION = tmpContent_tDBInput_5;
                }
            } else {
                row1.FABRICATION = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 40) {
								row1.COO = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(40);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(40).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.COO = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.COO = tmpContent_tDBInput_5;
                }
            } else {
                row1.COO = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 41) {
								row1.CUSTOM_TARIFF_CODE = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(41);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(41).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.CUSTOM_TARIFF_CODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.CUSTOM_TARIFF_CODE = tmpContent_tDBInput_5;
                }
            } else {
                row1.CUSTOM_TARIFF_CODE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 42) {
								row1.UPC = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(42);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(42).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.UPC = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.UPC = tmpContent_tDBInput_5;
                }
            } else {
                row1.UPC = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 43) {
								row1.EAN = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(43);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(43).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.EAN = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.EAN = tmpContent_tDBInput_5;
                }
            } else {
                row1.EAN = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 44) {
								row1.DELIVERYFLOW = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(44);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(44).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.DELIVERYFLOW = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.DELIVERYFLOW = tmpContent_tDBInput_5;
                }
            } else {
                row1.DELIVERYFLOW = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 45) {
								row1.SUSTAINABILITY = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(45);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(45).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.SUSTAINABILITY = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.SUSTAINABILITY = tmpContent_tDBInput_5;
                }
            } else {
                row1.SUSTAINABILITY = null;
            }
		                    }
					





 



/**
 * [tDBInput_5 begin ] stop
 */
	
	/**
	 * [tDBInput_5 main ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 


	tos_count_tDBInput_5++;

/**
 * [tDBInput_5 main ] stop
 */
	
	/**
	 * [tDBInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row1");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

sortie_Excel1 = null;


// # Output table : 'sortie_Excel1'
sortie_Excel1_tmp.BRAND = row1.BRAND ;
sortie_Excel1_tmp.SEASON = row1.SEASON ;
sortie_Excel1_tmp.CATEGORY = row1.CATEGORY ;
sortie_Excel1_tmp.REF = row1.REF ;
sortie_Excel1_tmp.DESCRIPTION = row1.DESCRIPTION ;
sortie_Excel1_tmp.STYLE = row1.STYLE ;
sortie_Excel1_tmp.COLOR = row1.COLOR ;
sortie_Excel1_tmp.FASHION = row1.FASHION ;
sortie_Excel1_tmp.STYLECOLORLABEL = row1.STYLECOLORLABEL ;
sortie_Excel1_tmp.COLORNAME = row1.COLORNAME ;
sortie_Excel1_tmp.LBL = row1.LBL ;
sortie_Excel1_tmp.STYLE_COLOR = row1.STYLE_COLOR ;
sortie_Excel1_tmp.GENDER = row1.GENDER ;
sortie_Excel1_tmp.AGE_RANGE = row1.AGE_RANGE ;
sortie_Excel1_tmp.SIZE_RANGE = row1.SIZE_RANGE ;
sortie_Excel1_tmp.SIZE = row1.SIZE ;
sortie_Excel1_tmp.US_SIZE = row1.US_SIZE ;
sortie_Excel1_tmp.CM_SIZE = row1.CM_SIZE ;
sortie_Excel1_tmp.PRODUCT = row1.PRODUCT ;
sortie_Excel1_tmp.PRODUCT_STATUS = row1.PRODUCT_STATUS ;
sortie_Excel1_tmp.PRODUCT_TIER = row1.PRODUCT_TIER ;
sortie_Excel1_tmp.ACCT_EXCLUS = row1.ACCT_EXCLUS ;
sortie_Excel1_tmp.SIZE_RATIO_SPLIT = "";
sortie_Excel1_tmp.REC_SIZE_SPLIT = "";
sortie_Excel1_tmp.CARTON_QTY = row1.CARTON_QTY ;
sortie_Excel1_tmp.ATTRIBUTE = "";
sortie_Excel1_tmp.UNITS = "";
sortie_Excel1_tmp.EUR_RRP = row1.EUR_RRP ;
sortie_Excel1_tmp.EUR_WSP = row1.EUR_WSP ;
sortie_Excel1_tmp.GBP_RRP = row1.GBP_RRP ;
sortie_Excel1_tmp.GBP_WSP = row1.GBP_WSP ;
sortie_Excel1_tmp.CHF_RRP = row1.CHF_RRP ;
sortie_Excel1_tmp.CHF_WSP = row1.CHF_WSP ;
sortie_Excel1_tmp.NOK_RRP = row1.NOK_RRP ;
sortie_Excel1_tmp.NOK_WSP = row1.NOK_WSP ;
sortie_Excel1_tmp.DKK_RRP = row1.DKK_RRP ;
sortie_Excel1_tmp.DKK_WSP = row1.DKK_WSP ;
sortie_Excel1_tmp.SEK_RRP = row1.SEK_RRP ;
sortie_Excel1_tmp.SEK_WSP = row1.SEK_WSP ;
sortie_Excel1_tmp.EUR_FINN_RRP = row1.EUR_FINN_RRP ;
sortie_Excel1_tmp.EUR_FINN_WSP = row1.EUR_FINN_WSP ;
sortie_Excel1_tmp.FABRICATION = row1.FABRICATION ;
sortie_Excel1_tmp.COO = row1.COO ;
sortie_Excel1_tmp.CUSTOM_TARIFF_CODE = row1.CUSTOM_TARIFF_CODE ;
sortie_Excel1_tmp.UPC = row1.UPC ;
sortie_Excel1_tmp.SMU_TYPE = "";
sortie_Excel1_tmp.EAN = row1.EAN ;
sortie_Excel1_tmp.PRODUCT_CHANNEL = row1.PRODUCT_CHANNEL ;
sortie_Excel1_tmp.SUSTAINABILITY = row1.SUSTAINABILITY ;
sortie_Excel1 = sortie_Excel1_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "sortie_Excel1"
if(sortie_Excel1 != null) { 



	
	/**
	 * [tFilterRow_2 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_Excel1");
					}
					

          row7 = null;
    Operator_tFilterRow_2 ope_tFilterRow_2 = new Operator_tFilterRow_2("&&");
            ope_tFilterRow_2.matches((sortie_Excel1.STYLE == null? false : sortie_Excel1.STYLE.compareTo("") != 0)
                           , "STYLE.compareTo(\"\") != 0 failed");
    
    if (ope_tFilterRow_2.getMatchFlag()) {
              if(row7 == null){ 
                row7 = new row7Struct();
              }
               row7.BRAND = sortie_Excel1.BRAND;
               row7.SEASON = sortie_Excel1.SEASON;
               row7.CATEGORY = sortie_Excel1.CATEGORY;
               row7.REF = sortie_Excel1.REF;
               row7.DESCRIPTION = sortie_Excel1.DESCRIPTION;
               row7.STYLE = sortie_Excel1.STYLE;
               row7.COLOR = sortie_Excel1.COLOR;
               row7.FASHION = sortie_Excel1.FASHION;
               row7.STYLECOLORLABEL = sortie_Excel1.STYLECOLORLABEL;
               row7.COLORNAME = sortie_Excel1.COLORNAME;
               row7.LBL = sortie_Excel1.LBL;
               row7.STYLE_COLOR = sortie_Excel1.STYLE_COLOR;
               row7.GENDER = sortie_Excel1.GENDER;
               row7.AGE_RANGE = sortie_Excel1.AGE_RANGE;
               row7.SIZE_RANGE = sortie_Excel1.SIZE_RANGE;
               row7.SIZE = sortie_Excel1.SIZE;
               row7.US_SIZE = sortie_Excel1.US_SIZE;
               row7.CM_SIZE = sortie_Excel1.CM_SIZE;
               row7.PRODUCT = sortie_Excel1.PRODUCT;
               row7.PRODUCT_STATUS = sortie_Excel1.PRODUCT_STATUS;
               row7.PRODUCT_TIER = sortie_Excel1.PRODUCT_TIER;
               row7.ACCT_EXCLUS = sortie_Excel1.ACCT_EXCLUS;
               row7.SIZE_RATIO_SPLIT = sortie_Excel1.SIZE_RATIO_SPLIT;
               row7.REC_SIZE_SPLIT = sortie_Excel1.REC_SIZE_SPLIT;
               row7.CARTON_QTY = sortie_Excel1.CARTON_QTY;
               row7.ATTRIBUTE = sortie_Excel1.ATTRIBUTE;
               row7.UNITS = sortie_Excel1.UNITS;
               row7.EUR_RRP = sortie_Excel1.EUR_RRP;
               row7.EUR_WSP = sortie_Excel1.EUR_WSP;
               row7.GBP_RRP = sortie_Excel1.GBP_RRP;
               row7.GBP_WSP = sortie_Excel1.GBP_WSP;
               row7.CHF_RRP = sortie_Excel1.CHF_RRP;
               row7.CHF_WSP = sortie_Excel1.CHF_WSP;
               row7.NOK_RRP = sortie_Excel1.NOK_RRP;
               row7.NOK_WSP = sortie_Excel1.NOK_WSP;
               row7.DKK_RRP = sortie_Excel1.DKK_RRP;
               row7.DKK_WSP = sortie_Excel1.DKK_WSP;
               row7.SEK_RRP = sortie_Excel1.SEK_RRP;
               row7.SEK_WSP = sortie_Excel1.SEK_WSP;
               row7.EUR_FINN_RRP = sortie_Excel1.EUR_FINN_RRP;
               row7.EUR_FINN_WSP = sortie_Excel1.EUR_FINN_WSP;
               row7.FABRICATION = sortie_Excel1.FABRICATION;
               row7.COO = sortie_Excel1.COO;
               row7.CUSTOM_TARIFF_CODE = sortie_Excel1.CUSTOM_TARIFF_CODE;
               row7.UPC = sortie_Excel1.UPC;
               row7.SMU_TYPE = sortie_Excel1.SMU_TYPE;
               row7.EAN = sortie_Excel1.EAN;
               row7.PRODUCT_CHANNEL = sortie_Excel1.PRODUCT_CHANNEL;
               row7.SUSTAINABILITY = sortie_Excel1.SUSTAINABILITY;    
      nb_line_ok_tFilterRow_2++;
    } else {
      nb_line_reject_tFilterRow_2++;
    }

nb_line_tFilterRow_2++;

 


	tos_count_tFilterRow_2++;

/**
 * [tFilterRow_2 main ] stop
 */
	
	/**
	 * [tFilterRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";

	

 



/**
 * [tFilterRow_2 process_data_begin ] stop
 */
// Start of branch "row7"
if(row7 != null) { 



	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row7");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_4 = false;
		  boolean mainRowRejected_tMap_4 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "copyOfcopyOfsortie_fashion" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopcopyOfcopyOfsortie_fashion = false;
       		  	    	
       		  	    	
 							copyOfcopyOfsortie_fashionStruct copyOfcopyOfsortie_fashionObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_4 = false;
								
                        		    		copyOfcopyOfsortie_fashionHashKey.CODE = StringHandling.DOWNCASE(row7.LBL ) ;
                        		    		

								
		                        	copyOfcopyOfsortie_fashionHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_copyOfcopyOfsortie_fashion.lookup( copyOfcopyOfsortie_fashionHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_copyOfcopyOfsortie_fashion != null && tHash_Lookup_copyOfcopyOfsortie_fashion.getCount(copyOfcopyOfsortie_fashionHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'copyOfcopyOfsortie_fashion' and it contains more one result from keys :  copyOfcopyOfsortie_fashion.CODE = '" + copyOfcopyOfsortie_fashionHashKey.CODE + "'");
								} // G 071
							

							copyOfcopyOfsortie_fashionStruct copyOfcopyOfsortie_fashion = null;
                    		  	 
							   
                    		  	 
	       		  	    	copyOfcopyOfsortie_fashionStruct fromLookup_copyOfcopyOfsortie_fashion = null;
							copyOfcopyOfsortie_fashion = copyOfcopyOfsortie_fashionDefault;
										 
							
								 
							
							
								if (tHash_Lookup_copyOfcopyOfsortie_fashion !=null && tHash_Lookup_copyOfcopyOfsortie_fashion.hasNext()) { // G 099
								
							
								
								fromLookup_copyOfcopyOfsortie_fashion = tHash_Lookup_copyOfcopyOfsortie_fashion.next();

							
							
								} // G 099
							
							

							if(fromLookup_copyOfcopyOfsortie_fashion != null) {
								copyOfcopyOfsortie_fashion = fromLookup_copyOfcopyOfsortie_fashion;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

sortie_Excel = null;


// # Output table : 'sortie_Excel'
sortie_Excel_tmp.BRAND = row7.BRAND.replaceAll (" ", " ")  ;
sortie_Excel_tmp.SEASON = row7.SEASON.replaceAll (" ", " ")  ;
sortie_Excel_tmp.CATEGORY = row7.CATEGORY;
sortie_Excel_tmp.REF = row7.REF.replaceAll (" ", " ")  ;
sortie_Excel_tmp.DESCRIPTION = row7.DESCRIPTION.replaceAll (" ", " ") ;
sortie_Excel_tmp.STYLE = row7.STYLE.replaceAll (" ", " ")  ;
sortie_Excel_tmp.COLOR = row7.COLOR.replaceAll (" ", " ")  ;
sortie_Excel_tmp.FASHION = row7.FASHION.replaceAll (" ", " ")  ;
sortie_Excel_tmp.STYLECOLORLABEL = row7.STYLECOLORLABEL.replaceAll (" ", " ")  ;
sortie_Excel_tmp.COLORNAME = row7.COLORNAME.replaceAll (" ", " ")  ;
sortie_Excel_tmp.LBL = row7.LBL.replaceAll (" ", " ")  ;
sortie_Excel_tmp.STYLE_COLOR = row7.STYLE_COLOR.replaceAll (" ", " ")  ;
sortie_Excel_tmp.GENDER = row7.GENDER.replaceAll (" ", " ")  ;
sortie_Excel_tmp.AGE_RANGE = row7.AGE_RANGE.replaceAll (" ", " ")  ;
sortie_Excel_tmp.SIZE_RANGE = row7.SIZE_RANGE.replaceAll (" ", " ") ;
sortie_Excel_tmp.SIZE = row7.SIZE.replaceAll (" ", " ") ;
sortie_Excel_tmp.US_SIZE = row7.US_SIZE;
sortie_Excel_tmp.CM_SIZE = row7.CM_SIZE;
sortie_Excel_tmp.PRODUCT = row7.PRODUCT.replaceAll (" ", " ") ;
sortie_Excel_tmp.PRODUCT_STATUS = row7.PRODUCT_STATUS.replaceAll (" ", " ") ;
sortie_Excel_tmp.PRODUCT_TIER = row7.PRODUCT_TIER;
sortie_Excel_tmp.ACCT_EXCLUS = row7.ACCT_EXCLUS;
sortie_Excel_tmp.SIZE_RATIO_SPLIT = row7.SIZE_RATIO_SPLIT;
sortie_Excel_tmp.REC_SIZE_SPLIT = row7.REC_SIZE_SPLIT;
sortie_Excel_tmp.CARTON_QTY = row7.CARTON_QTY;
sortie_Excel_tmp.ATTRIBUTE = row7.ATTRIBUTE;
sortie_Excel_tmp.UNITS = row7.UNITS;
sortie_Excel_tmp.EUR_RRP = row7.EUR_RRP ;
sortie_Excel_tmp.EUR_WSP = row7.EUR_WSP ;
sortie_Excel_tmp.GBP_RRP = row7.GBP_RRP ;
sortie_Excel_tmp.GBP_WSP = row7.GBP_WSP ;
sortie_Excel_tmp.CHF_RRP = row7.CHF_RRP ;
sortie_Excel_tmp.CHF_WSP = row7.CHF_WSP ;
sortie_Excel_tmp.NOK_RRP = row7.NOK_RRP ;
sortie_Excel_tmp.NOK_WSP = row7.NOK_WSP ;
sortie_Excel_tmp.DKK_RRP = row7.DKK_RRP ;
sortie_Excel_tmp.DKK_WSP = row7.DKK_WSP ;
sortie_Excel_tmp.SEK_RRP = row7.SEK_RRP ;
sortie_Excel_tmp.SEK_WSP = row7.SEK_WSP ;
sortie_Excel_tmp.EUR_FINN_RRP = row7.EUR_FINN_RRP ;
sortie_Excel_tmp.EUR_FINN_WSP = row7.EUR_FINN_WSP ;
sortie_Excel_tmp.FABRICATION = row7.FABRICATION ;
sortie_Excel_tmp.COO = row7.COO ;
sortie_Excel_tmp.CUSTOM_TARIFF_CODE = row7.CUSTOM_TARIFF_CODE ;
sortie_Excel_tmp.UPC = row7.UPC ;
sortie_Excel_tmp.SMU_TYPE = row7.SMU_TYPE ;
sortie_Excel_tmp.EAN = row7.EAN ;
sortie_Excel_tmp.LABELD365 = copyOfcopyOfsortie_fashion.LABEL ;
sortie_Excel_tmp.PRODUCT_CHANNEL = row7.PRODUCT_CHANNEL;
sortie_Excel_tmp.SUSTAINABILITY = row7.SUSTAINABILITY ;
sortie_Excel = sortie_Excel_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "sortie_Excel"
if(sortie_Excel != null) { 



	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_Excel");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

sortie_full = null;
sortie_product = null;


// # Output table : 'sortie_full'
sortie_full_tmp.BRAND = sortie_Excel.BRAND ;
sortie_full_tmp.SEASON = sortie_Excel.SEASON ;
sortie_full_tmp.CATEGORY = sortie_Excel.CATEGORY ;
sortie_full_tmp.REF = sortie_Excel.REF ;
sortie_full_tmp.DESCRIPTION = sortie_Excel.DESCRIPTION ;
sortie_full_tmp.STYLE = sortie_Excel.STYLE ;
sortie_full_tmp.COLOR = sortie_Excel.COLOR ;
sortie_full_tmp.FASHION = sortie_Excel.FASHION ;
sortie_full_tmp.STYLECOLORLABEL = sortie_Excel.STYLECOLORLABEL ;
sortie_full_tmp.COLORNAME = sortie_Excel.COLORNAME ;
sortie_full_tmp.LBL = sortie_Excel.LBL ;
sortie_full_tmp.STYLE_COLOR = sortie_Excel.STYLE_COLOR ;
sortie_full_tmp.GENDER = sortie_Excel.GENDER ;
sortie_full_tmp.AGE_RANGE = sortie_Excel.AGE_RANGE ;
sortie_full_tmp.SIZE_RANGE = sortie_Excel.SIZE_RANGE ;
sortie_full_tmp.SIZE = sortie_Excel.SIZE ;
sortie_full_tmp.US_SIZE = sortie_Excel.US_SIZE ;
sortie_full_tmp.CM_SIZE = sortie_Excel.CM_SIZE ;
sortie_full_tmp.PRODUCT = sortie_Excel.PRODUCT ;
sortie_full_tmp.PRODUCT_STATUS = sortie_Excel.PRODUCT_STATUS ;
sortie_full_tmp.PRODUCT_TIER = sortie_Excel.PRODUCT_TIER ;
sortie_full_tmp.ACCT_EXCLUS = sortie_Excel.ACCT_EXCLUS ;
sortie_full_tmp.SIZE_RATIO_SPLIT = sortie_Excel.SIZE_RATIO_SPLIT ;
sortie_full_tmp.REC_SIZE_SPLIT = sortie_Excel.REC_SIZE_SPLIT ;
sortie_full_tmp.CARTON_QTY = sortie_Excel.CARTON_QTY ;
sortie_full_tmp.ATTRIBUTE = sortie_Excel.ATTRIBUTE ;
sortie_full_tmp.UNITS = sortie_Excel.UNITS ;
sortie_full_tmp.EUR_RRP = sortie_Excel.EUR_RRP ;
sortie_full_tmp.EUR_WSP = sortie_Excel.EUR_WSP ;
sortie_full_tmp.GBP_RRP = sortie_Excel.GBP_RRP ;
sortie_full_tmp.GBP_WSP = sortie_Excel.GBP_WSP ;
sortie_full_tmp.CHF_RRP = sortie_Excel.CHF_RRP ;
sortie_full_tmp.CHF_WSP = sortie_Excel.CHF_WSP ;
sortie_full_tmp.NOK_RRP = sortie_Excel.NOK_RRP ;
sortie_full_tmp.NOK_WSP = sortie_Excel.NOK_WSP ;
sortie_full_tmp.DKK_RRP = sortie_Excel.DKK_RRP ;
sortie_full_tmp.DKK_WSP = sortie_Excel.DKK_WSP ;
sortie_full_tmp.SEK_RRP = sortie_Excel.SEK_RRP ;
sortie_full_tmp.SEK_WSP = sortie_Excel.SEK_WSP ;
sortie_full_tmp.EUR_FINN_RRP = sortie_Excel.EUR_FINN_RRP ;
sortie_full_tmp.EUR_FINN_WSP = sortie_Excel.EUR_FINN_WSP ;
sortie_full_tmp.FABRICATION = sortie_Excel.FABRICATION ;
sortie_full_tmp.COO = sortie_Excel.COO ;
sortie_full_tmp.CUSTOM_TARIFF_CODE = sortie_Excel.CUSTOM_TARIFF_CODE ;
sortie_full_tmp.UPC = sortie_Excel.UPC ;
sortie_full_tmp.SMU_TYPE = sortie_Excel.SMU_TYPE ;
sortie_full_tmp.EAN = sortie_Excel.EAN ;
sortie_full_tmp.LABELD365 = sortie_Excel.LABELD365 ;
sortie_full_tmp.PRODUCT_CHANNEL = sortie_Excel.PRODUCT_CHANNEL ;
sortie_full_tmp.SUSTAINABILITY = sortie_Excel.SUSTAINABILITY ;
sortie_full = sortie_full_tmp;

// # Output table : 'sortie_product'
sortie_product_tmp.PRODUCTSEARCHNAME = sortie_Excel.REF ;
sortie_product_tmp.PRODUCTDESCRIPTION = sortie_Excel.DESCRIPTION ;
sortie_product_tmp.PRODUCTNAME = sortie_Excel.DESCRIPTION ;
sortie_product_tmp.PRODUCTNUMBER = sortie_Excel.STYLE ;
sortie_product_tmp.RETAILPRODUCTCATEGORYNAME = sortie_Excel.BRAND;
sortie_product_tmp.PRODUCTSUBTYPE = "ProductMaster";
sortie_product_tmp.PRODUCTTYPE = "Item";
sortie_product_tmp.KRFBRANDID = sortie_Excel.BRAND ;
sortie_product = sortie_product_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "sortie_full"
if(sortie_full != null) { 



	
	/**
	 * [tLogRow_2 main ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_full");
					}
					

 
     row6 = sortie_full;


	tos_count_tLogRow_2++;

/**
 * [tLogRow_2 main ] stop
 */
	
	/**
	 * [tLogRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row6");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_3 = false;
		  boolean mainRowRejected_tMap_3 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

copyOfsortie_full = null;
copyOfsortie_product = null;


// # Output table : 'copyOfsortie_full'
copyOfsortie_full_tmp.BRAND = row6.BRAND ;
copyOfsortie_full_tmp.SEASON = row6.SEASON ;
copyOfsortie_full_tmp.CATEGORY = row6.CATEGORY ;
copyOfsortie_full_tmp.REF = row6.REF ;
copyOfsortie_full_tmp.DESCRIPTION = row6.DESCRIPTION ;
copyOfsortie_full_tmp.STYLE = row6.STYLE ;
copyOfsortie_full_tmp.COLOR = row6.COLOR ;
copyOfsortie_full_tmp.FASHION = row6.FASHION ;
copyOfsortie_full_tmp.STYLECOLORLABEL = row6.STYLECOLORLABEL ;
copyOfsortie_full_tmp.COLORNAME = row6.COLORNAME ;
copyOfsortie_full_tmp.LBL = row6.LBL ;
copyOfsortie_full_tmp.STYLE_COLOR = row6.STYLE_COLOR ;
copyOfsortie_full_tmp.GENDER = row6.GENDER ;
copyOfsortie_full_tmp.AGE_RANGE = row6.AGE_RANGE ;
copyOfsortie_full_tmp.SIZE_RANGE = row6.SIZE_RANGE ;
copyOfsortie_full_tmp.SIZE = row6.SIZE ;
copyOfsortie_full_tmp.US_SIZE = row6.US_SIZE ;
copyOfsortie_full_tmp.CM_SIZE = row6.CM_SIZE ;
copyOfsortie_full_tmp.PRODUCT = row6.PRODUCT ;
copyOfsortie_full_tmp.PRODUCT_STATUS = row6.PRODUCT_STATUS ;
copyOfsortie_full_tmp.PRODUCT_TIER = row6.PRODUCT_TIER ;
copyOfsortie_full_tmp.ACCT_EXCLUS = row6.ACCT_EXCLUS ;
copyOfsortie_full_tmp.SIZE_RATIO_SPLIT = row6.SIZE_RATIO_SPLIT ;
copyOfsortie_full_tmp.REC_SIZE_SPLIT = row6.REC_SIZE_SPLIT ;
copyOfsortie_full_tmp.CARTON_QTY = row6.CARTON_QTY ;
copyOfsortie_full_tmp.ATTRIBUTE = row6.ATTRIBUTE ;
copyOfsortie_full_tmp.UNITS = row6.UNITS ;
copyOfsortie_full_tmp.EUR_RRP = row6.EUR_RRP ;
copyOfsortie_full_tmp.EUR_WSP = row6.EUR_WSP ;
copyOfsortie_full_tmp.GBP_RRP = row6.GBP_RRP ;
copyOfsortie_full_tmp.GBP_WSP = row6.GBP_WSP ;
copyOfsortie_full_tmp.CHF_RRP = row6.CHF_RRP ;
copyOfsortie_full_tmp.CHF_WSP = row6.CHF_WSP ;
copyOfsortie_full_tmp.NOK_RRP = row6.NOK_RRP ;
copyOfsortie_full_tmp.NOK_WSP = row6.NOK_WSP ;
copyOfsortie_full_tmp.DKK_RRP = row6.DKK_RRP ;
copyOfsortie_full_tmp.DKK_WSP = row6.DKK_WSP ;
copyOfsortie_full_tmp.SEK_RRP = row6.SEK_RRP ;
copyOfsortie_full_tmp.SEK_WSP = row6.SEK_WSP ;
copyOfsortie_full_tmp.EUR_FINN_RRP = row6.EUR_FINN_RRP ;
copyOfsortie_full_tmp.EUR_FINN_WSP = row6.EUR_FINN_WSP ;
copyOfsortie_full_tmp.FABRICATION = row6.FABRICATION ;
copyOfsortie_full_tmp.COO = "";
copyOfsortie_full_tmp.CUSTOM_TARIFF_CODE = row6.CUSTOM_TARIFF_CODE ;
copyOfsortie_full_tmp.UPC = row6.UPC ;
copyOfsortie_full_tmp.SMU_TYPE = row6.SMU_TYPE ;
copyOfsortie_full_tmp.EAN = row6.EAN ;
copyOfsortie_full_tmp.LABELD365 = row6.LABELD365 ;
copyOfsortie_full_tmp.PRODUCT_CHANNEL = row6.PRODUCT_CHANNEL ;
copyOfsortie_full_tmp.SUSTAINABILITY = row6.SUSTAINABILITY ;
copyOfsortie_full = copyOfsortie_full_tmp;

// # Output table : 'copyOfsortie_product'
copyOfsortie_product_tmp.ITEMNUMBER = row6.STYLE ;
copyOfsortie_product_tmp.ORIGINCOUNTRYREGIONID = "";
copyOfsortie_product_tmp.PRODUCTCOVERAGEGROUPID = "";
copyOfsortie_product_tmp.PRODUCTNUMBER = row6.STYLE ;
copyOfsortie_product_tmp.PRODUCTSEARCHNAME = row6.REF ;
copyOfsortie_product_tmp.PRODUCTSUBTYPE = "ProductMaster";
copyOfsortie_product_tmp.PRODUCTTYPE = "Item";
copyOfsortie_product_tmp.SEARCHNAME = row6.REF ;
copyOfsortie_product_tmp.SPLWMSLOCATIONID = StringHandling.DOWNCASE(row6.BRAND ).equals("levis") ? "Cambrai" : "Cambrai" ;
copyOfsortie_product_tmp.ISUNITCOSTPRODUCTVARIANTSPECIFIC = "Yes";
copyOfsortie_product_tmp.GPLMEMO = row6.DESCRIPTION ;
copyOfsortie_product_tmp.DEFAULTLEDGERDIMENSIONDISPLAYVALUE = StringHandling.DOWNCASE(row6.BRAND ).equals("levis") ? "----LEV---" : 
(
StringHandling.DOWNCASE(row6.BRAND ).equals("nike") ? "----NIK---" : 
(
StringHandling.DOWNCASE(row6.BRAND ).equals("converse") ? "----CNV---" : 
(
StringHandling.DOWNCASE(row6.BRAND ).equals("jordan") ? "----JOR---" : 
(
StringHandling.DOWNCASE(row6.BRAND ).equals("polo") ? "----RAL---" :
(
StringHandling.DOWNCASE(row6.BRAND ).equals("huggies") ? "----HUG---" :
(
StringHandling.DOWNCASE(row6.BRAND ).equals("russell_wl") ? "----RUS---" : 
(
StringHandling.DOWNCASE(row6.BRAND ).equals("blanks") ? "----BLK---" : 
(
StringHandling.DOWNCASE(row6.BRAND ).equals("hurley") ? "----HUR---" : ""
)
)
)
)
)
) 
)
) ;
copyOfsortie_product = copyOfsortie_product_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "copyOfsortie_full"
if(copyOfsortie_full != null) { 



	
	/**
	 * [tMap_5 main ] start
	 */

	

	
	
	currentComponent="tMap_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfsortie_full");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_5 = false;
		  boolean mainRowRejected_tMap_5 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
        // ###############################
        // # Output tables

copyOfcopyOfsortie_full = null;
copyOfcopyOfsortie_product = null;


// # Output table : 'copyOfcopyOfsortie_full'
copyOfcopyOfsortie_full_tmp.BRAND = copyOfsortie_full.BRAND ;
copyOfcopyOfsortie_full_tmp.SEASON = copyOfsortie_full.SEASON ;
copyOfcopyOfsortie_full_tmp.CATEGORY = copyOfsortie_full.CATEGORY ;
copyOfcopyOfsortie_full_tmp.REF = copyOfsortie_full.REF ;
copyOfcopyOfsortie_full_tmp.DESCRIPTION = copyOfsortie_full.DESCRIPTION ;
copyOfcopyOfsortie_full_tmp.STYLE = copyOfsortie_full.STYLE ;
copyOfcopyOfsortie_full_tmp.COLOR = copyOfsortie_full.COLOR ;
copyOfcopyOfsortie_full_tmp.FASHION = copyOfsortie_full.FASHION ;
copyOfcopyOfsortie_full_tmp.STYLECOLORLABEL = copyOfsortie_full.STYLECOLORLABEL ;
copyOfcopyOfsortie_full_tmp.COLORNAME = copyOfsortie_full.COLORNAME ;
copyOfcopyOfsortie_full_tmp.LBL = copyOfsortie_full.LBL ;
copyOfcopyOfsortie_full_tmp.STYLE_COLOR = copyOfsortie_full.STYLE_COLOR ;
copyOfcopyOfsortie_full_tmp.GENDER = copyOfsortie_full.GENDER ;
copyOfcopyOfsortie_full_tmp.AGE_RANGE = copyOfsortie_full.AGE_RANGE ;
copyOfcopyOfsortie_full_tmp.SIZE_RANGE = copyOfsortie_full.SIZE_RANGE ;
copyOfcopyOfsortie_full_tmp.SIZE = copyOfsortie_full.SIZE ;
copyOfcopyOfsortie_full_tmp.US_SIZE = copyOfsortie_full.US_SIZE ;
copyOfcopyOfsortie_full_tmp.CM_SIZE = copyOfsortie_full.CM_SIZE ;
copyOfcopyOfsortie_full_tmp.PRODUCT = copyOfsortie_full.PRODUCT ;
copyOfcopyOfsortie_full_tmp.PRODUCT_STATUS = copyOfsortie_full.PRODUCT_STATUS ;
copyOfcopyOfsortie_full_tmp.PRODUCT_TIER = copyOfsortie_full.PRODUCT_TIER ;
copyOfcopyOfsortie_full_tmp.ACCT_EXCLUS = copyOfsortie_full.ACCT_EXCLUS ;
copyOfcopyOfsortie_full_tmp.SIZE_RATIO_SPLIT = copyOfsortie_full.SIZE_RATIO_SPLIT ;
copyOfcopyOfsortie_full_tmp.REC_SIZE_SPLIT = copyOfsortie_full.REC_SIZE_SPLIT ;
copyOfcopyOfsortie_full_tmp.CARTON_QTY = copyOfsortie_full.CARTON_QTY ;
copyOfcopyOfsortie_full_tmp.ATTRIBUTE = copyOfsortie_full.ATTRIBUTE ;
copyOfcopyOfsortie_full_tmp.UNITS = copyOfsortie_full.UNITS ;
copyOfcopyOfsortie_full_tmp.EUR_RRP = copyOfsortie_full.EUR_RRP ;
copyOfcopyOfsortie_full_tmp.EUR_WSP = copyOfsortie_full.EUR_WSP ;
copyOfcopyOfsortie_full_tmp.GBP_RRP = copyOfsortie_full.GBP_RRP ;
copyOfcopyOfsortie_full_tmp.GBP_WSP = copyOfsortie_full.GBP_WSP ;
copyOfcopyOfsortie_full_tmp.CHF_RRP = copyOfsortie_full.CHF_RRP ;
copyOfcopyOfsortie_full_tmp.CHF_WSP = copyOfsortie_full.CHF_WSP ;
copyOfcopyOfsortie_full_tmp.NOK_RRP = copyOfsortie_full.NOK_RRP ;
copyOfcopyOfsortie_full_tmp.NOK_WSP = copyOfsortie_full.NOK_WSP ;
copyOfcopyOfsortie_full_tmp.DKK_RRP = copyOfsortie_full.DKK_RRP ;
copyOfcopyOfsortie_full_tmp.DKK_WSP = copyOfsortie_full.DKK_WSP ;
copyOfcopyOfsortie_full_tmp.SEK_RRP = copyOfsortie_full.SEK_RRP ;
copyOfcopyOfsortie_full_tmp.SEK_WSP = copyOfsortie_full.SEK_WSP ;
copyOfcopyOfsortie_full_tmp.EUR_FINN_RRP = copyOfsortie_full.EUR_FINN_RRP ;
copyOfcopyOfsortie_full_tmp.EUR_FINN_WSP = copyOfsortie_full.EUR_FINN_WSP ;
copyOfcopyOfsortie_full_tmp.FABRICATION = copyOfsortie_full.FABRICATION ;
copyOfcopyOfsortie_full_tmp.COO = copyOfsortie_full.COO ;
copyOfcopyOfsortie_full_tmp.CUSTOM_TARIFF_CODE = copyOfsortie_full.CUSTOM_TARIFF_CODE ;
copyOfcopyOfsortie_full_tmp.UPC = copyOfsortie_full.UPC ;
copyOfcopyOfsortie_full_tmp.SMU_TYPE = copyOfsortie_full.SMU_TYPE ;
copyOfcopyOfsortie_full_tmp.EAN = copyOfsortie_full.EAN ;
copyOfcopyOfsortie_full_tmp.LABELD365 = copyOfsortie_full.LABELD365 ;
copyOfcopyOfsortie_full_tmp.PRODUCT_CHANNEL = copyOfsortie_full.PRODUCT_CHANNEL ;
copyOfcopyOfsortie_full_tmp.SUSTAINABILITY = copyOfsortie_full.SUSTAINABILITY ;
copyOfcopyOfsortie_full = copyOfcopyOfsortie_full_tmp;

// # Output table : 'copyOfcopyOfsortie_product'
copyOfcopyOfsortie_product_tmp.PRODUCTNUMBER = copyOfsortie_full.STYLE ;
copyOfcopyOfsortie_product_tmp.ATTRIBUTETYPENAME = "Gender";
copyOfcopyOfsortie_product_tmp.ATTRIBUTENAME = "Gender";
copyOfcopyOfsortie_product_tmp.TEXTVALUE = copyOfsortie_full.GENDER ;
copyOfcopyOfsortie_product_tmp.INTEGERVALUE = null;
copyOfcopyOfsortie_product = copyOfcopyOfsortie_product_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_5 = false;










 


	tos_count_tMap_5++;

/**
 * [tMap_5 main ] stop
 */
	
	/**
	 * [tMap_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_begin ] stop
 */
// Start of branch "copyOfcopyOfsortie_full"
if(copyOfcopyOfsortie_full != null) { 



	
	/**
	 * [tMap_6 main ] start
	 */

	

	
	
	currentComponent="tMap_6";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfcopyOfsortie_full");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_6 = false;
		  boolean mainRowRejected_tMap_6 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
        // ###############################
        // # Output tables

copyOfcopyOfcopyOfsortie_full = null;
copyOfcopyOfcopyOfsortie_product = null;


// # Output table : 'copyOfcopyOfcopyOfsortie_full'
copyOfcopyOfcopyOfsortie_full_tmp.BRAND = copyOfcopyOfsortie_full.BRAND ;
copyOfcopyOfcopyOfsortie_full_tmp.SEASON = copyOfcopyOfsortie_full.SEASON ;
copyOfcopyOfcopyOfsortie_full_tmp.CATEGORY = copyOfcopyOfsortie_full.CATEGORY ;
copyOfcopyOfcopyOfsortie_full_tmp.REF = copyOfcopyOfsortie_full.REF ;
copyOfcopyOfcopyOfsortie_full_tmp.DESCRIPTION = copyOfcopyOfsortie_full.DESCRIPTION ;
copyOfcopyOfcopyOfsortie_full_tmp.STYLE = copyOfcopyOfsortie_full.STYLE ;
copyOfcopyOfcopyOfsortie_full_tmp.COLOR = copyOfcopyOfsortie_full.COLOR ;
copyOfcopyOfcopyOfsortie_full_tmp.FASHION = copyOfcopyOfsortie_full.FASHION ;
copyOfcopyOfcopyOfsortie_full_tmp.STYLECOLORLABEL = copyOfcopyOfsortie_full.STYLECOLORLABEL ;
copyOfcopyOfcopyOfsortie_full_tmp.COLORNAME = copyOfcopyOfsortie_full.COLORNAME ;
copyOfcopyOfcopyOfsortie_full_tmp.LBL = copyOfcopyOfsortie_full.LBL ;
copyOfcopyOfcopyOfsortie_full_tmp.STYLE_COLOR = copyOfcopyOfsortie_full.STYLE_COLOR ;
copyOfcopyOfcopyOfsortie_full_tmp.GENDER = copyOfcopyOfsortie_full.GENDER ;
copyOfcopyOfcopyOfsortie_full_tmp.AGE_RANGE = copyOfcopyOfsortie_full.AGE_RANGE ;
copyOfcopyOfcopyOfsortie_full_tmp.SIZE_RANGE = copyOfcopyOfsortie_full.SIZE_RANGE ;
copyOfcopyOfcopyOfsortie_full_tmp.SIZE = copyOfcopyOfsortie_full.SIZE ;
copyOfcopyOfcopyOfsortie_full_tmp.US_SIZE = copyOfcopyOfsortie_full.US_SIZE ;
copyOfcopyOfcopyOfsortie_full_tmp.CM_SIZE = copyOfcopyOfsortie_full.CM_SIZE ;
copyOfcopyOfcopyOfsortie_full_tmp.PRODUCT = copyOfcopyOfsortie_full.PRODUCT ;
copyOfcopyOfcopyOfsortie_full_tmp.PRODUCT_STATUS = copyOfcopyOfsortie_full.PRODUCT_STATUS ;
copyOfcopyOfcopyOfsortie_full_tmp.PRODUCT_TIER = copyOfcopyOfsortie_full.PRODUCT_TIER ;
copyOfcopyOfcopyOfsortie_full_tmp.ACCT_EXCLUS = copyOfcopyOfsortie_full.ACCT_EXCLUS ;
copyOfcopyOfcopyOfsortie_full_tmp.SIZE_RATIO_SPLIT = copyOfcopyOfsortie_full.SIZE_RATIO_SPLIT ;
copyOfcopyOfcopyOfsortie_full_tmp.REC_SIZE_SPLIT = copyOfcopyOfsortie_full.REC_SIZE_SPLIT ;
copyOfcopyOfcopyOfsortie_full_tmp.CARTON_QTY = copyOfcopyOfsortie_full.CARTON_QTY ;
copyOfcopyOfcopyOfsortie_full_tmp.ATTRIBUTE = copyOfcopyOfsortie_full.ATTRIBUTE ;
copyOfcopyOfcopyOfsortie_full_tmp.UNITS = copyOfcopyOfsortie_full.UNITS ;
copyOfcopyOfcopyOfsortie_full_tmp.EUR_RRP = copyOfcopyOfsortie_full.EUR_RRP ;
copyOfcopyOfcopyOfsortie_full_tmp.EUR_WSP = copyOfcopyOfsortie_full.EUR_WSP ;
copyOfcopyOfcopyOfsortie_full_tmp.GBP_RRP = copyOfcopyOfsortie_full.GBP_RRP ;
copyOfcopyOfcopyOfsortie_full_tmp.GBP_WSP = copyOfcopyOfsortie_full.GBP_WSP ;
copyOfcopyOfcopyOfsortie_full_tmp.CHF_RRP = copyOfcopyOfsortie_full.CHF_RRP ;
copyOfcopyOfcopyOfsortie_full_tmp.CHF_WSP = copyOfcopyOfsortie_full.CHF_WSP ;
copyOfcopyOfcopyOfsortie_full_tmp.NOK_RRP = copyOfcopyOfsortie_full.NOK_RRP ;
copyOfcopyOfcopyOfsortie_full_tmp.NOK_WSP = copyOfcopyOfsortie_full.NOK_WSP ;
copyOfcopyOfcopyOfsortie_full_tmp.DKK_RRP = copyOfcopyOfsortie_full.DKK_RRP ;
copyOfcopyOfcopyOfsortie_full_tmp.DKK_WSP = copyOfcopyOfsortie_full.DKK_WSP ;
copyOfcopyOfcopyOfsortie_full_tmp.SEK_RRP = copyOfcopyOfsortie_full.SEK_RRP ;
copyOfcopyOfcopyOfsortie_full_tmp.SEK_WSP = copyOfcopyOfsortie_full.SEK_WSP ;
copyOfcopyOfcopyOfsortie_full_tmp.EUR_FINN_RRP = copyOfcopyOfsortie_full.EUR_FINN_RRP ;
copyOfcopyOfcopyOfsortie_full_tmp.EUR_FINN_WSP = copyOfcopyOfsortie_full.EUR_FINN_WSP ;
copyOfcopyOfcopyOfsortie_full_tmp.FABRICATION = copyOfcopyOfsortie_full.FABRICATION ;
copyOfcopyOfcopyOfsortie_full_tmp.COO = copyOfcopyOfsortie_full.COO ;
copyOfcopyOfcopyOfsortie_full_tmp.CUSTOM_TARIFF_CODE = copyOfcopyOfsortie_full.CUSTOM_TARIFF_CODE ;
copyOfcopyOfcopyOfsortie_full_tmp.UPC = copyOfcopyOfsortie_full.UPC ;
copyOfcopyOfcopyOfsortie_full_tmp.SMU_TYPE = copyOfcopyOfsortie_full.SMU_TYPE ;
copyOfcopyOfcopyOfsortie_full_tmp.EAN = copyOfcopyOfsortie_full.EAN ;
copyOfcopyOfcopyOfsortie_full_tmp.LABELD365 = copyOfcopyOfsortie_full.LABELD365 ;
copyOfcopyOfcopyOfsortie_full_tmp.PRODUCT_CHANNEL = copyOfcopyOfsortie_full.PRODUCT_CHANNEL ;
copyOfcopyOfcopyOfsortie_full_tmp.SUSTAINABILITY = copyOfcopyOfsortie_full.SUSTAINABILITY ;
copyOfcopyOfcopyOfsortie_full = copyOfcopyOfcopyOfsortie_full_tmp;

// # Output table : 'copyOfcopyOfcopyOfsortie_product'
copyOfcopyOfcopyOfsortie_product_tmp.PRODUCTNUMBER = copyOfcopyOfsortie_full.STYLE ;
copyOfcopyOfcopyOfsortie_product_tmp.ATTRIBUTETYPENAME = "Age Group";
copyOfcopyOfcopyOfsortie_product_tmp.ATTRIBUTENAME = "Age Group";
copyOfcopyOfcopyOfsortie_product_tmp.TEXTVALUE = copyOfcopyOfsortie_full.AGE_RANGE ;
copyOfcopyOfcopyOfsortie_product_tmp.INTEGERVALUE = null;
copyOfcopyOfcopyOfsortie_product = copyOfcopyOfcopyOfsortie_product_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_6 = false;










 


	tos_count_tMap_6++;

/**
 * [tMap_6 main ] stop
 */
	
	/**
	 * [tMap_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 process_data_begin ] stop
 */
// Start of branch "copyOfcopyOfcopyOfsortie_full"
if(copyOfcopyOfcopyOfsortie_full != null) { 



	
	/**
	 * [tMap_7 main ] start
	 */

	

	
	
	currentComponent="tMap_7";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfcopyOfcopyOfsortie_full");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_7 = false;
		  boolean mainRowRejected_tMap_7 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_7__Struct Var = Var__tMap_7;// ###############################
        // ###############################
        // # Output tables

copyOfcopyOfcopyOfcopyOfsortie_full = null;
copyOfcopyOfcopyOfcopyOfsortie_product = null;


// # Output table : 'copyOfcopyOfcopyOfcopyOfsortie_full'
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.BRAND = copyOfcopyOfcopyOfsortie_full.BRAND ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.SEASON = copyOfcopyOfcopyOfsortie_full.SEASON ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.CATEGORY = copyOfcopyOfcopyOfsortie_full.CATEGORY ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.REF = copyOfcopyOfcopyOfsortie_full.REF ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.DESCRIPTION = copyOfcopyOfcopyOfsortie_full.DESCRIPTION ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.STYLE = copyOfcopyOfcopyOfsortie_full.STYLE ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.COLOR = copyOfcopyOfcopyOfsortie_full.COLOR ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.FASHION = copyOfcopyOfcopyOfsortie_full.FASHION ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.STYLECOLORLABEL = copyOfcopyOfcopyOfsortie_full.STYLECOLORLABEL ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.COLORNAME = copyOfcopyOfcopyOfsortie_full.COLORNAME ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.LBL = copyOfcopyOfcopyOfsortie_full.LBL ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.STYLE_COLOR = copyOfcopyOfcopyOfsortie_full.STYLE_COLOR ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.GENDER = copyOfcopyOfcopyOfsortie_full.GENDER ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.AGE_RANGE = copyOfcopyOfcopyOfsortie_full.AGE_RANGE ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.SIZE_RANGE = copyOfcopyOfcopyOfsortie_full.SIZE_RANGE ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.SIZE = copyOfcopyOfcopyOfsortie_full.SIZE ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.US_SIZE = copyOfcopyOfcopyOfsortie_full.US_SIZE ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.CM_SIZE = copyOfcopyOfcopyOfsortie_full.CM_SIZE ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.PRODUCT = copyOfcopyOfcopyOfsortie_full.PRODUCT ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.PRODUCT_STATUS = copyOfcopyOfcopyOfsortie_full.PRODUCT_STATUS ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.PRODUCT_TIER = copyOfcopyOfcopyOfsortie_full.PRODUCT_TIER ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.ACCT_EXCLUS = copyOfcopyOfcopyOfsortie_full.ACCT_EXCLUS ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.SIZE_RATIO_SPLIT = copyOfcopyOfcopyOfsortie_full.SIZE_RATIO_SPLIT ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.REC_SIZE_SPLIT = copyOfcopyOfcopyOfsortie_full.REC_SIZE_SPLIT ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.CARTON_QTY = copyOfcopyOfcopyOfsortie_full.CARTON_QTY ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.ATTRIBUTE = copyOfcopyOfcopyOfsortie_full.ATTRIBUTE ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.UNITS = copyOfcopyOfcopyOfsortie_full.UNITS ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.EUR_RRP = copyOfcopyOfcopyOfsortie_full.EUR_RRP ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.EUR_WSP = copyOfcopyOfcopyOfsortie_full.EUR_WSP ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.GBP_RRP = copyOfcopyOfcopyOfsortie_full.GBP_RRP ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.GBP_WSP = copyOfcopyOfcopyOfsortie_full.GBP_WSP ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.CHF_RRP = copyOfcopyOfcopyOfsortie_full.CHF_RRP ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.CHF_WSP = copyOfcopyOfcopyOfsortie_full.CHF_WSP ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.NOK_RRP = copyOfcopyOfcopyOfsortie_full.NOK_RRP ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.NOK_WSP = copyOfcopyOfcopyOfsortie_full.NOK_WSP ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.DKK_RRP = copyOfcopyOfcopyOfsortie_full.DKK_RRP ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.DKK_WSP = copyOfcopyOfcopyOfsortie_full.DKK_WSP ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.SEK_RRP = copyOfcopyOfcopyOfsortie_full.SEK_RRP ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.SEK_WSP = copyOfcopyOfcopyOfsortie_full.SEK_WSP ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.EUR_FINN_RRP = copyOfcopyOfcopyOfsortie_full.EUR_FINN_RRP ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.EUR_FINN_WSP = copyOfcopyOfcopyOfsortie_full.EUR_FINN_WSP ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.FABRICATION = copyOfcopyOfcopyOfsortie_full.FABRICATION ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.COO = copyOfcopyOfcopyOfsortie_full.COO ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.CUSTOM_TARIFF_CODE = copyOfcopyOfcopyOfsortie_full.CUSTOM_TARIFF_CODE ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.UPC = copyOfcopyOfcopyOfsortie_full.UPC ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.SMU_TYPE = copyOfcopyOfcopyOfsortie_full.SMU_TYPE ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.EAN = copyOfcopyOfcopyOfsortie_full.EAN ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.LABELD365 = copyOfcopyOfcopyOfsortie_full.LABELD365 ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.PRODUCT_CHANNEL = copyOfcopyOfcopyOfsortie_full.PRODUCT_CHANNEL ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.SUSTAINABILITY = copyOfcopyOfcopyOfsortie_full.SUSTAINABILITY ;
copyOfcopyOfcopyOfcopyOfsortie_full = copyOfcopyOfcopyOfcopyOfsortie_full_tmp;

// # Output table : 'copyOfcopyOfcopyOfcopyOfsortie_product'
copyOfcopyOfcopyOfcopyOfsortie_product_tmp.PRODUCTNUMBER = copyOfcopyOfcopyOfsortie_full.STYLE ;
copyOfcopyOfcopyOfcopyOfsortie_product_tmp.ATTRIBUTETYPENAME = "Size Range";
copyOfcopyOfcopyOfcopyOfsortie_product_tmp.ATTRIBUTENAME = "Size Range";
copyOfcopyOfcopyOfcopyOfsortie_product_tmp.TEXTVALUE = copyOfcopyOfcopyOfsortie_full.SIZE_RANGE ;
copyOfcopyOfcopyOfcopyOfsortie_product_tmp.INTEGERVALUE = null;
copyOfcopyOfcopyOfcopyOfsortie_product = copyOfcopyOfcopyOfcopyOfsortie_product_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_7 = false;










 


	tos_count_tMap_7++;

/**
 * [tMap_7 main ] stop
 */
	
	/**
	 * [tMap_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 process_data_begin ] stop
 */
// Start of branch "copyOfcopyOfcopyOfcopyOfsortie_full"
if(copyOfcopyOfcopyOfcopyOfsortie_full != null) { 



	
	/**
	 * [tMap_8 main ] start
	 */

	

	
	
	currentComponent="tMap_8";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfcopyOfcopyOfcopyOfsortie_full");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_8 = false;
		  boolean mainRowRejected_tMap_8 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_8__Struct Var = Var__tMap_8;// ###############################
        // ###############################
        // # Output tables

copyOfcopyOfcopyOfcopyOfcopyOfsortie_full = null;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_product = null;


// # Output table : 'copyOfcopyOfcopyOfcopyOfcopyOfsortie_full'
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.BRAND = copyOfcopyOfcopyOfcopyOfsortie_full.BRAND ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.SEASON = copyOfcopyOfcopyOfcopyOfsortie_full.SEASON ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.CATEGORY = copyOfcopyOfcopyOfcopyOfsortie_full.CATEGORY ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.REF = copyOfcopyOfcopyOfcopyOfsortie_full.REF ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.DESCRIPTION = copyOfcopyOfcopyOfcopyOfsortie_full.DESCRIPTION ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.STYLE = copyOfcopyOfcopyOfcopyOfsortie_full.STYLE ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.COLOR = copyOfcopyOfcopyOfcopyOfsortie_full.COLOR ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.FASHION = copyOfcopyOfcopyOfcopyOfsortie_full.FASHION ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.STYLECOLORLABEL = copyOfcopyOfcopyOfcopyOfsortie_full.STYLECOLORLABEL ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.COLORNAME = copyOfcopyOfcopyOfcopyOfsortie_full.COLORNAME ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.LBL = copyOfcopyOfcopyOfcopyOfsortie_full.LBL ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.STYLE_COLOR = copyOfcopyOfcopyOfcopyOfsortie_full.STYLE_COLOR ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.GENDER = copyOfcopyOfcopyOfcopyOfsortie_full.GENDER ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.AGE_RANGE = copyOfcopyOfcopyOfcopyOfsortie_full.AGE_RANGE ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.SIZE_RANGE = copyOfcopyOfcopyOfcopyOfsortie_full.SIZE_RANGE ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.SIZE = copyOfcopyOfcopyOfcopyOfsortie_full.SIZE ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.US_SIZE = copyOfcopyOfcopyOfcopyOfsortie_full.US_SIZE ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.CM_SIZE = copyOfcopyOfcopyOfcopyOfsortie_full.CM_SIZE ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.PRODUCT = copyOfcopyOfcopyOfcopyOfsortie_full.PRODUCT ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.PRODUCT_STATUS = copyOfcopyOfcopyOfcopyOfsortie_full.PRODUCT_STATUS ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.PRODUCT_TIER = copyOfcopyOfcopyOfcopyOfsortie_full.PRODUCT_TIER ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.ACCT_EXCLUS = copyOfcopyOfcopyOfcopyOfsortie_full.ACCT_EXCLUS ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.SIZE_RATIO_SPLIT = copyOfcopyOfcopyOfcopyOfsortie_full.SIZE_RATIO_SPLIT ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.REC_SIZE_SPLIT = copyOfcopyOfcopyOfcopyOfsortie_full.REC_SIZE_SPLIT ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.CARTON_QTY = copyOfcopyOfcopyOfcopyOfsortie_full.CARTON_QTY ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.ATTRIBUTE = copyOfcopyOfcopyOfcopyOfsortie_full.ATTRIBUTE ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.UNITS = copyOfcopyOfcopyOfcopyOfsortie_full.UNITS ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.EUR_RRP = copyOfcopyOfcopyOfcopyOfsortie_full.EUR_RRP ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.EUR_WSP = copyOfcopyOfcopyOfcopyOfsortie_full.EUR_WSP ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.GBP_RRP = copyOfcopyOfcopyOfcopyOfsortie_full.GBP_RRP ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.GBP_WSP = copyOfcopyOfcopyOfcopyOfsortie_full.GBP_WSP ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.CHF_RRP = copyOfcopyOfcopyOfcopyOfsortie_full.CHF_RRP ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.CHF_WSP = copyOfcopyOfcopyOfcopyOfsortie_full.CHF_WSP ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.NOK_RRP = copyOfcopyOfcopyOfcopyOfsortie_full.NOK_RRP ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.NOK_WSP = copyOfcopyOfcopyOfcopyOfsortie_full.NOK_WSP ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.DKK_RRP = copyOfcopyOfcopyOfcopyOfsortie_full.DKK_RRP ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.DKK_WSP = copyOfcopyOfcopyOfcopyOfsortie_full.DKK_WSP ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.SEK_RRP = copyOfcopyOfcopyOfcopyOfsortie_full.SEK_RRP ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.SEK_WSP = copyOfcopyOfcopyOfcopyOfsortie_full.SEK_WSP ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.EUR_FINN_RRP = copyOfcopyOfcopyOfcopyOfsortie_full.EUR_FINN_RRP ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.EUR_FINN_WSP = copyOfcopyOfcopyOfcopyOfsortie_full.EUR_FINN_WSP ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.FABRICATION = copyOfcopyOfcopyOfcopyOfsortie_full.FABRICATION ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.COO = copyOfcopyOfcopyOfcopyOfsortie_full.COO ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.CUSTOM_TARIFF_CODE = copyOfcopyOfcopyOfcopyOfsortie_full.CUSTOM_TARIFF_CODE ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.UPC = copyOfcopyOfcopyOfcopyOfsortie_full.UPC ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.SMU_TYPE = copyOfcopyOfcopyOfcopyOfsortie_full.SMU_TYPE ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.EAN = copyOfcopyOfcopyOfcopyOfsortie_full.EAN ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.LABELD365 = copyOfcopyOfcopyOfcopyOfsortie_full.LABELD365 ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.PRODUCT_CHANNEL = copyOfcopyOfcopyOfcopyOfsortie_full.PRODUCT_CHANNEL ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.SUSTAINABILITY = copyOfcopyOfcopyOfcopyOfsortie_full.SUSTAINABILITY ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp;

// # Output table : 'copyOfcopyOfcopyOfcopyOfcopyOfsortie_product'
copyOfcopyOfcopyOfcopyOfcopyOfsortie_product_tmp.PRODUCTNUMBER = copyOfcopyOfcopyOfcopyOfsortie_full.STYLE ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_product_tmp.ATTRIBUTETYPENAME = "US Size";
copyOfcopyOfcopyOfcopyOfcopyOfsortie_product_tmp.ATTRIBUTENAME = "US Size";
copyOfcopyOfcopyOfcopyOfcopyOfsortie_product_tmp.TEXTVALUE = copyOfcopyOfcopyOfcopyOfsortie_full.US_SIZE ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_product = copyOfcopyOfcopyOfcopyOfcopyOfsortie_product_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_8 = false;










 


	tos_count_tMap_8++;

/**
 * [tMap_8 main ] stop
 */
	
	/**
	 * [tMap_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_begin ] stop
 */
// Start of branch "copyOfcopyOfcopyOfcopyOfcopyOfsortie_full"
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_full != null) { 



	
	/**
	 * [tMap_9 main ] start
	 */

	

	
	
	currentComponent="tMap_9";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfcopyOfcopyOfcopyOfcopyOfsortie_full");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_9 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_9 = false;
		  boolean mainRowRejected_tMap_9 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_9__Struct Var = Var__tMap_9;// ###############################
        // ###############################
        // # Output tables

copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full = null;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product = null;


// # Output table : 'copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full'
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.BRAND = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.BRAND ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.SEASON = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.SEASON ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.CATEGORY = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.CATEGORY ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.REF = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.REF ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.DESCRIPTION = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.DESCRIPTION ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.STYLE = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.STYLE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.COLOR = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.COLOR ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.FASHION = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.FASHION ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.STYLECOLORLABEL = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.STYLECOLORLABEL ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.COLORNAME = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.COLORNAME ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.LBL = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.LBL ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.STYLE_COLOR = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.STYLE_COLOR ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.GENDER = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.GENDER ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.AGE_RANGE = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.AGE_RANGE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.SIZE_RANGE = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.SIZE_RANGE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.SIZE = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.SIZE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.US_SIZE = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.US_SIZE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.CM_SIZE = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.CM_SIZE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.PRODUCT = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.PRODUCT ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.PRODUCT_STATUS = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.PRODUCT_STATUS ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.PRODUCT_TIER = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.PRODUCT_TIER ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.ACCT_EXCLUS = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.ACCT_EXCLUS ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.SIZE_RATIO_SPLIT = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.SIZE_RATIO_SPLIT ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.REC_SIZE_SPLIT = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.REC_SIZE_SPLIT ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.CARTON_QTY = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.CARTON_QTY ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.ATTRIBUTE = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.ATTRIBUTE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.UNITS = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.UNITS ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.EUR_RRP = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.EUR_RRP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.EUR_WSP = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.EUR_WSP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.GBP_RRP = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.GBP_RRP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.GBP_WSP = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.GBP_WSP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.CHF_RRP = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.CHF_RRP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.CHF_WSP = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.CHF_WSP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.NOK_RRP = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.NOK_RRP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.NOK_WSP = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.NOK_WSP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.DKK_RRP = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.DKK_RRP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.DKK_WSP = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.DKK_WSP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.SEK_RRP = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.SEK_RRP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.SEK_WSP = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.SEK_WSP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.EUR_FINN_RRP = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.EUR_FINN_RRP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.EUR_FINN_WSP = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.EUR_FINN_WSP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.FABRICATION = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.FABRICATION ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.COO = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.COO ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.CUSTOM_TARIFF_CODE = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.CUSTOM_TARIFF_CODE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.UPC = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.UPC ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.SMU_TYPE = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.SMU_TYPE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.EAN = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.EAN ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.LABELD365 = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.LABELD365 ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.PRODUCT_CHANNEL = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.PRODUCT_CHANNEL ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.SUSTAINABILITY = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.SUSTAINABILITY ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp;

// # Output table : 'copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product'
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product_tmp.PRODUCTNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.STYLE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product_tmp.ATTRIBUTETYPENAME = "CM Size";
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product_tmp.ATTRIBUTENAME = "CM Size";
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product_tmp.TEXTVALUE = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.CM_SIZE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_9 = false;










 


	tos_count_tMap_9++;

/**
 * [tMap_9 main ] stop
 */
	
	/**
	 * [tMap_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

 



/**
 * [tMap_9 process_data_begin ] stop
 */
// Start of branch "copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full"
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full != null) { 



	
	/**
	 * [tMap_10 main ] start
	 */

	

	
	
	currentComponent="tMap_10";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_10 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_10 = false;
		  boolean mainRowRejected_tMap_10 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_10__Struct Var = Var__tMap_10;// ###############################
        // ###############################
        // # Output tables

copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full = null;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product = null;


// # Output table : 'copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full'
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.BRAND = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.BRAND ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.SEASON = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.SEASON ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.CATEGORY = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.CATEGORY ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.REF = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.REF ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.DESCRIPTION = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.DESCRIPTION ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.STYLE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.STYLE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.COLOR = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.COLOR ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.FASHION = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.FASHION ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.STYLECOLORLABEL = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.STYLECOLORLABEL ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.COLORNAME = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.COLORNAME ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.LBL = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.LBL ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.STYLE_COLOR = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.STYLE_COLOR ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.GENDER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.GENDER ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.AGE_RANGE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.AGE_RANGE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.SIZE_RANGE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.SIZE_RANGE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.SIZE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.SIZE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.US_SIZE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.US_SIZE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.CM_SIZE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.CM_SIZE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.PRODUCT = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.PRODUCT ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.PRODUCT_STATUS = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.PRODUCT_STATUS ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.PRODUCT_TIER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.PRODUCT_TIER ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.ACCT_EXCLUS = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.ACCT_EXCLUS ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.SIZE_RATIO_SPLIT = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.SIZE_RATIO_SPLIT ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.REC_SIZE_SPLIT = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.REC_SIZE_SPLIT ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.CARTON_QTY = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.CARTON_QTY ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.ATTRIBUTE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.ATTRIBUTE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.UNITS = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.UNITS ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.EUR_RRP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.EUR_RRP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.EUR_WSP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.EUR_WSP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.GBP_RRP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.GBP_RRP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.GBP_WSP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.GBP_WSP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.CHF_RRP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.CHF_RRP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.CHF_WSP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.CHF_WSP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.NOK_RRP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.NOK_RRP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.NOK_WSP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.NOK_WSP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.DKK_RRP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.DKK_RRP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.DKK_WSP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.DKK_WSP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.SEK_RRP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.SEK_RRP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.SEK_WSP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.SEK_WSP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.EUR_FINN_RRP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.EUR_FINN_RRP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.EUR_FINN_WSP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.EUR_FINN_WSP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.FABRICATION = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.FABRICATION ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.COO = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.COO ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.CUSTOM_TARIFF_CODE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.CUSTOM_TARIFF_CODE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.UPC = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.UPC ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.SMU_TYPE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.SMU_TYPE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.EAN = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.EAN ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.LABELD365 = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.LABELD365 ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.PRODUCT_CHANNEL = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.PRODUCT_CHANNEL ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.SUSTAINABILITY = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.SUSTAINABILITY ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp;

// # Output table : 'copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product'
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product_tmp.PRODUCTNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.STYLE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product_tmp.ATTRIBUTETYPENAME = "Product Tier";
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product_tmp.ATTRIBUTENAME = "Product Tier";
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product_tmp.TEXTVALUE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.PRODUCT_TIER ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product_tmp.INTEGERVALUE = null;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_10 = false;










 


	tos_count_tMap_10++;

/**
 * [tMap_10 main ] stop
 */
	
	/**
	 * [tMap_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_10";

	

 



/**
 * [tMap_10 process_data_begin ] stop
 */
// Start of branch "copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full"
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full != null) { 



	
	/**
	 * [tMap_11 main ] start
	 */

	

	
	
	currentComponent="tMap_11";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_11 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_11 = false;
		  boolean mainRowRejected_tMap_11 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_11__Struct Var = Var__tMap_11;// ###############################
        // ###############################
        // # Output tables

copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full = null;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product = null;


// # Output table : 'copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full'
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.BRAND = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.BRAND ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.SEASON = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.SEASON ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.CATEGORY = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.CATEGORY ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.REF = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.REF ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.DESCRIPTION = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.DESCRIPTION ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.STYLE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.STYLE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.COLOR = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.COLOR ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.FASHION = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.FASHION ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.STYLECOLORLABEL = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.STYLECOLORLABEL ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.COLORNAME = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.COLORNAME ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.LBL = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.LBL ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.STYLE_COLOR = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.STYLE_COLOR ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.GENDER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.GENDER ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.AGE_RANGE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.AGE_RANGE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.SIZE_RANGE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.SIZE_RANGE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.SIZE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.SIZE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.US_SIZE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.US_SIZE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.CM_SIZE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.CM_SIZE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.PRODUCT = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.PRODUCT ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.PRODUCT_STATUS = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.PRODUCT_STATUS ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.PRODUCT_TIER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.PRODUCT_TIER ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.ACCT_EXCLUS = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.ACCT_EXCLUS ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.SIZE_RATIO_SPLIT = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.SIZE_RATIO_SPLIT ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.REC_SIZE_SPLIT = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.REC_SIZE_SPLIT ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.CARTON_QTY = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.CARTON_QTY ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.ATTRIBUTE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.ATTRIBUTE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.UNITS = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.UNITS ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.EUR_RRP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.EUR_RRP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.EUR_WSP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.EUR_WSP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.GBP_RRP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.GBP_RRP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.GBP_WSP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.GBP_WSP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.CHF_RRP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.CHF_RRP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.CHF_WSP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.CHF_WSP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.NOK_RRP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.NOK_RRP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.NOK_WSP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.NOK_WSP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.DKK_RRP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.DKK_RRP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.DKK_WSP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.DKK_WSP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.SEK_RRP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.SEK_RRP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.SEK_WSP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.SEK_WSP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.EUR_FINN_RRP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.EUR_FINN_RRP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.EUR_FINN_WSP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.EUR_FINN_WSP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.FABRICATION = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.FABRICATION ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.COO = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.COO ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.CUSTOM_TARIFF_CODE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.CUSTOM_TARIFF_CODE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.UPC = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.UPC ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.SMU_TYPE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.SMU_TYPE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.EAN = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.EAN ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.LABELD365 = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.LABELD365 ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.PRODUCT_CHANNEL = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.PRODUCT_CHANNEL ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.SUSTAINABILITY = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.SUSTAINABILITY ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp;

// # Output table : 'copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product'
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product_tmp.PRODUCTNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.STYLE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product_tmp.ATTRIBUTETYPENAME = "Attribut";
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product_tmp.ATTRIBUTENAME = "Attribut";
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product_tmp.TEXTVALUE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.ATTRIBUTE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_11 = false;










 


	tos_count_tMap_11++;

/**
 * [tMap_11 main ] stop
 */
	
	/**
	 * [tMap_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_11";

	

 



/**
 * [tMap_11 process_data_begin ] stop
 */
// Start of branch "copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full"
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full != null) { 



	
	/**
	 * [tMap_12 main ] start
	 */

	

	
	
	currentComponent="tMap_12";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_12 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_12 = false;
		  boolean mainRowRejected_tMap_12 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_12__Struct Var = Var__tMap_12;// ###############################
        // ###############################
        // # Output tables

copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full = null;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product = null;


// # Output table : 'copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full'
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.BRAND = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.BRAND ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.SEASON = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.SEASON ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.CATEGORY = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.CATEGORY ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.REF = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.REF ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.DESCRIPTION = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.DESCRIPTION ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.STYLE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.STYLE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.COLOR = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.COLOR ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.FASHION = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.FASHION ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.STYLECOLORLABEL = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.STYLECOLORLABEL ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.COLORNAME = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.COLORNAME ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.LBL = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.LBL ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.STYLE_COLOR = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.STYLE_COLOR ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.GENDER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.GENDER ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.AGE_RANGE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.AGE_RANGE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.SIZE_RANGE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.SIZE_RANGE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.SIZE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.SIZE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.US_SIZE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.US_SIZE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.CM_SIZE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.CM_SIZE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.PRODUCT = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.PRODUCT ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.PRODUCT_STATUS = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.PRODUCT_STATUS ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.PRODUCT_TIER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.PRODUCT_TIER ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.ACCT_EXCLUS = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.ACCT_EXCLUS ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.SIZE_RATIO_SPLIT = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.SIZE_RATIO_SPLIT ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.REC_SIZE_SPLIT = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.REC_SIZE_SPLIT ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.CARTON_QTY = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.CARTON_QTY ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.ATTRIBUTE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.ATTRIBUTE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.UNITS = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.UNITS ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.EUR_RRP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.EUR_RRP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.EUR_WSP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.EUR_WSP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.GBP_RRP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.GBP_RRP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.GBP_WSP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.GBP_WSP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.CHF_RRP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.CHF_RRP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.CHF_WSP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.CHF_WSP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.NOK_RRP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.NOK_RRP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.NOK_WSP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.NOK_WSP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.DKK_RRP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.DKK_RRP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.DKK_WSP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.DKK_WSP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.SEK_RRP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.SEK_RRP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.SEK_WSP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.SEK_WSP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.EUR_FINN_RRP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.EUR_FINN_RRP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.EUR_FINN_WSP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.EUR_FINN_WSP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.FABRICATION = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.FABRICATION ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.COO = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.COO ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.CUSTOM_TARIFF_CODE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.CUSTOM_TARIFF_CODE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.UPC = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.UPC ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.SMU_TYPE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.SMU_TYPE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.EAN = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.EAN ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.LABELD365 = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.LABELD365 ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.PRODUCT_CHANNEL = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.PRODUCT_CHANNEL ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.SUSTAINABILITY = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.SUSTAINABILITY ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp;

// # Output table : 'copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product'
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product_tmp.PRODUCTNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.STYLE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product_tmp.ATTRIBUTETYPENAME = "Minimum Selling";
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product_tmp.ATTRIBUTENAME = "Minimum Selling";
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product_tmp.TEXTVALUE = null;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product_tmp.INTEGERVALUE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.CARTON_QTY ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_12 = false;










 


	tos_count_tMap_12++;

/**
 * [tMap_12 main ] stop
 */
	
	/**
	 * [tMap_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_12";

	

 



/**
 * [tMap_12 process_data_begin ] stop
 */
// Start of branch "copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full"
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full != null) { 



	
	/**
	 * [tMap_13 main ] start
	 */

	

	
	
	currentComponent="tMap_13";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_13 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_13 = false;
		  boolean mainRowRejected_tMap_13 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_13__Struct Var = Var__tMap_13;// ###############################
        // ###############################
        // # Output tables

sortie_full_ = null;
sortie_color = null;


// # Output table : 'sortie_full_'
sortie_full__tmp.BRAND = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.BRAND ;
sortie_full__tmp.SEASON = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.SEASON ;
sortie_full__tmp.CATEGORY = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.CATEGORY ;
sortie_full__tmp.REF = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.REF ;
sortie_full__tmp.DESCRIPTION = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.DESCRIPTION ;
sortie_full__tmp.STYLE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.STYLE ;
sortie_full__tmp.COLOR = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.COLOR ;
sortie_full__tmp.FASHION = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.FASHION ;
sortie_full__tmp.STYLECOLORLABEL = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.STYLECOLORLABEL ;
sortie_full__tmp.COLORNAME = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.COLORNAME ;
sortie_full__tmp.LBL = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.LBL ;
sortie_full__tmp.STYLE_COLOR = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.STYLE_COLOR ;
sortie_full__tmp.GENDER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.GENDER ;
sortie_full__tmp.AGE_RANGE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.AGE_RANGE ;
sortie_full__tmp.SIZE_RANGE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.SIZE_RANGE ;
sortie_full__tmp.SIZE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.SIZE ;
sortie_full__tmp.US_SIZE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.US_SIZE ;
sortie_full__tmp.CM_SIZE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.CM_SIZE ;
sortie_full__tmp.PRODUCT = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.PRODUCT ;
sortie_full__tmp.PRODUCT_STATUS = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.PRODUCT_STATUS ;
sortie_full__tmp.PRODUCT_TIER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.PRODUCT_TIER ;
sortie_full__tmp.ACCT_EXCLUS = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.ACCT_EXCLUS ;
sortie_full__tmp.SIZE_RATIO_SPLIT = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.SIZE_RATIO_SPLIT ;
sortie_full__tmp.REC_SIZE_SPLIT = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.REC_SIZE_SPLIT ;
sortie_full__tmp.CARTON_QTY = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.CARTON_QTY ;
sortie_full__tmp.ATTRIBUTE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.ATTRIBUTE ;
sortie_full__tmp.UNITS = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.UNITS ;
sortie_full__tmp.EUR_RRP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.EUR_RRP ;
sortie_full__tmp.EUR_WSP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.EUR_WSP ;
sortie_full__tmp.GBP_RRP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.GBP_RRP ;
sortie_full__tmp.GBP_WSP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.GBP_WSP ;
sortie_full__tmp.CHF_RRP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.CHF_RRP ;
sortie_full__tmp.CHF_WSP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.CHF_WSP ;
sortie_full__tmp.NOK_RRP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.NOK_RRP ;
sortie_full__tmp.NOK_WSP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.NOK_WSP ;
sortie_full__tmp.DKK_RRP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.DKK_RRP ;
sortie_full__tmp.DKK_WSP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.DKK_WSP ;
sortie_full__tmp.SEK_RRP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.SEK_RRP ;
sortie_full__tmp.SEK_WSP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.SEK_WSP ;
sortie_full__tmp.EUR_FINN_RRP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.EUR_FINN_RRP ;
sortie_full__tmp.EUR_FINN_WSP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.EUR_FINN_WSP ;
sortie_full__tmp.FABRICATION = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.FABRICATION ;
sortie_full__tmp.COO = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.COO ;
sortie_full__tmp.CUSTOM_TARIFF_CODE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.CUSTOM_TARIFF_CODE ;
sortie_full__tmp.UPC = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.UPC ;
sortie_full__tmp.SMU_TYPE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.SMU_TYPE ;
sortie_full__tmp.EAN = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.EAN ;
sortie_full__tmp.LABELD365 = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.LABELD365 ;
sortie_full__tmp.PRODUCT_CHANNEL = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.PRODUCT_CHANNEL ;
sortie_full__tmp.SUSTAINABILITY = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.SUSTAINABILITY ;
sortie_full_ = sortie_full__tmp;

// # Output table : 'sortie_color'
sortie_color_tmp.PRODUCTMASTERNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.STYLE ;
sortie_color_tmp.PRODUCTCOLORID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.COLOR ;
sortie_color = sortie_color_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_13 = false;










 


	tos_count_tMap_13++;

/**
 * [tMap_13 main ] stop
 */
	
	/**
	 * [tMap_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_13";

	

 



/**
 * [tMap_13 process_data_begin ] stop
 */
// Start of branch "sortie_full_"
if(sortie_full_ != null) { 



	
	/**
	 * [tMap_14 main ] start
	 */

	

	
	
	currentComponent="tMap_14";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_full_");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_14 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_14 = false;
		  boolean mainRowRejected_tMap_14 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_14__Struct Var = Var__tMap_14;// ###############################
        // ###############################
        // # Output tables

sortie_full_size = null;
sortie_size = null;


// # Output table : 'sortie_full_size'
sortie_full_size_tmp.BRAND = sortie_full_.BRAND ;
sortie_full_size_tmp.SEASON = sortie_full_.SEASON ;
sortie_full_size_tmp.CATEGORY = sortie_full_.CATEGORY ;
sortie_full_size_tmp.REF = sortie_full_.REF ;
sortie_full_size_tmp.DESCRIPTION = sortie_full_.DESCRIPTION ;
sortie_full_size_tmp.STYLE = sortie_full_.STYLE ;
sortie_full_size_tmp.COLOR = sortie_full_.COLOR ;
sortie_full_size_tmp.FASHION = sortie_full_.FASHION ;
sortie_full_size_tmp.STYLECOLORLABEL = sortie_full_.STYLECOLORLABEL ;
sortie_full_size_tmp.COLORNAME = sortie_full_.COLORNAME ;
sortie_full_size_tmp.LBL = sortie_full_.LBL ;
sortie_full_size_tmp.STYLE_COLOR = sortie_full_.STYLE_COLOR ;
sortie_full_size_tmp.GENDER = sortie_full_.GENDER ;
sortie_full_size_tmp.AGE_RANGE = sortie_full_.AGE_RANGE ;
sortie_full_size_tmp.SIZE_RANGE = sortie_full_.SIZE_RANGE ;
sortie_full_size_tmp.SIZE = sortie_full_.SIZE ;
sortie_full_size_tmp.US_SIZE = sortie_full_.US_SIZE ;
sortie_full_size_tmp.CM_SIZE = sortie_full_.CM_SIZE ;
sortie_full_size_tmp.PRODUCT = sortie_full_.PRODUCT ;
sortie_full_size_tmp.PRODUCT_STATUS = sortie_full_.PRODUCT_STATUS ;
sortie_full_size_tmp.PRODUCT_TIER = sortie_full_.PRODUCT_TIER ;
sortie_full_size_tmp.ACCT_EXCLUS = sortie_full_.ACCT_EXCLUS ;
sortie_full_size_tmp.SIZE_RATIO_SPLIT = sortie_full_.SIZE_RATIO_SPLIT ;
sortie_full_size_tmp.REC_SIZE_SPLIT = sortie_full_.REC_SIZE_SPLIT ;
sortie_full_size_tmp.CARTON_QTY = sortie_full_.CARTON_QTY ;
sortie_full_size_tmp.ATTRIBUTE = sortie_full_.ATTRIBUTE ;
sortie_full_size_tmp.UNITS = sortie_full_.UNITS ;
sortie_full_size_tmp.EUR_RRP = sortie_full_.EUR_RRP ;
sortie_full_size_tmp.EUR_WSP = sortie_full_.EUR_WSP ;
sortie_full_size_tmp.GBP_RRP = sortie_full_.GBP_RRP ;
sortie_full_size_tmp.GBP_WSP = sortie_full_.GBP_WSP ;
sortie_full_size_tmp.CHF_RRP = sortie_full_.CHF_RRP ;
sortie_full_size_tmp.CHF_WSP = sortie_full_.CHF_WSP ;
sortie_full_size_tmp.NOK_RRP = sortie_full_.NOK_RRP ;
sortie_full_size_tmp.NOK_WSP = sortie_full_.NOK_WSP ;
sortie_full_size_tmp.DKK_RRP = sortie_full_.DKK_RRP ;
sortie_full_size_tmp.DKK_WSP = sortie_full_.DKK_WSP ;
sortie_full_size_tmp.SEK_RRP = sortie_full_.SEK_RRP ;
sortie_full_size_tmp.SEK_WSP = sortie_full_.SEK_WSP ;
sortie_full_size_tmp.EUR_FINN_RRP = sortie_full_.EUR_FINN_RRP ;
sortie_full_size_tmp.EUR_FINN_WSP = sortie_full_.EUR_FINN_WSP ;
sortie_full_size_tmp.FABRICATION = sortie_full_.FABRICATION ;
sortie_full_size_tmp.COO = sortie_full_.COO ;
sortie_full_size_tmp.CUSTOM_TARIFF_CODE = sortie_full_.CUSTOM_TARIFF_CODE ;
sortie_full_size_tmp.UPC = sortie_full_.UPC ;
sortie_full_size_tmp.SMU_TYPE = sortie_full_.SMU_TYPE ;
sortie_full_size_tmp.EAN = sortie_full_.EAN ;
sortie_full_size_tmp.LABELD365 = sortie_full_.LABELD365 ;
sortie_full_size_tmp.PRODUCT_CHANNEL = sortie_full_.PRODUCT_CHANNEL ;
sortie_full_size_tmp.SUSTAINABILITY = sortie_full_.SUSTAINABILITY ;
sortie_full_size = sortie_full_size_tmp;

// # Output table : 'sortie_size'
sortie_size_tmp.PRODUCTMASTERNUMBER = sortie_full_.STYLE ;
sortie_size_tmp.PRODUCTSIZEID = sortie_full_.SIZE ;
sortie_size = sortie_size_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_14 = false;










 


	tos_count_tMap_14++;

/**
 * [tMap_14 main ] stop
 */
	
	/**
	 * [tMap_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_14";

	

 



/**
 * [tMap_14 process_data_begin ] stop
 */
// Start of branch "sortie_full_size"
if(sortie_full_size != null) { 



	
	/**
	 * [tMap_15 main ] start
	 */

	

	
	
	currentComponent="tMap_15";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_full_size");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_15 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_15 = false;
		  boolean mainRowRejected_tMap_15 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_15__Struct Var = Var__tMap_15;// ###############################
        // ###############################
        // # Output tables

sortie_full_fits = null;
sortie_fits = null;
sortie_Ref_Description = null;
sortie_hashoutput = null;


// # Output table : 'sortie_full_fits'
sortie_full_fits_tmp.BRAND = sortie_full_size.BRAND ;
sortie_full_fits_tmp.SEASON = sortie_full_size.SEASON ;
sortie_full_fits_tmp.CATEGORY = sortie_full_size.CATEGORY ;
sortie_full_fits_tmp.REF = sortie_full_size.REF ;
sortie_full_fits_tmp.DESCRIPTION = sortie_full_size.DESCRIPTION ;
sortie_full_fits_tmp.STYLE = sortie_full_size.STYLE ;
sortie_full_fits_tmp.COLOR = sortie_full_size.COLOR ;
sortie_full_fits_tmp.FASHION = sortie_full_size.FASHION ;
sortie_full_fits_tmp.STYLECOLORLABEL = sortie_full_size.STYLECOLORLABEL ;
sortie_full_fits_tmp.COLORNAME = sortie_full_size.COLORNAME ;
sortie_full_fits_tmp.LBL = sortie_full_size.LBL ;
sortie_full_fits_tmp.STYLE_COLOR = sortie_full_size.STYLE_COLOR ;
sortie_full_fits_tmp.GENDER = sortie_full_size.GENDER ;
sortie_full_fits_tmp.AGE_RANGE = sortie_full_size.AGE_RANGE ;
sortie_full_fits_tmp.SIZE_RANGE = sortie_full_size.SIZE_RANGE ;
sortie_full_fits_tmp.SIZE = sortie_full_size.SIZE ;
sortie_full_fits_tmp.US_SIZE = sortie_full_size.US_SIZE ;
sortie_full_fits_tmp.CM_SIZE = sortie_full_size.CM_SIZE ;
sortie_full_fits_tmp.PRODUCT = sortie_full_size.PRODUCT ;
sortie_full_fits_tmp.PRODUCT_STATUS = sortie_full_size.PRODUCT_STATUS ;
sortie_full_fits_tmp.PRODUCT_TIER = sortie_full_size.PRODUCT_TIER ;
sortie_full_fits_tmp.ACCT_EXCLUS = sortie_full_size.ACCT_EXCLUS ;
sortie_full_fits_tmp.SIZE_RATIO_SPLIT = sortie_full_size.SIZE_RATIO_SPLIT ;
sortie_full_fits_tmp.REC_SIZE_SPLIT = sortie_full_size.REC_SIZE_SPLIT ;
sortie_full_fits_tmp.CARTON_QTY = sortie_full_size.CARTON_QTY ;
sortie_full_fits_tmp.ATTRIBUTE = sortie_full_size.ATTRIBUTE ;
sortie_full_fits_tmp.UNITS = sortie_full_size.UNITS ;
sortie_full_fits_tmp.EUR_RRP = sortie_full_size.EUR_RRP ;
sortie_full_fits_tmp.EUR_WSP = sortie_full_size.EUR_WSP ;
sortie_full_fits_tmp.GBP_RRP = sortie_full_size.GBP_RRP ;
sortie_full_fits_tmp.GBP_WSP = sortie_full_size.GBP_WSP ;
sortie_full_fits_tmp.CHF_RRP = sortie_full_size.CHF_RRP ;
sortie_full_fits_tmp.CHF_WSP = sortie_full_size.CHF_WSP ;
sortie_full_fits_tmp.NOK_RRP = sortie_full_size.NOK_RRP ;
sortie_full_fits_tmp.NOK_WSP = sortie_full_size.NOK_WSP ;
sortie_full_fits_tmp.DKK_RRP = sortie_full_size.DKK_RRP ;
sortie_full_fits_tmp.DKK_WSP = sortie_full_size.DKK_WSP ;
sortie_full_fits_tmp.SEK_RRP = sortie_full_size.SEK_RRP ;
sortie_full_fits_tmp.SEK_WSP = sortie_full_size.SEK_WSP ;
sortie_full_fits_tmp.EUR_FINN_RRP = sortie_full_size.EUR_FINN_RRP ;
sortie_full_fits_tmp.EUR_FINN_WSP = sortie_full_size.EUR_FINN_WSP ;
sortie_full_fits_tmp.FABRICATION = sortie_full_size.FABRICATION ;
sortie_full_fits_tmp.COO = sortie_full_size.COO ;
sortie_full_fits_tmp.CUSTOM_TARIFF_CODE = sortie_full_size.CUSTOM_TARIFF_CODE ;
sortie_full_fits_tmp.UPC = sortie_full_size.UPC ;
sortie_full_fits_tmp.SMU_TYPE = sortie_full_size.SMU_TYPE ;
sortie_full_fits_tmp.EAN = sortie_full_size.EAN ;
sortie_full_fits_tmp.LABELD365 = sortie_full_size.LABELD365 ;
sortie_full_fits_tmp.PRODUCT_CHANNEL = sortie_full_size.PRODUCT_CHANNEL ;
sortie_full_fits_tmp.SUSTAINABILITY = sortie_full_size.SUSTAINABILITY ;
sortie_full_fits = sortie_full_fits_tmp;

// # Output table : 'sortie_fits'
sortie_fits_tmp.PRODUCTMASTERNUMBER = sortie_full_size.STYLE ;
sortie_fits_tmp.PRODUCTSTYLEID = sortie_full_size.LABELD365 ;
sortie_fits = sortie_fits_tmp;

// # Output table : 'sortie_Ref_Description'
sortie_Ref_Description_tmp.PRODUCTMASTERNUMBER = sortie_full_size.STYLE ;
sortie_Ref_Description_tmp.DESCRIPTION = sortie_full_size.DESCRIPTION ;
sortie_Ref_Description = sortie_Ref_Description_tmp;

// # Output table : 'sortie_hashoutput'
sortie_hashoutput_tmp.PRODUCTMASTERNUMBER = sortie_full_size.STYLE ;
sortie_hashoutput_tmp.DESCRIPTION = sortie_full_size.DESCRIPTION ;
sortie_hashoutput = sortie_hashoutput_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_15 = false;










 


	tos_count_tMap_15++;

/**
 * [tMap_15 main ] stop
 */
	
	/**
	 * [tMap_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_15";

	

 



/**
 * [tMap_15 process_data_begin ] stop
 */
// Start of branch "sortie_full_fits"
if(sortie_full_fits != null) { 



	
	/**
	 * [tMap_16 main ] start
	 */

	

	
	
	currentComponent="tMap_16";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_full_fits");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_16 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_16 = false;
		  boolean mainRowRejected_tMap_16 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_16__Struct Var = Var__tMap_16;// ###############################
        // ###############################
        // # Output tables

sortie_full_product_variant = null;
sortie_product_variant = null;


// # Output table : 'sortie_full_product_variant'
sortie_full_product_variant_tmp.BRAND = sortie_full_fits.BRAND ;
sortie_full_product_variant_tmp.SEASON = sortie_full_fits.SEASON ;
sortie_full_product_variant_tmp.CATEGORY = sortie_full_fits.CATEGORY ;
sortie_full_product_variant_tmp.REF = sortie_full_fits.REF ;
sortie_full_product_variant_tmp.DESCRIPTION = sortie_full_fits.DESCRIPTION ;
sortie_full_product_variant_tmp.STYLE = sortie_full_fits.STYLE ;
sortie_full_product_variant_tmp.COLOR = sortie_full_fits.COLOR ;
sortie_full_product_variant_tmp.FASHION = sortie_full_fits.FASHION ;
sortie_full_product_variant_tmp.STYLECOLORLABEL = sortie_full_fits.STYLECOLORLABEL ;
sortie_full_product_variant_tmp.COLORNAME = sortie_full_fits.COLORNAME ;
sortie_full_product_variant_tmp.LBL = sortie_full_fits.LBL ;
sortie_full_product_variant_tmp.STYLE_COLOR = sortie_full_fits.STYLE_COLOR ;
sortie_full_product_variant_tmp.GENDER = sortie_full_fits.GENDER ;
sortie_full_product_variant_tmp.AGE_RANGE = sortie_full_fits.AGE_RANGE ;
sortie_full_product_variant_tmp.SIZE_RANGE = sortie_full_fits.SIZE_RANGE ;
sortie_full_product_variant_tmp.SIZE = sortie_full_fits.SIZE ;
sortie_full_product_variant_tmp.US_SIZE = sortie_full_fits.US_SIZE ;
sortie_full_product_variant_tmp.CM_SIZE = sortie_full_fits.CM_SIZE ;
sortie_full_product_variant_tmp.PRODUCT = sortie_full_fits.PRODUCT ;
sortie_full_product_variant_tmp.PRODUCT_STATUS = sortie_full_fits.PRODUCT_STATUS ;
sortie_full_product_variant_tmp.PRODUCT_TIER = sortie_full_fits.PRODUCT_TIER ;
sortie_full_product_variant_tmp.ACCT_EXCLUS = sortie_full_fits.ACCT_EXCLUS ;
sortie_full_product_variant_tmp.SIZE_RATIO_SPLIT = sortie_full_fits.SIZE_RATIO_SPLIT ;
sortie_full_product_variant_tmp.REC_SIZE_SPLIT = sortie_full_fits.REC_SIZE_SPLIT ;
sortie_full_product_variant_tmp.CARTON_QTY = sortie_full_fits.CARTON_QTY ;
sortie_full_product_variant_tmp.ATTRIBUTE = sortie_full_fits.ATTRIBUTE ;
sortie_full_product_variant_tmp.UNITS = sortie_full_fits.UNITS ;
sortie_full_product_variant_tmp.EUR_RRP = sortie_full_fits.EUR_RRP ;
sortie_full_product_variant_tmp.EUR_WSP = sortie_full_fits.EUR_WSP ;
sortie_full_product_variant_tmp.GBP_RRP = sortie_full_fits.GBP_RRP ;
sortie_full_product_variant_tmp.GBP_WSP = sortie_full_fits.GBP_WSP ;
sortie_full_product_variant_tmp.CHF_RRP = sortie_full_fits.CHF_RRP ;
sortie_full_product_variant_tmp.CHF_WSP = sortie_full_fits.CHF_WSP ;
sortie_full_product_variant_tmp.NOK_RRP = sortie_full_fits.NOK_RRP ;
sortie_full_product_variant_tmp.NOK_WSP = sortie_full_fits.NOK_WSP ;
sortie_full_product_variant_tmp.DKK_RRP = sortie_full_fits.DKK_RRP ;
sortie_full_product_variant_tmp.DKK_WSP = sortie_full_fits.DKK_WSP ;
sortie_full_product_variant_tmp.SEK_RRP = sortie_full_fits.SEK_RRP ;
sortie_full_product_variant_tmp.SEK_WSP = sortie_full_fits.SEK_WSP ;
sortie_full_product_variant_tmp.EUR_FINN_RRP = sortie_full_fits.EUR_FINN_RRP ;
sortie_full_product_variant_tmp.EUR_FINN_WSP = sortie_full_fits.EUR_FINN_WSP ;
sortie_full_product_variant_tmp.FABRICATION = sortie_full_fits.FABRICATION ;
sortie_full_product_variant_tmp.COO = sortie_full_fits.COO ;
sortie_full_product_variant_tmp.CUSTOM_TARIFF_CODE = sortie_full_fits.CUSTOM_TARIFF_CODE ;
sortie_full_product_variant_tmp.UPC = sortie_full_fits.UPC ;
sortie_full_product_variant_tmp.SMU_TYPE = sortie_full_fits.SMU_TYPE ;
sortie_full_product_variant_tmp.EAN = sortie_full_fits.EAN ;
sortie_full_product_variant_tmp.LABELD365 = sortie_full_fits.LABELD365 ;
sortie_full_product_variant_tmp.PRODUCT_CHANNEL = sortie_full_fits.PRODUCT_CHANNEL ;
sortie_full_product_variant_tmp.SUSTAINABILITY = sortie_full_fits.SUSTAINABILITY ;
sortie_full_product_variant = sortie_full_product_variant_tmp;

// # Output table : 'sortie_product_variant'
sortie_product_variant_tmp.PRODUCTMASTERNUMBER = sortie_full_fits.STYLE ;
sortie_product_variant_tmp.PRODUCTCOLORID = sortie_full_fits.COLOR ;
sortie_product_variant_tmp.PRODUCTSIZEID = sortie_full_fits.SIZE ;
sortie_product_variant_tmp.PRODUCTSTYLEID = sortie_full_fits.LABELD365 ;
sortie_product_variant_tmp.PRODUCTNAME = sortie_full_fits.DESCRIPTION ;
sortie_product_variant_tmp.PRODUCTSEARCHNAME = sortie_full_fits.REF ;
sortie_product_variant_tmp.PRODUCTVARIANTNUMBER = sortie_full_fits.STYLECOLORLABEL ;
sortie_product_variant_tmp.PRODUCTDESCRIPTION = "";
sortie_product_variant = sortie_product_variant_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_16 = false;










 


	tos_count_tMap_16++;

/**
 * [tMap_16 main ] stop
 */
	
	/**
	 * [tMap_16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_16";

	

 



/**
 * [tMap_16 process_data_begin ] stop
 */
// Start of branch "sortie_full_product_variant"
if(sortie_full_product_variant != null) { 



	
	/**
	 * [tMap_17 main ] start
	 */

	

	
	
	currentComponent="tMap_17";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_full_product_variant");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_17 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_17 = false;
		  boolean mainRowRejected_tMap_17 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_17__Struct Var = Var__tMap_17;// ###############################
        // ###############################
        // # Output tables

sortie_released_product_variant = null;
sortie_full_varian = null;


// # Output table : 'sortie_released_product_variant'
sortie_released_product_variant_tmp.PRODUCTMASTERNUMBER = sortie_full_product_variant.STYLE ;
sortie_released_product_variant_tmp.PRODUCTCOLORID = sortie_full_product_variant.COLOR ;
sortie_released_product_variant_tmp.PRODUCTSIZEID = sortie_full_product_variant.SIZE ;
sortie_released_product_variant_tmp.PRODUCTSTYLEID = sortie_full_product_variant.LABELD365 ;
sortie_released_product_variant_tmp.PRODUCTNAME = sortie_full_product_variant.DESCRIPTION ;
sortie_released_product_variant_tmp.PRODUCTSEARCHNAME = sortie_full_product_variant.STYLE_COLOR ;
sortie_released_product_variant_tmp.PRODUCTVARIANTNUMBER = sortie_full_product_variant.STYLECOLORLABEL ;
sortie_released_product_variant_tmp.ITEMNUMBER = sortie_full_product_variant.STYLE;
sortie_released_product_variant = sortie_released_product_variant_tmp;

// # Output table : 'sortie_full_varian'
sortie_full_varian_tmp.BRAND = sortie_full_product_variant.BRAND ;
sortie_full_varian_tmp.SEASON = sortie_full_product_variant.SEASON ;
sortie_full_varian_tmp.CATEGORY = sortie_full_product_variant.CATEGORY ;
sortie_full_varian_tmp.REF = sortie_full_product_variant.REF ;
sortie_full_varian_tmp.DESCRIPTION = sortie_full_product_variant.DESCRIPTION ;
sortie_full_varian_tmp.STYLE = sortie_full_product_variant.STYLE ;
sortie_full_varian_tmp.COLOR = sortie_full_product_variant.COLOR ;
sortie_full_varian_tmp.FASHION = sortie_full_product_variant.FASHION ;
sortie_full_varian_tmp.STYLECOLORLABEL = sortie_full_product_variant.STYLECOLORLABEL ;
sortie_full_varian_tmp.COLORNAME = sortie_full_product_variant.COLORNAME ;
sortie_full_varian_tmp.LBL = sortie_full_product_variant.LBL ;
sortie_full_varian_tmp.STYLE_COLOR = sortie_full_product_variant.STYLE_COLOR ;
sortie_full_varian_tmp.GENDER = sortie_full_product_variant.GENDER ;
sortie_full_varian_tmp.AGE_RANGE = sortie_full_product_variant.AGE_RANGE ;
sortie_full_varian_tmp.SIZE_RANGE = sortie_full_product_variant.SIZE_RANGE ;
sortie_full_varian_tmp.SIZE = sortie_full_product_variant.SIZE ;
sortie_full_varian_tmp.US_SIZE = sortie_full_product_variant.US_SIZE ;
sortie_full_varian_tmp.CM_SIZE = sortie_full_product_variant.CM_SIZE ;
sortie_full_varian_tmp.PRODUCT = sortie_full_product_variant.PRODUCT ;
sortie_full_varian_tmp.PRODUCT_STATUS = sortie_full_product_variant.PRODUCT_STATUS ;
sortie_full_varian_tmp.PRODUCT_TIER = sortie_full_product_variant.PRODUCT_TIER ;
sortie_full_varian_tmp.ACCT_EXCLUS = sortie_full_product_variant.ACCT_EXCLUS ;
sortie_full_varian_tmp.SIZE_RATIO_SPLIT = sortie_full_product_variant.SIZE_RATIO_SPLIT ;
sortie_full_varian_tmp.REC_SIZE_SPLIT = sortie_full_product_variant.REC_SIZE_SPLIT ;
sortie_full_varian_tmp.CARTON_QTY = sortie_full_product_variant.CARTON_QTY ;
sortie_full_varian_tmp.ATTRIBUTE = sortie_full_product_variant.ATTRIBUTE ;
sortie_full_varian_tmp.UNITS = sortie_full_product_variant.UNITS ;
sortie_full_varian_tmp.EUR_RRP = sortie_full_product_variant.EUR_RRP ;
sortie_full_varian_tmp.EUR_WSP = sortie_full_product_variant.EUR_WSP ;
sortie_full_varian_tmp.GBP_RRP = sortie_full_product_variant.GBP_RRP ;
sortie_full_varian_tmp.GBP_WSP = sortie_full_product_variant.GBP_WSP ;
sortie_full_varian_tmp.CHF_RRP = sortie_full_product_variant.CHF_RRP ;
sortie_full_varian_tmp.CHF_WSP = sortie_full_product_variant.CHF_WSP ;
sortie_full_varian_tmp.NOK_RRP = sortie_full_product_variant.NOK_RRP ;
sortie_full_varian_tmp.NOK_WSP = sortie_full_product_variant.NOK_WSP ;
sortie_full_varian_tmp.DKK_RRP = sortie_full_product_variant.DKK_RRP ;
sortie_full_varian_tmp.DKK_WSP = sortie_full_product_variant.DKK_WSP ;
sortie_full_varian_tmp.SEK_RRP = sortie_full_product_variant.SEK_RRP ;
sortie_full_varian_tmp.SEK_WSP = sortie_full_product_variant.SEK_WSP ;
sortie_full_varian_tmp.EUR_FINN_RRP = sortie_full_product_variant.EUR_FINN_RRP ;
sortie_full_varian_tmp.EUR_FINN_WSP = sortie_full_product_variant.EUR_FINN_WSP ;
sortie_full_varian_tmp.FABRICATION = sortie_full_product_variant.FABRICATION ;
sortie_full_varian_tmp.COO = sortie_full_product_variant.COO ;
sortie_full_varian_tmp.CUSTOM_TARIFF_CODE = sortie_full_product_variant.CUSTOM_TARIFF_CODE ;
sortie_full_varian_tmp.UPC = sortie_full_product_variant.UPC ;
sortie_full_varian_tmp.SMU_TYPE = sortie_full_product_variant.SMU_TYPE ;
sortie_full_varian_tmp.EAN = sortie_full_product_variant.EAN ;
sortie_full_varian_tmp.LABELD365 = sortie_full_product_variant.LABELD365 ;
sortie_full_varian_tmp.PRODUCT_CHANNEL = sortie_full_product_variant.PRODUCT_CHANNEL ;
sortie_full_varian_tmp.SUSTAINABILITY = StringHandling.TRIM(sortie_full_product_variant.SUSTAINABILITY ) == "" || StringHandling.TRIM(sortie_full_product_variant.SUSTAINABILITY) == null ? "No" : 
( 
StringHandling.DOWNCASE(StringHandling.TRIM(sortie_full_product_variant.SUSTAINABILITY )).equals("x") 
|| StringHandling.DOWNCASE(StringHandling.TRIM(sortie_full_product_variant.SUSTAINABILITY )).equals("true")  
|| StringHandling.DOWNCASE(StringHandling.TRIM(sortie_full_product_variant.SUSTAINABILITY )).equals("oui")  
|| 
StringHandling.DOWNCASE(StringHandling.TRIM(sortie_full_product_variant.SUSTAINABILITY )).equals("vrai")  
|| StringHandling.DOWNCASE(StringHandling.TRIM(sortie_full_product_variant.SUSTAINABILITY )).equals("1")
|| StringHandling.DOWNCASE(StringHandling.TRIM(sortie_full_product_variant.SUSTAINABILITY )).equals("yes")
) ? "Yes" : 
(
StringHandling.DOWNCASE(StringHandling.TRIM(sortie_full_product_variant.SUSTAINABILITY )).equals("false")  
|| StringHandling.DOWNCASE(StringHandling.TRIM(sortie_full_product_variant.SUSTAINABILITY )).equals("non")  
|| 
StringHandling.DOWNCASE(StringHandling.TRIM(sortie_full_product_variant.SUSTAINABILITY )).equals("faux")  
|| StringHandling.DOWNCASE(StringHandling.TRIM(sortie_full_product_variant.SUSTAINABILITY )).equals("0")
|| StringHandling.DOWNCASE(StringHandling.TRIM(sortie_full_product_variant.SUSTAINABILITY )).equals("no")  
) ? "No" : "" ;
sortie_full_varian = sortie_full_varian_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_17 = false;










 


	tos_count_tMap_17++;

/**
 * [tMap_17 main ] stop
 */
	
	/**
	 * [tMap_17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_17";

	

 



/**
 * [tMap_17 process_data_begin ] stop
 */
// Start of branch "sortie_released_product_variant"
if(sortie_released_product_variant != null) { 



	
	/**
	 * [tUniqRow_15 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_15";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_released_product_variant");
					}
					
row30 = null;			
if(sortie_released_product_variant.PRODUCTMASTERNUMBER == null){
	finder_tUniqRow_15.PRODUCTMASTERNUMBER = null;
}else{
	finder_tUniqRow_15.PRODUCTMASTERNUMBER = sortie_released_product_variant.PRODUCTMASTERNUMBER.toLowerCase();
}
if(sortie_released_product_variant.PRODUCTCOLORID == null){
	finder_tUniqRow_15.PRODUCTCOLORID = null;
}else{
	finder_tUniqRow_15.PRODUCTCOLORID = sortie_released_product_variant.PRODUCTCOLORID.toLowerCase();
}
if(sortie_released_product_variant.PRODUCTSIZEID == null){
	finder_tUniqRow_15.PRODUCTSIZEID = null;
}else{
	finder_tUniqRow_15.PRODUCTSIZEID = sortie_released_product_variant.PRODUCTSIZEID.toLowerCase();
}
if(sortie_released_product_variant.PRODUCTSTYLEID == null){
	finder_tUniqRow_15.PRODUCTSTYLEID = null;
}else{
	finder_tUniqRow_15.PRODUCTSTYLEID = sortie_released_product_variant.PRODUCTSTYLEID.toLowerCase();
}
if(sortie_released_product_variant.PRODUCTNAME == null){
	finder_tUniqRow_15.PRODUCTNAME = null;
}else{
	finder_tUniqRow_15.PRODUCTNAME = sortie_released_product_variant.PRODUCTNAME.toLowerCase();
}
if(sortie_released_product_variant.PRODUCTSEARCHNAME == null){
	finder_tUniqRow_15.PRODUCTSEARCHNAME = null;
}else{
	finder_tUniqRow_15.PRODUCTSEARCHNAME = sortie_released_product_variant.PRODUCTSEARCHNAME.toLowerCase();
}
if(sortie_released_product_variant.PRODUCTVARIANTNUMBER == null){
	finder_tUniqRow_15.PRODUCTVARIANTNUMBER = null;
}else{
	finder_tUniqRow_15.PRODUCTVARIANTNUMBER = sortie_released_product_variant.PRODUCTVARIANTNUMBER.toLowerCase();
}
if(sortie_released_product_variant.ITEMNUMBER == null){
	finder_tUniqRow_15.ITEMNUMBER = null;
}else{
	finder_tUniqRow_15.ITEMNUMBER = sortie_released_product_variant.ITEMNUMBER.toLowerCase();
}	
finder_tUniqRow_15.hashCodeDirty = true;
if (!keystUniqRow_15.contains(finder_tUniqRow_15)) {
		KeyStruct_tUniqRow_15 new_tUniqRow_15 = new KeyStruct_tUniqRow_15();

		
if(sortie_released_product_variant.PRODUCTMASTERNUMBER == null){
	new_tUniqRow_15.PRODUCTMASTERNUMBER = null;
}else{
	new_tUniqRow_15.PRODUCTMASTERNUMBER = sortie_released_product_variant.PRODUCTMASTERNUMBER.toLowerCase();
}
if(sortie_released_product_variant.PRODUCTCOLORID == null){
	new_tUniqRow_15.PRODUCTCOLORID = null;
}else{
	new_tUniqRow_15.PRODUCTCOLORID = sortie_released_product_variant.PRODUCTCOLORID.toLowerCase();
}
if(sortie_released_product_variant.PRODUCTSIZEID == null){
	new_tUniqRow_15.PRODUCTSIZEID = null;
}else{
	new_tUniqRow_15.PRODUCTSIZEID = sortie_released_product_variant.PRODUCTSIZEID.toLowerCase();
}
if(sortie_released_product_variant.PRODUCTSTYLEID == null){
	new_tUniqRow_15.PRODUCTSTYLEID = null;
}else{
	new_tUniqRow_15.PRODUCTSTYLEID = sortie_released_product_variant.PRODUCTSTYLEID.toLowerCase();
}
if(sortie_released_product_variant.PRODUCTNAME == null){
	new_tUniqRow_15.PRODUCTNAME = null;
}else{
	new_tUniqRow_15.PRODUCTNAME = sortie_released_product_variant.PRODUCTNAME.toLowerCase();
}
if(sortie_released_product_variant.PRODUCTSEARCHNAME == null){
	new_tUniqRow_15.PRODUCTSEARCHNAME = null;
}else{
	new_tUniqRow_15.PRODUCTSEARCHNAME = sortie_released_product_variant.PRODUCTSEARCHNAME.toLowerCase();
}
if(sortie_released_product_variant.PRODUCTVARIANTNUMBER == null){
	new_tUniqRow_15.PRODUCTVARIANTNUMBER = null;
}else{
	new_tUniqRow_15.PRODUCTVARIANTNUMBER = sortie_released_product_variant.PRODUCTVARIANTNUMBER.toLowerCase();
}
if(sortie_released_product_variant.ITEMNUMBER == null){
	new_tUniqRow_15.ITEMNUMBER = null;
}else{
	new_tUniqRow_15.ITEMNUMBER = sortie_released_product_variant.ITEMNUMBER.toLowerCase();
}
		
		keystUniqRow_15.add(new_tUniqRow_15);if(row30 == null){ 
	
	row30 = new row30Struct();
}row30.PRODUCTMASTERNUMBER = sortie_released_product_variant.PRODUCTMASTERNUMBER;			row30.PRODUCTCOLORID = sortie_released_product_variant.PRODUCTCOLORID;			row30.PRODUCTSIZEID = sortie_released_product_variant.PRODUCTSIZEID;			row30.PRODUCTSTYLEID = sortie_released_product_variant.PRODUCTSTYLEID;			row30.PRODUCTNAME = sortie_released_product_variant.PRODUCTNAME;			row30.PRODUCTSEARCHNAME = sortie_released_product_variant.PRODUCTSEARCHNAME;			row30.PRODUCTVARIANTNUMBER = sortie_released_product_variant.PRODUCTVARIANTNUMBER;			row30.ITEMNUMBER = sortie_released_product_variant.ITEMNUMBER;					
		nb_uniques_tUniqRow_15++;
	} else {
	  nb_duplicates_tUniqRow_15++;
	}

 


	tos_count_tUniqRow_15++;

/**
 * [tUniqRow_15 main ] stop
 */
	
	/**
	 * [tUniqRow_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_15";

	

 



/**
 * [tUniqRow_15 process_data_begin ] stop
 */
// Start of branch "row30"
if(row30 != null) { 



	
	/**
	 * [tHashOutput_7 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_7";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row30");
					}
					



    
		row30Struct oneRow_tHashOutput_7 = new row30Struct();
				
					oneRow_tHashOutput_7.PRODUCTMASTERNUMBER = row30.PRODUCTMASTERNUMBER;
					oneRow_tHashOutput_7.PRODUCTCOLORID = row30.PRODUCTCOLORID;
					oneRow_tHashOutput_7.PRODUCTSIZEID = row30.PRODUCTSIZEID;
					oneRow_tHashOutput_7.PRODUCTSTYLEID = row30.PRODUCTSTYLEID;
					oneRow_tHashOutput_7.PRODUCTNAME = row30.PRODUCTNAME;
					oneRow_tHashOutput_7.PRODUCTSEARCHNAME = row30.PRODUCTSEARCHNAME;
					oneRow_tHashOutput_7.PRODUCTVARIANTNUMBER = row30.PRODUCTVARIANTNUMBER;
					oneRow_tHashOutput_7.ITEMNUMBER = row30.ITEMNUMBER;
		
        tHashFile_tHashOutput_7.put(oneRow_tHashOutput_7);
        nb_line_tHashOutput_7 ++;
 


	tos_count_tHashOutput_7++;

/**
 * [tHashOutput_7 main ] stop
 */
	
	/**
	 * [tHashOutput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_7";

	

 



/**
 * [tHashOutput_7 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_7";

	

 



/**
 * [tHashOutput_7 process_data_end ] stop
 */

} // End of branch "row30"




	
	/**
	 * [tUniqRow_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_15";

	

 



/**
 * [tUniqRow_15 process_data_end ] stop
 */

} // End of branch "sortie_released_product_variant"




// Start of branch "sortie_full_varian"
if(sortie_full_varian != null) { 



	
	/**
	 * [tMap_18 main ] start
	 */

	

	
	
	currentComponent="tMap_18";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_full_varian");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_18 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_18 = false;
		  boolean mainRowRejected_tMap_18 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row49" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow49 = false;
       		  	    	
       		  	    	
 							row49Struct row49ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_18) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_18 = false;
								
                        		    		row49HashKey.ITEMID = sortie_full_varian.STYLE ;
                        		    		
                        		    		row49HashKey.INVENTSIZEID = sortie_full_varian.SIZE ;
                        		    		
                        		    		row49HashKey.INVENTSTYLEID = sortie_full_varian.LABELD365 ;
                        		    		
                        		    		row49HashKey.INVENTCOLORID = sortie_full_varian.COLOR ;
                        		    		
                        		    		row49HashKey.SEASONCODE = sortie_full_varian.SEASON ;
                        		    		

								
		                        	row49HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row49.lookup( row49HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row49 != null && tHash_Lookup_row49.getCount(row49HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row49' and it contains more one result from keys :  row49.ITEMID = '" + row49HashKey.ITEMID + "', row49.INVENTSIZEID = '" + row49HashKey.INVENTSIZEID + "', row49.INVENTSTYLEID = '" + row49HashKey.INVENTSTYLEID + "', row49.INVENTCOLORID = '" + row49HashKey.INVENTCOLORID + "', row49.SEASONCODE = '" + row49HashKey.SEASONCODE + "'");
								} // G 071
							

							row49Struct row49 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row49Struct fromLookup_row49 = null;
							row49 = row49Default;
										 
							
								 
							
							
								if (tHash_Lookup_row49 !=null && tHash_Lookup_row49.hasNext()) { // G 099
								
							
								
								fromLookup_row49 = tHash_Lookup_row49.next();

							
							
								} // G 099
							
							

							if(fromLookup_row49 != null) {
								row49 = fromLookup_row49;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_18__Struct Var = Var__tMap_18;// ###############################
        // ###############################
        // # Output tables

copyOfsortie_released_product_variant = null;
sortie_product_status = null;


// # Output table : 'copyOfsortie_released_product_variant'
copyOfsortie_released_product_variant_tmp.BRAND = sortie_full_varian.BRAND ;
copyOfsortie_released_product_variant_tmp.SEASON = sortie_full_varian.SEASON ;
copyOfsortie_released_product_variant_tmp.CATEGORY = sortie_full_varian.CATEGORY ;
copyOfsortie_released_product_variant_tmp.REF = sortie_full_varian.REF ;
copyOfsortie_released_product_variant_tmp.DESCRIPTION = sortie_full_varian.DESCRIPTION ;
copyOfsortie_released_product_variant_tmp.STYLE = sortie_full_varian.STYLE ;
copyOfsortie_released_product_variant_tmp.COLOR = sortie_full_varian.COLOR ;
copyOfsortie_released_product_variant_tmp.FASHION = sortie_full_varian.FASHION ;
copyOfsortie_released_product_variant_tmp.STYLECOLORLABEL = sortie_full_varian.STYLECOLORLABEL ;
copyOfsortie_released_product_variant_tmp.COLORNAME = sortie_full_varian.COLORNAME ;
copyOfsortie_released_product_variant_tmp.LBL = sortie_full_varian.LBL ;
copyOfsortie_released_product_variant_tmp.STYLE_COLOR = sortie_full_varian.STYLE_COLOR ;
copyOfsortie_released_product_variant_tmp.GENDER = sortie_full_varian.GENDER ;
copyOfsortie_released_product_variant_tmp.AGE_RANGE = sortie_full_varian.AGE_RANGE ;
copyOfsortie_released_product_variant_tmp.SIZE_RANGE = sortie_full_varian.SIZE_RANGE ;
copyOfsortie_released_product_variant_tmp.SIZE = sortie_full_varian.SIZE ;
copyOfsortie_released_product_variant_tmp.US_SIZE = sortie_full_varian.US_SIZE ;
copyOfsortie_released_product_variant_tmp.CM_SIZE = sortie_full_varian.CM_SIZE ;
copyOfsortie_released_product_variant_tmp.PRODUCT = sortie_full_varian.PRODUCT ;
copyOfsortie_released_product_variant_tmp.PRODUCT_STATUS = sortie_full_varian.PRODUCT_STATUS ;
copyOfsortie_released_product_variant_tmp.PRODUCT_TIER = sortie_full_varian.PRODUCT_TIER ;
copyOfsortie_released_product_variant_tmp.ACCT_EXCLUS = sortie_full_varian.ACCT_EXCLUS ;
copyOfsortie_released_product_variant_tmp.SIZE_RATIO_SPLIT = sortie_full_varian.SIZE_RATIO_SPLIT ;
copyOfsortie_released_product_variant_tmp.REC_SIZE_SPLIT = sortie_full_varian.REC_SIZE_SPLIT ;
copyOfsortie_released_product_variant_tmp.CARTON_QTY = sortie_full_varian.CARTON_QTY ;
copyOfsortie_released_product_variant_tmp.ATTRIBUTE = sortie_full_varian.ATTRIBUTE ;
copyOfsortie_released_product_variant_tmp.UNITS = sortie_full_varian.UNITS ;
copyOfsortie_released_product_variant_tmp.EUR_RRP = sortie_full_varian.EUR_RRP ;
copyOfsortie_released_product_variant_tmp.EUR_WSP = sortie_full_varian.EUR_WSP ;
copyOfsortie_released_product_variant_tmp.GBP_RRP = sortie_full_varian.GBP_RRP ;
copyOfsortie_released_product_variant_tmp.GBP_WSP = sortie_full_varian.GBP_WSP ;
copyOfsortie_released_product_variant_tmp.CHF_RRP = sortie_full_varian.CHF_RRP ;
copyOfsortie_released_product_variant_tmp.CHF_WSP = sortie_full_varian.CHF_WSP ;
copyOfsortie_released_product_variant_tmp.NOK_RRP = sortie_full_varian.NOK_RRP ;
copyOfsortie_released_product_variant_tmp.NOK_WSP = sortie_full_varian.NOK_WSP ;
copyOfsortie_released_product_variant_tmp.DKK_RRP = sortie_full_varian.DKK_RRP ;
copyOfsortie_released_product_variant_tmp.DKK_WSP = sortie_full_varian.DKK_WSP ;
copyOfsortie_released_product_variant_tmp.SEK_RRP = sortie_full_varian.SEK_RRP ;
copyOfsortie_released_product_variant_tmp.SEK_WSP = sortie_full_varian.SEK_WSP ;
copyOfsortie_released_product_variant_tmp.EUR_FINN_RRP = sortie_full_varian.EUR_FINN_RRP ;
copyOfsortie_released_product_variant_tmp.EUR_FINN_WSP = sortie_full_varian.EUR_FINN_WSP ;
copyOfsortie_released_product_variant_tmp.FABRICATION = sortie_full_varian.FABRICATION ;
copyOfsortie_released_product_variant_tmp.COO = sortie_full_varian.COO ;
copyOfsortie_released_product_variant_tmp.CUSTOM_TARIFF_CODE = sortie_full_varian.CUSTOM_TARIFF_CODE ;
copyOfsortie_released_product_variant_tmp.UPC = sortie_full_varian.UPC ;
copyOfsortie_released_product_variant_tmp.SMU_TYPE = sortie_full_varian.SMU_TYPE ;
copyOfsortie_released_product_variant_tmp.EAN = sortie_full_varian.EAN ;
copyOfsortie_released_product_variant_tmp.LABELD365 = sortie_full_varian.LABELD365 ;
copyOfsortie_released_product_variant_tmp.PRODUCT_CHANNEL = sortie_full_varian.PRODUCT_CHANNEL ;
copyOfsortie_released_product_variant_tmp.SUSTAINABILITY = sortie_full_varian.SUSTAINABILITY ;
copyOfsortie_released_product_variant = copyOfsortie_released_product_variant_tmp;

// # Output table : 'sortie_product_status'
// # Filter conditions 
if( 

row49.PRODUCTSTATUSID == null ||  !row49.PRODUCTSTATUSID.equals( sortie_full_varian.PRODUCT_STATUS)
|| row49.SPLSUSTAINABILITY == null ||  !row49.SPLSUSTAINABILITY.equals( sortie_full_varian.SUSTAINABILITY)

 ) {
sortie_product_status_tmp.CHANNELCODE = "All";
sortie_product_status_tmp.ITEMID = sortie_full_varian.STYLE ;
sortie_product_status_tmp.INVENTSIZEID = sortie_full_varian.SIZE ;
sortie_product_status_tmp.INVENTSTYLEID = sortie_full_varian.LABELD365 ;
sortie_product_status_tmp.INVENTCOLORID = sortie_full_varian.COLOR ;
sortie_product_status_tmp.PRODUCTSTATUSID = sortie_full_varian.PRODUCT_STATUS ;
sortie_product_status_tmp.SEASONCODE = sortie_full_varian.SEASON ;
sortie_product_status_tmp.SPLSPCB = row49.SPLSPCB ;
sortie_product_status_tmp.SPLSUSTAINABILITY = sortie_full_varian.SUSTAINABILITY ;
sortie_product_status = sortie_product_status_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_18 = false;










 


	tos_count_tMap_18++;

/**
 * [tMap_18 main ] stop
 */
	
	/**
	 * [tMap_18 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_18";

	

 



/**
 * [tMap_18 process_data_begin ] stop
 */
// Start of branch "copyOfsortie_released_product_variant"
if(copyOfsortie_released_product_variant != null) { 



	
	/**
	 * [tMap_19 main ] start
	 */

	

	
	
	currentComponent="tMap_19";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfsortie_released_product_variant");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_19 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_19 = false;
		  boolean mainRowRejected_tMap_19 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_19__Struct Var = Var__tMap_19;// ###############################
        // ###############################
        // # Output tables

sortie_barcode = null;
sortie_full_barcode_1 = null;
sortie_EAN = null;


// # Output table : 'sortie_barcode'
sortie_barcode_tmp.ITEMNUMBER = copyOfsortie_released_product_variant.STYLE ;
sortie_barcode_tmp.PRODUCTCOLORID = copyOfsortie_released_product_variant.COLOR ;
sortie_barcode_tmp.PRODUCTSIZEID = copyOfsortie_released_product_variant.SIZE ;
sortie_barcode_tmp.PRODUCTSTYLEID = copyOfsortie_released_product_variant.LABELD365 ;
sortie_barcode_tmp.PRODUCTQUANTITYUNITSYMBOL = "PCS";
sortie_barcode_tmp.BARCODESETUPID = "UPC-12";
sortie_barcode_tmp.BARCODE = copyOfsortie_released_product_variant.UPC ;
sortie_barcode_tmp.PRODUCTDESCRIPTION = copyOfsortie_released_product_variant.DESCRIPTION ;
sortie_barcode_tmp.PRODUCTQUANTITY = "0.000000" ;
sortie_barcode = sortie_barcode_tmp;

// # Output table : 'sortie_full_barcode_1'
sortie_full_barcode_1_tmp.BRAND = copyOfsortie_released_product_variant.BRAND ;
sortie_full_barcode_1_tmp.SEASON = copyOfsortie_released_product_variant.SEASON ;
sortie_full_barcode_1_tmp.CATEGORY = copyOfsortie_released_product_variant.CATEGORY ;
sortie_full_barcode_1_tmp.REF = copyOfsortie_released_product_variant.REF ;
sortie_full_barcode_1_tmp.DESCRIPTION = copyOfsortie_released_product_variant.DESCRIPTION ;
sortie_full_barcode_1_tmp.STYLE = copyOfsortie_released_product_variant.STYLE ;
sortie_full_barcode_1_tmp.COLOR = copyOfsortie_released_product_variant.COLOR ;
sortie_full_barcode_1_tmp.FASHION = copyOfsortie_released_product_variant.FASHION ;
sortie_full_barcode_1_tmp.STYLECOLORLABEL = copyOfsortie_released_product_variant.STYLECOLORLABEL ;
sortie_full_barcode_1_tmp.COLORNAME = copyOfsortie_released_product_variant.COLORNAME ;
sortie_full_barcode_1_tmp.LBL = copyOfsortie_released_product_variant.LBL ;
sortie_full_barcode_1_tmp.STYLE_COLOR = copyOfsortie_released_product_variant.STYLE_COLOR ;
sortie_full_barcode_1_tmp.GENDER = copyOfsortie_released_product_variant.GENDER ;
sortie_full_barcode_1_tmp.AGE_RANGE = copyOfsortie_released_product_variant.AGE_RANGE ;
sortie_full_barcode_1_tmp.SIZE_RANGE = copyOfsortie_released_product_variant.SIZE_RANGE ;
sortie_full_barcode_1_tmp.SIZE = copyOfsortie_released_product_variant.SIZE ;
sortie_full_barcode_1_tmp.US_SIZE = copyOfsortie_released_product_variant.US_SIZE ;
sortie_full_barcode_1_tmp.CM_SIZE = copyOfsortie_released_product_variant.CM_SIZE ;
sortie_full_barcode_1_tmp.PRODUCT = copyOfsortie_released_product_variant.PRODUCT ;
sortie_full_barcode_1_tmp.PRODUCT_STATUS = copyOfsortie_released_product_variant.PRODUCT_STATUS ;
sortie_full_barcode_1_tmp.PRODUCT_TIER = copyOfsortie_released_product_variant.PRODUCT_TIER ;
sortie_full_barcode_1_tmp.ACCT_EXCLUS = copyOfsortie_released_product_variant.ACCT_EXCLUS ;
sortie_full_barcode_1_tmp.SIZE_RATIO_SPLIT = copyOfsortie_released_product_variant.SIZE_RATIO_SPLIT ;
sortie_full_barcode_1_tmp.REC_SIZE_SPLIT = copyOfsortie_released_product_variant.REC_SIZE_SPLIT ;
sortie_full_barcode_1_tmp.CARTON_QTY = copyOfsortie_released_product_variant.CARTON_QTY ;
sortie_full_barcode_1_tmp.ATTRIBUTE = copyOfsortie_released_product_variant.ATTRIBUTE ;
sortie_full_barcode_1_tmp.UNITS = copyOfsortie_released_product_variant.UNITS ;
sortie_full_barcode_1_tmp.EUR_RRP = copyOfsortie_released_product_variant.EUR_RRP ;
sortie_full_barcode_1_tmp.EUR_WSP = copyOfsortie_released_product_variant.EUR_WSP ;
sortie_full_barcode_1_tmp.GBP_RRP = copyOfsortie_released_product_variant.GBP_RRP ;
sortie_full_barcode_1_tmp.GBP_WSP = copyOfsortie_released_product_variant.GBP_WSP ;
sortie_full_barcode_1_tmp.CHF_RRP = copyOfsortie_released_product_variant.CHF_RRP ;
sortie_full_barcode_1_tmp.CHF_WSP = copyOfsortie_released_product_variant.CHF_WSP ;
sortie_full_barcode_1_tmp.NOK_RRP = copyOfsortie_released_product_variant.NOK_RRP ;
sortie_full_barcode_1_tmp.NOK_WSP = copyOfsortie_released_product_variant.NOK_WSP ;
sortie_full_barcode_1_tmp.DKK_RRP = copyOfsortie_released_product_variant.DKK_RRP ;
sortie_full_barcode_1_tmp.DKK_WSP = copyOfsortie_released_product_variant.DKK_WSP ;
sortie_full_barcode_1_tmp.SEK_RRP = copyOfsortie_released_product_variant.SEK_RRP ;
sortie_full_barcode_1_tmp.SEK_WSP = copyOfsortie_released_product_variant.SEK_WSP ;
sortie_full_barcode_1_tmp.EUR_FINN_RRP = copyOfsortie_released_product_variant.EUR_FINN_RRP ;
sortie_full_barcode_1_tmp.EUR_FINN_WSP = copyOfsortie_released_product_variant.EUR_FINN_WSP ;
sortie_full_barcode_1_tmp.FABRICATION = copyOfsortie_released_product_variant.FABRICATION ;
sortie_full_barcode_1_tmp.COO = copyOfsortie_released_product_variant.COO ;
sortie_full_barcode_1_tmp.CUSTOM_TARIFF_CODE = copyOfsortie_released_product_variant.CUSTOM_TARIFF_CODE ;
sortie_full_barcode_1_tmp.UPC = copyOfsortie_released_product_variant.UPC ;
sortie_full_barcode_1_tmp.SMU_TYPE = copyOfsortie_released_product_variant.SMU_TYPE ;
sortie_full_barcode_1_tmp.EAN = copyOfsortie_released_product_variant.EAN ;
sortie_full_barcode_1_tmp.LABELD365 = copyOfsortie_released_product_variant.LABELD365 ;
sortie_full_barcode_1_tmp.PRODUCT_CHANNEL = copyOfsortie_released_product_variant.PRODUCT_CHANNEL ;
sortie_full_barcode_1 = sortie_full_barcode_1_tmp;

// # Output table : 'sortie_EAN'
sortie_EAN_tmp.ITEMNUMBER = copyOfsortie_released_product_variant.STYLE ;
sortie_EAN_tmp.PRODUCTCOLORID = copyOfsortie_released_product_variant.COLOR ;
sortie_EAN_tmp.PRODUCTSIZEID = copyOfsortie_released_product_variant.SIZE ;
sortie_EAN_tmp.PRODUCTSTYLEID = copyOfsortie_released_product_variant.LABELD365 ;
sortie_EAN_tmp.PRODUCTQUANTITYUNITSYMBOL = "PCS";
sortie_EAN_tmp.BARCODESETUPID = "EAN-13";
sortie_EAN_tmp.BARCODE = copyOfsortie_released_product_variant.EAN;
sortie_EAN_tmp.PRODUCTDESCRIPTION = copyOfsortie_released_product_variant.DESCRIPTION ;
sortie_EAN_tmp.PRODUCTQUANTITY = "0.000000" ;
sortie_EAN = sortie_EAN_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_19 = false;










 


	tos_count_tMap_19++;

/**
 * [tMap_19 main ] stop
 */
	
	/**
	 * [tMap_19 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_19";

	

 



/**
 * [tMap_19 process_data_begin ] stop
 */
// Start of branch "sortie_barcode"
if(sortie_barcode != null) { 



	
	/**
	 * [tUniqRow_17 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_17";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_barcode");
					}
					
row33 = null;			
if(sortie_barcode.ITEMNUMBER == null){
	finder_tUniqRow_17.ITEMNUMBER = null;
}else{
	finder_tUniqRow_17.ITEMNUMBER = sortie_barcode.ITEMNUMBER.toLowerCase();
}
if(sortie_barcode.PRODUCTCOLORID == null){
	finder_tUniqRow_17.PRODUCTCOLORID = null;
}else{
	finder_tUniqRow_17.PRODUCTCOLORID = sortie_barcode.PRODUCTCOLORID.toLowerCase();
}
if(sortie_barcode.PRODUCTSIZEID == null){
	finder_tUniqRow_17.PRODUCTSIZEID = null;
}else{
	finder_tUniqRow_17.PRODUCTSIZEID = sortie_barcode.PRODUCTSIZEID.toLowerCase();
}
if(sortie_barcode.PRODUCTSTYLEID == null){
	finder_tUniqRow_17.PRODUCTSTYLEID = null;
}else{
	finder_tUniqRow_17.PRODUCTSTYLEID = sortie_barcode.PRODUCTSTYLEID.toLowerCase();
}
if(sortie_barcode.PRODUCTQUANTITYUNITSYMBOL == null){
	finder_tUniqRow_17.PRODUCTQUANTITYUNITSYMBOL = null;
}else{
	finder_tUniqRow_17.PRODUCTQUANTITYUNITSYMBOL = sortie_barcode.PRODUCTQUANTITYUNITSYMBOL.toLowerCase();
}
if(sortie_barcode.BARCODESETUPID == null){
	finder_tUniqRow_17.BARCODESETUPID = null;
}else{
	finder_tUniqRow_17.BARCODESETUPID = sortie_barcode.BARCODESETUPID.toLowerCase();
}
if(sortie_barcode.BARCODE == null){
	finder_tUniqRow_17.BARCODE = null;
}else{
	finder_tUniqRow_17.BARCODE = sortie_barcode.BARCODE.toLowerCase();
}
if(sortie_barcode.PRODUCTDESCRIPTION == null){
	finder_tUniqRow_17.PRODUCTDESCRIPTION = null;
}else{
	finder_tUniqRow_17.PRODUCTDESCRIPTION = sortie_barcode.PRODUCTDESCRIPTION.toLowerCase();
}	
finder_tUniqRow_17.hashCodeDirty = true;
if (!keystUniqRow_17.contains(finder_tUniqRow_17)) {
		KeyStruct_tUniqRow_17 new_tUniqRow_17 = new KeyStruct_tUniqRow_17();

		
if(sortie_barcode.ITEMNUMBER == null){
	new_tUniqRow_17.ITEMNUMBER = null;
}else{
	new_tUniqRow_17.ITEMNUMBER = sortie_barcode.ITEMNUMBER.toLowerCase();
}
if(sortie_barcode.PRODUCTCOLORID == null){
	new_tUniqRow_17.PRODUCTCOLORID = null;
}else{
	new_tUniqRow_17.PRODUCTCOLORID = sortie_barcode.PRODUCTCOLORID.toLowerCase();
}
if(sortie_barcode.PRODUCTSIZEID == null){
	new_tUniqRow_17.PRODUCTSIZEID = null;
}else{
	new_tUniqRow_17.PRODUCTSIZEID = sortie_barcode.PRODUCTSIZEID.toLowerCase();
}
if(sortie_barcode.PRODUCTSTYLEID == null){
	new_tUniqRow_17.PRODUCTSTYLEID = null;
}else{
	new_tUniqRow_17.PRODUCTSTYLEID = sortie_barcode.PRODUCTSTYLEID.toLowerCase();
}
if(sortie_barcode.PRODUCTQUANTITYUNITSYMBOL == null){
	new_tUniqRow_17.PRODUCTQUANTITYUNITSYMBOL = null;
}else{
	new_tUniqRow_17.PRODUCTQUANTITYUNITSYMBOL = sortie_barcode.PRODUCTQUANTITYUNITSYMBOL.toLowerCase();
}
if(sortie_barcode.BARCODESETUPID == null){
	new_tUniqRow_17.BARCODESETUPID = null;
}else{
	new_tUniqRow_17.BARCODESETUPID = sortie_barcode.BARCODESETUPID.toLowerCase();
}
if(sortie_barcode.BARCODE == null){
	new_tUniqRow_17.BARCODE = null;
}else{
	new_tUniqRow_17.BARCODE = sortie_barcode.BARCODE.toLowerCase();
}
if(sortie_barcode.PRODUCTDESCRIPTION == null){
	new_tUniqRow_17.PRODUCTDESCRIPTION = null;
}else{
	new_tUniqRow_17.PRODUCTDESCRIPTION = sortie_barcode.PRODUCTDESCRIPTION.toLowerCase();
}
		
		keystUniqRow_17.add(new_tUniqRow_17);if(row33 == null){ 
	
	row33 = new row33Struct();
}row33.ITEMNUMBER = sortie_barcode.ITEMNUMBER;			row33.PRODUCTCOLORID = sortie_barcode.PRODUCTCOLORID;			row33.PRODUCTSIZEID = sortie_barcode.PRODUCTSIZEID;			row33.PRODUCTSTYLEID = sortie_barcode.PRODUCTSTYLEID;			row33.PRODUCTQUANTITYUNITSYMBOL = sortie_barcode.PRODUCTQUANTITYUNITSYMBOL;			row33.BARCODESETUPID = sortie_barcode.BARCODESETUPID;			row33.BARCODE = sortie_barcode.BARCODE;			row33.PRODUCTDESCRIPTION = sortie_barcode.PRODUCTDESCRIPTION;			row33.PRODUCTQUANTITY = sortie_barcode.PRODUCTQUANTITY;					
		nb_uniques_tUniqRow_17++;
	} else {
	  nb_duplicates_tUniqRow_17++;
	}

 


	tos_count_tUniqRow_17++;

/**
 * [tUniqRow_17 main ] stop
 */
	
	/**
	 * [tUniqRow_17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_17";

	

 



/**
 * [tUniqRow_17 process_data_begin ] stop
 */
// Start of branch "row33"
if(row33 != null) { 



	
	/**
	 * [tFilterRow_4 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row33");
					}
					

          row37 = null;
    Operator_tFilterRow_4 ope_tFilterRow_4 = new Operator_tFilterRow_4("&&");
            ope_tFilterRow_4.matches((row33.BARCODE == null? false : row33.BARCODE.compareTo("") != 0)
                           , "BARCODE.compareTo(\"\") != 0 failed");
    
    if (ope_tFilterRow_4.getMatchFlag()) {
              if(row37 == null){ 
                row37 = new row37Struct();
              }
               row37.ITEMNUMBER = row33.ITEMNUMBER;
               row37.PRODUCTCOLORID = row33.PRODUCTCOLORID;
               row37.PRODUCTSIZEID = row33.PRODUCTSIZEID;
               row37.PRODUCTSTYLEID = row33.PRODUCTSTYLEID;
               row37.PRODUCTQUANTITYUNITSYMBOL = row33.PRODUCTQUANTITYUNITSYMBOL;
               row37.BARCODESETUPID = row33.BARCODESETUPID;
               row37.BARCODE = row33.BARCODE;
               row37.PRODUCTDESCRIPTION = row33.PRODUCTDESCRIPTION;
               row37.PRODUCTQUANTITY = row33.PRODUCTQUANTITY;    
      nb_line_ok_tFilterRow_4++;
    } else {
      nb_line_reject_tFilterRow_4++;
    }

nb_line_tFilterRow_4++;

 


	tos_count_tFilterRow_4++;

/**
 * [tFilterRow_4 main ] stop
 */
	
	/**
	 * [tFilterRow_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_4";

	

 



/**
 * [tFilterRow_4 process_data_begin ] stop
 */
// Start of branch "row37"
if(row37 != null) { 



	
	/**
	 * [tHashOutput_10 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_10";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row37");
					}
					



    
		row37Struct oneRow_tHashOutput_10 = new row37Struct();
				
					oneRow_tHashOutput_10.ITEMNUMBER = row37.ITEMNUMBER;
					oneRow_tHashOutput_10.PRODUCTCOLORID = row37.PRODUCTCOLORID;
					oneRow_tHashOutput_10.PRODUCTSIZEID = row37.PRODUCTSIZEID;
					oneRow_tHashOutput_10.PRODUCTSTYLEID = row37.PRODUCTSTYLEID;
					oneRow_tHashOutput_10.PRODUCTQUANTITYUNITSYMBOL = row37.PRODUCTQUANTITYUNITSYMBOL;
					oneRow_tHashOutput_10.BARCODESETUPID = row37.BARCODESETUPID;
					oneRow_tHashOutput_10.BARCODE = row37.BARCODE;
					oneRow_tHashOutput_10.PRODUCTDESCRIPTION = row37.PRODUCTDESCRIPTION;
					oneRow_tHashOutput_10.PRODUCTQUANTITY = row37.PRODUCTQUANTITY;
		
        tHashFile_tHashOutput_10.put(oneRow_tHashOutput_10);
        nb_line_tHashOutput_10 ++;
 


	tos_count_tHashOutput_10++;

/**
 * [tHashOutput_10 main ] stop
 */
	
	/**
	 * [tHashOutput_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_10";

	

 



/**
 * [tHashOutput_10 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_10";

	

 



/**
 * [tHashOutput_10 process_data_end ] stop
 */

} // End of branch "row37"




	
	/**
	 * [tFilterRow_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_4";

	

 



/**
 * [tFilterRow_4 process_data_end ] stop
 */

} // End of branch "row33"




	
	/**
	 * [tUniqRow_17 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_17";

	

 



/**
 * [tUniqRow_17 process_data_end ] stop
 */

} // End of branch "sortie_barcode"




// Start of branch "sortie_full_barcode_1"
if(sortie_full_barcode_1 != null) { 



	
	/**
	 * [tMap_20 main ] start
	 */

	

	
	
	currentComponent="tMap_20";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_full_barcode_1");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_20 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_20 = false;
		  boolean mainRowRejected_tMap_20 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_20__Struct Var = Var__tMap_20;// ###############################
        // ###############################
        // # Output tables

copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full = null;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product = null;


// # Output table : 'copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full'
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.BRAND = sortie_full_barcode_1.BRAND ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.SEASON = sortie_full_barcode_1.SEASON ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.CATEGORY = sortie_full_barcode_1.CATEGORY ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.REF = sortie_full_barcode_1.REF ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.DESCRIPTION = sortie_full_barcode_1.DESCRIPTION ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.STYLE = sortie_full_barcode_1.STYLE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.COLOR = sortie_full_barcode_1.COLOR ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.FASHION = sortie_full_barcode_1.FASHION ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.STYLECOLORLABEL = sortie_full_barcode_1.STYLECOLORLABEL ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.COLORNAME = sortie_full_barcode_1.COLORNAME ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.LBL = sortie_full_barcode_1.LBL ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.STYLE_COLOR = sortie_full_barcode_1.STYLE_COLOR ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.GENDER = sortie_full_barcode_1.GENDER ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.AGE_RANGE = sortie_full_barcode_1.AGE_RANGE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.SIZE_RANGE = sortie_full_barcode_1.SIZE_RANGE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.SIZE = sortie_full_barcode_1.SIZE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.US_SIZE = sortie_full_barcode_1.US_SIZE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.CM_SIZE = sortie_full_barcode_1.CM_SIZE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.PRODUCT = sortie_full_barcode_1.PRODUCT ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.PRODUCT_STATUS = sortie_full_barcode_1.PRODUCT_STATUS ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.PRODUCT_TIER = sortie_full_barcode_1.PRODUCT_TIER ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.ACCT_EXCLUS = sortie_full_barcode_1.ACCT_EXCLUS ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.SIZE_RATIO_SPLIT = sortie_full_barcode_1.SIZE_RATIO_SPLIT ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.REC_SIZE_SPLIT = sortie_full_barcode_1.REC_SIZE_SPLIT ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.CARTON_QTY = sortie_full_barcode_1.CARTON_QTY ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.ATTRIBUTE = sortie_full_barcode_1.ATTRIBUTE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.UNITS = sortie_full_barcode_1.UNITS ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.EUR_RRP = sortie_full_barcode_1.EUR_RRP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.EUR_WSP = sortie_full_barcode_1.EUR_WSP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.GBP_RRP = sortie_full_barcode_1.GBP_RRP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.GBP_WSP = sortie_full_barcode_1.GBP_WSP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.CHF_RRP = sortie_full_barcode_1.CHF_RRP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.CHF_WSP = sortie_full_barcode_1.CHF_WSP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.NOK_RRP = sortie_full_barcode_1.NOK_RRP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.NOK_WSP = sortie_full_barcode_1.NOK_WSP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.DKK_RRP = sortie_full_barcode_1.DKK_RRP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.DKK_WSP = sortie_full_barcode_1.DKK_WSP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.SEK_RRP = sortie_full_barcode_1.SEK_RRP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.SEK_WSP = sortie_full_barcode_1.SEK_WSP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.EUR_FINN_RRP = sortie_full_barcode_1.EUR_FINN_RRP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.EUR_FINN_WSP = sortie_full_barcode_1.EUR_FINN_WSP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.FABRICATION = sortie_full_barcode_1.FABRICATION ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.COO = sortie_full_barcode_1.COO ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.CUSTOM_TARIFF_CODE = sortie_full_barcode_1.CUSTOM_TARIFF_CODE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.UPC = sortie_full_barcode_1.UPC ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.SMU_TYPE = sortie_full_barcode_1.SMU_TYPE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.EAN = sortie_full_barcode_1.EAN ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.LABELD365 = sortie_full_barcode_1.LABELD365 ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.PRODUCT_CHANNEL = sortie_full_barcode_1.PRODUCT_CHANNEL ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp;

// # Output table : 'copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product'
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product_tmp.PRODUCTNUMBER = sortie_full_barcode_1.STYLE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product_tmp.ATTRIBUTETYPENAME = "Category Master File";
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product_tmp.ATTRIBUTENAME = "Category Master File";
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product_tmp.TEXTVALUE = sortie_full_barcode_1.CATEGORY ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_20 = false;










 


	tos_count_tMap_20++;

/**
 * [tMap_20 main ] stop
 */
	
	/**
	 * [tMap_20 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_20";

	

 



/**
 * [tMap_20 process_data_begin ] stop
 */
// Start of branch "copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full"
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full != null) { 



	
	/**
	 * [tMap_21 main ] start
	 */

	

	
	
	currentComponent="tMap_21";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_21 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_21 = false;
		  boolean mainRowRejected_tMap_21 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row16" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow16 = false;
       		  	    	
       		  	    	
 							row16Struct row16ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_21) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_21 = false;
								
                        		    		row16HashKey.COLORID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.COLOR ;
                        		    		

								
		                        	row16HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row16.lookup( row16HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row16 != null && tHash_Lookup_row16.getCount(row16HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row16' and it contains more one result from keys :  row16.COLORID = '" + row16HashKey.COLORID + "'");
								} // G 071
							

							row16Struct row16 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row16Struct fromLookup_row16 = null;
							row16 = row16Default;
										 
							
								 
							
							
								if (tHash_Lookup_row16 !=null && tHash_Lookup_row16.hasNext()) { // G 099
								
							
								
								fromLookup_row16 = tHash_Lookup_row16.next();

							
							
								} // G 099
							
							

							if(fromLookup_row16 != null) {
								row16 = fromLookup_row16;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_21__Struct Var = Var__tMap_21;// ###############################
        // ###############################
        // # Output tables

sortie_full_barcode = null;
copyOfsortie_color = null;


// # Output table : 'sortie_full_barcode'
sortie_full_barcode_tmp.BRAND = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.BRAND ;
sortie_full_barcode_tmp.SEASON = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.SEASON ;
sortie_full_barcode_tmp.CATEGORY = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.CATEGORY ;
sortie_full_barcode_tmp.REF = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.REF ;
sortie_full_barcode_tmp.DESCRIPTION = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.DESCRIPTION ;
sortie_full_barcode_tmp.STYLE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.STYLE ;
sortie_full_barcode_tmp.COLOR = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.COLOR ;
sortie_full_barcode_tmp.FASHION = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.FASHION ;
sortie_full_barcode_tmp.STYLECOLORLABEL = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.STYLECOLORLABEL ;
sortie_full_barcode_tmp.COLORNAME = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.COLORNAME ;
sortie_full_barcode_tmp.LBL = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.LBL ;
sortie_full_barcode_tmp.STYLE_COLOR = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.STYLE_COLOR ;
sortie_full_barcode_tmp.GENDER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.GENDER ;
sortie_full_barcode_tmp.AGE_RANGE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.AGE_RANGE ;
sortie_full_barcode_tmp.SIZE_RANGE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.SIZE_RANGE ;
sortie_full_barcode_tmp.SIZE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.SIZE ;
sortie_full_barcode_tmp.US_SIZE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.US_SIZE ;
sortie_full_barcode_tmp.CM_SIZE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.CM_SIZE ;
sortie_full_barcode_tmp.PRODUCT = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.PRODUCT ;
sortie_full_barcode_tmp.PRODUCT_STATUS = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.PRODUCT_STATUS ;
sortie_full_barcode_tmp.PRODUCT_TIER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.PRODUCT_TIER ;
sortie_full_barcode_tmp.ACCT_EXCLUS = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.ACCT_EXCLUS ;
sortie_full_barcode_tmp.SIZE_RATIO_SPLIT = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.SIZE_RATIO_SPLIT ;
sortie_full_barcode_tmp.REC_SIZE_SPLIT = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.REC_SIZE_SPLIT ;
sortie_full_barcode_tmp.CARTON_QTY = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.CARTON_QTY ;
sortie_full_barcode_tmp.ATTRIBUTE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.ATTRIBUTE ;
sortie_full_barcode_tmp.UNITS = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.UNITS ;
sortie_full_barcode_tmp.EUR_RRP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.EUR_RRP ;
sortie_full_barcode_tmp.EUR_WSP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.EUR_WSP ;
sortie_full_barcode_tmp.GBP_RRP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.GBP_RRP ;
sortie_full_barcode_tmp.GBP_WSP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.GBP_WSP ;
sortie_full_barcode_tmp.CHF_RRP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.CHF_RRP ;
sortie_full_barcode_tmp.CHF_WSP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.CHF_WSP ;
sortie_full_barcode_tmp.NOK_RRP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.NOK_RRP ;
sortie_full_barcode_tmp.NOK_WSP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.NOK_WSP ;
sortie_full_barcode_tmp.DKK_RRP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.DKK_RRP ;
sortie_full_barcode_tmp.DKK_WSP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.DKK_WSP ;
sortie_full_barcode_tmp.SEK_RRP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.SEK_RRP ;
sortie_full_barcode_tmp.SEK_WSP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.SEK_WSP ;
sortie_full_barcode_tmp.EUR_FINN_RRP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.EUR_FINN_RRP ;
sortie_full_barcode_tmp.EUR_FINN_WSP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.EUR_FINN_WSP ;
sortie_full_barcode_tmp.FABRICATION = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.FABRICATION ;
sortie_full_barcode_tmp.COO = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.COO ;
sortie_full_barcode_tmp.CUSTOM_TARIFF_CODE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.CUSTOM_TARIFF_CODE ;
sortie_full_barcode_tmp.UPC = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.UPC ;
sortie_full_barcode_tmp.SMU_TYPE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.SMU_TYPE ;
sortie_full_barcode_tmp.EAN = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.EAN ;
sortie_full_barcode_tmp.LABELD365 = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.LABELD365 ;
sortie_full_barcode_tmp.PRODUCT_CHANNEL = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.PRODUCT_CHANNEL ;
sortie_full_barcode = sortie_full_barcode_tmp;

// # Output table : 'copyOfsortie_color'
copyOfsortie_color_tmp.PRODUCTMASTERNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.STYLE ;
copyOfsortie_color_tmp.PRODUCTMASTERCOLORID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.COLOR ;
copyOfsortie_color_tmp.LANGUAGEID = "en-US";
copyOfsortie_color_tmp.TRANSLATEDCOLORDESCRIPTION = row16.DESCRIPTION ;
copyOfsortie_color_tmp.TRANSLATEDCOLORNAME = row16.NAME ;
copyOfsortie_color = copyOfsortie_color_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_21 = false;










 


	tos_count_tMap_21++;

/**
 * [tMap_21 main ] stop
 */
	
	/**
	 * [tMap_21 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_21";

	

 



/**
 * [tMap_21 process_data_begin ] stop
 */
// Start of branch "sortie_full_barcode"
if(sortie_full_barcode != null) { 



	
	/**
	 * [tMap_26 main ] start
	 */

	

	
	
	currentComponent="tMap_26";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_full_barcode");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_26 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_26 = false;
		  boolean mainRowRejected_tMap_26 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_26__Struct Var = Var__tMap_26;// ###############################
        // ###############################
        // # Output tables

copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product = null;


// # Output table : 'copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product'
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product_tmp.PRODUCTNUMBER = sortie_full_barcode.STYLE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product_tmp.ATTRIBUTETYPENAME = "Product Channel";
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product_tmp.ATTRIBUTENAME = "Product Channel";
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product_tmp.TEXTVALUE = sortie_full_barcode.PRODUCT_CHANNEL;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_26 = false;










 


	tos_count_tMap_26++;

/**
 * [tMap_26 main ] stop
 */
	
	/**
	 * [tMap_26 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_26";

	

 



/**
 * [tMap_26 process_data_begin ] stop
 */
// Start of branch "copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product"
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product != null) { 



	
	/**
	 * [tUniqRow_25 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_25";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product");
					}
					
row31 = null;			
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.PRODUCTNUMBER == null){
	finder_tUniqRow_25.PRODUCTNUMBER = null;
}else{
	finder_tUniqRow_25.PRODUCTNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.PRODUCTNUMBER.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTETYPENAME == null){
	finder_tUniqRow_25.ATTRIBUTETYPENAME = null;
}else{
	finder_tUniqRow_25.ATTRIBUTETYPENAME = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTETYPENAME.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTENAME == null){
	finder_tUniqRow_25.ATTRIBUTENAME = null;
}else{
	finder_tUniqRow_25.ATTRIBUTENAME = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTENAME.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.TEXTVALUE == null){
	finder_tUniqRow_25.TEXTVALUE = null;
}else{
	finder_tUniqRow_25.TEXTVALUE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.TEXTVALUE.toLowerCase();
}	
finder_tUniqRow_25.hashCodeDirty = true;
if (!keystUniqRow_25.contains(finder_tUniqRow_25)) {
		KeyStruct_tUniqRow_25 new_tUniqRow_25 = new KeyStruct_tUniqRow_25();

		
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.PRODUCTNUMBER == null){
	new_tUniqRow_25.PRODUCTNUMBER = null;
}else{
	new_tUniqRow_25.PRODUCTNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.PRODUCTNUMBER.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTETYPENAME == null){
	new_tUniqRow_25.ATTRIBUTETYPENAME = null;
}else{
	new_tUniqRow_25.ATTRIBUTETYPENAME = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTETYPENAME.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTENAME == null){
	new_tUniqRow_25.ATTRIBUTENAME = null;
}else{
	new_tUniqRow_25.ATTRIBUTENAME = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTENAME.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.TEXTVALUE == null){
	new_tUniqRow_25.TEXTVALUE = null;
}else{
	new_tUniqRow_25.TEXTVALUE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.TEXTVALUE.toLowerCase();
}
		
		keystUniqRow_25.add(new_tUniqRow_25);if(row31 == null){ 
	
	row31 = new row31Struct();
}row31.PRODUCTNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.PRODUCTNUMBER;			row31.ATTRIBUTETYPENAME = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTETYPENAME;			row31.ATTRIBUTENAME = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTENAME;			row31.TEXTVALUE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.TEXTVALUE;					
		nb_uniques_tUniqRow_25++;
	} else {
	  nb_duplicates_tUniqRow_25++;
	}

 


	tos_count_tUniqRow_25++;

/**
 * [tUniqRow_25 main ] stop
 */
	
	/**
	 * [tUniqRow_25 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_25";

	

 



/**
 * [tUniqRow_25 process_data_begin ] stop
 */
// Start of branch "row31"
if(row31 != null) { 



	
	/**
	 * [tFilterRow_1 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row31");
					}
					

          row48 = null;
    Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1("&&");
            ope_tFilterRow_1.matches((row31.TEXTVALUE == null? false : row31.TEXTVALUE.compareTo("") != 0)
                           , "TEXTVALUE.compareTo(\"\") != 0 failed");
    
    if (ope_tFilterRow_1.getMatchFlag()) {
              if(row48 == null){ 
                row48 = new row48Struct();
              }
               row48.PRODUCTNUMBER = row31.PRODUCTNUMBER;
               row48.ATTRIBUTETYPENAME = row31.ATTRIBUTETYPENAME;
               row48.ATTRIBUTENAME = row31.ATTRIBUTENAME;
               row48.TEXTVALUE = row31.TEXTVALUE;    
      nb_line_ok_tFilterRow_1++;
    } else {
      nb_line_reject_tFilterRow_1++;
    }

nb_line_tFilterRow_1++;

 


	tos_count_tFilterRow_1++;

/**
 * [tFilterRow_1 main ] stop
 */
	
	/**
	 * [tFilterRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

 



/**
 * [tFilterRow_1 process_data_begin ] stop
 */
// Start of branch "row48"
if(row48 != null) { 



	
	/**
	 * [tHashOutput_12 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_12";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row48");
					}
					



    
		row48Struct oneRow_tHashOutput_12 = new row48Struct();
				
					oneRow_tHashOutput_12.PRODUCTNUMBER = row48.PRODUCTNUMBER;
					oneRow_tHashOutput_12.ATTRIBUTETYPENAME = row48.ATTRIBUTETYPENAME;
					oneRow_tHashOutput_12.ATTRIBUTENAME = row48.ATTRIBUTENAME;
					oneRow_tHashOutput_12.TEXTVALUE = row48.TEXTVALUE;
		
        tHashFile_tHashOutput_12.put(oneRow_tHashOutput_12);
        nb_line_tHashOutput_12 ++;
 


	tos_count_tHashOutput_12++;

/**
 * [tHashOutput_12 main ] stop
 */
	
	/**
	 * [tHashOutput_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_12";

	

 



/**
 * [tHashOutput_12 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_12";

	

 



/**
 * [tHashOutput_12 process_data_end ] stop
 */

} // End of branch "row48"




	
	/**
	 * [tFilterRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

 



/**
 * [tFilterRow_1 process_data_end ] stop
 */

} // End of branch "row31"




	
	/**
	 * [tUniqRow_25 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_25";

	

 



/**
 * [tUniqRow_25 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product"




	
	/**
	 * [tMap_26 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_26";

	

 



/**
 * [tMap_26 process_data_end ] stop
 */

} // End of branch "sortie_full_barcode"




// Start of branch "copyOfsortie_color"
if(copyOfsortie_color != null) { 



	
	/**
	 * [tUniqRow_20 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_20";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfsortie_color");
					}
					
row17 = null;			
if(copyOfsortie_color.PRODUCTMASTERNUMBER == null){
	finder_tUniqRow_20.PRODUCTMASTERNUMBER = null;
}else{
	finder_tUniqRow_20.PRODUCTMASTERNUMBER = copyOfsortie_color.PRODUCTMASTERNUMBER.toLowerCase();
}
if(copyOfsortie_color.PRODUCTMASTERCOLORID == null){
	finder_tUniqRow_20.PRODUCTMASTERCOLORID = null;
}else{
	finder_tUniqRow_20.PRODUCTMASTERCOLORID = copyOfsortie_color.PRODUCTMASTERCOLORID.toLowerCase();
}	
finder_tUniqRow_20.hashCodeDirty = true;
if (!keystUniqRow_20.contains(finder_tUniqRow_20)) {
		KeyStruct_tUniqRow_20 new_tUniqRow_20 = new KeyStruct_tUniqRow_20();

		
if(copyOfsortie_color.PRODUCTMASTERNUMBER == null){
	new_tUniqRow_20.PRODUCTMASTERNUMBER = null;
}else{
	new_tUniqRow_20.PRODUCTMASTERNUMBER = copyOfsortie_color.PRODUCTMASTERNUMBER.toLowerCase();
}
if(copyOfsortie_color.PRODUCTMASTERCOLORID == null){
	new_tUniqRow_20.PRODUCTMASTERCOLORID = null;
}else{
	new_tUniqRow_20.PRODUCTMASTERCOLORID = copyOfsortie_color.PRODUCTMASTERCOLORID.toLowerCase();
}
		
		keystUniqRow_20.add(new_tUniqRow_20);if(row17 == null){ 
	
	row17 = new row17Struct();
}row17.PRODUCTMASTERNUMBER = copyOfsortie_color.PRODUCTMASTERNUMBER;			row17.PRODUCTMASTERCOLORID = copyOfsortie_color.PRODUCTMASTERCOLORID;			row17.LANGUAGEID = copyOfsortie_color.LANGUAGEID;			row17.TRANSLATEDCOLORDESCRIPTION = copyOfsortie_color.TRANSLATEDCOLORDESCRIPTION;			row17.TRANSLATEDCOLORNAME = copyOfsortie_color.TRANSLATEDCOLORNAME;					
		nb_uniques_tUniqRow_20++;
	} else {
	  nb_duplicates_tUniqRow_20++;
	}

 


	tos_count_tUniqRow_20++;

/**
 * [tUniqRow_20 main ] stop
 */
	
	/**
	 * [tUniqRow_20 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_20";

	

 



/**
 * [tUniqRow_20 process_data_begin ] stop
 */
// Start of branch "row17"
if(row17 != null) { 



	
	/**
	 * [tFileOutputExcel_11 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_11";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row17");
					}
					

				xlsxTool_tFileOutputExcel_11.addRow();
									   				
	    				if(row17.PRODUCTMASTERNUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_11.addCellValue(String.valueOf(row17.PRODUCTMASTERNUMBER));
	    				} else {
	    					xlsxTool_tFileOutputExcel_11.addCellNullValue();
	    				}
					
									   				
	    				if(row17.PRODUCTMASTERCOLORID != null) {
    				
							xlsxTool_tFileOutputExcel_11.addCellValue(String.valueOf(row17.PRODUCTMASTERCOLORID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_11.addCellNullValue();
	    				}
					
									   				
	    				if(row17.LANGUAGEID != null) {
    				
							xlsxTool_tFileOutputExcel_11.addCellValue(String.valueOf(row17.LANGUAGEID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_11.addCellNullValue();
	    				}
					
									   				
	    				if(row17.TRANSLATEDCOLORDESCRIPTION != null) {
    				
							xlsxTool_tFileOutputExcel_11.addCellValue(String.valueOf(row17.TRANSLATEDCOLORDESCRIPTION));
	    				} else {
	    					xlsxTool_tFileOutputExcel_11.addCellNullValue();
	    				}
					
									   				
	    				if(row17.TRANSLATEDCOLORNAME != null) {
    				
							xlsxTool_tFileOutputExcel_11.addCellValue(String.valueOf(row17.TRANSLATEDCOLORNAME));
	    				} else {
	    					xlsxTool_tFileOutputExcel_11.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_11++;
				
 


	tos_count_tFileOutputExcel_11++;

/**
 * [tFileOutputExcel_11 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_11";

	

 



/**
 * [tFileOutputExcel_11 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_11";

	

 



/**
 * [tFileOutputExcel_11 process_data_end ] stop
 */

} // End of branch "row17"




	
	/**
	 * [tUniqRow_20 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_20";

	

 



/**
 * [tUniqRow_20 process_data_end ] stop
 */

} // End of branch "copyOfsortie_color"




	
	/**
	 * [tMap_21 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_21";

	

 



/**
 * [tMap_21 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full"




// Start of branch "copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product"
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product != null) { 



	
	/**
	 * [tUniqRow_18 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_18";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product");
					}
					
row34 = null;			
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.PRODUCTNUMBER == null){
	finder_tUniqRow_18.PRODUCTNUMBER = null;
}else{
	finder_tUniqRow_18.PRODUCTNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.PRODUCTNUMBER.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTETYPENAME == null){
	finder_tUniqRow_18.ATTRIBUTETYPENAME = null;
}else{
	finder_tUniqRow_18.ATTRIBUTETYPENAME = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTETYPENAME.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTENAME == null){
	finder_tUniqRow_18.ATTRIBUTENAME = null;
}else{
	finder_tUniqRow_18.ATTRIBUTENAME = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTENAME.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.TEXTVALUE == null){
	finder_tUniqRow_18.TEXTVALUE = null;
}else{
	finder_tUniqRow_18.TEXTVALUE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.TEXTVALUE.toLowerCase();
}	
finder_tUniqRow_18.hashCodeDirty = true;
if (!keystUniqRow_18.contains(finder_tUniqRow_18)) {
		KeyStruct_tUniqRow_18 new_tUniqRow_18 = new KeyStruct_tUniqRow_18();

		
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.PRODUCTNUMBER == null){
	new_tUniqRow_18.PRODUCTNUMBER = null;
}else{
	new_tUniqRow_18.PRODUCTNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.PRODUCTNUMBER.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTETYPENAME == null){
	new_tUniqRow_18.ATTRIBUTETYPENAME = null;
}else{
	new_tUniqRow_18.ATTRIBUTETYPENAME = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTETYPENAME.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTENAME == null){
	new_tUniqRow_18.ATTRIBUTENAME = null;
}else{
	new_tUniqRow_18.ATTRIBUTENAME = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTENAME.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.TEXTVALUE == null){
	new_tUniqRow_18.TEXTVALUE = null;
}else{
	new_tUniqRow_18.TEXTVALUE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.TEXTVALUE.toLowerCase();
}
		
		keystUniqRow_18.add(new_tUniqRow_18);if(row34 == null){ 
	
	row34 = new row34Struct();
}row34.PRODUCTNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.PRODUCTNUMBER;			row34.ATTRIBUTETYPENAME = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTETYPENAME;			row34.ATTRIBUTENAME = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTENAME;			row34.TEXTVALUE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.TEXTVALUE;					
		nb_uniques_tUniqRow_18++;
	} else {
	  nb_duplicates_tUniqRow_18++;
	}

 


	tos_count_tUniqRow_18++;

/**
 * [tUniqRow_18 main ] stop
 */
	
	/**
	 * [tUniqRow_18 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_18";

	

 



/**
 * [tUniqRow_18 process_data_begin ] stop
 */
// Start of branch "row34"
if(row34 != null) { 



	
	/**
	 * [tHashOutput_9 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_9";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row34");
					}
					



    
		row34Struct oneRow_tHashOutput_9 = new row34Struct();
				
					oneRow_tHashOutput_9.PRODUCTNUMBER = row34.PRODUCTNUMBER;
					oneRow_tHashOutput_9.ATTRIBUTETYPENAME = row34.ATTRIBUTETYPENAME;
					oneRow_tHashOutput_9.ATTRIBUTENAME = row34.ATTRIBUTENAME;
					oneRow_tHashOutput_9.TEXTVALUE = row34.TEXTVALUE;
		
        tHashFile_tHashOutput_9.put(oneRow_tHashOutput_9);
        nb_line_tHashOutput_9 ++;
 


	tos_count_tHashOutput_9++;

/**
 * [tHashOutput_9 main ] stop
 */
	
	/**
	 * [tHashOutput_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_9";

	

 



/**
 * [tHashOutput_9 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_9";

	

 



/**
 * [tHashOutput_9 process_data_end ] stop
 */

} // End of branch "row34"




	
	/**
	 * [tUniqRow_18 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_18";

	

 



/**
 * [tUniqRow_18 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product"




	
	/**
	 * [tMap_20 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_20";

	

 



/**
 * [tMap_20 process_data_end ] stop
 */

} // End of branch "sortie_full_barcode_1"




// Start of branch "sortie_EAN"
if(sortie_EAN != null) { 



	
	/**
	 * [tUniqRow_23 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_23";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_EAN");
					}
					
row39 = null;			
if(sortie_EAN.ITEMNUMBER == null){
	finder_tUniqRow_23.ITEMNUMBER = null;
}else{
	finder_tUniqRow_23.ITEMNUMBER = sortie_EAN.ITEMNUMBER.toLowerCase();
}
if(sortie_EAN.PRODUCTCOLORID == null){
	finder_tUniqRow_23.PRODUCTCOLORID = null;
}else{
	finder_tUniqRow_23.PRODUCTCOLORID = sortie_EAN.PRODUCTCOLORID.toLowerCase();
}
if(sortie_EAN.PRODUCTSIZEID == null){
	finder_tUniqRow_23.PRODUCTSIZEID = null;
}else{
	finder_tUniqRow_23.PRODUCTSIZEID = sortie_EAN.PRODUCTSIZEID.toLowerCase();
}
if(sortie_EAN.PRODUCTSTYLEID == null){
	finder_tUniqRow_23.PRODUCTSTYLEID = null;
}else{
	finder_tUniqRow_23.PRODUCTSTYLEID = sortie_EAN.PRODUCTSTYLEID.toLowerCase();
}
if(sortie_EAN.PRODUCTQUANTITYUNITSYMBOL == null){
	finder_tUniqRow_23.PRODUCTQUANTITYUNITSYMBOL = null;
}else{
	finder_tUniqRow_23.PRODUCTQUANTITYUNITSYMBOL = sortie_EAN.PRODUCTQUANTITYUNITSYMBOL.toLowerCase();
}
if(sortie_EAN.BARCODESETUPID == null){
	finder_tUniqRow_23.BARCODESETUPID = null;
}else{
	finder_tUniqRow_23.BARCODESETUPID = sortie_EAN.BARCODESETUPID.toLowerCase();
}
if(sortie_EAN.BARCODE == null){
	finder_tUniqRow_23.BARCODE = null;
}else{
	finder_tUniqRow_23.BARCODE = sortie_EAN.BARCODE.toLowerCase();
}
if(sortie_EAN.PRODUCTDESCRIPTION == null){
	finder_tUniqRow_23.PRODUCTDESCRIPTION = null;
}else{
	finder_tUniqRow_23.PRODUCTDESCRIPTION = sortie_EAN.PRODUCTDESCRIPTION.toLowerCase();
}	
finder_tUniqRow_23.hashCodeDirty = true;
if (!keystUniqRow_23.contains(finder_tUniqRow_23)) {
		KeyStruct_tUniqRow_23 new_tUniqRow_23 = new KeyStruct_tUniqRow_23();

		
if(sortie_EAN.ITEMNUMBER == null){
	new_tUniqRow_23.ITEMNUMBER = null;
}else{
	new_tUniqRow_23.ITEMNUMBER = sortie_EAN.ITEMNUMBER.toLowerCase();
}
if(sortie_EAN.PRODUCTCOLORID == null){
	new_tUniqRow_23.PRODUCTCOLORID = null;
}else{
	new_tUniqRow_23.PRODUCTCOLORID = sortie_EAN.PRODUCTCOLORID.toLowerCase();
}
if(sortie_EAN.PRODUCTSIZEID == null){
	new_tUniqRow_23.PRODUCTSIZEID = null;
}else{
	new_tUniqRow_23.PRODUCTSIZEID = sortie_EAN.PRODUCTSIZEID.toLowerCase();
}
if(sortie_EAN.PRODUCTSTYLEID == null){
	new_tUniqRow_23.PRODUCTSTYLEID = null;
}else{
	new_tUniqRow_23.PRODUCTSTYLEID = sortie_EAN.PRODUCTSTYLEID.toLowerCase();
}
if(sortie_EAN.PRODUCTQUANTITYUNITSYMBOL == null){
	new_tUniqRow_23.PRODUCTQUANTITYUNITSYMBOL = null;
}else{
	new_tUniqRow_23.PRODUCTQUANTITYUNITSYMBOL = sortie_EAN.PRODUCTQUANTITYUNITSYMBOL.toLowerCase();
}
if(sortie_EAN.BARCODESETUPID == null){
	new_tUniqRow_23.BARCODESETUPID = null;
}else{
	new_tUniqRow_23.BARCODESETUPID = sortie_EAN.BARCODESETUPID.toLowerCase();
}
if(sortie_EAN.BARCODE == null){
	new_tUniqRow_23.BARCODE = null;
}else{
	new_tUniqRow_23.BARCODE = sortie_EAN.BARCODE.toLowerCase();
}
if(sortie_EAN.PRODUCTDESCRIPTION == null){
	new_tUniqRow_23.PRODUCTDESCRIPTION = null;
}else{
	new_tUniqRow_23.PRODUCTDESCRIPTION = sortie_EAN.PRODUCTDESCRIPTION.toLowerCase();
}
		
		keystUniqRow_23.add(new_tUniqRow_23);if(row39 == null){ 
	
	row39 = new row39Struct();
}row39.ITEMNUMBER = sortie_EAN.ITEMNUMBER;			row39.PRODUCTCOLORID = sortie_EAN.PRODUCTCOLORID;			row39.PRODUCTSIZEID = sortie_EAN.PRODUCTSIZEID;			row39.PRODUCTSTYLEID = sortie_EAN.PRODUCTSTYLEID;			row39.PRODUCTQUANTITYUNITSYMBOL = sortie_EAN.PRODUCTQUANTITYUNITSYMBOL;			row39.BARCODESETUPID = sortie_EAN.BARCODESETUPID;			row39.BARCODE = sortie_EAN.BARCODE;			row39.PRODUCTDESCRIPTION = sortie_EAN.PRODUCTDESCRIPTION;			row39.PRODUCTQUANTITY = sortie_EAN.PRODUCTQUANTITY;					
		nb_uniques_tUniqRow_23++;
	} else {
	  nb_duplicates_tUniqRow_23++;
	}

 


	tos_count_tUniqRow_23++;

/**
 * [tUniqRow_23 main ] stop
 */
	
	/**
	 * [tUniqRow_23 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_23";

	

 



/**
 * [tUniqRow_23 process_data_begin ] stop
 */
// Start of branch "row39"
if(row39 != null) { 



	
	/**
	 * [tFilterRow_5 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row39");
					}
					

          row40 = null;
    Operator_tFilterRow_5 ope_tFilterRow_5 = new Operator_tFilterRow_5("&&");
            ope_tFilterRow_5.matches((row39.BARCODE == null? false : row39.BARCODE.compareTo("") != 0)
                           , "BARCODE.compareTo(\"\") != 0 failed");
    
    if (ope_tFilterRow_5.getMatchFlag()) {
              if(row40 == null){ 
                row40 = new row40Struct();
              }
               row40.ITEMNUMBER = row39.ITEMNUMBER;
               row40.PRODUCTCOLORID = row39.PRODUCTCOLORID;
               row40.PRODUCTSIZEID = row39.PRODUCTSIZEID;
               row40.PRODUCTSTYLEID = row39.PRODUCTSTYLEID;
               row40.PRODUCTQUANTITYUNITSYMBOL = row39.PRODUCTQUANTITYUNITSYMBOL;
               row40.BARCODESETUPID = row39.BARCODESETUPID;
               row40.BARCODE = row39.BARCODE;
               row40.PRODUCTDESCRIPTION = row39.PRODUCTDESCRIPTION;
               row40.PRODUCTQUANTITY = row39.PRODUCTQUANTITY;    
      nb_line_ok_tFilterRow_5++;
    } else {
      nb_line_reject_tFilterRow_5++;
    }

nb_line_tFilterRow_5++;

 


	tos_count_tFilterRow_5++;

/**
 * [tFilterRow_5 main ] stop
 */
	
	/**
	 * [tFilterRow_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_5";

	

 



/**
 * [tFilterRow_5 process_data_begin ] stop
 */
// Start of branch "row40"
if(row40 != null) { 



	
	/**
	 * [tHashOutput_11 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_11";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row40");
					}
					



    
		row40Struct oneRow_tHashOutput_11 = new row40Struct();
				
					oneRow_tHashOutput_11.ITEMNUMBER = row40.ITEMNUMBER;
					oneRow_tHashOutput_11.PRODUCTCOLORID = row40.PRODUCTCOLORID;
					oneRow_tHashOutput_11.PRODUCTSIZEID = row40.PRODUCTSIZEID;
					oneRow_tHashOutput_11.PRODUCTSTYLEID = row40.PRODUCTSTYLEID;
					oneRow_tHashOutput_11.PRODUCTQUANTITYUNITSYMBOL = row40.PRODUCTQUANTITYUNITSYMBOL;
					oneRow_tHashOutput_11.BARCODESETUPID = row40.BARCODESETUPID;
					oneRow_tHashOutput_11.BARCODE = row40.BARCODE;
					oneRow_tHashOutput_11.PRODUCTDESCRIPTION = row40.PRODUCTDESCRIPTION;
					oneRow_tHashOutput_11.PRODUCTQUANTITY = row40.PRODUCTQUANTITY;
		
        tHashFile_tHashOutput_11.put(oneRow_tHashOutput_11);
        nb_line_tHashOutput_11 ++;
 


	tos_count_tHashOutput_11++;

/**
 * [tHashOutput_11 main ] stop
 */
	
	/**
	 * [tHashOutput_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_11";

	

 



/**
 * [tHashOutput_11 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_11";

	

 



/**
 * [tHashOutput_11 process_data_end ] stop
 */

} // End of branch "row40"




	
	/**
	 * [tFilterRow_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_5";

	

 



/**
 * [tFilterRow_5 process_data_end ] stop
 */

} // End of branch "row39"




	
	/**
	 * [tUniqRow_23 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_23";

	

 



/**
 * [tUniqRow_23 process_data_end ] stop
 */

} // End of branch "sortie_EAN"




	
	/**
	 * [tMap_19 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_19";

	

 



/**
 * [tMap_19 process_data_end ] stop
 */

} // End of branch "copyOfsortie_released_product_variant"




// Start of branch "sortie_product_status"
if(sortie_product_status != null) { 



	
	/**
	 * [tUniqRow_16 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_16";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_product_status");
					}
					
row32 = null;			
if(sortie_product_status.ITEMID == null){
	finder_tUniqRow_16.ITEMID = null;
}else{
	finder_tUniqRow_16.ITEMID = sortie_product_status.ITEMID.toLowerCase();
}
if(sortie_product_status.INVENTSIZEID == null){
	finder_tUniqRow_16.INVENTSIZEID = null;
}else{
	finder_tUniqRow_16.INVENTSIZEID = sortie_product_status.INVENTSIZEID.toLowerCase();
}
if(sortie_product_status.INVENTSTYLEID == null){
	finder_tUniqRow_16.INVENTSTYLEID = null;
}else{
	finder_tUniqRow_16.INVENTSTYLEID = sortie_product_status.INVENTSTYLEID.toLowerCase();
}
if(sortie_product_status.INVENTCOLORID == null){
	finder_tUniqRow_16.INVENTCOLORID = null;
}else{
	finder_tUniqRow_16.INVENTCOLORID = sortie_product_status.INVENTCOLORID.toLowerCase();
}
if(sortie_product_status.PRODUCTSTATUSID == null){
	finder_tUniqRow_16.PRODUCTSTATUSID = null;
}else{
	finder_tUniqRow_16.PRODUCTSTATUSID = sortie_product_status.PRODUCTSTATUSID.toLowerCase();
}
if(sortie_product_status.SEASONCODE == null){
	finder_tUniqRow_16.SEASONCODE = null;
}else{
	finder_tUniqRow_16.SEASONCODE = sortie_product_status.SEASONCODE.toLowerCase();
}	
finder_tUniqRow_16.hashCodeDirty = true;
if (!keystUniqRow_16.contains(finder_tUniqRow_16)) {
		KeyStruct_tUniqRow_16 new_tUniqRow_16 = new KeyStruct_tUniqRow_16();

		
if(sortie_product_status.ITEMID == null){
	new_tUniqRow_16.ITEMID = null;
}else{
	new_tUniqRow_16.ITEMID = sortie_product_status.ITEMID.toLowerCase();
}
if(sortie_product_status.INVENTSIZEID == null){
	new_tUniqRow_16.INVENTSIZEID = null;
}else{
	new_tUniqRow_16.INVENTSIZEID = sortie_product_status.INVENTSIZEID.toLowerCase();
}
if(sortie_product_status.INVENTSTYLEID == null){
	new_tUniqRow_16.INVENTSTYLEID = null;
}else{
	new_tUniqRow_16.INVENTSTYLEID = sortie_product_status.INVENTSTYLEID.toLowerCase();
}
if(sortie_product_status.INVENTCOLORID == null){
	new_tUniqRow_16.INVENTCOLORID = null;
}else{
	new_tUniqRow_16.INVENTCOLORID = sortie_product_status.INVENTCOLORID.toLowerCase();
}
if(sortie_product_status.PRODUCTSTATUSID == null){
	new_tUniqRow_16.PRODUCTSTATUSID = null;
}else{
	new_tUniqRow_16.PRODUCTSTATUSID = sortie_product_status.PRODUCTSTATUSID.toLowerCase();
}
if(sortie_product_status.SEASONCODE == null){
	new_tUniqRow_16.SEASONCODE = null;
}else{
	new_tUniqRow_16.SEASONCODE = sortie_product_status.SEASONCODE.toLowerCase();
}
		
		keystUniqRow_16.add(new_tUniqRow_16);if(row32 == null){ 
	
	row32 = new row32Struct();
}row32.CHANNELCODE = sortie_product_status.CHANNELCODE;			row32.ITEMID = sortie_product_status.ITEMID;			row32.INVENTSIZEID = sortie_product_status.INVENTSIZEID;			row32.INVENTSTYLEID = sortie_product_status.INVENTSTYLEID;			row32.INVENTCOLORID = sortie_product_status.INVENTCOLORID;			row32.PRODUCTSTATUSID = sortie_product_status.PRODUCTSTATUSID;			row32.SEASONCODE = sortie_product_status.SEASONCODE;			row32.SPLSPCB = sortie_product_status.SPLSPCB;			row32.SPLSUSTAINABILITY = sortie_product_status.SPLSUSTAINABILITY;					
		nb_uniques_tUniqRow_16++;
	} else {
	  nb_duplicates_tUniqRow_16++;
	}

 


	tos_count_tUniqRow_16++;

/**
 * [tUniqRow_16 main ] stop
 */
	
	/**
	 * [tUniqRow_16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_16";

	

 



/**
 * [tUniqRow_16 process_data_begin ] stop
 */
// Start of branch "row32"
if(row32 != null) { 



	
	/**
	 * [tFileOutputExcel_9 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_9";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row32");
					}
					

				xlsxTool_tFileOutputExcel_9.addRow();
									   				
	    				if(row32.CHANNELCODE != null) {
    				
							xlsxTool_tFileOutputExcel_9.addCellValue(String.valueOf(row32.CHANNELCODE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_9.addCellNullValue();
	    				}
					
									   				
	    				if(row32.ITEMID != null) {
    				
							xlsxTool_tFileOutputExcel_9.addCellValue(String.valueOf(row32.ITEMID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_9.addCellNullValue();
	    				}
					
									   				
	    				if(row32.INVENTSIZEID != null) {
    				
							xlsxTool_tFileOutputExcel_9.addCellValue(String.valueOf(row32.INVENTSIZEID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_9.addCellNullValue();
	    				}
					
									   				
	    				if(row32.INVENTSTYLEID != null) {
    				
							xlsxTool_tFileOutputExcel_9.addCellValue(String.valueOf(row32.INVENTSTYLEID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_9.addCellNullValue();
	    				}
					
									   				
	    				if(row32.INVENTCOLORID != null) {
    				
							xlsxTool_tFileOutputExcel_9.addCellValue(String.valueOf(row32.INVENTCOLORID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_9.addCellNullValue();
	    				}
					
									   				
	    				if(row32.PRODUCTSTATUSID != null) {
    				
							xlsxTool_tFileOutputExcel_9.addCellValue(String.valueOf(row32.PRODUCTSTATUSID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_9.addCellNullValue();
	    				}
					
									   				
	    				if(row32.SEASONCODE != null) {
    				
							xlsxTool_tFileOutputExcel_9.addCellValue(String.valueOf(row32.SEASONCODE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_9.addCellNullValue();
	    				}
					
									   				
	    				if(row32.SPLSPCB != null) {
    				
							xlsxTool_tFileOutputExcel_9.addCellValue(Double.parseDouble(String.valueOf(row32.SPLSPCB)));
	    				} else {
	    					xlsxTool_tFileOutputExcel_9.addCellNullValue();
	    				}
					
									   				
	    				if(row32.SPLSUSTAINABILITY != null) {
    				
							xlsxTool_tFileOutputExcel_9.addCellValue(String.valueOf(row32.SPLSUSTAINABILITY));
	    				} else {
	    					xlsxTool_tFileOutputExcel_9.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_9++;
				
 


	tos_count_tFileOutputExcel_9++;

/**
 * [tFileOutputExcel_9 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_9";

	

 



/**
 * [tFileOutputExcel_9 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_9";

	

 



/**
 * [tFileOutputExcel_9 process_data_end ] stop
 */

} // End of branch "row32"




	
	/**
	 * [tUniqRow_16 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_16";

	

 



/**
 * [tUniqRow_16 process_data_end ] stop
 */

} // End of branch "sortie_product_status"




	
	/**
	 * [tMap_18 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_18";

	

 



/**
 * [tMap_18 process_data_end ] stop
 */

} // End of branch "sortie_full_varian"




	
	/**
	 * [tMap_17 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_17";

	

 



/**
 * [tMap_17 process_data_end ] stop
 */

} // End of branch "sortie_full_product_variant"




// Start of branch "sortie_product_variant"
if(sortie_product_variant != null) { 



	
	/**
	 * [tUniqRow_14 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_14";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_product_variant");
					}
					
row18 = null;			
if(sortie_product_variant.PRODUCTMASTERNUMBER == null){
	finder_tUniqRow_14.PRODUCTMASTERNUMBER = null;
}else{
	finder_tUniqRow_14.PRODUCTMASTERNUMBER = sortie_product_variant.PRODUCTMASTERNUMBER.toLowerCase();
}
if(sortie_product_variant.PRODUCTCOLORID == null){
	finder_tUniqRow_14.PRODUCTCOLORID = null;
}else{
	finder_tUniqRow_14.PRODUCTCOLORID = sortie_product_variant.PRODUCTCOLORID.toLowerCase();
}
if(sortie_product_variant.PRODUCTSIZEID == null){
	finder_tUniqRow_14.PRODUCTSIZEID = null;
}else{
	finder_tUniqRow_14.PRODUCTSIZEID = sortie_product_variant.PRODUCTSIZEID.toLowerCase();
}
if(sortie_product_variant.PRODUCTSTYLEID == null){
	finder_tUniqRow_14.PRODUCTSTYLEID = null;
}else{
	finder_tUniqRow_14.PRODUCTSTYLEID = sortie_product_variant.PRODUCTSTYLEID.toLowerCase();
}
if(sortie_product_variant.PRODUCTNAME == null){
	finder_tUniqRow_14.PRODUCTNAME = null;
}else{
	finder_tUniqRow_14.PRODUCTNAME = sortie_product_variant.PRODUCTNAME.toLowerCase();
}
if(sortie_product_variant.PRODUCTSEARCHNAME == null){
	finder_tUniqRow_14.PRODUCTSEARCHNAME = null;
}else{
	finder_tUniqRow_14.PRODUCTSEARCHNAME = sortie_product_variant.PRODUCTSEARCHNAME.toLowerCase();
}
if(sortie_product_variant.PRODUCTVARIANTNUMBER == null){
	finder_tUniqRow_14.PRODUCTVARIANTNUMBER = null;
}else{
	finder_tUniqRow_14.PRODUCTVARIANTNUMBER = sortie_product_variant.PRODUCTVARIANTNUMBER.toLowerCase();
}	
finder_tUniqRow_14.hashCodeDirty = true;
if (!keystUniqRow_14.contains(finder_tUniqRow_14)) {
		KeyStruct_tUniqRow_14 new_tUniqRow_14 = new KeyStruct_tUniqRow_14();

		
if(sortie_product_variant.PRODUCTMASTERNUMBER == null){
	new_tUniqRow_14.PRODUCTMASTERNUMBER = null;
}else{
	new_tUniqRow_14.PRODUCTMASTERNUMBER = sortie_product_variant.PRODUCTMASTERNUMBER.toLowerCase();
}
if(sortie_product_variant.PRODUCTCOLORID == null){
	new_tUniqRow_14.PRODUCTCOLORID = null;
}else{
	new_tUniqRow_14.PRODUCTCOLORID = sortie_product_variant.PRODUCTCOLORID.toLowerCase();
}
if(sortie_product_variant.PRODUCTSIZEID == null){
	new_tUniqRow_14.PRODUCTSIZEID = null;
}else{
	new_tUniqRow_14.PRODUCTSIZEID = sortie_product_variant.PRODUCTSIZEID.toLowerCase();
}
if(sortie_product_variant.PRODUCTSTYLEID == null){
	new_tUniqRow_14.PRODUCTSTYLEID = null;
}else{
	new_tUniqRow_14.PRODUCTSTYLEID = sortie_product_variant.PRODUCTSTYLEID.toLowerCase();
}
if(sortie_product_variant.PRODUCTNAME == null){
	new_tUniqRow_14.PRODUCTNAME = null;
}else{
	new_tUniqRow_14.PRODUCTNAME = sortie_product_variant.PRODUCTNAME.toLowerCase();
}
if(sortie_product_variant.PRODUCTSEARCHNAME == null){
	new_tUniqRow_14.PRODUCTSEARCHNAME = null;
}else{
	new_tUniqRow_14.PRODUCTSEARCHNAME = sortie_product_variant.PRODUCTSEARCHNAME.toLowerCase();
}
if(sortie_product_variant.PRODUCTVARIANTNUMBER == null){
	new_tUniqRow_14.PRODUCTVARIANTNUMBER = null;
}else{
	new_tUniqRow_14.PRODUCTVARIANTNUMBER = sortie_product_variant.PRODUCTVARIANTNUMBER.toLowerCase();
}
		
		keystUniqRow_14.add(new_tUniqRow_14);if(row18 == null){ 
	
	row18 = new row18Struct();
}row18.PRODUCTMASTERNUMBER = sortie_product_variant.PRODUCTMASTERNUMBER;			row18.PRODUCTCOLORID = sortie_product_variant.PRODUCTCOLORID;			row18.PRODUCTSIZEID = sortie_product_variant.PRODUCTSIZEID;			row18.PRODUCTSTYLEID = sortie_product_variant.PRODUCTSTYLEID;			row18.PRODUCTNAME = sortie_product_variant.PRODUCTNAME;			row18.PRODUCTSEARCHNAME = sortie_product_variant.PRODUCTSEARCHNAME;			row18.PRODUCTVARIANTNUMBER = sortie_product_variant.PRODUCTVARIANTNUMBER;			row18.PRODUCTDESCRIPTION = sortie_product_variant.PRODUCTDESCRIPTION;					
		nb_uniques_tUniqRow_14++;
	} else {
	  nb_duplicates_tUniqRow_14++;
	}

 


	tos_count_tUniqRow_14++;

/**
 * [tUniqRow_14 main ] stop
 */
	
	/**
	 * [tUniqRow_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_14";

	

 



/**
 * [tUniqRow_14 process_data_begin ] stop
 */
// Start of branch "row18"
if(row18 != null) { 



	
	/**
	 * [tHashOutput_4 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row18");
					}
					



    
		row18Struct oneRow_tHashOutput_4 = new row18Struct();
				
					oneRow_tHashOutput_4.PRODUCTMASTERNUMBER = row18.PRODUCTMASTERNUMBER;
					oneRow_tHashOutput_4.PRODUCTCOLORID = row18.PRODUCTCOLORID;
					oneRow_tHashOutput_4.PRODUCTSIZEID = row18.PRODUCTSIZEID;
					oneRow_tHashOutput_4.PRODUCTSTYLEID = row18.PRODUCTSTYLEID;
					oneRow_tHashOutput_4.PRODUCTNAME = row18.PRODUCTNAME;
					oneRow_tHashOutput_4.PRODUCTSEARCHNAME = row18.PRODUCTSEARCHNAME;
					oneRow_tHashOutput_4.PRODUCTVARIANTNUMBER = row18.PRODUCTVARIANTNUMBER;
					oneRow_tHashOutput_4.PRODUCTDESCRIPTION = row18.PRODUCTDESCRIPTION;
		
        tHashFile_tHashOutput_4.put(oneRow_tHashOutput_4);
        nb_line_tHashOutput_4 ++;
 


	tos_count_tHashOutput_4++;

/**
 * [tHashOutput_4 main ] stop
 */
	
	/**
	 * [tHashOutput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";

	

 



/**
 * [tHashOutput_4 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";

	

 



/**
 * [tHashOutput_4 process_data_end ] stop
 */

} // End of branch "row18"




	
	/**
	 * [tUniqRow_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_14";

	

 



/**
 * [tUniqRow_14 process_data_end ] stop
 */

} // End of branch "sortie_product_variant"




	
	/**
	 * [tMap_16 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_16";

	

 



/**
 * [tMap_16 process_data_end ] stop
 */

} // End of branch "sortie_full_fits"




// Start of branch "sortie_fits"
if(sortie_fits != null) { 



	
	/**
	 * [tUniqRow_13 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_13";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_fits");
					}
					
row29 = null;			
if(sortie_fits.PRODUCTMASTERNUMBER == null){
	finder_tUniqRow_13.PRODUCTMASTERNUMBER = null;
}else{
	finder_tUniqRow_13.PRODUCTMASTERNUMBER = sortie_fits.PRODUCTMASTERNUMBER.toLowerCase();
}
if(sortie_fits.PRODUCTSTYLEID == null){
	finder_tUniqRow_13.PRODUCTSTYLEID = null;
}else{
	finder_tUniqRow_13.PRODUCTSTYLEID = sortie_fits.PRODUCTSTYLEID.toLowerCase();
}	
finder_tUniqRow_13.hashCodeDirty = true;
if (!keystUniqRow_13.contains(finder_tUniqRow_13)) {
		KeyStruct_tUniqRow_13 new_tUniqRow_13 = new KeyStruct_tUniqRow_13();

		
if(sortie_fits.PRODUCTMASTERNUMBER == null){
	new_tUniqRow_13.PRODUCTMASTERNUMBER = null;
}else{
	new_tUniqRow_13.PRODUCTMASTERNUMBER = sortie_fits.PRODUCTMASTERNUMBER.toLowerCase();
}
if(sortie_fits.PRODUCTSTYLEID == null){
	new_tUniqRow_13.PRODUCTSTYLEID = null;
}else{
	new_tUniqRow_13.PRODUCTSTYLEID = sortie_fits.PRODUCTSTYLEID.toLowerCase();
}
		
		keystUniqRow_13.add(new_tUniqRow_13);if(row29 == null){ 
	
	row29 = new row29Struct();
}row29.PRODUCTMASTERNUMBER = sortie_fits.PRODUCTMASTERNUMBER;			row29.PRODUCTSTYLEID = sortie_fits.PRODUCTSTYLEID;					
		nb_uniques_tUniqRow_13++;
	} else {
	  nb_duplicates_tUniqRow_13++;
	}

 


	tos_count_tUniqRow_13++;

/**
 * [tUniqRow_13 main ] stop
 */
	
	/**
	 * [tUniqRow_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_13";

	

 



/**
 * [tUniqRow_13 process_data_begin ] stop
 */
// Start of branch "row29"
if(row29 != null) { 



	
	/**
	 * [tFileOutputExcel_6 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_6";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row29");
					}
					

				xlsxTool_tFileOutputExcel_6.addRow();
									   				
	    				if(row29.PRODUCTMASTERNUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_6.addCellValue(String.valueOf(row29.PRODUCTMASTERNUMBER));
	    				} else {
	    					xlsxTool_tFileOutputExcel_6.addCellNullValue();
	    				}
					
									   				
	    				if(row29.PRODUCTSTYLEID != null) {
    				
							xlsxTool_tFileOutputExcel_6.addCellValue(String.valueOf(row29.PRODUCTSTYLEID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_6.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_6++;
				
 


	tos_count_tFileOutputExcel_6++;

/**
 * [tFileOutputExcel_6 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_6";

	

 



/**
 * [tFileOutputExcel_6 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_6";

	

 



/**
 * [tFileOutputExcel_6 process_data_end ] stop
 */

} // End of branch "row29"




	
	/**
	 * [tUniqRow_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_13";

	

 



/**
 * [tUniqRow_13 process_data_end ] stop
 */

} // End of branch "sortie_fits"




// Start of branch "sortie_Ref_Description"
if(sortie_Ref_Description != null) { 



	
	/**
	 * [tHashOutput_5 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_Ref_Description");
					}
					



    
		sortie_Ref_DescriptionStruct oneRow_tHashOutput_5 = new sortie_Ref_DescriptionStruct();
				
					oneRow_tHashOutput_5.PRODUCTMASTERNUMBER = sortie_Ref_Description.PRODUCTMASTERNUMBER;
					oneRow_tHashOutput_5.DESCRIPTION = sortie_Ref_Description.DESCRIPTION;
		
        tHashFile_tHashOutput_5.put(oneRow_tHashOutput_5);
        nb_line_tHashOutput_5 ++;
 


	tos_count_tHashOutput_5++;

/**
 * [tHashOutput_5 main ] stop
 */
	
	/**
	 * [tHashOutput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";

	

 



/**
 * [tHashOutput_5 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";

	

 



/**
 * [tHashOutput_5 process_data_end ] stop
 */

} // End of branch "sortie_Ref_Description"




// Start of branch "sortie_hashoutput"
if(sortie_hashoutput != null) { 



	
	/**
	 * [tHashOutput_13 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_13";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_hashoutput");
					}
					



    
		sortie_hashoutputStruct oneRow_tHashOutput_13 = new sortie_hashoutputStruct();
				
					oneRow_tHashOutput_13.PRODUCTMASTERNUMBER = sortie_hashoutput.PRODUCTMASTERNUMBER;
					oneRow_tHashOutput_13.DESCRIPTION = sortie_hashoutput.DESCRIPTION;
		
        tHashFile_tHashOutput_13.put(oneRow_tHashOutput_13);
        nb_line_tHashOutput_13 ++;
 


	tos_count_tHashOutput_13++;

/**
 * [tHashOutput_13 main ] stop
 */
	
	/**
	 * [tHashOutput_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_13";

	

 



/**
 * [tHashOutput_13 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_13";

	

 



/**
 * [tHashOutput_13 process_data_end ] stop
 */

} // End of branch "sortie_hashoutput"




	
	/**
	 * [tMap_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_15";

	

 



/**
 * [tMap_15 process_data_end ] stop
 */

} // End of branch "sortie_full_size"




// Start of branch "sortie_size"
if(sortie_size != null) { 



	
	/**
	 * [tUniqRow_12 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_12";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_size");
					}
					
row28 = null;			
if(sortie_size.PRODUCTMASTERNUMBER == null){
	finder_tUniqRow_12.PRODUCTMASTERNUMBER = null;
}else{
	finder_tUniqRow_12.PRODUCTMASTERNUMBER = sortie_size.PRODUCTMASTERNUMBER.toLowerCase();
}
if(sortie_size.PRODUCTSIZEID == null){
	finder_tUniqRow_12.PRODUCTSIZEID = null;
}else{
	finder_tUniqRow_12.PRODUCTSIZEID = sortie_size.PRODUCTSIZEID.toLowerCase();
}	
finder_tUniqRow_12.hashCodeDirty = true;
if (!keystUniqRow_12.contains(finder_tUniqRow_12)) {
		KeyStruct_tUniqRow_12 new_tUniqRow_12 = new KeyStruct_tUniqRow_12();

		
if(sortie_size.PRODUCTMASTERNUMBER == null){
	new_tUniqRow_12.PRODUCTMASTERNUMBER = null;
}else{
	new_tUniqRow_12.PRODUCTMASTERNUMBER = sortie_size.PRODUCTMASTERNUMBER.toLowerCase();
}
if(sortie_size.PRODUCTSIZEID == null){
	new_tUniqRow_12.PRODUCTSIZEID = null;
}else{
	new_tUniqRow_12.PRODUCTSIZEID = sortie_size.PRODUCTSIZEID.toLowerCase();
}
		
		keystUniqRow_12.add(new_tUniqRow_12);if(row28 == null){ 
	
	row28 = new row28Struct();
}row28.PRODUCTMASTERNUMBER = sortie_size.PRODUCTMASTERNUMBER;			row28.PRODUCTSIZEID = sortie_size.PRODUCTSIZEID;					
		nb_uniques_tUniqRow_12++;
	} else {
	  nb_duplicates_tUniqRow_12++;
	}

 


	tos_count_tUniqRow_12++;

/**
 * [tUniqRow_12 main ] stop
 */
	
	/**
	 * [tUniqRow_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_12";

	

 



/**
 * [tUniqRow_12 process_data_begin ] stop
 */
// Start of branch "row28"
if(row28 != null) { 



	
	/**
	 * [tFileOutputExcel_5 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row28");
					}
					

				xlsxTool_tFileOutputExcel_5.addRow();
									   				
	    				if(row28.PRODUCTMASTERNUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_5.addCellValue(String.valueOf(row28.PRODUCTMASTERNUMBER));
	    				} else {
	    					xlsxTool_tFileOutputExcel_5.addCellNullValue();
	    				}
					
									   				
	    				if(row28.PRODUCTSIZEID != null) {
    				
							xlsxTool_tFileOutputExcel_5.addCellValue(String.valueOf(row28.PRODUCTSIZEID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_5.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_5++;
				
 


	tos_count_tFileOutputExcel_5++;

/**
 * [tFileOutputExcel_5 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_5";

	

 



/**
 * [tFileOutputExcel_5 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_5";

	

 



/**
 * [tFileOutputExcel_5 process_data_end ] stop
 */

} // End of branch "row28"




	
	/**
	 * [tUniqRow_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_12";

	

 



/**
 * [tUniqRow_12 process_data_end ] stop
 */

} // End of branch "sortie_size"




	
	/**
	 * [tMap_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_14";

	

 



/**
 * [tMap_14 process_data_end ] stop
 */

} // End of branch "sortie_full_"




// Start of branch "sortie_color"
if(sortie_color != null) { 



	
	/**
	 * [tUniqRow_11 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_11";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_color");
					}
					
row27 = null;			
if(sortie_color.PRODUCTMASTERNUMBER == null){
	finder_tUniqRow_11.PRODUCTMASTERNUMBER = null;
}else{
	finder_tUniqRow_11.PRODUCTMASTERNUMBER = sortie_color.PRODUCTMASTERNUMBER.toLowerCase();
}
if(sortie_color.PRODUCTCOLORID == null){
	finder_tUniqRow_11.PRODUCTCOLORID = null;
}else{
	finder_tUniqRow_11.PRODUCTCOLORID = sortie_color.PRODUCTCOLORID.toLowerCase();
}	
finder_tUniqRow_11.hashCodeDirty = true;
if (!keystUniqRow_11.contains(finder_tUniqRow_11)) {
		KeyStruct_tUniqRow_11 new_tUniqRow_11 = new KeyStruct_tUniqRow_11();

		
if(sortie_color.PRODUCTMASTERNUMBER == null){
	new_tUniqRow_11.PRODUCTMASTERNUMBER = null;
}else{
	new_tUniqRow_11.PRODUCTMASTERNUMBER = sortie_color.PRODUCTMASTERNUMBER.toLowerCase();
}
if(sortie_color.PRODUCTCOLORID == null){
	new_tUniqRow_11.PRODUCTCOLORID = null;
}else{
	new_tUniqRow_11.PRODUCTCOLORID = sortie_color.PRODUCTCOLORID.toLowerCase();
}
		
		keystUniqRow_11.add(new_tUniqRow_11);if(row27 == null){ 
	
	row27 = new row27Struct();
}row27.PRODUCTMASTERNUMBER = sortie_color.PRODUCTMASTERNUMBER;			row27.PRODUCTCOLORID = sortie_color.PRODUCTCOLORID;					
		nb_uniques_tUniqRow_11++;
	} else {
	  nb_duplicates_tUniqRow_11++;
	}

 


	tos_count_tUniqRow_11++;

/**
 * [tUniqRow_11 main ] stop
 */
	
	/**
	 * [tUniqRow_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_11";

	

 



/**
 * [tUniqRow_11 process_data_begin ] stop
 */
// Start of branch "row27"
if(row27 != null) { 



	
	/**
	 * [tFileOutputExcel_4 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row27");
					}
					

				xlsxTool_tFileOutputExcel_4.addRow();
									   				
	    				if(row27.PRODUCTMASTERNUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_4.addCellValue(String.valueOf(row27.PRODUCTMASTERNUMBER));
	    				} else {
	    					xlsxTool_tFileOutputExcel_4.addCellNullValue();
	    				}
					
									   				
	    				if(row27.PRODUCTCOLORID != null) {
    				
							xlsxTool_tFileOutputExcel_4.addCellValue(String.valueOf(row27.PRODUCTCOLORID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_4.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_4++;
				
 


	tos_count_tFileOutputExcel_4++;

/**
 * [tFileOutputExcel_4 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_4";

	

 



/**
 * [tFileOutputExcel_4 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_4";

	

 



/**
 * [tFileOutputExcel_4 process_data_end ] stop
 */

} // End of branch "row27"




	
	/**
	 * [tUniqRow_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_11";

	

 



/**
 * [tUniqRow_11 process_data_end ] stop
 */

} // End of branch "sortie_color"




	
	/**
	 * [tMap_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_13";

	

 



/**
 * [tMap_13 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full"




// Start of branch "copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product"
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product != null) { 



	
	/**
	 * [tUniqRow_10 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_10";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product");
					}
					
Main3 = null;			
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.PRODUCTNUMBER == null){
	finder_tUniqRow_10.PRODUCTNUMBER = null;
}else{
	finder_tUniqRow_10.PRODUCTNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.PRODUCTNUMBER.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTETYPENAME == null){
	finder_tUniqRow_10.ATTRIBUTETYPENAME = null;
}else{
	finder_tUniqRow_10.ATTRIBUTETYPENAME = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTETYPENAME.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTENAME == null){
	finder_tUniqRow_10.ATTRIBUTENAME = null;
}else{
	finder_tUniqRow_10.ATTRIBUTENAME = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTENAME.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.TEXTVALUE == null){
	finder_tUniqRow_10.TEXTVALUE = null;
}else{
	finder_tUniqRow_10.TEXTVALUE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.TEXTVALUE.toLowerCase();
}	
finder_tUniqRow_10.hashCodeDirty = true;
if (!keystUniqRow_10.contains(finder_tUniqRow_10)) {
		KeyStruct_tUniqRow_10 new_tUniqRow_10 = new KeyStruct_tUniqRow_10();

		
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.PRODUCTNUMBER == null){
	new_tUniqRow_10.PRODUCTNUMBER = null;
}else{
	new_tUniqRow_10.PRODUCTNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.PRODUCTNUMBER.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTETYPENAME == null){
	new_tUniqRow_10.ATTRIBUTETYPENAME = null;
}else{
	new_tUniqRow_10.ATTRIBUTETYPENAME = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTETYPENAME.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTENAME == null){
	new_tUniqRow_10.ATTRIBUTENAME = null;
}else{
	new_tUniqRow_10.ATTRIBUTENAME = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTENAME.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.TEXTVALUE == null){
	new_tUniqRow_10.TEXTVALUE = null;
}else{
	new_tUniqRow_10.TEXTVALUE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.TEXTVALUE.toLowerCase();
}
		
		keystUniqRow_10.add(new_tUniqRow_10);if(Main3 == null){ 
	
	Main3 = new Main3Struct();
}Main3.PRODUCTNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.PRODUCTNUMBER;			Main3.ATTRIBUTETYPENAME = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTETYPENAME;			Main3.ATTRIBUTENAME = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTENAME;			Main3.TEXTVALUE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.TEXTVALUE;			Main3.INTEGERVALUE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.INTEGERVALUE;					
		nb_uniques_tUniqRow_10++;
	} else {
	  nb_duplicates_tUniqRow_10++;
	}

 


	tos_count_tUniqRow_10++;

/**
 * [tUniqRow_10 main ] stop
 */
	
	/**
	 * [tUniqRow_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_10";

	

 



/**
 * [tUniqRow_10 process_data_begin ] stop
 */
// Start of branch "Main3"
if(Main3 != null) { 



	
	/**
	 * [tFilterRow_3 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"Main3");
					}
					

          row25 = null;
    Operator_tFilterRow_3 ope_tFilterRow_3 = new Operator_tFilterRow_3("&&");
            ope_tFilterRow_3.matches((Main3.INTEGERVALUE == null? false : Main3.INTEGERVALUE.compareTo("") != 0)
                           , "INTEGERVALUE.compareTo(\"\") != 0 failed");
    
    if (ope_tFilterRow_3.getMatchFlag()) {
              if(row25 == null){ 
                row25 = new row25Struct();
              }
               row25.PRODUCTNUMBER = Main3.PRODUCTNUMBER;
               row25.ATTRIBUTETYPENAME = Main3.ATTRIBUTETYPENAME;
               row25.ATTRIBUTENAME = Main3.ATTRIBUTENAME;
               row25.TEXTVALUE = Main3.TEXTVALUE;
               row25.INTEGERVALUE = Main3.INTEGERVALUE;    
      nb_line_ok_tFilterRow_3++;
    } else {
      nb_line_reject_tFilterRow_3++;
    }

nb_line_tFilterRow_3++;

 


	tos_count_tFilterRow_3++;

/**
 * [tFilterRow_3 main ] stop
 */
	
	/**
	 * [tFilterRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_3";

	

 



/**
 * [tFilterRow_3 process_data_begin ] stop
 */
// Start of branch "row25"
if(row25 != null) { 



	
	/**
	 * [tMap_23 main ] start
	 */

	

	
	
	currentComponent="tMap_23";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row25");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_23 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_23 = false;
		  boolean mainRowRejected_tMap_23 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_23__Struct Var = Var__tMap_23;// ###############################
        // ###############################
        // # Output tables

sortie_attribute = null;
sortie_defaultordersettings = null;


// # Output table : 'sortie_attribute'
sortie_attribute_tmp.PRODUCTNUMBER = row25.PRODUCTNUMBER ;
sortie_attribute_tmp.ATTRIBUTETYPENAME = row25.ATTRIBUTETYPENAME ;
sortie_attribute_tmp.ATTRIBUTENAME = row25.ATTRIBUTENAME ;
sortie_attribute_tmp.TEXTVALUE = row25.TEXTVALUE ;
sortie_attribute_tmp.INTEGERVALUE = row25.INTEGERVALUE ;
sortie_attribute = sortie_attribute_tmp;

// # Output table : 'sortie_defaultordersettings'
sortie_defaultordersettings_tmp.ARESALESDEFAULTORDERSETTINGSOVERRIDDEN = "Yes";
sortie_defaultordersettings_tmp.ITEMNUMBER = row25.PRODUCTNUMBER ;
sortie_defaultordersettings_tmp.SALESQUANTITYMULTIPLES = row25.INTEGERVALUE ;
sortie_defaultordersettings = sortie_defaultordersettings_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_23 = false;










 


	tos_count_tMap_23++;

/**
 * [tMap_23 main ] stop
 */
	
	/**
	 * [tMap_23 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_23";

	

 



/**
 * [tMap_23 process_data_begin ] stop
 */
// Start of branch "sortie_attribute"
if(sortie_attribute != null) { 



	
	/**
	 * [tHashOutput_8 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_8";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_attribute");
					}
					



    
		sortie_attributeStruct oneRow_tHashOutput_8 = new sortie_attributeStruct();
				
					oneRow_tHashOutput_8.PRODUCTNUMBER = sortie_attribute.PRODUCTNUMBER;
					oneRow_tHashOutput_8.ATTRIBUTETYPENAME = sortie_attribute.ATTRIBUTETYPENAME;
					oneRow_tHashOutput_8.ATTRIBUTENAME = sortie_attribute.ATTRIBUTENAME;
					oneRow_tHashOutput_8.TEXTVALUE = sortie_attribute.TEXTVALUE;
					oneRow_tHashOutput_8.INTEGERVALUE = sortie_attribute.INTEGERVALUE;
		
        tHashFile_tHashOutput_8.put(oneRow_tHashOutput_8);
        nb_line_tHashOutput_8 ++;
 


	tos_count_tHashOutput_8++;

/**
 * [tHashOutput_8 main ] stop
 */
	
	/**
	 * [tHashOutput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_8";

	

 



/**
 * [tHashOutput_8 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_8";

	

 



/**
 * [tHashOutput_8 process_data_end ] stop
 */

} // End of branch "sortie_attribute"




// Start of branch "sortie_defaultordersettings"
if(sortie_defaultordersettings != null) { 



	
	/**
	 * [tUniqRow_22 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_22";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_defaultordersettings");
					}
					
row36 = null;			
if(sortie_defaultordersettings.ITEMNUMBER == null){
	finder_tUniqRow_22.ITEMNUMBER = null;
}else{
	finder_tUniqRow_22.ITEMNUMBER = sortie_defaultordersettings.ITEMNUMBER.toLowerCase();
}
if(sortie_defaultordersettings.SALESQUANTITYMULTIPLES == null){
	finder_tUniqRow_22.SALESQUANTITYMULTIPLES = null;
}else{
	finder_tUniqRow_22.SALESQUANTITYMULTIPLES = sortie_defaultordersettings.SALESQUANTITYMULTIPLES.toLowerCase();
}	
finder_tUniqRow_22.hashCodeDirty = true;
if (!keystUniqRow_22.contains(finder_tUniqRow_22)) {
		KeyStruct_tUniqRow_22 new_tUniqRow_22 = new KeyStruct_tUniqRow_22();

		
if(sortie_defaultordersettings.ITEMNUMBER == null){
	new_tUniqRow_22.ITEMNUMBER = null;
}else{
	new_tUniqRow_22.ITEMNUMBER = sortie_defaultordersettings.ITEMNUMBER.toLowerCase();
}
if(sortie_defaultordersettings.SALESQUANTITYMULTIPLES == null){
	new_tUniqRow_22.SALESQUANTITYMULTIPLES = null;
}else{
	new_tUniqRow_22.SALESQUANTITYMULTIPLES = sortie_defaultordersettings.SALESQUANTITYMULTIPLES.toLowerCase();
}
		
		keystUniqRow_22.add(new_tUniqRow_22);if(row36 == null){ 
	
	row36 = new row36Struct();
}row36.ARESALESDEFAULTORDERSETTINGSOVERRIDDEN = sortie_defaultordersettings.ARESALESDEFAULTORDERSETTINGSOVERRIDDEN;			row36.ITEMNUMBER = sortie_defaultordersettings.ITEMNUMBER;			row36.SALESQUANTITYMULTIPLES = sortie_defaultordersettings.SALESQUANTITYMULTIPLES;					
		nb_uniques_tUniqRow_22++;
	} else {
	  nb_duplicates_tUniqRow_22++;
	}

 


	tos_count_tUniqRow_22++;

/**
 * [tUniqRow_22 main ] stop
 */
	
	/**
	 * [tUniqRow_22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_22";

	

 



/**
 * [tUniqRow_22 process_data_begin ] stop
 */
// Start of branch "row36"
if(row36 != null) { 



	
	/**
	 * [tFileOutputExcel_13 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_13";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row36");
					}
					

				xlsxTool_tFileOutputExcel_13.addRow();
									   				
	    				if(row36.ARESALESDEFAULTORDERSETTINGSOVERRIDDEN != null) {
    				
							xlsxTool_tFileOutputExcel_13.addCellValue(String.valueOf(row36.ARESALESDEFAULTORDERSETTINGSOVERRIDDEN));
	    				} else {
	    					xlsxTool_tFileOutputExcel_13.addCellNullValue();
	    				}
					
									   				
	    				if(row36.ITEMNUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_13.addCellValue(String.valueOf(row36.ITEMNUMBER));
	    				} else {
	    					xlsxTool_tFileOutputExcel_13.addCellNullValue();
	    				}
					
									   				
	    				if(row36.SALESQUANTITYMULTIPLES != null) {
    				
							xlsxTool_tFileOutputExcel_13.addCellValue(String.valueOf(row36.SALESQUANTITYMULTIPLES));
	    				} else {
	    					xlsxTool_tFileOutputExcel_13.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_13++;
				
 


	tos_count_tFileOutputExcel_13++;

/**
 * [tFileOutputExcel_13 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_13";

	

 



/**
 * [tFileOutputExcel_13 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_13";

	

 



/**
 * [tFileOutputExcel_13 process_data_end ] stop
 */

} // End of branch "row36"




	
	/**
	 * [tUniqRow_22 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_22";

	

 



/**
 * [tUniqRow_22 process_data_end ] stop
 */

} // End of branch "sortie_defaultordersettings"




	
	/**
	 * [tMap_23 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_23";

	

 



/**
 * [tMap_23 process_data_end ] stop
 */

} // End of branch "row25"




	
	/**
	 * [tFilterRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_3";

	

 



/**
 * [tFilterRow_3 process_data_end ] stop
 */

} // End of branch "Main3"




	
	/**
	 * [tUniqRow_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_10";

	

 



/**
 * [tUniqRow_10 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product"




	
	/**
	 * [tMap_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_12";

	

 



/**
 * [tMap_12 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full"




// Start of branch "copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product"
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product != null) { 



	
	/**
	 * [tUniqRow_9 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_9";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product");
					}
					

if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.PRODUCTNUMBER == null){
	finder_tUniqRow_9.PRODUCTNUMBER = null;
}else{
	finder_tUniqRow_9.PRODUCTNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.PRODUCTNUMBER.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTETYPENAME == null){
	finder_tUniqRow_9.ATTRIBUTETYPENAME = null;
}else{
	finder_tUniqRow_9.ATTRIBUTETYPENAME = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTETYPENAME.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTENAME == null){
	finder_tUniqRow_9.ATTRIBUTENAME = null;
}else{
	finder_tUniqRow_9.ATTRIBUTENAME = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTENAME.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.TEXTVALUE == null){
	finder_tUniqRow_9.TEXTVALUE = null;
}else{
	finder_tUniqRow_9.TEXTVALUE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.TEXTVALUE.toLowerCase();
}	
finder_tUniqRow_9.hashCodeDirty = true;
if (!keystUniqRow_9.contains(finder_tUniqRow_9)) {
		KeyStruct_tUniqRow_9 new_tUniqRow_9 = new KeyStruct_tUniqRow_9();

		
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.PRODUCTNUMBER == null){
	new_tUniqRow_9.PRODUCTNUMBER = null;
}else{
	new_tUniqRow_9.PRODUCTNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.PRODUCTNUMBER.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTETYPENAME == null){
	new_tUniqRow_9.ATTRIBUTETYPENAME = null;
}else{
	new_tUniqRow_9.ATTRIBUTETYPENAME = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTETYPENAME.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTENAME == null){
	new_tUniqRow_9.ATTRIBUTENAME = null;
}else{
	new_tUniqRow_9.ATTRIBUTENAME = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTENAME.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.TEXTVALUE == null){
	new_tUniqRow_9.TEXTVALUE = null;
}else{
	new_tUniqRow_9.TEXTVALUE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.TEXTVALUE.toLowerCase();
}
		
		keystUniqRow_9.add(new_tUniqRow_9);		
		nb_uniques_tUniqRow_9++;
	} else {
	  nb_duplicates_tUniqRow_9++;
	}

 


	tos_count_tUniqRow_9++;

/**
 * [tUniqRow_9 main ] stop
 */
	
	/**
	 * [tUniqRow_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_9";

	

 



/**
 * [tUniqRow_9 process_data_begin ] stop
 */
	
	/**
	 * [tUniqRow_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_9";

	

 



/**
 * [tUniqRow_9 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product"




	
	/**
	 * [tMap_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_11";

	

 



/**
 * [tMap_11 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full"




// Start of branch "copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product"
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product != null) { 



	
	/**
	 * [tUniqRow_8 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_8";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product");
					}
					
row20 = null;			
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.PRODUCTNUMBER == null){
	finder_tUniqRow_8.PRODUCTNUMBER = null;
}else{
	finder_tUniqRow_8.PRODUCTNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.PRODUCTNUMBER.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTETYPENAME == null){
	finder_tUniqRow_8.ATTRIBUTETYPENAME = null;
}else{
	finder_tUniqRow_8.ATTRIBUTETYPENAME = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTETYPENAME.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTENAME == null){
	finder_tUniqRow_8.ATTRIBUTENAME = null;
}else{
	finder_tUniqRow_8.ATTRIBUTENAME = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTENAME.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.TEXTVALUE == null){
	finder_tUniqRow_8.TEXTVALUE = null;
}else{
	finder_tUniqRow_8.TEXTVALUE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.TEXTVALUE.toLowerCase();
}	
finder_tUniqRow_8.hashCodeDirty = true;
if (!keystUniqRow_8.contains(finder_tUniqRow_8)) {
		KeyStruct_tUniqRow_8 new_tUniqRow_8 = new KeyStruct_tUniqRow_8();

		
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.PRODUCTNUMBER == null){
	new_tUniqRow_8.PRODUCTNUMBER = null;
}else{
	new_tUniqRow_8.PRODUCTNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.PRODUCTNUMBER.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTETYPENAME == null){
	new_tUniqRow_8.ATTRIBUTETYPENAME = null;
}else{
	new_tUniqRow_8.ATTRIBUTETYPENAME = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTETYPENAME.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTENAME == null){
	new_tUniqRow_8.ATTRIBUTENAME = null;
}else{
	new_tUniqRow_8.ATTRIBUTENAME = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTENAME.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.TEXTVALUE == null){
	new_tUniqRow_8.TEXTVALUE = null;
}else{
	new_tUniqRow_8.TEXTVALUE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.TEXTVALUE.toLowerCase();
}
		
		keystUniqRow_8.add(new_tUniqRow_8);if(row20 == null){ 
	
	row20 = new row20Struct();
}row20.PRODUCTNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.PRODUCTNUMBER;			row20.ATTRIBUTETYPENAME = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTETYPENAME;			row20.ATTRIBUTENAME = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTENAME;			row20.TEXTVALUE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.TEXTVALUE;			row20.INTEGERVALUE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.INTEGERVALUE;					
		nb_uniques_tUniqRow_8++;
	} else {
	  nb_duplicates_tUniqRow_8++;
	}

 


	tos_count_tUniqRow_8++;

/**
 * [tUniqRow_8 main ] stop
 */
	
	/**
	 * [tUniqRow_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_8";

	

 



/**
 * [tUniqRow_8 process_data_begin ] stop
 */
// Start of branch "row20"
if(row20 != null) { 



	
	/**
	 * [tHashOutput_6 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_6";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row20");
					}
					



    
		row20Struct oneRow_tHashOutput_6 = new row20Struct();
				
					oneRow_tHashOutput_6.PRODUCTNUMBER = row20.PRODUCTNUMBER;
					oneRow_tHashOutput_6.ATTRIBUTETYPENAME = row20.ATTRIBUTETYPENAME;
					oneRow_tHashOutput_6.ATTRIBUTENAME = row20.ATTRIBUTENAME;
					oneRow_tHashOutput_6.TEXTVALUE = row20.TEXTVALUE;
					oneRow_tHashOutput_6.INTEGERVALUE = row20.INTEGERVALUE;
		
        tHashFile_tHashOutput_6.put(oneRow_tHashOutput_6);
        nb_line_tHashOutput_6 ++;
 


	tos_count_tHashOutput_6++;

/**
 * [tHashOutput_6 main ] stop
 */
	
	/**
	 * [tHashOutput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_6";

	

 



/**
 * [tHashOutput_6 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_6";

	

 



/**
 * [tHashOutput_6 process_data_end ] stop
 */

} // End of branch "row20"




	
	/**
	 * [tUniqRow_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_8";

	

 



/**
 * [tUniqRow_8 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product"




	
	/**
	 * [tMap_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_10";

	

 



/**
 * [tMap_10 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full"




// Start of branch "copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product"
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product != null) { 



	
	/**
	 * [tUniqRow_7 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_7";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product");
					}
					

if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.PRODUCTNUMBER == null){
	finder_tUniqRow_7.PRODUCTNUMBER = null;
}else{
	finder_tUniqRow_7.PRODUCTNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.PRODUCTNUMBER.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTETYPENAME == null){
	finder_tUniqRow_7.ATTRIBUTETYPENAME = null;
}else{
	finder_tUniqRow_7.ATTRIBUTETYPENAME = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTETYPENAME.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTENAME == null){
	finder_tUniqRow_7.ATTRIBUTENAME = null;
}else{
	finder_tUniqRow_7.ATTRIBUTENAME = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTENAME.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.TEXTVALUE == null){
	finder_tUniqRow_7.TEXTVALUE = null;
}else{
	finder_tUniqRow_7.TEXTVALUE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.TEXTVALUE.toLowerCase();
}	
finder_tUniqRow_7.hashCodeDirty = true;
if (!keystUniqRow_7.contains(finder_tUniqRow_7)) {
		KeyStruct_tUniqRow_7 new_tUniqRow_7 = new KeyStruct_tUniqRow_7();

		
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.PRODUCTNUMBER == null){
	new_tUniqRow_7.PRODUCTNUMBER = null;
}else{
	new_tUniqRow_7.PRODUCTNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.PRODUCTNUMBER.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTETYPENAME == null){
	new_tUniqRow_7.ATTRIBUTETYPENAME = null;
}else{
	new_tUniqRow_7.ATTRIBUTETYPENAME = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTETYPENAME.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTENAME == null){
	new_tUniqRow_7.ATTRIBUTENAME = null;
}else{
	new_tUniqRow_7.ATTRIBUTENAME = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTENAME.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.TEXTVALUE == null){
	new_tUniqRow_7.TEXTVALUE = null;
}else{
	new_tUniqRow_7.TEXTVALUE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.TEXTVALUE.toLowerCase();
}
		
		keystUniqRow_7.add(new_tUniqRow_7);		
		nb_uniques_tUniqRow_7++;
	} else {
	  nb_duplicates_tUniqRow_7++;
	}

 


	tos_count_tUniqRow_7++;

/**
 * [tUniqRow_7 main ] stop
 */
	
	/**
	 * [tUniqRow_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_7";

	

 



/**
 * [tUniqRow_7 process_data_begin ] stop
 */
	
	/**
	 * [tUniqRow_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_7";

	

 



/**
 * [tUniqRow_7 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product"




	
	/**
	 * [tMap_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

 



/**
 * [tMap_9 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfcopyOfcopyOfcopyOfsortie_full"




// Start of branch "copyOfcopyOfcopyOfcopyOfcopyOfsortie_product"
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_product != null) { 



	
	/**
	 * [tUniqRow_6 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_6";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfcopyOfcopyOfcopyOfcopyOfsortie_product");
					}
					

if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_product.PRODUCTNUMBER == null){
	finder_tUniqRow_6.PRODUCTNUMBER = null;
}else{
	finder_tUniqRow_6.PRODUCTNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfsortie_product.PRODUCTNUMBER.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTETYPENAME == null){
	finder_tUniqRow_6.ATTRIBUTETYPENAME = null;
}else{
	finder_tUniqRow_6.ATTRIBUTETYPENAME = copyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTETYPENAME.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTENAME == null){
	finder_tUniqRow_6.ATTRIBUTENAME = null;
}else{
	finder_tUniqRow_6.ATTRIBUTENAME = copyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTENAME.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_product.TEXTVALUE == null){
	finder_tUniqRow_6.TEXTVALUE = null;
}else{
	finder_tUniqRow_6.TEXTVALUE = copyOfcopyOfcopyOfcopyOfcopyOfsortie_product.TEXTVALUE.toLowerCase();
}	
finder_tUniqRow_6.hashCodeDirty = true;
if (!keystUniqRow_6.contains(finder_tUniqRow_6)) {
		KeyStruct_tUniqRow_6 new_tUniqRow_6 = new KeyStruct_tUniqRow_6();

		
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_product.PRODUCTNUMBER == null){
	new_tUniqRow_6.PRODUCTNUMBER = null;
}else{
	new_tUniqRow_6.PRODUCTNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfsortie_product.PRODUCTNUMBER.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTETYPENAME == null){
	new_tUniqRow_6.ATTRIBUTETYPENAME = null;
}else{
	new_tUniqRow_6.ATTRIBUTETYPENAME = copyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTETYPENAME.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTENAME == null){
	new_tUniqRow_6.ATTRIBUTENAME = null;
}else{
	new_tUniqRow_6.ATTRIBUTENAME = copyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTENAME.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_product.TEXTVALUE == null){
	new_tUniqRow_6.TEXTVALUE = null;
}else{
	new_tUniqRow_6.TEXTVALUE = copyOfcopyOfcopyOfcopyOfcopyOfsortie_product.TEXTVALUE.toLowerCase();
}
		
		keystUniqRow_6.add(new_tUniqRow_6);		
		nb_uniques_tUniqRow_6++;
	} else {
	  nb_duplicates_tUniqRow_6++;
	}

 


	tos_count_tUniqRow_6++;

/**
 * [tUniqRow_6 main ] stop
 */
	
	/**
	 * [tUniqRow_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_6";

	

 



/**
 * [tUniqRow_6 process_data_begin ] stop
 */
	
	/**
	 * [tUniqRow_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_6";

	

 



/**
 * [tUniqRow_6 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfcopyOfcopyOfcopyOfsortie_product"




	
	/**
	 * [tMap_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfcopyOfcopyOfsortie_full"




// Start of branch "copyOfcopyOfcopyOfcopyOfsortie_product"
if(copyOfcopyOfcopyOfcopyOfsortie_product != null) { 



	
	/**
	 * [tUniqRow_5 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfcopyOfcopyOfcopyOfsortie_product");
					}
					
row14 = null;			
if(copyOfcopyOfcopyOfcopyOfsortie_product.PRODUCTNUMBER == null){
	finder_tUniqRow_5.PRODUCTNUMBER = null;
}else{
	finder_tUniqRow_5.PRODUCTNUMBER = copyOfcopyOfcopyOfcopyOfsortie_product.PRODUCTNUMBER.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTETYPENAME == null){
	finder_tUniqRow_5.ATTRIBUTETYPENAME = null;
}else{
	finder_tUniqRow_5.ATTRIBUTETYPENAME = copyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTETYPENAME.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTENAME == null){
	finder_tUniqRow_5.ATTRIBUTENAME = null;
}else{
	finder_tUniqRow_5.ATTRIBUTENAME = copyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTENAME.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfsortie_product.TEXTVALUE == null){
	finder_tUniqRow_5.TEXTVALUE = null;
}else{
	finder_tUniqRow_5.TEXTVALUE = copyOfcopyOfcopyOfcopyOfsortie_product.TEXTVALUE.toLowerCase();
}	
finder_tUniqRow_5.hashCodeDirty = true;
if (!keystUniqRow_5.contains(finder_tUniqRow_5)) {
		KeyStruct_tUniqRow_5 new_tUniqRow_5 = new KeyStruct_tUniqRow_5();

		
if(copyOfcopyOfcopyOfcopyOfsortie_product.PRODUCTNUMBER == null){
	new_tUniqRow_5.PRODUCTNUMBER = null;
}else{
	new_tUniqRow_5.PRODUCTNUMBER = copyOfcopyOfcopyOfcopyOfsortie_product.PRODUCTNUMBER.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTETYPENAME == null){
	new_tUniqRow_5.ATTRIBUTETYPENAME = null;
}else{
	new_tUniqRow_5.ATTRIBUTETYPENAME = copyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTETYPENAME.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTENAME == null){
	new_tUniqRow_5.ATTRIBUTENAME = null;
}else{
	new_tUniqRow_5.ATTRIBUTENAME = copyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTENAME.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfsortie_product.TEXTVALUE == null){
	new_tUniqRow_5.TEXTVALUE = null;
}else{
	new_tUniqRow_5.TEXTVALUE = copyOfcopyOfcopyOfcopyOfsortie_product.TEXTVALUE.toLowerCase();
}
		
		keystUniqRow_5.add(new_tUniqRow_5);if(row14 == null){ 
	
	row14 = new row14Struct();
}row14.PRODUCTNUMBER = copyOfcopyOfcopyOfcopyOfsortie_product.PRODUCTNUMBER;			row14.ATTRIBUTETYPENAME = copyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTETYPENAME;			row14.ATTRIBUTENAME = copyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTENAME;			row14.TEXTVALUE = copyOfcopyOfcopyOfcopyOfsortie_product.TEXTVALUE;			row14.INTEGERVALUE = copyOfcopyOfcopyOfcopyOfsortie_product.INTEGERVALUE;					
		nb_uniques_tUniqRow_5++;
	} else {
	  nb_duplicates_tUniqRow_5++;
	}

 


	tos_count_tUniqRow_5++;

/**
 * [tUniqRow_5 main ] stop
 */
	
	/**
	 * [tUniqRow_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_5";

	

 



/**
 * [tUniqRow_5 process_data_begin ] stop
 */
// Start of branch "row14"
if(row14 != null) { 



	
	/**
	 * [tHashOutput_3 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row14");
					}
					



    
		row14Struct oneRow_tHashOutput_3 = new row14Struct();
				
					oneRow_tHashOutput_3.PRODUCTNUMBER = row14.PRODUCTNUMBER;
					oneRow_tHashOutput_3.ATTRIBUTETYPENAME = row14.ATTRIBUTETYPENAME;
					oneRow_tHashOutput_3.ATTRIBUTENAME = row14.ATTRIBUTENAME;
					oneRow_tHashOutput_3.TEXTVALUE = row14.TEXTVALUE;
					oneRow_tHashOutput_3.INTEGERVALUE = row14.INTEGERVALUE;
		
        tHashFile_tHashOutput_3.put(oneRow_tHashOutput_3);
        nb_line_tHashOutput_3 ++;
 


	tos_count_tHashOutput_3++;

/**
 * [tHashOutput_3 main ] stop
 */
	
	/**
	 * [tHashOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";

	

 



/**
 * [tHashOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";

	

 



/**
 * [tHashOutput_3 process_data_end ] stop
 */

} // End of branch "row14"




	
	/**
	 * [tUniqRow_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_5";

	

 



/**
 * [tUniqRow_5 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfcopyOfcopyOfsortie_product"




	
	/**
	 * [tMap_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfcopyOfsortie_full"




// Start of branch "copyOfcopyOfcopyOfsortie_product"
if(copyOfcopyOfcopyOfsortie_product != null) { 



	
	/**
	 * [tUniqRow_4 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfcopyOfcopyOfsortie_product");
					}
					
row10 = null;			
if(copyOfcopyOfcopyOfsortie_product.PRODUCTNUMBER == null){
	finder_tUniqRow_4.PRODUCTNUMBER = null;
}else{
	finder_tUniqRow_4.PRODUCTNUMBER = copyOfcopyOfcopyOfsortie_product.PRODUCTNUMBER.toLowerCase();
}
if(copyOfcopyOfcopyOfsortie_product.ATTRIBUTETYPENAME == null){
	finder_tUniqRow_4.ATTRIBUTETYPENAME = null;
}else{
	finder_tUniqRow_4.ATTRIBUTETYPENAME = copyOfcopyOfcopyOfsortie_product.ATTRIBUTETYPENAME.toLowerCase();
}
if(copyOfcopyOfcopyOfsortie_product.ATTRIBUTENAME == null){
	finder_tUniqRow_4.ATTRIBUTENAME = null;
}else{
	finder_tUniqRow_4.ATTRIBUTENAME = copyOfcopyOfcopyOfsortie_product.ATTRIBUTENAME.toLowerCase();
}
if(copyOfcopyOfcopyOfsortie_product.TEXTVALUE == null){
	finder_tUniqRow_4.TEXTVALUE = null;
}else{
	finder_tUniqRow_4.TEXTVALUE = copyOfcopyOfcopyOfsortie_product.TEXTVALUE.toLowerCase();
}	
finder_tUniqRow_4.hashCodeDirty = true;
if (!keystUniqRow_4.contains(finder_tUniqRow_4)) {
		KeyStruct_tUniqRow_4 new_tUniqRow_4 = new KeyStruct_tUniqRow_4();

		
if(copyOfcopyOfcopyOfsortie_product.PRODUCTNUMBER == null){
	new_tUniqRow_4.PRODUCTNUMBER = null;
}else{
	new_tUniqRow_4.PRODUCTNUMBER = copyOfcopyOfcopyOfsortie_product.PRODUCTNUMBER.toLowerCase();
}
if(copyOfcopyOfcopyOfsortie_product.ATTRIBUTETYPENAME == null){
	new_tUniqRow_4.ATTRIBUTETYPENAME = null;
}else{
	new_tUniqRow_4.ATTRIBUTETYPENAME = copyOfcopyOfcopyOfsortie_product.ATTRIBUTETYPENAME.toLowerCase();
}
if(copyOfcopyOfcopyOfsortie_product.ATTRIBUTENAME == null){
	new_tUniqRow_4.ATTRIBUTENAME = null;
}else{
	new_tUniqRow_4.ATTRIBUTENAME = copyOfcopyOfcopyOfsortie_product.ATTRIBUTENAME.toLowerCase();
}
if(copyOfcopyOfcopyOfsortie_product.TEXTVALUE == null){
	new_tUniqRow_4.TEXTVALUE = null;
}else{
	new_tUniqRow_4.TEXTVALUE = copyOfcopyOfcopyOfsortie_product.TEXTVALUE.toLowerCase();
}
		
		keystUniqRow_4.add(new_tUniqRow_4);if(row10 == null){ 
	
	row10 = new row10Struct();
}row10.PRODUCTNUMBER = copyOfcopyOfcopyOfsortie_product.PRODUCTNUMBER;			row10.ATTRIBUTETYPENAME = copyOfcopyOfcopyOfsortie_product.ATTRIBUTETYPENAME;			row10.ATTRIBUTENAME = copyOfcopyOfcopyOfsortie_product.ATTRIBUTENAME;			row10.TEXTVALUE = copyOfcopyOfcopyOfsortie_product.TEXTVALUE;			row10.INTEGERVALUE = copyOfcopyOfcopyOfsortie_product.INTEGERVALUE;					
		nb_uniques_tUniqRow_4++;
	} else {
	  nb_duplicates_tUniqRow_4++;
	}

 


	tos_count_tUniqRow_4++;

/**
 * [tUniqRow_4 main ] stop
 */
	
	/**
	 * [tUniqRow_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_4";

	

 



/**
 * [tUniqRow_4 process_data_begin ] stop
 */
// Start of branch "row10"
if(row10 != null) { 



	
	/**
	 * [tHashOutput_2 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row10");
					}
					



    
		row10Struct oneRow_tHashOutput_2 = new row10Struct();
				
					oneRow_tHashOutput_2.PRODUCTNUMBER = row10.PRODUCTNUMBER;
					oneRow_tHashOutput_2.ATTRIBUTETYPENAME = row10.ATTRIBUTETYPENAME;
					oneRow_tHashOutput_2.ATTRIBUTENAME = row10.ATTRIBUTENAME;
					oneRow_tHashOutput_2.TEXTVALUE = row10.TEXTVALUE;
					oneRow_tHashOutput_2.INTEGERVALUE = row10.INTEGERVALUE;
		
        tHashFile_tHashOutput_2.put(oneRow_tHashOutput_2);
        nb_line_tHashOutput_2 ++;
 


	tos_count_tHashOutput_2++;

/**
 * [tHashOutput_2 main ] stop
 */
	
	/**
	 * [tHashOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";

	

 



/**
 * [tHashOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";

	

 



/**
 * [tHashOutput_2 process_data_end ] stop
 */

} // End of branch "row10"




	
	/**
	 * [tUniqRow_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_4";

	

 



/**
 * [tUniqRow_4 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfcopyOfsortie_product"




	
	/**
	 * [tMap_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfsortie_full"




// Start of branch "copyOfcopyOfsortie_product"
if(copyOfcopyOfsortie_product != null) { 



	
	/**
	 * [tUniqRow_3 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfcopyOfsortie_product");
					}
					
Main1 = null;			
if(copyOfcopyOfsortie_product.PRODUCTNUMBER == null){
	finder_tUniqRow_3.PRODUCTNUMBER = null;
}else{
	finder_tUniqRow_3.PRODUCTNUMBER = copyOfcopyOfsortie_product.PRODUCTNUMBER.toLowerCase();
}
if(copyOfcopyOfsortie_product.ATTRIBUTETYPENAME == null){
	finder_tUniqRow_3.ATTRIBUTETYPENAME = null;
}else{
	finder_tUniqRow_3.ATTRIBUTETYPENAME = copyOfcopyOfsortie_product.ATTRIBUTETYPENAME.toLowerCase();
}
if(copyOfcopyOfsortie_product.ATTRIBUTENAME == null){
	finder_tUniqRow_3.ATTRIBUTENAME = null;
}else{
	finder_tUniqRow_3.ATTRIBUTENAME = copyOfcopyOfsortie_product.ATTRIBUTENAME.toLowerCase();
}
if(copyOfcopyOfsortie_product.TEXTVALUE == null){
	finder_tUniqRow_3.TEXTVALUE = null;
}else{
	finder_tUniqRow_3.TEXTVALUE = copyOfcopyOfsortie_product.TEXTVALUE.toLowerCase();
}	
finder_tUniqRow_3.hashCodeDirty = true;
if (!keystUniqRow_3.contains(finder_tUniqRow_3)) {
		KeyStruct_tUniqRow_3 new_tUniqRow_3 = new KeyStruct_tUniqRow_3();

		
if(copyOfcopyOfsortie_product.PRODUCTNUMBER == null){
	new_tUniqRow_3.PRODUCTNUMBER = null;
}else{
	new_tUniqRow_3.PRODUCTNUMBER = copyOfcopyOfsortie_product.PRODUCTNUMBER.toLowerCase();
}
if(copyOfcopyOfsortie_product.ATTRIBUTETYPENAME == null){
	new_tUniqRow_3.ATTRIBUTETYPENAME = null;
}else{
	new_tUniqRow_3.ATTRIBUTETYPENAME = copyOfcopyOfsortie_product.ATTRIBUTETYPENAME.toLowerCase();
}
if(copyOfcopyOfsortie_product.ATTRIBUTENAME == null){
	new_tUniqRow_3.ATTRIBUTENAME = null;
}else{
	new_tUniqRow_3.ATTRIBUTENAME = copyOfcopyOfsortie_product.ATTRIBUTENAME.toLowerCase();
}
if(copyOfcopyOfsortie_product.TEXTVALUE == null){
	new_tUniqRow_3.TEXTVALUE = null;
}else{
	new_tUniqRow_3.TEXTVALUE = copyOfcopyOfsortie_product.TEXTVALUE.toLowerCase();
}
		
		keystUniqRow_3.add(new_tUniqRow_3);if(Main1 == null){ 
	
	Main1 = new Main1Struct();
}Main1.PRODUCTNUMBER = copyOfcopyOfsortie_product.PRODUCTNUMBER;			Main1.ATTRIBUTETYPENAME = copyOfcopyOfsortie_product.ATTRIBUTETYPENAME;			Main1.ATTRIBUTENAME = copyOfcopyOfsortie_product.ATTRIBUTENAME;			Main1.TEXTVALUE = copyOfcopyOfsortie_product.TEXTVALUE;			Main1.INTEGERVALUE = copyOfcopyOfsortie_product.INTEGERVALUE;					
		nb_uniques_tUniqRow_3++;
	} else {
	  nb_duplicates_tUniqRow_3++;
	}

 


	tos_count_tUniqRow_3++;

/**
 * [tUniqRow_3 main ] stop
 */
	
	/**
	 * [tUniqRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_3";

	

 



/**
 * [tUniqRow_3 process_data_begin ] stop
 */
// Start of branch "Main1"
if(Main1 != null) { 



	
	/**
	 * [tHashOutput_1 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"Main1");
					}
					



    
		Main1Struct oneRow_tHashOutput_1 = new Main1Struct();
				
					oneRow_tHashOutput_1.PRODUCTNUMBER = Main1.PRODUCTNUMBER;
					oneRow_tHashOutput_1.ATTRIBUTETYPENAME = Main1.ATTRIBUTETYPENAME;
					oneRow_tHashOutput_1.ATTRIBUTENAME = Main1.ATTRIBUTENAME;
					oneRow_tHashOutput_1.TEXTVALUE = Main1.TEXTVALUE;
					oneRow_tHashOutput_1.INTEGERVALUE = Main1.INTEGERVALUE;
		
        tHashFile_tHashOutput_1.put(oneRow_tHashOutput_1);
        nb_line_tHashOutput_1 ++;
 


	tos_count_tHashOutput_1++;

/**
 * [tHashOutput_1 main ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";

	

 



/**
 * [tHashOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";

	

 



/**
 * [tHashOutput_1 process_data_end ] stop
 */

} // End of branch "Main1"




	
	/**
	 * [tUniqRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_3";

	

 



/**
 * [tUniqRow_3 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfsortie_product"




	
	/**
	 * [tMap_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_end ] stop
 */

} // End of branch "copyOfsortie_full"




// Start of branch "copyOfsortie_product"
if(copyOfsortie_product != null) { 



	
	/**
	 * [tUniqRow_2 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfsortie_product");
					}
					
row8 = null;			
if(copyOfsortie_product.ITEMNUMBER == null){
	finder_tUniqRow_2.ITEMNUMBER = null;
}else{
	finder_tUniqRow_2.ITEMNUMBER = copyOfsortie_product.ITEMNUMBER.toLowerCase();
}
if(copyOfsortie_product.ORIGINCOUNTRYREGIONID == null){
	finder_tUniqRow_2.ORIGINCOUNTRYREGIONID = null;
}else{
	finder_tUniqRow_2.ORIGINCOUNTRYREGIONID = copyOfsortie_product.ORIGINCOUNTRYREGIONID.toLowerCase();
}
if(copyOfsortie_product.PRODUCTCOVERAGEGROUPID == null){
	finder_tUniqRow_2.PRODUCTCOVERAGEGROUPID = null;
}else{
	finder_tUniqRow_2.PRODUCTCOVERAGEGROUPID = copyOfsortie_product.PRODUCTCOVERAGEGROUPID.toLowerCase();
}
if(copyOfsortie_product.PRODUCTNUMBER == null){
	finder_tUniqRow_2.PRODUCTNUMBER = null;
}else{
	finder_tUniqRow_2.PRODUCTNUMBER = copyOfsortie_product.PRODUCTNUMBER.toLowerCase();
}
if(copyOfsortie_product.PRODUCTSEARCHNAME == null){
	finder_tUniqRow_2.PRODUCTSEARCHNAME = null;
}else{
	finder_tUniqRow_2.PRODUCTSEARCHNAME = copyOfsortie_product.PRODUCTSEARCHNAME.toLowerCase();
}
if(copyOfsortie_product.PRODUCTSUBTYPE == null){
	finder_tUniqRow_2.PRODUCTSUBTYPE = null;
}else{
	finder_tUniqRow_2.PRODUCTSUBTYPE = copyOfsortie_product.PRODUCTSUBTYPE.toLowerCase();
}
if(copyOfsortie_product.PRODUCTTYPE == null){
	finder_tUniqRow_2.PRODUCTTYPE = null;
}else{
	finder_tUniqRow_2.PRODUCTTYPE = copyOfsortie_product.PRODUCTTYPE.toLowerCase();
}
if(copyOfsortie_product.SEARCHNAME == null){
	finder_tUniqRow_2.SEARCHNAME = null;
}else{
	finder_tUniqRow_2.SEARCHNAME = copyOfsortie_product.SEARCHNAME.toLowerCase();
}	
finder_tUniqRow_2.hashCodeDirty = true;
if (!keystUniqRow_2.contains(finder_tUniqRow_2)) {
		KeyStruct_tUniqRow_2 new_tUniqRow_2 = new KeyStruct_tUniqRow_2();

		
if(copyOfsortie_product.ITEMNUMBER == null){
	new_tUniqRow_2.ITEMNUMBER = null;
}else{
	new_tUniqRow_2.ITEMNUMBER = copyOfsortie_product.ITEMNUMBER.toLowerCase();
}
if(copyOfsortie_product.ORIGINCOUNTRYREGIONID == null){
	new_tUniqRow_2.ORIGINCOUNTRYREGIONID = null;
}else{
	new_tUniqRow_2.ORIGINCOUNTRYREGIONID = copyOfsortie_product.ORIGINCOUNTRYREGIONID.toLowerCase();
}
if(copyOfsortie_product.PRODUCTCOVERAGEGROUPID == null){
	new_tUniqRow_2.PRODUCTCOVERAGEGROUPID = null;
}else{
	new_tUniqRow_2.PRODUCTCOVERAGEGROUPID = copyOfsortie_product.PRODUCTCOVERAGEGROUPID.toLowerCase();
}
if(copyOfsortie_product.PRODUCTNUMBER == null){
	new_tUniqRow_2.PRODUCTNUMBER = null;
}else{
	new_tUniqRow_2.PRODUCTNUMBER = copyOfsortie_product.PRODUCTNUMBER.toLowerCase();
}
if(copyOfsortie_product.PRODUCTSEARCHNAME == null){
	new_tUniqRow_2.PRODUCTSEARCHNAME = null;
}else{
	new_tUniqRow_2.PRODUCTSEARCHNAME = copyOfsortie_product.PRODUCTSEARCHNAME.toLowerCase();
}
if(copyOfsortie_product.PRODUCTSUBTYPE == null){
	new_tUniqRow_2.PRODUCTSUBTYPE = null;
}else{
	new_tUniqRow_2.PRODUCTSUBTYPE = copyOfsortie_product.PRODUCTSUBTYPE.toLowerCase();
}
if(copyOfsortie_product.PRODUCTTYPE == null){
	new_tUniqRow_2.PRODUCTTYPE = null;
}else{
	new_tUniqRow_2.PRODUCTTYPE = copyOfsortie_product.PRODUCTTYPE.toLowerCase();
}
if(copyOfsortie_product.SEARCHNAME == null){
	new_tUniqRow_2.SEARCHNAME = null;
}else{
	new_tUniqRow_2.SEARCHNAME = copyOfsortie_product.SEARCHNAME.toLowerCase();
}
		
		keystUniqRow_2.add(new_tUniqRow_2);if(row8 == null){ 
	
	row8 = new row8Struct();
}row8.ITEMNUMBER = copyOfsortie_product.ITEMNUMBER;			row8.ORIGINCOUNTRYREGIONID = copyOfsortie_product.ORIGINCOUNTRYREGIONID;			row8.PRODUCTCOVERAGEGROUPID = copyOfsortie_product.PRODUCTCOVERAGEGROUPID;			row8.PRODUCTNUMBER = copyOfsortie_product.PRODUCTNUMBER;			row8.PRODUCTSEARCHNAME = copyOfsortie_product.PRODUCTSEARCHNAME;			row8.PRODUCTSUBTYPE = copyOfsortie_product.PRODUCTSUBTYPE;			row8.PRODUCTTYPE = copyOfsortie_product.PRODUCTTYPE;			row8.SEARCHNAME = copyOfsortie_product.SEARCHNAME;			row8.SPLWMSLOCATIONID = copyOfsortie_product.SPLWMSLOCATIONID;			row8.ISUNITCOSTPRODUCTVARIANTSPECIFIC = copyOfsortie_product.ISUNITCOSTPRODUCTVARIANTSPECIFIC;			row8.GPLMEMO = copyOfsortie_product.GPLMEMO;			row8.DEFAULTLEDGERDIMENSIONDISPLAYVALUE = copyOfsortie_product.DEFAULTLEDGERDIMENSIONDISPLAYVALUE;					
		nb_uniques_tUniqRow_2++;
	} else {
	  nb_duplicates_tUniqRow_2++;
	}

 


	tos_count_tUniqRow_2++;

/**
 * [tUniqRow_2 main ] stop
 */
	
	/**
	 * [tUniqRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

 



/**
 * [tUniqRow_2 process_data_begin ] stop
 */
// Start of branch "row8"
if(row8 != null) { 



	
	/**
	 * [tFileOutputExcel_2 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row8");
					}
					

				xlsxTool_tFileOutputExcel_2.addRow();
									   				
	    				if(row8.ITEMNUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row8.ITEMNUMBER));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row8.ORIGINCOUNTRYREGIONID != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row8.ORIGINCOUNTRYREGIONID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row8.PRODUCTCOVERAGEGROUPID != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row8.PRODUCTCOVERAGEGROUPID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row8.PRODUCTNUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row8.PRODUCTNUMBER));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row8.PRODUCTSEARCHNAME != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row8.PRODUCTSEARCHNAME));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row8.PRODUCTSUBTYPE != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row8.PRODUCTSUBTYPE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row8.PRODUCTTYPE != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row8.PRODUCTTYPE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row8.SEARCHNAME != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row8.SEARCHNAME));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row8.SPLWMSLOCATIONID != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row8.SPLWMSLOCATIONID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row8.ISUNITCOSTPRODUCTVARIANTSPECIFIC != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row8.ISUNITCOSTPRODUCTVARIANTSPECIFIC));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row8.GPLMEMO != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row8.GPLMEMO));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row8.DEFAULTLEDGERDIMENSIONDISPLAYVALUE != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row8.DEFAULTLEDGERDIMENSIONDISPLAYVALUE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_2++;
				
 


	tos_count_tFileOutputExcel_2++;

/**
 * [tFileOutputExcel_2 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_2";

	

 



/**
 * [tFileOutputExcel_2 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_2";

	

 



/**
 * [tFileOutputExcel_2 process_data_end ] stop
 */

} // End of branch "row8"




	
	/**
	 * [tUniqRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

 



/**
 * [tUniqRow_2 process_data_end ] stop
 */

} // End of branch "copyOfsortie_product"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 process_data_end ] stop
 */

} // End of branch "sortie_full"




// Start of branch "sortie_product"
if(sortie_product != null) { 



	
	/**
	 * [tLogRow_3 main ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_product");
					}
					

 
     row4 = sortie_product;


	tos_count_tLogRow_3++;

/**
 * [tLogRow_3 main ] stop
 */
	
	/**
	 * [tLogRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 process_data_begin ] stop
 */

	
	/**
	 * [tUniqRow_1 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row4");
					}
					
row5 = null;			
if(row4.PRODUCTSEARCHNAME == null){
	finder_tUniqRow_1.PRODUCTSEARCHNAME = null;
}else{
	finder_tUniqRow_1.PRODUCTSEARCHNAME = row4.PRODUCTSEARCHNAME.toLowerCase();
}
if(row4.PRODUCTNUMBER == null){
	finder_tUniqRow_1.PRODUCTNUMBER = null;
}else{
	finder_tUniqRow_1.PRODUCTNUMBER = row4.PRODUCTNUMBER.toLowerCase();
}	
finder_tUniqRow_1.hashCodeDirty = true;
if (!keystUniqRow_1.contains(finder_tUniqRow_1)) {
		KeyStruct_tUniqRow_1 new_tUniqRow_1 = new KeyStruct_tUniqRow_1();

		
if(row4.PRODUCTSEARCHNAME == null){
	new_tUniqRow_1.PRODUCTSEARCHNAME = null;
}else{
	new_tUniqRow_1.PRODUCTSEARCHNAME = row4.PRODUCTSEARCHNAME.toLowerCase();
}
if(row4.PRODUCTNUMBER == null){
	new_tUniqRow_1.PRODUCTNUMBER = null;
}else{
	new_tUniqRow_1.PRODUCTNUMBER = row4.PRODUCTNUMBER.toLowerCase();
}
		
		keystUniqRow_1.add(new_tUniqRow_1);if(row5 == null){ 
	
	row5 = new row5Struct();
}row5.PRODUCTSEARCHNAME = row4.PRODUCTSEARCHNAME;			row5.PRODUCTDESCRIPTION = row4.PRODUCTDESCRIPTION;			row5.PRODUCTNAME = row4.PRODUCTNAME;			row5.PRODUCTNUMBER = row4.PRODUCTNUMBER;			row5.RETAILPRODUCTCATEGORYNAME = row4.RETAILPRODUCTCATEGORYNAME;			row5.PRODUCTSUBTYPE = row4.PRODUCTSUBTYPE;			row5.PRODUCTTYPE = row4.PRODUCTTYPE;			row5.KRFBRANDID = row4.KRFBRANDID;					
		nb_uniques_tUniqRow_1++;
	} else {
	  nb_duplicates_tUniqRow_1++;
	}

 


	tos_count_tUniqRow_1++;

/**
 * [tUniqRow_1 main ] stop
 */
	
	/**
	 * [tUniqRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 process_data_begin ] stop
 */
// Start of branch "row5"
if(row5 != null) { 



	
	/**
	 * [tFileOutputExcel_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row5");
					}
					

				xlsxTool_tFileOutputExcel_1.addRow();
									   				
	    				if(row5.PRODUCTSEARCHNAME != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row5.PRODUCTSEARCHNAME));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row5.PRODUCTDESCRIPTION != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row5.PRODUCTDESCRIPTION));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row5.PRODUCTNAME != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row5.PRODUCTNAME));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row5.PRODUCTNUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row5.PRODUCTNUMBER));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row5.RETAILPRODUCTCATEGORYNAME != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row5.RETAILPRODUCTCATEGORYNAME));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row5.PRODUCTSUBTYPE != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row5.PRODUCTSUBTYPE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row5.PRODUCTTYPE != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row5.PRODUCTTYPE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row5.KRFBRANDID != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row5.KRFBRANDID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_1++;
				
 


	tos_count_tFileOutputExcel_1++;

/**
 * [tFileOutputExcel_1 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

 



/**
 * [tFileOutputExcel_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

 



/**
 * [tFileOutputExcel_1 process_data_end ] stop
 */

} // End of branch "row5"




	
	/**
	 * [tUniqRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 process_data_end ] stop
 */

} // End of branch "sortie_product"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */

} // End of branch "sortie_Excel"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_end ] stop
 */

} // End of branch "row7"




	
	/**
	 * [tFilterRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";

	

 



/**
 * [tFilterRow_2 process_data_end ] stop
 */

} // End of branch "sortie_Excel1"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_5 end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

	}
}finally{
	if (rs_tDBInput_5 != null) {
		rs_tDBInput_5.close();
	}
	if (stmt_tDBInput_5 != null) {
		stmt_tDBInput_5.close();
	}
		if(conn_tDBInput_5 != null && !conn_tDBInput_5.isClosed()) {
			
			conn_tDBInput_5.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_5_NB_LINE",nb_line_tDBInput_5);

 

ok_Hash.put("tDBInput_5", true);
end_Hash.put("tDBInput_5", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tWarn_1Process(globalMap);



/**
 * [tDBInput_5 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tFilterRow_2 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";

	
    globalMap.put("tFilterRow_2_NB_LINE", nb_line_tFilterRow_2);
    globalMap.put("tFilterRow_2_NB_LINE_OK", nb_line_ok_tFilterRow_2);
    globalMap.put("tFilterRow_2_NB_LINE_REJECT", nb_line_reject_tFilterRow_2);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_Excel1");
			  	}
			  	
 

ok_Hash.put("tFilterRow_2", true);
end_Hash.put("tFilterRow_2", System.currentTimeMillis());




/**
 * [tFilterRow_2 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_copyOfcopyOfsortie_fashion != null) {
						tHash_Lookup_copyOfcopyOfsortie_fashion.endGet();
					}
					globalMap.remove( "tHash_Lookup_copyOfcopyOfsortie_fashion" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7");
			  	}
			  	
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_Excel");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tLogRow_2 end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_full");
			  	}
			  	
 

ok_Hash.put("tLogRow_2", true);
end_Hash.put("tLogRow_2", System.currentTimeMillis());




/**
 * [tLogRow_2 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tMap_5 end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfsortie_full");
			  	}
			  	
 

ok_Hash.put("tMap_5", true);
end_Hash.put("tMap_5", System.currentTimeMillis());




/**
 * [tMap_5 end ] stop
 */

	
	/**
	 * [tMap_6 end ] start
	 */

	

	
	
	currentComponent="tMap_6";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfsortie_full");
			  	}
			  	
 

ok_Hash.put("tMap_6", true);
end_Hash.put("tMap_6", System.currentTimeMillis());




/**
 * [tMap_6 end ] stop
 */

	
	/**
	 * [tMap_7 end ] start
	 */

	

	
	
	currentComponent="tMap_7";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfcopyOfsortie_full");
			  	}
			  	
 

ok_Hash.put("tMap_7", true);
end_Hash.put("tMap_7", System.currentTimeMillis());




/**
 * [tMap_7 end ] stop
 */

	
	/**
	 * [tMap_8 end ] start
	 */

	

	
	
	currentComponent="tMap_8";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfcopyOfcopyOfsortie_full");
			  	}
			  	
 

ok_Hash.put("tMap_8", true);
end_Hash.put("tMap_8", System.currentTimeMillis());




/**
 * [tMap_8 end ] stop
 */

	
	/**
	 * [tMap_9 end ] start
	 */

	

	
	
	currentComponent="tMap_9";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfcopyOfcopyOfcopyOfsortie_full");
			  	}
			  	
 

ok_Hash.put("tMap_9", true);
end_Hash.put("tMap_9", System.currentTimeMillis());




/**
 * [tMap_9 end ] stop
 */

	
	/**
	 * [tMap_10 end ] start
	 */

	

	
	
	currentComponent="tMap_10";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full");
			  	}
			  	
 

ok_Hash.put("tMap_10", true);
end_Hash.put("tMap_10", System.currentTimeMillis());




/**
 * [tMap_10 end ] stop
 */

	
	/**
	 * [tMap_11 end ] start
	 */

	

	
	
	currentComponent="tMap_11";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full");
			  	}
			  	
 

ok_Hash.put("tMap_11", true);
end_Hash.put("tMap_11", System.currentTimeMillis());




/**
 * [tMap_11 end ] stop
 */

	
	/**
	 * [tMap_12 end ] start
	 */

	

	
	
	currentComponent="tMap_12";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full");
			  	}
			  	
 

ok_Hash.put("tMap_12", true);
end_Hash.put("tMap_12", System.currentTimeMillis());




/**
 * [tMap_12 end ] stop
 */

	
	/**
	 * [tMap_13 end ] start
	 */

	

	
	
	currentComponent="tMap_13";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full");
			  	}
			  	
 

ok_Hash.put("tMap_13", true);
end_Hash.put("tMap_13", System.currentTimeMillis());




/**
 * [tMap_13 end ] stop
 */

	
	/**
	 * [tMap_14 end ] start
	 */

	

	
	
	currentComponent="tMap_14";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_full_");
			  	}
			  	
 

ok_Hash.put("tMap_14", true);
end_Hash.put("tMap_14", System.currentTimeMillis());




/**
 * [tMap_14 end ] stop
 */

	
	/**
	 * [tMap_15 end ] start
	 */

	

	
	
	currentComponent="tMap_15";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_full_size");
			  	}
			  	
 

ok_Hash.put("tMap_15", true);
end_Hash.put("tMap_15", System.currentTimeMillis());




/**
 * [tMap_15 end ] stop
 */

	
	/**
	 * [tMap_16 end ] start
	 */

	

	
	
	currentComponent="tMap_16";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_full_fits");
			  	}
			  	
 

ok_Hash.put("tMap_16", true);
end_Hash.put("tMap_16", System.currentTimeMillis());




/**
 * [tMap_16 end ] stop
 */

	
	/**
	 * [tMap_17 end ] start
	 */

	

	
	
	currentComponent="tMap_17";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_full_product_variant");
			  	}
			  	
 

ok_Hash.put("tMap_17", true);
end_Hash.put("tMap_17", System.currentTimeMillis());




/**
 * [tMap_17 end ] stop
 */

	
	/**
	 * [tUniqRow_15 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_15";

	

globalMap.put("tUniqRow_15_NB_UNIQUES",nb_uniques_tUniqRow_15);
globalMap.put("tUniqRow_15_NB_DUPLICATES",nb_duplicates_tUniqRow_15);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_released_product_variant");
			  	}
			  	
 

ok_Hash.put("tUniqRow_15", true);
end_Hash.put("tUniqRow_15", System.currentTimeMillis());




/**
 * [tUniqRow_15 end ] stop
 */

	
	/**
	 * [tHashOutput_7 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_7";

	
globalMap.put("tHashOutput_7_NB_LINE", nb_line_tHashOutput_7);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row30");
			  	}
			  	
 

ok_Hash.put("tHashOutput_7", true);
end_Hash.put("tHashOutput_7", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk6", 0, "ok");
				}
				tHashInput_7Process(globalMap);



/**
 * [tHashOutput_7 end ] stop
 */







	
	/**
	 * [tMap_18 end ] start
	 */

	

	
	
	currentComponent="tMap_18";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row49 != null) {
						tHash_Lookup_row49.endGet();
					}
					globalMap.remove( "tHash_Lookup_row49" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_full_varian");
			  	}
			  	
 

ok_Hash.put("tMap_18", true);
end_Hash.put("tMap_18", System.currentTimeMillis());




/**
 * [tMap_18 end ] stop
 */

	
	/**
	 * [tMap_19 end ] start
	 */

	

	
	
	currentComponent="tMap_19";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfsortie_released_product_variant");
			  	}
			  	
 

ok_Hash.put("tMap_19", true);
end_Hash.put("tMap_19", System.currentTimeMillis());




/**
 * [tMap_19 end ] stop
 */

	
	/**
	 * [tUniqRow_17 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_17";

	

globalMap.put("tUniqRow_17_NB_UNIQUES",nb_uniques_tUniqRow_17);
globalMap.put("tUniqRow_17_NB_DUPLICATES",nb_duplicates_tUniqRow_17);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_barcode");
			  	}
			  	
 

ok_Hash.put("tUniqRow_17", true);
end_Hash.put("tUniqRow_17", System.currentTimeMillis());




/**
 * [tUniqRow_17 end ] stop
 */

	
	/**
	 * [tFilterRow_4 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_4";

	
    globalMap.put("tFilterRow_4_NB_LINE", nb_line_tFilterRow_4);
    globalMap.put("tFilterRow_4_NB_LINE_OK", nb_line_ok_tFilterRow_4);
    globalMap.put("tFilterRow_4_NB_LINE_REJECT", nb_line_reject_tFilterRow_4);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row33");
			  	}
			  	
 

ok_Hash.put("tFilterRow_4", true);
end_Hash.put("tFilterRow_4", System.currentTimeMillis());




/**
 * [tFilterRow_4 end ] stop
 */

	
	/**
	 * [tHashOutput_10 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_10";

	
globalMap.put("tHashOutput_10_NB_LINE", nb_line_tHashOutput_10);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row37");
			  	}
			  	
 

ok_Hash.put("tHashOutput_10", true);
end_Hash.put("tHashOutput_10", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tHashInput_10Process(globalMap);



/**
 * [tHashOutput_10 end ] stop
 */










	
	/**
	 * [tMap_20 end ] start
	 */

	

	
	
	currentComponent="tMap_20";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_full_barcode_1");
			  	}
			  	
 

ok_Hash.put("tMap_20", true);
end_Hash.put("tMap_20", System.currentTimeMillis());




/**
 * [tMap_20 end ] stop
 */

	
	/**
	 * [tMap_21 end ] start
	 */

	

	
	
	currentComponent="tMap_21";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row16 != null) {
						tHash_Lookup_row16.endGet();
					}
					globalMap.remove( "tHash_Lookup_row16" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full");
			  	}
			  	
 

ok_Hash.put("tMap_21", true);
end_Hash.put("tMap_21", System.currentTimeMillis());




/**
 * [tMap_21 end ] stop
 */

	
	/**
	 * [tMap_26 end ] start
	 */

	

	
	
	currentComponent="tMap_26";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_full_barcode");
			  	}
			  	
 

ok_Hash.put("tMap_26", true);
end_Hash.put("tMap_26", System.currentTimeMillis());




/**
 * [tMap_26 end ] stop
 */

	
	/**
	 * [tUniqRow_25 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_25";

	

globalMap.put("tUniqRow_25_NB_UNIQUES",nb_uniques_tUniqRow_25);
globalMap.put("tUniqRow_25_NB_DUPLICATES",nb_duplicates_tUniqRow_25);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product");
			  	}
			  	
 

ok_Hash.put("tUniqRow_25", true);
end_Hash.put("tUniqRow_25", System.currentTimeMillis());




/**
 * [tUniqRow_25 end ] stop
 */

	
	/**
	 * [tFilterRow_1 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	
    globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
    globalMap.put("tFilterRow_1_NB_LINE_OK", nb_line_ok_tFilterRow_1);
    globalMap.put("tFilterRow_1_NB_LINE_REJECT", nb_line_reject_tFilterRow_1);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row31");
			  	}
			  	
 

ok_Hash.put("tFilterRow_1", true);
end_Hash.put("tFilterRow_1", System.currentTimeMillis());




/**
 * [tFilterRow_1 end ] stop
 */

	
	/**
	 * [tHashOutput_12 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_12";

	
globalMap.put("tHashOutput_12_NB_LINE", nb_line_tHashOutput_12);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row48");
			  	}
			  	
 

ok_Hash.put("tHashOutput_12", true);
end_Hash.put("tHashOutput_12", System.currentTimeMillis());




/**
 * [tHashOutput_12 end ] stop
 */













	
	/**
	 * [tUniqRow_20 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_20";

	

globalMap.put("tUniqRow_20_NB_UNIQUES",nb_uniques_tUniqRow_20);
globalMap.put("tUniqRow_20_NB_DUPLICATES",nb_duplicates_tUniqRow_20);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfsortie_color");
			  	}
			  	
 

ok_Hash.put("tUniqRow_20", true);
end_Hash.put("tUniqRow_20", System.currentTimeMillis());




/**
 * [tUniqRow_20 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_11 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_11";

	

	
	
	
			xlsxTool_tFileOutputExcel_11.writeExcel(fileName_tFileOutputExcel_11,true);
	
		
			nb_line_tFileOutputExcel_11 = nb_line_tFileOutputExcel_11 -1;
		
		globalMap.put("tFileOutputExcel_11_NB_LINE",nb_line_tFileOutputExcel_11);
		
		

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row17");
			  	}
			  	
 

ok_Hash.put("tFileOutputExcel_11", true);
end_Hash.put("tFileOutputExcel_11", System.currentTimeMillis());




/**
 * [tFileOutputExcel_11 end ] stop
 */










	
	/**
	 * [tUniqRow_18 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_18";

	

globalMap.put("tUniqRow_18_NB_UNIQUES",nb_uniques_tUniqRow_18);
globalMap.put("tUniqRow_18_NB_DUPLICATES",nb_duplicates_tUniqRow_18);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product");
			  	}
			  	
 

ok_Hash.put("tUniqRow_18", true);
end_Hash.put("tUniqRow_18", System.currentTimeMillis());




/**
 * [tUniqRow_18 end ] stop
 */

	
	/**
	 * [tHashOutput_9 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_9";

	
globalMap.put("tHashOutput_9_NB_LINE", nb_line_tHashOutput_9);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row34");
			  	}
			  	
 

ok_Hash.put("tHashOutput_9", true);
end_Hash.put("tHashOutput_9", System.currentTimeMillis());




/**
 * [tHashOutput_9 end ] stop
 */










	
	/**
	 * [tUniqRow_23 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_23";

	

globalMap.put("tUniqRow_23_NB_UNIQUES",nb_uniques_tUniqRow_23);
globalMap.put("tUniqRow_23_NB_DUPLICATES",nb_duplicates_tUniqRow_23);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_EAN");
			  	}
			  	
 

ok_Hash.put("tUniqRow_23", true);
end_Hash.put("tUniqRow_23", System.currentTimeMillis());




/**
 * [tUniqRow_23 end ] stop
 */

	
	/**
	 * [tFilterRow_5 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_5";

	
    globalMap.put("tFilterRow_5_NB_LINE", nb_line_tFilterRow_5);
    globalMap.put("tFilterRow_5_NB_LINE_OK", nb_line_ok_tFilterRow_5);
    globalMap.put("tFilterRow_5_NB_LINE_REJECT", nb_line_reject_tFilterRow_5);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row39");
			  	}
			  	
 

ok_Hash.put("tFilterRow_5", true);
end_Hash.put("tFilterRow_5", System.currentTimeMillis());




/**
 * [tFilterRow_5 end ] stop
 */

	
	/**
	 * [tHashOutput_11 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_11";

	
globalMap.put("tHashOutput_11_NB_LINE", nb_line_tHashOutput_11);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row40");
			  	}
			  	
 

ok_Hash.put("tHashOutput_11", true);
end_Hash.put("tHashOutput_11", System.currentTimeMillis());




/**
 * [tHashOutput_11 end ] stop
 */













	
	/**
	 * [tUniqRow_16 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_16";

	

globalMap.put("tUniqRow_16_NB_UNIQUES",nb_uniques_tUniqRow_16);
globalMap.put("tUniqRow_16_NB_DUPLICATES",nb_duplicates_tUniqRow_16);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_product_status");
			  	}
			  	
 

ok_Hash.put("tUniqRow_16", true);
end_Hash.put("tUniqRow_16", System.currentTimeMillis());




/**
 * [tUniqRow_16 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_9 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_9";

	

	
	
	
			xlsxTool_tFileOutputExcel_9.writeExcel(fileName_tFileOutputExcel_9,true);
	
		
			nb_line_tFileOutputExcel_9 = nb_line_tFileOutputExcel_9 -1;
		
		globalMap.put("tFileOutputExcel_9_NB_LINE",nb_line_tFileOutputExcel_9);
		
		

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row32");
			  	}
			  	
 

ok_Hash.put("tFileOutputExcel_9", true);
end_Hash.put("tFileOutputExcel_9", System.currentTimeMillis());




/**
 * [tFileOutputExcel_9 end ] stop
 */













	
	/**
	 * [tUniqRow_14 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_14";

	

globalMap.put("tUniqRow_14_NB_UNIQUES",nb_uniques_tUniqRow_14);
globalMap.put("tUniqRow_14_NB_DUPLICATES",nb_duplicates_tUniqRow_14);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_product_variant");
			  	}
			  	
 

ok_Hash.put("tUniqRow_14", true);
end_Hash.put("tUniqRow_14", System.currentTimeMillis());




/**
 * [tUniqRow_14 end ] stop
 */

	
	/**
	 * [tHashOutput_4 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";

	
globalMap.put("tHashOutput_4_NB_LINE", nb_line_tHashOutput_4);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row18");
			  	}
			  	
 

ok_Hash.put("tHashOutput_4", true);
end_Hash.put("tHashOutput_4", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk8", 0, "ok");
				}
				tHashInput_4Process(globalMap);



/**
 * [tHashOutput_4 end ] stop
 */










	
	/**
	 * [tUniqRow_13 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_13";

	

globalMap.put("tUniqRow_13_NB_UNIQUES",nb_uniques_tUniqRow_13);
globalMap.put("tUniqRow_13_NB_DUPLICATES",nb_duplicates_tUniqRow_13);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_fits");
			  	}
			  	
 

ok_Hash.put("tUniqRow_13", true);
end_Hash.put("tUniqRow_13", System.currentTimeMillis());




/**
 * [tUniqRow_13 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_6 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_6";

	

	
	
	
			xlsxTool_tFileOutputExcel_6.writeExcel(fileName_tFileOutputExcel_6,true);
	
		
			nb_line_tFileOutputExcel_6 = nb_line_tFileOutputExcel_6 -1;
		
		globalMap.put("tFileOutputExcel_6_NB_LINE",nb_line_tFileOutputExcel_6);
		
		

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row29");
			  	}
			  	
 

ok_Hash.put("tFileOutputExcel_6", true);
end_Hash.put("tFileOutputExcel_6", System.currentTimeMillis());




/**
 * [tFileOutputExcel_6 end ] stop
 */







	
	/**
	 * [tHashOutput_5 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";

	
globalMap.put("tHashOutput_5_NB_LINE", nb_line_tHashOutput_5);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_Ref_Description");
			  	}
			  	
 

ok_Hash.put("tHashOutput_5", true);
end_Hash.put("tHashOutput_5", System.currentTimeMillis());




/**
 * [tHashOutput_5 end ] stop
 */




	
	/**
	 * [tHashOutput_13 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_13";

	
globalMap.put("tHashOutput_13_NB_LINE", nb_line_tHashOutput_13);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_hashoutput");
			  	}
			  	
 

ok_Hash.put("tHashOutput_13", true);
end_Hash.put("tHashOutput_13", System.currentTimeMillis());




/**
 * [tHashOutput_13 end ] stop
 */







	
	/**
	 * [tUniqRow_12 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_12";

	

globalMap.put("tUniqRow_12_NB_UNIQUES",nb_uniques_tUniqRow_12);
globalMap.put("tUniqRow_12_NB_DUPLICATES",nb_duplicates_tUniqRow_12);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_size");
			  	}
			  	
 

ok_Hash.put("tUniqRow_12", true);
end_Hash.put("tUniqRow_12", System.currentTimeMillis());




/**
 * [tUniqRow_12 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_5 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_5";

	

	
	
	
			xlsxTool_tFileOutputExcel_5.writeExcel(fileName_tFileOutputExcel_5,true);
	
		
			nb_line_tFileOutputExcel_5 = nb_line_tFileOutputExcel_5 -1;
		
		globalMap.put("tFileOutputExcel_5_NB_LINE",nb_line_tFileOutputExcel_5);
		
		

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row28");
			  	}
			  	
 

ok_Hash.put("tFileOutputExcel_5", true);
end_Hash.put("tFileOutputExcel_5", System.currentTimeMillis());




/**
 * [tFileOutputExcel_5 end ] stop
 */










	
	/**
	 * [tUniqRow_11 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_11";

	

globalMap.put("tUniqRow_11_NB_UNIQUES",nb_uniques_tUniqRow_11);
globalMap.put("tUniqRow_11_NB_DUPLICATES",nb_duplicates_tUniqRow_11);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_color");
			  	}
			  	
 

ok_Hash.put("tUniqRow_11", true);
end_Hash.put("tUniqRow_11", System.currentTimeMillis());




/**
 * [tUniqRow_11 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_4 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_4";

	

	
	
	
			xlsxTool_tFileOutputExcel_4.writeExcel(fileName_tFileOutputExcel_4,true);
	
		
			nb_line_tFileOutputExcel_4 = nb_line_tFileOutputExcel_4 -1;
		
		globalMap.put("tFileOutputExcel_4_NB_LINE",nb_line_tFileOutputExcel_4);
		
		

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row27");
			  	}
			  	
 

ok_Hash.put("tFileOutputExcel_4", true);
end_Hash.put("tFileOutputExcel_4", System.currentTimeMillis());




/**
 * [tFileOutputExcel_4 end ] stop
 */










	
	/**
	 * [tUniqRow_10 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_10";

	

globalMap.put("tUniqRow_10_NB_UNIQUES",nb_uniques_tUniqRow_10);
globalMap.put("tUniqRow_10_NB_DUPLICATES",nb_duplicates_tUniqRow_10);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product");
			  	}
			  	
 

ok_Hash.put("tUniqRow_10", true);
end_Hash.put("tUniqRow_10", System.currentTimeMillis());




/**
 * [tUniqRow_10 end ] stop
 */

	
	/**
	 * [tFilterRow_3 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_3";

	
    globalMap.put("tFilterRow_3_NB_LINE", nb_line_tFilterRow_3);
    globalMap.put("tFilterRow_3_NB_LINE_OK", nb_line_ok_tFilterRow_3);
    globalMap.put("tFilterRow_3_NB_LINE_REJECT", nb_line_reject_tFilterRow_3);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Main3");
			  	}
			  	
 

ok_Hash.put("tFilterRow_3", true);
end_Hash.put("tFilterRow_3", System.currentTimeMillis());




/**
 * [tFilterRow_3 end ] stop
 */

	
	/**
	 * [tMap_23 end ] start
	 */

	

	
	
	currentComponent="tMap_23";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row25");
			  	}
			  	
 

ok_Hash.put("tMap_23", true);
end_Hash.put("tMap_23", System.currentTimeMillis());




/**
 * [tMap_23 end ] stop
 */

	
	/**
	 * [tHashOutput_8 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_8";

	
globalMap.put("tHashOutput_8_NB_LINE", nb_line_tHashOutput_8);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_attribute");
			  	}
			  	
 

ok_Hash.put("tHashOutput_8", true);
end_Hash.put("tHashOutput_8", System.currentTimeMillis());




/**
 * [tHashOutput_8 end ] stop
 */




	
	/**
	 * [tUniqRow_22 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_22";

	

globalMap.put("tUniqRow_22_NB_UNIQUES",nb_uniques_tUniqRow_22);
globalMap.put("tUniqRow_22_NB_DUPLICATES",nb_duplicates_tUniqRow_22);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_defaultordersettings");
			  	}
			  	
 

ok_Hash.put("tUniqRow_22", true);
end_Hash.put("tUniqRow_22", System.currentTimeMillis());




/**
 * [tUniqRow_22 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_13 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_13";

	

	
	
	
			xlsxTool_tFileOutputExcel_13.writeExcel(fileName_tFileOutputExcel_13,true);
	
		
			nb_line_tFileOutputExcel_13 = nb_line_tFileOutputExcel_13 -1;
		
		globalMap.put("tFileOutputExcel_13_NB_LINE",nb_line_tFileOutputExcel_13);
		
		

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row36");
			  	}
			  	
 

ok_Hash.put("tFileOutputExcel_13", true);
end_Hash.put("tFileOutputExcel_13", System.currentTimeMillis());




/**
 * [tFileOutputExcel_13 end ] stop
 */



















	
	/**
	 * [tUniqRow_9 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_9";

	

globalMap.put("tUniqRow_9_NB_UNIQUES",nb_uniques_tUniqRow_9);
globalMap.put("tUniqRow_9_NB_DUPLICATES",nb_duplicates_tUniqRow_9);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product");
			  	}
			  	
 

ok_Hash.put("tUniqRow_9", true);
end_Hash.put("tUniqRow_9", System.currentTimeMillis());




/**
 * [tUniqRow_9 end ] stop
 */







	
	/**
	 * [tUniqRow_8 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_8";

	

globalMap.put("tUniqRow_8_NB_UNIQUES",nb_uniques_tUniqRow_8);
globalMap.put("tUniqRow_8_NB_DUPLICATES",nb_duplicates_tUniqRow_8);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product");
			  	}
			  	
 

ok_Hash.put("tUniqRow_8", true);
end_Hash.put("tUniqRow_8", System.currentTimeMillis());




/**
 * [tUniqRow_8 end ] stop
 */

	
	/**
	 * [tHashOutput_6 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_6";

	
globalMap.put("tHashOutput_6_NB_LINE", nb_line_tHashOutput_6);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row20");
			  	}
			  	
 

ok_Hash.put("tHashOutput_6", true);
end_Hash.put("tHashOutput_6", System.currentTimeMillis());




/**
 * [tHashOutput_6 end ] stop
 */










	
	/**
	 * [tUniqRow_7 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_7";

	

globalMap.put("tUniqRow_7_NB_UNIQUES",nb_uniques_tUniqRow_7);
globalMap.put("tUniqRow_7_NB_DUPLICATES",nb_duplicates_tUniqRow_7);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product");
			  	}
			  	
 

ok_Hash.put("tUniqRow_7", true);
end_Hash.put("tUniqRow_7", System.currentTimeMillis());




/**
 * [tUniqRow_7 end ] stop
 */







	
	/**
	 * [tUniqRow_6 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_6";

	

globalMap.put("tUniqRow_6_NB_UNIQUES",nb_uniques_tUniqRow_6);
globalMap.put("tUniqRow_6_NB_DUPLICATES",nb_duplicates_tUniqRow_6);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfcopyOfcopyOfcopyOfsortie_product");
			  	}
			  	
 

ok_Hash.put("tUniqRow_6", true);
end_Hash.put("tUniqRow_6", System.currentTimeMillis());




/**
 * [tUniqRow_6 end ] stop
 */







	
	/**
	 * [tUniqRow_5 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_5";

	

globalMap.put("tUniqRow_5_NB_UNIQUES",nb_uniques_tUniqRow_5);
globalMap.put("tUniqRow_5_NB_DUPLICATES",nb_duplicates_tUniqRow_5);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfcopyOfcopyOfsortie_product");
			  	}
			  	
 

ok_Hash.put("tUniqRow_5", true);
end_Hash.put("tUniqRow_5", System.currentTimeMillis());




/**
 * [tUniqRow_5 end ] stop
 */

	
	/**
	 * [tHashOutput_3 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";

	
globalMap.put("tHashOutput_3_NB_LINE", nb_line_tHashOutput_3);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row14");
			  	}
			  	
 

ok_Hash.put("tHashOutput_3", true);
end_Hash.put("tHashOutput_3", System.currentTimeMillis());




/**
 * [tHashOutput_3 end ] stop
 */










	
	/**
	 * [tUniqRow_4 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_4";

	

globalMap.put("tUniqRow_4_NB_UNIQUES",nb_uniques_tUniqRow_4);
globalMap.put("tUniqRow_4_NB_DUPLICATES",nb_duplicates_tUniqRow_4);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfcopyOfsortie_product");
			  	}
			  	
 

ok_Hash.put("tUniqRow_4", true);
end_Hash.put("tUniqRow_4", System.currentTimeMillis());




/**
 * [tUniqRow_4 end ] stop
 */

	
	/**
	 * [tHashOutput_2 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";

	
globalMap.put("tHashOutput_2_NB_LINE", nb_line_tHashOutput_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row10");
			  	}
			  	
 

ok_Hash.put("tHashOutput_2", true);
end_Hash.put("tHashOutput_2", System.currentTimeMillis());




/**
 * [tHashOutput_2 end ] stop
 */










	
	/**
	 * [tUniqRow_3 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_3";

	

globalMap.put("tUniqRow_3_NB_UNIQUES",nb_uniques_tUniqRow_3);
globalMap.put("tUniqRow_3_NB_DUPLICATES",nb_duplicates_tUniqRow_3);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfsortie_product");
			  	}
			  	
 

ok_Hash.put("tUniqRow_3", true);
end_Hash.put("tUniqRow_3", System.currentTimeMillis());




/**
 * [tUniqRow_3 end ] stop
 */

	
	/**
	 * [tHashOutput_1 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";

	
globalMap.put("tHashOutput_1_NB_LINE", nb_line_tHashOutput_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Main1");
			  	}
			  	
 

ok_Hash.put("tHashOutput_1", true);
end_Hash.put("tHashOutput_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk7", 0, "ok");
				}
				tHashInput_1Process(globalMap);



/**
 * [tHashOutput_1 end ] stop
 */










	
	/**
	 * [tUniqRow_2 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

globalMap.put("tUniqRow_2_NB_UNIQUES",nb_uniques_tUniqRow_2);
globalMap.put("tUniqRow_2_NB_DUPLICATES",nb_duplicates_tUniqRow_2);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfsortie_product");
			  	}
			  	
 

ok_Hash.put("tUniqRow_2", true);
end_Hash.put("tUniqRow_2", System.currentTimeMillis());




/**
 * [tUniqRow_2 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_2 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_2";

	

	
	
	
			xlsxTool_tFileOutputExcel_2.writeExcel(fileName_tFileOutputExcel_2,true);
	
		
			nb_line_tFileOutputExcel_2 = nb_line_tFileOutputExcel_2 -1;
		
		globalMap.put("tFileOutputExcel_2_NB_LINE",nb_line_tFileOutputExcel_2);
		
		

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 

ok_Hash.put("tFileOutputExcel_2", true);
end_Hash.put("tFileOutputExcel_2", System.currentTimeMillis());




/**
 * [tFileOutputExcel_2 end ] stop
 */













	
	/**
	 * [tLogRow_3 end ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_product");
			  	}
			  	
 

ok_Hash.put("tLogRow_3", true);
end_Hash.put("tLogRow_3", System.currentTimeMillis());




/**
 * [tLogRow_3 end ] stop
 */

	
	/**
	 * [tUniqRow_1 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

globalMap.put("tUniqRow_1_NB_UNIQUES",nb_uniques_tUniqRow_1);
globalMap.put("tUniqRow_1_NB_DUPLICATES",nb_duplicates_tUniqRow_1);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tUniqRow_1", true);
end_Hash.put("tUniqRow_1", System.currentTimeMillis());




/**
 * [tUniqRow_1 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

	
	
	
			xlsxTool_tFileOutputExcel_1.writeExcel(fileName_tFileOutputExcel_1,true);
	
		
			nb_line_tFileOutputExcel_1 = nb_line_tFileOutputExcel_1 -1;
		
		globalMap.put("tFileOutputExcel_1_NB_LINE",nb_line_tFileOutputExcel_1);
		
		

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tFileOutputExcel_1", true);
end_Hash.put("tFileOutputExcel_1", System.currentTimeMillis());




/**
 * [tFileOutputExcel_1 end ] stop
 */





















				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_21"
					     			globalMap.remove("tHash_Lookup_row16"); 
				     			
					     			//free memory for "tMap_18"
					     			globalMap.remove("tHash_Lookup_row49"); 
				     			
					     			//free memory for "tMap_4"
					     			globalMap.remove("tHash_Lookup_copyOfcopyOfsortie_fashion"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_5 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tFilterRow_2 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";

	

 



/**
 * [tFilterRow_2 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tLogRow_2 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tMap_5 finally ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 finally ] stop
 */

	
	/**
	 * [tMap_6 finally ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 finally ] stop
 */

	
	/**
	 * [tMap_7 finally ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 finally ] stop
 */

	
	/**
	 * [tMap_8 finally ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 finally ] stop
 */

	
	/**
	 * [tMap_9 finally ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

 



/**
 * [tMap_9 finally ] stop
 */

	
	/**
	 * [tMap_10 finally ] start
	 */

	

	
	
	currentComponent="tMap_10";

	

 



/**
 * [tMap_10 finally ] stop
 */

	
	/**
	 * [tMap_11 finally ] start
	 */

	

	
	
	currentComponent="tMap_11";

	

 



/**
 * [tMap_11 finally ] stop
 */

	
	/**
	 * [tMap_12 finally ] start
	 */

	

	
	
	currentComponent="tMap_12";

	

 



/**
 * [tMap_12 finally ] stop
 */

	
	/**
	 * [tMap_13 finally ] start
	 */

	

	
	
	currentComponent="tMap_13";

	

 



/**
 * [tMap_13 finally ] stop
 */

	
	/**
	 * [tMap_14 finally ] start
	 */

	

	
	
	currentComponent="tMap_14";

	

 



/**
 * [tMap_14 finally ] stop
 */

	
	/**
	 * [tMap_15 finally ] start
	 */

	

	
	
	currentComponent="tMap_15";

	

 



/**
 * [tMap_15 finally ] stop
 */

	
	/**
	 * [tMap_16 finally ] start
	 */

	

	
	
	currentComponent="tMap_16";

	

 



/**
 * [tMap_16 finally ] stop
 */

	
	/**
	 * [tMap_17 finally ] start
	 */

	

	
	
	currentComponent="tMap_17";

	

 



/**
 * [tMap_17 finally ] stop
 */

	
	/**
	 * [tUniqRow_15 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_15";

	

 



/**
 * [tUniqRow_15 finally ] stop
 */

	
	/**
	 * [tHashOutput_7 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_7";

	

 



/**
 * [tHashOutput_7 finally ] stop
 */







	
	/**
	 * [tMap_18 finally ] start
	 */

	

	
	
	currentComponent="tMap_18";

	

 



/**
 * [tMap_18 finally ] stop
 */

	
	/**
	 * [tMap_19 finally ] start
	 */

	

	
	
	currentComponent="tMap_19";

	

 



/**
 * [tMap_19 finally ] stop
 */

	
	/**
	 * [tUniqRow_17 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_17";

	

 



/**
 * [tUniqRow_17 finally ] stop
 */

	
	/**
	 * [tFilterRow_4 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_4";

	

 



/**
 * [tFilterRow_4 finally ] stop
 */

	
	/**
	 * [tHashOutput_10 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_10";

	

 



/**
 * [tHashOutput_10 finally ] stop
 */










	
	/**
	 * [tMap_20 finally ] start
	 */

	

	
	
	currentComponent="tMap_20";

	

 



/**
 * [tMap_20 finally ] stop
 */

	
	/**
	 * [tMap_21 finally ] start
	 */

	

	
	
	currentComponent="tMap_21";

	

 



/**
 * [tMap_21 finally ] stop
 */

	
	/**
	 * [tMap_26 finally ] start
	 */

	

	
	
	currentComponent="tMap_26";

	

 



/**
 * [tMap_26 finally ] stop
 */

	
	/**
	 * [tUniqRow_25 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_25";

	

 



/**
 * [tUniqRow_25 finally ] stop
 */

	
	/**
	 * [tFilterRow_1 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

 



/**
 * [tFilterRow_1 finally ] stop
 */

	
	/**
	 * [tHashOutput_12 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_12";

	

 



/**
 * [tHashOutput_12 finally ] stop
 */













	
	/**
	 * [tUniqRow_20 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_20";

	

 



/**
 * [tUniqRow_20 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_11 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_11";

	

 



/**
 * [tFileOutputExcel_11 finally ] stop
 */










	
	/**
	 * [tUniqRow_18 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_18";

	

 



/**
 * [tUniqRow_18 finally ] stop
 */

	
	/**
	 * [tHashOutput_9 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_9";

	

 



/**
 * [tHashOutput_9 finally ] stop
 */










	
	/**
	 * [tUniqRow_23 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_23";

	

 



/**
 * [tUniqRow_23 finally ] stop
 */

	
	/**
	 * [tFilterRow_5 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_5";

	

 



/**
 * [tFilterRow_5 finally ] stop
 */

	
	/**
	 * [tHashOutput_11 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_11";

	

 



/**
 * [tHashOutput_11 finally ] stop
 */













	
	/**
	 * [tUniqRow_16 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_16";

	

 



/**
 * [tUniqRow_16 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_9 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_9";

	

 



/**
 * [tFileOutputExcel_9 finally ] stop
 */













	
	/**
	 * [tUniqRow_14 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_14";

	

 



/**
 * [tUniqRow_14 finally ] stop
 */

	
	/**
	 * [tHashOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";

	

 



/**
 * [tHashOutput_4 finally ] stop
 */










	
	/**
	 * [tUniqRow_13 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_13";

	

 



/**
 * [tUniqRow_13 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_6 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_6";

	

 



/**
 * [tFileOutputExcel_6 finally ] stop
 */







	
	/**
	 * [tHashOutput_5 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";

	

 



/**
 * [tHashOutput_5 finally ] stop
 */




	
	/**
	 * [tHashOutput_13 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_13";

	

 



/**
 * [tHashOutput_13 finally ] stop
 */







	
	/**
	 * [tUniqRow_12 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_12";

	

 



/**
 * [tUniqRow_12 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_5 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_5";

	

 



/**
 * [tFileOutputExcel_5 finally ] stop
 */










	
	/**
	 * [tUniqRow_11 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_11";

	

 



/**
 * [tUniqRow_11 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_4 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_4";

	

 



/**
 * [tFileOutputExcel_4 finally ] stop
 */










	
	/**
	 * [tUniqRow_10 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_10";

	

 



/**
 * [tUniqRow_10 finally ] stop
 */

	
	/**
	 * [tFilterRow_3 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_3";

	

 



/**
 * [tFilterRow_3 finally ] stop
 */

	
	/**
	 * [tMap_23 finally ] start
	 */

	

	
	
	currentComponent="tMap_23";

	

 



/**
 * [tMap_23 finally ] stop
 */

	
	/**
	 * [tHashOutput_8 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_8";

	

 



/**
 * [tHashOutput_8 finally ] stop
 */




	
	/**
	 * [tUniqRow_22 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_22";

	

 



/**
 * [tUniqRow_22 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_13 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_13";

	

 



/**
 * [tFileOutputExcel_13 finally ] stop
 */



















	
	/**
	 * [tUniqRow_9 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_9";

	

 



/**
 * [tUniqRow_9 finally ] stop
 */







	
	/**
	 * [tUniqRow_8 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_8";

	

 



/**
 * [tUniqRow_8 finally ] stop
 */

	
	/**
	 * [tHashOutput_6 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_6";

	

 



/**
 * [tHashOutput_6 finally ] stop
 */










	
	/**
	 * [tUniqRow_7 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_7";

	

 



/**
 * [tUniqRow_7 finally ] stop
 */







	
	/**
	 * [tUniqRow_6 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_6";

	

 



/**
 * [tUniqRow_6 finally ] stop
 */







	
	/**
	 * [tUniqRow_5 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_5";

	

 



/**
 * [tUniqRow_5 finally ] stop
 */

	
	/**
	 * [tHashOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";

	

 



/**
 * [tHashOutput_3 finally ] stop
 */










	
	/**
	 * [tUniqRow_4 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_4";

	

 



/**
 * [tUniqRow_4 finally ] stop
 */

	
	/**
	 * [tHashOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";

	

 



/**
 * [tHashOutput_2 finally ] stop
 */










	
	/**
	 * [tUniqRow_3 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_3";

	

 



/**
 * [tUniqRow_3 finally ] stop
 */

	
	/**
	 * [tHashOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";

	

 



/**
 * [tHashOutput_1 finally ] stop
 */










	
	/**
	 * [tUniqRow_2 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

 



/**
 * [tUniqRow_2 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_2 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_2";

	

 



/**
 * [tFileOutputExcel_2 finally ] stop
 */













	
	/**
	 * [tLogRow_3 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 finally ] stop
 */

	
	/**
	 * [tUniqRow_1 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

 



/**
 * [tFileOutputExcel_1 finally ] stop
 */





















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 1);
	}
	

public void tWarn_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWarn_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tWarn_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tWarn_1", false);
		start_Hash.put("tWarn_1", System.currentTimeMillis());
		
	
	currentComponent="tWarn_1";

	
		int tos_count_tWarn_1 = 0;
		

 



/**
 * [tWarn_1 begin ] stop
 */
	
	/**
	 * [tWarn_1 main ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

		
try {
	
	resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_1", "", Thread.currentThread().getId() + "", "INFO","","Nb line found :" + ((Integer)globalMap.get("tDBInput_5_NB_LINE")),"", "");
	talendLogs_LOGS.addMessage("tWarn", "tWarn_1", 3, "Nb line found :" + ((Integer)globalMap.get("tDBInput_5_NB_LINE")), 3);
	talendLogs_LOGSProcess(globalMap);
	globalMap.put("tWarn_1_WARN_MESSAGES", "Nb line found :" + ((Integer)globalMap.get("tDBInput_5_NB_LINE"))); 
	globalMap.put("tWarn_1_WARN_PRIORITY", 3);
	globalMap.put("tWarn_1_WARN_CODE", 3);
	
} catch (Exception e_tWarn_1) {
	logIgnoredError(String.format("tWarn_1 - tWarn failed to log message due to internal error: %s", e_tWarn_1), e_tWarn_1);
}


 


	tos_count_tWarn_1++;

/**
 * [tWarn_1 main ] stop
 */
	
	/**
	 * [tWarn_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

 



/**
 * [tWarn_1 process_data_begin ] stop
 */
	
	/**
	 * [tWarn_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

 



/**
 * [tWarn_1 process_data_end ] stop
 */
	
	/**
	 * [tWarn_1 end ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

 

ok_Hash.put("tWarn_1", true);
end_Hash.put("tWarn_1", System.currentTimeMillis());




/**
 * [tWarn_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWarn_1 finally ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

 



/**
 * [tWarn_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWarn_1_SUBPROCESS_STATE", 1);
	}
	


public static class copyOfcopyOfsortie_fashionStruct implements routines.system.IPersistableComparableLookupRow<copyOfcopyOfsortie_fashionStruct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String CODE;

				public String getCODE () {
					return this.CODE;
				}
				
			    public String LABEL;

				public String getLABEL () {
					return this.LABEL;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CODE == null) ? 0 : this.CODE.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final copyOfcopyOfsortie_fashionStruct other = (copyOfcopyOfsortie_fashionStruct) obj;
		
						if (this.CODE == null) {
							if (other.CODE != null)
								return false;
						
						} else if (!this.CODE.equals(other.CODE))
						
							return false;
					

		return true;
    }

	public void copyDataTo(copyOfcopyOfsortie_fashionStruct other) {

		other.CODE = this.CODE;
	            other.LABEL = this.LABEL;
	            
	}

	public void copyKeysDataTo(copyOfcopyOfsortie_fashionStruct other) {

		other.CODE = this.CODE;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.CODE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CODE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.LABEL = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.LABEL, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CODE="+CODE);
		sb.append(",LABEL="+LABEL);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfsortie_fashionStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CODE, other.CODE);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row24Struct implements routines.system.IPersistableRow<row24Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public String Label_Code;

				public String getLabel_Code () {
					return this.Label_Code;
				}
				
			    public String Label_D365;

				public String getLabel_D365 () {
					return this.Label_D365;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.Label_Code = readString(dis);
					
					this.Label_D365 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Label_Code,dos);
					
					// String
				
						writeString(this.Label_D365,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Label_Code="+Label_Code);
		sb.append(",Label_D365="+Label_D365);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row24Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row24Struct row24 = new row24Struct();
copyOfcopyOfsortie_fashionStruct copyOfcopyOfsortie_fashion = new copyOfcopyOfsortie_fashionStruct();





	
	/**
	 * [tAdvancedHash_copyOfcopyOfsortie_fashion begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_copyOfcopyOfsortie_fashion", false);
		start_Hash.put("tAdvancedHash_copyOfcopyOfsortie_fashion", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_copyOfcopyOfsortie_fashion";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfsortie_fashion");
					}
				
		int tos_count_tAdvancedHash_copyOfcopyOfsortie_fashion = 0;
		

			   		// connection name:copyOfcopyOfsortie_fashion
			   		// source node:tMap_22 - inputs:(row24) outputs:(copyOfcopyOfsortie_fashion,copyOfcopyOfsortie_fashion) | target node:tAdvancedHash_copyOfcopyOfsortie_fashion - inputs:(copyOfcopyOfsortie_fashion) outputs:()
			   		// linked node: tMap_4 - inputs:(row7,copyOfcopyOfsortie_fashion) outputs:(sortie_Excel)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_copyOfcopyOfsortie_fashion = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<copyOfcopyOfsortie_fashionStruct> tHash_Lookup_copyOfcopyOfsortie_fashion =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<copyOfcopyOfsortie_fashionStruct>getLookup(matchingModeEnum_copyOfcopyOfsortie_fashion);
	   						   
		   	   	   globalMap.put("tHash_Lookup_copyOfcopyOfsortie_fashion", tHash_Lookup_copyOfcopyOfsortie_fashion);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_copyOfcopyOfsortie_fashion begin ] stop
 */



	
	/**
	 * [tMap_22 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_22", false);
		start_Hash.put("tMap_22", System.currentTimeMillis());
		
	
	currentComponent="tMap_22";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row24");
					}
				
		int tos_count_tMap_22 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_22__Struct  {
}
Var__tMap_22__Struct Var__tMap_22 = new Var__tMap_22__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfcopyOfsortie_fashionStruct copyOfcopyOfsortie_fashion_tmp = new copyOfcopyOfsortie_fashionStruct();
// ###############################

        
        



        









 



/**
 * [tMap_22 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_1 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_1 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_1  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_1, talendToDBArray_tDBInput_1); 
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
			    java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
					String dbUser_tDBInput_1 = context.SQLSERVER_Login;
					
					
					
	final String decryptedPassword_tDBInput_1 = context.SQLSERVER_Password; 
					
					String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;
				
		    String port_tDBInput_1 = context.SQLSERVER_Port;
		    String dbname_tDBInput_1 = context.SQLSERVER_Database ;		    
		    String url_tDBInput_1 = "jdbc:sqlserver://" + context.SQLSERVER_Server ;
		    if (!"".equals(port_tDBInput_1)) {
		    	url_tDBInput_1 += ":" + context.SQLSERVER_Port;
		    }
		    if (!"".equals(dbname_tDBInput_1)) {		    
		    	url_tDBInput_1 += ";databaseName=" + context.SQLSERVER_Database; 
		    }
		    url_tDBInput_1 += ";appName=" + projectName + ";" + context.SQLSERVER_AdditionalParams;
		    String dbschema_tDBInput_1 = context.SQLSERVER_Schema;
				
				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1,dbUser_tDBInput_1,dbPwd_tDBInput_1);
		        
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "select LABELCODE as [Label Code], LABELD365 as [Label D365] from  data.D365_Labels\nunion \nSelect 'SMS','SMS'\n";
			

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row24.Label_Code = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(1);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		row24.Label_Code = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row24.Label_Code = tmpContent_tDBInput_1;
                }
            } else {
                row24.Label_Code = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								row24.Label_D365 = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(2);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		row24.Label_D365 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row24.Label_D365 = tmpContent_tDBInput_1;
                }
            } else {
                row24.Label_D365 = null;
            }
		                    }
					





 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_22 main ] start
	 */

	

	
	
	currentComponent="tMap_22";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row24");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_22 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_22 = false;
		  boolean mainRowRejected_tMap_22 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_22__Struct Var = Var__tMap_22;// ###############################
        // ###############################
        // # Output tables

copyOfcopyOfsortie_fashion = null;


// # Output table : 'copyOfcopyOfsortie_fashion'
copyOfcopyOfsortie_fashion_tmp.CODE = StringHandling.DOWNCASE(row24.Label_Code) ;
copyOfcopyOfsortie_fashion_tmp.LABEL = row24.Label_D365 ;
copyOfcopyOfsortie_fashion = copyOfcopyOfsortie_fashion_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_22 = false;










 


	tos_count_tMap_22++;

/**
 * [tMap_22 main ] stop
 */
	
	/**
	 * [tMap_22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

 



/**
 * [tMap_22 process_data_begin ] stop
 */
// Start of branch "copyOfcopyOfsortie_fashion"
if(copyOfcopyOfsortie_fashion != null) { 



	
	/**
	 * [tAdvancedHash_copyOfcopyOfsortie_fashion main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_copyOfcopyOfsortie_fashion";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfcopyOfsortie_fashion");
					}
					


			   
			   

					copyOfcopyOfsortie_fashionStruct copyOfcopyOfsortie_fashion_HashRow = new copyOfcopyOfsortie_fashionStruct();
		   	   	   
				
				copyOfcopyOfsortie_fashion_HashRow.CODE = copyOfcopyOfsortie_fashion.CODE;
				
				copyOfcopyOfsortie_fashion_HashRow.LABEL = copyOfcopyOfsortie_fashion.LABEL;
				
			tHash_Lookup_copyOfcopyOfsortie_fashion.put(copyOfcopyOfsortie_fashion_HashRow);
			
            




 


	tos_count_tAdvancedHash_copyOfcopyOfsortie_fashion++;

/**
 * [tAdvancedHash_copyOfcopyOfsortie_fashion main ] stop
 */
	
	/**
	 * [tAdvancedHash_copyOfcopyOfsortie_fashion process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_copyOfcopyOfsortie_fashion";

	

 



/**
 * [tAdvancedHash_copyOfcopyOfsortie_fashion process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_copyOfcopyOfsortie_fashion process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_copyOfcopyOfsortie_fashion";

	

 



/**
 * [tAdvancedHash_copyOfcopyOfsortie_fashion process_data_end ] stop
 */

} // End of branch "copyOfcopyOfsortie_fashion"




	
	/**
	 * [tMap_22 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

 



/**
 * [tMap_22 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
		if(conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {
			
			conn_tDBInput_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);

 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tMap_22 end ] start
	 */

	

	
	
	currentComponent="tMap_22";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row24");
			  	}
			  	
 

ok_Hash.put("tMap_22", true);
end_Hash.put("tMap_22", System.currentTimeMillis());




/**
 * [tMap_22 end ] stop
 */

	
	/**
	 * [tAdvancedHash_copyOfcopyOfsortie_fashion end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_copyOfcopyOfsortie_fashion";

	

tHash_Lookup_copyOfcopyOfsortie_fashion.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfsortie_fashion");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_copyOfcopyOfsortie_fashion", true);
end_Hash.put("tAdvancedHash_copyOfcopyOfsortie_fashion", System.currentTimeMillis());




/**
 * [tAdvancedHash_copyOfcopyOfsortie_fashion end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tMap_22 finally ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

 



/**
 * [tMap_22 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_copyOfcopyOfsortie_fashion finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_copyOfcopyOfsortie_fashion";

	

 



/**
 * [tAdvancedHash_copyOfcopyOfsortie_fashion finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row16Struct implements routines.system.IPersistableComparableLookupRow<row16Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String COLORID;

				public String getCOLORID () {
					return this.COLORID;
				}
				
			    public String NAME;

				public String getNAME () {
					return this.NAME;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.COLORID == null) ? 0 : this.COLORID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row16Struct other = (row16Struct) obj;
		
						if (this.COLORID == null) {
							if (other.COLORID != null)
								return false;
						
						} else if (!this.COLORID.equals(other.COLORID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row16Struct other) {

		other.COLORID = this.COLORID;
	            other.NAME = this.NAME;
	            other.DESCRIPTION = this.DESCRIPTION;
	            
	}

	public void copyKeysDataTo(row16Struct other) {

		other.COLORID = this.COLORID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.COLORID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.COLORID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.NAME = readString(dis,ois);
					
						this.DESCRIPTION = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.NAME, dos, oos);
					
						writeString(this.DESCRIPTION, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("COLORID="+COLORID);
		sb.append(",NAME="+NAME);
		sb.append(",DESCRIPTION="+DESCRIPTION);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row16Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.COLORID, other.COLORID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row16Struct row16 = new row16Struct();




	
	/**
	 * [tAdvancedHash_row16 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row16", false);
		start_Hash.put("tAdvancedHash_row16", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row16";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row16");
					}
				
		int tos_count_tAdvancedHash_row16 = 0;
		

			   		// connection name:row16
			   		// source node:tDBInput_2 - inputs:(after_tDBInput_5) outputs:(row16,row16) | target node:tAdvancedHash_row16 - inputs:(row16) outputs:()
			   		// linked node: tMap_21 - inputs:(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full,row16) outputs:(sortie_full_barcode,copyOfsortie_color)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row16 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct> tHash_Lookup_row16 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row16Struct>getLookup(matchingModeEnum_row16);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row16", tHash_Lookup_row16);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row16 begin ] stop
 */



	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_2";

	
		int tos_count_tDBInput_2 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_2 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_2 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_2  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_2, talendToDBArray_tDBInput_2); 
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
				String driverClass_tDBInput_2 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
			    java.lang.Class jdbcclazz_tDBInput_2 = java.lang.Class.forName(driverClass_tDBInput_2);
					String dbUser_tDBInput_2 = context.SQLSERVER_Login;
					
					
					
	final String decryptedPassword_tDBInput_2 = context.SQLSERVER_Password; 
					
					String dbPwd_tDBInput_2 = decryptedPassword_tDBInput_2;
				
		    String port_tDBInput_2 = context.SQLSERVER_Port;
		    String dbname_tDBInput_2 = context.SQLSERVER_Database ;		    
		    String url_tDBInput_2 = "jdbc:sqlserver://" + context.SQLSERVER_Server ;
		    if (!"".equals(port_tDBInput_2)) {
		    	url_tDBInput_2 += ":" + context.SQLSERVER_Port;
		    }
		    if (!"".equals(dbname_tDBInput_2)) {		    
		    	url_tDBInput_2 += ";databaseName=" + context.SQLSERVER_Database; 
		    }
		    url_tDBInput_2 += ";appName=" + projectName + ";" + context.SQLSERVER_AdditionalParams;
		    String dbschema_tDBInput_2 = context.SQLSERVER_Schema;
				
				conn_tDBInput_2 = java.sql.DriverManager.getConnection(url_tDBInput_2,dbUser_tDBInput_2,dbPwd_tDBInput_2);
		        
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

		    String dbquery_tDBInput_2 = "\nselect ECORESCOLOR_NAME as COLORID, NAME, DESCRIPTION from data.D365_K3FashionColorTranslations\nwhere LANGUAGEID = '"
+"en-US'\n";
			

            	globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);
		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
							if(colQtyInRs_tDBInput_2 < 1) {
								row16.COLORID = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(1);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		row16.COLORID = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row16.COLORID = tmpContent_tDBInput_2;
                }
            } else {
                row16.COLORID = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 2) {
								row16.NAME = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(2);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		row16.NAME = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row16.NAME = tmpContent_tDBInput_2;
                }
            } else {
                row16.NAME = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 3) {
								row16.DESCRIPTION = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(3);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
            		row16.DESCRIPTION = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row16.DESCRIPTION = tmpContent_tDBInput_2;
                }
            } else {
                row16.DESCRIPTION = null;
            }
		                    }
					





 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row16 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row16";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row16");
					}
					


			   
			   

					row16Struct row16_HashRow = new row16Struct();
		   	   	   
				
				row16_HashRow.COLORID = row16.COLORID;
				
				row16_HashRow.NAME = row16.NAME;
				
				row16_HashRow.DESCRIPTION = row16.DESCRIPTION;
				
			tHash_Lookup_row16.put(row16_HashRow);
			
            




 


	tos_count_tAdvancedHash_row16++;

/**
 * [tAdvancedHash_row16 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row16";

	

 



/**
 * [tAdvancedHash_row16 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row16 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row16";

	

 



/**
 * [tAdvancedHash_row16 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

	}
}finally{
	if (rs_tDBInput_2 != null) {
		rs_tDBInput_2.close();
	}
	if (stmt_tDBInput_2 != null) {
		stmt_tDBInput_2.close();
	}
		if(conn_tDBInput_2 != null && !conn_tDBInput_2.isClosed()) {
			
			conn_tDBInput_2.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);

 

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());




/**
 * [tDBInput_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row16 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row16";

	

tHash_Lookup_row16.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row16");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row16", true);
end_Hash.put("tAdvancedHash_row16", System.currentTimeMillis());




/**
 * [tAdvancedHash_row16 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row16 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row16";

	

 



/**
 * [tAdvancedHash_row16 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class row49Struct implements routines.system.IPersistableComparableLookupRow<row49Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String ITEMID;

				public String getITEMID () {
					return this.ITEMID;
				}
				
			    public String INVENTSIZEID;

				public String getINVENTSIZEID () {
					return this.INVENTSIZEID;
				}
				
			    public String INVENTSTYLEID;

				public String getINVENTSTYLEID () {
					return this.INVENTSTYLEID;
				}
				
			    public String INVENTCOLORID;

				public String getINVENTCOLORID () {
					return this.INVENTCOLORID;
				}
				
			    public String SEASONCODE;

				public String getSEASONCODE () {
					return this.SEASONCODE;
				}
				
			    public String PRODUCTSTATUSID;

				public String getPRODUCTSTATUSID () {
					return this.PRODUCTSTATUSID;
				}
				
			    public Integer SPLSPCB;

				public Integer getSPLSPCB () {
					return this.SPLSPCB;
				}
				
			    public String SPLSUSTAINABILITY;

				public String getSPLSUSTAINABILITY () {
					return this.SPLSUSTAINABILITY;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ITEMID == null) ? 0 : this.ITEMID.hashCode());
					
						result = prime * result + ((this.INVENTSIZEID == null) ? 0 : this.INVENTSIZEID.hashCode());
					
						result = prime * result + ((this.INVENTSTYLEID == null) ? 0 : this.INVENTSTYLEID.hashCode());
					
						result = prime * result + ((this.INVENTCOLORID == null) ? 0 : this.INVENTCOLORID.hashCode());
					
						result = prime * result + ((this.SEASONCODE == null) ? 0 : this.SEASONCODE.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row49Struct other = (row49Struct) obj;
		
						if (this.ITEMID == null) {
							if (other.ITEMID != null)
								return false;
						
						} else if (!this.ITEMID.equals(other.ITEMID))
						
							return false;
					
						if (this.INVENTSIZEID == null) {
							if (other.INVENTSIZEID != null)
								return false;
						
						} else if (!this.INVENTSIZEID.equals(other.INVENTSIZEID))
						
							return false;
					
						if (this.INVENTSTYLEID == null) {
							if (other.INVENTSTYLEID != null)
								return false;
						
						} else if (!this.INVENTSTYLEID.equals(other.INVENTSTYLEID))
						
							return false;
					
						if (this.INVENTCOLORID == null) {
							if (other.INVENTCOLORID != null)
								return false;
						
						} else if (!this.INVENTCOLORID.equals(other.INVENTCOLORID))
						
							return false;
					
						if (this.SEASONCODE == null) {
							if (other.SEASONCODE != null)
								return false;
						
						} else if (!this.SEASONCODE.equals(other.SEASONCODE))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row49Struct other) {

		other.ITEMID = this.ITEMID;
	            other.INVENTSIZEID = this.INVENTSIZEID;
	            other.INVENTSTYLEID = this.INVENTSTYLEID;
	            other.INVENTCOLORID = this.INVENTCOLORID;
	            other.SEASONCODE = this.SEASONCODE;
	            other.PRODUCTSTATUSID = this.PRODUCTSTATUSID;
	            other.SPLSPCB = this.SPLSPCB;
	            other.SPLSUSTAINABILITY = this.SPLSUSTAINABILITY;
	            
	}

	public void copyKeysDataTo(row49Struct other) {

		other.ITEMID = this.ITEMID;
	            	other.INVENTSIZEID = this.INVENTSIZEID;
	            	other.INVENTSTYLEID = this.INVENTSTYLEID;
	            	other.INVENTCOLORID = this.INVENTCOLORID;
	            	other.SEASONCODE = this.SEASONCODE;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}
	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.ITEMID = readString(dis);
					
					this.INVENTSIZEID = readString(dis);
					
					this.INVENTSTYLEID = readString(dis);
					
					this.INVENTCOLORID = readString(dis);
					
					this.SEASONCODE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITEMID,dos);
					
					// String
				
						writeString(this.INVENTSIZEID,dos);
					
					// String
				
						writeString(this.INVENTSTYLEID,dos);
					
					// String
				
						writeString(this.INVENTCOLORID,dos);
					
					// String
				
						writeString(this.SEASONCODE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.PRODUCTSTATUSID = readString(dis,ois);
					
						this.SPLSPCB = readInteger(dis,ois);
					
						this.SPLSUSTAINABILITY = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.PRODUCTSTATUSID, dos, oos);
					
					writeInteger(this.SPLSPCB, dos, oos);
					
						writeString(this.SPLSUSTAINABILITY, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITEMID="+ITEMID);
		sb.append(",INVENTSIZEID="+INVENTSIZEID);
		sb.append(",INVENTSTYLEID="+INVENTSTYLEID);
		sb.append(",INVENTCOLORID="+INVENTCOLORID);
		sb.append(",SEASONCODE="+SEASONCODE);
		sb.append(",PRODUCTSTATUSID="+PRODUCTSTATUSID);
		sb.append(",SPLSPCB="+String.valueOf(SPLSPCB));
		sb.append(",SPLSUSTAINABILITY="+SPLSUSTAINABILITY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row49Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ITEMID, other.ITEMID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.INVENTSIZEID, other.INVENTSIZEID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.INVENTSTYLEID, other.INVENTSTYLEID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.INVENTCOLORID, other.INVENTCOLORID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.SEASONCODE, other.SEASONCODE);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row49Struct row49 = new row49Struct();




	
	/**
	 * [tAdvancedHash_row49 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row49", false);
		start_Hash.put("tAdvancedHash_row49", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row49";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row49");
					}
				
		int tos_count_tAdvancedHash_row49 = 0;
		

			   		// connection name:row49
			   		// source node:tDBInput_3 - inputs:(after_tDBInput_5) outputs:(row49,row49) | target node:tAdvancedHash_row49 - inputs:(row49) outputs:()
			   		// linked node: tMap_18 - inputs:(sortie_full_varian,row49) outputs:(copyOfsortie_released_product_variant,sortie_product_status)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row49 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row49Struct> tHash_Lookup_row49 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row49Struct>getLookup(matchingModeEnum_row49);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row49", tHash_Lookup_row49);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row49 begin ] stop
 */



	
	/**
	 * [tDBInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_3", false);
		start_Hash.put("tDBInput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_3";

	
		int tos_count_tDBInput_3 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_3 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_3 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_3  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_3, talendToDBArray_tDBInput_3); 
		    int nb_line_tDBInput_3 = 0;
		    java.sql.Connection conn_tDBInput_3 = null;
				String driverClass_tDBInput_3 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
			    java.lang.Class jdbcclazz_tDBInput_3 = java.lang.Class.forName(driverClass_tDBInput_3);
					String dbUser_tDBInput_3 = context.SQLSERVER_Login;
					
					
					
	final String decryptedPassword_tDBInput_3 = context.SQLSERVER_Password; 
					
					String dbPwd_tDBInput_3 = decryptedPassword_tDBInput_3;
				
		    String port_tDBInput_3 = context.SQLSERVER_Port;
		    String dbname_tDBInput_3 = context.SQLSERVER_Database ;		    
		    String url_tDBInput_3 = "jdbc:sqlserver://" + context.SQLSERVER_Server ;
		    if (!"".equals(port_tDBInput_3)) {
		    	url_tDBInput_3 += ":" + context.SQLSERVER_Port;
		    }
		    if (!"".equals(dbname_tDBInput_3)) {		    
		    	url_tDBInput_3 += ";databaseName=" + context.SQLSERVER_Database; 
		    }
		    url_tDBInput_3 += ";appName=" + projectName + ";" + context.SQLSERVER_AdditionalParams;
		    String dbschema_tDBInput_3 = context.SQLSERVER_Schema;
				
				conn_tDBInput_3 = java.sql.DriverManager.getConnection(url_tDBInput_3,dbUser_tDBInput_3,dbPwd_tDBInput_3);
		        
		    
			java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

		    String dbquery_tDBInput_3 = "\n\nSelect a.ITEMID,a.INVENTSIZEID,a.INVENTSTYLEID,a.INVENTCOLORID,a.SEASONCODE, a.PRODUCTSTATUSID, a.SPLSPCB, \ncase w"
+"hen isnull(a.SPLSUSTAINABILITY,'No') = 'No' then 'No' else 'Yes' end as SPLSUSTAINABILITY\n\nfrom data.D365_K3FashionPro"
+"ductStatus a inner join\n(\nselect ITEMID,INVENTSIZEID,INVENTSTYLEID,INVENTCOLORID,SEASONCODE, MAX(FROMDATE) as maxDate "
+"from data.D365_K3FashionProductStatus\ngroup by ITEMID,INVENTSIZEID,INVENTSTYLEID,INVENTCOLORID, SEASONCODE) b\non a.ITE"
+"MID = b.ITEMID\nand a.INVENTSIZEID = b.INVENTSIZEID\nand a.INVENTSTYLEID = b.INVENTSTYLEID\nand a.INVENTCOLORID = b.INVE"
+"NTCOLORID\nand a.SEASONCODE = b.SEASONCODE\nand a.FROMDATE = b.maxDate\n";
			

            	globalMap.put("tDBInput_3_QUERY",dbquery_tDBInput_3);
		    java.sql.ResultSet rs_tDBInput_3 = null;

		    try {
		    	rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
		    	int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

		    String tmpContent_tDBInput_3 = null;
		    
		    
		    while (rs_tDBInput_3.next()) {
		        nb_line_tDBInput_3++;
		        
							if(colQtyInRs_tDBInput_3 < 1) {
								row49.ITEMID = null;
							} else {
	                         		
           		tmpContent_tDBInput_3 = rs_tDBInput_3.getString(1);
            if(tmpContent_tDBInput_3 != null) {
            	if (talendToDBList_tDBInput_3 .contains(rsmd_tDBInput_3.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		row49.ITEMID = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
            	} else {
                	row49.ITEMID = tmpContent_tDBInput_3;
                }
            } else {
                row49.ITEMID = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 2) {
								row49.INVENTSIZEID = null;
							} else {
	                         		
           		tmpContent_tDBInput_3 = rs_tDBInput_3.getString(2);
            if(tmpContent_tDBInput_3 != null) {
            	if (talendToDBList_tDBInput_3 .contains(rsmd_tDBInput_3.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		row49.INVENTSIZEID = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
            	} else {
                	row49.INVENTSIZEID = tmpContent_tDBInput_3;
                }
            } else {
                row49.INVENTSIZEID = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 3) {
								row49.INVENTSTYLEID = null;
							} else {
	                         		
           		tmpContent_tDBInput_3 = rs_tDBInput_3.getString(3);
            if(tmpContent_tDBInput_3 != null) {
            	if (talendToDBList_tDBInput_3 .contains(rsmd_tDBInput_3.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
            		row49.INVENTSTYLEID = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
            	} else {
                	row49.INVENTSTYLEID = tmpContent_tDBInput_3;
                }
            } else {
                row49.INVENTSTYLEID = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 4) {
								row49.INVENTCOLORID = null;
							} else {
	                         		
           		tmpContent_tDBInput_3 = rs_tDBInput_3.getString(4);
            if(tmpContent_tDBInput_3 != null) {
            	if (talendToDBList_tDBInput_3 .contains(rsmd_tDBInput_3.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
            		row49.INVENTCOLORID = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
            	} else {
                	row49.INVENTCOLORID = tmpContent_tDBInput_3;
                }
            } else {
                row49.INVENTCOLORID = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 5) {
								row49.SEASONCODE = null;
							} else {
	                         		
           		tmpContent_tDBInput_3 = rs_tDBInput_3.getString(5);
            if(tmpContent_tDBInput_3 != null) {
            	if (talendToDBList_tDBInput_3 .contains(rsmd_tDBInput_3.getColumnTypeName(5).toUpperCase(java.util.Locale.ENGLISH))) {
            		row49.SEASONCODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
            	} else {
                	row49.SEASONCODE = tmpContent_tDBInput_3;
                }
            } else {
                row49.SEASONCODE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 6) {
								row49.PRODUCTSTATUSID = null;
							} else {
	                         		
           		tmpContent_tDBInput_3 = rs_tDBInput_3.getString(6);
            if(tmpContent_tDBInput_3 != null) {
            	if (talendToDBList_tDBInput_3 .contains(rsmd_tDBInput_3.getColumnTypeName(6).toUpperCase(java.util.Locale.ENGLISH))) {
            		row49.PRODUCTSTATUSID = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
            	} else {
                	row49.PRODUCTSTATUSID = tmpContent_tDBInput_3;
                }
            } else {
                row49.PRODUCTSTATUSID = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 7) {
								row49.SPLSPCB = null;
							} else {
		                          
            row49.SPLSPCB = rs_tDBInput_3.getInt(7);
            if(rs_tDBInput_3.wasNull()){
                    row49.SPLSPCB = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 8) {
								row49.SPLSUSTAINABILITY = null;
							} else {
	                         		
           		tmpContent_tDBInput_3 = rs_tDBInput_3.getString(8);
            if(tmpContent_tDBInput_3 != null) {
            	if (talendToDBList_tDBInput_3 .contains(rsmd_tDBInput_3.getColumnTypeName(8).toUpperCase(java.util.Locale.ENGLISH))) {
            		row49.SPLSUSTAINABILITY = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
            	} else {
                	row49.SPLSUSTAINABILITY = tmpContent_tDBInput_3;
                }
            } else {
                row49.SPLSUSTAINABILITY = null;
            }
		                    }
					





 



/**
 * [tDBInput_3 begin ] stop
 */
	
	/**
	 * [tDBInput_3 main ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 


	tos_count_tDBInput_3++;

/**
 * [tDBInput_3 main ] stop
 */
	
	/**
	 * [tDBInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row49 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row49";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row49");
					}
					


			   
			   

					row49Struct row49_HashRow = new row49Struct();
		   	   	   
				
				row49_HashRow.ITEMID = row49.ITEMID;
				
				row49_HashRow.INVENTSIZEID = row49.INVENTSIZEID;
				
				row49_HashRow.INVENTSTYLEID = row49.INVENTSTYLEID;
				
				row49_HashRow.INVENTCOLORID = row49.INVENTCOLORID;
				
				row49_HashRow.SEASONCODE = row49.SEASONCODE;
				
				row49_HashRow.PRODUCTSTATUSID = row49.PRODUCTSTATUSID;
				
				row49_HashRow.SPLSPCB = row49.SPLSPCB;
				
				row49_HashRow.SPLSUSTAINABILITY = row49.SPLSUSTAINABILITY;
				
			tHash_Lookup_row49.put(row49_HashRow);
			
            




 


	tos_count_tAdvancedHash_row49++;

/**
 * [tAdvancedHash_row49 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row49 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row49";

	

 



/**
 * [tAdvancedHash_row49 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row49 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row49";

	

 



/**
 * [tAdvancedHash_row49 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_3 end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

	}
}finally{
	if (rs_tDBInput_3 != null) {
		rs_tDBInput_3.close();
	}
	if (stmt_tDBInput_3 != null) {
		stmt_tDBInput_3.close();
	}
		if(conn_tDBInput_3 != null && !conn_tDBInput_3.isClosed()) {
			
			conn_tDBInput_3.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_3_NB_LINE",nb_line_tDBInput_3);

 

ok_Hash.put("tDBInput_3", true);
end_Hash.put("tDBInput_3", System.currentTimeMillis());




/**
 * [tDBInput_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row49 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row49";

	

tHash_Lookup_row49.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row49");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row49", true);
end_Hash.put("tAdvancedHash_row49", System.currentTimeMillis());




/**
 * [tAdvancedHash_row49 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row49 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row49";

	

 



/**
 * [tAdvancedHash_row49 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}
	

public void connectionStatsLogs_CommitProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("connectionStatsLogs_Commit_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [connectionStatsLogs_Commit begin ] start
	 */

	

	
		
		ok_Hash.put("connectionStatsLogs_Commit", false);
		start_Hash.put("connectionStatsLogs_Commit", System.currentTimeMillis());
		
	
	currentComponent="connectionStatsLogs_Commit";

	
		int tos_count_connectionStatsLogs_Commit = 0;
		

 



/**
 * [connectionStatsLogs_Commit begin ] stop
 */
	
	/**
	 * [connectionStatsLogs_Commit main ] start
	 */

	

	
	
	currentComponent="connectionStatsLogs_Commit";

	

	java.sql.Connection conn_connectionStatsLogs_Commit = (java.sql.Connection)globalMap.get("conn_connectionStatsLogs");
	if(conn_connectionStatsLogs_Commit != null && !conn_connectionStatsLogs_Commit.isClosed())
	{
	
			
			conn_connectionStatsLogs_Commit.commit();
			
	
	}

 


	tos_count_connectionStatsLogs_Commit++;

/**
 * [connectionStatsLogs_Commit main ] stop
 */
	
	/**
	 * [connectionStatsLogs_Commit process_data_begin ] start
	 */

	

	
	
	currentComponent="connectionStatsLogs_Commit";

	

 



/**
 * [connectionStatsLogs_Commit process_data_begin ] stop
 */
	
	/**
	 * [connectionStatsLogs_Commit process_data_end ] start
	 */

	

	
	
	currentComponent="connectionStatsLogs_Commit";

	

 



/**
 * [connectionStatsLogs_Commit process_data_end ] stop
 */
	
	/**
	 * [connectionStatsLogs_Commit end ] start
	 */

	

	
	
	currentComponent="connectionStatsLogs_Commit";

	

 

ok_Hash.put("connectionStatsLogs_Commit", true);
end_Hash.put("connectionStatsLogs_Commit", System.currentTimeMillis());




/**
 * [connectionStatsLogs_Commit end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [connectionStatsLogs_Commit finally ] start
	 */

	

	
	
	currentComponent="connectionStatsLogs_Commit";

	

 



/**
 * [connectionStatsLogs_Commit finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("connectionStatsLogs_Commit_SUBPROCESS_STATE", 1);
	}
	

public void connectionStatsLogsProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("connectionStatsLogs_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [connectionStatsLogs begin ] start
	 */

	

	
		
		ok_Hash.put("connectionStatsLogs", false);
		start_Hash.put("connectionStatsLogs", System.currentTimeMillis());
		
	
	currentComponent="connectionStatsLogs";

	
		int tos_count_connectionStatsLogs = 0;
		
	

			    
		    String url_connectionStatsLogs = "jdbc:sqlserver://" + context.SQLSERVER_LOG_Server ;
		String port_connectionStatsLogs = context.SQLSERVER_LOG_Port;
		String dbname_connectionStatsLogs = context.SQLSERVER_LOG_Database ;
    	if (!"".equals(port_connectionStatsLogs)) {
    		url_connectionStatsLogs += ":" + context.SQLSERVER_LOG_Port;
    	}
    	if (!"".equals(dbname_connectionStatsLogs)) {
    				    
		    	url_connectionStatsLogs += ";databaseName=" + context.SQLSERVER_LOG_Database; 
    	}
		url_connectionStatsLogs += ";appName=" + projectName + ";" + context.SQLSERVER_LOG_AdditionalParams;  
		String dbUser_connectionStatsLogs = context.SQLSERVER_LOG_Login;
		
		
			
	final String decryptedPassword_connectionStatsLogs = context.SQLSERVER_LOG_Password; 
			String dbPwd_connectionStatsLogs = decryptedPassword_connectionStatsLogs;
		
	java.sql.Connection conn_connectionStatsLogs = null;
	
	
			String sharedConnectionName_connectionStatsLogs = "jdbc:sqlserver://"+context.SQLSERVER_LOG_Server+":"+context.SQLSERVER_LOG_Port+";DatabaseName="+context.SQLSERVER_LOG_Schema+";"+context.SQLSERVER_LOG_AdditionalParams+""+"_StatsAndLog_Shared_Connection";
			conn_connectionStatsLogs = SharedDBConnection.getDBConnection("com.microsoft.sqlserver.jdbc.SQLServerDriver",url_connectionStatsLogs,dbUser_connectionStatsLogs , dbPwd_connectionStatsLogs , sharedConnectionName_connectionStatsLogs);
	if (null != conn_connectionStatsLogs) {
		
			conn_connectionStatsLogs.setAutoCommit(false);
	}

	globalMap.put("dbschema_connectionStatsLogs", context.SQLSERVER_LOG_Schema);

	globalMap.put("db_connectionStatsLogs",  context.SQLSERVER_LOG_Database);

	globalMap.put("conn_connectionStatsLogs",conn_connectionStatsLogs);
	
	globalMap.put("shareIdentitySetting_connectionStatsLogs",  false);

 



/**
 * [connectionStatsLogs begin ] stop
 */
	
	/**
	 * [connectionStatsLogs main ] start
	 */

	

	
	
	currentComponent="connectionStatsLogs";

	

 


	tos_count_connectionStatsLogs++;

/**
 * [connectionStatsLogs main ] stop
 */
	
	/**
	 * [connectionStatsLogs process_data_begin ] start
	 */

	

	
	
	currentComponent="connectionStatsLogs";

	

 



/**
 * [connectionStatsLogs process_data_begin ] stop
 */
	
	/**
	 * [connectionStatsLogs process_data_end ] start
	 */

	

	
	
	currentComponent="connectionStatsLogs";

	

 



/**
 * [connectionStatsLogs process_data_end ] stop
 */
	
	/**
	 * [connectionStatsLogs end ] start
	 */

	

	
	
	currentComponent="connectionStatsLogs";

	

 

ok_Hash.put("connectionStatsLogs", true);
end_Hash.put("connectionStatsLogs", System.currentTimeMillis());




/**
 * [connectionStatsLogs end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [connectionStatsLogs finally ] start
	 */

	

	
	
	currentComponent="connectionStatsLogs";

	

 



/**
 * [connectionStatsLogs finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("connectionStatsLogs_SUBPROCESS_STATE", 1);
	}
	


public static class row_talendLogs_LOGSStruct implements routines.system.IPersistableRow<row_talendLogs_LOGSStruct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_1) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row_talendLogs_LOGSStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void talendLogs_LOGSProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("talendLogs_LOGS_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row_talendLogs_LOGSStruct row_talendLogs_LOGS = new row_talendLogs_LOGSStruct();




	
	/**
	 * [talendLogs_DB begin ] start
	 */

	

	
		
		ok_Hash.put("talendLogs_DB", false);
		start_Hash.put("talendLogs_DB", System.currentTimeMillis());
		
	
		currentVirtualComponent = "talendLogs_DB";
	
	currentComponent="talendLogs_DB";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Main");
					}
				
		int tos_count_talendLogs_DB = 0;
		



int nb_line_talendLogs_DB = 0;
int nb_line_update_talendLogs_DB = 0;
int nb_line_inserted_talendLogs_DB = 0;
int nb_line_deleted_talendLogs_DB = 0;
int nb_line_rejected_talendLogs_DB = 0;

int deletedCount_talendLogs_DB=0;
int updatedCount_talendLogs_DB=0;
int insertedCount_talendLogs_DB=0;
int rejectedCount_talendLogs_DB=0;
String dbschema_talendLogs_DB = null;
String tableName_talendLogs_DB = null;
boolean whetherReject_talendLogs_DB = false;

java.util.Calendar calendar_talendLogs_DB = java.util.Calendar.getInstance();
long year1_talendLogs_DB = TalendDate.parseDate("yyyy-MM-dd","0001-01-01").getTime();
long year2_talendLogs_DB = TalendDate.parseDate("yyyy-MM-dd","1753-01-01").getTime();
long year10000_talendLogs_DB = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss","9999-12-31 24:00:00").getTime();
long date_talendLogs_DB;

java.util.Calendar calendar_datetimeoffset_talendLogs_DB = java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone("UTC"));

	
java.sql.Connection conn_talendLogs_DB = null;
String dbUser_talendLogs_DB = null;
	dbschema_talendLogs_DB = (String)globalMap.get("dbschema_connectionStatsLogs");
	conn_talendLogs_DB = (java.sql.Connection)globalMap.get("conn_connectionStatsLogs");
	
   int batchSize_talendLogs_DB = 10000;
   int batchSizeCounter_talendLogs_DB=0;

if(dbschema_talendLogs_DB == null || dbschema_talendLogs_DB.trim().length() == 0) {
    tableName_talendLogs_DB = "Log";
} else {
    tableName_talendLogs_DB = dbschema_talendLogs_DB + "].[" + "Log";
}
	int count_talendLogs_DB=0;


                    // [%connection%][checktable][tableName]
                    String keyCheckTable_talendLogs_DB = conn_talendLogs_DB + "[checktable]" + "[" + "Log" + "]";

                if(GlobalResource.resourceMap.get(keyCheckTable_talendLogs_DB)== null){//}

                    synchronized (GlobalResource.resourceLockMap.get(keyCheckTable_talendLogs_DB)) {//}
                        if(GlobalResource.resourceMap.get(keyCheckTable_talendLogs_DB)== null){//}
                                boolean whetherExist_talendLogs_DB = false;
                                try (java.sql.Statement isExistStmt_talendLogs_DB = conn_talendLogs_DB.createStatement()) {
                                    try {
                                        isExistStmt_talendLogs_DB.execute("SELECT TOP 1 1 FROM [" + tableName_talendLogs_DB + "]" );
                                        whetherExist_talendLogs_DB = true;
                                    } catch (java.lang.Exception e){
                                        whetherExist_talendLogs_DB = false;
                                    }
                                }
                                if(!whetherExist_talendLogs_DB) {
                                    try (java.sql.Statement stmtCreate_talendLogs_DB = conn_talendLogs_DB.createStatement()) {
                                        stmtCreate_talendLogs_DB.execute("CREATE TABLE [" + tableName_talendLogs_DB + "]([moment] DATETIME ,[pid] VARCHAR(20)  ,[root_pid] VARCHAR(20)  ,[father_pid] VARCHAR(20)  ,[project] VARCHAR(50)  ,[job] VARCHAR(255)  ,[context] VARCHAR(50)  ,[priority] INT ,[type] VARCHAR(255)  ,[origin] VARCHAR(255)  ,[message] VARCHAR(255)  ,[code] INT )");
                                    }
                                }
                            GlobalResource.resourceMap.put(keyCheckTable_talendLogs_DB, true);
            //{{{
                        } // end of if
                    } // end synchronized
                }
        String insert_talendLogs_DB = "INSERT INTO [" + tableName_talendLogs_DB + "] ([moment],[pid],[root_pid],[father_pid],[project],[job],[context],[priority],[type],[origin],[message],[code]) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)";

        java.sql.PreparedStatement pstmt_talendLogs_DB = null;
        String keyPsmt_talendLogs_DB = conn_talendLogs_DB + "[psmt]" + "[" + "Log" + "]";
        pstmt_talendLogs_DB = SharedDBPreparedStatement.getSharedPreparedStatement(conn_talendLogs_DB,insert_talendLogs_DB,keyPsmt_talendLogs_DB);
        resourceMap.put("pstmt_talendLogs_DB", pstmt_talendLogs_DB);
 	boolean isShareIdentity_talendLogs_DB = globalMap.get("shareIdentitySetting_connectionStatsLogs") != null && (Boolean)globalMap.get("shareIdentitySetting_connectionStatsLogs") == true;

 



/**
 * [talendLogs_DB begin ] stop
 */



	
	/**
	 * [talendLogs_LOGS begin ] start
	 */

	

	
		
		ok_Hash.put("talendLogs_LOGS", false);
		start_Hash.put("talendLogs_LOGS", System.currentTimeMillis());
		
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	
		int tos_count_talendLogs_LOGS = 0;
		

try {
	for (LogCatcherUtils.LogCatcherMessage lcm : talendLogs_LOGS.getMessages()) {
		row_talendLogs_LOGS.type = lcm.getType();
		row_talendLogs_LOGS.origin = (lcm.getOrigin()==null || lcm.getOrigin().length()<1 ? null : lcm.getOrigin());
		row_talendLogs_LOGS.priority = lcm.getPriority();
		row_talendLogs_LOGS.message = lcm.getMessage();
		row_talendLogs_LOGS.code = lcm.getCode();
		
		row_talendLogs_LOGS.moment = java.util.Calendar.getInstance().getTime();
	
    	row_talendLogs_LOGS.pid = pid;
		row_talendLogs_LOGS.root_pid = rootPid;
		row_talendLogs_LOGS.father_pid = fatherPid;
	
    	row_talendLogs_LOGS.project = projectName;
    	row_talendLogs_LOGS.job = jobName;
    	row_talendLogs_LOGS.context = contextStr;
    		
 



/**
 * [talendLogs_LOGS begin ] stop
 */
	
	/**
	 * [talendLogs_LOGS main ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	

 


	tos_count_talendLogs_LOGS++;

/**
 * [talendLogs_LOGS main ] stop
 */
	
	/**
	 * [talendLogs_LOGS process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	

 



/**
 * [talendLogs_LOGS process_data_begin ] stop
 */

	
	/**
	 * [talendLogs_DB main ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_DB";
	
	currentComponent="talendLogs_DB";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"Main");
					}
					



        whetherReject_talendLogs_DB = false;
                    if(row_talendLogs_LOGS.moment != null) {
pstmt_talendLogs_DB.setTimestamp(1, new java.sql.Timestamp(row_talendLogs_LOGS.moment.getTime()));
} else {
pstmt_talendLogs_DB.setNull(1, java.sql.Types.DATE);
}

                    if(row_talendLogs_LOGS.pid == null) {
pstmt_talendLogs_DB.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_talendLogs_DB.setString(2, row_talendLogs_LOGS.pid);
}

                    if(row_talendLogs_LOGS.root_pid == null) {
pstmt_talendLogs_DB.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_talendLogs_DB.setString(3, row_talendLogs_LOGS.root_pid);
}

                    if(row_talendLogs_LOGS.father_pid == null) {
pstmt_talendLogs_DB.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_talendLogs_DB.setString(4, row_talendLogs_LOGS.father_pid);
}

                    if(row_talendLogs_LOGS.project == null) {
pstmt_talendLogs_DB.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_talendLogs_DB.setString(5, row_talendLogs_LOGS.project);
}

                    if(row_talendLogs_LOGS.job == null) {
pstmt_talendLogs_DB.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_talendLogs_DB.setString(6, row_talendLogs_LOGS.job);
}

                    if(row_talendLogs_LOGS.context == null) {
pstmt_talendLogs_DB.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_talendLogs_DB.setString(7, row_talendLogs_LOGS.context);
}

                    if(row_talendLogs_LOGS.priority == null) {
pstmt_talendLogs_DB.setNull(8, java.sql.Types.INTEGER);
} else {pstmt_talendLogs_DB.setInt(8, row_talendLogs_LOGS.priority);
}

                    if(row_talendLogs_LOGS.type == null) {
pstmt_talendLogs_DB.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_talendLogs_DB.setString(9, row_talendLogs_LOGS.type);
}

                    if(row_talendLogs_LOGS.origin == null) {
pstmt_talendLogs_DB.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_talendLogs_DB.setString(10, row_talendLogs_LOGS.origin);
}

                    if(row_talendLogs_LOGS.message == null) {
pstmt_talendLogs_DB.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_talendLogs_DB.setString(11, row_talendLogs_LOGS.message);
}

                    if(row_talendLogs_LOGS.code == null) {
pstmt_talendLogs_DB.setNull(12, java.sql.Types.INTEGER);
} else {pstmt_talendLogs_DB.setInt(12, row_talendLogs_LOGS.code);
}


        		pstmt_talendLogs_DB.addBatch();
        		nb_line_talendLogs_DB++;
    		 
    		  batchSizeCounter_talendLogs_DB++;
    		
            	//////////batch execute by batch size///////
            	class LimitBytesHelper_talendLogs_DB{
            		public int limitBytePart1(int counter,java.sql.PreparedStatement pstmt_talendLogs_DB) throws Exception {
                try {
						
						for(int countEach_talendLogs_DB: pstmt_talendLogs_DB.executeBatch()) {
							if(countEach_talendLogs_DB == -2 || countEach_talendLogs_DB == -3) {
								break;
							}
							counter += countEach_talendLogs_DB;
						}
						
                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_talendLogs_DB = 0;
					for(int countEach_talendLogs_DB: e.getUpdateCounts()) {
						counter += (countEach_talendLogs_DB < 0 ? 0 : countEach_talendLogs_DB);
					}
				
            	    	
                		System.err.println(e.getMessage());
                	
               			 }
    				return counter;
            	}
            	
            	public int limitBytePart2(int counter,java.sql.PreparedStatement pstmt_talendLogs_DB) throws Exception {
                try {
                		
						for(int countEach_talendLogs_DB: pstmt_talendLogs_DB.executeBatch()) {
							if(countEach_talendLogs_DB == -2 || countEach_talendLogs_DB == -3) {
								break;
							}
							counter += countEach_talendLogs_DB;
						}
						
                }catch (java.sql.BatchUpdateException e){
                	
                	
					for(int countEach_talendLogs_DB: e.getUpdateCounts()) {
						counter += (countEach_talendLogs_DB < 0 ? 0 : countEach_talendLogs_DB);
					}
					
            	    	
                        System.err.println(e.getMessage());
                	
                		}	
                	return counter;	
            	}
            }
    		if ((batchSize_talendLogs_DB > 0) && (batchSize_talendLogs_DB <= batchSizeCounter_talendLogs_DB)) {
    		
    		            
            	    		insertedCount_talendLogs_DB = new LimitBytesHelper_talendLogs_DB().limitBytePart1(insertedCount_talendLogs_DB,pstmt_talendLogs_DB);
            	    	
    			
			    batchSizeCounter_talendLogs_DB = 0;
			}
    		

    	////////////commit every////////////
    			

 


	tos_count_talendLogs_DB++;

/**
 * [talendLogs_DB main ] stop
 */
	
	/**
	 * [talendLogs_DB process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_DB";
	
	currentComponent="talendLogs_DB";

	

 



/**
 * [talendLogs_DB process_data_begin ] stop
 */
	
	/**
	 * [talendLogs_DB process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_DB";
	
	currentComponent="talendLogs_DB";

	

 



/**
 * [talendLogs_DB process_data_end ] stop
 */



	
	/**
	 * [talendLogs_LOGS process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	

 



/**
 * [talendLogs_LOGS process_data_end ] stop
 */
	
	/**
	 * [talendLogs_LOGS end ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	
	}
} catch (Exception e_talendLogs_LOGS) {
	logIgnoredError(String.format("talendLogs_LOGS - tLogCatcher failed to process log message(s) due to internal error: %s", e_talendLogs_LOGS), e_talendLogs_LOGS);
}

 

ok_Hash.put("talendLogs_LOGS", true);
end_Hash.put("talendLogs_LOGS", System.currentTimeMillis());




/**
 * [talendLogs_LOGS end ] stop
 */

	
	/**
	 * [talendLogs_DB end ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_DB";
	
	currentComponent="talendLogs_DB";

	



                try {
						int countSum_talendLogs_DB = 0;
						if (pstmt_talendLogs_DB != null && batchSizeCounter_talendLogs_DB > 0) {
							
							for(int countEach_talendLogs_DB: pstmt_talendLogs_DB.executeBatch()) {
								if(countEach_talendLogs_DB == -2 || countEach_talendLogs_DB == -3) {
									break;
								}
								countSum_talendLogs_DB += countEach_talendLogs_DB;
							}
							
						}
            	    	
            	    		insertedCount_talendLogs_DB += countSum_talendLogs_DB;
            	    	
                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_talendLogs_DB = 0;
					for(int countEach_talendLogs_DB: e.getUpdateCounts()) {
						countSum_talendLogs_DB += (countEach_talendLogs_DB < 0 ? 0 : countEach_talendLogs_DB);
					}
					
            	    		insertedCount_talendLogs_DB += countSum_talendLogs_DB;
            	    	
                		System.err.println(e.getMessage());
                	
            	}
        if(pstmt_talendLogs_DB != null) {
			
				SharedDBPreparedStatement.releasePreparedStatement(keyPsmt_talendLogs_DB);
			
        }
    resourceMap.put("statementClosed_talendLogs_DB", true);

	nb_line_deleted_talendLogs_DB=nb_line_deleted_talendLogs_DB+ deletedCount_talendLogs_DB;
	nb_line_update_talendLogs_DB=nb_line_update_talendLogs_DB + updatedCount_talendLogs_DB;
	nb_line_inserted_talendLogs_DB=nb_line_inserted_talendLogs_DB + insertedCount_talendLogs_DB;
	nb_line_rejected_talendLogs_DB=nb_line_rejected_talendLogs_DB + rejectedCount_talendLogs_DB;
	
        globalMap.put("talendLogs_DB_NB_LINE",nb_line_talendLogs_DB);
        globalMap.put("talendLogs_DB_NB_LINE_UPDATED",nb_line_update_talendLogs_DB);
        globalMap.put("talendLogs_DB_NB_LINE_INSERTED",nb_line_inserted_talendLogs_DB);
        globalMap.put("talendLogs_DB_NB_LINE_DELETED",nb_line_deleted_talendLogs_DB);
        globalMap.put("talendLogs_DB_NB_LINE_REJECTED", nb_line_rejected_talendLogs_DB);
    
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Main");
			  	}
			  	
 

ok_Hash.put("talendLogs_DB", true);
end_Hash.put("talendLogs_DB", System.currentTimeMillis());




/**
 * [talendLogs_DB end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:talendLogs_LOGS:sub_ok_talendLogs_connectionStatsLogs_Commit", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("sub_ok_talendLogs_connectionStatsLogs_Commit", 0, "ok");
								} 
							
							connectionStatsLogs_CommitProcess(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [talendLogs_LOGS finally ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	

 



/**
 * [talendLogs_LOGS finally ] stop
 */

	
	/**
	 * [talendLogs_DB finally ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_DB";
	
	currentComponent="talendLogs_DB";

	



    if (resourceMap.get("statementClosed_talendLogs_DB") == null) {
                java.sql.PreparedStatement pstmtToClose_talendLogs_DB = null;
                if ((pstmtToClose_talendLogs_DB = (java.sql.PreparedStatement) resourceMap.remove("pstmt_talendLogs_DB")) != null) {
                    pstmtToClose_talendLogs_DB.close();
                }
    }
 



/**
 * [talendLogs_DB finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("talendLogs_LOGS_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final MASTERFILE_EXTRACT_PRODUCTS_1 MASTERFILE_EXTRACT_PRODUCTS_1Class = new MASTERFILE_EXTRACT_PRODUCTS_1();

        int exitCode = MASTERFILE_EXTRACT_PRODUCTS_1Class.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = MASTERFILE_EXTRACT_PRODUCTS_1.class.getClassLoader().getResourceAsStream("dev/masterfile_extract_products_1_0_11/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = MASTERFILE_EXTRACT_PRODUCTS_1.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("ErrorHeader", "id_String");
                            context.ErrorHeader=(String) context.getProperty("ErrorHeader");
                        context.setContextType("hasErrorHeader", "id_Boolean");
                            try{
                                context.hasErrorHeader=routines.system.ParserUtils.parseTo_Boolean (context.getProperty("hasErrorHeader"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "hasErrorHeader", e.getMessage()));
                                context.hasErrorHeader=null;
                            }
                        context.setContextType("dateValidation", "id_String");
                            context.dateValidation=(String) context.getProperty("dateValidation");
                        context.setContextType("timeValidation", "id_String");
                            context.timeValidation=(String) context.getProperty("timeValidation");
                        context.setContextType("ReferentielPath", "id_String");
                            context.ReferentielPath=(String) context.getProperty("ReferentielPath");
                        context.setContextType("IntegrationExcelPath", "id_String");
                            context.IntegrationExcelPath=(String) context.getProperty("IntegrationExcelPath");
                        context.setContextType("ExcelFileName", "id_String");
                            context.ExcelFileName=(String) context.getProperty("ExcelFileName");
                        context.setContextType("LogPath", "id_String");
                            context.LogPath=(String) context.getProperty("LogPath");
                        context.setContextType("isNike", "id_Boolean");
                            try{
                                context.isNike=routines.system.ParserUtils.parseTo_Boolean (context.getProperty("isNike"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "isNike", e.getMessage()));
                                context.isNike=null;
                            }
                        context.setContextType("ExtractPath", "id_String");
                            context.ExtractPath=(String) context.getProperty("ExtractPath");
                        context.setContextType("ExtractPathHBE", "id_String");
                            context.ExtractPathHBE=(String) context.getProperty("ExtractPathHBE");
                        context.setContextType("ExtractPathOTHER", "id_String");
                            context.ExtractPathOTHER=(String) context.getProperty("ExtractPathOTHER");
                        context.setContextType("errorFile", "id_String");
                            context.errorFile=(String) context.getProperty("errorFile");
                        context.setContextType("CreationDate", "id_String");
                            context.CreationDate=(String) context.getProperty("CreationDate");
                        context.setContextType("SQLSERVER_Server", "id_String");
                            context.SQLSERVER_Server=(String) context.getProperty("SQLSERVER_Server");
                        context.setContextType("SQLSERVER_Password", "id_Password");
                            String pwd_SQLSERVER_Password_value = context.getProperty("SQLSERVER_Password");
                            context.SQLSERVER_Password = null;
                            if(pwd_SQLSERVER_Password_value!=null) {
                                if(context_param.containsKey("SQLSERVER_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.SQLSERVER_Password = pwd_SQLSERVER_Password_value;
                                } else if (!pwd_SQLSERVER_Password_value.isEmpty()) {
                                    try {
                                        context.SQLSERVER_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_SQLSERVER_Password_value);
                                        context.put("SQLSERVER_Password",context.SQLSERVER_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        context.setContextType("SQLSERVER_AdditionalParams", "id_String");
                            context.SQLSERVER_AdditionalParams=(String) context.getProperty("SQLSERVER_AdditionalParams");
                        context.setContextType("SQLSERVER_Database", "id_String");
                            context.SQLSERVER_Database=(String) context.getProperty("SQLSERVER_Database");
                        context.setContextType("SQLSERVER_Port", "id_String");
                            context.SQLSERVER_Port=(String) context.getProperty("SQLSERVER_Port");
                        context.setContextType("SQLSERVER_Schema", "id_String");
                            context.SQLSERVER_Schema=(String) context.getProperty("SQLSERVER_Schema");
                        context.setContextType("SQLSERVER_Login", "id_String");
                            context.SQLSERVER_Login=(String) context.getProperty("SQLSERVER_Login");
                        context.setContextType("SQLSERVER_LOG_Schema", "id_String");
                            context.SQLSERVER_LOG_Schema=(String) context.getProperty("SQLSERVER_LOG_Schema");
                        context.setContextType("SQLSERVER_LOG_Server", "id_String");
                            context.SQLSERVER_LOG_Server=(String) context.getProperty("SQLSERVER_LOG_Server");
                        context.setContextType("SQLSERVER_LOG_AdditionalParams", "id_String");
                            context.SQLSERVER_LOG_AdditionalParams=(String) context.getProperty("SQLSERVER_LOG_AdditionalParams");
                        context.setContextType("SQLSERVER_LOG_Login", "id_String");
                            context.SQLSERVER_LOG_Login=(String) context.getProperty("SQLSERVER_LOG_Login");
                        context.setContextType("SQLSERVER_LOG_Port", "id_String");
                            context.SQLSERVER_LOG_Port=(String) context.getProperty("SQLSERVER_LOG_Port");
                        context.setContextType("SQLSERVER_LOG_Database", "id_String");
                            context.SQLSERVER_LOG_Database=(String) context.getProperty("SQLSERVER_LOG_Database");
                        context.setContextType("SQLSERVER_LOG_Password", "id_Password");
                            String pwd_SQLSERVER_LOG_Password_value = context.getProperty("SQLSERVER_LOG_Password");
                            context.SQLSERVER_LOG_Password = null;
                            if(pwd_SQLSERVER_LOG_Password_value!=null) {
                                if(context_param.containsKey("SQLSERVER_LOG_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.SQLSERVER_LOG_Password = pwd_SQLSERVER_LOG_Password_value;
                                } else if (!pwd_SQLSERVER_LOG_Password_value.isEmpty()) {
                                    try {
                                        context.SQLSERVER_LOG_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_SQLSERVER_LOG_Password_value);
                                        context.put("SQLSERVER_LOG_Password",context.SQLSERVER_LOG_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("ErrorHeader")) {
                context.ErrorHeader = (String) parentContextMap.get("ErrorHeader");
            }if (parentContextMap.containsKey("hasErrorHeader")) {
                context.hasErrorHeader = (Boolean) parentContextMap.get("hasErrorHeader");
            }if (parentContextMap.containsKey("dateValidation")) {
                context.dateValidation = (String) parentContextMap.get("dateValidation");
            }if (parentContextMap.containsKey("timeValidation")) {
                context.timeValidation = (String) parentContextMap.get("timeValidation");
            }if (parentContextMap.containsKey("ReferentielPath")) {
                context.ReferentielPath = (String) parentContextMap.get("ReferentielPath");
            }if (parentContextMap.containsKey("IntegrationExcelPath")) {
                context.IntegrationExcelPath = (String) parentContextMap.get("IntegrationExcelPath");
            }if (parentContextMap.containsKey("ExcelFileName")) {
                context.ExcelFileName = (String) parentContextMap.get("ExcelFileName");
            }if (parentContextMap.containsKey("LogPath")) {
                context.LogPath = (String) parentContextMap.get("LogPath");
            }if (parentContextMap.containsKey("isNike")) {
                context.isNike = (Boolean) parentContextMap.get("isNike");
            }if (parentContextMap.containsKey("ExtractPath")) {
                context.ExtractPath = (String) parentContextMap.get("ExtractPath");
            }if (parentContextMap.containsKey("ExtractPathHBE")) {
                context.ExtractPathHBE = (String) parentContextMap.get("ExtractPathHBE");
            }if (parentContextMap.containsKey("ExtractPathOTHER")) {
                context.ExtractPathOTHER = (String) parentContextMap.get("ExtractPathOTHER");
            }if (parentContextMap.containsKey("errorFile")) {
                context.errorFile = (String) parentContextMap.get("errorFile");
            }if (parentContextMap.containsKey("CreationDate")) {
                context.CreationDate = (String) parentContextMap.get("CreationDate");
            }if (parentContextMap.containsKey("SQLSERVER_Server")) {
                context.SQLSERVER_Server = (String) parentContextMap.get("SQLSERVER_Server");
            }if (parentContextMap.containsKey("SQLSERVER_Password")) {
                context.SQLSERVER_Password = (java.lang.String) parentContextMap.get("SQLSERVER_Password");
            }if (parentContextMap.containsKey("SQLSERVER_AdditionalParams")) {
                context.SQLSERVER_AdditionalParams = (String) parentContextMap.get("SQLSERVER_AdditionalParams");
            }if (parentContextMap.containsKey("SQLSERVER_Database")) {
                context.SQLSERVER_Database = (String) parentContextMap.get("SQLSERVER_Database");
            }if (parentContextMap.containsKey("SQLSERVER_Port")) {
                context.SQLSERVER_Port = (String) parentContextMap.get("SQLSERVER_Port");
            }if (parentContextMap.containsKey("SQLSERVER_Schema")) {
                context.SQLSERVER_Schema = (String) parentContextMap.get("SQLSERVER_Schema");
            }if (parentContextMap.containsKey("SQLSERVER_Login")) {
                context.SQLSERVER_Login = (String) parentContextMap.get("SQLSERVER_Login");
            }if (parentContextMap.containsKey("SQLSERVER_LOG_Schema")) {
                context.SQLSERVER_LOG_Schema = (String) parentContextMap.get("SQLSERVER_LOG_Schema");
            }if (parentContextMap.containsKey("SQLSERVER_LOG_Server")) {
                context.SQLSERVER_LOG_Server = (String) parentContextMap.get("SQLSERVER_LOG_Server");
            }if (parentContextMap.containsKey("SQLSERVER_LOG_AdditionalParams")) {
                context.SQLSERVER_LOG_AdditionalParams = (String) parentContextMap.get("SQLSERVER_LOG_AdditionalParams");
            }if (parentContextMap.containsKey("SQLSERVER_LOG_Login")) {
                context.SQLSERVER_LOG_Login = (String) parentContextMap.get("SQLSERVER_LOG_Login");
            }if (parentContextMap.containsKey("SQLSERVER_LOG_Port")) {
                context.SQLSERVER_LOG_Port = (String) parentContextMap.get("SQLSERVER_LOG_Port");
            }if (parentContextMap.containsKey("SQLSERVER_LOG_Database")) {
                context.SQLSERVER_LOG_Database = (String) parentContextMap.get("SQLSERVER_LOG_Database");
            }if (parentContextMap.containsKey("SQLSERVER_LOG_Password")) {
                context.SQLSERVER_LOG_Password = (java.lang.String) parentContextMap.get("SQLSERVER_LOG_Password");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("SQLSERVER_Password");
			parametersToEncrypt.add("SQLSERVER_LOG_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;preStaLogConProcess(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_preStaLogCon) {
globalMap.put("preStaLogCon_SUBPROCESS_STATE", -1);

e_preStaLogCon.printStackTrace();

}
try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}



this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tDBInput_5Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_5) {
globalMap.put("tDBInput_5_SUBPROCESS_STATE", -1);

e_tDBInput_5.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : MASTERFILE_EXTRACT_PRODUCTS_1");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_connectionStatsLogs");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_connectionStatsLogs", globalMap.get("conn_connectionStatsLogs"));







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     1677817 characters generated by Talend Open Studio for Data Integration 
 *     on the 2 janvier 2024 14:22:20 GMT
 ************************************************************************************************/