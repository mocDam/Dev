// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package dev.extract_for_dynamics_price_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJavaRow_1
	//import java.util.List;
import java.util.*;
import java.lang.reflect.*;


@SuppressWarnings("unused")

/**
 * Job: EXTRACT_FOR_DYNAMICS_PRICE Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.3.1.20191031_1204-M3
 * @status DEV
 */
public class EXTRACT_FOR_DYNAMICS_PRICE implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(ErrorHeader != null){
				
					this.setProperty("ErrorHeader", ErrorHeader.toString());
				
			}
			
			if(hasErrorHeader != null){
				
					this.setProperty("hasErrorHeader", hasErrorHeader.toString());
				
			}
			
			if(dateValidation != null){
				
					this.setProperty("dateValidation", dateValidation.toString());
				
			}
			
			if(timeValidation != null){
				
					this.setProperty("timeValidation", timeValidation.toString());
				
			}
			
			if(ReferentielPath != null){
				
					this.setProperty("ReferentielPath", ReferentielPath.toString());
				
			}
			
			if(IntegrationExcelPath != null){
				
					this.setProperty("IntegrationExcelPath", IntegrationExcelPath.toString());
				
			}
			
			if(ExcelFileName != null){
				
					this.setProperty("ExcelFileName", ExcelFileName.toString());
				
			}
			
			if(LogPath != null){
				
					this.setProperty("LogPath", LogPath.toString());
				
			}
			
			if(isNike != null){
				
					this.setProperty("isNike", isNike.toString());
				
			}
			
			if(ExtractPath != null){
				
					this.setProperty("ExtractPath", ExtractPath.toString());
				
			}
			
		}

public String ErrorHeader;
public String getErrorHeader(){
	return this.ErrorHeader;
}
public Boolean hasErrorHeader;
public Boolean getHasErrorHeader(){
	return this.hasErrorHeader;
}
public String dateValidation;
public String getDateValidation(){
	return this.dateValidation;
}
public String timeValidation;
public String getTimeValidation(){
	return this.timeValidation;
}
public String ReferentielPath;
public String getReferentielPath(){
	return this.ReferentielPath;
}
public String IntegrationExcelPath;
public String getIntegrationExcelPath(){
	return this.IntegrationExcelPath;
}
public String ExcelFileName;
public String getExcelFileName(){
	return this.ExcelFileName;
}
public String LogPath;
public String getLogPath(){
	return this.LogPath;
}
public Boolean isNike;
public Boolean getIsNike(){
	return this.isNike;
}
public String ExtractPath;
public String getExtractPath(){
	return this.ExtractPath;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "EXTRACT_FOR_DYNAMICS_PRICE";
	private final String projectName = "DEV";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				EXTRACT_FOR_DYNAMICS_PRICE.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(EXTRACT_FOR_DYNAMICS_PRICE.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tFileInputExcel_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputExcel_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_20_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_21_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_19_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_23_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_20_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_24_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_21_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_25_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_22_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_26_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_23_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_27_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_24_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_28_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_25_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_29_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_26_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_30_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_27_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_31_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_28_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_19_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_32_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_29_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_20_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_33_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_30_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_21_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_34_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_31_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_22_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSetGlobalVar_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSetGlobalVar_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUnite_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_22_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputExcel_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_19_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_20_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_21_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_22_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row42_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputExcel_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputExcel_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSetGlobalVar_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_9_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];

	
			    public Object ExcelSchema;

				public Object getExcelSchema () {
					return this.ExcelSchema;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE) {

        	try {

        		int length = 0;
		
						this.ExcelSchema = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.ExcelSchema);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ExcelSchema="+String.valueOf(ExcelSchema));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];

	
			    public String newColumn;

				public String getNewColumn () {
					return this.newColumn;
				}
				
			    public String newColumn1;

				public String getNewColumn1 () {
					return this.newColumn1;
				}
				
			    public String newColumn2;

				public String getNewColumn2 () {
					return this.newColumn2;
				}
				
			    public String newColumn3;

				public String getNewColumn3 () {
					return this.newColumn3;
				}
				
			    public String newColumn4;

				public String getNewColumn4 () {
					return this.newColumn4;
				}
				
			    public String newColumn5;

				public String getNewColumn5 () {
					return this.newColumn5;
				}
				
			    public String newColumn6;

				public String getNewColumn6 () {
					return this.newColumn6;
				}
				
			    public String newColumn7;

				public String getNewColumn7 () {
					return this.newColumn7;
				}
				
			    public String newColumn8;

				public String getNewColumn8 () {
					return this.newColumn8;
				}
				
			    public String newColumn9;

				public String getNewColumn9 () {
					return this.newColumn9;
				}
				
			    public String newColumn10;

				public String getNewColumn10 () {
					return this.newColumn10;
				}
				
			    public String newColumn11;

				public String getNewColumn11 () {
					return this.newColumn11;
				}
				
			    public String newColumn12;

				public String getNewColumn12 () {
					return this.newColumn12;
				}
				
			    public String newColumn13;

				public String getNewColumn13 () {
					return this.newColumn13;
				}
				
			    public String newColumn14;

				public String getNewColumn14 () {
					return this.newColumn14;
				}
				
			    public String newColumn15;

				public String getNewColumn15 () {
					return this.newColumn15;
				}
				
			    public String newColumn16;

				public String getNewColumn16 () {
					return this.newColumn16;
				}
				
			    public String newColumn17;

				public String getNewColumn17 () {
					return this.newColumn17;
				}
				
			    public String newColumn18;

				public String getNewColumn18 () {
					return this.newColumn18;
				}
				
			    public String newColumn19;

				public String getNewColumn19 () {
					return this.newColumn19;
				}
				
			    public String newColumn20;

				public String getNewColumn20 () {
					return this.newColumn20;
				}
				
			    public String newColumn21;

				public String getNewColumn21 () {
					return this.newColumn21;
				}
				
			    public String newColumn22;

				public String getNewColumn22 () {
					return this.newColumn22;
				}
				
			    public String newColumn23;

				public String getNewColumn23 () {
					return this.newColumn23;
				}
				
			    public String newColumn24;

				public String getNewColumn24 () {
					return this.newColumn24;
				}
				
			    public String newColumn25;

				public String getNewColumn25 () {
					return this.newColumn25;
				}
				
			    public String newColumn26;

				public String getNewColumn26 () {
					return this.newColumn26;
				}
				
			    public String newColumn27;

				public String getNewColumn27 () {
					return this.newColumn27;
				}
				
			    public String newColumn28;

				public String getNewColumn28 () {
					return this.newColumn28;
				}
				
			    public String newColumn29;

				public String getNewColumn29 () {
					return this.newColumn29;
				}
				
			    public String newColumn30;

				public String getNewColumn30 () {
					return this.newColumn30;
				}
				
			    public String newColumn31;

				public String getNewColumn31 () {
					return this.newColumn31;
				}
				
			    public String newColumn32;

				public String getNewColumn32 () {
					return this.newColumn32;
				}
				
			    public String newColumn33;

				public String getNewColumn33 () {
					return this.newColumn33;
				}
				
			    public String newColumn34;

				public String getNewColumn34 () {
					return this.newColumn34;
				}
				
			    public String newColumn35;

				public String getNewColumn35 () {
					return this.newColumn35;
				}
				
			    public String newColumn36;

				public String getNewColumn36 () {
					return this.newColumn36;
				}
				
			    public String newColumn37;

				public String getNewColumn37 () {
					return this.newColumn37;
				}
				
			    public String newColumn38;

				public String getNewColumn38 () {
					return this.newColumn38;
				}
				
			    public String newColumn39;

				public String getNewColumn39 () {
					return this.newColumn39;
				}
				
			    public String newColumn40;

				public String getNewColumn40 () {
					return this.newColumn40;
				}
				
			    public String newColumn41;

				public String getNewColumn41 () {
					return this.newColumn41;
				}
				
			    public String newColumn42;

				public String getNewColumn42 () {
					return this.newColumn42;
				}
				
			    public String newColumn43;

				public String getNewColumn43 () {
					return this.newColumn43;
				}
				
			    public String newColumn44;

				public String getNewColumn44 () {
					return this.newColumn44;
				}
				
			    public String newColumn45;

				public String getNewColumn45 () {
					return this.newColumn45;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE) {

        	try {

        		int length = 0;
		
					this.newColumn = readString(dis);
					
					this.newColumn1 = readString(dis);
					
					this.newColumn2 = readString(dis);
					
					this.newColumn3 = readString(dis);
					
					this.newColumn4 = readString(dis);
					
					this.newColumn5 = readString(dis);
					
					this.newColumn6 = readString(dis);
					
					this.newColumn7 = readString(dis);
					
					this.newColumn8 = readString(dis);
					
					this.newColumn9 = readString(dis);
					
					this.newColumn10 = readString(dis);
					
					this.newColumn11 = readString(dis);
					
					this.newColumn12 = readString(dis);
					
					this.newColumn13 = readString(dis);
					
					this.newColumn14 = readString(dis);
					
					this.newColumn15 = readString(dis);
					
					this.newColumn16 = readString(dis);
					
					this.newColumn17 = readString(dis);
					
					this.newColumn18 = readString(dis);
					
					this.newColumn19 = readString(dis);
					
					this.newColumn20 = readString(dis);
					
					this.newColumn21 = readString(dis);
					
					this.newColumn22 = readString(dis);
					
					this.newColumn23 = readString(dis);
					
					this.newColumn24 = readString(dis);
					
					this.newColumn25 = readString(dis);
					
					this.newColumn26 = readString(dis);
					
					this.newColumn27 = readString(dis);
					
					this.newColumn28 = readString(dis);
					
					this.newColumn29 = readString(dis);
					
					this.newColumn30 = readString(dis);
					
					this.newColumn31 = readString(dis);
					
					this.newColumn32 = readString(dis);
					
					this.newColumn33 = readString(dis);
					
					this.newColumn34 = readString(dis);
					
					this.newColumn35 = readString(dis);
					
					this.newColumn36 = readString(dis);
					
					this.newColumn37 = readString(dis);
					
					this.newColumn38 = readString(dis);
					
					this.newColumn39 = readString(dis);
					
					this.newColumn40 = readString(dis);
					
					this.newColumn41 = readString(dis);
					
					this.newColumn42 = readString(dis);
					
					this.newColumn43 = readString(dis);
					
					this.newColumn44 = readString(dis);
					
					this.newColumn45 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.newColumn,dos);
					
					// String
				
						writeString(this.newColumn1,dos);
					
					// String
				
						writeString(this.newColumn2,dos);
					
					// String
				
						writeString(this.newColumn3,dos);
					
					// String
				
						writeString(this.newColumn4,dos);
					
					// String
				
						writeString(this.newColumn5,dos);
					
					// String
				
						writeString(this.newColumn6,dos);
					
					// String
				
						writeString(this.newColumn7,dos);
					
					// String
				
						writeString(this.newColumn8,dos);
					
					// String
				
						writeString(this.newColumn9,dos);
					
					// String
				
						writeString(this.newColumn10,dos);
					
					// String
				
						writeString(this.newColumn11,dos);
					
					// String
				
						writeString(this.newColumn12,dos);
					
					// String
				
						writeString(this.newColumn13,dos);
					
					// String
				
						writeString(this.newColumn14,dos);
					
					// String
				
						writeString(this.newColumn15,dos);
					
					// String
				
						writeString(this.newColumn16,dos);
					
					// String
				
						writeString(this.newColumn17,dos);
					
					// String
				
						writeString(this.newColumn18,dos);
					
					// String
				
						writeString(this.newColumn19,dos);
					
					// String
				
						writeString(this.newColumn20,dos);
					
					// String
				
						writeString(this.newColumn21,dos);
					
					// String
				
						writeString(this.newColumn22,dos);
					
					// String
				
						writeString(this.newColumn23,dos);
					
					// String
				
						writeString(this.newColumn24,dos);
					
					// String
				
						writeString(this.newColumn25,dos);
					
					// String
				
						writeString(this.newColumn26,dos);
					
					// String
				
						writeString(this.newColumn27,dos);
					
					// String
				
						writeString(this.newColumn28,dos);
					
					// String
				
						writeString(this.newColumn29,dos);
					
					// String
				
						writeString(this.newColumn30,dos);
					
					// String
				
						writeString(this.newColumn31,dos);
					
					// String
				
						writeString(this.newColumn32,dos);
					
					// String
				
						writeString(this.newColumn33,dos);
					
					// String
				
						writeString(this.newColumn34,dos);
					
					// String
				
						writeString(this.newColumn35,dos);
					
					// String
				
						writeString(this.newColumn36,dos);
					
					// String
				
						writeString(this.newColumn37,dos);
					
					// String
				
						writeString(this.newColumn38,dos);
					
					// String
				
						writeString(this.newColumn39,dos);
					
					// String
				
						writeString(this.newColumn40,dos);
					
					// String
				
						writeString(this.newColumn41,dos);
					
					// String
				
						writeString(this.newColumn42,dos);
					
					// String
				
						writeString(this.newColumn43,dos);
					
					// String
				
						writeString(this.newColumn44,dos);
					
					// String
				
						writeString(this.newColumn45,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("newColumn="+newColumn);
		sb.append(",newColumn1="+newColumn1);
		sb.append(",newColumn2="+newColumn2);
		sb.append(",newColumn3="+newColumn3);
		sb.append(",newColumn4="+newColumn4);
		sb.append(",newColumn5="+newColumn5);
		sb.append(",newColumn6="+newColumn6);
		sb.append(",newColumn7="+newColumn7);
		sb.append(",newColumn8="+newColumn8);
		sb.append(",newColumn9="+newColumn9);
		sb.append(",newColumn10="+newColumn10);
		sb.append(",newColumn11="+newColumn11);
		sb.append(",newColumn12="+newColumn12);
		sb.append(",newColumn13="+newColumn13);
		sb.append(",newColumn14="+newColumn14);
		sb.append(",newColumn15="+newColumn15);
		sb.append(",newColumn16="+newColumn16);
		sb.append(",newColumn17="+newColumn17);
		sb.append(",newColumn18="+newColumn18);
		sb.append(",newColumn19="+newColumn19);
		sb.append(",newColumn20="+newColumn20);
		sb.append(",newColumn21="+newColumn21);
		sb.append(",newColumn22="+newColumn22);
		sb.append(",newColumn23="+newColumn23);
		sb.append(",newColumn24="+newColumn24);
		sb.append(",newColumn25="+newColumn25);
		sb.append(",newColumn26="+newColumn26);
		sb.append(",newColumn27="+newColumn27);
		sb.append(",newColumn28="+newColumn28);
		sb.append(",newColumn29="+newColumn29);
		sb.append(",newColumn30="+newColumn30);
		sb.append(",newColumn31="+newColumn31);
		sb.append(",newColumn32="+newColumn32);
		sb.append(",newColumn33="+newColumn33);
		sb.append(",newColumn34="+newColumn34);
		sb.append(",newColumn35="+newColumn35);
		sb.append(",newColumn36="+newColumn36);
		sb.append(",newColumn37="+newColumn37);
		sb.append(",newColumn38="+newColumn38);
		sb.append(",newColumn39="+newColumn39);
		sb.append(",newColumn40="+newColumn40);
		sb.append(",newColumn41="+newColumn41);
		sb.append(",newColumn42="+newColumn42);
		sb.append(",newColumn43="+newColumn43);
		sb.append(",newColumn44="+newColumn44);
		sb.append(",newColumn45="+newColumn45);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputExcel_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
row2Struct row2 = new row2Struct();





	
	/**
	 * [tLogRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_1", false);
		start_Hash.put("tLogRow_1", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tLogRow_1 = 0;
		

	///////////////////////
	
         class Util_tLogRow_1 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[1];

        public void addRow(String[] row) {

            for (int i = 0; i < 1; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 0 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 0 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);	                

                  
                    //last column
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() - fillChars[1].length()+2; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_1 util_tLogRow_1 = new Util_tLogRow_1();
        util_tLogRow_1.setTableName("tLogRow_1");
        util_tLogRow_1.addRow(new String[]{"ExcelSchema",});        
 		StringBuilder strBuffer_tLogRow_1 = null;
		int nb_line_tLogRow_1 = 0;
///////////////////////    			



 



/**
 * [tLogRow_1 begin ] stop
 */



	
	/**
	 * [tJavaRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_1", false);
		start_Hash.put("tJavaRow_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tJavaRow_1 = 0;
		

int nb_line_tJavaRow_1 = 0;

 



/**
 * [tJavaRow_1 begin ] stop
 */



	
	/**
	 * [tFileInputExcel_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputExcel_1", false);
		start_Hash.put("tFileInputExcel_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputExcel_1";

	
		int tos_count_tFileInputExcel_1 = 0;
		

 
	final String decryptedPassword_tFileInputExcel_1 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[pE9vzhuMm5M5dbCNIPecGGvmlG/VI85bDGLRyQ==]");
        String password_tFileInputExcel_1 = decryptedPassword_tFileInputExcel_1;
        if (password_tFileInputExcel_1.isEmpty()){
            password_tFileInputExcel_1 = null;
        }
			class RegexUtil_tFileInputExcel_1 {

		    	public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, String oneSheetName, boolean useRegex) {

			        java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();

			        if(useRegex){//this part process the regex issue

				        java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(oneSheetName);
				        for (org.apache.poi.ss.usermodel.Sheet sheet : workbook) {
				            String sheetName = sheet.getSheetName();
				            java.util.regex.Matcher matcher = pattern.matcher(sheetName);
				            if (matcher.matches()) {
				            	if(sheet != null){
				                	list.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet);
				                }
				            }
				        }

			        }else{
			        	org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook.getSheet(oneSheetName);
		            	if(sheet != null){
		                	list.add(sheet);
		                }

			        }

			        return list;
			    }

			    public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, int index, boolean useRegex) {
			    	java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list =  new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
			    	org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook.getSheetAt(index);
	            	if(sheet != null){
	                	list.add(sheet);
	                }
			    	return list;
			    }

			}
		RegexUtil_tFileInputExcel_1 regexUtil_tFileInputExcel_1 = new RegexUtil_tFileInputExcel_1();

		Object source_tFileInputExcel_1 = context.IntegrationExcelPath + context.ExcelFileName;
		org.apache.poi.xssf.usermodel.XSSFWorkbook workbook_tFileInputExcel_1 = null;

		if(source_tFileInputExcel_1 instanceof String){
			workbook_tFileInputExcel_1 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory.create(new java.io.File((String)source_tFileInputExcel_1), password_tFileInputExcel_1);
		} else if(source_tFileInputExcel_1 instanceof java.io.InputStream) {
     		workbook_tFileInputExcel_1 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory.create((java.io.InputStream)source_tFileInputExcel_1, password_tFileInputExcel_1);
		} else{
			workbook_tFileInputExcel_1 = null;
			throw new java.lang.Exception("The data source should be specified as Inputstream or File Path!");
		}
		try {

		java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_tFileInputExcel_1 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
        sheetList_tFileInputExcel_1.addAll(regexUtil_tFileInputExcel_1.getSheets(workbook_tFileInputExcel_1, 0, false));
    	if(sheetList_tFileInputExcel_1.size() <= 0){
            throw new RuntimeException("Special sheets not exist!");
        }

		java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_FilterNull_tFileInputExcel_1 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
		for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_FilterNull_tFileInputExcel_1 : sheetList_tFileInputExcel_1) {
			if(sheet_FilterNull_tFileInputExcel_1!=null && sheetList_FilterNull_tFileInputExcel_1.iterator()!=null && sheet_FilterNull_tFileInputExcel_1.iterator().hasNext()){
				sheetList_FilterNull_tFileInputExcel_1.add(sheet_FilterNull_tFileInputExcel_1);
			}
		}
		sheetList_tFileInputExcel_1 = sheetList_FilterNull_tFileInputExcel_1;
	if(sheetList_tFileInputExcel_1.size()>0){
		int nb_line_tFileInputExcel_1 = 0;

        int begin_line_tFileInputExcel_1 = 0;

        int footer_input_tFileInputExcel_1 = 0;

        int end_line_tFileInputExcel_1=0;
        for(org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_1:sheetList_tFileInputExcel_1){
			end_line_tFileInputExcel_1+=(sheet_tFileInputExcel_1.getLastRowNum()+1);
        }
        end_line_tFileInputExcel_1 -= footer_input_tFileInputExcel_1;
        int limit_tFileInputExcel_1 = 1;
        int start_column_tFileInputExcel_1 = 1-1;
        int end_column_tFileInputExcel_1 = -1;
        Integer lastColumn_tFileInputExcel_1 = 47;
        if(lastColumn_tFileInputExcel_1!=null){
        	end_column_tFileInputExcel_1 = lastColumn_tFileInputExcel_1.intValue();
        }

        org.apache.poi.xssf.usermodel.XSSFRow row_tFileInputExcel_1 = null;
        org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_1 = sheetList_tFileInputExcel_1.get(0);
        int rowCount_tFileInputExcel_1 = 0;
        int sheetIndex_tFileInputExcel_1 = 0;
        int currentRows_tFileInputExcel_1 = (sheetList_tFileInputExcel_1.get(0).getLastRowNum()+1);

		//for the number format
        java.text.DecimalFormat df_tFileInputExcel_1 = new java.text.DecimalFormat("#.####################################");
        char decimalChar_tFileInputExcel_1 = df_tFileInputExcel_1.getDecimalFormatSymbols().getDecimalSeparator();
		
        for(int i_tFileInputExcel_1 = begin_line_tFileInputExcel_1; i_tFileInputExcel_1 < end_line_tFileInputExcel_1; i_tFileInputExcel_1++){

        	int emptyColumnCount_tFileInputExcel_1 = 0;

        	if (limit_tFileInputExcel_1 != -1 && nb_line_tFileInputExcel_1 >= limit_tFileInputExcel_1) {
        		break;
        	}

            while (i_tFileInputExcel_1 >= rowCount_tFileInputExcel_1 + currentRows_tFileInputExcel_1) {
                rowCount_tFileInputExcel_1 += currentRows_tFileInputExcel_1;
                sheet_tFileInputExcel_1 = sheetList_tFileInputExcel_1.get(++sheetIndex_tFileInputExcel_1);
                currentRows_tFileInputExcel_1 = (sheet_tFileInputExcel_1.getLastRowNum()+1);
            }
            globalMap.put("tFileInputExcel_1_CURRENT_SHEET",sheet_tFileInputExcel_1.getSheetName());
            if (rowCount_tFileInputExcel_1 <= i_tFileInputExcel_1) {
                row_tFileInputExcel_1 = sheet_tFileInputExcel_1.getRow(i_tFileInputExcel_1 - rowCount_tFileInputExcel_1);
            }
		    row1 = null;
					int tempRowLength_tFileInputExcel_1 = 46;
				
				int columnIndex_tFileInputExcel_1 = 0;
			
			String[] temp_row_tFileInputExcel_1 = new String[tempRowLength_tFileInputExcel_1];
			int excel_end_column_tFileInputExcel_1;
			if(row_tFileInputExcel_1==null){
				excel_end_column_tFileInputExcel_1=0;
			}else{
				excel_end_column_tFileInputExcel_1=row_tFileInputExcel_1.getLastCellNum();
			}
			int actual_end_column_tFileInputExcel_1;
			if(end_column_tFileInputExcel_1 == -1){
				actual_end_column_tFileInputExcel_1 = excel_end_column_tFileInputExcel_1;
			}
			else{
				actual_end_column_tFileInputExcel_1 = end_column_tFileInputExcel_1 >	excel_end_column_tFileInputExcel_1 ? excel_end_column_tFileInputExcel_1 : end_column_tFileInputExcel_1;
			}
			org.apache.poi.ss.formula.eval.NumberEval ne_tFileInputExcel_1 = null;
			for(int i=0;i<tempRowLength_tFileInputExcel_1;i++){
				if(i + start_column_tFileInputExcel_1 < actual_end_column_tFileInputExcel_1){
					org.apache.poi.ss.usermodel.Cell cell_tFileInputExcel_1 = row_tFileInputExcel_1.getCell(i + start_column_tFileInputExcel_1);
					if(cell_tFileInputExcel_1!=null){
					switch (cell_tFileInputExcel_1.getCellType()) {
                        case STRING:
                            temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1.getRichStringCellValue().getString();
                            break;
                        case NUMERIC:
                            if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell_tFileInputExcel_1)) {
									temp_row_tFileInputExcel_1[i] =cell_tFileInputExcel_1.getDateCellValue().toString();
                            } else {
                                temp_row_tFileInputExcel_1[i] = df_tFileInputExcel_1.format(cell_tFileInputExcel_1.getNumericCellValue());
                            }
                            break;
                        case BOOLEAN:
                            temp_row_tFileInputExcel_1[i] =String.valueOf(cell_tFileInputExcel_1.getBooleanCellValue());
                            break;
                        case FORMULA:
        					switch (cell_tFileInputExcel_1.getCachedFormulaResultType()) {
                                case STRING:
                                    temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1.getRichStringCellValue().getString();
                                    break;
                                case NUMERIC:
                                    if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell_tFileInputExcel_1)) {
											temp_row_tFileInputExcel_1[i] =cell_tFileInputExcel_1.getDateCellValue().toString();
                                    } else {
	                                    ne_tFileInputExcel_1 = new org.apache.poi.ss.formula.eval.NumberEval(cell_tFileInputExcel_1.getNumericCellValue());
										temp_row_tFileInputExcel_1[i] = ne_tFileInputExcel_1.getStringValue();
                                    }
                                    break;
                                case BOOLEAN:
                                    temp_row_tFileInputExcel_1[i] =String.valueOf(cell_tFileInputExcel_1.getBooleanCellValue());
                                    break;
                                default:
                            		temp_row_tFileInputExcel_1[i] = "";
                            }
                            break;
                        default:
                            temp_row_tFileInputExcel_1[i] = "";
                        }
                	}
                	else{
                		temp_row_tFileInputExcel_1[i]="";
                	}

				}else{
					temp_row_tFileInputExcel_1[i]="";
				}
			}
			boolean whetherReject_tFileInputExcel_1 = false;
			row1 = new row1Struct();
			int curColNum_tFileInputExcel_1 = -1;
			String curColName_tFileInputExcel_1 = "";
			try{
							columnIndex_tFileInputExcel_1 = 0;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn";

				row1.newColumn = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 1;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn1";

				row1.newColumn1 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn1 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 2;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn2";

				row1.newColumn2 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn2 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 3;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn3";

				row1.newColumn3 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn3 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 4;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn4";

				row1.newColumn4 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn4 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 5;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn5";

				row1.newColumn5 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn5 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 6;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn6";

				row1.newColumn6 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn6 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 7;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn7";

				row1.newColumn7 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn7 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 8;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn8";

				row1.newColumn8 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn8 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 9;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn9";

				row1.newColumn9 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn9 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 10;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn10";

				row1.newColumn10 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn10 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 11;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn11";

				row1.newColumn11 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn11 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 12;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn12";

				row1.newColumn12 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn12 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 13;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn13";

				row1.newColumn13 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn13 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 14;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn14";

				row1.newColumn14 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn14 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 15;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn15";

				row1.newColumn15 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn15 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 16;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn16";

				row1.newColumn16 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn16 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 17;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn17";

				row1.newColumn17 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn17 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 18;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn18";

				row1.newColumn18 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn18 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 19;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn19";

				row1.newColumn19 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn19 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 20;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn20";

				row1.newColumn20 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn20 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 21;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn21";

				row1.newColumn21 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn21 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 22;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn22";

				row1.newColumn22 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn22 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 23;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn23";

				row1.newColumn23 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn23 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 24;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn24";

				row1.newColumn24 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn24 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 25;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn25";

				row1.newColumn25 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn25 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 26;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn26";

				row1.newColumn26 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn26 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 27;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn27";

				row1.newColumn27 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn27 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 28;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn28";

				row1.newColumn28 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn28 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 29;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn29";

				row1.newColumn29 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn29 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 30;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn30";

				row1.newColumn30 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn30 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 31;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn31";

				row1.newColumn31 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn31 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 32;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn32";

				row1.newColumn32 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn32 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 33;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn33";

				row1.newColumn33 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn33 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 34;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn34";

				row1.newColumn34 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn34 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 35;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn35";

				row1.newColumn35 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn35 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 36;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn36";

				row1.newColumn36 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn36 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 37;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn37";

				row1.newColumn37 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn37 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 38;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn38";

				row1.newColumn38 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn38 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 39;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn39";

				row1.newColumn39 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn39 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 40;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn40";

				row1.newColumn40 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn40 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 41;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn41";

				row1.newColumn41 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn41 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 42;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn42";

				row1.newColumn42 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn42 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 43;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn43";

				row1.newColumn43 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn43 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 44;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn44";

				row1.newColumn44 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn44 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 45;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn45";

				row1.newColumn45 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn45 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}

				nb_line_tFileInputExcel_1++;
				
			}catch(java.lang.Exception e){
			whetherReject_tFileInputExcel_1 = true;
					 System.err.println(e.getMessage());
					 row1 = null;
			}


		



 



/**
 * [tFileInputExcel_1 begin ] stop
 */
	
	/**
	 * [tFileInputExcel_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_1";

	

 


	tos_count_tFileInputExcel_1++;

/**
 * [tFileInputExcel_1 main ] stop
 */
	
	/**
	 * [tFileInputExcel_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_1";

	

 



/**
 * [tFileInputExcel_1 process_data_begin ] stop
 */
// Start of branch "row1"
if(row1 != null) { 



	
	/**
	 * [tJavaRow_1 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row1");
					}
					

    // code sample:
//
// multiply by 2 the row identifier
// row2.id = row1.id * 2;
//
// lowercase the name
// row2.name = row1.name.toLowerCase();

Map<String, String> fieldMap = (Map<String, String>)globalMap.get("fieldMap");

for( Field f : row1.getClass().getFields() ) {
	if (f.get(row1) != null)
	{
		fieldMap.put((String)f.get(row1), f.getName());
	}
   
}


row2.ExcelSchema = fieldMap;
    nb_line_tJavaRow_1++;   

 


	tos_count_tJavaRow_1++;

/**
 * [tJavaRow_1 main ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 process_data_begin ] stop
 */

	
	/**
	 * [tLogRow_1 main ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row2");
					}
					
///////////////////////		
						

				
				String[] row_tLogRow_1 = new String[1];
   				
	    		if(row2.ExcelSchema != null) { //              
                 row_tLogRow_1[0]=    						    
				                String.valueOf(row2.ExcelSchema)			
					          ;	
							
	    		} //			
    			 

				util_tLogRow_1.addRow(row_tLogRow_1);	
				nb_line_tLogRow_1++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_1++;

/**
 * [tLogRow_1 main ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 process_data_end ] stop
 */

} // End of branch "row1"




	
	/**
	 * [tFileInputExcel_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_1";

	

 



/**
 * [tFileInputExcel_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputExcel_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_1";

	

			}
			
			
			
			globalMap.put("tFileInputExcel_1_NB_LINE",nb_line_tFileInputExcel_1);
			
				}
			
		} finally { 
				
  				if(!(source_tFileInputExcel_1 instanceof java.io.InputStream)){
  					workbook_tFileInputExcel_1.getPackage().revert();
  				}
				
		}	
		
 

ok_Hash.put("tFileInputExcel_1", true);
end_Hash.put("tFileInputExcel_1", System.currentTimeMillis());

   			if (context.hasErrorHeader == false) {
   				
					if(execStat){   
   	 					runStat.updateStatOnConnection("No_Error", 0, "true");
					}
				
    			tFileInputExcel_2Process(globalMap);
   			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("No_Error", 0, "false");
					}   	 
   				}



/**
 * [tFileInputExcel_1 end ] stop
 */

	
	/**
	 * [tJavaRow_1 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

globalMap.put("tJavaRow_1_NB_LINE",nb_line_tJavaRow_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tJavaRow_1", true);
end_Hash.put("tJavaRow_1", System.currentTimeMillis());




/**
 * [tJavaRow_1 end ] stop
 */

	
	/**
	 * [tLogRow_1 end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_1 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_1);
                    }
                    
                    consoleOut_tLogRow_1.println(util_tLogRow_1.format().toString());
                    consoleOut_tLogRow_1.flush();
//////
globalMap.put("tLogRow_1_NB_LINE",nb_line_tLogRow_1);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tLogRow_1", true);
end_Hash.put("tLogRow_1", System.currentTimeMillis());




/**
 * [tLogRow_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputExcel_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_1";

	

 



/**
 * [tFileInputExcel_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 finally ] stop
 */

	
	/**
	 * [tLogRow_1 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", 1);
	}
	


public static class row76Struct implements routines.system.IPersistableRow<row76Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row76Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row75Struct implements routines.system.IPersistableRow<row75Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row75Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0Struct implements routines.system.IPersistableRow<copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row74Struct implements routines.system.IPersistableRow<row74Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row74Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row73Struct implements routines.system.IPersistableRow<row73Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row73Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0Struct implements routines.system.IPersistableRow<copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_full_EUR_FIN_WSPStruct implements routines.system.IPersistableRow<sortie_full_EUR_FIN_WSPStruct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_full_EUR_FIN_WSPStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row70Struct implements routines.system.IPersistableRow<row70Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row70Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row69Struct implements routines.system.IPersistableRow<row69Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row69Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0Struct implements routines.system.IPersistableRow<copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_full_SEK_RRPStruct implements routines.system.IPersistableRow<sortie_full_SEK_RRPStruct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_full_SEK_RRPStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row67Struct implements routines.system.IPersistableRow<row67Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row67Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row68Struct implements routines.system.IPersistableRow<row68Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row68Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0Struct implements routines.system.IPersistableRow<copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_full_SEK_WSPStruct implements routines.system.IPersistableRow<sortie_full_SEK_WSPStruct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_full_SEK_WSPStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row63Struct implements routines.system.IPersistableRow<row63Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row63Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row64Struct implements routines.system.IPersistableRow<row64Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row64Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0Struct implements routines.system.IPersistableRow<copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_full_DKK_WSPStruct implements routines.system.IPersistableRow<sortie_full_DKK_WSPStruct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_full_DKK_WSPStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row62Struct implements routines.system.IPersistableRow<row62Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row62Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row61Struct implements routines.system.IPersistableRow<row61Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row61Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0Struct implements routines.system.IPersistableRow<copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_full_DKK_RRPStruct implements routines.system.IPersistableRow<sortie_full_DKK_RRPStruct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_full_DKK_RRPStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row58Struct implements routines.system.IPersistableRow<row58Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row58Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row57Struct implements routines.system.IPersistableRow<row57Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row57Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0Struct implements routines.system.IPersistableRow<copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_full_nok_rrpStruct implements routines.system.IPersistableRow<sortie_full_nok_rrpStruct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_full_nok_rrpStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row56Struct implements routines.system.IPersistableRow<row56Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row56Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row55Struct implements routines.system.IPersistableRow<row55Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row55Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0Struct implements routines.system.IPersistableRow<copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_full_NOK_WSPStruct implements routines.system.IPersistableRow<sortie_full_NOK_WSPStruct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_full_NOK_WSPStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row50Struct implements routines.system.IPersistableRow<row50Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row50Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row49Struct implements routines.system.IPersistableRow<row49Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row49Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0Struct implements routines.system.IPersistableRow<copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_full_chr_rrpStruct implements routines.system.IPersistableRow<sortie_full_chr_rrpStruct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_full_chr_rrpStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row48Struct implements routines.system.IPersistableRow<row48Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row48Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row47Struct implements routines.system.IPersistableRow<row47Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row47Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfcopyOfsortie_EUR_WSP_0Struct implements routines.system.IPersistableRow<copyOfcopyOfcopyOfsortie_EUR_WSP_0Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfcopyOfsortie_EUR_WSP_0Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_full_CHF_WSPStruct implements routines.system.IPersistableRow<sortie_full_CHF_WSPStruct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_full_CHF_WSPStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row46Struct implements routines.system.IPersistableRow<row46Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row46Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row45Struct implements routines.system.IPersistableRow<row45Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row45Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfsortie_EUR_WSP_0Struct implements routines.system.IPersistableRow<copyOfcopyOfsortie_EUR_WSP_0Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfsortie_EUR_WSP_0Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_full_GBP_RRPStruct implements routines.system.IPersistableRow<sortie_full_GBP_RRPStruct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_full_GBP_RRPStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row44Struct implements routines.system.IPersistableRow<row44Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row44Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row43Struct implements routines.system.IPersistableRow<row43Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row43Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfsortie_EUR_WSP_0Struct implements routines.system.IPersistableRow<copyOfsortie_EUR_WSP_0Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfsortie_EUR_WSP_0Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_full_gbp_wspStruct implements routines.system.IPersistableRow<sortie_full_gbp_wspStruct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_full_gbp_wspStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row38Struct implements routines.system.IPersistableRow<row38Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row38Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row36Struct implements routines.system.IPersistableRow<row36Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row36Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfsortie_EUR_WSPStruct implements routines.system.IPersistableRow<copyOfsortie_EUR_WSPStruct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfsortie_EUR_WSPStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_full_rrp_eurStruct implements routines.system.IPersistableRow<sortie_full_rrp_eurStruct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_full_rrp_eurStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row37Struct implements routines.system.IPersistableRow<row37Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row37Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row35Struct implements routines.system.IPersistableRow<row35Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row35Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_EUR_WSPStruct implements routines.system.IPersistableRow<sortie_EUR_WSPStruct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_EUR_WSPStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_full_eur_wspStruct implements routines.system.IPersistableRow<sortie_full_eur_wspStruct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_full_eur_wspStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_ExcelStruct implements routines.system.IPersistableRow<sortie_ExcelStruct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_ExcelStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];

	
			    public String newColumn;

				public String getNewColumn () {
					return this.newColumn;
				}
				
			    public String newColumn1;

				public String getNewColumn1 () {
					return this.newColumn1;
				}
				
			    public String newColumn2;

				public String getNewColumn2 () {
					return this.newColumn2;
				}
				
			    public String newColumn3;

				public String getNewColumn3 () {
					return this.newColumn3;
				}
				
			    public String newColumn4;

				public String getNewColumn4 () {
					return this.newColumn4;
				}
				
			    public String newColumn5;

				public String getNewColumn5 () {
					return this.newColumn5;
				}
				
			    public String newColumn6;

				public String getNewColumn6 () {
					return this.newColumn6;
				}
				
			    public String newColumn7;

				public String getNewColumn7 () {
					return this.newColumn7;
				}
				
			    public String newColumn8;

				public String getNewColumn8 () {
					return this.newColumn8;
				}
				
			    public String newColumn9;

				public String getNewColumn9 () {
					return this.newColumn9;
				}
				
			    public String newColumn10;

				public String getNewColumn10 () {
					return this.newColumn10;
				}
				
			    public String newColumn11;

				public String getNewColumn11 () {
					return this.newColumn11;
				}
				
			    public String newColumn12;

				public String getNewColumn12 () {
					return this.newColumn12;
				}
				
			    public String newColumn13;

				public String getNewColumn13 () {
					return this.newColumn13;
				}
				
			    public String newColumn14;

				public String getNewColumn14 () {
					return this.newColumn14;
				}
				
			    public String newColumn15;

				public String getNewColumn15 () {
					return this.newColumn15;
				}
				
			    public String newColumn16;

				public String getNewColumn16 () {
					return this.newColumn16;
				}
				
			    public String newColumn17;

				public String getNewColumn17 () {
					return this.newColumn17;
				}
				
			    public String newColumn18;

				public String getNewColumn18 () {
					return this.newColumn18;
				}
				
			    public String newColumn19;

				public String getNewColumn19 () {
					return this.newColumn19;
				}
				
			    public String newColumn20;

				public String getNewColumn20 () {
					return this.newColumn20;
				}
				
			    public String newColumn21;

				public String getNewColumn21 () {
					return this.newColumn21;
				}
				
			    public String newColumn22;

				public String getNewColumn22 () {
					return this.newColumn22;
				}
				
			    public String newColumn23;

				public String getNewColumn23 () {
					return this.newColumn23;
				}
				
			    public String newColumn24;

				public String getNewColumn24 () {
					return this.newColumn24;
				}
				
			    public String newColumn25;

				public String getNewColumn25 () {
					return this.newColumn25;
				}
				
			    public String newColumn26;

				public String getNewColumn26 () {
					return this.newColumn26;
				}
				
			    public String newColumn27;

				public String getNewColumn27 () {
					return this.newColumn27;
				}
				
			    public String newColumn28;

				public String getNewColumn28 () {
					return this.newColumn28;
				}
				
			    public String newColumn29;

				public String getNewColumn29 () {
					return this.newColumn29;
				}
				
			    public String newColumn30;

				public String getNewColumn30 () {
					return this.newColumn30;
				}
				
			    public String newColumn31;

				public String getNewColumn31 () {
					return this.newColumn31;
				}
				
			    public String newColumn32;

				public String getNewColumn32 () {
					return this.newColumn32;
				}
				
			    public String newColumn33;

				public String getNewColumn33 () {
					return this.newColumn33;
				}
				
			    public String newColumn34;

				public String getNewColumn34 () {
					return this.newColumn34;
				}
				
			    public String newColumn35;

				public String getNewColumn35 () {
					return this.newColumn35;
				}
				
			    public String newColumn36;

				public String getNewColumn36 () {
					return this.newColumn36;
				}
				
			    public String newColumn37;

				public String getNewColumn37 () {
					return this.newColumn37;
				}
				
			    public String newColumn38;

				public String getNewColumn38 () {
					return this.newColumn38;
				}
				
			    public String newColumn39;

				public String getNewColumn39 () {
					return this.newColumn39;
				}
				
			    public String newColumn40;

				public String getNewColumn40 () {
					return this.newColumn40;
				}
				
			    public String newColumn41;

				public String getNewColumn41 () {
					return this.newColumn41;
				}
				
			    public String newColumn42;

				public String getNewColumn42 () {
					return this.newColumn42;
				}
				
			    public String newColumn43;

				public String getNewColumn43 () {
					return this.newColumn43;
				}
				
			    public String newColumn44;

				public String getNewColumn44 () {
					return this.newColumn44;
				}
				
			    public String newColumn45;

				public String getNewColumn45 () {
					return this.newColumn45;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE) {

        	try {

        		int length = 0;
		
					this.newColumn = readString(dis);
					
					this.newColumn1 = readString(dis);
					
					this.newColumn2 = readString(dis);
					
					this.newColumn3 = readString(dis);
					
					this.newColumn4 = readString(dis);
					
					this.newColumn5 = readString(dis);
					
					this.newColumn6 = readString(dis);
					
					this.newColumn7 = readString(dis);
					
					this.newColumn8 = readString(dis);
					
					this.newColumn9 = readString(dis);
					
					this.newColumn10 = readString(dis);
					
					this.newColumn11 = readString(dis);
					
					this.newColumn12 = readString(dis);
					
					this.newColumn13 = readString(dis);
					
					this.newColumn14 = readString(dis);
					
					this.newColumn15 = readString(dis);
					
					this.newColumn16 = readString(dis);
					
					this.newColumn17 = readString(dis);
					
					this.newColumn18 = readString(dis);
					
					this.newColumn19 = readString(dis);
					
					this.newColumn20 = readString(dis);
					
					this.newColumn21 = readString(dis);
					
					this.newColumn22 = readString(dis);
					
					this.newColumn23 = readString(dis);
					
					this.newColumn24 = readString(dis);
					
					this.newColumn25 = readString(dis);
					
					this.newColumn26 = readString(dis);
					
					this.newColumn27 = readString(dis);
					
					this.newColumn28 = readString(dis);
					
					this.newColumn29 = readString(dis);
					
					this.newColumn30 = readString(dis);
					
					this.newColumn31 = readString(dis);
					
					this.newColumn32 = readString(dis);
					
					this.newColumn33 = readString(dis);
					
					this.newColumn34 = readString(dis);
					
					this.newColumn35 = readString(dis);
					
					this.newColumn36 = readString(dis);
					
					this.newColumn37 = readString(dis);
					
					this.newColumn38 = readString(dis);
					
					this.newColumn39 = readString(dis);
					
					this.newColumn40 = readString(dis);
					
					this.newColumn41 = readString(dis);
					
					this.newColumn42 = readString(dis);
					
					this.newColumn43 = readString(dis);
					
					this.newColumn44 = readString(dis);
					
					this.newColumn45 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.newColumn,dos);
					
					// String
				
						writeString(this.newColumn1,dos);
					
					// String
				
						writeString(this.newColumn2,dos);
					
					// String
				
						writeString(this.newColumn3,dos);
					
					// String
				
						writeString(this.newColumn4,dos);
					
					// String
				
						writeString(this.newColumn5,dos);
					
					// String
				
						writeString(this.newColumn6,dos);
					
					// String
				
						writeString(this.newColumn7,dos);
					
					// String
				
						writeString(this.newColumn8,dos);
					
					// String
				
						writeString(this.newColumn9,dos);
					
					// String
				
						writeString(this.newColumn10,dos);
					
					// String
				
						writeString(this.newColumn11,dos);
					
					// String
				
						writeString(this.newColumn12,dos);
					
					// String
				
						writeString(this.newColumn13,dos);
					
					// String
				
						writeString(this.newColumn14,dos);
					
					// String
				
						writeString(this.newColumn15,dos);
					
					// String
				
						writeString(this.newColumn16,dos);
					
					// String
				
						writeString(this.newColumn17,dos);
					
					// String
				
						writeString(this.newColumn18,dos);
					
					// String
				
						writeString(this.newColumn19,dos);
					
					// String
				
						writeString(this.newColumn20,dos);
					
					// String
				
						writeString(this.newColumn21,dos);
					
					// String
				
						writeString(this.newColumn22,dos);
					
					// String
				
						writeString(this.newColumn23,dos);
					
					// String
				
						writeString(this.newColumn24,dos);
					
					// String
				
						writeString(this.newColumn25,dos);
					
					// String
				
						writeString(this.newColumn26,dos);
					
					// String
				
						writeString(this.newColumn27,dos);
					
					// String
				
						writeString(this.newColumn28,dos);
					
					// String
				
						writeString(this.newColumn29,dos);
					
					// String
				
						writeString(this.newColumn30,dos);
					
					// String
				
						writeString(this.newColumn31,dos);
					
					// String
				
						writeString(this.newColumn32,dos);
					
					// String
				
						writeString(this.newColumn33,dos);
					
					// String
				
						writeString(this.newColumn34,dos);
					
					// String
				
						writeString(this.newColumn35,dos);
					
					// String
				
						writeString(this.newColumn36,dos);
					
					// String
				
						writeString(this.newColumn37,dos);
					
					// String
				
						writeString(this.newColumn38,dos);
					
					// String
				
						writeString(this.newColumn39,dos);
					
					// String
				
						writeString(this.newColumn40,dos);
					
					// String
				
						writeString(this.newColumn41,dos);
					
					// String
				
						writeString(this.newColumn42,dos);
					
					// String
				
						writeString(this.newColumn43,dos);
					
					// String
				
						writeString(this.newColumn44,dos);
					
					// String
				
						writeString(this.newColumn45,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("newColumn="+newColumn);
		sb.append(",newColumn1="+newColumn1);
		sb.append(",newColumn2="+newColumn2);
		sb.append(",newColumn3="+newColumn3);
		sb.append(",newColumn4="+newColumn4);
		sb.append(",newColumn5="+newColumn5);
		sb.append(",newColumn6="+newColumn6);
		sb.append(",newColumn7="+newColumn7);
		sb.append(",newColumn8="+newColumn8);
		sb.append(",newColumn9="+newColumn9);
		sb.append(",newColumn10="+newColumn10);
		sb.append(",newColumn11="+newColumn11);
		sb.append(",newColumn12="+newColumn12);
		sb.append(",newColumn13="+newColumn13);
		sb.append(",newColumn14="+newColumn14);
		sb.append(",newColumn15="+newColumn15);
		sb.append(",newColumn16="+newColumn16);
		sb.append(",newColumn17="+newColumn17);
		sb.append(",newColumn18="+newColumn18);
		sb.append(",newColumn19="+newColumn19);
		sb.append(",newColumn20="+newColumn20);
		sb.append(",newColumn21="+newColumn21);
		sb.append(",newColumn22="+newColumn22);
		sb.append(",newColumn23="+newColumn23);
		sb.append(",newColumn24="+newColumn24);
		sb.append(",newColumn25="+newColumn25);
		sb.append(",newColumn26="+newColumn26);
		sb.append(",newColumn27="+newColumn27);
		sb.append(",newColumn28="+newColumn28);
		sb.append(",newColumn29="+newColumn29);
		sb.append(",newColumn30="+newColumn30);
		sb.append(",newColumn31="+newColumn31);
		sb.append(",newColumn32="+newColumn32);
		sb.append(",newColumn33="+newColumn33);
		sb.append(",newColumn34="+newColumn34);
		sb.append(",newColumn35="+newColumn35);
		sb.append(",newColumn36="+newColumn36);
		sb.append(",newColumn37="+newColumn37);
		sb.append(",newColumn38="+newColumn38);
		sb.append(",newColumn39="+newColumn39);
		sb.append(",newColumn40="+newColumn40);
		sb.append(",newColumn41="+newColumn41);
		sb.append(",newColumn42="+newColumn42);
		sb.append(",newColumn43="+newColumn43);
		sb.append(",newColumn44="+newColumn44);
		sb.append(",newColumn45="+newColumn45);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputExcel_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputExcel_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();
sortie_ExcelStruct sortie_Excel = new sortie_ExcelStruct();
sortie_EUR_WSPStruct sortie_EUR_WSP = new sortie_EUR_WSPStruct();
row35Struct row35 = new row35Struct();
row37Struct row37 = new row37Struct();
sortie_full_eur_wspStruct sortie_full_eur_wsp = new sortie_full_eur_wspStruct();
copyOfsortie_EUR_WSPStruct copyOfsortie_EUR_WSP = new copyOfsortie_EUR_WSPStruct();
row36Struct row36 = new row36Struct();
row38Struct row38 = new row38Struct();
sortie_full_rrp_eurStruct sortie_full_rrp_eur = new sortie_full_rrp_eurStruct();
copyOfsortie_EUR_WSP_0Struct copyOfsortie_EUR_WSP_0 = new copyOfsortie_EUR_WSP_0Struct();
row43Struct row43 = new row43Struct();
row44Struct row44 = new row44Struct();
sortie_full_gbp_wspStruct sortie_full_gbp_wsp = new sortie_full_gbp_wspStruct();
copyOfcopyOfsortie_EUR_WSP_0Struct copyOfcopyOfsortie_EUR_WSP_0 = new copyOfcopyOfsortie_EUR_WSP_0Struct();
row45Struct row45 = new row45Struct();
row46Struct row46 = new row46Struct();
sortie_full_GBP_RRPStruct sortie_full_GBP_RRP = new sortie_full_GBP_RRPStruct();
copyOfcopyOfcopyOfsortie_EUR_WSP_0Struct copyOfcopyOfcopyOfsortie_EUR_WSP_0 = new copyOfcopyOfcopyOfsortie_EUR_WSP_0Struct();
row47Struct row47 = new row47Struct();
row48Struct row48 = new row48Struct();
sortie_full_CHF_WSPStruct sortie_full_CHF_WSP = new sortie_full_CHF_WSPStruct();
copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0Struct copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0 = new copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0Struct();
row49Struct row49 = new row49Struct();
row50Struct row50 = new row50Struct();
sortie_full_chr_rrpStruct sortie_full_chr_rrp = new sortie_full_chr_rrpStruct();
copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0Struct copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0 = new copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0Struct();
row55Struct row55 = new row55Struct();
row56Struct row56 = new row56Struct();
sortie_full_NOK_WSPStruct sortie_full_NOK_WSP = new sortie_full_NOK_WSPStruct();
copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0Struct copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0 = new copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0Struct();
row57Struct row57 = new row57Struct();
row58Struct row58 = new row58Struct();
sortie_full_nok_rrpStruct sortie_full_nok_rrp = new sortie_full_nok_rrpStruct();
copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0Struct copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0 = new copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0Struct();
row61Struct row61 = new row61Struct();
row62Struct row62 = new row62Struct();
sortie_full_DKK_RRPStruct sortie_full_DKK_RRP = new sortie_full_DKK_RRPStruct();
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0Struct copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0 = new copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0Struct();
row64Struct row64 = new row64Struct();
row63Struct row63 = new row63Struct();
sortie_full_DKK_WSPStruct sortie_full_DKK_WSP = new sortie_full_DKK_WSPStruct();
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0Struct copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0 = new copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0Struct();
row68Struct row68 = new row68Struct();
row67Struct row67 = new row67Struct();
sortie_full_SEK_WSPStruct sortie_full_SEK_WSP = new sortie_full_SEK_WSPStruct();
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0Struct copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0 = new copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0Struct();
row69Struct row69 = new row69Struct();
row70Struct row70 = new row70Struct();
sortie_full_SEK_RRPStruct sortie_full_SEK_RRP = new sortie_full_SEK_RRPStruct();
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0Struct copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0 = new copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0Struct();
row73Struct row73 = new row73Struct();
row74Struct row74 = new row74Struct();
sortie_full_EUR_FIN_WSPStruct sortie_full_EUR_FIN_WSP = new sortie_full_EUR_FIN_WSPStruct();
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0Struct copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0 = new copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0Struct();
row75Struct row75 = new row75Struct();
row76Struct row76 = new row76Struct();








	
	/**
	 * [tHashOutput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_9", false);
		start_Hash.put("tHashOutput_9", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_9";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row37");
					}
				
		int tos_count_tHashOutput_9 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_9=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row37Struct> tHashFile_tHashOutput_9 = null;
		String hashKey_tHashOutput_9 = "tHashFile_EXTRACT_FOR_DYNAMICS_PRICE_" + pid + "_tHashOutput_9";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_9)){
			    if(mf_tHashOutput_9.getResourceMap().get(hashKey_tHashOutput_9) == null){
	      		    mf_tHashOutput_9.getResourceMap().put(hashKey_tHashOutput_9, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row37Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_9 = mf_tHashOutput_9.getResourceMap().get(hashKey_tHashOutput_9);
			    }else{
			    	tHashFile_tHashOutput_9 = mf_tHashOutput_9.getResourceMap().get(hashKey_tHashOutput_9);
			    }
			}
        int nb_line_tHashOutput_9 = 0;
 



/**
 * [tHashOutput_9 begin ] stop
 */



	
	/**
	 * [tFilterRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_2", false);
		start_Hash.put("tFilterRow_2", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row35");
					}
				
		int tos_count_tFilterRow_2 = 0;
		
    int nb_line_tFilterRow_2 = 0;
    int nb_line_ok_tFilterRow_2 = 0;
    int nb_line_reject_tFilterRow_2 = 0;

    class Operator_tFilterRow_2 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_2(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_2 begin ] stop
 */



	
	/**
	 * [tUniqRow_18 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_18", false);
		start_Hash.put("tUniqRow_18", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_18";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_EUR_WSP");
					}
				
		int tos_count_tUniqRow_18 = 0;
		

	
		class KeyStruct_tUniqRow_18 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String TRADEAGREEMENTJOURNALNUMBER;
					String ITEMNUMBER;
					Double PRICE;
					String PRICECURRENCYCODE;
					String PRICECUSTOMERGROUPCODE;
					String PRODUCTCOLORID;
					String PRODUCTSIZEID;
					String PRODUCTSTYLEID;
					String QUANTITYUNITSYMBOL;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.TRADEAGREEMENTJOURNALNUMBER == null) ? 0 : this.TRADEAGREEMENTJOURNALNUMBER.hashCode());
								
								result = prime * result + ((this.ITEMNUMBER == null) ? 0 : this.ITEMNUMBER.hashCode());
								
								result = prime * result + ((this.PRICE == null) ? 0 : this.PRICE.hashCode());
								
								result = prime * result + ((this.PRICECURRENCYCODE == null) ? 0 : this.PRICECURRENCYCODE.hashCode());
								
								result = prime * result + ((this.PRICECUSTOMERGROUPCODE == null) ? 0 : this.PRICECUSTOMERGROUPCODE.hashCode());
								
								result = prime * result + ((this.PRODUCTCOLORID == null) ? 0 : this.PRODUCTCOLORID.hashCode());
								
								result = prime * result + ((this.PRODUCTSIZEID == null) ? 0 : this.PRODUCTSIZEID.hashCode());
								
								result = prime * result + ((this.PRODUCTSTYLEID == null) ? 0 : this.PRODUCTSTYLEID.hashCode());
								
								result = prime * result + ((this.QUANTITYUNITSYMBOL == null) ? 0 : this.QUANTITYUNITSYMBOL.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_18 other = (KeyStruct_tUniqRow_18) obj;
				
									if (this.TRADEAGREEMENTJOURNALNUMBER == null) {
										if (other.TRADEAGREEMENTJOURNALNUMBER != null) 
											return false;
								
									} else if (!this.TRADEAGREEMENTJOURNALNUMBER.equals(other.TRADEAGREEMENTJOURNALNUMBER))
								 
										return false;
								
									if (this.ITEMNUMBER == null) {
										if (other.ITEMNUMBER != null) 
											return false;
								
									} else if (!this.ITEMNUMBER.equals(other.ITEMNUMBER))
								 
										return false;
								
									if (this.PRICE == null) {
										if (other.PRICE != null) 
											return false;
								
									} else if (!this.PRICE.equals(other.PRICE))
								 
										return false;
								
									if (this.PRICECURRENCYCODE == null) {
										if (other.PRICECURRENCYCODE != null) 
											return false;
								
									} else if (!this.PRICECURRENCYCODE.equals(other.PRICECURRENCYCODE))
								 
										return false;
								
									if (this.PRICECUSTOMERGROUPCODE == null) {
										if (other.PRICECUSTOMERGROUPCODE != null) 
											return false;
								
									} else if (!this.PRICECUSTOMERGROUPCODE.equals(other.PRICECUSTOMERGROUPCODE))
								 
										return false;
								
									if (this.PRODUCTCOLORID == null) {
										if (other.PRODUCTCOLORID != null) 
											return false;
								
									} else if (!this.PRODUCTCOLORID.equals(other.PRODUCTCOLORID))
								 
										return false;
								
									if (this.PRODUCTSIZEID == null) {
										if (other.PRODUCTSIZEID != null) 
											return false;
								
									} else if (!this.PRODUCTSIZEID.equals(other.PRODUCTSIZEID))
								 
										return false;
								
									if (this.PRODUCTSTYLEID == null) {
										if (other.PRODUCTSTYLEID != null) 
											return false;
								
									} else if (!this.PRODUCTSTYLEID.equals(other.PRODUCTSTYLEID))
								 
										return false;
								
									if (this.QUANTITYUNITSYMBOL == null) {
										if (other.QUANTITYUNITSYMBOL != null) 
											return false;
								
									} else if (!this.QUANTITYUNITSYMBOL.equals(other.QUANTITYUNITSYMBOL))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_18 = 0;
int nb_duplicates_tUniqRow_18 = 0;
KeyStruct_tUniqRow_18 finder_tUniqRow_18 = new KeyStruct_tUniqRow_18();
java.util.Set<KeyStruct_tUniqRow_18> keystUniqRow_18 = new java.util.HashSet<KeyStruct_tUniqRow_18>(); 

 



/**
 * [tUniqRow_18 begin ] stop
 */







	
	/**
	 * [tHashOutput_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_10", false);
		start_Hash.put("tHashOutput_10", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_10";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row38");
					}
				
		int tos_count_tHashOutput_10 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_10=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row38Struct> tHashFile_tHashOutput_10 = null;
		String hashKey_tHashOutput_10 = "tHashFile_EXTRACT_FOR_DYNAMICS_PRICE_" + pid + "_tHashOutput_10";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_10)){
			    if(mf_tHashOutput_10.getResourceMap().get(hashKey_tHashOutput_10) == null){
	      		    mf_tHashOutput_10.getResourceMap().put(hashKey_tHashOutput_10, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row38Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_10 = mf_tHashOutput_10.getResourceMap().get(hashKey_tHashOutput_10);
			    }else{
			    	tHashFile_tHashOutput_10 = mf_tHashOutput_10.getResourceMap().get(hashKey_tHashOutput_10);
			    }
			}
        int nb_line_tHashOutput_10 = 0;
 



/**
 * [tHashOutput_10 begin ] stop
 */



	
	/**
	 * [tFilterRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_3", false);
		start_Hash.put("tFilterRow_3", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row36");
					}
				
		int tos_count_tFilterRow_3 = 0;
		
    int nb_line_tFilterRow_3 = 0;
    int nb_line_ok_tFilterRow_3 = 0;
    int nb_line_reject_tFilterRow_3 = 0;

    class Operator_tFilterRow_3 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_3(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_3 begin ] stop
 */



	
	/**
	 * [tUniqRow_19 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_19", false);
		start_Hash.put("tUniqRow_19", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_19";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfsortie_EUR_WSP");
					}
				
		int tos_count_tUniqRow_19 = 0;
		

	
		class KeyStruct_tUniqRow_19 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String TRADEAGREEMENTJOURNALNUMBER;
					String ITEMNUMBER;
					Double PRICE;
					String PRICECURRENCYCODE;
					String PRICECUSTOMERGROUPCODE;
					String PRODUCTCOLORID;
					String PRODUCTSIZEID;
					String PRODUCTSTYLEID;
					String QUANTITYUNITSYMBOL;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.TRADEAGREEMENTJOURNALNUMBER == null) ? 0 : this.TRADEAGREEMENTJOURNALNUMBER.hashCode());
								
								result = prime * result + ((this.ITEMNUMBER == null) ? 0 : this.ITEMNUMBER.hashCode());
								
								result = prime * result + ((this.PRICE == null) ? 0 : this.PRICE.hashCode());
								
								result = prime * result + ((this.PRICECURRENCYCODE == null) ? 0 : this.PRICECURRENCYCODE.hashCode());
								
								result = prime * result + ((this.PRICECUSTOMERGROUPCODE == null) ? 0 : this.PRICECUSTOMERGROUPCODE.hashCode());
								
								result = prime * result + ((this.PRODUCTCOLORID == null) ? 0 : this.PRODUCTCOLORID.hashCode());
								
								result = prime * result + ((this.PRODUCTSIZEID == null) ? 0 : this.PRODUCTSIZEID.hashCode());
								
								result = prime * result + ((this.PRODUCTSTYLEID == null) ? 0 : this.PRODUCTSTYLEID.hashCode());
								
								result = prime * result + ((this.QUANTITYUNITSYMBOL == null) ? 0 : this.QUANTITYUNITSYMBOL.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_19 other = (KeyStruct_tUniqRow_19) obj;
				
									if (this.TRADEAGREEMENTJOURNALNUMBER == null) {
										if (other.TRADEAGREEMENTJOURNALNUMBER != null) 
											return false;
								
									} else if (!this.TRADEAGREEMENTJOURNALNUMBER.equals(other.TRADEAGREEMENTJOURNALNUMBER))
								 
										return false;
								
									if (this.ITEMNUMBER == null) {
										if (other.ITEMNUMBER != null) 
											return false;
								
									} else if (!this.ITEMNUMBER.equals(other.ITEMNUMBER))
								 
										return false;
								
									if (this.PRICE == null) {
										if (other.PRICE != null) 
											return false;
								
									} else if (!this.PRICE.equals(other.PRICE))
								 
										return false;
								
									if (this.PRICECURRENCYCODE == null) {
										if (other.PRICECURRENCYCODE != null) 
											return false;
								
									} else if (!this.PRICECURRENCYCODE.equals(other.PRICECURRENCYCODE))
								 
										return false;
								
									if (this.PRICECUSTOMERGROUPCODE == null) {
										if (other.PRICECUSTOMERGROUPCODE != null) 
											return false;
								
									} else if (!this.PRICECUSTOMERGROUPCODE.equals(other.PRICECUSTOMERGROUPCODE))
								 
										return false;
								
									if (this.PRODUCTCOLORID == null) {
										if (other.PRODUCTCOLORID != null) 
											return false;
								
									} else if (!this.PRODUCTCOLORID.equals(other.PRODUCTCOLORID))
								 
										return false;
								
									if (this.PRODUCTSIZEID == null) {
										if (other.PRODUCTSIZEID != null) 
											return false;
								
									} else if (!this.PRODUCTSIZEID.equals(other.PRODUCTSIZEID))
								 
										return false;
								
									if (this.PRODUCTSTYLEID == null) {
										if (other.PRODUCTSTYLEID != null) 
											return false;
								
									} else if (!this.PRODUCTSTYLEID.equals(other.PRODUCTSTYLEID))
								 
										return false;
								
									if (this.QUANTITYUNITSYMBOL == null) {
										if (other.QUANTITYUNITSYMBOL != null) 
											return false;
								
									} else if (!this.QUANTITYUNITSYMBOL.equals(other.QUANTITYUNITSYMBOL))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_19 = 0;
int nb_duplicates_tUniqRow_19 = 0;
KeyStruct_tUniqRow_19 finder_tUniqRow_19 = new KeyStruct_tUniqRow_19();
java.util.Set<KeyStruct_tUniqRow_19> keystUniqRow_19 = new java.util.HashSet<KeyStruct_tUniqRow_19>(); 

 



/**
 * [tUniqRow_19 begin ] stop
 */







	
	/**
	 * [tHashOutput_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_11", false);
		start_Hash.put("tHashOutput_11", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_11";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row44");
					}
				
		int tos_count_tHashOutput_11 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_11=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row44Struct> tHashFile_tHashOutput_11 = null;
		String hashKey_tHashOutput_11 = "tHashFile_EXTRACT_FOR_DYNAMICS_PRICE_" + pid + "_tHashOutput_11";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_11)){
			    if(mf_tHashOutput_11.getResourceMap().get(hashKey_tHashOutput_11) == null){
	      		    mf_tHashOutput_11.getResourceMap().put(hashKey_tHashOutput_11, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row44Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_11 = mf_tHashOutput_11.getResourceMap().get(hashKey_tHashOutput_11);
			    }else{
			    	tHashFile_tHashOutput_11 = mf_tHashOutput_11.getResourceMap().get(hashKey_tHashOutput_11);
			    }
			}
        int nb_line_tHashOutput_11 = 0;
 



/**
 * [tHashOutput_11 begin ] stop
 */



	
	/**
	 * [tFilterRow_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_4", false);
		start_Hash.put("tFilterRow_4", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row43");
					}
				
		int tos_count_tFilterRow_4 = 0;
		
    int nb_line_tFilterRow_4 = 0;
    int nb_line_ok_tFilterRow_4 = 0;
    int nb_line_reject_tFilterRow_4 = 0;

    class Operator_tFilterRow_4 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_4(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_4 begin ] stop
 */



	
	/**
	 * [tUniqRow_20 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_20", false);
		start_Hash.put("tUniqRow_20", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_20";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfsortie_EUR_WSP_0");
					}
				
		int tos_count_tUniqRow_20 = 0;
		

	
		class KeyStruct_tUniqRow_20 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String TRADEAGREEMENTJOURNALNUMBER;
					String ITEMNUMBER;
					Double PRICE;
					String PRICECURRENCYCODE;
					String PRICECUSTOMERGROUPCODE;
					String PRODUCTCOLORID;
					String PRODUCTSIZEID;
					String PRODUCTSTYLEID;
					String QUANTITYUNITSYMBOL;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.TRADEAGREEMENTJOURNALNUMBER == null) ? 0 : this.TRADEAGREEMENTJOURNALNUMBER.hashCode());
								
								result = prime * result + ((this.ITEMNUMBER == null) ? 0 : this.ITEMNUMBER.hashCode());
								
								result = prime * result + ((this.PRICE == null) ? 0 : this.PRICE.hashCode());
								
								result = prime * result + ((this.PRICECURRENCYCODE == null) ? 0 : this.PRICECURRENCYCODE.hashCode());
								
								result = prime * result + ((this.PRICECUSTOMERGROUPCODE == null) ? 0 : this.PRICECUSTOMERGROUPCODE.hashCode());
								
								result = prime * result + ((this.PRODUCTCOLORID == null) ? 0 : this.PRODUCTCOLORID.hashCode());
								
								result = prime * result + ((this.PRODUCTSIZEID == null) ? 0 : this.PRODUCTSIZEID.hashCode());
								
								result = prime * result + ((this.PRODUCTSTYLEID == null) ? 0 : this.PRODUCTSTYLEID.hashCode());
								
								result = prime * result + ((this.QUANTITYUNITSYMBOL == null) ? 0 : this.QUANTITYUNITSYMBOL.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_20 other = (KeyStruct_tUniqRow_20) obj;
				
									if (this.TRADEAGREEMENTJOURNALNUMBER == null) {
										if (other.TRADEAGREEMENTJOURNALNUMBER != null) 
											return false;
								
									} else if (!this.TRADEAGREEMENTJOURNALNUMBER.equals(other.TRADEAGREEMENTJOURNALNUMBER))
								 
										return false;
								
									if (this.ITEMNUMBER == null) {
										if (other.ITEMNUMBER != null) 
											return false;
								
									} else if (!this.ITEMNUMBER.equals(other.ITEMNUMBER))
								 
										return false;
								
									if (this.PRICE == null) {
										if (other.PRICE != null) 
											return false;
								
									} else if (!this.PRICE.equals(other.PRICE))
								 
										return false;
								
									if (this.PRICECURRENCYCODE == null) {
										if (other.PRICECURRENCYCODE != null) 
											return false;
								
									} else if (!this.PRICECURRENCYCODE.equals(other.PRICECURRENCYCODE))
								 
										return false;
								
									if (this.PRICECUSTOMERGROUPCODE == null) {
										if (other.PRICECUSTOMERGROUPCODE != null) 
											return false;
								
									} else if (!this.PRICECUSTOMERGROUPCODE.equals(other.PRICECUSTOMERGROUPCODE))
								 
										return false;
								
									if (this.PRODUCTCOLORID == null) {
										if (other.PRODUCTCOLORID != null) 
											return false;
								
									} else if (!this.PRODUCTCOLORID.equals(other.PRODUCTCOLORID))
								 
										return false;
								
									if (this.PRODUCTSIZEID == null) {
										if (other.PRODUCTSIZEID != null) 
											return false;
								
									} else if (!this.PRODUCTSIZEID.equals(other.PRODUCTSIZEID))
								 
										return false;
								
									if (this.PRODUCTSTYLEID == null) {
										if (other.PRODUCTSTYLEID != null) 
											return false;
								
									} else if (!this.PRODUCTSTYLEID.equals(other.PRODUCTSTYLEID))
								 
										return false;
								
									if (this.QUANTITYUNITSYMBOL == null) {
										if (other.QUANTITYUNITSYMBOL != null) 
											return false;
								
									} else if (!this.QUANTITYUNITSYMBOL.equals(other.QUANTITYUNITSYMBOL))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_20 = 0;
int nb_duplicates_tUniqRow_20 = 0;
KeyStruct_tUniqRow_20 finder_tUniqRow_20 = new KeyStruct_tUniqRow_20();
java.util.Set<KeyStruct_tUniqRow_20> keystUniqRow_20 = new java.util.HashSet<KeyStruct_tUniqRow_20>(); 

 



/**
 * [tUniqRow_20 begin ] stop
 */







	
	/**
	 * [tHashOutput_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_12", false);
		start_Hash.put("tHashOutput_12", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_12";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row46");
					}
				
		int tos_count_tHashOutput_12 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_12=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row46Struct> tHashFile_tHashOutput_12 = null;
		String hashKey_tHashOutput_12 = "tHashFile_EXTRACT_FOR_DYNAMICS_PRICE_" + pid + "_tHashOutput_12";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_12)){
			    if(mf_tHashOutput_12.getResourceMap().get(hashKey_tHashOutput_12) == null){
	      		    mf_tHashOutput_12.getResourceMap().put(hashKey_tHashOutput_12, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row46Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_12 = mf_tHashOutput_12.getResourceMap().get(hashKey_tHashOutput_12);
			    }else{
			    	tHashFile_tHashOutput_12 = mf_tHashOutput_12.getResourceMap().get(hashKey_tHashOutput_12);
			    }
			}
        int nb_line_tHashOutput_12 = 0;
 



/**
 * [tHashOutput_12 begin ] stop
 */



	
	/**
	 * [tFilterRow_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_5", false);
		start_Hash.put("tFilterRow_5", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row45");
					}
				
		int tos_count_tFilterRow_5 = 0;
		
    int nb_line_tFilterRow_5 = 0;
    int nb_line_ok_tFilterRow_5 = 0;
    int nb_line_reject_tFilterRow_5 = 0;

    class Operator_tFilterRow_5 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_5(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_5 begin ] stop
 */



	
	/**
	 * [tUniqRow_21 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_21", false);
		start_Hash.put("tUniqRow_21", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_21";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfsortie_EUR_WSP_0");
					}
				
		int tos_count_tUniqRow_21 = 0;
		

	
		class KeyStruct_tUniqRow_21 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String TRADEAGREEMENTJOURNALNUMBER;
					String ITEMNUMBER;
					Double PRICE;
					String PRICECURRENCYCODE;
					String PRICECUSTOMERGROUPCODE;
					String PRODUCTCOLORID;
					String PRODUCTSIZEID;
					String PRODUCTSTYLEID;
					String QUANTITYUNITSYMBOL;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.TRADEAGREEMENTJOURNALNUMBER == null) ? 0 : this.TRADEAGREEMENTJOURNALNUMBER.hashCode());
								
								result = prime * result + ((this.ITEMNUMBER == null) ? 0 : this.ITEMNUMBER.hashCode());
								
								result = prime * result + ((this.PRICE == null) ? 0 : this.PRICE.hashCode());
								
								result = prime * result + ((this.PRICECURRENCYCODE == null) ? 0 : this.PRICECURRENCYCODE.hashCode());
								
								result = prime * result + ((this.PRICECUSTOMERGROUPCODE == null) ? 0 : this.PRICECUSTOMERGROUPCODE.hashCode());
								
								result = prime * result + ((this.PRODUCTCOLORID == null) ? 0 : this.PRODUCTCOLORID.hashCode());
								
								result = prime * result + ((this.PRODUCTSIZEID == null) ? 0 : this.PRODUCTSIZEID.hashCode());
								
								result = prime * result + ((this.PRODUCTSTYLEID == null) ? 0 : this.PRODUCTSTYLEID.hashCode());
								
								result = prime * result + ((this.QUANTITYUNITSYMBOL == null) ? 0 : this.QUANTITYUNITSYMBOL.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_21 other = (KeyStruct_tUniqRow_21) obj;
				
									if (this.TRADEAGREEMENTJOURNALNUMBER == null) {
										if (other.TRADEAGREEMENTJOURNALNUMBER != null) 
											return false;
								
									} else if (!this.TRADEAGREEMENTJOURNALNUMBER.equals(other.TRADEAGREEMENTJOURNALNUMBER))
								 
										return false;
								
									if (this.ITEMNUMBER == null) {
										if (other.ITEMNUMBER != null) 
											return false;
								
									} else if (!this.ITEMNUMBER.equals(other.ITEMNUMBER))
								 
										return false;
								
									if (this.PRICE == null) {
										if (other.PRICE != null) 
											return false;
								
									} else if (!this.PRICE.equals(other.PRICE))
								 
										return false;
								
									if (this.PRICECURRENCYCODE == null) {
										if (other.PRICECURRENCYCODE != null) 
											return false;
								
									} else if (!this.PRICECURRENCYCODE.equals(other.PRICECURRENCYCODE))
								 
										return false;
								
									if (this.PRICECUSTOMERGROUPCODE == null) {
										if (other.PRICECUSTOMERGROUPCODE != null) 
											return false;
								
									} else if (!this.PRICECUSTOMERGROUPCODE.equals(other.PRICECUSTOMERGROUPCODE))
								 
										return false;
								
									if (this.PRODUCTCOLORID == null) {
										if (other.PRODUCTCOLORID != null) 
											return false;
								
									} else if (!this.PRODUCTCOLORID.equals(other.PRODUCTCOLORID))
								 
										return false;
								
									if (this.PRODUCTSIZEID == null) {
										if (other.PRODUCTSIZEID != null) 
											return false;
								
									} else if (!this.PRODUCTSIZEID.equals(other.PRODUCTSIZEID))
								 
										return false;
								
									if (this.PRODUCTSTYLEID == null) {
										if (other.PRODUCTSTYLEID != null) 
											return false;
								
									} else if (!this.PRODUCTSTYLEID.equals(other.PRODUCTSTYLEID))
								 
										return false;
								
									if (this.QUANTITYUNITSYMBOL == null) {
										if (other.QUANTITYUNITSYMBOL != null) 
											return false;
								
									} else if (!this.QUANTITYUNITSYMBOL.equals(other.QUANTITYUNITSYMBOL))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_21 = 0;
int nb_duplicates_tUniqRow_21 = 0;
KeyStruct_tUniqRow_21 finder_tUniqRow_21 = new KeyStruct_tUniqRow_21();
java.util.Set<KeyStruct_tUniqRow_21> keystUniqRow_21 = new java.util.HashSet<KeyStruct_tUniqRow_21>(); 

 



/**
 * [tUniqRow_21 begin ] stop
 */







	
	/**
	 * [tHashOutput_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_13", false);
		start_Hash.put("tHashOutput_13", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_13";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row48");
					}
				
		int tos_count_tHashOutput_13 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_13=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row48Struct> tHashFile_tHashOutput_13 = null;
		String hashKey_tHashOutput_13 = "tHashFile_EXTRACT_FOR_DYNAMICS_PRICE_" + pid + "_tHashOutput_13";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_13)){
			    if(mf_tHashOutput_13.getResourceMap().get(hashKey_tHashOutput_13) == null){
	      		    mf_tHashOutput_13.getResourceMap().put(hashKey_tHashOutput_13, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row48Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_13 = mf_tHashOutput_13.getResourceMap().get(hashKey_tHashOutput_13);
			    }else{
			    	tHashFile_tHashOutput_13 = mf_tHashOutput_13.getResourceMap().get(hashKey_tHashOutput_13);
			    }
			}
        int nb_line_tHashOutput_13 = 0;
 



/**
 * [tHashOutput_13 begin ] stop
 */



	
	/**
	 * [tFilterRow_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_6", false);
		start_Hash.put("tFilterRow_6", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_6";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row47");
					}
				
		int tos_count_tFilterRow_6 = 0;
		
    int nb_line_tFilterRow_6 = 0;
    int nb_line_ok_tFilterRow_6 = 0;
    int nb_line_reject_tFilterRow_6 = 0;

    class Operator_tFilterRow_6 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_6(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_6 begin ] stop
 */



	
	/**
	 * [tUniqRow_22 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_22", false);
		start_Hash.put("tUniqRow_22", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_22";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfcopyOfsortie_EUR_WSP_0");
					}
				
		int tos_count_tUniqRow_22 = 0;
		

	
		class KeyStruct_tUniqRow_22 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String TRADEAGREEMENTJOURNALNUMBER;
					String ITEMNUMBER;
					Double PRICE;
					String PRICECURRENCYCODE;
					String PRICECUSTOMERGROUPCODE;
					String PRODUCTCOLORID;
					String PRODUCTSIZEID;
					String PRODUCTSTYLEID;
					String QUANTITYUNITSYMBOL;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.TRADEAGREEMENTJOURNALNUMBER == null) ? 0 : this.TRADEAGREEMENTJOURNALNUMBER.hashCode());
								
								result = prime * result + ((this.ITEMNUMBER == null) ? 0 : this.ITEMNUMBER.hashCode());
								
								result = prime * result + ((this.PRICE == null) ? 0 : this.PRICE.hashCode());
								
								result = prime * result + ((this.PRICECURRENCYCODE == null) ? 0 : this.PRICECURRENCYCODE.hashCode());
								
								result = prime * result + ((this.PRICECUSTOMERGROUPCODE == null) ? 0 : this.PRICECUSTOMERGROUPCODE.hashCode());
								
								result = prime * result + ((this.PRODUCTCOLORID == null) ? 0 : this.PRODUCTCOLORID.hashCode());
								
								result = prime * result + ((this.PRODUCTSIZEID == null) ? 0 : this.PRODUCTSIZEID.hashCode());
								
								result = prime * result + ((this.PRODUCTSTYLEID == null) ? 0 : this.PRODUCTSTYLEID.hashCode());
								
								result = prime * result + ((this.QUANTITYUNITSYMBOL == null) ? 0 : this.QUANTITYUNITSYMBOL.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_22 other = (KeyStruct_tUniqRow_22) obj;
				
									if (this.TRADEAGREEMENTJOURNALNUMBER == null) {
										if (other.TRADEAGREEMENTJOURNALNUMBER != null) 
											return false;
								
									} else if (!this.TRADEAGREEMENTJOURNALNUMBER.equals(other.TRADEAGREEMENTJOURNALNUMBER))
								 
										return false;
								
									if (this.ITEMNUMBER == null) {
										if (other.ITEMNUMBER != null) 
											return false;
								
									} else if (!this.ITEMNUMBER.equals(other.ITEMNUMBER))
								 
										return false;
								
									if (this.PRICE == null) {
										if (other.PRICE != null) 
											return false;
								
									} else if (!this.PRICE.equals(other.PRICE))
								 
										return false;
								
									if (this.PRICECURRENCYCODE == null) {
										if (other.PRICECURRENCYCODE != null) 
											return false;
								
									} else if (!this.PRICECURRENCYCODE.equals(other.PRICECURRENCYCODE))
								 
										return false;
								
									if (this.PRICECUSTOMERGROUPCODE == null) {
										if (other.PRICECUSTOMERGROUPCODE != null) 
											return false;
								
									} else if (!this.PRICECUSTOMERGROUPCODE.equals(other.PRICECUSTOMERGROUPCODE))
								 
										return false;
								
									if (this.PRODUCTCOLORID == null) {
										if (other.PRODUCTCOLORID != null) 
											return false;
								
									} else if (!this.PRODUCTCOLORID.equals(other.PRODUCTCOLORID))
								 
										return false;
								
									if (this.PRODUCTSIZEID == null) {
										if (other.PRODUCTSIZEID != null) 
											return false;
								
									} else if (!this.PRODUCTSIZEID.equals(other.PRODUCTSIZEID))
								 
										return false;
								
									if (this.PRODUCTSTYLEID == null) {
										if (other.PRODUCTSTYLEID != null) 
											return false;
								
									} else if (!this.PRODUCTSTYLEID.equals(other.PRODUCTSTYLEID))
								 
										return false;
								
									if (this.QUANTITYUNITSYMBOL == null) {
										if (other.QUANTITYUNITSYMBOL != null) 
											return false;
								
									} else if (!this.QUANTITYUNITSYMBOL.equals(other.QUANTITYUNITSYMBOL))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_22 = 0;
int nb_duplicates_tUniqRow_22 = 0;
KeyStruct_tUniqRow_22 finder_tUniqRow_22 = new KeyStruct_tUniqRow_22();
java.util.Set<KeyStruct_tUniqRow_22> keystUniqRow_22 = new java.util.HashSet<KeyStruct_tUniqRow_22>(); 

 



/**
 * [tUniqRow_22 begin ] stop
 */







	
	/**
	 * [tHashOutput_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_14", false);
		start_Hash.put("tHashOutput_14", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_14";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row50");
					}
				
		int tos_count_tHashOutput_14 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_14=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row50Struct> tHashFile_tHashOutput_14 = null;
		String hashKey_tHashOutput_14 = "tHashFile_EXTRACT_FOR_DYNAMICS_PRICE_" + pid + "_tHashOutput_14";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_14)){
			    if(mf_tHashOutput_14.getResourceMap().get(hashKey_tHashOutput_14) == null){
	      		    mf_tHashOutput_14.getResourceMap().put(hashKey_tHashOutput_14, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row50Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_14 = mf_tHashOutput_14.getResourceMap().get(hashKey_tHashOutput_14);
			    }else{
			    	tHashFile_tHashOutput_14 = mf_tHashOutput_14.getResourceMap().get(hashKey_tHashOutput_14);
			    }
			}
        int nb_line_tHashOutput_14 = 0;
 



/**
 * [tHashOutput_14 begin ] stop
 */



	
	/**
	 * [tFilterRow_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_7", false);
		start_Hash.put("tFilterRow_7", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_7";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row49");
					}
				
		int tos_count_tFilterRow_7 = 0;
		
    int nb_line_tFilterRow_7 = 0;
    int nb_line_ok_tFilterRow_7 = 0;
    int nb_line_reject_tFilterRow_7 = 0;

    class Operator_tFilterRow_7 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_7(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_7 begin ] stop
 */



	
	/**
	 * [tUniqRow_23 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_23", false);
		start_Hash.put("tUniqRow_23", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_23";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0");
					}
				
		int tos_count_tUniqRow_23 = 0;
		

	
		class KeyStruct_tUniqRow_23 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String TRADEAGREEMENTJOURNALNUMBER;
					String ITEMNUMBER;
					Double PRICE;
					String PRICECURRENCYCODE;
					String PRICECUSTOMERGROUPCODE;
					String PRODUCTCOLORID;
					String PRODUCTSIZEID;
					String PRODUCTSTYLEID;
					String QUANTITYUNITSYMBOL;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.TRADEAGREEMENTJOURNALNUMBER == null) ? 0 : this.TRADEAGREEMENTJOURNALNUMBER.hashCode());
								
								result = prime * result + ((this.ITEMNUMBER == null) ? 0 : this.ITEMNUMBER.hashCode());
								
								result = prime * result + ((this.PRICE == null) ? 0 : this.PRICE.hashCode());
								
								result = prime * result + ((this.PRICECURRENCYCODE == null) ? 0 : this.PRICECURRENCYCODE.hashCode());
								
								result = prime * result + ((this.PRICECUSTOMERGROUPCODE == null) ? 0 : this.PRICECUSTOMERGROUPCODE.hashCode());
								
								result = prime * result + ((this.PRODUCTCOLORID == null) ? 0 : this.PRODUCTCOLORID.hashCode());
								
								result = prime * result + ((this.PRODUCTSIZEID == null) ? 0 : this.PRODUCTSIZEID.hashCode());
								
								result = prime * result + ((this.PRODUCTSTYLEID == null) ? 0 : this.PRODUCTSTYLEID.hashCode());
								
								result = prime * result + ((this.QUANTITYUNITSYMBOL == null) ? 0 : this.QUANTITYUNITSYMBOL.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_23 other = (KeyStruct_tUniqRow_23) obj;
				
									if (this.TRADEAGREEMENTJOURNALNUMBER == null) {
										if (other.TRADEAGREEMENTJOURNALNUMBER != null) 
											return false;
								
									} else if (!this.TRADEAGREEMENTJOURNALNUMBER.equals(other.TRADEAGREEMENTJOURNALNUMBER))
								 
										return false;
								
									if (this.ITEMNUMBER == null) {
										if (other.ITEMNUMBER != null) 
											return false;
								
									} else if (!this.ITEMNUMBER.equals(other.ITEMNUMBER))
								 
										return false;
								
									if (this.PRICE == null) {
										if (other.PRICE != null) 
											return false;
								
									} else if (!this.PRICE.equals(other.PRICE))
								 
										return false;
								
									if (this.PRICECURRENCYCODE == null) {
										if (other.PRICECURRENCYCODE != null) 
											return false;
								
									} else if (!this.PRICECURRENCYCODE.equals(other.PRICECURRENCYCODE))
								 
										return false;
								
									if (this.PRICECUSTOMERGROUPCODE == null) {
										if (other.PRICECUSTOMERGROUPCODE != null) 
											return false;
								
									} else if (!this.PRICECUSTOMERGROUPCODE.equals(other.PRICECUSTOMERGROUPCODE))
								 
										return false;
								
									if (this.PRODUCTCOLORID == null) {
										if (other.PRODUCTCOLORID != null) 
											return false;
								
									} else if (!this.PRODUCTCOLORID.equals(other.PRODUCTCOLORID))
								 
										return false;
								
									if (this.PRODUCTSIZEID == null) {
										if (other.PRODUCTSIZEID != null) 
											return false;
								
									} else if (!this.PRODUCTSIZEID.equals(other.PRODUCTSIZEID))
								 
										return false;
								
									if (this.PRODUCTSTYLEID == null) {
										if (other.PRODUCTSTYLEID != null) 
											return false;
								
									} else if (!this.PRODUCTSTYLEID.equals(other.PRODUCTSTYLEID))
								 
										return false;
								
									if (this.QUANTITYUNITSYMBOL == null) {
										if (other.QUANTITYUNITSYMBOL != null) 
											return false;
								
									} else if (!this.QUANTITYUNITSYMBOL.equals(other.QUANTITYUNITSYMBOL))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_23 = 0;
int nb_duplicates_tUniqRow_23 = 0;
KeyStruct_tUniqRow_23 finder_tUniqRow_23 = new KeyStruct_tUniqRow_23();
java.util.Set<KeyStruct_tUniqRow_23> keystUniqRow_23 = new java.util.HashSet<KeyStruct_tUniqRow_23>(); 

 



/**
 * [tUniqRow_23 begin ] stop
 */







	
	/**
	 * [tHashOutput_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_15", false);
		start_Hash.put("tHashOutput_15", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_15";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row56");
					}
				
		int tos_count_tHashOutput_15 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_15=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row56Struct> tHashFile_tHashOutput_15 = null;
		String hashKey_tHashOutput_15 = "tHashFile_EXTRACT_FOR_DYNAMICS_PRICE_" + pid + "_tHashOutput_15";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_15)){
			    if(mf_tHashOutput_15.getResourceMap().get(hashKey_tHashOutput_15) == null){
	      		    mf_tHashOutput_15.getResourceMap().put(hashKey_tHashOutput_15, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row56Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_15 = mf_tHashOutput_15.getResourceMap().get(hashKey_tHashOutput_15);
			    }else{
			    	tHashFile_tHashOutput_15 = mf_tHashOutput_15.getResourceMap().get(hashKey_tHashOutput_15);
			    }
			}
        int nb_line_tHashOutput_15 = 0;
 



/**
 * [tHashOutput_15 begin ] stop
 */



	
	/**
	 * [tFilterRow_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_8", false);
		start_Hash.put("tFilterRow_8", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_8";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row55");
					}
				
		int tos_count_tFilterRow_8 = 0;
		
    int nb_line_tFilterRow_8 = 0;
    int nb_line_ok_tFilterRow_8 = 0;
    int nb_line_reject_tFilterRow_8 = 0;

    class Operator_tFilterRow_8 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_8(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_8 begin ] stop
 */



	
	/**
	 * [tUniqRow_24 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_24", false);
		start_Hash.put("tUniqRow_24", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_24";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0");
					}
				
		int tos_count_tUniqRow_24 = 0;
		

	
		class KeyStruct_tUniqRow_24 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String TRADEAGREEMENTJOURNALNUMBER;
					String ITEMNUMBER;
					Double PRICE;
					String PRICECURRENCYCODE;
					String PRICECUSTOMERGROUPCODE;
					String PRODUCTCOLORID;
					String PRODUCTSIZEID;
					String PRODUCTSTYLEID;
					String QUANTITYUNITSYMBOL;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.TRADEAGREEMENTJOURNALNUMBER == null) ? 0 : this.TRADEAGREEMENTJOURNALNUMBER.hashCode());
								
								result = prime * result + ((this.ITEMNUMBER == null) ? 0 : this.ITEMNUMBER.hashCode());
								
								result = prime * result + ((this.PRICE == null) ? 0 : this.PRICE.hashCode());
								
								result = prime * result + ((this.PRICECURRENCYCODE == null) ? 0 : this.PRICECURRENCYCODE.hashCode());
								
								result = prime * result + ((this.PRICECUSTOMERGROUPCODE == null) ? 0 : this.PRICECUSTOMERGROUPCODE.hashCode());
								
								result = prime * result + ((this.PRODUCTCOLORID == null) ? 0 : this.PRODUCTCOLORID.hashCode());
								
								result = prime * result + ((this.PRODUCTSIZEID == null) ? 0 : this.PRODUCTSIZEID.hashCode());
								
								result = prime * result + ((this.PRODUCTSTYLEID == null) ? 0 : this.PRODUCTSTYLEID.hashCode());
								
								result = prime * result + ((this.QUANTITYUNITSYMBOL == null) ? 0 : this.QUANTITYUNITSYMBOL.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_24 other = (KeyStruct_tUniqRow_24) obj;
				
									if (this.TRADEAGREEMENTJOURNALNUMBER == null) {
										if (other.TRADEAGREEMENTJOURNALNUMBER != null) 
											return false;
								
									} else if (!this.TRADEAGREEMENTJOURNALNUMBER.equals(other.TRADEAGREEMENTJOURNALNUMBER))
								 
										return false;
								
									if (this.ITEMNUMBER == null) {
										if (other.ITEMNUMBER != null) 
											return false;
								
									} else if (!this.ITEMNUMBER.equals(other.ITEMNUMBER))
								 
										return false;
								
									if (this.PRICE == null) {
										if (other.PRICE != null) 
											return false;
								
									} else if (!this.PRICE.equals(other.PRICE))
								 
										return false;
								
									if (this.PRICECURRENCYCODE == null) {
										if (other.PRICECURRENCYCODE != null) 
											return false;
								
									} else if (!this.PRICECURRENCYCODE.equals(other.PRICECURRENCYCODE))
								 
										return false;
								
									if (this.PRICECUSTOMERGROUPCODE == null) {
										if (other.PRICECUSTOMERGROUPCODE != null) 
											return false;
								
									} else if (!this.PRICECUSTOMERGROUPCODE.equals(other.PRICECUSTOMERGROUPCODE))
								 
										return false;
								
									if (this.PRODUCTCOLORID == null) {
										if (other.PRODUCTCOLORID != null) 
											return false;
								
									} else if (!this.PRODUCTCOLORID.equals(other.PRODUCTCOLORID))
								 
										return false;
								
									if (this.PRODUCTSIZEID == null) {
										if (other.PRODUCTSIZEID != null) 
											return false;
								
									} else if (!this.PRODUCTSIZEID.equals(other.PRODUCTSIZEID))
								 
										return false;
								
									if (this.PRODUCTSTYLEID == null) {
										if (other.PRODUCTSTYLEID != null) 
											return false;
								
									} else if (!this.PRODUCTSTYLEID.equals(other.PRODUCTSTYLEID))
								 
										return false;
								
									if (this.QUANTITYUNITSYMBOL == null) {
										if (other.QUANTITYUNITSYMBOL != null) 
											return false;
								
									} else if (!this.QUANTITYUNITSYMBOL.equals(other.QUANTITYUNITSYMBOL))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_24 = 0;
int nb_duplicates_tUniqRow_24 = 0;
KeyStruct_tUniqRow_24 finder_tUniqRow_24 = new KeyStruct_tUniqRow_24();
java.util.Set<KeyStruct_tUniqRow_24> keystUniqRow_24 = new java.util.HashSet<KeyStruct_tUniqRow_24>(); 

 



/**
 * [tUniqRow_24 begin ] stop
 */







	
	/**
	 * [tHashOutput_16 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_16", false);
		start_Hash.put("tHashOutput_16", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_16";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row58");
					}
				
		int tos_count_tHashOutput_16 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_16=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row58Struct> tHashFile_tHashOutput_16 = null;
		String hashKey_tHashOutput_16 = "tHashFile_EXTRACT_FOR_DYNAMICS_PRICE_" + pid + "_tHashOutput_16";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_16)){
			    if(mf_tHashOutput_16.getResourceMap().get(hashKey_tHashOutput_16) == null){
	      		    mf_tHashOutput_16.getResourceMap().put(hashKey_tHashOutput_16, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row58Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_16 = mf_tHashOutput_16.getResourceMap().get(hashKey_tHashOutput_16);
			    }else{
			    	tHashFile_tHashOutput_16 = mf_tHashOutput_16.getResourceMap().get(hashKey_tHashOutput_16);
			    }
			}
        int nb_line_tHashOutput_16 = 0;
 



/**
 * [tHashOutput_16 begin ] stop
 */



	
	/**
	 * [tFilterRow_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_9", false);
		start_Hash.put("tFilterRow_9", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_9";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row57");
					}
				
		int tos_count_tFilterRow_9 = 0;
		
    int nb_line_tFilterRow_9 = 0;
    int nb_line_ok_tFilterRow_9 = 0;
    int nb_line_reject_tFilterRow_9 = 0;

    class Operator_tFilterRow_9 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_9(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_9 begin ] stop
 */



	
	/**
	 * [tUniqRow_25 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_25", false);
		start_Hash.put("tUniqRow_25", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_25";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0");
					}
				
		int tos_count_tUniqRow_25 = 0;
		

	
		class KeyStruct_tUniqRow_25 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String TRADEAGREEMENTJOURNALNUMBER;
					String ITEMNUMBER;
					Double PRICE;
					String PRICECURRENCYCODE;
					String PRICECUSTOMERGROUPCODE;
					String PRODUCTCOLORID;
					String PRODUCTSIZEID;
					String PRODUCTSTYLEID;
					String QUANTITYUNITSYMBOL;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.TRADEAGREEMENTJOURNALNUMBER == null) ? 0 : this.TRADEAGREEMENTJOURNALNUMBER.hashCode());
								
								result = prime * result + ((this.ITEMNUMBER == null) ? 0 : this.ITEMNUMBER.hashCode());
								
								result = prime * result + ((this.PRICE == null) ? 0 : this.PRICE.hashCode());
								
								result = prime * result + ((this.PRICECURRENCYCODE == null) ? 0 : this.PRICECURRENCYCODE.hashCode());
								
								result = prime * result + ((this.PRICECUSTOMERGROUPCODE == null) ? 0 : this.PRICECUSTOMERGROUPCODE.hashCode());
								
								result = prime * result + ((this.PRODUCTCOLORID == null) ? 0 : this.PRODUCTCOLORID.hashCode());
								
								result = prime * result + ((this.PRODUCTSIZEID == null) ? 0 : this.PRODUCTSIZEID.hashCode());
								
								result = prime * result + ((this.PRODUCTSTYLEID == null) ? 0 : this.PRODUCTSTYLEID.hashCode());
								
								result = prime * result + ((this.QUANTITYUNITSYMBOL == null) ? 0 : this.QUANTITYUNITSYMBOL.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_25 other = (KeyStruct_tUniqRow_25) obj;
				
									if (this.TRADEAGREEMENTJOURNALNUMBER == null) {
										if (other.TRADEAGREEMENTJOURNALNUMBER != null) 
											return false;
								
									} else if (!this.TRADEAGREEMENTJOURNALNUMBER.equals(other.TRADEAGREEMENTJOURNALNUMBER))
								 
										return false;
								
									if (this.ITEMNUMBER == null) {
										if (other.ITEMNUMBER != null) 
											return false;
								
									} else if (!this.ITEMNUMBER.equals(other.ITEMNUMBER))
								 
										return false;
								
									if (this.PRICE == null) {
										if (other.PRICE != null) 
											return false;
								
									} else if (!this.PRICE.equals(other.PRICE))
								 
										return false;
								
									if (this.PRICECURRENCYCODE == null) {
										if (other.PRICECURRENCYCODE != null) 
											return false;
								
									} else if (!this.PRICECURRENCYCODE.equals(other.PRICECURRENCYCODE))
								 
										return false;
								
									if (this.PRICECUSTOMERGROUPCODE == null) {
										if (other.PRICECUSTOMERGROUPCODE != null) 
											return false;
								
									} else if (!this.PRICECUSTOMERGROUPCODE.equals(other.PRICECUSTOMERGROUPCODE))
								 
										return false;
								
									if (this.PRODUCTCOLORID == null) {
										if (other.PRODUCTCOLORID != null) 
											return false;
								
									} else if (!this.PRODUCTCOLORID.equals(other.PRODUCTCOLORID))
								 
										return false;
								
									if (this.PRODUCTSIZEID == null) {
										if (other.PRODUCTSIZEID != null) 
											return false;
								
									} else if (!this.PRODUCTSIZEID.equals(other.PRODUCTSIZEID))
								 
										return false;
								
									if (this.PRODUCTSTYLEID == null) {
										if (other.PRODUCTSTYLEID != null) 
											return false;
								
									} else if (!this.PRODUCTSTYLEID.equals(other.PRODUCTSTYLEID))
								 
										return false;
								
									if (this.QUANTITYUNITSYMBOL == null) {
										if (other.QUANTITYUNITSYMBOL != null) 
											return false;
								
									} else if (!this.QUANTITYUNITSYMBOL.equals(other.QUANTITYUNITSYMBOL))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_25 = 0;
int nb_duplicates_tUniqRow_25 = 0;
KeyStruct_tUniqRow_25 finder_tUniqRow_25 = new KeyStruct_tUniqRow_25();
java.util.Set<KeyStruct_tUniqRow_25> keystUniqRow_25 = new java.util.HashSet<KeyStruct_tUniqRow_25>(); 

 



/**
 * [tUniqRow_25 begin ] stop
 */







	
	/**
	 * [tHashOutput_17 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_17", false);
		start_Hash.put("tHashOutput_17", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_17";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row62");
					}
				
		int tos_count_tHashOutput_17 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_17=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row62Struct> tHashFile_tHashOutput_17 = null;
		String hashKey_tHashOutput_17 = "tHashFile_EXTRACT_FOR_DYNAMICS_PRICE_" + pid + "_tHashOutput_17";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_17)){
			    if(mf_tHashOutput_17.getResourceMap().get(hashKey_tHashOutput_17) == null){
	      		    mf_tHashOutput_17.getResourceMap().put(hashKey_tHashOutput_17, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row62Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_17 = mf_tHashOutput_17.getResourceMap().get(hashKey_tHashOutput_17);
			    }else{
			    	tHashFile_tHashOutput_17 = mf_tHashOutput_17.getResourceMap().get(hashKey_tHashOutput_17);
			    }
			}
        int nb_line_tHashOutput_17 = 0;
 



/**
 * [tHashOutput_17 begin ] stop
 */



	
	/**
	 * [tFilterRow_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_10", false);
		start_Hash.put("tFilterRow_10", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_10";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row61");
					}
				
		int tos_count_tFilterRow_10 = 0;
		
    int nb_line_tFilterRow_10 = 0;
    int nb_line_ok_tFilterRow_10 = 0;
    int nb_line_reject_tFilterRow_10 = 0;

    class Operator_tFilterRow_10 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_10(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_10 begin ] stop
 */



	
	/**
	 * [tUniqRow_26 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_26", false);
		start_Hash.put("tUniqRow_26", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_26";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0");
					}
				
		int tos_count_tUniqRow_26 = 0;
		

	
		class KeyStruct_tUniqRow_26 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String TRADEAGREEMENTJOURNALNUMBER;
					String ITEMNUMBER;
					Double PRICE;
					String PRICECURRENCYCODE;
					String PRICECUSTOMERGROUPCODE;
					String PRODUCTCOLORID;
					String PRODUCTSIZEID;
					String PRODUCTSTYLEID;
					String QUANTITYUNITSYMBOL;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.TRADEAGREEMENTJOURNALNUMBER == null) ? 0 : this.TRADEAGREEMENTJOURNALNUMBER.hashCode());
								
								result = prime * result + ((this.ITEMNUMBER == null) ? 0 : this.ITEMNUMBER.hashCode());
								
								result = prime * result + ((this.PRICE == null) ? 0 : this.PRICE.hashCode());
								
								result = prime * result + ((this.PRICECURRENCYCODE == null) ? 0 : this.PRICECURRENCYCODE.hashCode());
								
								result = prime * result + ((this.PRICECUSTOMERGROUPCODE == null) ? 0 : this.PRICECUSTOMERGROUPCODE.hashCode());
								
								result = prime * result + ((this.PRODUCTCOLORID == null) ? 0 : this.PRODUCTCOLORID.hashCode());
								
								result = prime * result + ((this.PRODUCTSIZEID == null) ? 0 : this.PRODUCTSIZEID.hashCode());
								
								result = prime * result + ((this.PRODUCTSTYLEID == null) ? 0 : this.PRODUCTSTYLEID.hashCode());
								
								result = prime * result + ((this.QUANTITYUNITSYMBOL == null) ? 0 : this.QUANTITYUNITSYMBOL.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_26 other = (KeyStruct_tUniqRow_26) obj;
				
									if (this.TRADEAGREEMENTJOURNALNUMBER == null) {
										if (other.TRADEAGREEMENTJOURNALNUMBER != null) 
											return false;
								
									} else if (!this.TRADEAGREEMENTJOURNALNUMBER.equals(other.TRADEAGREEMENTJOURNALNUMBER))
								 
										return false;
								
									if (this.ITEMNUMBER == null) {
										if (other.ITEMNUMBER != null) 
											return false;
								
									} else if (!this.ITEMNUMBER.equals(other.ITEMNUMBER))
								 
										return false;
								
									if (this.PRICE == null) {
										if (other.PRICE != null) 
											return false;
								
									} else if (!this.PRICE.equals(other.PRICE))
								 
										return false;
								
									if (this.PRICECURRENCYCODE == null) {
										if (other.PRICECURRENCYCODE != null) 
											return false;
								
									} else if (!this.PRICECURRENCYCODE.equals(other.PRICECURRENCYCODE))
								 
										return false;
								
									if (this.PRICECUSTOMERGROUPCODE == null) {
										if (other.PRICECUSTOMERGROUPCODE != null) 
											return false;
								
									} else if (!this.PRICECUSTOMERGROUPCODE.equals(other.PRICECUSTOMERGROUPCODE))
								 
										return false;
								
									if (this.PRODUCTCOLORID == null) {
										if (other.PRODUCTCOLORID != null) 
											return false;
								
									} else if (!this.PRODUCTCOLORID.equals(other.PRODUCTCOLORID))
								 
										return false;
								
									if (this.PRODUCTSIZEID == null) {
										if (other.PRODUCTSIZEID != null) 
											return false;
								
									} else if (!this.PRODUCTSIZEID.equals(other.PRODUCTSIZEID))
								 
										return false;
								
									if (this.PRODUCTSTYLEID == null) {
										if (other.PRODUCTSTYLEID != null) 
											return false;
								
									} else if (!this.PRODUCTSTYLEID.equals(other.PRODUCTSTYLEID))
								 
										return false;
								
									if (this.QUANTITYUNITSYMBOL == null) {
										if (other.QUANTITYUNITSYMBOL != null) 
											return false;
								
									} else if (!this.QUANTITYUNITSYMBOL.equals(other.QUANTITYUNITSYMBOL))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_26 = 0;
int nb_duplicates_tUniqRow_26 = 0;
KeyStruct_tUniqRow_26 finder_tUniqRow_26 = new KeyStruct_tUniqRow_26();
java.util.Set<KeyStruct_tUniqRow_26> keystUniqRow_26 = new java.util.HashSet<KeyStruct_tUniqRow_26>(); 

 



/**
 * [tUniqRow_26 begin ] stop
 */







	
	/**
	 * [tHashOutput_18 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_18", false);
		start_Hash.put("tHashOutput_18", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_18";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row63");
					}
				
		int tos_count_tHashOutput_18 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_18=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row63Struct> tHashFile_tHashOutput_18 = null;
		String hashKey_tHashOutput_18 = "tHashFile_EXTRACT_FOR_DYNAMICS_PRICE_" + pid + "_tHashOutput_18";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_18)){
			    if(mf_tHashOutput_18.getResourceMap().get(hashKey_tHashOutput_18) == null){
	      		    mf_tHashOutput_18.getResourceMap().put(hashKey_tHashOutput_18, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row63Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_18 = mf_tHashOutput_18.getResourceMap().get(hashKey_tHashOutput_18);
			    }else{
			    	tHashFile_tHashOutput_18 = mf_tHashOutput_18.getResourceMap().get(hashKey_tHashOutput_18);
			    }
			}
        int nb_line_tHashOutput_18 = 0;
 



/**
 * [tHashOutput_18 begin ] stop
 */



	
	/**
	 * [tFilterRow_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_11", false);
		start_Hash.put("tFilterRow_11", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_11";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row64");
					}
				
		int tos_count_tFilterRow_11 = 0;
		
    int nb_line_tFilterRow_11 = 0;
    int nb_line_ok_tFilterRow_11 = 0;
    int nb_line_reject_tFilterRow_11 = 0;

    class Operator_tFilterRow_11 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_11(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_11 begin ] stop
 */



	
	/**
	 * [tUniqRow_27 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_27", false);
		start_Hash.put("tUniqRow_27", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_27";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0");
					}
				
		int tos_count_tUniqRow_27 = 0;
		

	
		class KeyStruct_tUniqRow_27 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String TRADEAGREEMENTJOURNALNUMBER;
					String ITEMNUMBER;
					Double PRICE;
					String PRICECURRENCYCODE;
					String PRICECUSTOMERGROUPCODE;
					String PRODUCTCOLORID;
					String PRODUCTSIZEID;
					String PRODUCTSTYLEID;
					String QUANTITYUNITSYMBOL;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.TRADEAGREEMENTJOURNALNUMBER == null) ? 0 : this.TRADEAGREEMENTJOURNALNUMBER.hashCode());
								
								result = prime * result + ((this.ITEMNUMBER == null) ? 0 : this.ITEMNUMBER.hashCode());
								
								result = prime * result + ((this.PRICE == null) ? 0 : this.PRICE.hashCode());
								
								result = prime * result + ((this.PRICECURRENCYCODE == null) ? 0 : this.PRICECURRENCYCODE.hashCode());
								
								result = prime * result + ((this.PRICECUSTOMERGROUPCODE == null) ? 0 : this.PRICECUSTOMERGROUPCODE.hashCode());
								
								result = prime * result + ((this.PRODUCTCOLORID == null) ? 0 : this.PRODUCTCOLORID.hashCode());
								
								result = prime * result + ((this.PRODUCTSIZEID == null) ? 0 : this.PRODUCTSIZEID.hashCode());
								
								result = prime * result + ((this.PRODUCTSTYLEID == null) ? 0 : this.PRODUCTSTYLEID.hashCode());
								
								result = prime * result + ((this.QUANTITYUNITSYMBOL == null) ? 0 : this.QUANTITYUNITSYMBOL.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_27 other = (KeyStruct_tUniqRow_27) obj;
				
									if (this.TRADEAGREEMENTJOURNALNUMBER == null) {
										if (other.TRADEAGREEMENTJOURNALNUMBER != null) 
											return false;
								
									} else if (!this.TRADEAGREEMENTJOURNALNUMBER.equals(other.TRADEAGREEMENTJOURNALNUMBER))
								 
										return false;
								
									if (this.ITEMNUMBER == null) {
										if (other.ITEMNUMBER != null) 
											return false;
								
									} else if (!this.ITEMNUMBER.equals(other.ITEMNUMBER))
								 
										return false;
								
									if (this.PRICE == null) {
										if (other.PRICE != null) 
											return false;
								
									} else if (!this.PRICE.equals(other.PRICE))
								 
										return false;
								
									if (this.PRICECURRENCYCODE == null) {
										if (other.PRICECURRENCYCODE != null) 
											return false;
								
									} else if (!this.PRICECURRENCYCODE.equals(other.PRICECURRENCYCODE))
								 
										return false;
								
									if (this.PRICECUSTOMERGROUPCODE == null) {
										if (other.PRICECUSTOMERGROUPCODE != null) 
											return false;
								
									} else if (!this.PRICECUSTOMERGROUPCODE.equals(other.PRICECUSTOMERGROUPCODE))
								 
										return false;
								
									if (this.PRODUCTCOLORID == null) {
										if (other.PRODUCTCOLORID != null) 
											return false;
								
									} else if (!this.PRODUCTCOLORID.equals(other.PRODUCTCOLORID))
								 
										return false;
								
									if (this.PRODUCTSIZEID == null) {
										if (other.PRODUCTSIZEID != null) 
											return false;
								
									} else if (!this.PRODUCTSIZEID.equals(other.PRODUCTSIZEID))
								 
										return false;
								
									if (this.PRODUCTSTYLEID == null) {
										if (other.PRODUCTSTYLEID != null) 
											return false;
								
									} else if (!this.PRODUCTSTYLEID.equals(other.PRODUCTSTYLEID))
								 
										return false;
								
									if (this.QUANTITYUNITSYMBOL == null) {
										if (other.QUANTITYUNITSYMBOL != null) 
											return false;
								
									} else if (!this.QUANTITYUNITSYMBOL.equals(other.QUANTITYUNITSYMBOL))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_27 = 0;
int nb_duplicates_tUniqRow_27 = 0;
KeyStruct_tUniqRow_27 finder_tUniqRow_27 = new KeyStruct_tUniqRow_27();
java.util.Set<KeyStruct_tUniqRow_27> keystUniqRow_27 = new java.util.HashSet<KeyStruct_tUniqRow_27>(); 

 



/**
 * [tUniqRow_27 begin ] stop
 */







	
	/**
	 * [tHashOutput_19 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_19", false);
		start_Hash.put("tHashOutput_19", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_19";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row67");
					}
				
		int tos_count_tHashOutput_19 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_19=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row67Struct> tHashFile_tHashOutput_19 = null;
		String hashKey_tHashOutput_19 = "tHashFile_EXTRACT_FOR_DYNAMICS_PRICE_" + pid + "_tHashOutput_19";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_19)){
			    if(mf_tHashOutput_19.getResourceMap().get(hashKey_tHashOutput_19) == null){
	      		    mf_tHashOutput_19.getResourceMap().put(hashKey_tHashOutput_19, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row67Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_19 = mf_tHashOutput_19.getResourceMap().get(hashKey_tHashOutput_19);
			    }else{
			    	tHashFile_tHashOutput_19 = mf_tHashOutput_19.getResourceMap().get(hashKey_tHashOutput_19);
			    }
			}
        int nb_line_tHashOutput_19 = 0;
 



/**
 * [tHashOutput_19 begin ] stop
 */



	
	/**
	 * [tFilterRow_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_12", false);
		start_Hash.put("tFilterRow_12", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_12";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row68");
					}
				
		int tos_count_tFilterRow_12 = 0;
		
    int nb_line_tFilterRow_12 = 0;
    int nb_line_ok_tFilterRow_12 = 0;
    int nb_line_reject_tFilterRow_12 = 0;

    class Operator_tFilterRow_12 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_12(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_12 begin ] stop
 */



	
	/**
	 * [tUniqRow_28 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_28", false);
		start_Hash.put("tUniqRow_28", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_28";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0");
					}
				
		int tos_count_tUniqRow_28 = 0;
		

	
		class KeyStruct_tUniqRow_28 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String TRADEAGREEMENTJOURNALNUMBER;
					String ITEMNUMBER;
					Double PRICE;
					String PRICECURRENCYCODE;
					String PRICECUSTOMERGROUPCODE;
					String PRODUCTCOLORID;
					String PRODUCTSIZEID;
					String PRODUCTSTYLEID;
					String QUANTITYUNITSYMBOL;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.TRADEAGREEMENTJOURNALNUMBER == null) ? 0 : this.TRADEAGREEMENTJOURNALNUMBER.hashCode());
								
								result = prime * result + ((this.ITEMNUMBER == null) ? 0 : this.ITEMNUMBER.hashCode());
								
								result = prime * result + ((this.PRICE == null) ? 0 : this.PRICE.hashCode());
								
								result = prime * result + ((this.PRICECURRENCYCODE == null) ? 0 : this.PRICECURRENCYCODE.hashCode());
								
								result = prime * result + ((this.PRICECUSTOMERGROUPCODE == null) ? 0 : this.PRICECUSTOMERGROUPCODE.hashCode());
								
								result = prime * result + ((this.PRODUCTCOLORID == null) ? 0 : this.PRODUCTCOLORID.hashCode());
								
								result = prime * result + ((this.PRODUCTSIZEID == null) ? 0 : this.PRODUCTSIZEID.hashCode());
								
								result = prime * result + ((this.PRODUCTSTYLEID == null) ? 0 : this.PRODUCTSTYLEID.hashCode());
								
								result = prime * result + ((this.QUANTITYUNITSYMBOL == null) ? 0 : this.QUANTITYUNITSYMBOL.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_28 other = (KeyStruct_tUniqRow_28) obj;
				
									if (this.TRADEAGREEMENTJOURNALNUMBER == null) {
										if (other.TRADEAGREEMENTJOURNALNUMBER != null) 
											return false;
								
									} else if (!this.TRADEAGREEMENTJOURNALNUMBER.equals(other.TRADEAGREEMENTJOURNALNUMBER))
								 
										return false;
								
									if (this.ITEMNUMBER == null) {
										if (other.ITEMNUMBER != null) 
											return false;
								
									} else if (!this.ITEMNUMBER.equals(other.ITEMNUMBER))
								 
										return false;
								
									if (this.PRICE == null) {
										if (other.PRICE != null) 
											return false;
								
									} else if (!this.PRICE.equals(other.PRICE))
								 
										return false;
								
									if (this.PRICECURRENCYCODE == null) {
										if (other.PRICECURRENCYCODE != null) 
											return false;
								
									} else if (!this.PRICECURRENCYCODE.equals(other.PRICECURRENCYCODE))
								 
										return false;
								
									if (this.PRICECUSTOMERGROUPCODE == null) {
										if (other.PRICECUSTOMERGROUPCODE != null) 
											return false;
								
									} else if (!this.PRICECUSTOMERGROUPCODE.equals(other.PRICECUSTOMERGROUPCODE))
								 
										return false;
								
									if (this.PRODUCTCOLORID == null) {
										if (other.PRODUCTCOLORID != null) 
											return false;
								
									} else if (!this.PRODUCTCOLORID.equals(other.PRODUCTCOLORID))
								 
										return false;
								
									if (this.PRODUCTSIZEID == null) {
										if (other.PRODUCTSIZEID != null) 
											return false;
								
									} else if (!this.PRODUCTSIZEID.equals(other.PRODUCTSIZEID))
								 
										return false;
								
									if (this.PRODUCTSTYLEID == null) {
										if (other.PRODUCTSTYLEID != null) 
											return false;
								
									} else if (!this.PRODUCTSTYLEID.equals(other.PRODUCTSTYLEID))
								 
										return false;
								
									if (this.QUANTITYUNITSYMBOL == null) {
										if (other.QUANTITYUNITSYMBOL != null) 
											return false;
								
									} else if (!this.QUANTITYUNITSYMBOL.equals(other.QUANTITYUNITSYMBOL))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_28 = 0;
int nb_duplicates_tUniqRow_28 = 0;
KeyStruct_tUniqRow_28 finder_tUniqRow_28 = new KeyStruct_tUniqRow_28();
java.util.Set<KeyStruct_tUniqRow_28> keystUniqRow_28 = new java.util.HashSet<KeyStruct_tUniqRow_28>(); 

 



/**
 * [tUniqRow_28 begin ] stop
 */







	
	/**
	 * [tHashOutput_20 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_20", false);
		start_Hash.put("tHashOutput_20", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_20";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row70");
					}
				
		int tos_count_tHashOutput_20 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_20=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row70Struct> tHashFile_tHashOutput_20 = null;
		String hashKey_tHashOutput_20 = "tHashFile_EXTRACT_FOR_DYNAMICS_PRICE_" + pid + "_tHashOutput_20";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_20)){
			    if(mf_tHashOutput_20.getResourceMap().get(hashKey_tHashOutput_20) == null){
	      		    mf_tHashOutput_20.getResourceMap().put(hashKey_tHashOutput_20, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row70Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_20 = mf_tHashOutput_20.getResourceMap().get(hashKey_tHashOutput_20);
			    }else{
			    	tHashFile_tHashOutput_20 = mf_tHashOutput_20.getResourceMap().get(hashKey_tHashOutput_20);
			    }
			}
        int nb_line_tHashOutput_20 = 0;
 



/**
 * [tHashOutput_20 begin ] stop
 */



	
	/**
	 * [tFilterRow_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_13", false);
		start_Hash.put("tFilterRow_13", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_13";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row69");
					}
				
		int tos_count_tFilterRow_13 = 0;
		
    int nb_line_tFilterRow_13 = 0;
    int nb_line_ok_tFilterRow_13 = 0;
    int nb_line_reject_tFilterRow_13 = 0;

    class Operator_tFilterRow_13 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_13(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_13 begin ] stop
 */



	
	/**
	 * [tUniqRow_29 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_29", false);
		start_Hash.put("tUniqRow_29", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_29";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0");
					}
				
		int tos_count_tUniqRow_29 = 0;
		

	
		class KeyStruct_tUniqRow_29 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String TRADEAGREEMENTJOURNALNUMBER;
					String ITEMNUMBER;
					Double PRICE;
					String PRICECURRENCYCODE;
					String PRICECUSTOMERGROUPCODE;
					String PRODUCTCOLORID;
					String PRODUCTSIZEID;
					String PRODUCTSTYLEID;
					String QUANTITYUNITSYMBOL;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.TRADEAGREEMENTJOURNALNUMBER == null) ? 0 : this.TRADEAGREEMENTJOURNALNUMBER.hashCode());
								
								result = prime * result + ((this.ITEMNUMBER == null) ? 0 : this.ITEMNUMBER.hashCode());
								
								result = prime * result + ((this.PRICE == null) ? 0 : this.PRICE.hashCode());
								
								result = prime * result + ((this.PRICECURRENCYCODE == null) ? 0 : this.PRICECURRENCYCODE.hashCode());
								
								result = prime * result + ((this.PRICECUSTOMERGROUPCODE == null) ? 0 : this.PRICECUSTOMERGROUPCODE.hashCode());
								
								result = prime * result + ((this.PRODUCTCOLORID == null) ? 0 : this.PRODUCTCOLORID.hashCode());
								
								result = prime * result + ((this.PRODUCTSIZEID == null) ? 0 : this.PRODUCTSIZEID.hashCode());
								
								result = prime * result + ((this.PRODUCTSTYLEID == null) ? 0 : this.PRODUCTSTYLEID.hashCode());
								
								result = prime * result + ((this.QUANTITYUNITSYMBOL == null) ? 0 : this.QUANTITYUNITSYMBOL.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_29 other = (KeyStruct_tUniqRow_29) obj;
				
									if (this.TRADEAGREEMENTJOURNALNUMBER == null) {
										if (other.TRADEAGREEMENTJOURNALNUMBER != null) 
											return false;
								
									} else if (!this.TRADEAGREEMENTJOURNALNUMBER.equals(other.TRADEAGREEMENTJOURNALNUMBER))
								 
										return false;
								
									if (this.ITEMNUMBER == null) {
										if (other.ITEMNUMBER != null) 
											return false;
								
									} else if (!this.ITEMNUMBER.equals(other.ITEMNUMBER))
								 
										return false;
								
									if (this.PRICE == null) {
										if (other.PRICE != null) 
											return false;
								
									} else if (!this.PRICE.equals(other.PRICE))
								 
										return false;
								
									if (this.PRICECURRENCYCODE == null) {
										if (other.PRICECURRENCYCODE != null) 
											return false;
								
									} else if (!this.PRICECURRENCYCODE.equals(other.PRICECURRENCYCODE))
								 
										return false;
								
									if (this.PRICECUSTOMERGROUPCODE == null) {
										if (other.PRICECUSTOMERGROUPCODE != null) 
											return false;
								
									} else if (!this.PRICECUSTOMERGROUPCODE.equals(other.PRICECUSTOMERGROUPCODE))
								 
										return false;
								
									if (this.PRODUCTCOLORID == null) {
										if (other.PRODUCTCOLORID != null) 
											return false;
								
									} else if (!this.PRODUCTCOLORID.equals(other.PRODUCTCOLORID))
								 
										return false;
								
									if (this.PRODUCTSIZEID == null) {
										if (other.PRODUCTSIZEID != null) 
											return false;
								
									} else if (!this.PRODUCTSIZEID.equals(other.PRODUCTSIZEID))
								 
										return false;
								
									if (this.PRODUCTSTYLEID == null) {
										if (other.PRODUCTSTYLEID != null) 
											return false;
								
									} else if (!this.PRODUCTSTYLEID.equals(other.PRODUCTSTYLEID))
								 
										return false;
								
									if (this.QUANTITYUNITSYMBOL == null) {
										if (other.QUANTITYUNITSYMBOL != null) 
											return false;
								
									} else if (!this.QUANTITYUNITSYMBOL.equals(other.QUANTITYUNITSYMBOL))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_29 = 0;
int nb_duplicates_tUniqRow_29 = 0;
KeyStruct_tUniqRow_29 finder_tUniqRow_29 = new KeyStruct_tUniqRow_29();
java.util.Set<KeyStruct_tUniqRow_29> keystUniqRow_29 = new java.util.HashSet<KeyStruct_tUniqRow_29>(); 

 



/**
 * [tUniqRow_29 begin ] stop
 */







	
	/**
	 * [tHashOutput_21 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_21", false);
		start_Hash.put("tHashOutput_21", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_21";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row74");
					}
				
		int tos_count_tHashOutput_21 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_21=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row74Struct> tHashFile_tHashOutput_21 = null;
		String hashKey_tHashOutput_21 = "tHashFile_EXTRACT_FOR_DYNAMICS_PRICE_" + pid + "_tHashOutput_21";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_21)){
			    if(mf_tHashOutput_21.getResourceMap().get(hashKey_tHashOutput_21) == null){
	      		    mf_tHashOutput_21.getResourceMap().put(hashKey_tHashOutput_21, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row74Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_21 = mf_tHashOutput_21.getResourceMap().get(hashKey_tHashOutput_21);
			    }else{
			    	tHashFile_tHashOutput_21 = mf_tHashOutput_21.getResourceMap().get(hashKey_tHashOutput_21);
			    }
			}
        int nb_line_tHashOutput_21 = 0;
 



/**
 * [tHashOutput_21 begin ] stop
 */



	
	/**
	 * [tFilterRow_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_14", false);
		start_Hash.put("tFilterRow_14", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_14";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row73");
					}
				
		int tos_count_tFilterRow_14 = 0;
		
    int nb_line_tFilterRow_14 = 0;
    int nb_line_ok_tFilterRow_14 = 0;
    int nb_line_reject_tFilterRow_14 = 0;

    class Operator_tFilterRow_14 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_14(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_14 begin ] stop
 */



	
	/**
	 * [tUniqRow_30 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_30", false);
		start_Hash.put("tUniqRow_30", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_30";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0");
					}
				
		int tos_count_tUniqRow_30 = 0;
		

	
		class KeyStruct_tUniqRow_30 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String TRADEAGREEMENTJOURNALNUMBER;
					String ITEMNUMBER;
					Double PRICE;
					String PRICECURRENCYCODE;
					String PRICECUSTOMERGROUPCODE;
					String PRODUCTCOLORID;
					String PRODUCTSIZEID;
					String PRODUCTSTYLEID;
					String QUANTITYUNITSYMBOL;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.TRADEAGREEMENTJOURNALNUMBER == null) ? 0 : this.TRADEAGREEMENTJOURNALNUMBER.hashCode());
								
								result = prime * result + ((this.ITEMNUMBER == null) ? 0 : this.ITEMNUMBER.hashCode());
								
								result = prime * result + ((this.PRICE == null) ? 0 : this.PRICE.hashCode());
								
								result = prime * result + ((this.PRICECURRENCYCODE == null) ? 0 : this.PRICECURRENCYCODE.hashCode());
								
								result = prime * result + ((this.PRICECUSTOMERGROUPCODE == null) ? 0 : this.PRICECUSTOMERGROUPCODE.hashCode());
								
								result = prime * result + ((this.PRODUCTCOLORID == null) ? 0 : this.PRODUCTCOLORID.hashCode());
								
								result = prime * result + ((this.PRODUCTSIZEID == null) ? 0 : this.PRODUCTSIZEID.hashCode());
								
								result = prime * result + ((this.PRODUCTSTYLEID == null) ? 0 : this.PRODUCTSTYLEID.hashCode());
								
								result = prime * result + ((this.QUANTITYUNITSYMBOL == null) ? 0 : this.QUANTITYUNITSYMBOL.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_30 other = (KeyStruct_tUniqRow_30) obj;
				
									if (this.TRADEAGREEMENTJOURNALNUMBER == null) {
										if (other.TRADEAGREEMENTJOURNALNUMBER != null) 
											return false;
								
									} else if (!this.TRADEAGREEMENTJOURNALNUMBER.equals(other.TRADEAGREEMENTJOURNALNUMBER))
								 
										return false;
								
									if (this.ITEMNUMBER == null) {
										if (other.ITEMNUMBER != null) 
											return false;
								
									} else if (!this.ITEMNUMBER.equals(other.ITEMNUMBER))
								 
										return false;
								
									if (this.PRICE == null) {
										if (other.PRICE != null) 
											return false;
								
									} else if (!this.PRICE.equals(other.PRICE))
								 
										return false;
								
									if (this.PRICECURRENCYCODE == null) {
										if (other.PRICECURRENCYCODE != null) 
											return false;
								
									} else if (!this.PRICECURRENCYCODE.equals(other.PRICECURRENCYCODE))
								 
										return false;
								
									if (this.PRICECUSTOMERGROUPCODE == null) {
										if (other.PRICECUSTOMERGROUPCODE != null) 
											return false;
								
									} else if (!this.PRICECUSTOMERGROUPCODE.equals(other.PRICECUSTOMERGROUPCODE))
								 
										return false;
								
									if (this.PRODUCTCOLORID == null) {
										if (other.PRODUCTCOLORID != null) 
											return false;
								
									} else if (!this.PRODUCTCOLORID.equals(other.PRODUCTCOLORID))
								 
										return false;
								
									if (this.PRODUCTSIZEID == null) {
										if (other.PRODUCTSIZEID != null) 
											return false;
								
									} else if (!this.PRODUCTSIZEID.equals(other.PRODUCTSIZEID))
								 
										return false;
								
									if (this.PRODUCTSTYLEID == null) {
										if (other.PRODUCTSTYLEID != null) 
											return false;
								
									} else if (!this.PRODUCTSTYLEID.equals(other.PRODUCTSTYLEID))
								 
										return false;
								
									if (this.QUANTITYUNITSYMBOL == null) {
										if (other.QUANTITYUNITSYMBOL != null) 
											return false;
								
									} else if (!this.QUANTITYUNITSYMBOL.equals(other.QUANTITYUNITSYMBOL))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_30 = 0;
int nb_duplicates_tUniqRow_30 = 0;
KeyStruct_tUniqRow_30 finder_tUniqRow_30 = new KeyStruct_tUniqRow_30();
java.util.Set<KeyStruct_tUniqRow_30> keystUniqRow_30 = new java.util.HashSet<KeyStruct_tUniqRow_30>(); 

 



/**
 * [tUniqRow_30 begin ] stop
 */







	
	/**
	 * [tHashOutput_22 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_22", false);
		start_Hash.put("tHashOutput_22", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_22";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row76");
					}
				
		int tos_count_tHashOutput_22 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_22=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row76Struct> tHashFile_tHashOutput_22 = null;
		String hashKey_tHashOutput_22 = "tHashFile_EXTRACT_FOR_DYNAMICS_PRICE_" + pid + "_tHashOutput_22";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_22)){
			    if(mf_tHashOutput_22.getResourceMap().get(hashKey_tHashOutput_22) == null){
	      		    mf_tHashOutput_22.getResourceMap().put(hashKey_tHashOutput_22, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row76Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_22 = mf_tHashOutput_22.getResourceMap().get(hashKey_tHashOutput_22);
			    }else{
			    	tHashFile_tHashOutput_22 = mf_tHashOutput_22.getResourceMap().get(hashKey_tHashOutput_22);
			    }
			}
        int nb_line_tHashOutput_22 = 0;
 



/**
 * [tHashOutput_22 begin ] stop
 */



	
	/**
	 * [tFilterRow_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_15", false);
		start_Hash.put("tFilterRow_15", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_15";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row75");
					}
				
		int tos_count_tFilterRow_15 = 0;
		
    int nb_line_tFilterRow_15 = 0;
    int nb_line_ok_tFilterRow_15 = 0;
    int nb_line_reject_tFilterRow_15 = 0;

    class Operator_tFilterRow_15 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_15(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_15 begin ] stop
 */



	
	/**
	 * [tUniqRow_31 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_31", false);
		start_Hash.put("tUniqRow_31", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_31";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0");
					}
				
		int tos_count_tUniqRow_31 = 0;
		

	
		class KeyStruct_tUniqRow_31 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String TRADEAGREEMENTJOURNALNUMBER;
					String ITEMNUMBER;
					Double PRICE;
					String PRICECURRENCYCODE;
					String PRICECUSTOMERGROUPCODE;
					String PRODUCTCOLORID;
					String PRODUCTSIZEID;
					String PRODUCTSTYLEID;
					String QUANTITYUNITSYMBOL;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.TRADEAGREEMENTJOURNALNUMBER == null) ? 0 : this.TRADEAGREEMENTJOURNALNUMBER.hashCode());
								
								result = prime * result + ((this.ITEMNUMBER == null) ? 0 : this.ITEMNUMBER.hashCode());
								
								result = prime * result + ((this.PRICE == null) ? 0 : this.PRICE.hashCode());
								
								result = prime * result + ((this.PRICECURRENCYCODE == null) ? 0 : this.PRICECURRENCYCODE.hashCode());
								
								result = prime * result + ((this.PRICECUSTOMERGROUPCODE == null) ? 0 : this.PRICECUSTOMERGROUPCODE.hashCode());
								
								result = prime * result + ((this.PRODUCTCOLORID == null) ? 0 : this.PRODUCTCOLORID.hashCode());
								
								result = prime * result + ((this.PRODUCTSIZEID == null) ? 0 : this.PRODUCTSIZEID.hashCode());
								
								result = prime * result + ((this.PRODUCTSTYLEID == null) ? 0 : this.PRODUCTSTYLEID.hashCode());
								
								result = prime * result + ((this.QUANTITYUNITSYMBOL == null) ? 0 : this.QUANTITYUNITSYMBOL.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_31 other = (KeyStruct_tUniqRow_31) obj;
				
									if (this.TRADEAGREEMENTJOURNALNUMBER == null) {
										if (other.TRADEAGREEMENTJOURNALNUMBER != null) 
											return false;
								
									} else if (!this.TRADEAGREEMENTJOURNALNUMBER.equals(other.TRADEAGREEMENTJOURNALNUMBER))
								 
										return false;
								
									if (this.ITEMNUMBER == null) {
										if (other.ITEMNUMBER != null) 
											return false;
								
									} else if (!this.ITEMNUMBER.equals(other.ITEMNUMBER))
								 
										return false;
								
									if (this.PRICE == null) {
										if (other.PRICE != null) 
											return false;
								
									} else if (!this.PRICE.equals(other.PRICE))
								 
										return false;
								
									if (this.PRICECURRENCYCODE == null) {
										if (other.PRICECURRENCYCODE != null) 
											return false;
								
									} else if (!this.PRICECURRENCYCODE.equals(other.PRICECURRENCYCODE))
								 
										return false;
								
									if (this.PRICECUSTOMERGROUPCODE == null) {
										if (other.PRICECUSTOMERGROUPCODE != null) 
											return false;
								
									} else if (!this.PRICECUSTOMERGROUPCODE.equals(other.PRICECUSTOMERGROUPCODE))
								 
										return false;
								
									if (this.PRODUCTCOLORID == null) {
										if (other.PRODUCTCOLORID != null) 
											return false;
								
									} else if (!this.PRODUCTCOLORID.equals(other.PRODUCTCOLORID))
								 
										return false;
								
									if (this.PRODUCTSIZEID == null) {
										if (other.PRODUCTSIZEID != null) 
											return false;
								
									} else if (!this.PRODUCTSIZEID.equals(other.PRODUCTSIZEID))
								 
										return false;
								
									if (this.PRODUCTSTYLEID == null) {
										if (other.PRODUCTSTYLEID != null) 
											return false;
								
									} else if (!this.PRODUCTSTYLEID.equals(other.PRODUCTSTYLEID))
								 
										return false;
								
									if (this.QUANTITYUNITSYMBOL == null) {
										if (other.QUANTITYUNITSYMBOL != null) 
											return false;
								
									} else if (!this.QUANTITYUNITSYMBOL.equals(other.QUANTITYUNITSYMBOL))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_31 = 0;
int nb_duplicates_tUniqRow_31 = 0;
KeyStruct_tUniqRow_31 finder_tUniqRow_31 = new KeyStruct_tUniqRow_31();
java.util.Set<KeyStruct_tUniqRow_31> keystUniqRow_31 = new java.util.HashSet<KeyStruct_tUniqRow_31>(); 

 



/**
 * [tUniqRow_31 begin ] stop
 */



	
	/**
	 * [tMap_34 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_34", false);
		start_Hash.put("tMap_34", System.currentTimeMillis());
		
	
	currentComponent="tMap_34";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_full_EUR_FIN_WSP");
					}
				
		int tos_count_tMap_34 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_34__Struct  {
}
Var__tMap_34__Struct Var__tMap_34 = new Var__tMap_34__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0Struct copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0_tmp = new copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0Struct();
// ###############################

        
        



        









 



/**
 * [tMap_34 begin ] stop
 */



	
	/**
	 * [tMap_33 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_33", false);
		start_Hash.put("tMap_33", System.currentTimeMillis());
		
	
	currentComponent="tMap_33";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_full_SEK_RRP");
					}
				
		int tos_count_tMap_33 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_33__Struct  {
}
Var__tMap_33__Struct Var__tMap_33 = new Var__tMap_33__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0Struct copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0_tmp = new copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0Struct();
sortie_full_EUR_FIN_WSPStruct sortie_full_EUR_FIN_WSP_tmp = new sortie_full_EUR_FIN_WSPStruct();
// ###############################

        
        



        









 



/**
 * [tMap_33 begin ] stop
 */



	
	/**
	 * [tMap_32 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_32", false);
		start_Hash.put("tMap_32", System.currentTimeMillis());
		
	
	currentComponent="tMap_32";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_full_SEK_WSP");
					}
				
		int tos_count_tMap_32 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_32__Struct  {
}
Var__tMap_32__Struct Var__tMap_32 = new Var__tMap_32__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0Struct copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_tmp = new copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0Struct();
sortie_full_SEK_RRPStruct sortie_full_SEK_RRP_tmp = new sortie_full_SEK_RRPStruct();
// ###############################

        
        



        









 



/**
 * [tMap_32 begin ] stop
 */



	
	/**
	 * [tMap_31 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_31", false);
		start_Hash.put("tMap_31", System.currentTimeMillis());
		
	
	currentComponent="tMap_31";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_full_DKK_WSP");
					}
				
		int tos_count_tMap_31 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_31__Struct  {
}
Var__tMap_31__Struct Var__tMap_31 = new Var__tMap_31__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0Struct copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_tmp = new copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0Struct();
sortie_full_SEK_WSPStruct sortie_full_SEK_WSP_tmp = new sortie_full_SEK_WSPStruct();
// ###############################

        
        



        









 



/**
 * [tMap_31 begin ] stop
 */



	
	/**
	 * [tMap_30 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_30", false);
		start_Hash.put("tMap_30", System.currentTimeMillis());
		
	
	currentComponent="tMap_30";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_full_DKK_RRP");
					}
				
		int tos_count_tMap_30 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_30__Struct  {
}
Var__tMap_30__Struct Var__tMap_30 = new Var__tMap_30__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0Struct copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_tmp = new copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0Struct();
sortie_full_DKK_WSPStruct sortie_full_DKK_WSP_tmp = new sortie_full_DKK_WSPStruct();
// ###############################

        
        



        









 



/**
 * [tMap_30 begin ] stop
 */



	
	/**
	 * [tMap_29 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_29", false);
		start_Hash.put("tMap_29", System.currentTimeMillis());
		
	
	currentComponent="tMap_29";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_full_nok_rrp");
					}
				
		int tos_count_tMap_29 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_29__Struct  {
}
Var__tMap_29__Struct Var__tMap_29 = new Var__tMap_29__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0Struct copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_tmp = new copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0Struct();
sortie_full_DKK_RRPStruct sortie_full_DKK_RRP_tmp = new sortie_full_DKK_RRPStruct();
// ###############################

        
        



        









 



/**
 * [tMap_29 begin ] stop
 */



	
	/**
	 * [tMap_28 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_28", false);
		start_Hash.put("tMap_28", System.currentTimeMillis());
		
	
	currentComponent="tMap_28";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_full_NOK_WSP");
					}
				
		int tos_count_tMap_28 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_28__Struct  {
}
Var__tMap_28__Struct Var__tMap_28 = new Var__tMap_28__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0Struct copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_tmp = new copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0Struct();
sortie_full_nok_rrpStruct sortie_full_nok_rrp_tmp = new sortie_full_nok_rrpStruct();
// ###############################

        
        



        









 



/**
 * [tMap_28 begin ] stop
 */



	
	/**
	 * [tMap_27 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_27", false);
		start_Hash.put("tMap_27", System.currentTimeMillis());
		
	
	currentComponent="tMap_27";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_full_chr_rrp");
					}
				
		int tos_count_tMap_27 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_27__Struct  {
}
Var__tMap_27__Struct Var__tMap_27 = new Var__tMap_27__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0Struct copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_tmp = new copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0Struct();
sortie_full_NOK_WSPStruct sortie_full_NOK_WSP_tmp = new sortie_full_NOK_WSPStruct();
// ###############################

        
        



        









 



/**
 * [tMap_27 begin ] stop
 */



	
	/**
	 * [tMap_26 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_26", false);
		start_Hash.put("tMap_26", System.currentTimeMillis());
		
	
	currentComponent="tMap_26";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_full_CHF_WSP");
					}
				
		int tos_count_tMap_26 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_26__Struct  {
}
Var__tMap_26__Struct Var__tMap_26 = new Var__tMap_26__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0Struct copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_tmp = new copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0Struct();
sortie_full_chr_rrpStruct sortie_full_chr_rrp_tmp = new sortie_full_chr_rrpStruct();
// ###############################

        
        



        









 



/**
 * [tMap_26 begin ] stop
 */



	
	/**
	 * [tMap_25 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_25", false);
		start_Hash.put("tMap_25", System.currentTimeMillis());
		
	
	currentComponent="tMap_25";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_full_GBP_RRP");
					}
				
		int tos_count_tMap_25 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_25__Struct  {
}
Var__tMap_25__Struct Var__tMap_25 = new Var__tMap_25__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfcopyOfcopyOfsortie_EUR_WSP_0Struct copyOfcopyOfcopyOfsortie_EUR_WSP_0_tmp = new copyOfcopyOfcopyOfsortie_EUR_WSP_0Struct();
sortie_full_CHF_WSPStruct sortie_full_CHF_WSP_tmp = new sortie_full_CHF_WSPStruct();
// ###############################

        
        



        









 



/**
 * [tMap_25 begin ] stop
 */



	
	/**
	 * [tMap_24 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_24", false);
		start_Hash.put("tMap_24", System.currentTimeMillis());
		
	
	currentComponent="tMap_24";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_full_gbp_wsp");
					}
				
		int tos_count_tMap_24 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_24__Struct  {
}
Var__tMap_24__Struct Var__tMap_24 = new Var__tMap_24__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfcopyOfsortie_EUR_WSP_0Struct copyOfcopyOfsortie_EUR_WSP_0_tmp = new copyOfcopyOfsortie_EUR_WSP_0Struct();
sortie_full_GBP_RRPStruct sortie_full_GBP_RRP_tmp = new sortie_full_GBP_RRPStruct();
// ###############################

        
        



        









 



/**
 * [tMap_24 begin ] stop
 */



	
	/**
	 * [tMap_23 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_23", false);
		start_Hash.put("tMap_23", System.currentTimeMillis());
		
	
	currentComponent="tMap_23";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_full_rrp_eur");
					}
				
		int tos_count_tMap_23 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_23__Struct  {
}
Var__tMap_23__Struct Var__tMap_23 = new Var__tMap_23__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfsortie_EUR_WSP_0Struct copyOfsortie_EUR_WSP_0_tmp = new copyOfsortie_EUR_WSP_0Struct();
sortie_full_gbp_wspStruct sortie_full_gbp_wsp_tmp = new sortie_full_gbp_wspStruct();
// ###############################

        
        



        









 



/**
 * [tMap_23 begin ] stop
 */



	
	/**
	 * [tMap_21 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_21", false);
		start_Hash.put("tMap_21", System.currentTimeMillis());
		
	
	currentComponent="tMap_21";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_full_eur_wsp");
					}
				
		int tos_count_tMap_21 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_21__Struct  {
}
Var__tMap_21__Struct Var__tMap_21 = new Var__tMap_21__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfsortie_EUR_WSPStruct copyOfsortie_EUR_WSP_tmp = new copyOfsortie_EUR_WSPStruct();
sortie_full_rrp_eurStruct sortie_full_rrp_eur_tmp = new sortie_full_rrp_eurStruct();
// ###############################

        
        



        









 



/**
 * [tMap_21 begin ] stop
 */



	
	/**
	 * [tMap_20 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_20", false);
		start_Hash.put("tMap_20", System.currentTimeMillis());
		
	
	currentComponent="tMap_20";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_Excel");
					}
				
		int tos_count_tMap_20 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_20__Struct  {
}
Var__tMap_20__Struct Var__tMap_20 = new Var__tMap_20__Struct();
// ###############################

// ###############################
// # Outputs initialization
sortie_EUR_WSPStruct sortie_EUR_WSP_tmp = new sortie_EUR_WSPStruct();
sortie_full_eur_wspStruct sortie_full_eur_wsp_tmp = new sortie_full_eur_wspStruct();
// ###############################

        
        



        









 



/**
 * [tMap_20 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
	String Fn_BRAND;
	String Fn_SEASON;
	String Fn_CATEGORY;
	String Fn_REF;
	String Fn_DESCRIPTION;
	String Fn_STYLE;
	String Fn_COLOR;
	String Fn_FASHION;
	String Fn_STYLE_COLOR_LABEL;
	String Fn_COLOR_NAME;
	String Fn_LBL;
	String Fn_STYLE_COLOR;
	String Fn_GENDER;
	String Fn_AGE_RANGE;
	String Fn_SIZE_RANGE;
	String Fn_SIZE;
	String Fn_US_SIZE;
	String Fn_CM_SIZE;
	String Fn_PRODUCT;
	String Fn_PRODUCT_STATUS;
	String Fn_PRODUCT_TIER;
	String Fn_ACCT_EXCLUS;
	String Fn_SIZE_RATIO_SPLIT;
	String Fn_REC_SIZE_SPLIT;
	String Fn_CARTON_QTY;
	String Fn_ATTRIBUTE;
	String Fn_UNITS;
	String Fn_EUR_RRP;
	String Fn_EUR_WSP;
	String Fn_GBP_RRP;
	String Fn_GBP_WSP;
	String Fn_CHF_RRP;
	String Fn_CHF_WSP;
	String Fn_NOK_RRP;
	String Fn_NOK_WSP;
	String Fn_DKK_RRP;
	String Fn_DKK_WSP;
	String Fn_SEK_RRP;
	String Fn_SEK_WSP;
	String Fn_EUR_FINN_RRP;
	String Fn_EUR_FINN_WSP;
	String Fn_FABRICATION;
	String Fn_COO;
	String Fn_CUSTOM_TARIFF_CODE;
	String Fn_UPC;
	String Fn_SMU_TYPE;
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
sortie_ExcelStruct sortie_Excel_tmp = new sortie_ExcelStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tFileInputExcel_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputExcel_2", false);
		start_Hash.put("tFileInputExcel_2", System.currentTimeMillis());
		
	
	currentComponent="tFileInputExcel_2";

	
		int tos_count_tFileInputExcel_2 = 0;
		

 
	final String decryptedPassword_tFileInputExcel_2 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[8NiBghxuZtC38uHlvaxTEXJxzXboz9uALprHPg==]");
        String password_tFileInputExcel_2 = decryptedPassword_tFileInputExcel_2;
        if (password_tFileInputExcel_2.isEmpty()){
            password_tFileInputExcel_2 = null;
        }
			class RegexUtil_tFileInputExcel_2 {

		    	public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, String oneSheetName, boolean useRegex) {

			        java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();

			        if(useRegex){//this part process the regex issue

				        java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(oneSheetName);
				        for (org.apache.poi.ss.usermodel.Sheet sheet : workbook) {
				            String sheetName = sheet.getSheetName();
				            java.util.regex.Matcher matcher = pattern.matcher(sheetName);
				            if (matcher.matches()) {
				            	if(sheet != null){
				                	list.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet);
				                }
				            }
				        }

			        }else{
			        	org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook.getSheet(oneSheetName);
		            	if(sheet != null){
		                	list.add(sheet);
		                }

			        }

			        return list;
			    }

			    public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, int index, boolean useRegex) {
			    	java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list =  new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
			    	org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook.getSheetAt(index);
	            	if(sheet != null){
	                	list.add(sheet);
	                }
			    	return list;
			    }

			}
		RegexUtil_tFileInputExcel_2 regexUtil_tFileInputExcel_2 = new RegexUtil_tFileInputExcel_2();

		Object source_tFileInputExcel_2 = context.IntegrationExcelPath + context.ExcelFileName;
		org.apache.poi.xssf.usermodel.XSSFWorkbook workbook_tFileInputExcel_2 = null;

		if(source_tFileInputExcel_2 instanceof String){
			workbook_tFileInputExcel_2 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory.create(new java.io.File((String)source_tFileInputExcel_2), password_tFileInputExcel_2);
		} else if(source_tFileInputExcel_2 instanceof java.io.InputStream) {
     		workbook_tFileInputExcel_2 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory.create((java.io.InputStream)source_tFileInputExcel_2, password_tFileInputExcel_2);
		} else{
			workbook_tFileInputExcel_2 = null;
			throw new java.lang.Exception("The data source should be specified as Inputstream or File Path!");
		}
		try {

		java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_tFileInputExcel_2 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
        sheetList_tFileInputExcel_2.addAll(regexUtil_tFileInputExcel_2.getSheets(workbook_tFileInputExcel_2, 0, false));
    	if(sheetList_tFileInputExcel_2.size() <= 0){
            throw new RuntimeException("Special sheets not exist!");
        }

		java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_FilterNull_tFileInputExcel_2 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
		for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_FilterNull_tFileInputExcel_2 : sheetList_tFileInputExcel_2) {
			if(sheet_FilterNull_tFileInputExcel_2!=null && sheetList_FilterNull_tFileInputExcel_2.iterator()!=null && sheet_FilterNull_tFileInputExcel_2.iterator().hasNext()){
				sheetList_FilterNull_tFileInputExcel_2.add(sheet_FilterNull_tFileInputExcel_2);
			}
		}
		sheetList_tFileInputExcel_2 = sheetList_FilterNull_tFileInputExcel_2;
	if(sheetList_tFileInputExcel_2.size()>0){
		int nb_line_tFileInputExcel_2 = 0;

        int begin_line_tFileInputExcel_2 = 1;

        int footer_input_tFileInputExcel_2 = 0;

        int end_line_tFileInputExcel_2=0;
        for(org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_2:sheetList_tFileInputExcel_2){
			end_line_tFileInputExcel_2+=(sheet_tFileInputExcel_2.getLastRowNum()+1);
        }
        end_line_tFileInputExcel_2 -= footer_input_tFileInputExcel_2;
        int limit_tFileInputExcel_2 = -1;
        int start_column_tFileInputExcel_2 = 1-1;
        int end_column_tFileInputExcel_2 = -1;
        Integer lastColumn_tFileInputExcel_2 = 47;
        if(lastColumn_tFileInputExcel_2!=null){
        	end_column_tFileInputExcel_2 = lastColumn_tFileInputExcel_2.intValue();
        }

        org.apache.poi.xssf.usermodel.XSSFRow row_tFileInputExcel_2 = null;
        org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_2 = sheetList_tFileInputExcel_2.get(0);
        int rowCount_tFileInputExcel_2 = 0;
        int sheetIndex_tFileInputExcel_2 = 0;
        int currentRows_tFileInputExcel_2 = (sheetList_tFileInputExcel_2.get(0).getLastRowNum()+1);

		//for the number format
        java.text.DecimalFormat df_tFileInputExcel_2 = new java.text.DecimalFormat("#.####################################");
        char decimalChar_tFileInputExcel_2 = df_tFileInputExcel_2.getDecimalFormatSymbols().getDecimalSeparator();
		
        for(int i_tFileInputExcel_2 = begin_line_tFileInputExcel_2; i_tFileInputExcel_2 < end_line_tFileInputExcel_2; i_tFileInputExcel_2++){

        	int emptyColumnCount_tFileInputExcel_2 = 0;

        	if (limit_tFileInputExcel_2 != -1 && nb_line_tFileInputExcel_2 >= limit_tFileInputExcel_2) {
        		break;
        	}

            while (i_tFileInputExcel_2 >= rowCount_tFileInputExcel_2 + currentRows_tFileInputExcel_2) {
                rowCount_tFileInputExcel_2 += currentRows_tFileInputExcel_2;
                sheet_tFileInputExcel_2 = sheetList_tFileInputExcel_2.get(++sheetIndex_tFileInputExcel_2);
                currentRows_tFileInputExcel_2 = (sheet_tFileInputExcel_2.getLastRowNum()+1);
            }
            globalMap.put("tFileInputExcel_2_CURRENT_SHEET",sheet_tFileInputExcel_2.getSheetName());
            if (rowCount_tFileInputExcel_2 <= i_tFileInputExcel_2) {
                row_tFileInputExcel_2 = sheet_tFileInputExcel_2.getRow(i_tFileInputExcel_2 - rowCount_tFileInputExcel_2);
            }
		    row3 = null;
					int tempRowLength_tFileInputExcel_2 = 46;
				
				int columnIndex_tFileInputExcel_2 = 0;
			
			String[] temp_row_tFileInputExcel_2 = new String[tempRowLength_tFileInputExcel_2];
			int excel_end_column_tFileInputExcel_2;
			if(row_tFileInputExcel_2==null){
				excel_end_column_tFileInputExcel_2=0;
			}else{
				excel_end_column_tFileInputExcel_2=row_tFileInputExcel_2.getLastCellNum();
			}
			int actual_end_column_tFileInputExcel_2;
			if(end_column_tFileInputExcel_2 == -1){
				actual_end_column_tFileInputExcel_2 = excel_end_column_tFileInputExcel_2;
			}
			else{
				actual_end_column_tFileInputExcel_2 = end_column_tFileInputExcel_2 >	excel_end_column_tFileInputExcel_2 ? excel_end_column_tFileInputExcel_2 : end_column_tFileInputExcel_2;
			}
			org.apache.poi.ss.formula.eval.NumberEval ne_tFileInputExcel_2 = null;
			for(int i=0;i<tempRowLength_tFileInputExcel_2;i++){
				if(i + start_column_tFileInputExcel_2 < actual_end_column_tFileInputExcel_2){
					org.apache.poi.ss.usermodel.Cell cell_tFileInputExcel_2 = row_tFileInputExcel_2.getCell(i + start_column_tFileInputExcel_2);
					if(cell_tFileInputExcel_2!=null){
					switch (cell_tFileInputExcel_2.getCellType()) {
                        case STRING:
                            temp_row_tFileInputExcel_2[i] = cell_tFileInputExcel_2.getRichStringCellValue().getString();
                            break;
                        case NUMERIC:
                            if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell_tFileInputExcel_2)) {
									temp_row_tFileInputExcel_2[i] =cell_tFileInputExcel_2.getDateCellValue().toString();
                            } else {
                                temp_row_tFileInputExcel_2[i] = df_tFileInputExcel_2.format(cell_tFileInputExcel_2.getNumericCellValue());
                            }
                            break;
                        case BOOLEAN:
                            temp_row_tFileInputExcel_2[i] =String.valueOf(cell_tFileInputExcel_2.getBooleanCellValue());
                            break;
                        case FORMULA:
        					switch (cell_tFileInputExcel_2.getCachedFormulaResultType()) {
                                case STRING:
                                    temp_row_tFileInputExcel_2[i] = cell_tFileInputExcel_2.getRichStringCellValue().getString();
                                    break;
                                case NUMERIC:
                                    if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell_tFileInputExcel_2)) {
											temp_row_tFileInputExcel_2[i] =cell_tFileInputExcel_2.getDateCellValue().toString();
                                    } else {
	                                    ne_tFileInputExcel_2 = new org.apache.poi.ss.formula.eval.NumberEval(cell_tFileInputExcel_2.getNumericCellValue());
										temp_row_tFileInputExcel_2[i] = ne_tFileInputExcel_2.getStringValue();
                                    }
                                    break;
                                case BOOLEAN:
                                    temp_row_tFileInputExcel_2[i] =String.valueOf(cell_tFileInputExcel_2.getBooleanCellValue());
                                    break;
                                default:
                            		temp_row_tFileInputExcel_2[i] = "";
                            }
                            break;
                        default:
                            temp_row_tFileInputExcel_2[i] = "";
                        }
                	}
                	else{
                		temp_row_tFileInputExcel_2[i]="";
                	}

				}else{
					temp_row_tFileInputExcel_2[i]="";
				}
			}
			boolean whetherReject_tFileInputExcel_2 = false;
			row3 = new row3Struct();
			int curColNum_tFileInputExcel_2 = -1;
			String curColName_tFileInputExcel_2 = "";
			try{
							columnIndex_tFileInputExcel_2 = 0;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn";

				row3.newColumn = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 1;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn1";

				row3.newColumn1 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn1 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 2;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn2";

				row3.newColumn2 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn2 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 3;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn3";

				row3.newColumn3 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn3 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 4;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn4";

				row3.newColumn4 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn4 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 5;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn5";

				row3.newColumn5 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn5 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 6;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn6";

				row3.newColumn6 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn6 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 7;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn7";

				row3.newColumn7 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn7 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 8;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn8";

				row3.newColumn8 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn8 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 9;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn9";

				row3.newColumn9 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn9 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 10;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn10";

				row3.newColumn10 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn10 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 11;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn11";

				row3.newColumn11 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn11 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 12;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn12";

				row3.newColumn12 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn12 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 13;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn13";

				row3.newColumn13 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn13 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 14;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn14";

				row3.newColumn14 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn14 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 15;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn15";

				row3.newColumn15 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn15 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 16;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn16";

				row3.newColumn16 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn16 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 17;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn17";

				row3.newColumn17 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn17 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 18;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn18";

				row3.newColumn18 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn18 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 19;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn19";

				row3.newColumn19 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn19 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 20;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn20";

				row3.newColumn20 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn20 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 21;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn21";

				row3.newColumn21 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn21 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 22;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn22";

				row3.newColumn22 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn22 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 23;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn23";

				row3.newColumn23 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn23 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 24;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn24";

				row3.newColumn24 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn24 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 25;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn25";

				row3.newColumn25 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn25 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 26;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn26";

				row3.newColumn26 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn26 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 27;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn27";

				row3.newColumn27 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn27 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 28;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn28";

				row3.newColumn28 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn28 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 29;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn29";

				row3.newColumn29 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn29 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 30;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn30";

				row3.newColumn30 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn30 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 31;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn31";

				row3.newColumn31 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn31 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 32;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn32";

				row3.newColumn32 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn32 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 33;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn33";

				row3.newColumn33 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn33 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 34;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn34";

				row3.newColumn34 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn34 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 35;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn35";

				row3.newColumn35 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn35 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 36;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn36";

				row3.newColumn36 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn36 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 37;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn37";

				row3.newColumn37 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn37 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 38;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn38";

				row3.newColumn38 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn38 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 39;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn39";

				row3.newColumn39 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn39 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 40;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn40";

				row3.newColumn40 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn40 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 41;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn41";

				row3.newColumn41 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn41 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 42;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn42";

				row3.newColumn42 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn42 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 43;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn43";

				row3.newColumn43 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn43 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 44;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn44";

				row3.newColumn44 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn44 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 45;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn45";

				row3.newColumn45 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn45 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}

				nb_line_tFileInputExcel_2++;
				
			}catch(java.lang.Exception e){
			whetherReject_tFileInputExcel_2 = true;
					 System.err.println(e.getMessage());
					 row3 = null;
			}


		



 



/**
 * [tFileInputExcel_2 begin ] stop
 */
	
	/**
	 * [tFileInputExcel_2 main ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_2";

	

 


	tos_count_tFileInputExcel_2++;

/**
 * [tFileInputExcel_2 main ] stop
 */
	
	/**
	 * [tFileInputExcel_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_2";

	

 



/**
 * [tFileInputExcel_2 process_data_begin ] stop
 */
// Start of branch "row3"
if(row3 != null) { 



	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row3");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;
Var.Fn_BRAND = ((Map<String,String>)globalMap.get("fieldMap")).get("BRAND");
Var.Fn_SEASON = ((Map<String,String>)globalMap.get("fieldMap")).get("SEASON");
Var.Fn_CATEGORY = ((Map<String,String>)globalMap.get("fieldMap")).get("CATEGORY");
Var.Fn_REF = ((Map<String,String>)globalMap.get("fieldMap")).get("REF");
Var.Fn_DESCRIPTION = ((Map<String,String>)globalMap.get("fieldMap")).get("DESCRIPTION");
Var.Fn_STYLE = ((Map<String,String>)globalMap.get("fieldMap")).get("STYLE");
Var.Fn_COLOR = ((Map<String,String>)globalMap.get("fieldMap")).get("COLOR");
Var.Fn_FASHION = ((Map<String,String>)globalMap.get("fieldMap")).get("FASHION");
Var.Fn_STYLE_COLOR_LABEL = ((Map<String,String>)globalMap.get("fieldMap")).get("STYLE-COLOR-LABEL");
Var.Fn_COLOR_NAME = ((Map<String,String>)globalMap.get("fieldMap")).get("COLOR NAME");
Var.Fn_LBL = ((Map<String,String>)globalMap.get("fieldMap")).get("LBL");
Var.Fn_STYLE_COLOR = ((Map<String,String>)globalMap.get("fieldMap")).get("STYLE-COLOR");
Var.Fn_GENDER = ((Map<String,String>)globalMap.get("fieldMap")).get("GENDER");
Var.Fn_AGE_RANGE = ((Map<String,String>)globalMap.get("fieldMap")).get("AGE RANGE");
Var.Fn_SIZE_RANGE = ((Map<String,String>)globalMap.get("fieldMap")).get("SIZE RANGE");
Var.Fn_SIZE = ((Map<String,String>)globalMap.get("fieldMap")).get("SIZE");
Var.Fn_US_SIZE = ((Map<String,String>)globalMap.get("fieldMap")).get("US SIZE");
Var.Fn_CM_SIZE = ((Map<String,String>)globalMap.get("fieldMap")).get("CM SIZE");
Var.Fn_PRODUCT = ((Map<String,String>)globalMap.get("fieldMap")).get("PRODUCT");
Var.Fn_PRODUCT_STATUS = ((Map<String,String>)globalMap.get("fieldMap")).get("PRODUCT STATUS");
Var.Fn_PRODUCT_TIER = ((Map<String,String>)globalMap.get("fieldMap")).get("PRODUCT TIER");
Var.Fn_ACCT_EXCLUS = ((Map<String,String>)globalMap.get("fieldMap")).get("ACCT EXCLUS");
Var.Fn_SIZE_RATIO_SPLIT = ((Map<String,String>)globalMap.get("fieldMap")).get("% SIZE RATIO SPLIT");
Var.Fn_REC_SIZE_SPLIT = ((Map<String,String>)globalMap.get("fieldMap")).get("REC SIZE SPLIT");
Var.Fn_CARTON_QTY = ((Map<String,String>)globalMap.get("fieldMap")).get("CARTON QTY");
Var.Fn_ATTRIBUTE = ((Map<String,String>)globalMap.get("fieldMap")).get("Attribute");
Var.Fn_UNITS = ((Map<String,String>)globalMap.get("fieldMap")).get("UNITS");
Var.Fn_EUR_RRP = ((Map<String,String>)globalMap.get("fieldMap")).get("EUR RRP");
Var.Fn_EUR_WSP = ((Map<String,String>)globalMap.get("fieldMap")).get("EUR WSP");
Var.Fn_GBP_RRP = ((Map<String,String>)globalMap.get("fieldMap")).get("GBP RRP");
Var.Fn_GBP_WSP = ((Map<String,String>)globalMap.get("fieldMap")).get("GBP WSP");
Var.Fn_CHF_RRP = ((Map<String,String>)globalMap.get("fieldMap")).get("CHF RRP");
Var.Fn_CHF_WSP = ((Map<String,String>)globalMap.get("fieldMap")).get("CHF WSP");
Var.Fn_NOK_RRP = ((Map<String,String>)globalMap.get("fieldMap")).get("NOK RRP");
Var.Fn_NOK_WSP = ((Map<String,String>)globalMap.get("fieldMap")).get("NOK WSP");
Var.Fn_DKK_RRP = ((Map<String,String>)globalMap.get("fieldMap")).get("DKK RRP");
Var.Fn_DKK_WSP = ((Map<String,String>)globalMap.get("fieldMap")).get("DKK WSP");
Var.Fn_SEK_RRP = ((Map<String,String>)globalMap.get("fieldMap")).get("SEK RRP");
Var.Fn_SEK_WSP = ((Map<String,String>)globalMap.get("fieldMap")).get("SEK WSP");
Var.Fn_EUR_FINN_RRP = ((Map<String,String>)globalMap.get("fieldMap")).get("EURO (FINN) RRP");
Var.Fn_EUR_FINN_WSP = ((Map<String,String>)globalMap.get("fieldMap")).get("EURO (FINN) WSP");
Var.Fn_FABRICATION = ((Map<String,String>)globalMap.get("fieldMap")).get("FABRICATION");
Var.Fn_COO = ((Map<String,String>)globalMap.get("fieldMap")).get("COO");
Var.Fn_CUSTOM_TARIFF_CODE = ((Map<String,String>)globalMap.get("fieldMap")).get("CUSTOM TARIFF CODE");
Var.Fn_UPC = ((Map<String,String>)globalMap.get("fieldMap")).get("UPC");
Var.Fn_SMU_TYPE = ((Map<String,String>)globalMap.get("fieldMap")).get("SMU TYPE");// ###############################
        // ###############################
        // # Output tables

sortie_Excel = null;


// # Output table : 'sortie_Excel'
sortie_Excel_tmp.BRAND = (String) row3.getClass().getField(Var.Fn_BRAND).get(row3) ;
sortie_Excel_tmp.SEASON = (String) row3.getClass().getField(Var.Fn_SEASON).get(row3) ;
sortie_Excel_tmp.CATEGORY = (String) row3.getClass().getField(Var.Fn_CATEGORY).get(row3) ;
sortie_Excel_tmp.REF = (String) row3.getClass().getField(Var.Fn_REF).get(row3) ;
sortie_Excel_tmp.DESCRIPTION = (String) row3.getClass().getField(Var.Fn_DESCRIPTION).get(row3) ;
sortie_Excel_tmp.STYLE = (String) row3.getClass().getField(Var.Fn_STYLE).get(row3) ;
sortie_Excel_tmp.COLOR = (String) row3.getClass().getField(Var.Fn_COLOR).get(row3) ;
sortie_Excel_tmp.FASHION = (String) row3.getClass().getField(Var.Fn_FASHION).get(row3) ;
sortie_Excel_tmp.STYLECOLORLABEL = (String) row3.getClass().getField(Var.Fn_STYLE_COLOR_LABEL).get(row3) ;
sortie_Excel_tmp.COLORNAME = (String) row3.getClass().getField(Var.Fn_COLOR_NAME).get(row3) ;
sortie_Excel_tmp.LBL = (String) row3.getClass().getField(Var.Fn_LBL).get(row3) ;
sortie_Excel_tmp.STYLE_COLOR = (String) row3.getClass().getField(Var.Fn_STYLE_COLOR).get(row3) ;
sortie_Excel_tmp.GENDER = (String) row3.getClass().getField(Var.Fn_GENDER).get(row3) ;
sortie_Excel_tmp.AGE_RANGE = (String) row3.getClass().getField(Var.Fn_AGE_RANGE).get(row3) ;
sortie_Excel_tmp.SIZE_RANGE = (String) row3.getClass().getField(Var.Fn_SIZE_RANGE).get(row3) ;
sortie_Excel_tmp.SIZE = (String) row3.getClass().getField(Var.Fn_SIZE).get(row3) ;
sortie_Excel_tmp.US_SIZE = (String) row3.getClass().getField(Var.Fn_US_SIZE).get(row3) ;
sortie_Excel_tmp.CM_SIZE = (String) row3.getClass().getField(Var.Fn_CM_SIZE).get(row3) ;
sortie_Excel_tmp.PRODUCT = (String) row3.getClass().getField(Var.Fn_PRODUCT).get(row3) ;
sortie_Excel_tmp.PRODUCT_STATUS = (String) row3.getClass().getField(Var.Fn_PRODUCT_STATUS).get(row3) ;
sortie_Excel_tmp.PRODUCT_TIER = (String) row3.getClass().getField(Var.Fn_PRODUCT_TIER).get(row3) ;
sortie_Excel_tmp.ACCT_EXCLUS = (String) row3.getClass().getField(Var.Fn_ACCT_EXCLUS).get(row3) ;
sortie_Excel_tmp.SIZE_RATIO_SPLIT = (String) row3.getClass().getField(Var.Fn_SIZE_RATIO_SPLIT).get(row3) ;
sortie_Excel_tmp.REC_SIZE_SPLIT = (String) row3.getClass().getField(Var.Fn_REC_SIZE_SPLIT).get(row3) ;
sortie_Excel_tmp.CARTON_QTY = (String) row3.getClass().getField(Var.Fn_CARTON_QTY).get(row3) ;
sortie_Excel_tmp.ATTRIBUTE = (String) row3.getClass().getField(Var.Fn_ATTRIBUTE).get(row3) ;
sortie_Excel_tmp.UNITS = (String) row3.getClass().getField(Var.Fn_UNITS).get(row3) ;
sortie_Excel_tmp.EUR_RRP = (String) row3.getClass().getField(Var.Fn_EUR_RRP).get(row3) ;
sortie_Excel_tmp.EUR_WSP = (String) row3.getClass().getField(Var.Fn_EUR_WSP).get(row3) ;
sortie_Excel_tmp.GBP_RRP = (String) row3.getClass().getField(Var.Fn_GBP_RRP).get(row3) ;
sortie_Excel_tmp.GBP_WSP = (String) row3.getClass().getField(Var.Fn_GBP_WSP).get(row3) ;
sortie_Excel_tmp.CHF_RRP = (String) row3.getClass().getField(Var.Fn_CHF_RRP).get(row3) ;
sortie_Excel_tmp.CHF_WSP = (String) row3.getClass().getField(Var.Fn_CHF_WSP).get(row3) ;
sortie_Excel_tmp.NOK_RRP = (String) row3.getClass().getField(Var.Fn_NOK_RRP).get(row3) ;
sortie_Excel_tmp.NOK_WSP = (String) row3.getClass().getField(Var.Fn_NOK_WSP).get(row3) ;
sortie_Excel_tmp.DKK_RRP = (String) row3.getClass().getField(Var.Fn_DKK_RRP).get(row3) ;
sortie_Excel_tmp.DKK_WSP = (String) row3.getClass().getField(Var.Fn_DKK_WSP).get(row3) ;
sortie_Excel_tmp.SEK_RRP = (String) row3.getClass().getField(Var.Fn_SEK_RRP).get(row3) ;
sortie_Excel_tmp.SEK_WSP = (String) row3.getClass().getField(Var.Fn_SEK_WSP).get(row3) ;
sortie_Excel_tmp.EUR_FINN_RRP = (String) row3.getClass().getField(Var.Fn_EUR_FINN_RRP).get(row3) ;
sortie_Excel_tmp.EUR_FINN_WSP = (String) row3.getClass().getField(Var.Fn_EUR_FINN_WSP).get(row3) ;
sortie_Excel_tmp.FABRICATION = (String) row3.getClass().getField(Var.Fn_FABRICATION).get(row3) ;
sortie_Excel_tmp.COO = (String) row3.getClass().getField(Var.Fn_COO).get(row3) ;
sortie_Excel_tmp.CUSTOM_TARIFF_CODE = (String) row3.getClass().getField(Var.Fn_CUSTOM_TARIFF_CODE).get(row3) ;
sortie_Excel_tmp.UPC = (String) row3.getClass().getField(Var.Fn_UPC).get(row3) ;
sortie_Excel_tmp.SMU_TYPE = (String) row3.getClass().getField(Var.Fn_SMU_TYPE).get(row3) ;
sortie_Excel = sortie_Excel_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "sortie_Excel"
if(sortie_Excel != null) { 



	
	/**
	 * [tMap_20 main ] start
	 */

	

	
	
	currentComponent="tMap_20";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_Excel");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_20 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_20 = false;
		  boolean mainRowRejected_tMap_20 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_20__Struct Var = Var__tMap_20;// ###############################
        // ###############################
        // # Output tables

sortie_EUR_WSP = null;
sortie_full_eur_wsp = null;


// # Output table : 'sortie_EUR_WSP'
sortie_EUR_WSP_tmp.TRADEAGREEMENTJOURNALNUMBER = "HBE1-" + globalMap.get("SalesJournalNumber");
sortie_EUR_WSP_tmp.ITEMNUMBER = sortie_Excel.STYLE ;
sortie_EUR_WSP_tmp.PRICE = sortie_Excel.EUR_WSP == null ? 0 : Mathematical.REAL(sortie_Excel.EUR_WSP .replaceAll(",", ".") ) ;
sortie_EUR_WSP_tmp.PRICECURRENCYCODE = "EUR";
sortie_EUR_WSP_tmp.PRICECUSTOMERGROUPCODE = "WSP";
sortie_EUR_WSP_tmp.PRODUCTCOLORID = sortie_Excel.COLOR ;
sortie_EUR_WSP_tmp.PRODUCTSIZEID = sortie_Excel.SIZE ;
sortie_EUR_WSP_tmp.PRODUCTSTYLEID = sortie_Excel.LBL ;
sortie_EUR_WSP_tmp.QUANTITYUNITSYMBOL = "PCS";
sortie_EUR_WSP = sortie_EUR_WSP_tmp;

// # Output table : 'sortie_full_eur_wsp'
sortie_full_eur_wsp_tmp.BRAND = sortie_Excel.BRAND ;
sortie_full_eur_wsp_tmp.SEASON = sortie_Excel.SEASON ;
sortie_full_eur_wsp_tmp.CATEGORY = sortie_Excel.CATEGORY ;
sortie_full_eur_wsp_tmp.REF = sortie_Excel.REF ;
sortie_full_eur_wsp_tmp.DESCRIPTION = sortie_Excel.DESCRIPTION ;
sortie_full_eur_wsp_tmp.STYLE = sortie_Excel.STYLE ;
sortie_full_eur_wsp_tmp.COLOR = sortie_Excel.COLOR ;
sortie_full_eur_wsp_tmp.FASHION = sortie_Excel.FASHION ;
sortie_full_eur_wsp_tmp.STYLECOLORLABEL = sortie_Excel.STYLECOLORLABEL ;
sortie_full_eur_wsp_tmp.COLORNAME = sortie_Excel.COLORNAME ;
sortie_full_eur_wsp_tmp.LBL = sortie_Excel.LBL ;
sortie_full_eur_wsp_tmp.STYLE_COLOR = sortie_Excel.STYLE_COLOR ;
sortie_full_eur_wsp_tmp.GENDER = sortie_Excel.GENDER ;
sortie_full_eur_wsp_tmp.AGE_RANGE = sortie_Excel.AGE_RANGE ;
sortie_full_eur_wsp_tmp.SIZE_RANGE = sortie_Excel.SIZE_RANGE ;
sortie_full_eur_wsp_tmp.SIZE = sortie_Excel.SIZE ;
sortie_full_eur_wsp_tmp.US_SIZE = sortie_Excel.US_SIZE ;
sortie_full_eur_wsp_tmp.CM_SIZE = sortie_Excel.CM_SIZE ;
sortie_full_eur_wsp_tmp.PRODUCT = sortie_Excel.PRODUCT ;
sortie_full_eur_wsp_tmp.PRODUCT_STATUS = sortie_Excel.PRODUCT_STATUS ;
sortie_full_eur_wsp_tmp.PRODUCT_TIER = sortie_Excel.PRODUCT_TIER ;
sortie_full_eur_wsp_tmp.ACCT_EXCLUS = sortie_Excel.ACCT_EXCLUS ;
sortie_full_eur_wsp_tmp.SIZE_RATIO_SPLIT = sortie_Excel.SIZE_RATIO_SPLIT ;
sortie_full_eur_wsp_tmp.REC_SIZE_SPLIT = sortie_Excel.REC_SIZE_SPLIT ;
sortie_full_eur_wsp_tmp.CARTON_QTY = sortie_Excel.CARTON_QTY ;
sortie_full_eur_wsp_tmp.ATTRIBUTE = sortie_Excel.ATTRIBUTE ;
sortie_full_eur_wsp_tmp.UNITS = sortie_Excel.UNITS ;
sortie_full_eur_wsp_tmp.EUR_RRP = sortie_Excel.EUR_RRP ;
sortie_full_eur_wsp_tmp.EUR_WSP = sortie_Excel.EUR_WSP ;
sortie_full_eur_wsp_tmp.GBP_RRP = sortie_Excel.GBP_RRP ;
sortie_full_eur_wsp_tmp.GBP_WSP = sortie_Excel.GBP_WSP ;
sortie_full_eur_wsp_tmp.CHF_RRP = sortie_Excel.CHF_RRP ;
sortie_full_eur_wsp_tmp.CHF_WSP = sortie_Excel.CHF_WSP ;
sortie_full_eur_wsp_tmp.NOK_RRP = sortie_Excel.NOK_RRP ;
sortie_full_eur_wsp_tmp.NOK_WSP = sortie_Excel.NOK_WSP ;
sortie_full_eur_wsp_tmp.DKK_RRP = sortie_Excel.DKK_RRP ;
sortie_full_eur_wsp_tmp.DKK_WSP = sortie_Excel.DKK_WSP ;
sortie_full_eur_wsp_tmp.SEK_RRP = sortie_Excel.SEK_RRP ;
sortie_full_eur_wsp_tmp.SEK_WSP = sortie_Excel.SEK_WSP ;
sortie_full_eur_wsp_tmp.EUR_FINN_RRP = sortie_Excel.EUR_FINN_RRP ;
sortie_full_eur_wsp_tmp.EUR_FINN_WSP = sortie_Excel.EUR_FINN_WSP ;
sortie_full_eur_wsp_tmp.FABRICATION = sortie_Excel.FABRICATION ;
sortie_full_eur_wsp_tmp.COO = sortie_Excel.COO ;
sortie_full_eur_wsp_tmp.CUSTOM_TARIFF_CODE = sortie_Excel.CUSTOM_TARIFF_CODE ;
sortie_full_eur_wsp_tmp.UPC = sortie_Excel.UPC ;
sortie_full_eur_wsp_tmp.SMU_TYPE = sortie_Excel.SMU_TYPE ;
sortie_full_eur_wsp = sortie_full_eur_wsp_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_20 = false;










 


	tos_count_tMap_20++;

/**
 * [tMap_20 main ] stop
 */
	
	/**
	 * [tMap_20 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_20";

	

 



/**
 * [tMap_20 process_data_begin ] stop
 */
// Start of branch "sortie_EUR_WSP"
if(sortie_EUR_WSP != null) { 



	
	/**
	 * [tUniqRow_18 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_18";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_EUR_WSP");
					}
					
row35 = null;			
if(sortie_EUR_WSP.TRADEAGREEMENTJOURNALNUMBER == null){
	finder_tUniqRow_18.TRADEAGREEMENTJOURNALNUMBER = null;
}else{
	finder_tUniqRow_18.TRADEAGREEMENTJOURNALNUMBER = sortie_EUR_WSP.TRADEAGREEMENTJOURNALNUMBER.toLowerCase();
}
if(sortie_EUR_WSP.ITEMNUMBER == null){
	finder_tUniqRow_18.ITEMNUMBER = null;
}else{
	finder_tUniqRow_18.ITEMNUMBER = sortie_EUR_WSP.ITEMNUMBER.toLowerCase();
}
finder_tUniqRow_18.PRICE = sortie_EUR_WSP.PRICE;
if(sortie_EUR_WSP.PRICECURRENCYCODE == null){
	finder_tUniqRow_18.PRICECURRENCYCODE = null;
}else{
	finder_tUniqRow_18.PRICECURRENCYCODE = sortie_EUR_WSP.PRICECURRENCYCODE.toLowerCase();
}
if(sortie_EUR_WSP.PRICECUSTOMERGROUPCODE == null){
	finder_tUniqRow_18.PRICECUSTOMERGROUPCODE = null;
}else{
	finder_tUniqRow_18.PRICECUSTOMERGROUPCODE = sortie_EUR_WSP.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(sortie_EUR_WSP.PRODUCTCOLORID == null){
	finder_tUniqRow_18.PRODUCTCOLORID = null;
}else{
	finder_tUniqRow_18.PRODUCTCOLORID = sortie_EUR_WSP.PRODUCTCOLORID.toLowerCase();
}
if(sortie_EUR_WSP.PRODUCTSIZEID == null){
	finder_tUniqRow_18.PRODUCTSIZEID = null;
}else{
	finder_tUniqRow_18.PRODUCTSIZEID = sortie_EUR_WSP.PRODUCTSIZEID.toLowerCase();
}
if(sortie_EUR_WSP.PRODUCTSTYLEID == null){
	finder_tUniqRow_18.PRODUCTSTYLEID = null;
}else{
	finder_tUniqRow_18.PRODUCTSTYLEID = sortie_EUR_WSP.PRODUCTSTYLEID.toLowerCase();
}
if(sortie_EUR_WSP.QUANTITYUNITSYMBOL == null){
	finder_tUniqRow_18.QUANTITYUNITSYMBOL = null;
}else{
	finder_tUniqRow_18.QUANTITYUNITSYMBOL = sortie_EUR_WSP.QUANTITYUNITSYMBOL.toLowerCase();
}	
finder_tUniqRow_18.hashCodeDirty = true;
if (!keystUniqRow_18.contains(finder_tUniqRow_18)) {
		KeyStruct_tUniqRow_18 new_tUniqRow_18 = new KeyStruct_tUniqRow_18();

		
if(sortie_EUR_WSP.TRADEAGREEMENTJOURNALNUMBER == null){
	new_tUniqRow_18.TRADEAGREEMENTJOURNALNUMBER = null;
}else{
	new_tUniqRow_18.TRADEAGREEMENTJOURNALNUMBER = sortie_EUR_WSP.TRADEAGREEMENTJOURNALNUMBER.toLowerCase();
}
if(sortie_EUR_WSP.ITEMNUMBER == null){
	new_tUniqRow_18.ITEMNUMBER = null;
}else{
	new_tUniqRow_18.ITEMNUMBER = sortie_EUR_WSP.ITEMNUMBER.toLowerCase();
}
new_tUniqRow_18.PRICE = sortie_EUR_WSP.PRICE;
if(sortie_EUR_WSP.PRICECURRENCYCODE == null){
	new_tUniqRow_18.PRICECURRENCYCODE = null;
}else{
	new_tUniqRow_18.PRICECURRENCYCODE = sortie_EUR_WSP.PRICECURRENCYCODE.toLowerCase();
}
if(sortie_EUR_WSP.PRICECUSTOMERGROUPCODE == null){
	new_tUniqRow_18.PRICECUSTOMERGROUPCODE = null;
}else{
	new_tUniqRow_18.PRICECUSTOMERGROUPCODE = sortie_EUR_WSP.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(sortie_EUR_WSP.PRODUCTCOLORID == null){
	new_tUniqRow_18.PRODUCTCOLORID = null;
}else{
	new_tUniqRow_18.PRODUCTCOLORID = sortie_EUR_WSP.PRODUCTCOLORID.toLowerCase();
}
if(sortie_EUR_WSP.PRODUCTSIZEID == null){
	new_tUniqRow_18.PRODUCTSIZEID = null;
}else{
	new_tUniqRow_18.PRODUCTSIZEID = sortie_EUR_WSP.PRODUCTSIZEID.toLowerCase();
}
if(sortie_EUR_WSP.PRODUCTSTYLEID == null){
	new_tUniqRow_18.PRODUCTSTYLEID = null;
}else{
	new_tUniqRow_18.PRODUCTSTYLEID = sortie_EUR_WSP.PRODUCTSTYLEID.toLowerCase();
}
if(sortie_EUR_WSP.QUANTITYUNITSYMBOL == null){
	new_tUniqRow_18.QUANTITYUNITSYMBOL = null;
}else{
	new_tUniqRow_18.QUANTITYUNITSYMBOL = sortie_EUR_WSP.QUANTITYUNITSYMBOL.toLowerCase();
}
		
		keystUniqRow_18.add(new_tUniqRow_18);if(row35 == null){ 
	
	row35 = new row35Struct();
}row35.TRADEAGREEMENTJOURNALNUMBER = sortie_EUR_WSP.TRADEAGREEMENTJOURNALNUMBER;			row35.ITEMNUMBER = sortie_EUR_WSP.ITEMNUMBER;			row35.PRICE = sortie_EUR_WSP.PRICE;			row35.PRICECURRENCYCODE = sortie_EUR_WSP.PRICECURRENCYCODE;			row35.PRICECUSTOMERGROUPCODE = sortie_EUR_WSP.PRICECUSTOMERGROUPCODE;			row35.PRODUCTCOLORID = sortie_EUR_WSP.PRODUCTCOLORID;			row35.PRODUCTSIZEID = sortie_EUR_WSP.PRODUCTSIZEID;			row35.PRODUCTSTYLEID = sortie_EUR_WSP.PRODUCTSTYLEID;			row35.QUANTITYUNITSYMBOL = sortie_EUR_WSP.QUANTITYUNITSYMBOL;					
		nb_uniques_tUniqRow_18++;
	} else {
	  nb_duplicates_tUniqRow_18++;
	}

 


	tos_count_tUniqRow_18++;

/**
 * [tUniqRow_18 main ] stop
 */
	
	/**
	 * [tUniqRow_18 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_18";

	

 



/**
 * [tUniqRow_18 process_data_begin ] stop
 */
// Start of branch "row35"
if(row35 != null) { 



	
	/**
	 * [tFilterRow_2 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row35");
					}
					

          row37 = null;
    Operator_tFilterRow_2 ope_tFilterRow_2 = new Operator_tFilterRow_2("&&");
            ope_tFilterRow_2.matches((row35.PRICE == null? false : row35.PRICE.compareTo(ParserUtils.parseTo_Double(String.valueOf(0))) > 0)
                           , "PRICE.compareTo(0) > 0 failed");
		 	
    
    if (ope_tFilterRow_2.getMatchFlag()) {
              if(row37 == null){ 
                row37 = new row37Struct();
              }
               row37.TRADEAGREEMENTJOURNALNUMBER = row35.TRADEAGREEMENTJOURNALNUMBER;
               row37.ITEMNUMBER = row35.ITEMNUMBER;
               row37.PRICE = row35.PRICE;
               row37.PRICECURRENCYCODE = row35.PRICECURRENCYCODE;
               row37.PRICECUSTOMERGROUPCODE = row35.PRICECUSTOMERGROUPCODE;
               row37.PRODUCTCOLORID = row35.PRODUCTCOLORID;
               row37.PRODUCTSIZEID = row35.PRODUCTSIZEID;
               row37.PRODUCTSTYLEID = row35.PRODUCTSTYLEID;
               row37.QUANTITYUNITSYMBOL = row35.QUANTITYUNITSYMBOL;    
      nb_line_ok_tFilterRow_2++;
    } else {
      nb_line_reject_tFilterRow_2++;
    }

nb_line_tFilterRow_2++;

 


	tos_count_tFilterRow_2++;

/**
 * [tFilterRow_2 main ] stop
 */
	
	/**
	 * [tFilterRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";

	

 



/**
 * [tFilterRow_2 process_data_begin ] stop
 */
// Start of branch "row37"
if(row37 != null) { 



	
	/**
	 * [tHashOutput_9 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_9";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row37");
					}
					



    
		row37Struct oneRow_tHashOutput_9 = new row37Struct();
				
					oneRow_tHashOutput_9.TRADEAGREEMENTJOURNALNUMBER = row37.TRADEAGREEMENTJOURNALNUMBER;
					oneRow_tHashOutput_9.ITEMNUMBER = row37.ITEMNUMBER;
					oneRow_tHashOutput_9.PRICE = row37.PRICE;
					oneRow_tHashOutput_9.PRICECURRENCYCODE = row37.PRICECURRENCYCODE;
					oneRow_tHashOutput_9.PRICECUSTOMERGROUPCODE = row37.PRICECUSTOMERGROUPCODE;
					oneRow_tHashOutput_9.PRODUCTCOLORID = row37.PRODUCTCOLORID;
					oneRow_tHashOutput_9.PRODUCTSIZEID = row37.PRODUCTSIZEID;
					oneRow_tHashOutput_9.PRODUCTSTYLEID = row37.PRODUCTSTYLEID;
					oneRow_tHashOutput_9.QUANTITYUNITSYMBOL = row37.QUANTITYUNITSYMBOL;
		
        tHashFile_tHashOutput_9.put(oneRow_tHashOutput_9);
        nb_line_tHashOutput_9 ++;
 


	tos_count_tHashOutput_9++;

/**
 * [tHashOutput_9 main ] stop
 */
	
	/**
	 * [tHashOutput_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_9";

	

 



/**
 * [tHashOutput_9 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_9";

	

 



/**
 * [tHashOutput_9 process_data_end ] stop
 */

} // End of branch "row37"




	
	/**
	 * [tFilterRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";

	

 



/**
 * [tFilterRow_2 process_data_end ] stop
 */

} // End of branch "row35"




	
	/**
	 * [tUniqRow_18 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_18";

	

 



/**
 * [tUniqRow_18 process_data_end ] stop
 */

} // End of branch "sortie_EUR_WSP"




// Start of branch "sortie_full_eur_wsp"
if(sortie_full_eur_wsp != null) { 



	
	/**
	 * [tMap_21 main ] start
	 */

	

	
	
	currentComponent="tMap_21";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_full_eur_wsp");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_21 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_21 = false;
		  boolean mainRowRejected_tMap_21 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_21__Struct Var = Var__tMap_21;// ###############################
        // ###############################
        // # Output tables

copyOfsortie_EUR_WSP = null;
sortie_full_rrp_eur = null;


// # Output table : 'copyOfsortie_EUR_WSP'
copyOfsortie_EUR_WSP_tmp.TRADEAGREEMENTJOURNALNUMBER = "HBE1-" + globalMap.get("SalesJournalNumber");
copyOfsortie_EUR_WSP_tmp.ITEMNUMBER = sortie_full_eur_wsp.STYLE ;
copyOfsortie_EUR_WSP_tmp.PRICE = sortie_full_eur_wsp.EUR_RRP == null ? 0 : Mathematical.REAL(sortie_full_eur_wsp.EUR_RRP.replaceAll(",", ".") ) ;
copyOfsortie_EUR_WSP_tmp.PRICECURRENCYCODE = "EUR";
copyOfsortie_EUR_WSP_tmp.PRICECUSTOMERGROUPCODE = "RRP";
copyOfsortie_EUR_WSP_tmp.PRODUCTCOLORID = sortie_full_eur_wsp.COLOR ;
copyOfsortie_EUR_WSP_tmp.PRODUCTSIZEID = sortie_full_eur_wsp.SIZE ;
copyOfsortie_EUR_WSP_tmp.PRODUCTSTYLEID = sortie_full_eur_wsp.LBL ;
copyOfsortie_EUR_WSP_tmp.QUANTITYUNITSYMBOL = "PCS";
copyOfsortie_EUR_WSP = copyOfsortie_EUR_WSP_tmp;

// # Output table : 'sortie_full_rrp_eur'
sortie_full_rrp_eur_tmp.BRAND = sortie_full_eur_wsp.BRAND ;
sortie_full_rrp_eur_tmp.SEASON = sortie_full_eur_wsp.SEASON ;
sortie_full_rrp_eur_tmp.CATEGORY = sortie_full_eur_wsp.CATEGORY ;
sortie_full_rrp_eur_tmp.REF = sortie_full_eur_wsp.REF ;
sortie_full_rrp_eur_tmp.DESCRIPTION = sortie_full_eur_wsp.DESCRIPTION ;
sortie_full_rrp_eur_tmp.STYLE = sortie_full_eur_wsp.STYLE ;
sortie_full_rrp_eur_tmp.COLOR = sortie_full_eur_wsp.COLOR ;
sortie_full_rrp_eur_tmp.FASHION = sortie_full_eur_wsp.FASHION ;
sortie_full_rrp_eur_tmp.STYLECOLORLABEL = sortie_full_eur_wsp.STYLECOLORLABEL ;
sortie_full_rrp_eur_tmp.COLORNAME = sortie_full_eur_wsp.COLORNAME ;
sortie_full_rrp_eur_tmp.LBL = sortie_full_eur_wsp.LBL ;
sortie_full_rrp_eur_tmp.STYLE_COLOR = sortie_full_eur_wsp.STYLE_COLOR ;
sortie_full_rrp_eur_tmp.GENDER = sortie_full_eur_wsp.GENDER ;
sortie_full_rrp_eur_tmp.AGE_RANGE = sortie_full_eur_wsp.AGE_RANGE ;
sortie_full_rrp_eur_tmp.SIZE_RANGE = sortie_full_eur_wsp.SIZE_RANGE ;
sortie_full_rrp_eur_tmp.SIZE = sortie_full_eur_wsp.SIZE ;
sortie_full_rrp_eur_tmp.US_SIZE = sortie_full_eur_wsp.US_SIZE ;
sortie_full_rrp_eur_tmp.CM_SIZE = sortie_full_eur_wsp.CM_SIZE ;
sortie_full_rrp_eur_tmp.PRODUCT = sortie_full_eur_wsp.PRODUCT ;
sortie_full_rrp_eur_tmp.PRODUCT_STATUS = sortie_full_eur_wsp.PRODUCT_STATUS ;
sortie_full_rrp_eur_tmp.PRODUCT_TIER = sortie_full_eur_wsp.PRODUCT_TIER ;
sortie_full_rrp_eur_tmp.ACCT_EXCLUS = sortie_full_eur_wsp.ACCT_EXCLUS ;
sortie_full_rrp_eur_tmp.SIZE_RATIO_SPLIT = sortie_full_eur_wsp.SIZE_RATIO_SPLIT ;
sortie_full_rrp_eur_tmp.REC_SIZE_SPLIT = sortie_full_eur_wsp.REC_SIZE_SPLIT ;
sortie_full_rrp_eur_tmp.CARTON_QTY = sortie_full_eur_wsp.CARTON_QTY ;
sortie_full_rrp_eur_tmp.ATTRIBUTE = sortie_full_eur_wsp.ATTRIBUTE ;
sortie_full_rrp_eur_tmp.UNITS = sortie_full_eur_wsp.UNITS ;
sortie_full_rrp_eur_tmp.EUR_RRP = sortie_full_eur_wsp.EUR_RRP ;
sortie_full_rrp_eur_tmp.EUR_WSP = sortie_full_eur_wsp.EUR_WSP ;
sortie_full_rrp_eur_tmp.GBP_RRP = sortie_full_eur_wsp.GBP_RRP ;
sortie_full_rrp_eur_tmp.GBP_WSP = sortie_full_eur_wsp.GBP_WSP ;
sortie_full_rrp_eur_tmp.CHF_RRP = sortie_full_eur_wsp.CHF_RRP ;
sortie_full_rrp_eur_tmp.CHF_WSP = sortie_full_eur_wsp.CHF_WSP ;
sortie_full_rrp_eur_tmp.NOK_RRP = sortie_full_eur_wsp.NOK_RRP ;
sortie_full_rrp_eur_tmp.NOK_WSP = sortie_full_eur_wsp.NOK_WSP ;
sortie_full_rrp_eur_tmp.DKK_RRP = sortie_full_eur_wsp.DKK_RRP ;
sortie_full_rrp_eur_tmp.DKK_WSP = sortie_full_eur_wsp.DKK_WSP ;
sortie_full_rrp_eur_tmp.SEK_RRP = sortie_full_eur_wsp.SEK_RRP ;
sortie_full_rrp_eur_tmp.SEK_WSP = sortie_full_eur_wsp.SEK_WSP ;
sortie_full_rrp_eur_tmp.EUR_FINN_RRP = sortie_full_eur_wsp.EUR_FINN_RRP ;
sortie_full_rrp_eur_tmp.EUR_FINN_WSP = sortie_full_eur_wsp.EUR_FINN_WSP ;
sortie_full_rrp_eur_tmp.FABRICATION = sortie_full_eur_wsp.FABRICATION ;
sortie_full_rrp_eur_tmp.COO = sortie_full_eur_wsp.COO ;
sortie_full_rrp_eur_tmp.CUSTOM_TARIFF_CODE = sortie_full_eur_wsp.CUSTOM_TARIFF_CODE ;
sortie_full_rrp_eur_tmp.UPC = sortie_full_eur_wsp.UPC ;
sortie_full_rrp_eur_tmp.SMU_TYPE = sortie_full_eur_wsp.SMU_TYPE ;
sortie_full_rrp_eur = sortie_full_rrp_eur_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_21 = false;










 


	tos_count_tMap_21++;

/**
 * [tMap_21 main ] stop
 */
	
	/**
	 * [tMap_21 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_21";

	

 



/**
 * [tMap_21 process_data_begin ] stop
 */
// Start of branch "copyOfsortie_EUR_WSP"
if(copyOfsortie_EUR_WSP != null) { 



	
	/**
	 * [tUniqRow_19 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_19";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfsortie_EUR_WSP");
					}
					
row36 = null;			
if(copyOfsortie_EUR_WSP.TRADEAGREEMENTJOURNALNUMBER == null){
	finder_tUniqRow_19.TRADEAGREEMENTJOURNALNUMBER = null;
}else{
	finder_tUniqRow_19.TRADEAGREEMENTJOURNALNUMBER = copyOfsortie_EUR_WSP.TRADEAGREEMENTJOURNALNUMBER.toLowerCase();
}
if(copyOfsortie_EUR_WSP.ITEMNUMBER == null){
	finder_tUniqRow_19.ITEMNUMBER = null;
}else{
	finder_tUniqRow_19.ITEMNUMBER = copyOfsortie_EUR_WSP.ITEMNUMBER.toLowerCase();
}
finder_tUniqRow_19.PRICE = copyOfsortie_EUR_WSP.PRICE;
if(copyOfsortie_EUR_WSP.PRICECURRENCYCODE == null){
	finder_tUniqRow_19.PRICECURRENCYCODE = null;
}else{
	finder_tUniqRow_19.PRICECURRENCYCODE = copyOfsortie_EUR_WSP.PRICECURRENCYCODE.toLowerCase();
}
if(copyOfsortie_EUR_WSP.PRICECUSTOMERGROUPCODE == null){
	finder_tUniqRow_19.PRICECUSTOMERGROUPCODE = null;
}else{
	finder_tUniqRow_19.PRICECUSTOMERGROUPCODE = copyOfsortie_EUR_WSP.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(copyOfsortie_EUR_WSP.PRODUCTCOLORID == null){
	finder_tUniqRow_19.PRODUCTCOLORID = null;
}else{
	finder_tUniqRow_19.PRODUCTCOLORID = copyOfsortie_EUR_WSP.PRODUCTCOLORID.toLowerCase();
}
if(copyOfsortie_EUR_WSP.PRODUCTSIZEID == null){
	finder_tUniqRow_19.PRODUCTSIZEID = null;
}else{
	finder_tUniqRow_19.PRODUCTSIZEID = copyOfsortie_EUR_WSP.PRODUCTSIZEID.toLowerCase();
}
if(copyOfsortie_EUR_WSP.PRODUCTSTYLEID == null){
	finder_tUniqRow_19.PRODUCTSTYLEID = null;
}else{
	finder_tUniqRow_19.PRODUCTSTYLEID = copyOfsortie_EUR_WSP.PRODUCTSTYLEID.toLowerCase();
}
if(copyOfsortie_EUR_WSP.QUANTITYUNITSYMBOL == null){
	finder_tUniqRow_19.QUANTITYUNITSYMBOL = null;
}else{
	finder_tUniqRow_19.QUANTITYUNITSYMBOL = copyOfsortie_EUR_WSP.QUANTITYUNITSYMBOL.toLowerCase();
}	
finder_tUniqRow_19.hashCodeDirty = true;
if (!keystUniqRow_19.contains(finder_tUniqRow_19)) {
		KeyStruct_tUniqRow_19 new_tUniqRow_19 = new KeyStruct_tUniqRow_19();

		
if(copyOfsortie_EUR_WSP.TRADEAGREEMENTJOURNALNUMBER == null){
	new_tUniqRow_19.TRADEAGREEMENTJOURNALNUMBER = null;
}else{
	new_tUniqRow_19.TRADEAGREEMENTJOURNALNUMBER = copyOfsortie_EUR_WSP.TRADEAGREEMENTJOURNALNUMBER.toLowerCase();
}
if(copyOfsortie_EUR_WSP.ITEMNUMBER == null){
	new_tUniqRow_19.ITEMNUMBER = null;
}else{
	new_tUniqRow_19.ITEMNUMBER = copyOfsortie_EUR_WSP.ITEMNUMBER.toLowerCase();
}
new_tUniqRow_19.PRICE = copyOfsortie_EUR_WSP.PRICE;
if(copyOfsortie_EUR_WSP.PRICECURRENCYCODE == null){
	new_tUniqRow_19.PRICECURRENCYCODE = null;
}else{
	new_tUniqRow_19.PRICECURRENCYCODE = copyOfsortie_EUR_WSP.PRICECURRENCYCODE.toLowerCase();
}
if(copyOfsortie_EUR_WSP.PRICECUSTOMERGROUPCODE == null){
	new_tUniqRow_19.PRICECUSTOMERGROUPCODE = null;
}else{
	new_tUniqRow_19.PRICECUSTOMERGROUPCODE = copyOfsortie_EUR_WSP.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(copyOfsortie_EUR_WSP.PRODUCTCOLORID == null){
	new_tUniqRow_19.PRODUCTCOLORID = null;
}else{
	new_tUniqRow_19.PRODUCTCOLORID = copyOfsortie_EUR_WSP.PRODUCTCOLORID.toLowerCase();
}
if(copyOfsortie_EUR_WSP.PRODUCTSIZEID == null){
	new_tUniqRow_19.PRODUCTSIZEID = null;
}else{
	new_tUniqRow_19.PRODUCTSIZEID = copyOfsortie_EUR_WSP.PRODUCTSIZEID.toLowerCase();
}
if(copyOfsortie_EUR_WSP.PRODUCTSTYLEID == null){
	new_tUniqRow_19.PRODUCTSTYLEID = null;
}else{
	new_tUniqRow_19.PRODUCTSTYLEID = copyOfsortie_EUR_WSP.PRODUCTSTYLEID.toLowerCase();
}
if(copyOfsortie_EUR_WSP.QUANTITYUNITSYMBOL == null){
	new_tUniqRow_19.QUANTITYUNITSYMBOL = null;
}else{
	new_tUniqRow_19.QUANTITYUNITSYMBOL = copyOfsortie_EUR_WSP.QUANTITYUNITSYMBOL.toLowerCase();
}
		
		keystUniqRow_19.add(new_tUniqRow_19);if(row36 == null){ 
	
	row36 = new row36Struct();
}row36.TRADEAGREEMENTJOURNALNUMBER = copyOfsortie_EUR_WSP.TRADEAGREEMENTJOURNALNUMBER;			row36.ITEMNUMBER = copyOfsortie_EUR_WSP.ITEMNUMBER;			row36.PRICE = copyOfsortie_EUR_WSP.PRICE;			row36.PRICECURRENCYCODE = copyOfsortie_EUR_WSP.PRICECURRENCYCODE;			row36.PRICECUSTOMERGROUPCODE = copyOfsortie_EUR_WSP.PRICECUSTOMERGROUPCODE;			row36.PRODUCTCOLORID = copyOfsortie_EUR_WSP.PRODUCTCOLORID;			row36.PRODUCTSIZEID = copyOfsortie_EUR_WSP.PRODUCTSIZEID;			row36.PRODUCTSTYLEID = copyOfsortie_EUR_WSP.PRODUCTSTYLEID;			row36.QUANTITYUNITSYMBOL = copyOfsortie_EUR_WSP.QUANTITYUNITSYMBOL;					
		nb_uniques_tUniqRow_19++;
	} else {
	  nb_duplicates_tUniqRow_19++;
	}

 


	tos_count_tUniqRow_19++;

/**
 * [tUniqRow_19 main ] stop
 */
	
	/**
	 * [tUniqRow_19 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_19";

	

 



/**
 * [tUniqRow_19 process_data_begin ] stop
 */
// Start of branch "row36"
if(row36 != null) { 



	
	/**
	 * [tFilterRow_3 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row36");
					}
					

          row38 = null;
    Operator_tFilterRow_3 ope_tFilterRow_3 = new Operator_tFilterRow_3("&&");
            ope_tFilterRow_3.matches((row36.PRICE == null? false : row36.PRICE.compareTo(ParserUtils.parseTo_Double(String.valueOf(0))) > 0)
                           , "PRICE.compareTo(0) > 0 failed");
		 	
    
    if (ope_tFilterRow_3.getMatchFlag()) {
              if(row38 == null){ 
                row38 = new row38Struct();
              }
               row38.TRADEAGREEMENTJOURNALNUMBER = row36.TRADEAGREEMENTJOURNALNUMBER;
               row38.ITEMNUMBER = row36.ITEMNUMBER;
               row38.PRICE = row36.PRICE;
               row38.PRICECURRENCYCODE = row36.PRICECURRENCYCODE;
               row38.PRICECUSTOMERGROUPCODE = row36.PRICECUSTOMERGROUPCODE;
               row38.PRODUCTCOLORID = row36.PRODUCTCOLORID;
               row38.PRODUCTSIZEID = row36.PRODUCTSIZEID;
               row38.PRODUCTSTYLEID = row36.PRODUCTSTYLEID;
               row38.QUANTITYUNITSYMBOL = row36.QUANTITYUNITSYMBOL;    
      nb_line_ok_tFilterRow_3++;
    } else {
      nb_line_reject_tFilterRow_3++;
    }

nb_line_tFilterRow_3++;

 


	tos_count_tFilterRow_3++;

/**
 * [tFilterRow_3 main ] stop
 */
	
	/**
	 * [tFilterRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_3";

	

 



/**
 * [tFilterRow_3 process_data_begin ] stop
 */
// Start of branch "row38"
if(row38 != null) { 



	
	/**
	 * [tHashOutput_10 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_10";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row38");
					}
					



    
		row38Struct oneRow_tHashOutput_10 = new row38Struct();
				
					oneRow_tHashOutput_10.TRADEAGREEMENTJOURNALNUMBER = row38.TRADEAGREEMENTJOURNALNUMBER;
					oneRow_tHashOutput_10.ITEMNUMBER = row38.ITEMNUMBER;
					oneRow_tHashOutput_10.PRICE = row38.PRICE;
					oneRow_tHashOutput_10.PRICECURRENCYCODE = row38.PRICECURRENCYCODE;
					oneRow_tHashOutput_10.PRICECUSTOMERGROUPCODE = row38.PRICECUSTOMERGROUPCODE;
					oneRow_tHashOutput_10.PRODUCTCOLORID = row38.PRODUCTCOLORID;
					oneRow_tHashOutput_10.PRODUCTSIZEID = row38.PRODUCTSIZEID;
					oneRow_tHashOutput_10.PRODUCTSTYLEID = row38.PRODUCTSTYLEID;
					oneRow_tHashOutput_10.QUANTITYUNITSYMBOL = row38.QUANTITYUNITSYMBOL;
		
        tHashFile_tHashOutput_10.put(oneRow_tHashOutput_10);
        nb_line_tHashOutput_10 ++;
 


	tos_count_tHashOutput_10++;

/**
 * [tHashOutput_10 main ] stop
 */
	
	/**
	 * [tHashOutput_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_10";

	

 



/**
 * [tHashOutput_10 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_10";

	

 



/**
 * [tHashOutput_10 process_data_end ] stop
 */

} // End of branch "row38"




	
	/**
	 * [tFilterRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_3";

	

 



/**
 * [tFilterRow_3 process_data_end ] stop
 */

} // End of branch "row36"




	
	/**
	 * [tUniqRow_19 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_19";

	

 



/**
 * [tUniqRow_19 process_data_end ] stop
 */

} // End of branch "copyOfsortie_EUR_WSP"




// Start of branch "sortie_full_rrp_eur"
if(sortie_full_rrp_eur != null) { 



	
	/**
	 * [tMap_23 main ] start
	 */

	

	
	
	currentComponent="tMap_23";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_full_rrp_eur");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_23 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_23 = false;
		  boolean mainRowRejected_tMap_23 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_23__Struct Var = Var__tMap_23;// ###############################
        // ###############################
        // # Output tables

copyOfsortie_EUR_WSP_0 = null;
sortie_full_gbp_wsp = null;


// # Output table : 'copyOfsortie_EUR_WSP_0'
copyOfsortie_EUR_WSP_0_tmp.TRADEAGREEMENTJOURNALNUMBER = "HBE1-" + globalMap.get("SalesJournalNumber");
copyOfsortie_EUR_WSP_0_tmp.ITEMNUMBER = sortie_full_rrp_eur.STYLE ;
copyOfsortie_EUR_WSP_0_tmp.PRICE = sortie_full_rrp_eur.GBP_WSP == null ? 0 : Mathematical.REAL(sortie_full_rrp_eur.GBP_WSP .replaceAll(",", ".") ) ;
copyOfsortie_EUR_WSP_0_tmp.PRICECURRENCYCODE = "GBP";
copyOfsortie_EUR_WSP_0_tmp.PRICECUSTOMERGROUPCODE = "WSP";
copyOfsortie_EUR_WSP_0_tmp.PRODUCTCOLORID = sortie_full_rrp_eur.COLOR ;
copyOfsortie_EUR_WSP_0_tmp.PRODUCTSIZEID = sortie_full_rrp_eur.SIZE ;
copyOfsortie_EUR_WSP_0_tmp.PRODUCTSTYLEID = sortie_full_rrp_eur.LBL ;
copyOfsortie_EUR_WSP_0_tmp.QUANTITYUNITSYMBOL = "PCS";
copyOfsortie_EUR_WSP_0 = copyOfsortie_EUR_WSP_0_tmp;

// # Output table : 'sortie_full_gbp_wsp'
sortie_full_gbp_wsp_tmp.BRAND = sortie_full_rrp_eur.BRAND ;
sortie_full_gbp_wsp_tmp.SEASON = sortie_full_rrp_eur.SEASON ;
sortie_full_gbp_wsp_tmp.CATEGORY = sortie_full_rrp_eur.CATEGORY ;
sortie_full_gbp_wsp_tmp.REF = sortie_full_rrp_eur.REF ;
sortie_full_gbp_wsp_tmp.DESCRIPTION = sortie_full_rrp_eur.DESCRIPTION ;
sortie_full_gbp_wsp_tmp.STYLE = sortie_full_rrp_eur.STYLE ;
sortie_full_gbp_wsp_tmp.COLOR = sortie_full_rrp_eur.COLOR ;
sortie_full_gbp_wsp_tmp.FASHION = sortie_full_rrp_eur.FASHION ;
sortie_full_gbp_wsp_tmp.STYLECOLORLABEL = sortie_full_rrp_eur.STYLECOLORLABEL ;
sortie_full_gbp_wsp_tmp.COLORNAME = sortie_full_rrp_eur.COLORNAME ;
sortie_full_gbp_wsp_tmp.LBL = sortie_full_rrp_eur.LBL ;
sortie_full_gbp_wsp_tmp.STYLE_COLOR = sortie_full_rrp_eur.STYLE_COLOR ;
sortie_full_gbp_wsp_tmp.GENDER = sortie_full_rrp_eur.GENDER ;
sortie_full_gbp_wsp_tmp.AGE_RANGE = sortie_full_rrp_eur.AGE_RANGE ;
sortie_full_gbp_wsp_tmp.SIZE_RANGE = sortie_full_rrp_eur.SIZE_RANGE ;
sortie_full_gbp_wsp_tmp.SIZE = sortie_full_rrp_eur.SIZE ;
sortie_full_gbp_wsp_tmp.US_SIZE = sortie_full_rrp_eur.US_SIZE ;
sortie_full_gbp_wsp_tmp.CM_SIZE = sortie_full_rrp_eur.CM_SIZE ;
sortie_full_gbp_wsp_tmp.PRODUCT = sortie_full_rrp_eur.PRODUCT ;
sortie_full_gbp_wsp_tmp.PRODUCT_STATUS = sortie_full_rrp_eur.PRODUCT_STATUS ;
sortie_full_gbp_wsp_tmp.PRODUCT_TIER = sortie_full_rrp_eur.PRODUCT_TIER ;
sortie_full_gbp_wsp_tmp.ACCT_EXCLUS = sortie_full_rrp_eur.ACCT_EXCLUS ;
sortie_full_gbp_wsp_tmp.SIZE_RATIO_SPLIT = sortie_full_rrp_eur.SIZE_RATIO_SPLIT ;
sortie_full_gbp_wsp_tmp.REC_SIZE_SPLIT = sortie_full_rrp_eur.REC_SIZE_SPLIT ;
sortie_full_gbp_wsp_tmp.CARTON_QTY = sortie_full_rrp_eur.CARTON_QTY ;
sortie_full_gbp_wsp_tmp.ATTRIBUTE = sortie_full_rrp_eur.ATTRIBUTE ;
sortie_full_gbp_wsp_tmp.UNITS = sortie_full_rrp_eur.UNITS ;
sortie_full_gbp_wsp_tmp.EUR_RRP = sortie_full_rrp_eur.EUR_RRP ;
sortie_full_gbp_wsp_tmp.EUR_WSP = sortie_full_rrp_eur.EUR_WSP ;
sortie_full_gbp_wsp_tmp.GBP_RRP = sortie_full_rrp_eur.GBP_RRP ;
sortie_full_gbp_wsp_tmp.GBP_WSP = sortie_full_rrp_eur.GBP_WSP ;
sortie_full_gbp_wsp_tmp.CHF_RRP = sortie_full_rrp_eur.CHF_RRP ;
sortie_full_gbp_wsp_tmp.CHF_WSP = sortie_full_rrp_eur.CHF_WSP ;
sortie_full_gbp_wsp_tmp.NOK_RRP = sortie_full_rrp_eur.NOK_RRP ;
sortie_full_gbp_wsp_tmp.NOK_WSP = sortie_full_rrp_eur.NOK_WSP ;
sortie_full_gbp_wsp_tmp.DKK_RRP = sortie_full_rrp_eur.DKK_RRP ;
sortie_full_gbp_wsp_tmp.DKK_WSP = sortie_full_rrp_eur.DKK_WSP ;
sortie_full_gbp_wsp_tmp.SEK_RRP = sortie_full_rrp_eur.SEK_RRP ;
sortie_full_gbp_wsp_tmp.SEK_WSP = sortie_full_rrp_eur.SEK_WSP ;
sortie_full_gbp_wsp_tmp.EUR_FINN_RRP = sortie_full_rrp_eur.EUR_FINN_RRP ;
sortie_full_gbp_wsp_tmp.EUR_FINN_WSP = sortie_full_rrp_eur.EUR_FINN_WSP ;
sortie_full_gbp_wsp_tmp.FABRICATION = sortie_full_rrp_eur.FABRICATION ;
sortie_full_gbp_wsp_tmp.COO = sortie_full_rrp_eur.COO ;
sortie_full_gbp_wsp_tmp.CUSTOM_TARIFF_CODE = sortie_full_rrp_eur.CUSTOM_TARIFF_CODE ;
sortie_full_gbp_wsp_tmp.UPC = sortie_full_rrp_eur.UPC ;
sortie_full_gbp_wsp_tmp.SMU_TYPE = sortie_full_rrp_eur.SMU_TYPE ;
sortie_full_gbp_wsp = sortie_full_gbp_wsp_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_23 = false;










 


	tos_count_tMap_23++;

/**
 * [tMap_23 main ] stop
 */
	
	/**
	 * [tMap_23 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_23";

	

 



/**
 * [tMap_23 process_data_begin ] stop
 */
// Start of branch "copyOfsortie_EUR_WSP_0"
if(copyOfsortie_EUR_WSP_0 != null) { 



	
	/**
	 * [tUniqRow_20 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_20";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfsortie_EUR_WSP_0");
					}
					
row43 = null;			
if(copyOfsortie_EUR_WSP_0.TRADEAGREEMENTJOURNALNUMBER == null){
	finder_tUniqRow_20.TRADEAGREEMENTJOURNALNUMBER = null;
}else{
	finder_tUniqRow_20.TRADEAGREEMENTJOURNALNUMBER = copyOfsortie_EUR_WSP_0.TRADEAGREEMENTJOURNALNUMBER.toLowerCase();
}
if(copyOfsortie_EUR_WSP_0.ITEMNUMBER == null){
	finder_tUniqRow_20.ITEMNUMBER = null;
}else{
	finder_tUniqRow_20.ITEMNUMBER = copyOfsortie_EUR_WSP_0.ITEMNUMBER.toLowerCase();
}
finder_tUniqRow_20.PRICE = copyOfsortie_EUR_WSP_0.PRICE;
if(copyOfsortie_EUR_WSP_0.PRICECURRENCYCODE == null){
	finder_tUniqRow_20.PRICECURRENCYCODE = null;
}else{
	finder_tUniqRow_20.PRICECURRENCYCODE = copyOfsortie_EUR_WSP_0.PRICECURRENCYCODE.toLowerCase();
}
if(copyOfsortie_EUR_WSP_0.PRICECUSTOMERGROUPCODE == null){
	finder_tUniqRow_20.PRICECUSTOMERGROUPCODE = null;
}else{
	finder_tUniqRow_20.PRICECUSTOMERGROUPCODE = copyOfsortie_EUR_WSP_0.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(copyOfsortie_EUR_WSP_0.PRODUCTCOLORID == null){
	finder_tUniqRow_20.PRODUCTCOLORID = null;
}else{
	finder_tUniqRow_20.PRODUCTCOLORID = copyOfsortie_EUR_WSP_0.PRODUCTCOLORID.toLowerCase();
}
if(copyOfsortie_EUR_WSP_0.PRODUCTSIZEID == null){
	finder_tUniqRow_20.PRODUCTSIZEID = null;
}else{
	finder_tUniqRow_20.PRODUCTSIZEID = copyOfsortie_EUR_WSP_0.PRODUCTSIZEID.toLowerCase();
}
if(copyOfsortie_EUR_WSP_0.PRODUCTSTYLEID == null){
	finder_tUniqRow_20.PRODUCTSTYLEID = null;
}else{
	finder_tUniqRow_20.PRODUCTSTYLEID = copyOfsortie_EUR_WSP_0.PRODUCTSTYLEID.toLowerCase();
}
if(copyOfsortie_EUR_WSP_0.QUANTITYUNITSYMBOL == null){
	finder_tUniqRow_20.QUANTITYUNITSYMBOL = null;
}else{
	finder_tUniqRow_20.QUANTITYUNITSYMBOL = copyOfsortie_EUR_WSP_0.QUANTITYUNITSYMBOL.toLowerCase();
}	
finder_tUniqRow_20.hashCodeDirty = true;
if (!keystUniqRow_20.contains(finder_tUniqRow_20)) {
		KeyStruct_tUniqRow_20 new_tUniqRow_20 = new KeyStruct_tUniqRow_20();

		
if(copyOfsortie_EUR_WSP_0.TRADEAGREEMENTJOURNALNUMBER == null){
	new_tUniqRow_20.TRADEAGREEMENTJOURNALNUMBER = null;
}else{
	new_tUniqRow_20.TRADEAGREEMENTJOURNALNUMBER = copyOfsortie_EUR_WSP_0.TRADEAGREEMENTJOURNALNUMBER.toLowerCase();
}
if(copyOfsortie_EUR_WSP_0.ITEMNUMBER == null){
	new_tUniqRow_20.ITEMNUMBER = null;
}else{
	new_tUniqRow_20.ITEMNUMBER = copyOfsortie_EUR_WSP_0.ITEMNUMBER.toLowerCase();
}
new_tUniqRow_20.PRICE = copyOfsortie_EUR_WSP_0.PRICE;
if(copyOfsortie_EUR_WSP_0.PRICECURRENCYCODE == null){
	new_tUniqRow_20.PRICECURRENCYCODE = null;
}else{
	new_tUniqRow_20.PRICECURRENCYCODE = copyOfsortie_EUR_WSP_0.PRICECURRENCYCODE.toLowerCase();
}
if(copyOfsortie_EUR_WSP_0.PRICECUSTOMERGROUPCODE == null){
	new_tUniqRow_20.PRICECUSTOMERGROUPCODE = null;
}else{
	new_tUniqRow_20.PRICECUSTOMERGROUPCODE = copyOfsortie_EUR_WSP_0.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(copyOfsortie_EUR_WSP_0.PRODUCTCOLORID == null){
	new_tUniqRow_20.PRODUCTCOLORID = null;
}else{
	new_tUniqRow_20.PRODUCTCOLORID = copyOfsortie_EUR_WSP_0.PRODUCTCOLORID.toLowerCase();
}
if(copyOfsortie_EUR_WSP_0.PRODUCTSIZEID == null){
	new_tUniqRow_20.PRODUCTSIZEID = null;
}else{
	new_tUniqRow_20.PRODUCTSIZEID = copyOfsortie_EUR_WSP_0.PRODUCTSIZEID.toLowerCase();
}
if(copyOfsortie_EUR_WSP_0.PRODUCTSTYLEID == null){
	new_tUniqRow_20.PRODUCTSTYLEID = null;
}else{
	new_tUniqRow_20.PRODUCTSTYLEID = copyOfsortie_EUR_WSP_0.PRODUCTSTYLEID.toLowerCase();
}
if(copyOfsortie_EUR_WSP_0.QUANTITYUNITSYMBOL == null){
	new_tUniqRow_20.QUANTITYUNITSYMBOL = null;
}else{
	new_tUniqRow_20.QUANTITYUNITSYMBOL = copyOfsortie_EUR_WSP_0.QUANTITYUNITSYMBOL.toLowerCase();
}
		
		keystUniqRow_20.add(new_tUniqRow_20);if(row43 == null){ 
	
	row43 = new row43Struct();
}row43.TRADEAGREEMENTJOURNALNUMBER = copyOfsortie_EUR_WSP_0.TRADEAGREEMENTJOURNALNUMBER;			row43.ITEMNUMBER = copyOfsortie_EUR_WSP_0.ITEMNUMBER;			row43.PRICE = copyOfsortie_EUR_WSP_0.PRICE;			row43.PRICECURRENCYCODE = copyOfsortie_EUR_WSP_0.PRICECURRENCYCODE;			row43.PRICECUSTOMERGROUPCODE = copyOfsortie_EUR_WSP_0.PRICECUSTOMERGROUPCODE;			row43.PRODUCTCOLORID = copyOfsortie_EUR_WSP_0.PRODUCTCOLORID;			row43.PRODUCTSIZEID = copyOfsortie_EUR_WSP_0.PRODUCTSIZEID;			row43.PRODUCTSTYLEID = copyOfsortie_EUR_WSP_0.PRODUCTSTYLEID;			row43.QUANTITYUNITSYMBOL = copyOfsortie_EUR_WSP_0.QUANTITYUNITSYMBOL;					
		nb_uniques_tUniqRow_20++;
	} else {
	  nb_duplicates_tUniqRow_20++;
	}

 


	tos_count_tUniqRow_20++;

/**
 * [tUniqRow_20 main ] stop
 */
	
	/**
	 * [tUniqRow_20 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_20";

	

 



/**
 * [tUniqRow_20 process_data_begin ] stop
 */
// Start of branch "row43"
if(row43 != null) { 



	
	/**
	 * [tFilterRow_4 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row43");
					}
					

          row44 = null;
    Operator_tFilterRow_4 ope_tFilterRow_4 = new Operator_tFilterRow_4("&&");
            ope_tFilterRow_4.matches((row43.PRICE == null? false : row43.PRICE.compareTo(ParserUtils.parseTo_Double(String.valueOf(0))) > 0)
                           , "PRICE.compareTo(0) > 0 failed");
		 	
    
    if (ope_tFilterRow_4.getMatchFlag()) {
              if(row44 == null){ 
                row44 = new row44Struct();
              }
               row44.TRADEAGREEMENTJOURNALNUMBER = row43.TRADEAGREEMENTJOURNALNUMBER;
               row44.ITEMNUMBER = row43.ITEMNUMBER;
               row44.PRICE = row43.PRICE;
               row44.PRICECURRENCYCODE = row43.PRICECURRENCYCODE;
               row44.PRICECUSTOMERGROUPCODE = row43.PRICECUSTOMERGROUPCODE;
               row44.PRODUCTCOLORID = row43.PRODUCTCOLORID;
               row44.PRODUCTSIZEID = row43.PRODUCTSIZEID;
               row44.PRODUCTSTYLEID = row43.PRODUCTSTYLEID;
               row44.QUANTITYUNITSYMBOL = row43.QUANTITYUNITSYMBOL;    
      nb_line_ok_tFilterRow_4++;
    } else {
      nb_line_reject_tFilterRow_4++;
    }

nb_line_tFilterRow_4++;

 


	tos_count_tFilterRow_4++;

/**
 * [tFilterRow_4 main ] stop
 */
	
	/**
	 * [tFilterRow_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_4";

	

 



/**
 * [tFilterRow_4 process_data_begin ] stop
 */
// Start of branch "row44"
if(row44 != null) { 



	
	/**
	 * [tHashOutput_11 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_11";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row44");
					}
					



    
		row44Struct oneRow_tHashOutput_11 = new row44Struct();
				
					oneRow_tHashOutput_11.TRADEAGREEMENTJOURNALNUMBER = row44.TRADEAGREEMENTJOURNALNUMBER;
					oneRow_tHashOutput_11.ITEMNUMBER = row44.ITEMNUMBER;
					oneRow_tHashOutput_11.PRICE = row44.PRICE;
					oneRow_tHashOutput_11.PRICECURRENCYCODE = row44.PRICECURRENCYCODE;
					oneRow_tHashOutput_11.PRICECUSTOMERGROUPCODE = row44.PRICECUSTOMERGROUPCODE;
					oneRow_tHashOutput_11.PRODUCTCOLORID = row44.PRODUCTCOLORID;
					oneRow_tHashOutput_11.PRODUCTSIZEID = row44.PRODUCTSIZEID;
					oneRow_tHashOutput_11.PRODUCTSTYLEID = row44.PRODUCTSTYLEID;
					oneRow_tHashOutput_11.QUANTITYUNITSYMBOL = row44.QUANTITYUNITSYMBOL;
		
        tHashFile_tHashOutput_11.put(oneRow_tHashOutput_11);
        nb_line_tHashOutput_11 ++;
 


	tos_count_tHashOutput_11++;

/**
 * [tHashOutput_11 main ] stop
 */
	
	/**
	 * [tHashOutput_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_11";

	

 



/**
 * [tHashOutput_11 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_11";

	

 



/**
 * [tHashOutput_11 process_data_end ] stop
 */

} // End of branch "row44"




	
	/**
	 * [tFilterRow_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_4";

	

 



/**
 * [tFilterRow_4 process_data_end ] stop
 */

} // End of branch "row43"




	
	/**
	 * [tUniqRow_20 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_20";

	

 



/**
 * [tUniqRow_20 process_data_end ] stop
 */

} // End of branch "copyOfsortie_EUR_WSP_0"




// Start of branch "sortie_full_gbp_wsp"
if(sortie_full_gbp_wsp != null) { 



	
	/**
	 * [tMap_24 main ] start
	 */

	

	
	
	currentComponent="tMap_24";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_full_gbp_wsp");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_24 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_24 = false;
		  boolean mainRowRejected_tMap_24 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_24__Struct Var = Var__tMap_24;// ###############################
        // ###############################
        // # Output tables

copyOfcopyOfsortie_EUR_WSP_0 = null;
sortie_full_GBP_RRP = null;


// # Output table : 'copyOfcopyOfsortie_EUR_WSP_0'
copyOfcopyOfsortie_EUR_WSP_0_tmp.TRADEAGREEMENTJOURNALNUMBER = "HBE1-" + globalMap.get("SalesJournalNumber");
copyOfcopyOfsortie_EUR_WSP_0_tmp.ITEMNUMBER = sortie_full_gbp_wsp.STYLE ;
copyOfcopyOfsortie_EUR_WSP_0_tmp.PRICE = sortie_full_gbp_wsp.GBP_RRP == null ? 0 : Mathematical.REAL(sortie_full_gbp_wsp.GBP_RRP .replaceAll(",", ".") ) ;
copyOfcopyOfsortie_EUR_WSP_0_tmp.PRICECURRENCYCODE = "GBP";
copyOfcopyOfsortie_EUR_WSP_0_tmp.PRICECUSTOMERGROUPCODE = "WSP";
copyOfcopyOfsortie_EUR_WSP_0_tmp.PRODUCTCOLORID = sortie_full_gbp_wsp.COLOR ;
copyOfcopyOfsortie_EUR_WSP_0_tmp.PRODUCTSIZEID = sortie_full_gbp_wsp.SIZE ;
copyOfcopyOfsortie_EUR_WSP_0_tmp.PRODUCTSTYLEID = sortie_full_gbp_wsp.LBL ;
copyOfcopyOfsortie_EUR_WSP_0_tmp.QUANTITYUNITSYMBOL = "PCS";
copyOfcopyOfsortie_EUR_WSP_0 = copyOfcopyOfsortie_EUR_WSP_0_tmp;

// # Output table : 'sortie_full_GBP_RRP'
sortie_full_GBP_RRP_tmp.BRAND = sortie_full_gbp_wsp.BRAND ;
sortie_full_GBP_RRP_tmp.SEASON = sortie_full_gbp_wsp.SEASON ;
sortie_full_GBP_RRP_tmp.CATEGORY = sortie_full_gbp_wsp.CATEGORY ;
sortie_full_GBP_RRP_tmp.REF = sortie_full_gbp_wsp.REF ;
sortie_full_GBP_RRP_tmp.DESCRIPTION = sortie_full_gbp_wsp.DESCRIPTION ;
sortie_full_GBP_RRP_tmp.STYLE = sortie_full_gbp_wsp.STYLE ;
sortie_full_GBP_RRP_tmp.COLOR = sortie_full_gbp_wsp.COLOR ;
sortie_full_GBP_RRP_tmp.FASHION = sortie_full_gbp_wsp.FASHION ;
sortie_full_GBP_RRP_tmp.STYLECOLORLABEL = sortie_full_gbp_wsp.STYLECOLORLABEL ;
sortie_full_GBP_RRP_tmp.COLORNAME = sortie_full_gbp_wsp.COLORNAME ;
sortie_full_GBP_RRP_tmp.LBL = sortie_full_gbp_wsp.LBL ;
sortie_full_GBP_RRP_tmp.STYLE_COLOR = sortie_full_gbp_wsp.STYLE_COLOR ;
sortie_full_GBP_RRP_tmp.GENDER = sortie_full_gbp_wsp.GENDER ;
sortie_full_GBP_RRP_tmp.AGE_RANGE = sortie_full_gbp_wsp.AGE_RANGE ;
sortie_full_GBP_RRP_tmp.SIZE_RANGE = sortie_full_gbp_wsp.SIZE_RANGE ;
sortie_full_GBP_RRP_tmp.SIZE = sortie_full_gbp_wsp.SIZE ;
sortie_full_GBP_RRP_tmp.US_SIZE = sortie_full_gbp_wsp.US_SIZE ;
sortie_full_GBP_RRP_tmp.CM_SIZE = sortie_full_gbp_wsp.CM_SIZE ;
sortie_full_GBP_RRP_tmp.PRODUCT = sortie_full_gbp_wsp.PRODUCT ;
sortie_full_GBP_RRP_tmp.PRODUCT_STATUS = sortie_full_gbp_wsp.PRODUCT_STATUS ;
sortie_full_GBP_RRP_tmp.PRODUCT_TIER = sortie_full_gbp_wsp.PRODUCT_TIER ;
sortie_full_GBP_RRP_tmp.ACCT_EXCLUS = sortie_full_gbp_wsp.ACCT_EXCLUS ;
sortie_full_GBP_RRP_tmp.SIZE_RATIO_SPLIT = sortie_full_gbp_wsp.SIZE_RATIO_SPLIT ;
sortie_full_GBP_RRP_tmp.REC_SIZE_SPLIT = sortie_full_gbp_wsp.REC_SIZE_SPLIT ;
sortie_full_GBP_RRP_tmp.CARTON_QTY = sortie_full_gbp_wsp.CARTON_QTY ;
sortie_full_GBP_RRP_tmp.ATTRIBUTE = sortie_full_gbp_wsp.ATTRIBUTE ;
sortie_full_GBP_RRP_tmp.UNITS = sortie_full_gbp_wsp.UNITS ;
sortie_full_GBP_RRP_tmp.EUR_RRP = sortie_full_gbp_wsp.EUR_RRP ;
sortie_full_GBP_RRP_tmp.EUR_WSP = sortie_full_gbp_wsp.EUR_WSP ;
sortie_full_GBP_RRP_tmp.GBP_RRP = sortie_full_gbp_wsp.GBP_RRP ;
sortie_full_GBP_RRP_tmp.GBP_WSP = sortie_full_gbp_wsp.GBP_WSP ;
sortie_full_GBP_RRP_tmp.CHF_RRP = sortie_full_gbp_wsp.CHF_RRP ;
sortie_full_GBP_RRP_tmp.CHF_WSP = sortie_full_gbp_wsp.CHF_WSP ;
sortie_full_GBP_RRP_tmp.NOK_RRP = sortie_full_gbp_wsp.NOK_RRP ;
sortie_full_GBP_RRP_tmp.NOK_WSP = sortie_full_gbp_wsp.NOK_WSP ;
sortie_full_GBP_RRP_tmp.DKK_RRP = sortie_full_gbp_wsp.DKK_RRP ;
sortie_full_GBP_RRP_tmp.DKK_WSP = sortie_full_gbp_wsp.DKK_WSP ;
sortie_full_GBP_RRP_tmp.SEK_RRP = sortie_full_gbp_wsp.SEK_RRP ;
sortie_full_GBP_RRP_tmp.SEK_WSP = sortie_full_gbp_wsp.SEK_WSP ;
sortie_full_GBP_RRP_tmp.EUR_FINN_RRP = sortie_full_gbp_wsp.EUR_FINN_RRP ;
sortie_full_GBP_RRP_tmp.EUR_FINN_WSP = sortie_full_gbp_wsp.EUR_FINN_WSP ;
sortie_full_GBP_RRP_tmp.FABRICATION = sortie_full_gbp_wsp.FABRICATION ;
sortie_full_GBP_RRP_tmp.COO = sortie_full_gbp_wsp.COO ;
sortie_full_GBP_RRP_tmp.CUSTOM_TARIFF_CODE = sortie_full_gbp_wsp.CUSTOM_TARIFF_CODE ;
sortie_full_GBP_RRP_tmp.UPC = sortie_full_gbp_wsp.UPC ;
sortie_full_GBP_RRP_tmp.SMU_TYPE = sortie_full_gbp_wsp.SMU_TYPE ;
sortie_full_GBP_RRP = sortie_full_GBP_RRP_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_24 = false;










 


	tos_count_tMap_24++;

/**
 * [tMap_24 main ] stop
 */
	
	/**
	 * [tMap_24 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_24";

	

 



/**
 * [tMap_24 process_data_begin ] stop
 */
// Start of branch "copyOfcopyOfsortie_EUR_WSP_0"
if(copyOfcopyOfsortie_EUR_WSP_0 != null) { 



	
	/**
	 * [tUniqRow_21 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_21";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfcopyOfsortie_EUR_WSP_0");
					}
					
row45 = null;			
if(copyOfcopyOfsortie_EUR_WSP_0.TRADEAGREEMENTJOURNALNUMBER == null){
	finder_tUniqRow_21.TRADEAGREEMENTJOURNALNUMBER = null;
}else{
	finder_tUniqRow_21.TRADEAGREEMENTJOURNALNUMBER = copyOfcopyOfsortie_EUR_WSP_0.TRADEAGREEMENTJOURNALNUMBER.toLowerCase();
}
if(copyOfcopyOfsortie_EUR_WSP_0.ITEMNUMBER == null){
	finder_tUniqRow_21.ITEMNUMBER = null;
}else{
	finder_tUniqRow_21.ITEMNUMBER = copyOfcopyOfsortie_EUR_WSP_0.ITEMNUMBER.toLowerCase();
}
finder_tUniqRow_21.PRICE = copyOfcopyOfsortie_EUR_WSP_0.PRICE;
if(copyOfcopyOfsortie_EUR_WSP_0.PRICECURRENCYCODE == null){
	finder_tUniqRow_21.PRICECURRENCYCODE = null;
}else{
	finder_tUniqRow_21.PRICECURRENCYCODE = copyOfcopyOfsortie_EUR_WSP_0.PRICECURRENCYCODE.toLowerCase();
}
if(copyOfcopyOfsortie_EUR_WSP_0.PRICECUSTOMERGROUPCODE == null){
	finder_tUniqRow_21.PRICECUSTOMERGROUPCODE = null;
}else{
	finder_tUniqRow_21.PRICECUSTOMERGROUPCODE = copyOfcopyOfsortie_EUR_WSP_0.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(copyOfcopyOfsortie_EUR_WSP_0.PRODUCTCOLORID == null){
	finder_tUniqRow_21.PRODUCTCOLORID = null;
}else{
	finder_tUniqRow_21.PRODUCTCOLORID = copyOfcopyOfsortie_EUR_WSP_0.PRODUCTCOLORID.toLowerCase();
}
if(copyOfcopyOfsortie_EUR_WSP_0.PRODUCTSIZEID == null){
	finder_tUniqRow_21.PRODUCTSIZEID = null;
}else{
	finder_tUniqRow_21.PRODUCTSIZEID = copyOfcopyOfsortie_EUR_WSP_0.PRODUCTSIZEID.toLowerCase();
}
if(copyOfcopyOfsortie_EUR_WSP_0.PRODUCTSTYLEID == null){
	finder_tUniqRow_21.PRODUCTSTYLEID = null;
}else{
	finder_tUniqRow_21.PRODUCTSTYLEID = copyOfcopyOfsortie_EUR_WSP_0.PRODUCTSTYLEID.toLowerCase();
}
if(copyOfcopyOfsortie_EUR_WSP_0.QUANTITYUNITSYMBOL == null){
	finder_tUniqRow_21.QUANTITYUNITSYMBOL = null;
}else{
	finder_tUniqRow_21.QUANTITYUNITSYMBOL = copyOfcopyOfsortie_EUR_WSP_0.QUANTITYUNITSYMBOL.toLowerCase();
}	
finder_tUniqRow_21.hashCodeDirty = true;
if (!keystUniqRow_21.contains(finder_tUniqRow_21)) {
		KeyStruct_tUniqRow_21 new_tUniqRow_21 = new KeyStruct_tUniqRow_21();

		
if(copyOfcopyOfsortie_EUR_WSP_0.TRADEAGREEMENTJOURNALNUMBER == null){
	new_tUniqRow_21.TRADEAGREEMENTJOURNALNUMBER = null;
}else{
	new_tUniqRow_21.TRADEAGREEMENTJOURNALNUMBER = copyOfcopyOfsortie_EUR_WSP_0.TRADEAGREEMENTJOURNALNUMBER.toLowerCase();
}
if(copyOfcopyOfsortie_EUR_WSP_0.ITEMNUMBER == null){
	new_tUniqRow_21.ITEMNUMBER = null;
}else{
	new_tUniqRow_21.ITEMNUMBER = copyOfcopyOfsortie_EUR_WSP_0.ITEMNUMBER.toLowerCase();
}
new_tUniqRow_21.PRICE = copyOfcopyOfsortie_EUR_WSP_0.PRICE;
if(copyOfcopyOfsortie_EUR_WSP_0.PRICECURRENCYCODE == null){
	new_tUniqRow_21.PRICECURRENCYCODE = null;
}else{
	new_tUniqRow_21.PRICECURRENCYCODE = copyOfcopyOfsortie_EUR_WSP_0.PRICECURRENCYCODE.toLowerCase();
}
if(copyOfcopyOfsortie_EUR_WSP_0.PRICECUSTOMERGROUPCODE == null){
	new_tUniqRow_21.PRICECUSTOMERGROUPCODE = null;
}else{
	new_tUniqRow_21.PRICECUSTOMERGROUPCODE = copyOfcopyOfsortie_EUR_WSP_0.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(copyOfcopyOfsortie_EUR_WSP_0.PRODUCTCOLORID == null){
	new_tUniqRow_21.PRODUCTCOLORID = null;
}else{
	new_tUniqRow_21.PRODUCTCOLORID = copyOfcopyOfsortie_EUR_WSP_0.PRODUCTCOLORID.toLowerCase();
}
if(copyOfcopyOfsortie_EUR_WSP_0.PRODUCTSIZEID == null){
	new_tUniqRow_21.PRODUCTSIZEID = null;
}else{
	new_tUniqRow_21.PRODUCTSIZEID = copyOfcopyOfsortie_EUR_WSP_0.PRODUCTSIZEID.toLowerCase();
}
if(copyOfcopyOfsortie_EUR_WSP_0.PRODUCTSTYLEID == null){
	new_tUniqRow_21.PRODUCTSTYLEID = null;
}else{
	new_tUniqRow_21.PRODUCTSTYLEID = copyOfcopyOfsortie_EUR_WSP_0.PRODUCTSTYLEID.toLowerCase();
}
if(copyOfcopyOfsortie_EUR_WSP_0.QUANTITYUNITSYMBOL == null){
	new_tUniqRow_21.QUANTITYUNITSYMBOL = null;
}else{
	new_tUniqRow_21.QUANTITYUNITSYMBOL = copyOfcopyOfsortie_EUR_WSP_0.QUANTITYUNITSYMBOL.toLowerCase();
}
		
		keystUniqRow_21.add(new_tUniqRow_21);if(row45 == null){ 
	
	row45 = new row45Struct();
}row45.TRADEAGREEMENTJOURNALNUMBER = copyOfcopyOfsortie_EUR_WSP_0.TRADEAGREEMENTJOURNALNUMBER;			row45.ITEMNUMBER = copyOfcopyOfsortie_EUR_WSP_0.ITEMNUMBER;			row45.PRICE = copyOfcopyOfsortie_EUR_WSP_0.PRICE;			row45.PRICECURRENCYCODE = copyOfcopyOfsortie_EUR_WSP_0.PRICECURRENCYCODE;			row45.PRICECUSTOMERGROUPCODE = copyOfcopyOfsortie_EUR_WSP_0.PRICECUSTOMERGROUPCODE;			row45.PRODUCTCOLORID = copyOfcopyOfsortie_EUR_WSP_0.PRODUCTCOLORID;			row45.PRODUCTSIZEID = copyOfcopyOfsortie_EUR_WSP_0.PRODUCTSIZEID;			row45.PRODUCTSTYLEID = copyOfcopyOfsortie_EUR_WSP_0.PRODUCTSTYLEID;			row45.QUANTITYUNITSYMBOL = copyOfcopyOfsortie_EUR_WSP_0.QUANTITYUNITSYMBOL;					
		nb_uniques_tUniqRow_21++;
	} else {
	  nb_duplicates_tUniqRow_21++;
	}

 


	tos_count_tUniqRow_21++;

/**
 * [tUniqRow_21 main ] stop
 */
	
	/**
	 * [tUniqRow_21 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_21";

	

 



/**
 * [tUniqRow_21 process_data_begin ] stop
 */
// Start of branch "row45"
if(row45 != null) { 



	
	/**
	 * [tFilterRow_5 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row45");
					}
					

          row46 = null;
    Operator_tFilterRow_5 ope_tFilterRow_5 = new Operator_tFilterRow_5("&&");
            ope_tFilterRow_5.matches((row45.PRICE == null? false : row45.PRICE.compareTo(ParserUtils.parseTo_Double(String.valueOf(0))) > 0)
                           , "PRICE.compareTo(0) > 0 failed");
		 	
    
    if (ope_tFilterRow_5.getMatchFlag()) {
              if(row46 == null){ 
                row46 = new row46Struct();
              }
               row46.TRADEAGREEMENTJOURNALNUMBER = row45.TRADEAGREEMENTJOURNALNUMBER;
               row46.ITEMNUMBER = row45.ITEMNUMBER;
               row46.PRICE = row45.PRICE;
               row46.PRICECURRENCYCODE = row45.PRICECURRENCYCODE;
               row46.PRICECUSTOMERGROUPCODE = row45.PRICECUSTOMERGROUPCODE;
               row46.PRODUCTCOLORID = row45.PRODUCTCOLORID;
               row46.PRODUCTSIZEID = row45.PRODUCTSIZEID;
               row46.PRODUCTSTYLEID = row45.PRODUCTSTYLEID;
               row46.QUANTITYUNITSYMBOL = row45.QUANTITYUNITSYMBOL;    
      nb_line_ok_tFilterRow_5++;
    } else {
      nb_line_reject_tFilterRow_5++;
    }

nb_line_tFilterRow_5++;

 


	tos_count_tFilterRow_5++;

/**
 * [tFilterRow_5 main ] stop
 */
	
	/**
	 * [tFilterRow_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_5";

	

 



/**
 * [tFilterRow_5 process_data_begin ] stop
 */
// Start of branch "row46"
if(row46 != null) { 



	
	/**
	 * [tHashOutput_12 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_12";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row46");
					}
					



    
		row46Struct oneRow_tHashOutput_12 = new row46Struct();
				
					oneRow_tHashOutput_12.TRADEAGREEMENTJOURNALNUMBER = row46.TRADEAGREEMENTJOURNALNUMBER;
					oneRow_tHashOutput_12.ITEMNUMBER = row46.ITEMNUMBER;
					oneRow_tHashOutput_12.PRICE = row46.PRICE;
					oneRow_tHashOutput_12.PRICECURRENCYCODE = row46.PRICECURRENCYCODE;
					oneRow_tHashOutput_12.PRICECUSTOMERGROUPCODE = row46.PRICECUSTOMERGROUPCODE;
					oneRow_tHashOutput_12.PRODUCTCOLORID = row46.PRODUCTCOLORID;
					oneRow_tHashOutput_12.PRODUCTSIZEID = row46.PRODUCTSIZEID;
					oneRow_tHashOutput_12.PRODUCTSTYLEID = row46.PRODUCTSTYLEID;
					oneRow_tHashOutput_12.QUANTITYUNITSYMBOL = row46.QUANTITYUNITSYMBOL;
		
        tHashFile_tHashOutput_12.put(oneRow_tHashOutput_12);
        nb_line_tHashOutput_12 ++;
 


	tos_count_tHashOutput_12++;

/**
 * [tHashOutput_12 main ] stop
 */
	
	/**
	 * [tHashOutput_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_12";

	

 



/**
 * [tHashOutput_12 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_12";

	

 



/**
 * [tHashOutput_12 process_data_end ] stop
 */

} // End of branch "row46"




	
	/**
	 * [tFilterRow_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_5";

	

 



/**
 * [tFilterRow_5 process_data_end ] stop
 */

} // End of branch "row45"




	
	/**
	 * [tUniqRow_21 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_21";

	

 



/**
 * [tUniqRow_21 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfsortie_EUR_WSP_0"




// Start of branch "sortie_full_GBP_RRP"
if(sortie_full_GBP_RRP != null) { 



	
	/**
	 * [tMap_25 main ] start
	 */

	

	
	
	currentComponent="tMap_25";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_full_GBP_RRP");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_25 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_25 = false;
		  boolean mainRowRejected_tMap_25 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_25__Struct Var = Var__tMap_25;// ###############################
        // ###############################
        // # Output tables

copyOfcopyOfcopyOfsortie_EUR_WSP_0 = null;
sortie_full_CHF_WSP = null;


// # Output table : 'copyOfcopyOfcopyOfsortie_EUR_WSP_0'
copyOfcopyOfcopyOfsortie_EUR_WSP_0_tmp.TRADEAGREEMENTJOURNALNUMBER = "HBE1-" + globalMap.get("SalesJournalNumber");
copyOfcopyOfcopyOfsortie_EUR_WSP_0_tmp.ITEMNUMBER = sortie_full_GBP_RRP.STYLE ;
copyOfcopyOfcopyOfsortie_EUR_WSP_0_tmp.PRICE = sortie_full_GBP_RRP.CHF_WSP == null ? 0 : Mathematical.REAL(sortie_full_GBP_RRP.CHF_WSP .replaceAll(",", ".") ) ;
copyOfcopyOfcopyOfsortie_EUR_WSP_0_tmp.PRICECURRENCYCODE = "CHF";
copyOfcopyOfcopyOfsortie_EUR_WSP_0_tmp.PRICECUSTOMERGROUPCODE = "WSP";
copyOfcopyOfcopyOfsortie_EUR_WSP_0_tmp.PRODUCTCOLORID = sortie_full_GBP_RRP.COLOR ;
copyOfcopyOfcopyOfsortie_EUR_WSP_0_tmp.PRODUCTSIZEID = sortie_full_GBP_RRP.SIZE ;
copyOfcopyOfcopyOfsortie_EUR_WSP_0_tmp.PRODUCTSTYLEID = sortie_full_GBP_RRP.LBL ;
copyOfcopyOfcopyOfsortie_EUR_WSP_0_tmp.QUANTITYUNITSYMBOL = "PCS";
copyOfcopyOfcopyOfsortie_EUR_WSP_0 = copyOfcopyOfcopyOfsortie_EUR_WSP_0_tmp;

// # Output table : 'sortie_full_CHF_WSP'
sortie_full_CHF_WSP_tmp.BRAND = sortie_full_GBP_RRP.BRAND ;
sortie_full_CHF_WSP_tmp.SEASON = sortie_full_GBP_RRP.SEASON ;
sortie_full_CHF_WSP_tmp.CATEGORY = sortie_full_GBP_RRP.CATEGORY ;
sortie_full_CHF_WSP_tmp.REF = sortie_full_GBP_RRP.REF ;
sortie_full_CHF_WSP_tmp.DESCRIPTION = sortie_full_GBP_RRP.DESCRIPTION ;
sortie_full_CHF_WSP_tmp.STYLE = sortie_full_GBP_RRP.STYLE ;
sortie_full_CHF_WSP_tmp.COLOR = sortie_full_GBP_RRP.COLOR ;
sortie_full_CHF_WSP_tmp.FASHION = sortie_full_GBP_RRP.FASHION ;
sortie_full_CHF_WSP_tmp.STYLECOLORLABEL = sortie_full_GBP_RRP.STYLECOLORLABEL ;
sortie_full_CHF_WSP_tmp.COLORNAME = sortie_full_GBP_RRP.COLORNAME ;
sortie_full_CHF_WSP_tmp.LBL = sortie_full_GBP_RRP.LBL ;
sortie_full_CHF_WSP_tmp.STYLE_COLOR = sortie_full_GBP_RRP.STYLE_COLOR ;
sortie_full_CHF_WSP_tmp.GENDER = sortie_full_GBP_RRP.GENDER ;
sortie_full_CHF_WSP_tmp.AGE_RANGE = sortie_full_GBP_RRP.AGE_RANGE ;
sortie_full_CHF_WSP_tmp.SIZE_RANGE = sortie_full_GBP_RRP.SIZE_RANGE ;
sortie_full_CHF_WSP_tmp.SIZE = sortie_full_GBP_RRP.SIZE ;
sortie_full_CHF_WSP_tmp.US_SIZE = sortie_full_GBP_RRP.US_SIZE ;
sortie_full_CHF_WSP_tmp.CM_SIZE = sortie_full_GBP_RRP.CM_SIZE ;
sortie_full_CHF_WSP_tmp.PRODUCT = sortie_full_GBP_RRP.PRODUCT ;
sortie_full_CHF_WSP_tmp.PRODUCT_STATUS = sortie_full_GBP_RRP.PRODUCT_STATUS ;
sortie_full_CHF_WSP_tmp.PRODUCT_TIER = sortie_full_GBP_RRP.PRODUCT_TIER ;
sortie_full_CHF_WSP_tmp.ACCT_EXCLUS = sortie_full_GBP_RRP.ACCT_EXCLUS ;
sortie_full_CHF_WSP_tmp.SIZE_RATIO_SPLIT = sortie_full_GBP_RRP.SIZE_RATIO_SPLIT ;
sortie_full_CHF_WSP_tmp.REC_SIZE_SPLIT = sortie_full_GBP_RRP.REC_SIZE_SPLIT ;
sortie_full_CHF_WSP_tmp.CARTON_QTY = sortie_full_GBP_RRP.CARTON_QTY ;
sortie_full_CHF_WSP_tmp.ATTRIBUTE = sortie_full_GBP_RRP.ATTRIBUTE ;
sortie_full_CHF_WSP_tmp.UNITS = sortie_full_GBP_RRP.UNITS ;
sortie_full_CHF_WSP_tmp.EUR_RRP = sortie_full_GBP_RRP.EUR_RRP ;
sortie_full_CHF_WSP_tmp.EUR_WSP = sortie_full_GBP_RRP.EUR_WSP ;
sortie_full_CHF_WSP_tmp.GBP_RRP = sortie_full_GBP_RRP.GBP_RRP ;
sortie_full_CHF_WSP_tmp.GBP_WSP = sortie_full_GBP_RRP.GBP_WSP ;
sortie_full_CHF_WSP_tmp.CHF_RRP = sortie_full_GBP_RRP.CHF_RRP ;
sortie_full_CHF_WSP_tmp.CHF_WSP = sortie_full_GBP_RRP.CHF_WSP ;
sortie_full_CHF_WSP_tmp.NOK_RRP = sortie_full_GBP_RRP.NOK_RRP ;
sortie_full_CHF_WSP_tmp.NOK_WSP = sortie_full_GBP_RRP.NOK_WSP ;
sortie_full_CHF_WSP_tmp.DKK_RRP = sortie_full_GBP_RRP.DKK_RRP ;
sortie_full_CHF_WSP_tmp.DKK_WSP = sortie_full_GBP_RRP.DKK_WSP ;
sortie_full_CHF_WSP_tmp.SEK_RRP = sortie_full_GBP_RRP.SEK_RRP ;
sortie_full_CHF_WSP_tmp.SEK_WSP = sortie_full_GBP_RRP.SEK_WSP ;
sortie_full_CHF_WSP_tmp.EUR_FINN_RRP = sortie_full_GBP_RRP.EUR_FINN_RRP ;
sortie_full_CHF_WSP_tmp.EUR_FINN_WSP = sortie_full_GBP_RRP.EUR_FINN_WSP ;
sortie_full_CHF_WSP_tmp.FABRICATION = sortie_full_GBP_RRP.FABRICATION ;
sortie_full_CHF_WSP_tmp.COO = sortie_full_GBP_RRP.COO ;
sortie_full_CHF_WSP_tmp.CUSTOM_TARIFF_CODE = sortie_full_GBP_RRP.CUSTOM_TARIFF_CODE ;
sortie_full_CHF_WSP_tmp.UPC = sortie_full_GBP_RRP.UPC ;
sortie_full_CHF_WSP_tmp.SMU_TYPE = sortie_full_GBP_RRP.SMU_TYPE ;
sortie_full_CHF_WSP = sortie_full_CHF_WSP_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_25 = false;










 


	tos_count_tMap_25++;

/**
 * [tMap_25 main ] stop
 */
	
	/**
	 * [tMap_25 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_25";

	

 



/**
 * [tMap_25 process_data_begin ] stop
 */
// Start of branch "copyOfcopyOfcopyOfsortie_EUR_WSP_0"
if(copyOfcopyOfcopyOfsortie_EUR_WSP_0 != null) { 



	
	/**
	 * [tUniqRow_22 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_22";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfcopyOfcopyOfsortie_EUR_WSP_0");
					}
					
row47 = null;			
if(copyOfcopyOfcopyOfsortie_EUR_WSP_0.TRADEAGREEMENTJOURNALNUMBER == null){
	finder_tUniqRow_22.TRADEAGREEMENTJOURNALNUMBER = null;
}else{
	finder_tUniqRow_22.TRADEAGREEMENTJOURNALNUMBER = copyOfcopyOfcopyOfsortie_EUR_WSP_0.TRADEAGREEMENTJOURNALNUMBER.toLowerCase();
}
if(copyOfcopyOfcopyOfsortie_EUR_WSP_0.ITEMNUMBER == null){
	finder_tUniqRow_22.ITEMNUMBER = null;
}else{
	finder_tUniqRow_22.ITEMNUMBER = copyOfcopyOfcopyOfsortie_EUR_WSP_0.ITEMNUMBER.toLowerCase();
}
finder_tUniqRow_22.PRICE = copyOfcopyOfcopyOfsortie_EUR_WSP_0.PRICE;
if(copyOfcopyOfcopyOfsortie_EUR_WSP_0.PRICECURRENCYCODE == null){
	finder_tUniqRow_22.PRICECURRENCYCODE = null;
}else{
	finder_tUniqRow_22.PRICECURRENCYCODE = copyOfcopyOfcopyOfsortie_EUR_WSP_0.PRICECURRENCYCODE.toLowerCase();
}
if(copyOfcopyOfcopyOfsortie_EUR_WSP_0.PRICECUSTOMERGROUPCODE == null){
	finder_tUniqRow_22.PRICECUSTOMERGROUPCODE = null;
}else{
	finder_tUniqRow_22.PRICECUSTOMERGROUPCODE = copyOfcopyOfcopyOfsortie_EUR_WSP_0.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(copyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTCOLORID == null){
	finder_tUniqRow_22.PRODUCTCOLORID = null;
}else{
	finder_tUniqRow_22.PRODUCTCOLORID = copyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTCOLORID.toLowerCase();
}
if(copyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTSIZEID == null){
	finder_tUniqRow_22.PRODUCTSIZEID = null;
}else{
	finder_tUniqRow_22.PRODUCTSIZEID = copyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTSIZEID.toLowerCase();
}
if(copyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTSTYLEID == null){
	finder_tUniqRow_22.PRODUCTSTYLEID = null;
}else{
	finder_tUniqRow_22.PRODUCTSTYLEID = copyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTSTYLEID.toLowerCase();
}
if(copyOfcopyOfcopyOfsortie_EUR_WSP_0.QUANTITYUNITSYMBOL == null){
	finder_tUniqRow_22.QUANTITYUNITSYMBOL = null;
}else{
	finder_tUniqRow_22.QUANTITYUNITSYMBOL = copyOfcopyOfcopyOfsortie_EUR_WSP_0.QUANTITYUNITSYMBOL.toLowerCase();
}	
finder_tUniqRow_22.hashCodeDirty = true;
if (!keystUniqRow_22.contains(finder_tUniqRow_22)) {
		KeyStruct_tUniqRow_22 new_tUniqRow_22 = new KeyStruct_tUniqRow_22();

		
if(copyOfcopyOfcopyOfsortie_EUR_WSP_0.TRADEAGREEMENTJOURNALNUMBER == null){
	new_tUniqRow_22.TRADEAGREEMENTJOURNALNUMBER = null;
}else{
	new_tUniqRow_22.TRADEAGREEMENTJOURNALNUMBER = copyOfcopyOfcopyOfsortie_EUR_WSP_0.TRADEAGREEMENTJOURNALNUMBER.toLowerCase();
}
if(copyOfcopyOfcopyOfsortie_EUR_WSP_0.ITEMNUMBER == null){
	new_tUniqRow_22.ITEMNUMBER = null;
}else{
	new_tUniqRow_22.ITEMNUMBER = copyOfcopyOfcopyOfsortie_EUR_WSP_0.ITEMNUMBER.toLowerCase();
}
new_tUniqRow_22.PRICE = copyOfcopyOfcopyOfsortie_EUR_WSP_0.PRICE;
if(copyOfcopyOfcopyOfsortie_EUR_WSP_0.PRICECURRENCYCODE == null){
	new_tUniqRow_22.PRICECURRENCYCODE = null;
}else{
	new_tUniqRow_22.PRICECURRENCYCODE = copyOfcopyOfcopyOfsortie_EUR_WSP_0.PRICECURRENCYCODE.toLowerCase();
}
if(copyOfcopyOfcopyOfsortie_EUR_WSP_0.PRICECUSTOMERGROUPCODE == null){
	new_tUniqRow_22.PRICECUSTOMERGROUPCODE = null;
}else{
	new_tUniqRow_22.PRICECUSTOMERGROUPCODE = copyOfcopyOfcopyOfsortie_EUR_WSP_0.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(copyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTCOLORID == null){
	new_tUniqRow_22.PRODUCTCOLORID = null;
}else{
	new_tUniqRow_22.PRODUCTCOLORID = copyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTCOLORID.toLowerCase();
}
if(copyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTSIZEID == null){
	new_tUniqRow_22.PRODUCTSIZEID = null;
}else{
	new_tUniqRow_22.PRODUCTSIZEID = copyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTSIZEID.toLowerCase();
}
if(copyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTSTYLEID == null){
	new_tUniqRow_22.PRODUCTSTYLEID = null;
}else{
	new_tUniqRow_22.PRODUCTSTYLEID = copyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTSTYLEID.toLowerCase();
}
if(copyOfcopyOfcopyOfsortie_EUR_WSP_0.QUANTITYUNITSYMBOL == null){
	new_tUniqRow_22.QUANTITYUNITSYMBOL = null;
}else{
	new_tUniqRow_22.QUANTITYUNITSYMBOL = copyOfcopyOfcopyOfsortie_EUR_WSP_0.QUANTITYUNITSYMBOL.toLowerCase();
}
		
		keystUniqRow_22.add(new_tUniqRow_22);if(row47 == null){ 
	
	row47 = new row47Struct();
}row47.TRADEAGREEMENTJOURNALNUMBER = copyOfcopyOfcopyOfsortie_EUR_WSP_0.TRADEAGREEMENTJOURNALNUMBER;			row47.ITEMNUMBER = copyOfcopyOfcopyOfsortie_EUR_WSP_0.ITEMNUMBER;			row47.PRICE = copyOfcopyOfcopyOfsortie_EUR_WSP_0.PRICE;			row47.PRICECURRENCYCODE = copyOfcopyOfcopyOfsortie_EUR_WSP_0.PRICECURRENCYCODE;			row47.PRICECUSTOMERGROUPCODE = copyOfcopyOfcopyOfsortie_EUR_WSP_0.PRICECUSTOMERGROUPCODE;			row47.PRODUCTCOLORID = copyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTCOLORID;			row47.PRODUCTSIZEID = copyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTSIZEID;			row47.PRODUCTSTYLEID = copyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTSTYLEID;			row47.QUANTITYUNITSYMBOL = copyOfcopyOfcopyOfsortie_EUR_WSP_0.QUANTITYUNITSYMBOL;					
		nb_uniques_tUniqRow_22++;
	} else {
	  nb_duplicates_tUniqRow_22++;
	}

 


	tos_count_tUniqRow_22++;

/**
 * [tUniqRow_22 main ] stop
 */
	
	/**
	 * [tUniqRow_22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_22";

	

 



/**
 * [tUniqRow_22 process_data_begin ] stop
 */
// Start of branch "row47"
if(row47 != null) { 



	
	/**
	 * [tFilterRow_6 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_6";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row47");
					}
					

          row48 = null;
    Operator_tFilterRow_6 ope_tFilterRow_6 = new Operator_tFilterRow_6("&&");
            ope_tFilterRow_6.matches((row47.PRICE == null? false : row47.PRICE.compareTo(ParserUtils.parseTo_Double(String.valueOf(0))) > 0)
                           , "PRICE.compareTo(0) > 0 failed");
		 	
    
    if (ope_tFilterRow_6.getMatchFlag()) {
              if(row48 == null){ 
                row48 = new row48Struct();
              }
               row48.TRADEAGREEMENTJOURNALNUMBER = row47.TRADEAGREEMENTJOURNALNUMBER;
               row48.ITEMNUMBER = row47.ITEMNUMBER;
               row48.PRICE = row47.PRICE;
               row48.PRICECURRENCYCODE = row47.PRICECURRENCYCODE;
               row48.PRICECUSTOMERGROUPCODE = row47.PRICECUSTOMERGROUPCODE;
               row48.PRODUCTCOLORID = row47.PRODUCTCOLORID;
               row48.PRODUCTSIZEID = row47.PRODUCTSIZEID;
               row48.PRODUCTSTYLEID = row47.PRODUCTSTYLEID;
               row48.QUANTITYUNITSYMBOL = row47.QUANTITYUNITSYMBOL;    
      nb_line_ok_tFilterRow_6++;
    } else {
      nb_line_reject_tFilterRow_6++;
    }

nb_line_tFilterRow_6++;

 


	tos_count_tFilterRow_6++;

/**
 * [tFilterRow_6 main ] stop
 */
	
	/**
	 * [tFilterRow_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_6";

	

 



/**
 * [tFilterRow_6 process_data_begin ] stop
 */
// Start of branch "row48"
if(row48 != null) { 



	
	/**
	 * [tHashOutput_13 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_13";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row48");
					}
					



    
		row48Struct oneRow_tHashOutput_13 = new row48Struct();
				
					oneRow_tHashOutput_13.TRADEAGREEMENTJOURNALNUMBER = row48.TRADEAGREEMENTJOURNALNUMBER;
					oneRow_tHashOutput_13.ITEMNUMBER = row48.ITEMNUMBER;
					oneRow_tHashOutput_13.PRICE = row48.PRICE;
					oneRow_tHashOutput_13.PRICECURRENCYCODE = row48.PRICECURRENCYCODE;
					oneRow_tHashOutput_13.PRICECUSTOMERGROUPCODE = row48.PRICECUSTOMERGROUPCODE;
					oneRow_tHashOutput_13.PRODUCTCOLORID = row48.PRODUCTCOLORID;
					oneRow_tHashOutput_13.PRODUCTSIZEID = row48.PRODUCTSIZEID;
					oneRow_tHashOutput_13.PRODUCTSTYLEID = row48.PRODUCTSTYLEID;
					oneRow_tHashOutput_13.QUANTITYUNITSYMBOL = row48.QUANTITYUNITSYMBOL;
		
        tHashFile_tHashOutput_13.put(oneRow_tHashOutput_13);
        nb_line_tHashOutput_13 ++;
 


	tos_count_tHashOutput_13++;

/**
 * [tHashOutput_13 main ] stop
 */
	
	/**
	 * [tHashOutput_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_13";

	

 



/**
 * [tHashOutput_13 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_13";

	

 



/**
 * [tHashOutput_13 process_data_end ] stop
 */

} // End of branch "row48"




	
	/**
	 * [tFilterRow_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_6";

	

 



/**
 * [tFilterRow_6 process_data_end ] stop
 */

} // End of branch "row47"




	
	/**
	 * [tUniqRow_22 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_22";

	

 



/**
 * [tUniqRow_22 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfcopyOfsortie_EUR_WSP_0"




// Start of branch "sortie_full_CHF_WSP"
if(sortie_full_CHF_WSP != null) { 



	
	/**
	 * [tMap_26 main ] start
	 */

	

	
	
	currentComponent="tMap_26";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_full_CHF_WSP");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_26 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_26 = false;
		  boolean mainRowRejected_tMap_26 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_26__Struct Var = Var__tMap_26;// ###############################
        // ###############################
        // # Output tables

copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0 = null;
sortie_full_chr_rrp = null;


// # Output table : 'copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0'
copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_tmp.TRADEAGREEMENTJOURNALNUMBER = "HBE1-" + globalMap.get("SalesJournalNumber");
copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_tmp.ITEMNUMBER = sortie_full_CHF_WSP.STYLE ;
copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_tmp.PRICE = sortie_full_CHF_WSP.CHF_RRP == null ? 0 : Mathematical.REAL(sortie_full_CHF_WSP.CHF_RRP .replaceAll(",", ".") ) ;
copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_tmp.PRICECURRENCYCODE = "CHF";
copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_tmp.PRICECUSTOMERGROUPCODE = "RRP";
copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_tmp.PRODUCTCOLORID = sortie_full_CHF_WSP.COLOR ;
copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_tmp.PRODUCTSIZEID = sortie_full_CHF_WSP.SIZE ;
copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_tmp.PRODUCTSTYLEID = sortie_full_CHF_WSP.LBL ;
copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_tmp.QUANTITYUNITSYMBOL = "PCS";
copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0 = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_tmp;

// # Output table : 'sortie_full_chr_rrp'
sortie_full_chr_rrp_tmp.BRAND = sortie_full_CHF_WSP.BRAND ;
sortie_full_chr_rrp_tmp.SEASON = sortie_full_CHF_WSP.SEASON ;
sortie_full_chr_rrp_tmp.CATEGORY = sortie_full_CHF_WSP.CATEGORY ;
sortie_full_chr_rrp_tmp.REF = sortie_full_CHF_WSP.REF ;
sortie_full_chr_rrp_tmp.DESCRIPTION = sortie_full_CHF_WSP.DESCRIPTION ;
sortie_full_chr_rrp_tmp.STYLE = sortie_full_CHF_WSP.STYLE ;
sortie_full_chr_rrp_tmp.COLOR = sortie_full_CHF_WSP.COLOR ;
sortie_full_chr_rrp_tmp.FASHION = sortie_full_CHF_WSP.FASHION ;
sortie_full_chr_rrp_tmp.STYLECOLORLABEL = sortie_full_CHF_WSP.STYLECOLORLABEL ;
sortie_full_chr_rrp_tmp.COLORNAME = sortie_full_CHF_WSP.COLORNAME ;
sortie_full_chr_rrp_tmp.LBL = sortie_full_CHF_WSP.LBL ;
sortie_full_chr_rrp_tmp.STYLE_COLOR = sortie_full_CHF_WSP.STYLE_COLOR ;
sortie_full_chr_rrp_tmp.GENDER = sortie_full_CHF_WSP.GENDER ;
sortie_full_chr_rrp_tmp.AGE_RANGE = sortie_full_CHF_WSP.AGE_RANGE ;
sortie_full_chr_rrp_tmp.SIZE_RANGE = sortie_full_CHF_WSP.SIZE_RANGE ;
sortie_full_chr_rrp_tmp.SIZE = sortie_full_CHF_WSP.SIZE ;
sortie_full_chr_rrp_tmp.US_SIZE = sortie_full_CHF_WSP.US_SIZE ;
sortie_full_chr_rrp_tmp.CM_SIZE = sortie_full_CHF_WSP.CM_SIZE ;
sortie_full_chr_rrp_tmp.PRODUCT = sortie_full_CHF_WSP.PRODUCT ;
sortie_full_chr_rrp_tmp.PRODUCT_STATUS = sortie_full_CHF_WSP.PRODUCT_STATUS ;
sortie_full_chr_rrp_tmp.PRODUCT_TIER = sortie_full_CHF_WSP.PRODUCT_TIER ;
sortie_full_chr_rrp_tmp.ACCT_EXCLUS = sortie_full_CHF_WSP.ACCT_EXCLUS ;
sortie_full_chr_rrp_tmp.SIZE_RATIO_SPLIT = sortie_full_CHF_WSP.SIZE_RATIO_SPLIT ;
sortie_full_chr_rrp_tmp.REC_SIZE_SPLIT = sortie_full_CHF_WSP.REC_SIZE_SPLIT ;
sortie_full_chr_rrp_tmp.CARTON_QTY = sortie_full_CHF_WSP.CARTON_QTY ;
sortie_full_chr_rrp_tmp.ATTRIBUTE = sortie_full_CHF_WSP.ATTRIBUTE ;
sortie_full_chr_rrp_tmp.UNITS = sortie_full_CHF_WSP.UNITS ;
sortie_full_chr_rrp_tmp.EUR_RRP = sortie_full_CHF_WSP.EUR_RRP ;
sortie_full_chr_rrp_tmp.EUR_WSP = sortie_full_CHF_WSP.EUR_WSP ;
sortie_full_chr_rrp_tmp.GBP_RRP = sortie_full_CHF_WSP.GBP_RRP ;
sortie_full_chr_rrp_tmp.GBP_WSP = sortie_full_CHF_WSP.GBP_WSP ;
sortie_full_chr_rrp_tmp.CHF_RRP = sortie_full_CHF_WSP.CHF_RRP ;
sortie_full_chr_rrp_tmp.CHF_WSP = sortie_full_CHF_WSP.CHF_WSP ;
sortie_full_chr_rrp_tmp.NOK_RRP = sortie_full_CHF_WSP.NOK_RRP ;
sortie_full_chr_rrp_tmp.NOK_WSP = sortie_full_CHF_WSP.NOK_WSP ;
sortie_full_chr_rrp_tmp.DKK_RRP = sortie_full_CHF_WSP.DKK_RRP ;
sortie_full_chr_rrp_tmp.DKK_WSP = sortie_full_CHF_WSP.DKK_WSP ;
sortie_full_chr_rrp_tmp.SEK_RRP = sortie_full_CHF_WSP.SEK_RRP ;
sortie_full_chr_rrp_tmp.SEK_WSP = sortie_full_CHF_WSP.SEK_WSP ;
sortie_full_chr_rrp_tmp.EUR_FINN_RRP = sortie_full_CHF_WSP.EUR_FINN_RRP ;
sortie_full_chr_rrp_tmp.EUR_FINN_WSP = sortie_full_CHF_WSP.EUR_FINN_WSP ;
sortie_full_chr_rrp_tmp.FABRICATION = sortie_full_CHF_WSP.FABRICATION ;
sortie_full_chr_rrp_tmp.COO = sortie_full_CHF_WSP.COO ;
sortie_full_chr_rrp_tmp.CUSTOM_TARIFF_CODE = sortie_full_CHF_WSP.CUSTOM_TARIFF_CODE ;
sortie_full_chr_rrp_tmp.UPC = sortie_full_CHF_WSP.UPC ;
sortie_full_chr_rrp_tmp.SMU_TYPE = sortie_full_CHF_WSP.SMU_TYPE ;
sortie_full_chr_rrp = sortie_full_chr_rrp_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_26 = false;










 


	tos_count_tMap_26++;

/**
 * [tMap_26 main ] stop
 */
	
	/**
	 * [tMap_26 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_26";

	

 



/**
 * [tMap_26 process_data_begin ] stop
 */
// Start of branch "copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0"
if(copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0 != null) { 



	
	/**
	 * [tUniqRow_23 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_23";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0");
					}
					
row49 = null;			
if(copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.TRADEAGREEMENTJOURNALNUMBER == null){
	finder_tUniqRow_23.TRADEAGREEMENTJOURNALNUMBER = null;
}else{
	finder_tUniqRow_23.TRADEAGREEMENTJOURNALNUMBER = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.TRADEAGREEMENTJOURNALNUMBER.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.ITEMNUMBER == null){
	finder_tUniqRow_23.ITEMNUMBER = null;
}else{
	finder_tUniqRow_23.ITEMNUMBER = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.ITEMNUMBER.toLowerCase();
}
finder_tUniqRow_23.PRICE = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRICE;
if(copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRICECURRENCYCODE == null){
	finder_tUniqRow_23.PRICECURRENCYCODE = null;
}else{
	finder_tUniqRow_23.PRICECURRENCYCODE = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRICECURRENCYCODE.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRICECUSTOMERGROUPCODE == null){
	finder_tUniqRow_23.PRICECUSTOMERGROUPCODE = null;
}else{
	finder_tUniqRow_23.PRICECUSTOMERGROUPCODE = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTCOLORID == null){
	finder_tUniqRow_23.PRODUCTCOLORID = null;
}else{
	finder_tUniqRow_23.PRODUCTCOLORID = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTCOLORID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTSIZEID == null){
	finder_tUniqRow_23.PRODUCTSIZEID = null;
}else{
	finder_tUniqRow_23.PRODUCTSIZEID = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTSIZEID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTSTYLEID == null){
	finder_tUniqRow_23.PRODUCTSTYLEID = null;
}else{
	finder_tUniqRow_23.PRODUCTSTYLEID = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTSTYLEID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.QUANTITYUNITSYMBOL == null){
	finder_tUniqRow_23.QUANTITYUNITSYMBOL = null;
}else{
	finder_tUniqRow_23.QUANTITYUNITSYMBOL = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.QUANTITYUNITSYMBOL.toLowerCase();
}	
finder_tUniqRow_23.hashCodeDirty = true;
if (!keystUniqRow_23.contains(finder_tUniqRow_23)) {
		KeyStruct_tUniqRow_23 new_tUniqRow_23 = new KeyStruct_tUniqRow_23();

		
if(copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.TRADEAGREEMENTJOURNALNUMBER == null){
	new_tUniqRow_23.TRADEAGREEMENTJOURNALNUMBER = null;
}else{
	new_tUniqRow_23.TRADEAGREEMENTJOURNALNUMBER = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.TRADEAGREEMENTJOURNALNUMBER.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.ITEMNUMBER == null){
	new_tUniqRow_23.ITEMNUMBER = null;
}else{
	new_tUniqRow_23.ITEMNUMBER = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.ITEMNUMBER.toLowerCase();
}
new_tUniqRow_23.PRICE = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRICE;
if(copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRICECURRENCYCODE == null){
	new_tUniqRow_23.PRICECURRENCYCODE = null;
}else{
	new_tUniqRow_23.PRICECURRENCYCODE = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRICECURRENCYCODE.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRICECUSTOMERGROUPCODE == null){
	new_tUniqRow_23.PRICECUSTOMERGROUPCODE = null;
}else{
	new_tUniqRow_23.PRICECUSTOMERGROUPCODE = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTCOLORID == null){
	new_tUniqRow_23.PRODUCTCOLORID = null;
}else{
	new_tUniqRow_23.PRODUCTCOLORID = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTCOLORID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTSIZEID == null){
	new_tUniqRow_23.PRODUCTSIZEID = null;
}else{
	new_tUniqRow_23.PRODUCTSIZEID = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTSIZEID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTSTYLEID == null){
	new_tUniqRow_23.PRODUCTSTYLEID = null;
}else{
	new_tUniqRow_23.PRODUCTSTYLEID = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTSTYLEID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.QUANTITYUNITSYMBOL == null){
	new_tUniqRow_23.QUANTITYUNITSYMBOL = null;
}else{
	new_tUniqRow_23.QUANTITYUNITSYMBOL = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.QUANTITYUNITSYMBOL.toLowerCase();
}
		
		keystUniqRow_23.add(new_tUniqRow_23);if(row49 == null){ 
	
	row49 = new row49Struct();
}row49.TRADEAGREEMENTJOURNALNUMBER = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.TRADEAGREEMENTJOURNALNUMBER;			row49.ITEMNUMBER = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.ITEMNUMBER;			row49.PRICE = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRICE;			row49.PRICECURRENCYCODE = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRICECURRENCYCODE;			row49.PRICECUSTOMERGROUPCODE = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRICECUSTOMERGROUPCODE;			row49.PRODUCTCOLORID = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTCOLORID;			row49.PRODUCTSIZEID = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTSIZEID;			row49.PRODUCTSTYLEID = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTSTYLEID;			row49.QUANTITYUNITSYMBOL = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.QUANTITYUNITSYMBOL;					
		nb_uniques_tUniqRow_23++;
	} else {
	  nb_duplicates_tUniqRow_23++;
	}

 


	tos_count_tUniqRow_23++;

/**
 * [tUniqRow_23 main ] stop
 */
	
	/**
	 * [tUniqRow_23 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_23";

	

 



/**
 * [tUniqRow_23 process_data_begin ] stop
 */
// Start of branch "row49"
if(row49 != null) { 



	
	/**
	 * [tFilterRow_7 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_7";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row49");
					}
					

          row50 = null;
    Operator_tFilterRow_7 ope_tFilterRow_7 = new Operator_tFilterRow_7("&&");
            ope_tFilterRow_7.matches((row49.PRICE == null? false : row49.PRICE.compareTo(ParserUtils.parseTo_Double(String.valueOf(0))) > 0)
                           , "PRICE.compareTo(0) > 0 failed");
		 	
    
    if (ope_tFilterRow_7.getMatchFlag()) {
              if(row50 == null){ 
                row50 = new row50Struct();
              }
               row50.TRADEAGREEMENTJOURNALNUMBER = row49.TRADEAGREEMENTJOURNALNUMBER;
               row50.ITEMNUMBER = row49.ITEMNUMBER;
               row50.PRICE = row49.PRICE;
               row50.PRICECURRENCYCODE = row49.PRICECURRENCYCODE;
               row50.PRICECUSTOMERGROUPCODE = row49.PRICECUSTOMERGROUPCODE;
               row50.PRODUCTCOLORID = row49.PRODUCTCOLORID;
               row50.PRODUCTSIZEID = row49.PRODUCTSIZEID;
               row50.PRODUCTSTYLEID = row49.PRODUCTSTYLEID;
               row50.QUANTITYUNITSYMBOL = row49.QUANTITYUNITSYMBOL;    
      nb_line_ok_tFilterRow_7++;
    } else {
      nb_line_reject_tFilterRow_7++;
    }

nb_line_tFilterRow_7++;

 


	tos_count_tFilterRow_7++;

/**
 * [tFilterRow_7 main ] stop
 */
	
	/**
	 * [tFilterRow_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_7";

	

 



/**
 * [tFilterRow_7 process_data_begin ] stop
 */
// Start of branch "row50"
if(row50 != null) { 



	
	/**
	 * [tHashOutput_14 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_14";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row50");
					}
					



    
		row50Struct oneRow_tHashOutput_14 = new row50Struct();
				
					oneRow_tHashOutput_14.TRADEAGREEMENTJOURNALNUMBER = row50.TRADEAGREEMENTJOURNALNUMBER;
					oneRow_tHashOutput_14.ITEMNUMBER = row50.ITEMNUMBER;
					oneRow_tHashOutput_14.PRICE = row50.PRICE;
					oneRow_tHashOutput_14.PRICECURRENCYCODE = row50.PRICECURRENCYCODE;
					oneRow_tHashOutput_14.PRICECUSTOMERGROUPCODE = row50.PRICECUSTOMERGROUPCODE;
					oneRow_tHashOutput_14.PRODUCTCOLORID = row50.PRODUCTCOLORID;
					oneRow_tHashOutput_14.PRODUCTSIZEID = row50.PRODUCTSIZEID;
					oneRow_tHashOutput_14.PRODUCTSTYLEID = row50.PRODUCTSTYLEID;
					oneRow_tHashOutput_14.QUANTITYUNITSYMBOL = row50.QUANTITYUNITSYMBOL;
		
        tHashFile_tHashOutput_14.put(oneRow_tHashOutput_14);
        nb_line_tHashOutput_14 ++;
 


	tos_count_tHashOutput_14++;

/**
 * [tHashOutput_14 main ] stop
 */
	
	/**
	 * [tHashOutput_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_14";

	

 



/**
 * [tHashOutput_14 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_14";

	

 



/**
 * [tHashOutput_14 process_data_end ] stop
 */

} // End of branch "row50"




	
	/**
	 * [tFilterRow_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_7";

	

 



/**
 * [tFilterRow_7 process_data_end ] stop
 */

} // End of branch "row49"




	
	/**
	 * [tUniqRow_23 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_23";

	

 



/**
 * [tUniqRow_23 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0"




// Start of branch "sortie_full_chr_rrp"
if(sortie_full_chr_rrp != null) { 



	
	/**
	 * [tMap_27 main ] start
	 */

	

	
	
	currentComponent="tMap_27";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_full_chr_rrp");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_27 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_27 = false;
		  boolean mainRowRejected_tMap_27 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_27__Struct Var = Var__tMap_27;// ###############################
        // ###############################
        // # Output tables

copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0 = null;
sortie_full_NOK_WSP = null;


// # Output table : 'copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0'
copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_tmp.TRADEAGREEMENTJOURNALNUMBER = "HBE1-" + globalMap.get("SalesJournalNumber");
copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_tmp.ITEMNUMBER = sortie_full_chr_rrp.STYLE ;
copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_tmp.PRICE = sortie_full_chr_rrp.NOK_WSP == null ? 0 : Mathematical.REAL(sortie_full_chr_rrp.NOK_WSP .replaceAll(",", ".") ) ;
copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_tmp.PRICECURRENCYCODE = "NOK";
copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_tmp.PRICECUSTOMERGROUPCODE = "WSP";
copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_tmp.PRODUCTCOLORID = sortie_full_chr_rrp.COLOR ;
copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_tmp.PRODUCTSIZEID = sortie_full_chr_rrp.SIZE ;
copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_tmp.PRODUCTSTYLEID = sortie_full_chr_rrp.LBL ;
copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_tmp.QUANTITYUNITSYMBOL = "PCS";
copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0 = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_tmp;

// # Output table : 'sortie_full_NOK_WSP'
sortie_full_NOK_WSP_tmp.BRAND = sortie_full_chr_rrp.BRAND ;
sortie_full_NOK_WSP_tmp.SEASON = sortie_full_chr_rrp.SEASON ;
sortie_full_NOK_WSP_tmp.CATEGORY = sortie_full_chr_rrp.CATEGORY ;
sortie_full_NOK_WSP_tmp.REF = sortie_full_chr_rrp.REF ;
sortie_full_NOK_WSP_tmp.DESCRIPTION = sortie_full_chr_rrp.DESCRIPTION ;
sortie_full_NOK_WSP_tmp.STYLE = sortie_full_chr_rrp.STYLE ;
sortie_full_NOK_WSP_tmp.COLOR = sortie_full_chr_rrp.COLOR ;
sortie_full_NOK_WSP_tmp.FASHION = sortie_full_chr_rrp.FASHION ;
sortie_full_NOK_WSP_tmp.STYLECOLORLABEL = sortie_full_chr_rrp.STYLECOLORLABEL ;
sortie_full_NOK_WSP_tmp.COLORNAME = sortie_full_chr_rrp.COLORNAME ;
sortie_full_NOK_WSP_tmp.LBL = sortie_full_chr_rrp.LBL ;
sortie_full_NOK_WSP_tmp.STYLE_COLOR = sortie_full_chr_rrp.STYLE_COLOR ;
sortie_full_NOK_WSP_tmp.GENDER = sortie_full_chr_rrp.GENDER ;
sortie_full_NOK_WSP_tmp.AGE_RANGE = sortie_full_chr_rrp.AGE_RANGE ;
sortie_full_NOK_WSP_tmp.SIZE_RANGE = sortie_full_chr_rrp.SIZE_RANGE ;
sortie_full_NOK_WSP_tmp.SIZE = sortie_full_chr_rrp.SIZE ;
sortie_full_NOK_WSP_tmp.US_SIZE = sortie_full_chr_rrp.US_SIZE ;
sortie_full_NOK_WSP_tmp.CM_SIZE = sortie_full_chr_rrp.CM_SIZE ;
sortie_full_NOK_WSP_tmp.PRODUCT = sortie_full_chr_rrp.PRODUCT ;
sortie_full_NOK_WSP_tmp.PRODUCT_STATUS = sortie_full_chr_rrp.PRODUCT_STATUS ;
sortie_full_NOK_WSP_tmp.PRODUCT_TIER = sortie_full_chr_rrp.PRODUCT_TIER ;
sortie_full_NOK_WSP_tmp.ACCT_EXCLUS = sortie_full_chr_rrp.ACCT_EXCLUS ;
sortie_full_NOK_WSP_tmp.SIZE_RATIO_SPLIT = sortie_full_chr_rrp.SIZE_RATIO_SPLIT ;
sortie_full_NOK_WSP_tmp.REC_SIZE_SPLIT = sortie_full_chr_rrp.REC_SIZE_SPLIT ;
sortie_full_NOK_WSP_tmp.CARTON_QTY = sortie_full_chr_rrp.CARTON_QTY ;
sortie_full_NOK_WSP_tmp.ATTRIBUTE = sortie_full_chr_rrp.ATTRIBUTE ;
sortie_full_NOK_WSP_tmp.UNITS = sortie_full_chr_rrp.UNITS ;
sortie_full_NOK_WSP_tmp.EUR_RRP = sortie_full_chr_rrp.EUR_RRP ;
sortie_full_NOK_WSP_tmp.EUR_WSP = sortie_full_chr_rrp.EUR_WSP ;
sortie_full_NOK_WSP_tmp.GBP_RRP = sortie_full_chr_rrp.GBP_RRP ;
sortie_full_NOK_WSP_tmp.GBP_WSP = sortie_full_chr_rrp.GBP_WSP ;
sortie_full_NOK_WSP_tmp.CHF_RRP = sortie_full_chr_rrp.CHF_RRP ;
sortie_full_NOK_WSP_tmp.CHF_WSP = sortie_full_chr_rrp.CHF_WSP ;
sortie_full_NOK_WSP_tmp.NOK_RRP = sortie_full_chr_rrp.NOK_RRP ;
sortie_full_NOK_WSP_tmp.NOK_WSP = sortie_full_chr_rrp.NOK_WSP ;
sortie_full_NOK_WSP_tmp.DKK_RRP = sortie_full_chr_rrp.DKK_RRP ;
sortie_full_NOK_WSP_tmp.DKK_WSP = sortie_full_chr_rrp.DKK_WSP ;
sortie_full_NOK_WSP_tmp.SEK_RRP = sortie_full_chr_rrp.SEK_RRP ;
sortie_full_NOK_WSP_tmp.SEK_WSP = sortie_full_chr_rrp.SEK_WSP ;
sortie_full_NOK_WSP_tmp.EUR_FINN_RRP = sortie_full_chr_rrp.EUR_FINN_RRP ;
sortie_full_NOK_WSP_tmp.EUR_FINN_WSP = sortie_full_chr_rrp.EUR_FINN_WSP ;
sortie_full_NOK_WSP_tmp.FABRICATION = sortie_full_chr_rrp.FABRICATION ;
sortie_full_NOK_WSP_tmp.COO = sortie_full_chr_rrp.COO ;
sortie_full_NOK_WSP_tmp.CUSTOM_TARIFF_CODE = sortie_full_chr_rrp.CUSTOM_TARIFF_CODE ;
sortie_full_NOK_WSP_tmp.UPC = sortie_full_chr_rrp.UPC ;
sortie_full_NOK_WSP_tmp.SMU_TYPE = sortie_full_chr_rrp.SMU_TYPE ;
sortie_full_NOK_WSP = sortie_full_NOK_WSP_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_27 = false;










 


	tos_count_tMap_27++;

/**
 * [tMap_27 main ] stop
 */
	
	/**
	 * [tMap_27 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_27";

	

 



/**
 * [tMap_27 process_data_begin ] stop
 */
// Start of branch "copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0"
if(copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0 != null) { 



	
	/**
	 * [tUniqRow_24 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_24";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0");
					}
					
row55 = null;			
if(copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.TRADEAGREEMENTJOURNALNUMBER == null){
	finder_tUniqRow_24.TRADEAGREEMENTJOURNALNUMBER = null;
}else{
	finder_tUniqRow_24.TRADEAGREEMENTJOURNALNUMBER = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.TRADEAGREEMENTJOURNALNUMBER.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.ITEMNUMBER == null){
	finder_tUniqRow_24.ITEMNUMBER = null;
}else{
	finder_tUniqRow_24.ITEMNUMBER = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.ITEMNUMBER.toLowerCase();
}
finder_tUniqRow_24.PRICE = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRICE;
if(copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRICECURRENCYCODE == null){
	finder_tUniqRow_24.PRICECURRENCYCODE = null;
}else{
	finder_tUniqRow_24.PRICECURRENCYCODE = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRICECURRENCYCODE.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRICECUSTOMERGROUPCODE == null){
	finder_tUniqRow_24.PRICECUSTOMERGROUPCODE = null;
}else{
	finder_tUniqRow_24.PRICECUSTOMERGROUPCODE = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTCOLORID == null){
	finder_tUniqRow_24.PRODUCTCOLORID = null;
}else{
	finder_tUniqRow_24.PRODUCTCOLORID = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTCOLORID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTSIZEID == null){
	finder_tUniqRow_24.PRODUCTSIZEID = null;
}else{
	finder_tUniqRow_24.PRODUCTSIZEID = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTSIZEID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTSTYLEID == null){
	finder_tUniqRow_24.PRODUCTSTYLEID = null;
}else{
	finder_tUniqRow_24.PRODUCTSTYLEID = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTSTYLEID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.QUANTITYUNITSYMBOL == null){
	finder_tUniqRow_24.QUANTITYUNITSYMBOL = null;
}else{
	finder_tUniqRow_24.QUANTITYUNITSYMBOL = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.QUANTITYUNITSYMBOL.toLowerCase();
}	
finder_tUniqRow_24.hashCodeDirty = true;
if (!keystUniqRow_24.contains(finder_tUniqRow_24)) {
		KeyStruct_tUniqRow_24 new_tUniqRow_24 = new KeyStruct_tUniqRow_24();

		
if(copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.TRADEAGREEMENTJOURNALNUMBER == null){
	new_tUniqRow_24.TRADEAGREEMENTJOURNALNUMBER = null;
}else{
	new_tUniqRow_24.TRADEAGREEMENTJOURNALNUMBER = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.TRADEAGREEMENTJOURNALNUMBER.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.ITEMNUMBER == null){
	new_tUniqRow_24.ITEMNUMBER = null;
}else{
	new_tUniqRow_24.ITEMNUMBER = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.ITEMNUMBER.toLowerCase();
}
new_tUniqRow_24.PRICE = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRICE;
if(copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRICECURRENCYCODE == null){
	new_tUniqRow_24.PRICECURRENCYCODE = null;
}else{
	new_tUniqRow_24.PRICECURRENCYCODE = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRICECURRENCYCODE.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRICECUSTOMERGROUPCODE == null){
	new_tUniqRow_24.PRICECUSTOMERGROUPCODE = null;
}else{
	new_tUniqRow_24.PRICECUSTOMERGROUPCODE = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTCOLORID == null){
	new_tUniqRow_24.PRODUCTCOLORID = null;
}else{
	new_tUniqRow_24.PRODUCTCOLORID = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTCOLORID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTSIZEID == null){
	new_tUniqRow_24.PRODUCTSIZEID = null;
}else{
	new_tUniqRow_24.PRODUCTSIZEID = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTSIZEID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTSTYLEID == null){
	new_tUniqRow_24.PRODUCTSTYLEID = null;
}else{
	new_tUniqRow_24.PRODUCTSTYLEID = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTSTYLEID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.QUANTITYUNITSYMBOL == null){
	new_tUniqRow_24.QUANTITYUNITSYMBOL = null;
}else{
	new_tUniqRow_24.QUANTITYUNITSYMBOL = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.QUANTITYUNITSYMBOL.toLowerCase();
}
		
		keystUniqRow_24.add(new_tUniqRow_24);if(row55 == null){ 
	
	row55 = new row55Struct();
}row55.TRADEAGREEMENTJOURNALNUMBER = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.TRADEAGREEMENTJOURNALNUMBER;			row55.ITEMNUMBER = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.ITEMNUMBER;			row55.PRICE = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRICE;			row55.PRICECURRENCYCODE = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRICECURRENCYCODE;			row55.PRICECUSTOMERGROUPCODE = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRICECUSTOMERGROUPCODE;			row55.PRODUCTCOLORID = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTCOLORID;			row55.PRODUCTSIZEID = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTSIZEID;			row55.PRODUCTSTYLEID = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTSTYLEID;			row55.QUANTITYUNITSYMBOL = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.QUANTITYUNITSYMBOL;					
		nb_uniques_tUniqRow_24++;
	} else {
	  nb_duplicates_tUniqRow_24++;
	}

 


	tos_count_tUniqRow_24++;

/**
 * [tUniqRow_24 main ] stop
 */
	
	/**
	 * [tUniqRow_24 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_24";

	

 



/**
 * [tUniqRow_24 process_data_begin ] stop
 */
// Start of branch "row55"
if(row55 != null) { 



	
	/**
	 * [tFilterRow_8 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_8";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row55");
					}
					

          row56 = null;
    Operator_tFilterRow_8 ope_tFilterRow_8 = new Operator_tFilterRow_8("&&");
            ope_tFilterRow_8.matches((row55.PRICE == null? false : row55.PRICE.compareTo(ParserUtils.parseTo_Double(String.valueOf(0))) > 0)
                           , "PRICE.compareTo(0) > 0 failed");
		 	
    
    if (ope_tFilterRow_8.getMatchFlag()) {
              if(row56 == null){ 
                row56 = new row56Struct();
              }
               row56.TRADEAGREEMENTJOURNALNUMBER = row55.TRADEAGREEMENTJOURNALNUMBER;
               row56.ITEMNUMBER = row55.ITEMNUMBER;
               row56.PRICE = row55.PRICE;
               row56.PRICECURRENCYCODE = row55.PRICECURRENCYCODE;
               row56.PRICECUSTOMERGROUPCODE = row55.PRICECUSTOMERGROUPCODE;
               row56.PRODUCTCOLORID = row55.PRODUCTCOLORID;
               row56.PRODUCTSIZEID = row55.PRODUCTSIZEID;
               row56.PRODUCTSTYLEID = row55.PRODUCTSTYLEID;
               row56.QUANTITYUNITSYMBOL = row55.QUANTITYUNITSYMBOL;    
      nb_line_ok_tFilterRow_8++;
    } else {
      nb_line_reject_tFilterRow_8++;
    }

nb_line_tFilterRow_8++;

 


	tos_count_tFilterRow_8++;

/**
 * [tFilterRow_8 main ] stop
 */
	
	/**
	 * [tFilterRow_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_8";

	

 



/**
 * [tFilterRow_8 process_data_begin ] stop
 */
// Start of branch "row56"
if(row56 != null) { 



	
	/**
	 * [tHashOutput_15 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_15";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row56");
					}
					



    
		row56Struct oneRow_tHashOutput_15 = new row56Struct();
				
					oneRow_tHashOutput_15.TRADEAGREEMENTJOURNALNUMBER = row56.TRADEAGREEMENTJOURNALNUMBER;
					oneRow_tHashOutput_15.ITEMNUMBER = row56.ITEMNUMBER;
					oneRow_tHashOutput_15.PRICE = row56.PRICE;
					oneRow_tHashOutput_15.PRICECURRENCYCODE = row56.PRICECURRENCYCODE;
					oneRow_tHashOutput_15.PRICECUSTOMERGROUPCODE = row56.PRICECUSTOMERGROUPCODE;
					oneRow_tHashOutput_15.PRODUCTCOLORID = row56.PRODUCTCOLORID;
					oneRow_tHashOutput_15.PRODUCTSIZEID = row56.PRODUCTSIZEID;
					oneRow_tHashOutput_15.PRODUCTSTYLEID = row56.PRODUCTSTYLEID;
					oneRow_tHashOutput_15.QUANTITYUNITSYMBOL = row56.QUANTITYUNITSYMBOL;
		
        tHashFile_tHashOutput_15.put(oneRow_tHashOutput_15);
        nb_line_tHashOutput_15 ++;
 


	tos_count_tHashOutput_15++;

/**
 * [tHashOutput_15 main ] stop
 */
	
	/**
	 * [tHashOutput_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_15";

	

 



/**
 * [tHashOutput_15 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_15";

	

 



/**
 * [tHashOutput_15 process_data_end ] stop
 */

} // End of branch "row56"




	
	/**
	 * [tFilterRow_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_8";

	

 



/**
 * [tFilterRow_8 process_data_end ] stop
 */

} // End of branch "row55"




	
	/**
	 * [tUniqRow_24 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_24";

	

 



/**
 * [tUniqRow_24 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0"




// Start of branch "sortie_full_NOK_WSP"
if(sortie_full_NOK_WSP != null) { 



	
	/**
	 * [tMap_28 main ] start
	 */

	

	
	
	currentComponent="tMap_28";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_full_NOK_WSP");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_28 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_28 = false;
		  boolean mainRowRejected_tMap_28 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_28__Struct Var = Var__tMap_28;// ###############################
        // ###############################
        // # Output tables

copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0 = null;
sortie_full_nok_rrp = null;


// # Output table : 'copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0'
copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_tmp.TRADEAGREEMENTJOURNALNUMBER = "HBE1-" + globalMap.get("SalesJournalNumber");
copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_tmp.ITEMNUMBER = sortie_full_NOK_WSP.STYLE ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_tmp.PRICE = sortie_full_NOK_WSP.NOK_RRP == null ? 0 : Mathematical.REAL(sortie_full_NOK_WSP.NOK_RRP .replaceAll(",", ".") ) ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_tmp.PRICECURRENCYCODE = "NOK";
copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_tmp.PRICECUSTOMERGROUPCODE = "RRP";
copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_tmp.PRODUCTCOLORID = sortie_full_NOK_WSP.COLOR ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_tmp.PRODUCTSIZEID = sortie_full_NOK_WSP.SIZE ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_tmp.PRODUCTSTYLEID = sortie_full_CHF_WSP.LBL ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_tmp.QUANTITYUNITSYMBOL = "PCS";
copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0 = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_tmp;

// # Output table : 'sortie_full_nok_rrp'
sortie_full_nok_rrp_tmp.BRAND = sortie_full_NOK_WSP.BRAND ;
sortie_full_nok_rrp_tmp.SEASON = sortie_full_NOK_WSP.SEASON ;
sortie_full_nok_rrp_tmp.CATEGORY = sortie_full_NOK_WSP.CATEGORY ;
sortie_full_nok_rrp_tmp.REF = sortie_full_NOK_WSP.REF ;
sortie_full_nok_rrp_tmp.DESCRIPTION = sortie_full_NOK_WSP.DESCRIPTION ;
sortie_full_nok_rrp_tmp.STYLE = sortie_full_NOK_WSP.STYLE ;
sortie_full_nok_rrp_tmp.COLOR = sortie_full_NOK_WSP.COLOR ;
sortie_full_nok_rrp_tmp.FASHION = sortie_full_NOK_WSP.FASHION ;
sortie_full_nok_rrp_tmp.STYLECOLORLABEL = sortie_full_NOK_WSP.STYLECOLORLABEL ;
sortie_full_nok_rrp_tmp.COLORNAME = sortie_full_NOK_WSP.COLORNAME ;
sortie_full_nok_rrp_tmp.LBL = sortie_full_NOK_WSP.LBL ;
sortie_full_nok_rrp_tmp.STYLE_COLOR = sortie_full_NOK_WSP.STYLE_COLOR ;
sortie_full_nok_rrp_tmp.GENDER = sortie_full_NOK_WSP.GENDER ;
sortie_full_nok_rrp_tmp.AGE_RANGE = sortie_full_NOK_WSP.AGE_RANGE ;
sortie_full_nok_rrp_tmp.SIZE_RANGE = sortie_full_NOK_WSP.SIZE_RANGE ;
sortie_full_nok_rrp_tmp.SIZE = sortie_full_NOK_WSP.SIZE ;
sortie_full_nok_rrp_tmp.US_SIZE = sortie_full_NOK_WSP.US_SIZE ;
sortie_full_nok_rrp_tmp.CM_SIZE = sortie_full_NOK_WSP.CM_SIZE ;
sortie_full_nok_rrp_tmp.PRODUCT = sortie_full_NOK_WSP.PRODUCT ;
sortie_full_nok_rrp_tmp.PRODUCT_STATUS = sortie_full_NOK_WSP.PRODUCT_STATUS ;
sortie_full_nok_rrp_tmp.PRODUCT_TIER = sortie_full_NOK_WSP.PRODUCT_TIER ;
sortie_full_nok_rrp_tmp.ACCT_EXCLUS = sortie_full_NOK_WSP.ACCT_EXCLUS ;
sortie_full_nok_rrp_tmp.SIZE_RATIO_SPLIT = sortie_full_NOK_WSP.SIZE_RATIO_SPLIT ;
sortie_full_nok_rrp_tmp.REC_SIZE_SPLIT = sortie_full_NOK_WSP.REC_SIZE_SPLIT ;
sortie_full_nok_rrp_tmp.CARTON_QTY = sortie_full_NOK_WSP.CARTON_QTY ;
sortie_full_nok_rrp_tmp.ATTRIBUTE = sortie_full_NOK_WSP.ATTRIBUTE ;
sortie_full_nok_rrp_tmp.UNITS = sortie_full_NOK_WSP.UNITS ;
sortie_full_nok_rrp_tmp.EUR_RRP = sortie_full_NOK_WSP.EUR_RRP ;
sortie_full_nok_rrp_tmp.EUR_WSP = sortie_full_NOK_WSP.EUR_WSP ;
sortie_full_nok_rrp_tmp.GBP_RRP = sortie_full_NOK_WSP.GBP_RRP ;
sortie_full_nok_rrp_tmp.GBP_WSP = sortie_full_NOK_WSP.GBP_WSP ;
sortie_full_nok_rrp_tmp.CHF_RRP = sortie_full_NOK_WSP.CHF_RRP ;
sortie_full_nok_rrp_tmp.CHF_WSP = sortie_full_NOK_WSP.CHF_WSP ;
sortie_full_nok_rrp_tmp.NOK_RRP = sortie_full_NOK_WSP.NOK_RRP ;
sortie_full_nok_rrp_tmp.NOK_WSP = sortie_full_NOK_WSP.NOK_WSP ;
sortie_full_nok_rrp_tmp.DKK_RRP = sortie_full_NOK_WSP.DKK_RRP ;
sortie_full_nok_rrp_tmp.DKK_WSP = sortie_full_NOK_WSP.DKK_WSP ;
sortie_full_nok_rrp_tmp.SEK_RRP = sortie_full_NOK_WSP.SEK_RRP ;
sortie_full_nok_rrp_tmp.SEK_WSP = sortie_full_NOK_WSP.SEK_WSP ;
sortie_full_nok_rrp_tmp.EUR_FINN_RRP = sortie_full_NOK_WSP.EUR_FINN_RRP ;
sortie_full_nok_rrp_tmp.EUR_FINN_WSP = sortie_full_NOK_WSP.EUR_FINN_WSP ;
sortie_full_nok_rrp_tmp.FABRICATION = sortie_full_NOK_WSP.FABRICATION ;
sortie_full_nok_rrp_tmp.COO = sortie_full_NOK_WSP.COO ;
sortie_full_nok_rrp_tmp.CUSTOM_TARIFF_CODE = sortie_full_NOK_WSP.CUSTOM_TARIFF_CODE ;
sortie_full_nok_rrp_tmp.UPC = sortie_full_NOK_WSP.UPC ;
sortie_full_nok_rrp_tmp.SMU_TYPE = sortie_full_NOK_WSP.SMU_TYPE ;
sortie_full_nok_rrp = sortie_full_nok_rrp_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_28 = false;










 


	tos_count_tMap_28++;

/**
 * [tMap_28 main ] stop
 */
	
	/**
	 * [tMap_28 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_28";

	

 



/**
 * [tMap_28 process_data_begin ] stop
 */
// Start of branch "copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0"
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0 != null) { 



	
	/**
	 * [tUniqRow_25 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_25";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0");
					}
					
row57 = null;			
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.TRADEAGREEMENTJOURNALNUMBER == null){
	finder_tUniqRow_25.TRADEAGREEMENTJOURNALNUMBER = null;
}else{
	finder_tUniqRow_25.TRADEAGREEMENTJOURNALNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.TRADEAGREEMENTJOURNALNUMBER.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.ITEMNUMBER == null){
	finder_tUniqRow_25.ITEMNUMBER = null;
}else{
	finder_tUniqRow_25.ITEMNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.ITEMNUMBER.toLowerCase();
}
finder_tUniqRow_25.PRICE = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRICE;
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRICECURRENCYCODE == null){
	finder_tUniqRow_25.PRICECURRENCYCODE = null;
}else{
	finder_tUniqRow_25.PRICECURRENCYCODE = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRICECURRENCYCODE.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRICECUSTOMERGROUPCODE == null){
	finder_tUniqRow_25.PRICECUSTOMERGROUPCODE = null;
}else{
	finder_tUniqRow_25.PRICECUSTOMERGROUPCODE = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTCOLORID == null){
	finder_tUniqRow_25.PRODUCTCOLORID = null;
}else{
	finder_tUniqRow_25.PRODUCTCOLORID = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTCOLORID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTSIZEID == null){
	finder_tUniqRow_25.PRODUCTSIZEID = null;
}else{
	finder_tUniqRow_25.PRODUCTSIZEID = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTSIZEID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTSTYLEID == null){
	finder_tUniqRow_25.PRODUCTSTYLEID = null;
}else{
	finder_tUniqRow_25.PRODUCTSTYLEID = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTSTYLEID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.QUANTITYUNITSYMBOL == null){
	finder_tUniqRow_25.QUANTITYUNITSYMBOL = null;
}else{
	finder_tUniqRow_25.QUANTITYUNITSYMBOL = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.QUANTITYUNITSYMBOL.toLowerCase();
}	
finder_tUniqRow_25.hashCodeDirty = true;
if (!keystUniqRow_25.contains(finder_tUniqRow_25)) {
		KeyStruct_tUniqRow_25 new_tUniqRow_25 = new KeyStruct_tUniqRow_25();

		
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.TRADEAGREEMENTJOURNALNUMBER == null){
	new_tUniqRow_25.TRADEAGREEMENTJOURNALNUMBER = null;
}else{
	new_tUniqRow_25.TRADEAGREEMENTJOURNALNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.TRADEAGREEMENTJOURNALNUMBER.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.ITEMNUMBER == null){
	new_tUniqRow_25.ITEMNUMBER = null;
}else{
	new_tUniqRow_25.ITEMNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.ITEMNUMBER.toLowerCase();
}
new_tUniqRow_25.PRICE = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRICE;
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRICECURRENCYCODE == null){
	new_tUniqRow_25.PRICECURRENCYCODE = null;
}else{
	new_tUniqRow_25.PRICECURRENCYCODE = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRICECURRENCYCODE.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRICECUSTOMERGROUPCODE == null){
	new_tUniqRow_25.PRICECUSTOMERGROUPCODE = null;
}else{
	new_tUniqRow_25.PRICECUSTOMERGROUPCODE = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTCOLORID == null){
	new_tUniqRow_25.PRODUCTCOLORID = null;
}else{
	new_tUniqRow_25.PRODUCTCOLORID = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTCOLORID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTSIZEID == null){
	new_tUniqRow_25.PRODUCTSIZEID = null;
}else{
	new_tUniqRow_25.PRODUCTSIZEID = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTSIZEID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTSTYLEID == null){
	new_tUniqRow_25.PRODUCTSTYLEID = null;
}else{
	new_tUniqRow_25.PRODUCTSTYLEID = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTSTYLEID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.QUANTITYUNITSYMBOL == null){
	new_tUniqRow_25.QUANTITYUNITSYMBOL = null;
}else{
	new_tUniqRow_25.QUANTITYUNITSYMBOL = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.QUANTITYUNITSYMBOL.toLowerCase();
}
		
		keystUniqRow_25.add(new_tUniqRow_25);if(row57 == null){ 
	
	row57 = new row57Struct();
}row57.TRADEAGREEMENTJOURNALNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.TRADEAGREEMENTJOURNALNUMBER;			row57.ITEMNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.ITEMNUMBER;			row57.PRICE = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRICE;			row57.PRICECURRENCYCODE = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRICECURRENCYCODE;			row57.PRICECUSTOMERGROUPCODE = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRICECUSTOMERGROUPCODE;			row57.PRODUCTCOLORID = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTCOLORID;			row57.PRODUCTSIZEID = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTSIZEID;			row57.PRODUCTSTYLEID = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTSTYLEID;			row57.QUANTITYUNITSYMBOL = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.QUANTITYUNITSYMBOL;					
		nb_uniques_tUniqRow_25++;
	} else {
	  nb_duplicates_tUniqRow_25++;
	}

 


	tos_count_tUniqRow_25++;

/**
 * [tUniqRow_25 main ] stop
 */
	
	/**
	 * [tUniqRow_25 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_25";

	

 



/**
 * [tUniqRow_25 process_data_begin ] stop
 */
// Start of branch "row57"
if(row57 != null) { 



	
	/**
	 * [tFilterRow_9 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_9";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row57");
					}
					

          row58 = null;
    Operator_tFilterRow_9 ope_tFilterRow_9 = new Operator_tFilterRow_9("&&");
            ope_tFilterRow_9.matches((row57.PRICE == null? false : row57.PRICE.compareTo(ParserUtils.parseTo_Double(String.valueOf(0))) > 0)
                           , "PRICE.compareTo(0) > 0 failed");
		 	
    
    if (ope_tFilterRow_9.getMatchFlag()) {
              if(row58 == null){ 
                row58 = new row58Struct();
              }
               row58.TRADEAGREEMENTJOURNALNUMBER = row57.TRADEAGREEMENTJOURNALNUMBER;
               row58.ITEMNUMBER = row57.ITEMNUMBER;
               row58.PRICE = row57.PRICE;
               row58.PRICECURRENCYCODE = row57.PRICECURRENCYCODE;
               row58.PRICECUSTOMERGROUPCODE = row57.PRICECUSTOMERGROUPCODE;
               row58.PRODUCTCOLORID = row57.PRODUCTCOLORID;
               row58.PRODUCTSIZEID = row57.PRODUCTSIZEID;
               row58.PRODUCTSTYLEID = row57.PRODUCTSTYLEID;
               row58.QUANTITYUNITSYMBOL = row57.QUANTITYUNITSYMBOL;    
      nb_line_ok_tFilterRow_9++;
    } else {
      nb_line_reject_tFilterRow_9++;
    }

nb_line_tFilterRow_9++;

 


	tos_count_tFilterRow_9++;

/**
 * [tFilterRow_9 main ] stop
 */
	
	/**
	 * [tFilterRow_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_9";

	

 



/**
 * [tFilterRow_9 process_data_begin ] stop
 */
// Start of branch "row58"
if(row58 != null) { 



	
	/**
	 * [tHashOutput_16 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_16";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row58");
					}
					



    
		row58Struct oneRow_tHashOutput_16 = new row58Struct();
				
					oneRow_tHashOutput_16.TRADEAGREEMENTJOURNALNUMBER = row58.TRADEAGREEMENTJOURNALNUMBER;
					oneRow_tHashOutput_16.ITEMNUMBER = row58.ITEMNUMBER;
					oneRow_tHashOutput_16.PRICE = row58.PRICE;
					oneRow_tHashOutput_16.PRICECURRENCYCODE = row58.PRICECURRENCYCODE;
					oneRow_tHashOutput_16.PRICECUSTOMERGROUPCODE = row58.PRICECUSTOMERGROUPCODE;
					oneRow_tHashOutput_16.PRODUCTCOLORID = row58.PRODUCTCOLORID;
					oneRow_tHashOutput_16.PRODUCTSIZEID = row58.PRODUCTSIZEID;
					oneRow_tHashOutput_16.PRODUCTSTYLEID = row58.PRODUCTSTYLEID;
					oneRow_tHashOutput_16.QUANTITYUNITSYMBOL = row58.QUANTITYUNITSYMBOL;
		
        tHashFile_tHashOutput_16.put(oneRow_tHashOutput_16);
        nb_line_tHashOutput_16 ++;
 


	tos_count_tHashOutput_16++;

/**
 * [tHashOutput_16 main ] stop
 */
	
	/**
	 * [tHashOutput_16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_16";

	

 



/**
 * [tHashOutput_16 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_16 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_16";

	

 



/**
 * [tHashOutput_16 process_data_end ] stop
 */

} // End of branch "row58"




	
	/**
	 * [tFilterRow_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_9";

	

 



/**
 * [tFilterRow_9 process_data_end ] stop
 */

} // End of branch "row57"




	
	/**
	 * [tUniqRow_25 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_25";

	

 



/**
 * [tUniqRow_25 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0"




// Start of branch "sortie_full_nok_rrp"
if(sortie_full_nok_rrp != null) { 



	
	/**
	 * [tMap_29 main ] start
	 */

	

	
	
	currentComponent="tMap_29";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_full_nok_rrp");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_29 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_29 = false;
		  boolean mainRowRejected_tMap_29 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_29__Struct Var = Var__tMap_29;// ###############################
        // ###############################
        // # Output tables

copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0 = null;
sortie_full_DKK_RRP = null;


// # Output table : 'copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0'
copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_tmp.TRADEAGREEMENTJOURNALNUMBER = "HBE1-" + globalMap.get("SalesJournalNumber");
copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_tmp.ITEMNUMBER = sortie_full_nok_rrp.STYLE ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_tmp.PRICE = sortie_full_nok_rrp.DKK_WSP == null ? 0 : Mathematical.REAL(sortie_full_nok_rrp.DKK_WSP .replaceAll(",", ".") ) ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_tmp.PRICECURRENCYCODE = "DKK";
copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_tmp.PRICECUSTOMERGROUPCODE = "WSP";
copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_tmp.PRODUCTCOLORID = sortie_full_nok_rrp.COLOR ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_tmp.PRODUCTSIZEID = sortie_full_nok_rrp.SIZE ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_tmp.PRODUCTSTYLEID = sortie_full_chr_rrp.LBL ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_tmp.QUANTITYUNITSYMBOL = "PCS";
copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0 = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_tmp;

// # Output table : 'sortie_full_DKK_RRP'
sortie_full_DKK_RRP_tmp.BRAND = sortie_full_nok_rrp.BRAND ;
sortie_full_DKK_RRP_tmp.SEASON = sortie_full_nok_rrp.SEASON ;
sortie_full_DKK_RRP_tmp.CATEGORY = sortie_full_nok_rrp.CATEGORY ;
sortie_full_DKK_RRP_tmp.REF = sortie_full_nok_rrp.REF ;
sortie_full_DKK_RRP_tmp.DESCRIPTION = sortie_full_nok_rrp.DESCRIPTION ;
sortie_full_DKK_RRP_tmp.STYLE = sortie_full_nok_rrp.STYLE ;
sortie_full_DKK_RRP_tmp.COLOR = sortie_full_nok_rrp.COLOR ;
sortie_full_DKK_RRP_tmp.FASHION = sortie_full_nok_rrp.FASHION ;
sortie_full_DKK_RRP_tmp.STYLECOLORLABEL = sortie_full_nok_rrp.STYLECOLORLABEL ;
sortie_full_DKK_RRP_tmp.COLORNAME = sortie_full_nok_rrp.COLORNAME ;
sortie_full_DKK_RRP_tmp.LBL = sortie_full_nok_rrp.LBL ;
sortie_full_DKK_RRP_tmp.STYLE_COLOR = sortie_full_nok_rrp.STYLE_COLOR ;
sortie_full_DKK_RRP_tmp.GENDER = sortie_full_nok_rrp.GENDER ;
sortie_full_DKK_RRP_tmp.AGE_RANGE = sortie_full_nok_rrp.AGE_RANGE ;
sortie_full_DKK_RRP_tmp.SIZE_RANGE = sortie_full_nok_rrp.SIZE_RANGE ;
sortie_full_DKK_RRP_tmp.SIZE = sortie_full_nok_rrp.SIZE ;
sortie_full_DKK_RRP_tmp.US_SIZE = sortie_full_nok_rrp.US_SIZE ;
sortie_full_DKK_RRP_tmp.CM_SIZE = sortie_full_nok_rrp.CM_SIZE ;
sortie_full_DKK_RRP_tmp.PRODUCT = sortie_full_nok_rrp.PRODUCT ;
sortie_full_DKK_RRP_tmp.PRODUCT_STATUS = sortie_full_nok_rrp.PRODUCT_STATUS ;
sortie_full_DKK_RRP_tmp.PRODUCT_TIER = sortie_full_nok_rrp.PRODUCT_TIER ;
sortie_full_DKK_RRP_tmp.ACCT_EXCLUS = sortie_full_nok_rrp.ACCT_EXCLUS ;
sortie_full_DKK_RRP_tmp.SIZE_RATIO_SPLIT = sortie_full_nok_rrp.SIZE_RATIO_SPLIT ;
sortie_full_DKK_RRP_tmp.REC_SIZE_SPLIT = sortie_full_nok_rrp.REC_SIZE_SPLIT ;
sortie_full_DKK_RRP_tmp.CARTON_QTY = sortie_full_nok_rrp.CARTON_QTY ;
sortie_full_DKK_RRP_tmp.ATTRIBUTE = sortie_full_nok_rrp.ATTRIBUTE ;
sortie_full_DKK_RRP_tmp.UNITS = sortie_full_nok_rrp.UNITS ;
sortie_full_DKK_RRP_tmp.EUR_RRP = sortie_full_nok_rrp.EUR_RRP ;
sortie_full_DKK_RRP_tmp.EUR_WSP = sortie_full_nok_rrp.EUR_WSP ;
sortie_full_DKK_RRP_tmp.GBP_RRP = sortie_full_nok_rrp.GBP_RRP ;
sortie_full_DKK_RRP_tmp.GBP_WSP = sortie_full_nok_rrp.GBP_WSP ;
sortie_full_DKK_RRP_tmp.CHF_RRP = sortie_full_nok_rrp.CHF_RRP ;
sortie_full_DKK_RRP_tmp.CHF_WSP = sortie_full_nok_rrp.CHF_WSP ;
sortie_full_DKK_RRP_tmp.NOK_RRP = sortie_full_nok_rrp.NOK_RRP ;
sortie_full_DKK_RRP_tmp.NOK_WSP = sortie_full_nok_rrp.NOK_WSP ;
sortie_full_DKK_RRP_tmp.DKK_RRP = sortie_full_nok_rrp.DKK_RRP ;
sortie_full_DKK_RRP_tmp.DKK_WSP = sortie_full_nok_rrp.DKK_WSP ;
sortie_full_DKK_RRP_tmp.SEK_RRP = sortie_full_nok_rrp.SEK_RRP ;
sortie_full_DKK_RRP_tmp.SEK_WSP = sortie_full_nok_rrp.SEK_WSP ;
sortie_full_DKK_RRP_tmp.EUR_FINN_RRP = sortie_full_nok_rrp.EUR_FINN_RRP ;
sortie_full_DKK_RRP_tmp.EUR_FINN_WSP = sortie_full_nok_rrp.EUR_FINN_WSP ;
sortie_full_DKK_RRP_tmp.FABRICATION = sortie_full_nok_rrp.FABRICATION ;
sortie_full_DKK_RRP_tmp.COO = sortie_full_nok_rrp.COO ;
sortie_full_DKK_RRP_tmp.CUSTOM_TARIFF_CODE = sortie_full_nok_rrp.CUSTOM_TARIFF_CODE ;
sortie_full_DKK_RRP_tmp.UPC = sortie_full_nok_rrp.UPC ;
sortie_full_DKK_RRP_tmp.SMU_TYPE = sortie_full_nok_rrp.SMU_TYPE ;
sortie_full_DKK_RRP = sortie_full_DKK_RRP_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_29 = false;










 


	tos_count_tMap_29++;

/**
 * [tMap_29 main ] stop
 */
	
	/**
	 * [tMap_29 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_29";

	

 



/**
 * [tMap_29 process_data_begin ] stop
 */
// Start of branch "copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0"
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0 != null) { 



	
	/**
	 * [tUniqRow_26 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_26";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0");
					}
					
row61 = null;			
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.TRADEAGREEMENTJOURNALNUMBER == null){
	finder_tUniqRow_26.TRADEAGREEMENTJOURNALNUMBER = null;
}else{
	finder_tUniqRow_26.TRADEAGREEMENTJOURNALNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.TRADEAGREEMENTJOURNALNUMBER.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.ITEMNUMBER == null){
	finder_tUniqRow_26.ITEMNUMBER = null;
}else{
	finder_tUniqRow_26.ITEMNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.ITEMNUMBER.toLowerCase();
}
finder_tUniqRow_26.PRICE = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRICE;
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRICECURRENCYCODE == null){
	finder_tUniqRow_26.PRICECURRENCYCODE = null;
}else{
	finder_tUniqRow_26.PRICECURRENCYCODE = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRICECURRENCYCODE.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRICECUSTOMERGROUPCODE == null){
	finder_tUniqRow_26.PRICECUSTOMERGROUPCODE = null;
}else{
	finder_tUniqRow_26.PRICECUSTOMERGROUPCODE = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTCOLORID == null){
	finder_tUniqRow_26.PRODUCTCOLORID = null;
}else{
	finder_tUniqRow_26.PRODUCTCOLORID = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTCOLORID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTSIZEID == null){
	finder_tUniqRow_26.PRODUCTSIZEID = null;
}else{
	finder_tUniqRow_26.PRODUCTSIZEID = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTSIZEID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTSTYLEID == null){
	finder_tUniqRow_26.PRODUCTSTYLEID = null;
}else{
	finder_tUniqRow_26.PRODUCTSTYLEID = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTSTYLEID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.QUANTITYUNITSYMBOL == null){
	finder_tUniqRow_26.QUANTITYUNITSYMBOL = null;
}else{
	finder_tUniqRow_26.QUANTITYUNITSYMBOL = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.QUANTITYUNITSYMBOL.toLowerCase();
}	
finder_tUniqRow_26.hashCodeDirty = true;
if (!keystUniqRow_26.contains(finder_tUniqRow_26)) {
		KeyStruct_tUniqRow_26 new_tUniqRow_26 = new KeyStruct_tUniqRow_26();

		
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.TRADEAGREEMENTJOURNALNUMBER == null){
	new_tUniqRow_26.TRADEAGREEMENTJOURNALNUMBER = null;
}else{
	new_tUniqRow_26.TRADEAGREEMENTJOURNALNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.TRADEAGREEMENTJOURNALNUMBER.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.ITEMNUMBER == null){
	new_tUniqRow_26.ITEMNUMBER = null;
}else{
	new_tUniqRow_26.ITEMNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.ITEMNUMBER.toLowerCase();
}
new_tUniqRow_26.PRICE = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRICE;
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRICECURRENCYCODE == null){
	new_tUniqRow_26.PRICECURRENCYCODE = null;
}else{
	new_tUniqRow_26.PRICECURRENCYCODE = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRICECURRENCYCODE.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRICECUSTOMERGROUPCODE == null){
	new_tUniqRow_26.PRICECUSTOMERGROUPCODE = null;
}else{
	new_tUniqRow_26.PRICECUSTOMERGROUPCODE = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTCOLORID == null){
	new_tUniqRow_26.PRODUCTCOLORID = null;
}else{
	new_tUniqRow_26.PRODUCTCOLORID = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTCOLORID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTSIZEID == null){
	new_tUniqRow_26.PRODUCTSIZEID = null;
}else{
	new_tUniqRow_26.PRODUCTSIZEID = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTSIZEID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTSTYLEID == null){
	new_tUniqRow_26.PRODUCTSTYLEID = null;
}else{
	new_tUniqRow_26.PRODUCTSTYLEID = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTSTYLEID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.QUANTITYUNITSYMBOL == null){
	new_tUniqRow_26.QUANTITYUNITSYMBOL = null;
}else{
	new_tUniqRow_26.QUANTITYUNITSYMBOL = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.QUANTITYUNITSYMBOL.toLowerCase();
}
		
		keystUniqRow_26.add(new_tUniqRow_26);if(row61 == null){ 
	
	row61 = new row61Struct();
}row61.TRADEAGREEMENTJOURNALNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.TRADEAGREEMENTJOURNALNUMBER;			row61.ITEMNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.ITEMNUMBER;			row61.PRICE = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRICE;			row61.PRICECURRENCYCODE = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRICECURRENCYCODE;			row61.PRICECUSTOMERGROUPCODE = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRICECUSTOMERGROUPCODE;			row61.PRODUCTCOLORID = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTCOLORID;			row61.PRODUCTSIZEID = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTSIZEID;			row61.PRODUCTSTYLEID = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTSTYLEID;			row61.QUANTITYUNITSYMBOL = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.QUANTITYUNITSYMBOL;					
		nb_uniques_tUniqRow_26++;
	} else {
	  nb_duplicates_tUniqRow_26++;
	}

 


	tos_count_tUniqRow_26++;

/**
 * [tUniqRow_26 main ] stop
 */
	
	/**
	 * [tUniqRow_26 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_26";

	

 



/**
 * [tUniqRow_26 process_data_begin ] stop
 */
// Start of branch "row61"
if(row61 != null) { 



	
	/**
	 * [tFilterRow_10 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_10";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row61");
					}
					

          row62 = null;
    Operator_tFilterRow_10 ope_tFilterRow_10 = new Operator_tFilterRow_10("&&");
            ope_tFilterRow_10.matches((row61.PRICE == null? false : row61.PRICE.compareTo(ParserUtils.parseTo_Double(String.valueOf(0))) > 0)
                           , "PRICE.compareTo(0) > 0 failed");
		 	
    
    if (ope_tFilterRow_10.getMatchFlag()) {
              if(row62 == null){ 
                row62 = new row62Struct();
              }
               row62.TRADEAGREEMENTJOURNALNUMBER = row61.TRADEAGREEMENTJOURNALNUMBER;
               row62.ITEMNUMBER = row61.ITEMNUMBER;
               row62.PRICE = row61.PRICE;
               row62.PRICECURRENCYCODE = row61.PRICECURRENCYCODE;
               row62.PRICECUSTOMERGROUPCODE = row61.PRICECUSTOMERGROUPCODE;
               row62.PRODUCTCOLORID = row61.PRODUCTCOLORID;
               row62.PRODUCTSIZEID = row61.PRODUCTSIZEID;
               row62.PRODUCTSTYLEID = row61.PRODUCTSTYLEID;
               row62.QUANTITYUNITSYMBOL = row61.QUANTITYUNITSYMBOL;    
      nb_line_ok_tFilterRow_10++;
    } else {
      nb_line_reject_tFilterRow_10++;
    }

nb_line_tFilterRow_10++;

 


	tos_count_tFilterRow_10++;

/**
 * [tFilterRow_10 main ] stop
 */
	
	/**
	 * [tFilterRow_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_10";

	

 



/**
 * [tFilterRow_10 process_data_begin ] stop
 */
// Start of branch "row62"
if(row62 != null) { 



	
	/**
	 * [tHashOutput_17 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_17";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row62");
					}
					



    
		row62Struct oneRow_tHashOutput_17 = new row62Struct();
				
					oneRow_tHashOutput_17.TRADEAGREEMENTJOURNALNUMBER = row62.TRADEAGREEMENTJOURNALNUMBER;
					oneRow_tHashOutput_17.ITEMNUMBER = row62.ITEMNUMBER;
					oneRow_tHashOutput_17.PRICE = row62.PRICE;
					oneRow_tHashOutput_17.PRICECURRENCYCODE = row62.PRICECURRENCYCODE;
					oneRow_tHashOutput_17.PRICECUSTOMERGROUPCODE = row62.PRICECUSTOMERGROUPCODE;
					oneRow_tHashOutput_17.PRODUCTCOLORID = row62.PRODUCTCOLORID;
					oneRow_tHashOutput_17.PRODUCTSIZEID = row62.PRODUCTSIZEID;
					oneRow_tHashOutput_17.PRODUCTSTYLEID = row62.PRODUCTSTYLEID;
					oneRow_tHashOutput_17.QUANTITYUNITSYMBOL = row62.QUANTITYUNITSYMBOL;
		
        tHashFile_tHashOutput_17.put(oneRow_tHashOutput_17);
        nb_line_tHashOutput_17 ++;
 


	tos_count_tHashOutput_17++;

/**
 * [tHashOutput_17 main ] stop
 */
	
	/**
	 * [tHashOutput_17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_17";

	

 



/**
 * [tHashOutput_17 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_17 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_17";

	

 



/**
 * [tHashOutput_17 process_data_end ] stop
 */

} // End of branch "row62"




	
	/**
	 * [tFilterRow_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_10";

	

 



/**
 * [tFilterRow_10 process_data_end ] stop
 */

} // End of branch "row61"




	
	/**
	 * [tUniqRow_26 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_26";

	

 



/**
 * [tUniqRow_26 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0"




// Start of branch "sortie_full_DKK_RRP"
if(sortie_full_DKK_RRP != null) { 



	
	/**
	 * [tMap_30 main ] start
	 */

	

	
	
	currentComponent="tMap_30";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_full_DKK_RRP");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_30 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_30 = false;
		  boolean mainRowRejected_tMap_30 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_30__Struct Var = Var__tMap_30;// ###############################
        // ###############################
        // # Output tables

copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0 = null;
sortie_full_DKK_WSP = null;


// # Output table : 'copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0'
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_tmp.TRADEAGREEMENTJOURNALNUMBER = "HBE1-" + globalMap.get("SalesJournalNumber");
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_tmp.ITEMNUMBER = sortie_full_DKK_RRP.STYLE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_tmp.PRICE = sortie_full_DKK_RRP.DKK_RRP == null ? 0 : Mathematical.REAL(sortie_full_DKK_RRP.DKK_RRP .replaceAll(",", ".") ) ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_tmp.PRICECURRENCYCODE = "DKK";
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_tmp.PRICECUSTOMERGROUPCODE = "RRP";
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_tmp.PRODUCTCOLORID = sortie_full_DKK_RRP.COLOR ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_tmp.PRODUCTSIZEID = sortie_full_DKK_RRP.SIZE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_tmp.PRODUCTSTYLEID = sortie_full_chr_rrp.LBL ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_tmp.QUANTITYUNITSYMBOL = "PCS";
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0 = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_tmp;

// # Output table : 'sortie_full_DKK_WSP'
sortie_full_DKK_WSP_tmp.BRAND = sortie_full_DKK_RRP.BRAND ;
sortie_full_DKK_WSP_tmp.SEASON = sortie_full_DKK_RRP.SEASON ;
sortie_full_DKK_WSP_tmp.CATEGORY = sortie_full_DKK_RRP.CATEGORY ;
sortie_full_DKK_WSP_tmp.REF = sortie_full_DKK_RRP.REF ;
sortie_full_DKK_WSP_tmp.DESCRIPTION = sortie_full_DKK_RRP.DESCRIPTION ;
sortie_full_DKK_WSP_tmp.STYLE = sortie_full_DKK_RRP.STYLE ;
sortie_full_DKK_WSP_tmp.COLOR = sortie_full_DKK_RRP.COLOR ;
sortie_full_DKK_WSP_tmp.FASHION = sortie_full_DKK_RRP.FASHION ;
sortie_full_DKK_WSP_tmp.STYLECOLORLABEL = sortie_full_DKK_RRP.STYLECOLORLABEL ;
sortie_full_DKK_WSP_tmp.COLORNAME = sortie_full_DKK_RRP.COLORNAME ;
sortie_full_DKK_WSP_tmp.LBL = sortie_full_DKK_RRP.LBL ;
sortie_full_DKK_WSP_tmp.STYLE_COLOR = sortie_full_DKK_RRP.STYLE_COLOR ;
sortie_full_DKK_WSP_tmp.GENDER = sortie_full_DKK_RRP.GENDER ;
sortie_full_DKK_WSP_tmp.AGE_RANGE = sortie_full_DKK_RRP.AGE_RANGE ;
sortie_full_DKK_WSP_tmp.SIZE_RANGE = sortie_full_DKK_RRP.SIZE_RANGE ;
sortie_full_DKK_WSP_tmp.SIZE = sortie_full_DKK_RRP.SIZE ;
sortie_full_DKK_WSP_tmp.US_SIZE = sortie_full_DKK_RRP.US_SIZE ;
sortie_full_DKK_WSP_tmp.CM_SIZE = sortie_full_DKK_RRP.CM_SIZE ;
sortie_full_DKK_WSP_tmp.PRODUCT = sortie_full_DKK_RRP.PRODUCT ;
sortie_full_DKK_WSP_tmp.PRODUCT_STATUS = sortie_full_DKK_RRP.PRODUCT_STATUS ;
sortie_full_DKK_WSP_tmp.PRODUCT_TIER = sortie_full_DKK_RRP.PRODUCT_TIER ;
sortie_full_DKK_WSP_tmp.ACCT_EXCLUS = sortie_full_DKK_RRP.ACCT_EXCLUS ;
sortie_full_DKK_WSP_tmp.SIZE_RATIO_SPLIT = sortie_full_DKK_RRP.SIZE_RATIO_SPLIT ;
sortie_full_DKK_WSP_tmp.REC_SIZE_SPLIT = sortie_full_DKK_RRP.REC_SIZE_SPLIT ;
sortie_full_DKK_WSP_tmp.CARTON_QTY = sortie_full_DKK_RRP.CARTON_QTY ;
sortie_full_DKK_WSP_tmp.ATTRIBUTE = sortie_full_DKK_RRP.ATTRIBUTE ;
sortie_full_DKK_WSP_tmp.UNITS = sortie_full_DKK_RRP.UNITS ;
sortie_full_DKK_WSP_tmp.EUR_RRP = sortie_full_DKK_RRP.EUR_RRP ;
sortie_full_DKK_WSP_tmp.EUR_WSP = sortie_full_DKK_RRP.EUR_WSP ;
sortie_full_DKK_WSP_tmp.GBP_RRP = sortie_full_DKK_RRP.GBP_RRP ;
sortie_full_DKK_WSP_tmp.GBP_WSP = sortie_full_DKK_RRP.GBP_WSP ;
sortie_full_DKK_WSP_tmp.CHF_RRP = sortie_full_DKK_RRP.CHF_RRP ;
sortie_full_DKK_WSP_tmp.CHF_WSP = sortie_full_DKK_RRP.CHF_WSP ;
sortie_full_DKK_WSP_tmp.NOK_RRP = sortie_full_DKK_RRP.NOK_RRP ;
sortie_full_DKK_WSP_tmp.NOK_WSP = sortie_full_DKK_RRP.NOK_WSP ;
sortie_full_DKK_WSP_tmp.DKK_RRP = sortie_full_DKK_RRP.DKK_RRP ;
sortie_full_DKK_WSP_tmp.DKK_WSP = sortie_full_DKK_RRP.DKK_WSP ;
sortie_full_DKK_WSP_tmp.SEK_RRP = sortie_full_DKK_RRP.SEK_RRP ;
sortie_full_DKK_WSP_tmp.SEK_WSP = sortie_full_DKK_RRP.SEK_WSP ;
sortie_full_DKK_WSP_tmp.EUR_FINN_RRP = sortie_full_DKK_RRP.EUR_FINN_RRP ;
sortie_full_DKK_WSP_tmp.EUR_FINN_WSP = sortie_full_DKK_RRP.EUR_FINN_WSP ;
sortie_full_DKK_WSP_tmp.FABRICATION = sortie_full_DKK_RRP.FABRICATION ;
sortie_full_DKK_WSP_tmp.COO = sortie_full_DKK_RRP.COO ;
sortie_full_DKK_WSP_tmp.CUSTOM_TARIFF_CODE = sortie_full_DKK_RRP.CUSTOM_TARIFF_CODE ;
sortie_full_DKK_WSP_tmp.UPC = sortie_full_DKK_RRP.UPC ;
sortie_full_DKK_WSP_tmp.SMU_TYPE = sortie_full_DKK_RRP.SMU_TYPE ;
sortie_full_DKK_WSP = sortie_full_DKK_WSP_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_30 = false;










 


	tos_count_tMap_30++;

/**
 * [tMap_30 main ] stop
 */
	
	/**
	 * [tMap_30 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_30";

	

 



/**
 * [tMap_30 process_data_begin ] stop
 */
// Start of branch "copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0"
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0 != null) { 



	
	/**
	 * [tUniqRow_27 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_27";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0");
					}
					
row64 = null;			
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.TRADEAGREEMENTJOURNALNUMBER == null){
	finder_tUniqRow_27.TRADEAGREEMENTJOURNALNUMBER = null;
}else{
	finder_tUniqRow_27.TRADEAGREEMENTJOURNALNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.TRADEAGREEMENTJOURNALNUMBER.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.ITEMNUMBER == null){
	finder_tUniqRow_27.ITEMNUMBER = null;
}else{
	finder_tUniqRow_27.ITEMNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.ITEMNUMBER.toLowerCase();
}
finder_tUniqRow_27.PRICE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRICE;
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRICECURRENCYCODE == null){
	finder_tUniqRow_27.PRICECURRENCYCODE = null;
}else{
	finder_tUniqRow_27.PRICECURRENCYCODE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRICECURRENCYCODE.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRICECUSTOMERGROUPCODE == null){
	finder_tUniqRow_27.PRICECUSTOMERGROUPCODE = null;
}else{
	finder_tUniqRow_27.PRICECUSTOMERGROUPCODE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTCOLORID == null){
	finder_tUniqRow_27.PRODUCTCOLORID = null;
}else{
	finder_tUniqRow_27.PRODUCTCOLORID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTCOLORID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTSIZEID == null){
	finder_tUniqRow_27.PRODUCTSIZEID = null;
}else{
	finder_tUniqRow_27.PRODUCTSIZEID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTSIZEID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTSTYLEID == null){
	finder_tUniqRow_27.PRODUCTSTYLEID = null;
}else{
	finder_tUniqRow_27.PRODUCTSTYLEID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTSTYLEID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.QUANTITYUNITSYMBOL == null){
	finder_tUniqRow_27.QUANTITYUNITSYMBOL = null;
}else{
	finder_tUniqRow_27.QUANTITYUNITSYMBOL = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.QUANTITYUNITSYMBOL.toLowerCase();
}	
finder_tUniqRow_27.hashCodeDirty = true;
if (!keystUniqRow_27.contains(finder_tUniqRow_27)) {
		KeyStruct_tUniqRow_27 new_tUniqRow_27 = new KeyStruct_tUniqRow_27();

		
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.TRADEAGREEMENTJOURNALNUMBER == null){
	new_tUniqRow_27.TRADEAGREEMENTJOURNALNUMBER = null;
}else{
	new_tUniqRow_27.TRADEAGREEMENTJOURNALNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.TRADEAGREEMENTJOURNALNUMBER.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.ITEMNUMBER == null){
	new_tUniqRow_27.ITEMNUMBER = null;
}else{
	new_tUniqRow_27.ITEMNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.ITEMNUMBER.toLowerCase();
}
new_tUniqRow_27.PRICE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRICE;
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRICECURRENCYCODE == null){
	new_tUniqRow_27.PRICECURRENCYCODE = null;
}else{
	new_tUniqRow_27.PRICECURRENCYCODE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRICECURRENCYCODE.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRICECUSTOMERGROUPCODE == null){
	new_tUniqRow_27.PRICECUSTOMERGROUPCODE = null;
}else{
	new_tUniqRow_27.PRICECUSTOMERGROUPCODE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTCOLORID == null){
	new_tUniqRow_27.PRODUCTCOLORID = null;
}else{
	new_tUniqRow_27.PRODUCTCOLORID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTCOLORID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTSIZEID == null){
	new_tUniqRow_27.PRODUCTSIZEID = null;
}else{
	new_tUniqRow_27.PRODUCTSIZEID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTSIZEID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTSTYLEID == null){
	new_tUniqRow_27.PRODUCTSTYLEID = null;
}else{
	new_tUniqRow_27.PRODUCTSTYLEID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTSTYLEID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.QUANTITYUNITSYMBOL == null){
	new_tUniqRow_27.QUANTITYUNITSYMBOL = null;
}else{
	new_tUniqRow_27.QUANTITYUNITSYMBOL = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.QUANTITYUNITSYMBOL.toLowerCase();
}
		
		keystUniqRow_27.add(new_tUniqRow_27);if(row64 == null){ 
	
	row64 = new row64Struct();
}row64.TRADEAGREEMENTJOURNALNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.TRADEAGREEMENTJOURNALNUMBER;			row64.ITEMNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.ITEMNUMBER;			row64.PRICE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRICE;			row64.PRICECURRENCYCODE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRICECURRENCYCODE;			row64.PRICECUSTOMERGROUPCODE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRICECUSTOMERGROUPCODE;			row64.PRODUCTCOLORID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTCOLORID;			row64.PRODUCTSIZEID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTSIZEID;			row64.PRODUCTSTYLEID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTSTYLEID;			row64.QUANTITYUNITSYMBOL = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.QUANTITYUNITSYMBOL;					
		nb_uniques_tUniqRow_27++;
	} else {
	  nb_duplicates_tUniqRow_27++;
	}

 


	tos_count_tUniqRow_27++;

/**
 * [tUniqRow_27 main ] stop
 */
	
	/**
	 * [tUniqRow_27 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_27";

	

 



/**
 * [tUniqRow_27 process_data_begin ] stop
 */
// Start of branch "row64"
if(row64 != null) { 



	
	/**
	 * [tFilterRow_11 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_11";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row64");
					}
					

          row63 = null;
    Operator_tFilterRow_11 ope_tFilterRow_11 = new Operator_tFilterRow_11("&&");
            ope_tFilterRow_11.matches((row64.PRICE == null? false : row64.PRICE.compareTo(ParserUtils.parseTo_Double(String.valueOf(0))) > 0)
                           , "PRICE.compareTo(0) > 0 failed");
		 	
    
    if (ope_tFilterRow_11.getMatchFlag()) {
              if(row63 == null){ 
                row63 = new row63Struct();
              }
               row63.TRADEAGREEMENTJOURNALNUMBER = row64.TRADEAGREEMENTJOURNALNUMBER;
               row63.ITEMNUMBER = row64.ITEMNUMBER;
               row63.PRICE = row64.PRICE;
               row63.PRICECURRENCYCODE = row64.PRICECURRENCYCODE;
               row63.PRICECUSTOMERGROUPCODE = row64.PRICECUSTOMERGROUPCODE;
               row63.PRODUCTCOLORID = row64.PRODUCTCOLORID;
               row63.PRODUCTSIZEID = row64.PRODUCTSIZEID;
               row63.PRODUCTSTYLEID = row64.PRODUCTSTYLEID;
               row63.QUANTITYUNITSYMBOL = row64.QUANTITYUNITSYMBOL;    
      nb_line_ok_tFilterRow_11++;
    } else {
      nb_line_reject_tFilterRow_11++;
    }

nb_line_tFilterRow_11++;

 


	tos_count_tFilterRow_11++;

/**
 * [tFilterRow_11 main ] stop
 */
	
	/**
	 * [tFilterRow_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_11";

	

 



/**
 * [tFilterRow_11 process_data_begin ] stop
 */
// Start of branch "row63"
if(row63 != null) { 



	
	/**
	 * [tHashOutput_18 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_18";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row63");
					}
					



    
		row63Struct oneRow_tHashOutput_18 = new row63Struct();
				
					oneRow_tHashOutput_18.TRADEAGREEMENTJOURNALNUMBER = row63.TRADEAGREEMENTJOURNALNUMBER;
					oneRow_tHashOutput_18.ITEMNUMBER = row63.ITEMNUMBER;
					oneRow_tHashOutput_18.PRICE = row63.PRICE;
					oneRow_tHashOutput_18.PRICECURRENCYCODE = row63.PRICECURRENCYCODE;
					oneRow_tHashOutput_18.PRICECUSTOMERGROUPCODE = row63.PRICECUSTOMERGROUPCODE;
					oneRow_tHashOutput_18.PRODUCTCOLORID = row63.PRODUCTCOLORID;
					oneRow_tHashOutput_18.PRODUCTSIZEID = row63.PRODUCTSIZEID;
					oneRow_tHashOutput_18.PRODUCTSTYLEID = row63.PRODUCTSTYLEID;
					oneRow_tHashOutput_18.QUANTITYUNITSYMBOL = row63.QUANTITYUNITSYMBOL;
		
        tHashFile_tHashOutput_18.put(oneRow_tHashOutput_18);
        nb_line_tHashOutput_18 ++;
 


	tos_count_tHashOutput_18++;

/**
 * [tHashOutput_18 main ] stop
 */
	
	/**
	 * [tHashOutput_18 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_18";

	

 



/**
 * [tHashOutput_18 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_18 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_18";

	

 



/**
 * [tHashOutput_18 process_data_end ] stop
 */

} // End of branch "row63"




	
	/**
	 * [tFilterRow_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_11";

	

 



/**
 * [tFilterRow_11 process_data_end ] stop
 */

} // End of branch "row64"




	
	/**
	 * [tUniqRow_27 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_27";

	

 



/**
 * [tUniqRow_27 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0"




// Start of branch "sortie_full_DKK_WSP"
if(sortie_full_DKK_WSP != null) { 



	
	/**
	 * [tMap_31 main ] start
	 */

	

	
	
	currentComponent="tMap_31";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_full_DKK_WSP");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_31 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_31 = false;
		  boolean mainRowRejected_tMap_31 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_31__Struct Var = Var__tMap_31;// ###############################
        // ###############################
        // # Output tables

copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0 = null;
sortie_full_SEK_WSP = null;


// # Output table : 'copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0'
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_tmp.TRADEAGREEMENTJOURNALNUMBER = "HBE1-" + globalMap.get("SalesJournalNumber");
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_tmp.ITEMNUMBER = sortie_full_DKK_WSP.STYLE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_tmp.PRICE = sortie_full_DKK_WSP.SEK_WSP  == null ? 0 : Mathematical.REAL(sortie_full_DKK_WSP.SEK_WSP .replaceAll(",", ".") ) ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_tmp.PRICECURRENCYCODE = "SEK";
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_tmp.PRICECUSTOMERGROUPCODE = "WSP";
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_tmp.PRODUCTCOLORID = sortie_full_DKK_WSP.COLOR ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_tmp.PRODUCTSIZEID = sortie_full_DKK_WSP.SIZE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_tmp.PRODUCTSTYLEID = sortie_full_DKK_WSP.LBL ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_tmp.QUANTITYUNITSYMBOL = "PCS";
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0 = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_tmp;

// # Output table : 'sortie_full_SEK_WSP'
sortie_full_SEK_WSP_tmp.BRAND = sortie_full_DKK_WSP.BRAND ;
sortie_full_SEK_WSP_tmp.SEASON = sortie_full_DKK_WSP.SEASON ;
sortie_full_SEK_WSP_tmp.CATEGORY = sortie_full_DKK_WSP.CATEGORY ;
sortie_full_SEK_WSP_tmp.REF = sortie_full_DKK_WSP.REF ;
sortie_full_SEK_WSP_tmp.DESCRIPTION = sortie_full_DKK_WSP.DESCRIPTION ;
sortie_full_SEK_WSP_tmp.STYLE = sortie_full_DKK_WSP.STYLE ;
sortie_full_SEK_WSP_tmp.COLOR = sortie_full_DKK_WSP.COLOR ;
sortie_full_SEK_WSP_tmp.FASHION = sortie_full_DKK_WSP.FASHION ;
sortie_full_SEK_WSP_tmp.STYLECOLORLABEL = sortie_full_DKK_WSP.STYLECOLORLABEL ;
sortie_full_SEK_WSP_tmp.COLORNAME = sortie_full_DKK_WSP.COLORNAME ;
sortie_full_SEK_WSP_tmp.LBL = sortie_full_DKK_WSP.LBL ;
sortie_full_SEK_WSP_tmp.STYLE_COLOR = sortie_full_DKK_WSP.STYLE_COLOR ;
sortie_full_SEK_WSP_tmp.GENDER = sortie_full_DKK_WSP.GENDER ;
sortie_full_SEK_WSP_tmp.AGE_RANGE = sortie_full_DKK_WSP.AGE_RANGE ;
sortie_full_SEK_WSP_tmp.SIZE_RANGE = sortie_full_DKK_WSP.SIZE_RANGE ;
sortie_full_SEK_WSP_tmp.SIZE = sortie_full_DKK_WSP.SIZE ;
sortie_full_SEK_WSP_tmp.US_SIZE = sortie_full_DKK_WSP.US_SIZE ;
sortie_full_SEK_WSP_tmp.CM_SIZE = sortie_full_DKK_WSP.CM_SIZE ;
sortie_full_SEK_WSP_tmp.PRODUCT = sortie_full_DKK_WSP.PRODUCT ;
sortie_full_SEK_WSP_tmp.PRODUCT_STATUS = sortie_full_DKK_WSP.PRODUCT_STATUS ;
sortie_full_SEK_WSP_tmp.PRODUCT_TIER = sortie_full_DKK_WSP.PRODUCT_TIER ;
sortie_full_SEK_WSP_tmp.ACCT_EXCLUS = sortie_full_DKK_WSP.ACCT_EXCLUS ;
sortie_full_SEK_WSP_tmp.SIZE_RATIO_SPLIT = sortie_full_DKK_WSP.SIZE_RATIO_SPLIT ;
sortie_full_SEK_WSP_tmp.REC_SIZE_SPLIT = sortie_full_DKK_WSP.REC_SIZE_SPLIT ;
sortie_full_SEK_WSP_tmp.CARTON_QTY = sortie_full_DKK_WSP.CARTON_QTY ;
sortie_full_SEK_WSP_tmp.ATTRIBUTE = sortie_full_DKK_WSP.ATTRIBUTE ;
sortie_full_SEK_WSP_tmp.UNITS = sortie_full_DKK_WSP.UNITS ;
sortie_full_SEK_WSP_tmp.EUR_RRP = sortie_full_DKK_WSP.EUR_RRP ;
sortie_full_SEK_WSP_tmp.EUR_WSP = sortie_full_DKK_WSP.EUR_WSP ;
sortie_full_SEK_WSP_tmp.GBP_RRP = sortie_full_DKK_WSP.GBP_RRP ;
sortie_full_SEK_WSP_tmp.GBP_WSP = sortie_full_DKK_WSP.GBP_WSP ;
sortie_full_SEK_WSP_tmp.CHF_RRP = sortie_full_DKK_WSP.CHF_RRP ;
sortie_full_SEK_WSP_tmp.CHF_WSP = sortie_full_DKK_WSP.CHF_WSP ;
sortie_full_SEK_WSP_tmp.NOK_RRP = sortie_full_DKK_WSP.NOK_RRP ;
sortie_full_SEK_WSP_tmp.NOK_WSP = sortie_full_DKK_WSP.NOK_WSP ;
sortie_full_SEK_WSP_tmp.DKK_RRP = sortie_full_DKK_WSP.DKK_RRP ;
sortie_full_SEK_WSP_tmp.DKK_WSP = sortie_full_DKK_WSP.DKK_WSP ;
sortie_full_SEK_WSP_tmp.SEK_RRP = sortie_full_DKK_WSP.SEK_RRP ;
sortie_full_SEK_WSP_tmp.SEK_WSP = sortie_full_DKK_WSP.SEK_WSP ;
sortie_full_SEK_WSP_tmp.EUR_FINN_RRP = sortie_full_DKK_WSP.EUR_FINN_RRP ;
sortie_full_SEK_WSP_tmp.EUR_FINN_WSP = sortie_full_DKK_WSP.EUR_FINN_WSP ;
sortie_full_SEK_WSP_tmp.FABRICATION = sortie_full_DKK_WSP.FABRICATION ;
sortie_full_SEK_WSP_tmp.COO = sortie_full_DKK_WSP.COO ;
sortie_full_SEK_WSP_tmp.CUSTOM_TARIFF_CODE = sortie_full_DKK_WSP.CUSTOM_TARIFF_CODE ;
sortie_full_SEK_WSP_tmp.UPC = sortie_full_DKK_WSP.UPC ;
sortie_full_SEK_WSP_tmp.SMU_TYPE = sortie_full_DKK_WSP.SMU_TYPE ;
sortie_full_SEK_WSP = sortie_full_SEK_WSP_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_31 = false;










 


	tos_count_tMap_31++;

/**
 * [tMap_31 main ] stop
 */
	
	/**
	 * [tMap_31 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_31";

	

 



/**
 * [tMap_31 process_data_begin ] stop
 */
// Start of branch "copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0"
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0 != null) { 



	
	/**
	 * [tUniqRow_28 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_28";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0");
					}
					
row68 = null;			
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.TRADEAGREEMENTJOURNALNUMBER == null){
	finder_tUniqRow_28.TRADEAGREEMENTJOURNALNUMBER = null;
}else{
	finder_tUniqRow_28.TRADEAGREEMENTJOURNALNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.TRADEAGREEMENTJOURNALNUMBER.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.ITEMNUMBER == null){
	finder_tUniqRow_28.ITEMNUMBER = null;
}else{
	finder_tUniqRow_28.ITEMNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.ITEMNUMBER.toLowerCase();
}
finder_tUniqRow_28.PRICE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRICE;
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRICECURRENCYCODE == null){
	finder_tUniqRow_28.PRICECURRENCYCODE = null;
}else{
	finder_tUniqRow_28.PRICECURRENCYCODE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRICECURRENCYCODE.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRICECUSTOMERGROUPCODE == null){
	finder_tUniqRow_28.PRICECUSTOMERGROUPCODE = null;
}else{
	finder_tUniqRow_28.PRICECUSTOMERGROUPCODE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRODUCTCOLORID == null){
	finder_tUniqRow_28.PRODUCTCOLORID = null;
}else{
	finder_tUniqRow_28.PRODUCTCOLORID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRODUCTCOLORID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRODUCTSIZEID == null){
	finder_tUniqRow_28.PRODUCTSIZEID = null;
}else{
	finder_tUniqRow_28.PRODUCTSIZEID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRODUCTSIZEID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRODUCTSTYLEID == null){
	finder_tUniqRow_28.PRODUCTSTYLEID = null;
}else{
	finder_tUniqRow_28.PRODUCTSTYLEID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRODUCTSTYLEID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.QUANTITYUNITSYMBOL == null){
	finder_tUniqRow_28.QUANTITYUNITSYMBOL = null;
}else{
	finder_tUniqRow_28.QUANTITYUNITSYMBOL = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.QUANTITYUNITSYMBOL.toLowerCase();
}	
finder_tUniqRow_28.hashCodeDirty = true;
if (!keystUniqRow_28.contains(finder_tUniqRow_28)) {
		KeyStruct_tUniqRow_28 new_tUniqRow_28 = new KeyStruct_tUniqRow_28();

		
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.TRADEAGREEMENTJOURNALNUMBER == null){
	new_tUniqRow_28.TRADEAGREEMENTJOURNALNUMBER = null;
}else{
	new_tUniqRow_28.TRADEAGREEMENTJOURNALNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.TRADEAGREEMENTJOURNALNUMBER.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.ITEMNUMBER == null){
	new_tUniqRow_28.ITEMNUMBER = null;
}else{
	new_tUniqRow_28.ITEMNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.ITEMNUMBER.toLowerCase();
}
new_tUniqRow_28.PRICE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRICE;
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRICECURRENCYCODE == null){
	new_tUniqRow_28.PRICECURRENCYCODE = null;
}else{
	new_tUniqRow_28.PRICECURRENCYCODE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRICECURRENCYCODE.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRICECUSTOMERGROUPCODE == null){
	new_tUniqRow_28.PRICECUSTOMERGROUPCODE = null;
}else{
	new_tUniqRow_28.PRICECUSTOMERGROUPCODE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRODUCTCOLORID == null){
	new_tUniqRow_28.PRODUCTCOLORID = null;
}else{
	new_tUniqRow_28.PRODUCTCOLORID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRODUCTCOLORID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRODUCTSIZEID == null){
	new_tUniqRow_28.PRODUCTSIZEID = null;
}else{
	new_tUniqRow_28.PRODUCTSIZEID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRODUCTSIZEID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRODUCTSTYLEID == null){
	new_tUniqRow_28.PRODUCTSTYLEID = null;
}else{
	new_tUniqRow_28.PRODUCTSTYLEID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRODUCTSTYLEID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.QUANTITYUNITSYMBOL == null){
	new_tUniqRow_28.QUANTITYUNITSYMBOL = null;
}else{
	new_tUniqRow_28.QUANTITYUNITSYMBOL = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.QUANTITYUNITSYMBOL.toLowerCase();
}
		
		keystUniqRow_28.add(new_tUniqRow_28);if(row68 == null){ 
	
	row68 = new row68Struct();
}row68.TRADEAGREEMENTJOURNALNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.TRADEAGREEMENTJOURNALNUMBER;			row68.ITEMNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.ITEMNUMBER;			row68.PRICE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRICE;			row68.PRICECURRENCYCODE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRICECURRENCYCODE;			row68.PRICECUSTOMERGROUPCODE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRICECUSTOMERGROUPCODE;			row68.PRODUCTCOLORID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRODUCTCOLORID;			row68.PRODUCTSIZEID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRODUCTSIZEID;			row68.PRODUCTSTYLEID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRODUCTSTYLEID;			row68.QUANTITYUNITSYMBOL = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.QUANTITYUNITSYMBOL;					
		nb_uniques_tUniqRow_28++;
	} else {
	  nb_duplicates_tUniqRow_28++;
	}

 


	tos_count_tUniqRow_28++;

/**
 * [tUniqRow_28 main ] stop
 */
	
	/**
	 * [tUniqRow_28 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_28";

	

 



/**
 * [tUniqRow_28 process_data_begin ] stop
 */
// Start of branch "row68"
if(row68 != null) { 



	
	/**
	 * [tFilterRow_12 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_12";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row68");
					}
					

          row67 = null;
    Operator_tFilterRow_12 ope_tFilterRow_12 = new Operator_tFilterRow_12("&&");
            ope_tFilterRow_12.matches((row68.PRICE == null? false : row68.PRICE.compareTo(ParserUtils.parseTo_Double(String.valueOf(0))) > 0)
                           , "PRICE.compareTo(0) > 0 failed");
		 	
    
    if (ope_tFilterRow_12.getMatchFlag()) {
              if(row67 == null){ 
                row67 = new row67Struct();
              }
               row67.TRADEAGREEMENTJOURNALNUMBER = row68.TRADEAGREEMENTJOURNALNUMBER;
               row67.ITEMNUMBER = row68.ITEMNUMBER;
               row67.PRICE = row68.PRICE;
               row67.PRICECURRENCYCODE = row68.PRICECURRENCYCODE;
               row67.PRICECUSTOMERGROUPCODE = row68.PRICECUSTOMERGROUPCODE;
               row67.PRODUCTCOLORID = row68.PRODUCTCOLORID;
               row67.PRODUCTSIZEID = row68.PRODUCTSIZEID;
               row67.PRODUCTSTYLEID = row68.PRODUCTSTYLEID;
               row67.QUANTITYUNITSYMBOL = row68.QUANTITYUNITSYMBOL;    
      nb_line_ok_tFilterRow_12++;
    } else {
      nb_line_reject_tFilterRow_12++;
    }

nb_line_tFilterRow_12++;

 


	tos_count_tFilterRow_12++;

/**
 * [tFilterRow_12 main ] stop
 */
	
	/**
	 * [tFilterRow_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_12";

	

 



/**
 * [tFilterRow_12 process_data_begin ] stop
 */
// Start of branch "row67"
if(row67 != null) { 



	
	/**
	 * [tHashOutput_19 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_19";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row67");
					}
					



    
		row67Struct oneRow_tHashOutput_19 = new row67Struct();
				
					oneRow_tHashOutput_19.TRADEAGREEMENTJOURNALNUMBER = row67.TRADEAGREEMENTJOURNALNUMBER;
					oneRow_tHashOutput_19.ITEMNUMBER = row67.ITEMNUMBER;
					oneRow_tHashOutput_19.PRICE = row67.PRICE;
					oneRow_tHashOutput_19.PRICECURRENCYCODE = row67.PRICECURRENCYCODE;
					oneRow_tHashOutput_19.PRICECUSTOMERGROUPCODE = row67.PRICECUSTOMERGROUPCODE;
					oneRow_tHashOutput_19.PRODUCTCOLORID = row67.PRODUCTCOLORID;
					oneRow_tHashOutput_19.PRODUCTSIZEID = row67.PRODUCTSIZEID;
					oneRow_tHashOutput_19.PRODUCTSTYLEID = row67.PRODUCTSTYLEID;
					oneRow_tHashOutput_19.QUANTITYUNITSYMBOL = row67.QUANTITYUNITSYMBOL;
		
        tHashFile_tHashOutput_19.put(oneRow_tHashOutput_19);
        nb_line_tHashOutput_19 ++;
 


	tos_count_tHashOutput_19++;

/**
 * [tHashOutput_19 main ] stop
 */
	
	/**
	 * [tHashOutput_19 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_19";

	

 



/**
 * [tHashOutput_19 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_19 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_19";

	

 



/**
 * [tHashOutput_19 process_data_end ] stop
 */

} // End of branch "row67"




	
	/**
	 * [tFilterRow_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_12";

	

 



/**
 * [tFilterRow_12 process_data_end ] stop
 */

} // End of branch "row68"




	
	/**
	 * [tUniqRow_28 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_28";

	

 



/**
 * [tUniqRow_28 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0"




// Start of branch "sortie_full_SEK_WSP"
if(sortie_full_SEK_WSP != null) { 



	
	/**
	 * [tMap_32 main ] start
	 */

	

	
	
	currentComponent="tMap_32";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_full_SEK_WSP");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_32 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_32 = false;
		  boolean mainRowRejected_tMap_32 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_32__Struct Var = Var__tMap_32;// ###############################
        // ###############################
        // # Output tables

copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0 = null;
sortie_full_SEK_RRP = null;


// # Output table : 'copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0'
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_tmp.TRADEAGREEMENTJOURNALNUMBER = "HBE1-" + globalMap.get("SalesJournalNumber");
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_tmp.ITEMNUMBER = sortie_full_SEK_WSP.STYLE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_tmp.PRICE = sortie_full_SEK_WSP.SEK_RRP  == null ? 0 : Mathematical.REAL(sortie_full_SEK_WSP.SEK_RRP.replaceAll(",", ".") ) ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_tmp.PRICECURRENCYCODE = "SEK";
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_tmp.PRICECUSTOMERGROUPCODE = "RRP";
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_tmp.PRODUCTCOLORID = sortie_full_SEK_WSP.COLOR ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_tmp.PRODUCTSIZEID = sortie_full_SEK_WSP.SIZE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_tmp.PRODUCTSTYLEID = sortie_full_SEK_WSP.LBL ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_tmp.QUANTITYUNITSYMBOL = "PCS";
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0 = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_tmp;

// # Output table : 'sortie_full_SEK_RRP'
sortie_full_SEK_RRP_tmp.BRAND = sortie_full_SEK_WSP.BRAND ;
sortie_full_SEK_RRP_tmp.SEASON = sortie_full_SEK_WSP.SEASON ;
sortie_full_SEK_RRP_tmp.CATEGORY = sortie_full_SEK_WSP.CATEGORY ;
sortie_full_SEK_RRP_tmp.REF = sortie_full_SEK_WSP.REF ;
sortie_full_SEK_RRP_tmp.DESCRIPTION = sortie_full_SEK_WSP.DESCRIPTION ;
sortie_full_SEK_RRP_tmp.STYLE = sortie_full_SEK_WSP.STYLE ;
sortie_full_SEK_RRP_tmp.COLOR = sortie_full_SEK_WSP.COLOR ;
sortie_full_SEK_RRP_tmp.FASHION = sortie_full_SEK_WSP.FASHION ;
sortie_full_SEK_RRP_tmp.STYLECOLORLABEL = sortie_full_SEK_WSP.STYLECOLORLABEL ;
sortie_full_SEK_RRP_tmp.COLORNAME = sortie_full_SEK_WSP.COLORNAME ;
sortie_full_SEK_RRP_tmp.LBL = sortie_full_SEK_WSP.LBL ;
sortie_full_SEK_RRP_tmp.STYLE_COLOR = sortie_full_SEK_WSP.STYLE_COLOR ;
sortie_full_SEK_RRP_tmp.GENDER = sortie_full_SEK_WSP.GENDER ;
sortie_full_SEK_RRP_tmp.AGE_RANGE = sortie_full_SEK_WSP.AGE_RANGE ;
sortie_full_SEK_RRP_tmp.SIZE_RANGE = sortie_full_SEK_WSP.SIZE_RANGE ;
sortie_full_SEK_RRP_tmp.SIZE = sortie_full_SEK_WSP.SIZE ;
sortie_full_SEK_RRP_tmp.US_SIZE = sortie_full_SEK_WSP.US_SIZE ;
sortie_full_SEK_RRP_tmp.CM_SIZE = sortie_full_SEK_WSP.CM_SIZE ;
sortie_full_SEK_RRP_tmp.PRODUCT = sortie_full_SEK_WSP.PRODUCT ;
sortie_full_SEK_RRP_tmp.PRODUCT_STATUS = sortie_full_SEK_WSP.PRODUCT_STATUS ;
sortie_full_SEK_RRP_tmp.PRODUCT_TIER = sortie_full_SEK_WSP.PRODUCT_TIER ;
sortie_full_SEK_RRP_tmp.ACCT_EXCLUS = sortie_full_SEK_WSP.ACCT_EXCLUS ;
sortie_full_SEK_RRP_tmp.SIZE_RATIO_SPLIT = sortie_full_SEK_WSP.SIZE_RATIO_SPLIT ;
sortie_full_SEK_RRP_tmp.REC_SIZE_SPLIT = sortie_full_SEK_WSP.REC_SIZE_SPLIT ;
sortie_full_SEK_RRP_tmp.CARTON_QTY = sortie_full_SEK_WSP.CARTON_QTY ;
sortie_full_SEK_RRP_tmp.ATTRIBUTE = sortie_full_SEK_WSP.ATTRIBUTE ;
sortie_full_SEK_RRP_tmp.UNITS = sortie_full_SEK_WSP.UNITS ;
sortie_full_SEK_RRP_tmp.EUR_RRP = sortie_full_SEK_WSP.EUR_RRP ;
sortie_full_SEK_RRP_tmp.EUR_WSP = sortie_full_SEK_WSP.EUR_WSP ;
sortie_full_SEK_RRP_tmp.GBP_RRP = sortie_full_SEK_WSP.GBP_RRP ;
sortie_full_SEK_RRP_tmp.GBP_WSP = sortie_full_SEK_WSP.GBP_WSP ;
sortie_full_SEK_RRP_tmp.CHF_RRP = sortie_full_SEK_WSP.CHF_RRP ;
sortie_full_SEK_RRP_tmp.CHF_WSP = sortie_full_SEK_WSP.CHF_WSP ;
sortie_full_SEK_RRP_tmp.NOK_RRP = sortie_full_SEK_WSP.NOK_RRP ;
sortie_full_SEK_RRP_tmp.NOK_WSP = sortie_full_SEK_WSP.NOK_WSP ;
sortie_full_SEK_RRP_tmp.DKK_RRP = sortie_full_SEK_WSP.DKK_RRP ;
sortie_full_SEK_RRP_tmp.DKK_WSP = sortie_full_SEK_WSP.DKK_WSP ;
sortie_full_SEK_RRP_tmp.SEK_RRP = sortie_full_SEK_WSP.SEK_RRP ;
sortie_full_SEK_RRP_tmp.SEK_WSP = sortie_full_SEK_WSP.SEK_WSP ;
sortie_full_SEK_RRP_tmp.EUR_FINN_RRP = sortie_full_SEK_WSP.EUR_FINN_RRP ;
sortie_full_SEK_RRP_tmp.EUR_FINN_WSP = sortie_full_SEK_WSP.EUR_FINN_WSP ;
sortie_full_SEK_RRP_tmp.FABRICATION = sortie_full_SEK_WSP.FABRICATION ;
sortie_full_SEK_RRP_tmp.COO = sortie_full_SEK_WSP.COO ;
sortie_full_SEK_RRP_tmp.CUSTOM_TARIFF_CODE = sortie_full_SEK_WSP.CUSTOM_TARIFF_CODE ;
sortie_full_SEK_RRP_tmp.UPC = sortie_full_SEK_WSP.UPC ;
sortie_full_SEK_RRP_tmp.SMU_TYPE = sortie_full_SEK_WSP.SMU_TYPE ;
sortie_full_SEK_RRP = sortie_full_SEK_RRP_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_32 = false;










 


	tos_count_tMap_32++;

/**
 * [tMap_32 main ] stop
 */
	
	/**
	 * [tMap_32 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_32";

	

 



/**
 * [tMap_32 process_data_begin ] stop
 */
// Start of branch "copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0"
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0 != null) { 



	
	/**
	 * [tUniqRow_29 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_29";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0");
					}
					
row69 = null;			
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.TRADEAGREEMENTJOURNALNUMBER == null){
	finder_tUniqRow_29.TRADEAGREEMENTJOURNALNUMBER = null;
}else{
	finder_tUniqRow_29.TRADEAGREEMENTJOURNALNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.TRADEAGREEMENTJOURNALNUMBER.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.ITEMNUMBER == null){
	finder_tUniqRow_29.ITEMNUMBER = null;
}else{
	finder_tUniqRow_29.ITEMNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.ITEMNUMBER.toLowerCase();
}
finder_tUniqRow_29.PRICE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRICE;
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRICECURRENCYCODE == null){
	finder_tUniqRow_29.PRICECURRENCYCODE = null;
}else{
	finder_tUniqRow_29.PRICECURRENCYCODE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRICECURRENCYCODE.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRICECUSTOMERGROUPCODE == null){
	finder_tUniqRow_29.PRICECUSTOMERGROUPCODE = null;
}else{
	finder_tUniqRow_29.PRICECUSTOMERGROUPCODE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRODUCTCOLORID == null){
	finder_tUniqRow_29.PRODUCTCOLORID = null;
}else{
	finder_tUniqRow_29.PRODUCTCOLORID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRODUCTCOLORID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRODUCTSIZEID == null){
	finder_tUniqRow_29.PRODUCTSIZEID = null;
}else{
	finder_tUniqRow_29.PRODUCTSIZEID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRODUCTSIZEID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRODUCTSTYLEID == null){
	finder_tUniqRow_29.PRODUCTSTYLEID = null;
}else{
	finder_tUniqRow_29.PRODUCTSTYLEID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRODUCTSTYLEID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.QUANTITYUNITSYMBOL == null){
	finder_tUniqRow_29.QUANTITYUNITSYMBOL = null;
}else{
	finder_tUniqRow_29.QUANTITYUNITSYMBOL = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.QUANTITYUNITSYMBOL.toLowerCase();
}	
finder_tUniqRow_29.hashCodeDirty = true;
if (!keystUniqRow_29.contains(finder_tUniqRow_29)) {
		KeyStruct_tUniqRow_29 new_tUniqRow_29 = new KeyStruct_tUniqRow_29();

		
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.TRADEAGREEMENTJOURNALNUMBER == null){
	new_tUniqRow_29.TRADEAGREEMENTJOURNALNUMBER = null;
}else{
	new_tUniqRow_29.TRADEAGREEMENTJOURNALNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.TRADEAGREEMENTJOURNALNUMBER.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.ITEMNUMBER == null){
	new_tUniqRow_29.ITEMNUMBER = null;
}else{
	new_tUniqRow_29.ITEMNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.ITEMNUMBER.toLowerCase();
}
new_tUniqRow_29.PRICE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRICE;
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRICECURRENCYCODE == null){
	new_tUniqRow_29.PRICECURRENCYCODE = null;
}else{
	new_tUniqRow_29.PRICECURRENCYCODE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRICECURRENCYCODE.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRICECUSTOMERGROUPCODE == null){
	new_tUniqRow_29.PRICECUSTOMERGROUPCODE = null;
}else{
	new_tUniqRow_29.PRICECUSTOMERGROUPCODE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRODUCTCOLORID == null){
	new_tUniqRow_29.PRODUCTCOLORID = null;
}else{
	new_tUniqRow_29.PRODUCTCOLORID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRODUCTCOLORID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRODUCTSIZEID == null){
	new_tUniqRow_29.PRODUCTSIZEID = null;
}else{
	new_tUniqRow_29.PRODUCTSIZEID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRODUCTSIZEID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRODUCTSTYLEID == null){
	new_tUniqRow_29.PRODUCTSTYLEID = null;
}else{
	new_tUniqRow_29.PRODUCTSTYLEID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRODUCTSTYLEID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.QUANTITYUNITSYMBOL == null){
	new_tUniqRow_29.QUANTITYUNITSYMBOL = null;
}else{
	new_tUniqRow_29.QUANTITYUNITSYMBOL = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.QUANTITYUNITSYMBOL.toLowerCase();
}
		
		keystUniqRow_29.add(new_tUniqRow_29);if(row69 == null){ 
	
	row69 = new row69Struct();
}row69.TRADEAGREEMENTJOURNALNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.TRADEAGREEMENTJOURNALNUMBER;			row69.ITEMNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.ITEMNUMBER;			row69.PRICE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRICE;			row69.PRICECURRENCYCODE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRICECURRENCYCODE;			row69.PRICECUSTOMERGROUPCODE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRICECUSTOMERGROUPCODE;			row69.PRODUCTCOLORID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRODUCTCOLORID;			row69.PRODUCTSIZEID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRODUCTSIZEID;			row69.PRODUCTSTYLEID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRODUCTSTYLEID;			row69.QUANTITYUNITSYMBOL = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.QUANTITYUNITSYMBOL;					
		nb_uniques_tUniqRow_29++;
	} else {
	  nb_duplicates_tUniqRow_29++;
	}

 


	tos_count_tUniqRow_29++;

/**
 * [tUniqRow_29 main ] stop
 */
	
	/**
	 * [tUniqRow_29 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_29";

	

 



/**
 * [tUniqRow_29 process_data_begin ] stop
 */
// Start of branch "row69"
if(row69 != null) { 



	
	/**
	 * [tFilterRow_13 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_13";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row69");
					}
					

          row70 = null;
    Operator_tFilterRow_13 ope_tFilterRow_13 = new Operator_tFilterRow_13("&&");
            ope_tFilterRow_13.matches((row69.PRICE == null? false : row69.PRICE.compareTo(ParserUtils.parseTo_Double(String.valueOf(0))) > 0)
                           , "PRICE.compareTo(0) > 0 failed");
		 	
    
    if (ope_tFilterRow_13.getMatchFlag()) {
              if(row70 == null){ 
                row70 = new row70Struct();
              }
               row70.TRADEAGREEMENTJOURNALNUMBER = row69.TRADEAGREEMENTJOURNALNUMBER;
               row70.ITEMNUMBER = row69.ITEMNUMBER;
               row70.PRICE = row69.PRICE;
               row70.PRICECURRENCYCODE = row69.PRICECURRENCYCODE;
               row70.PRICECUSTOMERGROUPCODE = row69.PRICECUSTOMERGROUPCODE;
               row70.PRODUCTCOLORID = row69.PRODUCTCOLORID;
               row70.PRODUCTSIZEID = row69.PRODUCTSIZEID;
               row70.PRODUCTSTYLEID = row69.PRODUCTSTYLEID;
               row70.QUANTITYUNITSYMBOL = row69.QUANTITYUNITSYMBOL;    
      nb_line_ok_tFilterRow_13++;
    } else {
      nb_line_reject_tFilterRow_13++;
    }

nb_line_tFilterRow_13++;

 


	tos_count_tFilterRow_13++;

/**
 * [tFilterRow_13 main ] stop
 */
	
	/**
	 * [tFilterRow_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_13";

	

 



/**
 * [tFilterRow_13 process_data_begin ] stop
 */
// Start of branch "row70"
if(row70 != null) { 



	
	/**
	 * [tHashOutput_20 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_20";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row70");
					}
					



    
		row70Struct oneRow_tHashOutput_20 = new row70Struct();
				
					oneRow_tHashOutput_20.TRADEAGREEMENTJOURNALNUMBER = row70.TRADEAGREEMENTJOURNALNUMBER;
					oneRow_tHashOutput_20.ITEMNUMBER = row70.ITEMNUMBER;
					oneRow_tHashOutput_20.PRICE = row70.PRICE;
					oneRow_tHashOutput_20.PRICECURRENCYCODE = row70.PRICECURRENCYCODE;
					oneRow_tHashOutput_20.PRICECUSTOMERGROUPCODE = row70.PRICECUSTOMERGROUPCODE;
					oneRow_tHashOutput_20.PRODUCTCOLORID = row70.PRODUCTCOLORID;
					oneRow_tHashOutput_20.PRODUCTSIZEID = row70.PRODUCTSIZEID;
					oneRow_tHashOutput_20.PRODUCTSTYLEID = row70.PRODUCTSTYLEID;
					oneRow_tHashOutput_20.QUANTITYUNITSYMBOL = row70.QUANTITYUNITSYMBOL;
		
        tHashFile_tHashOutput_20.put(oneRow_tHashOutput_20);
        nb_line_tHashOutput_20 ++;
 


	tos_count_tHashOutput_20++;

/**
 * [tHashOutput_20 main ] stop
 */
	
	/**
	 * [tHashOutput_20 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_20";

	

 



/**
 * [tHashOutput_20 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_20 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_20";

	

 



/**
 * [tHashOutput_20 process_data_end ] stop
 */

} // End of branch "row70"




	
	/**
	 * [tFilterRow_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_13";

	

 



/**
 * [tFilterRow_13 process_data_end ] stop
 */

} // End of branch "row69"




	
	/**
	 * [tUniqRow_29 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_29";

	

 



/**
 * [tUniqRow_29 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0"




// Start of branch "sortie_full_SEK_RRP"
if(sortie_full_SEK_RRP != null) { 



	
	/**
	 * [tMap_33 main ] start
	 */

	

	
	
	currentComponent="tMap_33";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_full_SEK_RRP");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_33 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_33 = false;
		  boolean mainRowRejected_tMap_33 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_33__Struct Var = Var__tMap_33;// ###############################
        // ###############################
        // # Output tables

copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0 = null;
sortie_full_EUR_FIN_WSP = null;


// # Output table : 'copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0'
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0_tmp.TRADEAGREEMENTJOURNALNUMBER = "HBE1-" + globalMap.get("SalesJournalNumber");
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0_tmp.ITEMNUMBER = sortie_full_SEK_RRP.STYLE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0_tmp.PRICE = sortie_full_SEK_RRP.EUR_FINN_WSP  == null ? 0 : Mathematical.REAL( sortie_full_SEK_RRP.EUR_FINN_WSP.replaceAll(",", ".") ) ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0_tmp.PRICECURRENCYCODE = "EUR";
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0_tmp.PRICECUSTOMERGROUPCODE = "WSP_FI";
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0_tmp.PRODUCTCOLORID = sortie_full_SEK_RRP.COLOR ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0_tmp.PRODUCTSIZEID = sortie_full_SEK_RRP.SIZE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0_tmp.PRODUCTSTYLEID = sortie_full_DKK_WSP.LBL ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0_tmp.QUANTITYUNITSYMBOL = "PCS";
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0 = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0_tmp;

// # Output table : 'sortie_full_EUR_FIN_WSP'
sortie_full_EUR_FIN_WSP_tmp.BRAND = sortie_full_SEK_RRP.BRAND ;
sortie_full_EUR_FIN_WSP_tmp.SEASON = sortie_full_SEK_RRP.SEASON ;
sortie_full_EUR_FIN_WSP_tmp.CATEGORY = sortie_full_SEK_RRP.CATEGORY ;
sortie_full_EUR_FIN_WSP_tmp.REF = sortie_full_SEK_RRP.REF ;
sortie_full_EUR_FIN_WSP_tmp.DESCRIPTION = sortie_full_SEK_RRP.DESCRIPTION ;
sortie_full_EUR_FIN_WSP_tmp.STYLE = sortie_full_SEK_RRP.STYLE ;
sortie_full_EUR_FIN_WSP_tmp.COLOR = sortie_full_SEK_RRP.COLOR ;
sortie_full_EUR_FIN_WSP_tmp.FASHION = sortie_full_SEK_RRP.FASHION ;
sortie_full_EUR_FIN_WSP_tmp.STYLECOLORLABEL = sortie_full_SEK_RRP.STYLECOLORLABEL ;
sortie_full_EUR_FIN_WSP_tmp.COLORNAME = sortie_full_SEK_RRP.COLORNAME ;
sortie_full_EUR_FIN_WSP_tmp.LBL = sortie_full_SEK_RRP.LBL ;
sortie_full_EUR_FIN_WSP_tmp.STYLE_COLOR = sortie_full_SEK_RRP.STYLE_COLOR ;
sortie_full_EUR_FIN_WSP_tmp.GENDER = sortie_full_SEK_RRP.GENDER ;
sortie_full_EUR_FIN_WSP_tmp.AGE_RANGE = sortie_full_SEK_RRP.AGE_RANGE ;
sortie_full_EUR_FIN_WSP_tmp.SIZE_RANGE = sortie_full_SEK_RRP.SIZE_RANGE ;
sortie_full_EUR_FIN_WSP_tmp.SIZE = sortie_full_SEK_RRP.SIZE ;
sortie_full_EUR_FIN_WSP_tmp.US_SIZE = sortie_full_SEK_RRP.US_SIZE ;
sortie_full_EUR_FIN_WSP_tmp.CM_SIZE = sortie_full_SEK_RRP.CM_SIZE ;
sortie_full_EUR_FIN_WSP_tmp.PRODUCT = sortie_full_SEK_RRP.PRODUCT ;
sortie_full_EUR_FIN_WSP_tmp.PRODUCT_STATUS = sortie_full_SEK_RRP.PRODUCT_STATUS ;
sortie_full_EUR_FIN_WSP_tmp.PRODUCT_TIER = sortie_full_SEK_RRP.PRODUCT_TIER ;
sortie_full_EUR_FIN_WSP_tmp.ACCT_EXCLUS = sortie_full_SEK_RRP.ACCT_EXCLUS ;
sortie_full_EUR_FIN_WSP_tmp.SIZE_RATIO_SPLIT = sortie_full_SEK_RRP.SIZE_RATIO_SPLIT ;
sortie_full_EUR_FIN_WSP_tmp.REC_SIZE_SPLIT = sortie_full_SEK_RRP.REC_SIZE_SPLIT ;
sortie_full_EUR_FIN_WSP_tmp.CARTON_QTY = sortie_full_SEK_RRP.CARTON_QTY ;
sortie_full_EUR_FIN_WSP_tmp.ATTRIBUTE = sortie_full_SEK_RRP.ATTRIBUTE ;
sortie_full_EUR_FIN_WSP_tmp.UNITS = sortie_full_SEK_RRP.UNITS ;
sortie_full_EUR_FIN_WSP_tmp.EUR_RRP = sortie_full_SEK_RRP.EUR_RRP ;
sortie_full_EUR_FIN_WSP_tmp.EUR_WSP = sortie_full_SEK_RRP.EUR_WSP ;
sortie_full_EUR_FIN_WSP_tmp.GBP_RRP = sortie_full_SEK_RRP.GBP_RRP ;
sortie_full_EUR_FIN_WSP_tmp.GBP_WSP = sortie_full_SEK_RRP.GBP_WSP ;
sortie_full_EUR_FIN_WSP_tmp.CHF_RRP = sortie_full_SEK_RRP.CHF_RRP ;
sortie_full_EUR_FIN_WSP_tmp.CHF_WSP = sortie_full_SEK_RRP.CHF_WSP ;
sortie_full_EUR_FIN_WSP_tmp.NOK_RRP = sortie_full_SEK_RRP.NOK_RRP ;
sortie_full_EUR_FIN_WSP_tmp.NOK_WSP = sortie_full_SEK_RRP.NOK_WSP ;
sortie_full_EUR_FIN_WSP_tmp.DKK_RRP = sortie_full_SEK_RRP.DKK_RRP ;
sortie_full_EUR_FIN_WSP_tmp.DKK_WSP = sortie_full_SEK_RRP.DKK_WSP ;
sortie_full_EUR_FIN_WSP_tmp.SEK_RRP = sortie_full_SEK_RRP.SEK_RRP ;
sortie_full_EUR_FIN_WSP_tmp.SEK_WSP = sortie_full_SEK_RRP.SEK_WSP ;
sortie_full_EUR_FIN_WSP_tmp.EUR_FINN_RRP = sortie_full_SEK_RRP.EUR_FINN_RRP ;
sortie_full_EUR_FIN_WSP_tmp.EUR_FINN_WSP = sortie_full_SEK_RRP.EUR_FINN_WSP ;
sortie_full_EUR_FIN_WSP_tmp.FABRICATION = sortie_full_SEK_RRP.FABRICATION ;
sortie_full_EUR_FIN_WSP_tmp.COO = sortie_full_SEK_RRP.COO ;
sortie_full_EUR_FIN_WSP_tmp.CUSTOM_TARIFF_CODE = sortie_full_SEK_RRP.CUSTOM_TARIFF_CODE ;
sortie_full_EUR_FIN_WSP_tmp.UPC = sortie_full_SEK_RRP.UPC ;
sortie_full_EUR_FIN_WSP_tmp.SMU_TYPE = sortie_full_SEK_RRP.SMU_TYPE ;
sortie_full_EUR_FIN_WSP = sortie_full_EUR_FIN_WSP_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_33 = false;










 


	tos_count_tMap_33++;

/**
 * [tMap_33 main ] stop
 */
	
	/**
	 * [tMap_33 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_33";

	

 



/**
 * [tMap_33 process_data_begin ] stop
 */
// Start of branch "copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0"
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0 != null) { 



	
	/**
	 * [tUniqRow_30 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_30";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0");
					}
					
row73 = null;			
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.TRADEAGREEMENTJOURNALNUMBER == null){
	finder_tUniqRow_30.TRADEAGREEMENTJOURNALNUMBER = null;
}else{
	finder_tUniqRow_30.TRADEAGREEMENTJOURNALNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.TRADEAGREEMENTJOURNALNUMBER.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.ITEMNUMBER == null){
	finder_tUniqRow_30.ITEMNUMBER = null;
}else{
	finder_tUniqRow_30.ITEMNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.ITEMNUMBER.toLowerCase();
}
finder_tUniqRow_30.PRICE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRICE;
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRICECURRENCYCODE == null){
	finder_tUniqRow_30.PRICECURRENCYCODE = null;
}else{
	finder_tUniqRow_30.PRICECURRENCYCODE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRICECURRENCYCODE.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRICECUSTOMERGROUPCODE == null){
	finder_tUniqRow_30.PRICECUSTOMERGROUPCODE = null;
}else{
	finder_tUniqRow_30.PRICECUSTOMERGROUPCODE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRODUCTCOLORID == null){
	finder_tUniqRow_30.PRODUCTCOLORID = null;
}else{
	finder_tUniqRow_30.PRODUCTCOLORID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRODUCTCOLORID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRODUCTSIZEID == null){
	finder_tUniqRow_30.PRODUCTSIZEID = null;
}else{
	finder_tUniqRow_30.PRODUCTSIZEID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRODUCTSIZEID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRODUCTSTYLEID == null){
	finder_tUniqRow_30.PRODUCTSTYLEID = null;
}else{
	finder_tUniqRow_30.PRODUCTSTYLEID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRODUCTSTYLEID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.QUANTITYUNITSYMBOL == null){
	finder_tUniqRow_30.QUANTITYUNITSYMBOL = null;
}else{
	finder_tUniqRow_30.QUANTITYUNITSYMBOL = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.QUANTITYUNITSYMBOL.toLowerCase();
}	
finder_tUniqRow_30.hashCodeDirty = true;
if (!keystUniqRow_30.contains(finder_tUniqRow_30)) {
		KeyStruct_tUniqRow_30 new_tUniqRow_30 = new KeyStruct_tUniqRow_30();

		
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.TRADEAGREEMENTJOURNALNUMBER == null){
	new_tUniqRow_30.TRADEAGREEMENTJOURNALNUMBER = null;
}else{
	new_tUniqRow_30.TRADEAGREEMENTJOURNALNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.TRADEAGREEMENTJOURNALNUMBER.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.ITEMNUMBER == null){
	new_tUniqRow_30.ITEMNUMBER = null;
}else{
	new_tUniqRow_30.ITEMNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.ITEMNUMBER.toLowerCase();
}
new_tUniqRow_30.PRICE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRICE;
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRICECURRENCYCODE == null){
	new_tUniqRow_30.PRICECURRENCYCODE = null;
}else{
	new_tUniqRow_30.PRICECURRENCYCODE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRICECURRENCYCODE.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRICECUSTOMERGROUPCODE == null){
	new_tUniqRow_30.PRICECUSTOMERGROUPCODE = null;
}else{
	new_tUniqRow_30.PRICECUSTOMERGROUPCODE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRODUCTCOLORID == null){
	new_tUniqRow_30.PRODUCTCOLORID = null;
}else{
	new_tUniqRow_30.PRODUCTCOLORID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRODUCTCOLORID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRODUCTSIZEID == null){
	new_tUniqRow_30.PRODUCTSIZEID = null;
}else{
	new_tUniqRow_30.PRODUCTSIZEID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRODUCTSIZEID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRODUCTSTYLEID == null){
	new_tUniqRow_30.PRODUCTSTYLEID = null;
}else{
	new_tUniqRow_30.PRODUCTSTYLEID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRODUCTSTYLEID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.QUANTITYUNITSYMBOL == null){
	new_tUniqRow_30.QUANTITYUNITSYMBOL = null;
}else{
	new_tUniqRow_30.QUANTITYUNITSYMBOL = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.QUANTITYUNITSYMBOL.toLowerCase();
}
		
		keystUniqRow_30.add(new_tUniqRow_30);if(row73 == null){ 
	
	row73 = new row73Struct();
}row73.TRADEAGREEMENTJOURNALNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.TRADEAGREEMENTJOURNALNUMBER;			row73.ITEMNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.ITEMNUMBER;			row73.PRICE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRICE;			row73.PRICECURRENCYCODE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRICECURRENCYCODE;			row73.PRICECUSTOMERGROUPCODE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRICECUSTOMERGROUPCODE;			row73.PRODUCTCOLORID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRODUCTCOLORID;			row73.PRODUCTSIZEID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRODUCTSIZEID;			row73.PRODUCTSTYLEID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRODUCTSTYLEID;			row73.QUANTITYUNITSYMBOL = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.QUANTITYUNITSYMBOL;					
		nb_uniques_tUniqRow_30++;
	} else {
	  nb_duplicates_tUniqRow_30++;
	}

 


	tos_count_tUniqRow_30++;

/**
 * [tUniqRow_30 main ] stop
 */
	
	/**
	 * [tUniqRow_30 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_30";

	

 



/**
 * [tUniqRow_30 process_data_begin ] stop
 */
// Start of branch "row73"
if(row73 != null) { 



	
	/**
	 * [tFilterRow_14 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_14";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row73");
					}
					

          row74 = null;
    Operator_tFilterRow_14 ope_tFilterRow_14 = new Operator_tFilterRow_14("&&");
            ope_tFilterRow_14.matches((row73.PRICE == null? false : row73.PRICE.compareTo(ParserUtils.parseTo_Double(String.valueOf(0))) > 0)
                           , "PRICE.compareTo(0) > 0 failed");
		 	
    
    if (ope_tFilterRow_14.getMatchFlag()) {
              if(row74 == null){ 
                row74 = new row74Struct();
              }
               row74.TRADEAGREEMENTJOURNALNUMBER = row73.TRADEAGREEMENTJOURNALNUMBER;
               row74.ITEMNUMBER = row73.ITEMNUMBER;
               row74.PRICE = row73.PRICE;
               row74.PRICECURRENCYCODE = row73.PRICECURRENCYCODE;
               row74.PRICECUSTOMERGROUPCODE = row73.PRICECUSTOMERGROUPCODE;
               row74.PRODUCTCOLORID = row73.PRODUCTCOLORID;
               row74.PRODUCTSIZEID = row73.PRODUCTSIZEID;
               row74.PRODUCTSTYLEID = row73.PRODUCTSTYLEID;
               row74.QUANTITYUNITSYMBOL = row73.QUANTITYUNITSYMBOL;    
      nb_line_ok_tFilterRow_14++;
    } else {
      nb_line_reject_tFilterRow_14++;
    }

nb_line_tFilterRow_14++;

 


	tos_count_tFilterRow_14++;

/**
 * [tFilterRow_14 main ] stop
 */
	
	/**
	 * [tFilterRow_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_14";

	

 



/**
 * [tFilterRow_14 process_data_begin ] stop
 */
// Start of branch "row74"
if(row74 != null) { 



	
	/**
	 * [tHashOutput_21 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_21";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row74");
					}
					



    
		row74Struct oneRow_tHashOutput_21 = new row74Struct();
				
					oneRow_tHashOutput_21.TRADEAGREEMENTJOURNALNUMBER = row74.TRADEAGREEMENTJOURNALNUMBER;
					oneRow_tHashOutput_21.ITEMNUMBER = row74.ITEMNUMBER;
					oneRow_tHashOutput_21.PRICE = row74.PRICE;
					oneRow_tHashOutput_21.PRICECURRENCYCODE = row74.PRICECURRENCYCODE;
					oneRow_tHashOutput_21.PRICECUSTOMERGROUPCODE = row74.PRICECUSTOMERGROUPCODE;
					oneRow_tHashOutput_21.PRODUCTCOLORID = row74.PRODUCTCOLORID;
					oneRow_tHashOutput_21.PRODUCTSIZEID = row74.PRODUCTSIZEID;
					oneRow_tHashOutput_21.PRODUCTSTYLEID = row74.PRODUCTSTYLEID;
					oneRow_tHashOutput_21.QUANTITYUNITSYMBOL = row74.QUANTITYUNITSYMBOL;
		
        tHashFile_tHashOutput_21.put(oneRow_tHashOutput_21);
        nb_line_tHashOutput_21 ++;
 


	tos_count_tHashOutput_21++;

/**
 * [tHashOutput_21 main ] stop
 */
	
	/**
	 * [tHashOutput_21 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_21";

	

 



/**
 * [tHashOutput_21 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_21 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_21";

	

 



/**
 * [tHashOutput_21 process_data_end ] stop
 */

} // End of branch "row74"




	
	/**
	 * [tFilterRow_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_14";

	

 



/**
 * [tFilterRow_14 process_data_end ] stop
 */

} // End of branch "row73"




	
	/**
	 * [tUniqRow_30 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_30";

	

 



/**
 * [tUniqRow_30 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0"




// Start of branch "sortie_full_EUR_FIN_WSP"
if(sortie_full_EUR_FIN_WSP != null) { 



	
	/**
	 * [tMap_34 main ] start
	 */

	

	
	
	currentComponent="tMap_34";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_full_EUR_FIN_WSP");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_34 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_34 = false;
		  boolean mainRowRejected_tMap_34 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_34__Struct Var = Var__tMap_34;// ###############################
        // ###############################
        // # Output tables

copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0 = null;


// # Output table : 'copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0'
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0_tmp.TRADEAGREEMENTJOURNALNUMBER = "HBE1-" + globalMap.get("SalesJournalNumber");
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0_tmp.ITEMNUMBER = sortie_full_EUR_FIN_WSP.STYLE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0_tmp.PRICE = sortie_full_EUR_FIN_WSP.EUR_FINN_RRP  == null ? 0 : Mathematical.REAL( sortie_full_EUR_FIN_WSP.EUR_FINN_RRP.replaceAll(",", ".") ) ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0_tmp.PRICECURRENCYCODE = "EUR";
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0_tmp.PRICECUSTOMERGROUPCODE = "RRP_FI";
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0_tmp.PRODUCTCOLORID = sortie_full_EUR_FIN_WSP.COLOR ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0_tmp.PRODUCTSIZEID = sortie_full_EUR_FIN_WSP.SIZE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0_tmp.PRODUCTSTYLEID = sortie_full_EUR_FIN_WSP.LBL ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0_tmp.QUANTITYUNITSYMBOL = "PCS";
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0 = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_34 = false;










 


	tos_count_tMap_34++;

/**
 * [tMap_34 main ] stop
 */
	
	/**
	 * [tMap_34 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_34";

	

 



/**
 * [tMap_34 process_data_begin ] stop
 */
// Start of branch "copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0"
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0 != null) { 



	
	/**
	 * [tUniqRow_31 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_31";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0");
					}
					
row75 = null;			
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.TRADEAGREEMENTJOURNALNUMBER == null){
	finder_tUniqRow_31.TRADEAGREEMENTJOURNALNUMBER = null;
}else{
	finder_tUniqRow_31.TRADEAGREEMENTJOURNALNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.TRADEAGREEMENTJOURNALNUMBER.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.ITEMNUMBER == null){
	finder_tUniqRow_31.ITEMNUMBER = null;
}else{
	finder_tUniqRow_31.ITEMNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.ITEMNUMBER.toLowerCase();
}
finder_tUniqRow_31.PRICE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRICE;
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRICECURRENCYCODE == null){
	finder_tUniqRow_31.PRICECURRENCYCODE = null;
}else{
	finder_tUniqRow_31.PRICECURRENCYCODE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRICECURRENCYCODE.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRICECUSTOMERGROUPCODE == null){
	finder_tUniqRow_31.PRICECUSTOMERGROUPCODE = null;
}else{
	finder_tUniqRow_31.PRICECUSTOMERGROUPCODE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRODUCTCOLORID == null){
	finder_tUniqRow_31.PRODUCTCOLORID = null;
}else{
	finder_tUniqRow_31.PRODUCTCOLORID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRODUCTCOLORID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRODUCTSIZEID == null){
	finder_tUniqRow_31.PRODUCTSIZEID = null;
}else{
	finder_tUniqRow_31.PRODUCTSIZEID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRODUCTSIZEID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRODUCTSTYLEID == null){
	finder_tUniqRow_31.PRODUCTSTYLEID = null;
}else{
	finder_tUniqRow_31.PRODUCTSTYLEID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRODUCTSTYLEID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.QUANTITYUNITSYMBOL == null){
	finder_tUniqRow_31.QUANTITYUNITSYMBOL = null;
}else{
	finder_tUniqRow_31.QUANTITYUNITSYMBOL = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.QUANTITYUNITSYMBOL.toLowerCase();
}	
finder_tUniqRow_31.hashCodeDirty = true;
if (!keystUniqRow_31.contains(finder_tUniqRow_31)) {
		KeyStruct_tUniqRow_31 new_tUniqRow_31 = new KeyStruct_tUniqRow_31();

		
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.TRADEAGREEMENTJOURNALNUMBER == null){
	new_tUniqRow_31.TRADEAGREEMENTJOURNALNUMBER = null;
}else{
	new_tUniqRow_31.TRADEAGREEMENTJOURNALNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.TRADEAGREEMENTJOURNALNUMBER.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.ITEMNUMBER == null){
	new_tUniqRow_31.ITEMNUMBER = null;
}else{
	new_tUniqRow_31.ITEMNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.ITEMNUMBER.toLowerCase();
}
new_tUniqRow_31.PRICE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRICE;
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRICECURRENCYCODE == null){
	new_tUniqRow_31.PRICECURRENCYCODE = null;
}else{
	new_tUniqRow_31.PRICECURRENCYCODE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRICECURRENCYCODE.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRICECUSTOMERGROUPCODE == null){
	new_tUniqRow_31.PRICECUSTOMERGROUPCODE = null;
}else{
	new_tUniqRow_31.PRICECUSTOMERGROUPCODE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRODUCTCOLORID == null){
	new_tUniqRow_31.PRODUCTCOLORID = null;
}else{
	new_tUniqRow_31.PRODUCTCOLORID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRODUCTCOLORID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRODUCTSIZEID == null){
	new_tUniqRow_31.PRODUCTSIZEID = null;
}else{
	new_tUniqRow_31.PRODUCTSIZEID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRODUCTSIZEID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRODUCTSTYLEID == null){
	new_tUniqRow_31.PRODUCTSTYLEID = null;
}else{
	new_tUniqRow_31.PRODUCTSTYLEID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRODUCTSTYLEID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.QUANTITYUNITSYMBOL == null){
	new_tUniqRow_31.QUANTITYUNITSYMBOL = null;
}else{
	new_tUniqRow_31.QUANTITYUNITSYMBOL = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.QUANTITYUNITSYMBOL.toLowerCase();
}
		
		keystUniqRow_31.add(new_tUniqRow_31);if(row75 == null){ 
	
	row75 = new row75Struct();
}row75.TRADEAGREEMENTJOURNALNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.TRADEAGREEMENTJOURNALNUMBER;			row75.ITEMNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.ITEMNUMBER;			row75.PRICE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRICE;			row75.PRICECURRENCYCODE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRICECURRENCYCODE;			row75.PRICECUSTOMERGROUPCODE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRICECUSTOMERGROUPCODE;			row75.PRODUCTCOLORID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRODUCTCOLORID;			row75.PRODUCTSIZEID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRODUCTSIZEID;			row75.PRODUCTSTYLEID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRODUCTSTYLEID;			row75.QUANTITYUNITSYMBOL = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.QUANTITYUNITSYMBOL;					
		nb_uniques_tUniqRow_31++;
	} else {
	  nb_duplicates_tUniqRow_31++;
	}

 


	tos_count_tUniqRow_31++;

/**
 * [tUniqRow_31 main ] stop
 */
	
	/**
	 * [tUniqRow_31 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_31";

	

 



/**
 * [tUniqRow_31 process_data_begin ] stop
 */
// Start of branch "row75"
if(row75 != null) { 



	
	/**
	 * [tFilterRow_15 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_15";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row75");
					}
					

          row76 = null;
    Operator_tFilterRow_15 ope_tFilterRow_15 = new Operator_tFilterRow_15("&&");
            ope_tFilterRow_15.matches((row75.PRICE == null? false : row75.PRICE.compareTo(ParserUtils.parseTo_Double(String.valueOf(0))) > 0)
                           , "PRICE.compareTo(0) > 0 failed");
		 	
    
    if (ope_tFilterRow_15.getMatchFlag()) {
              if(row76 == null){ 
                row76 = new row76Struct();
              }
               row76.TRADEAGREEMENTJOURNALNUMBER = row75.TRADEAGREEMENTJOURNALNUMBER;
               row76.ITEMNUMBER = row75.ITEMNUMBER;
               row76.PRICE = row75.PRICE;
               row76.PRICECURRENCYCODE = row75.PRICECURRENCYCODE;
               row76.PRICECUSTOMERGROUPCODE = row75.PRICECUSTOMERGROUPCODE;
               row76.PRODUCTCOLORID = row75.PRODUCTCOLORID;
               row76.PRODUCTSIZEID = row75.PRODUCTSIZEID;
               row76.PRODUCTSTYLEID = row75.PRODUCTSTYLEID;
               row76.QUANTITYUNITSYMBOL = row75.QUANTITYUNITSYMBOL;    
      nb_line_ok_tFilterRow_15++;
    } else {
      nb_line_reject_tFilterRow_15++;
    }

nb_line_tFilterRow_15++;

 


	tos_count_tFilterRow_15++;

/**
 * [tFilterRow_15 main ] stop
 */
	
	/**
	 * [tFilterRow_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_15";

	

 



/**
 * [tFilterRow_15 process_data_begin ] stop
 */
// Start of branch "row76"
if(row76 != null) { 



	
	/**
	 * [tHashOutput_22 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_22";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row76");
					}
					



    
		row76Struct oneRow_tHashOutput_22 = new row76Struct();
				
					oneRow_tHashOutput_22.TRADEAGREEMENTJOURNALNUMBER = row76.TRADEAGREEMENTJOURNALNUMBER;
					oneRow_tHashOutput_22.ITEMNUMBER = row76.ITEMNUMBER;
					oneRow_tHashOutput_22.PRICE = row76.PRICE;
					oneRow_tHashOutput_22.PRICECURRENCYCODE = row76.PRICECURRENCYCODE;
					oneRow_tHashOutput_22.PRICECUSTOMERGROUPCODE = row76.PRICECUSTOMERGROUPCODE;
					oneRow_tHashOutput_22.PRODUCTCOLORID = row76.PRODUCTCOLORID;
					oneRow_tHashOutput_22.PRODUCTSIZEID = row76.PRODUCTSIZEID;
					oneRow_tHashOutput_22.PRODUCTSTYLEID = row76.PRODUCTSTYLEID;
					oneRow_tHashOutput_22.QUANTITYUNITSYMBOL = row76.QUANTITYUNITSYMBOL;
		
        tHashFile_tHashOutput_22.put(oneRow_tHashOutput_22);
        nb_line_tHashOutput_22 ++;
 


	tos_count_tHashOutput_22++;

/**
 * [tHashOutput_22 main ] stop
 */
	
	/**
	 * [tHashOutput_22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_22";

	

 



/**
 * [tHashOutput_22 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_22 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_22";

	

 



/**
 * [tHashOutput_22 process_data_end ] stop
 */

} // End of branch "row76"




	
	/**
	 * [tFilterRow_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_15";

	

 



/**
 * [tFilterRow_15 process_data_end ] stop
 */

} // End of branch "row75"




	
	/**
	 * [tUniqRow_31 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_31";

	

 



/**
 * [tUniqRow_31 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0"




	
	/**
	 * [tMap_34 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_34";

	

 



/**
 * [tMap_34 process_data_end ] stop
 */

} // End of branch "sortie_full_EUR_FIN_WSP"




	
	/**
	 * [tMap_33 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_33";

	

 



/**
 * [tMap_33 process_data_end ] stop
 */

} // End of branch "sortie_full_SEK_RRP"




	
	/**
	 * [tMap_32 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_32";

	

 



/**
 * [tMap_32 process_data_end ] stop
 */

} // End of branch "sortie_full_SEK_WSP"




	
	/**
	 * [tMap_31 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_31";

	

 



/**
 * [tMap_31 process_data_end ] stop
 */

} // End of branch "sortie_full_DKK_WSP"




	
	/**
	 * [tMap_30 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_30";

	

 



/**
 * [tMap_30 process_data_end ] stop
 */

} // End of branch "sortie_full_DKK_RRP"




	
	/**
	 * [tMap_29 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_29";

	

 



/**
 * [tMap_29 process_data_end ] stop
 */

} // End of branch "sortie_full_nok_rrp"




	
	/**
	 * [tMap_28 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_28";

	

 



/**
 * [tMap_28 process_data_end ] stop
 */

} // End of branch "sortie_full_NOK_WSP"




	
	/**
	 * [tMap_27 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_27";

	

 



/**
 * [tMap_27 process_data_end ] stop
 */

} // End of branch "sortie_full_chr_rrp"




	
	/**
	 * [tMap_26 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_26";

	

 



/**
 * [tMap_26 process_data_end ] stop
 */

} // End of branch "sortie_full_CHF_WSP"




	
	/**
	 * [tMap_25 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_25";

	

 



/**
 * [tMap_25 process_data_end ] stop
 */

} // End of branch "sortie_full_GBP_RRP"




	
	/**
	 * [tMap_24 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_24";

	

 



/**
 * [tMap_24 process_data_end ] stop
 */

} // End of branch "sortie_full_gbp_wsp"




	
	/**
	 * [tMap_23 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_23";

	

 



/**
 * [tMap_23 process_data_end ] stop
 */

} // End of branch "sortie_full_rrp_eur"




	
	/**
	 * [tMap_21 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_21";

	

 



/**
 * [tMap_21 process_data_end ] stop
 */

} // End of branch "sortie_full_eur_wsp"




	
	/**
	 * [tMap_20 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_20";

	

 



/**
 * [tMap_20 process_data_end ] stop
 */

} // End of branch "sortie_Excel"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */

} // End of branch "row3"




	
	/**
	 * [tFileInputExcel_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_2";

	

 



/**
 * [tFileInputExcel_2 process_data_end ] stop
 */
	
	/**
	 * [tFileInputExcel_2 end ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_2";

	

			}
			
			
			
			globalMap.put("tFileInputExcel_2_NB_LINE",nb_line_tFileInputExcel_2);
			
				}
			
		} finally { 
				
  				if(!(source_tFileInputExcel_2 instanceof java.io.InputStream)){
  					workbook_tFileInputExcel_2.getPackage().revert();
  				}
				
		}	
		
 

ok_Hash.put("tFileInputExcel_2", true);
end_Hash.put("tFileInputExcel_2", System.currentTimeMillis());




/**
 * [tFileInputExcel_2 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tMap_20 end ] start
	 */

	

	
	
	currentComponent="tMap_20";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_Excel");
			  	}
			  	
 

ok_Hash.put("tMap_20", true);
end_Hash.put("tMap_20", System.currentTimeMillis());




/**
 * [tMap_20 end ] stop
 */

	
	/**
	 * [tUniqRow_18 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_18";

	

globalMap.put("tUniqRow_18_NB_UNIQUES",nb_uniques_tUniqRow_18);
globalMap.put("tUniqRow_18_NB_DUPLICATES",nb_duplicates_tUniqRow_18);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_EUR_WSP");
			  	}
			  	
 

ok_Hash.put("tUniqRow_18", true);
end_Hash.put("tUniqRow_18", System.currentTimeMillis());




/**
 * [tUniqRow_18 end ] stop
 */

	
	/**
	 * [tFilterRow_2 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";

	
    globalMap.put("tFilterRow_2_NB_LINE", nb_line_tFilterRow_2);
    globalMap.put("tFilterRow_2_NB_LINE_OK", nb_line_ok_tFilterRow_2);
    globalMap.put("tFilterRow_2_NB_LINE_REJECT", nb_line_reject_tFilterRow_2);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row35");
			  	}
			  	
 

ok_Hash.put("tFilterRow_2", true);
end_Hash.put("tFilterRow_2", System.currentTimeMillis());




/**
 * [tFilterRow_2 end ] stop
 */

	
	/**
	 * [tHashOutput_9 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_9";

	
globalMap.put("tHashOutput_9_NB_LINE", nb_line_tHashOutput_9);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row37");
			  	}
			  	
 

ok_Hash.put("tHashOutput_9", true);
end_Hash.put("tHashOutput_9", System.currentTimeMillis());




/**
 * [tHashOutput_9 end ] stop
 */










	
	/**
	 * [tMap_21 end ] start
	 */

	

	
	
	currentComponent="tMap_21";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_full_eur_wsp");
			  	}
			  	
 

ok_Hash.put("tMap_21", true);
end_Hash.put("tMap_21", System.currentTimeMillis());




/**
 * [tMap_21 end ] stop
 */

	
	/**
	 * [tUniqRow_19 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_19";

	

globalMap.put("tUniqRow_19_NB_UNIQUES",nb_uniques_tUniqRow_19);
globalMap.put("tUniqRow_19_NB_DUPLICATES",nb_duplicates_tUniqRow_19);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfsortie_EUR_WSP");
			  	}
			  	
 

ok_Hash.put("tUniqRow_19", true);
end_Hash.put("tUniqRow_19", System.currentTimeMillis());




/**
 * [tUniqRow_19 end ] stop
 */

	
	/**
	 * [tFilterRow_3 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_3";

	
    globalMap.put("tFilterRow_3_NB_LINE", nb_line_tFilterRow_3);
    globalMap.put("tFilterRow_3_NB_LINE_OK", nb_line_ok_tFilterRow_3);
    globalMap.put("tFilterRow_3_NB_LINE_REJECT", nb_line_reject_tFilterRow_3);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row36");
			  	}
			  	
 

ok_Hash.put("tFilterRow_3", true);
end_Hash.put("tFilterRow_3", System.currentTimeMillis());




/**
 * [tFilterRow_3 end ] stop
 */

	
	/**
	 * [tHashOutput_10 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_10";

	
globalMap.put("tHashOutput_10_NB_LINE", nb_line_tHashOutput_10);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row38");
			  	}
			  	
 

ok_Hash.put("tHashOutput_10", true);
end_Hash.put("tHashOutput_10", System.currentTimeMillis());




/**
 * [tHashOutput_10 end ] stop
 */










	
	/**
	 * [tMap_23 end ] start
	 */

	

	
	
	currentComponent="tMap_23";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_full_rrp_eur");
			  	}
			  	
 

ok_Hash.put("tMap_23", true);
end_Hash.put("tMap_23", System.currentTimeMillis());




/**
 * [tMap_23 end ] stop
 */

	
	/**
	 * [tUniqRow_20 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_20";

	

globalMap.put("tUniqRow_20_NB_UNIQUES",nb_uniques_tUniqRow_20);
globalMap.put("tUniqRow_20_NB_DUPLICATES",nb_duplicates_tUniqRow_20);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfsortie_EUR_WSP_0");
			  	}
			  	
 

ok_Hash.put("tUniqRow_20", true);
end_Hash.put("tUniqRow_20", System.currentTimeMillis());




/**
 * [tUniqRow_20 end ] stop
 */

	
	/**
	 * [tFilterRow_4 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_4";

	
    globalMap.put("tFilterRow_4_NB_LINE", nb_line_tFilterRow_4);
    globalMap.put("tFilterRow_4_NB_LINE_OK", nb_line_ok_tFilterRow_4);
    globalMap.put("tFilterRow_4_NB_LINE_REJECT", nb_line_reject_tFilterRow_4);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row43");
			  	}
			  	
 

ok_Hash.put("tFilterRow_4", true);
end_Hash.put("tFilterRow_4", System.currentTimeMillis());




/**
 * [tFilterRow_4 end ] stop
 */

	
	/**
	 * [tHashOutput_11 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_11";

	
globalMap.put("tHashOutput_11_NB_LINE", nb_line_tHashOutput_11);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row44");
			  	}
			  	
 

ok_Hash.put("tHashOutput_11", true);
end_Hash.put("tHashOutput_11", System.currentTimeMillis());




/**
 * [tHashOutput_11 end ] stop
 */










	
	/**
	 * [tMap_24 end ] start
	 */

	

	
	
	currentComponent="tMap_24";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_full_gbp_wsp");
			  	}
			  	
 

ok_Hash.put("tMap_24", true);
end_Hash.put("tMap_24", System.currentTimeMillis());




/**
 * [tMap_24 end ] stop
 */

	
	/**
	 * [tUniqRow_21 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_21";

	

globalMap.put("tUniqRow_21_NB_UNIQUES",nb_uniques_tUniqRow_21);
globalMap.put("tUniqRow_21_NB_DUPLICATES",nb_duplicates_tUniqRow_21);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfsortie_EUR_WSP_0");
			  	}
			  	
 

ok_Hash.put("tUniqRow_21", true);
end_Hash.put("tUniqRow_21", System.currentTimeMillis());




/**
 * [tUniqRow_21 end ] stop
 */

	
	/**
	 * [tFilterRow_5 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_5";

	
    globalMap.put("tFilterRow_5_NB_LINE", nb_line_tFilterRow_5);
    globalMap.put("tFilterRow_5_NB_LINE_OK", nb_line_ok_tFilterRow_5);
    globalMap.put("tFilterRow_5_NB_LINE_REJECT", nb_line_reject_tFilterRow_5);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row45");
			  	}
			  	
 

ok_Hash.put("tFilterRow_5", true);
end_Hash.put("tFilterRow_5", System.currentTimeMillis());




/**
 * [tFilterRow_5 end ] stop
 */

	
	/**
	 * [tHashOutput_12 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_12";

	
globalMap.put("tHashOutput_12_NB_LINE", nb_line_tHashOutput_12);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row46");
			  	}
			  	
 

ok_Hash.put("tHashOutput_12", true);
end_Hash.put("tHashOutput_12", System.currentTimeMillis());




/**
 * [tHashOutput_12 end ] stop
 */










	
	/**
	 * [tMap_25 end ] start
	 */

	

	
	
	currentComponent="tMap_25";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_full_GBP_RRP");
			  	}
			  	
 

ok_Hash.put("tMap_25", true);
end_Hash.put("tMap_25", System.currentTimeMillis());




/**
 * [tMap_25 end ] stop
 */

	
	/**
	 * [tUniqRow_22 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_22";

	

globalMap.put("tUniqRow_22_NB_UNIQUES",nb_uniques_tUniqRow_22);
globalMap.put("tUniqRow_22_NB_DUPLICATES",nb_duplicates_tUniqRow_22);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfcopyOfsortie_EUR_WSP_0");
			  	}
			  	
 

ok_Hash.put("tUniqRow_22", true);
end_Hash.put("tUniqRow_22", System.currentTimeMillis());




/**
 * [tUniqRow_22 end ] stop
 */

	
	/**
	 * [tFilterRow_6 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_6";

	
    globalMap.put("tFilterRow_6_NB_LINE", nb_line_tFilterRow_6);
    globalMap.put("tFilterRow_6_NB_LINE_OK", nb_line_ok_tFilterRow_6);
    globalMap.put("tFilterRow_6_NB_LINE_REJECT", nb_line_reject_tFilterRow_6);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row47");
			  	}
			  	
 

ok_Hash.put("tFilterRow_6", true);
end_Hash.put("tFilterRow_6", System.currentTimeMillis());




/**
 * [tFilterRow_6 end ] stop
 */

	
	/**
	 * [tHashOutput_13 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_13";

	
globalMap.put("tHashOutput_13_NB_LINE", nb_line_tHashOutput_13);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row48");
			  	}
			  	
 

ok_Hash.put("tHashOutput_13", true);
end_Hash.put("tHashOutput_13", System.currentTimeMillis());




/**
 * [tHashOutput_13 end ] stop
 */










	
	/**
	 * [tMap_26 end ] start
	 */

	

	
	
	currentComponent="tMap_26";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_full_CHF_WSP");
			  	}
			  	
 

ok_Hash.put("tMap_26", true);
end_Hash.put("tMap_26", System.currentTimeMillis());




/**
 * [tMap_26 end ] stop
 */

	
	/**
	 * [tUniqRow_23 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_23";

	

globalMap.put("tUniqRow_23_NB_UNIQUES",nb_uniques_tUniqRow_23);
globalMap.put("tUniqRow_23_NB_DUPLICATES",nb_duplicates_tUniqRow_23);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0");
			  	}
			  	
 

ok_Hash.put("tUniqRow_23", true);
end_Hash.put("tUniqRow_23", System.currentTimeMillis());




/**
 * [tUniqRow_23 end ] stop
 */

	
	/**
	 * [tFilterRow_7 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_7";

	
    globalMap.put("tFilterRow_7_NB_LINE", nb_line_tFilterRow_7);
    globalMap.put("tFilterRow_7_NB_LINE_OK", nb_line_ok_tFilterRow_7);
    globalMap.put("tFilterRow_7_NB_LINE_REJECT", nb_line_reject_tFilterRow_7);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row49");
			  	}
			  	
 

ok_Hash.put("tFilterRow_7", true);
end_Hash.put("tFilterRow_7", System.currentTimeMillis());




/**
 * [tFilterRow_7 end ] stop
 */

	
	/**
	 * [tHashOutput_14 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_14";

	
globalMap.put("tHashOutput_14_NB_LINE", nb_line_tHashOutput_14);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row50");
			  	}
			  	
 

ok_Hash.put("tHashOutput_14", true);
end_Hash.put("tHashOutput_14", System.currentTimeMillis());




/**
 * [tHashOutput_14 end ] stop
 */










	
	/**
	 * [tMap_27 end ] start
	 */

	

	
	
	currentComponent="tMap_27";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_full_chr_rrp");
			  	}
			  	
 

ok_Hash.put("tMap_27", true);
end_Hash.put("tMap_27", System.currentTimeMillis());




/**
 * [tMap_27 end ] stop
 */

	
	/**
	 * [tUniqRow_24 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_24";

	

globalMap.put("tUniqRow_24_NB_UNIQUES",nb_uniques_tUniqRow_24);
globalMap.put("tUniqRow_24_NB_DUPLICATES",nb_duplicates_tUniqRow_24);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0");
			  	}
			  	
 

ok_Hash.put("tUniqRow_24", true);
end_Hash.put("tUniqRow_24", System.currentTimeMillis());




/**
 * [tUniqRow_24 end ] stop
 */

	
	/**
	 * [tFilterRow_8 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_8";

	
    globalMap.put("tFilterRow_8_NB_LINE", nb_line_tFilterRow_8);
    globalMap.put("tFilterRow_8_NB_LINE_OK", nb_line_ok_tFilterRow_8);
    globalMap.put("tFilterRow_8_NB_LINE_REJECT", nb_line_reject_tFilterRow_8);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row55");
			  	}
			  	
 

ok_Hash.put("tFilterRow_8", true);
end_Hash.put("tFilterRow_8", System.currentTimeMillis());




/**
 * [tFilterRow_8 end ] stop
 */

	
	/**
	 * [tHashOutput_15 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_15";

	
globalMap.put("tHashOutput_15_NB_LINE", nb_line_tHashOutput_15);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row56");
			  	}
			  	
 

ok_Hash.put("tHashOutput_15", true);
end_Hash.put("tHashOutput_15", System.currentTimeMillis());




/**
 * [tHashOutput_15 end ] stop
 */










	
	/**
	 * [tMap_28 end ] start
	 */

	

	
	
	currentComponent="tMap_28";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_full_NOK_WSP");
			  	}
			  	
 

ok_Hash.put("tMap_28", true);
end_Hash.put("tMap_28", System.currentTimeMillis());




/**
 * [tMap_28 end ] stop
 */

	
	/**
	 * [tUniqRow_25 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_25";

	

globalMap.put("tUniqRow_25_NB_UNIQUES",nb_uniques_tUniqRow_25);
globalMap.put("tUniqRow_25_NB_DUPLICATES",nb_duplicates_tUniqRow_25);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0");
			  	}
			  	
 

ok_Hash.put("tUniqRow_25", true);
end_Hash.put("tUniqRow_25", System.currentTimeMillis());




/**
 * [tUniqRow_25 end ] stop
 */

	
	/**
	 * [tFilterRow_9 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_9";

	
    globalMap.put("tFilterRow_9_NB_LINE", nb_line_tFilterRow_9);
    globalMap.put("tFilterRow_9_NB_LINE_OK", nb_line_ok_tFilterRow_9);
    globalMap.put("tFilterRow_9_NB_LINE_REJECT", nb_line_reject_tFilterRow_9);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row57");
			  	}
			  	
 

ok_Hash.put("tFilterRow_9", true);
end_Hash.put("tFilterRow_9", System.currentTimeMillis());




/**
 * [tFilterRow_9 end ] stop
 */

	
	/**
	 * [tHashOutput_16 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_16";

	
globalMap.put("tHashOutput_16_NB_LINE", nb_line_tHashOutput_16);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row58");
			  	}
			  	
 

ok_Hash.put("tHashOutput_16", true);
end_Hash.put("tHashOutput_16", System.currentTimeMillis());




/**
 * [tHashOutput_16 end ] stop
 */










	
	/**
	 * [tMap_29 end ] start
	 */

	

	
	
	currentComponent="tMap_29";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_full_nok_rrp");
			  	}
			  	
 

ok_Hash.put("tMap_29", true);
end_Hash.put("tMap_29", System.currentTimeMillis());




/**
 * [tMap_29 end ] stop
 */

	
	/**
	 * [tUniqRow_26 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_26";

	

globalMap.put("tUniqRow_26_NB_UNIQUES",nb_uniques_tUniqRow_26);
globalMap.put("tUniqRow_26_NB_DUPLICATES",nb_duplicates_tUniqRow_26);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0");
			  	}
			  	
 

ok_Hash.put("tUniqRow_26", true);
end_Hash.put("tUniqRow_26", System.currentTimeMillis());




/**
 * [tUniqRow_26 end ] stop
 */

	
	/**
	 * [tFilterRow_10 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_10";

	
    globalMap.put("tFilterRow_10_NB_LINE", nb_line_tFilterRow_10);
    globalMap.put("tFilterRow_10_NB_LINE_OK", nb_line_ok_tFilterRow_10);
    globalMap.put("tFilterRow_10_NB_LINE_REJECT", nb_line_reject_tFilterRow_10);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row61");
			  	}
			  	
 

ok_Hash.put("tFilterRow_10", true);
end_Hash.put("tFilterRow_10", System.currentTimeMillis());




/**
 * [tFilterRow_10 end ] stop
 */

	
	/**
	 * [tHashOutput_17 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_17";

	
globalMap.put("tHashOutput_17_NB_LINE", nb_line_tHashOutput_17);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row62");
			  	}
			  	
 

ok_Hash.put("tHashOutput_17", true);
end_Hash.put("tHashOutput_17", System.currentTimeMillis());




/**
 * [tHashOutput_17 end ] stop
 */










	
	/**
	 * [tMap_30 end ] start
	 */

	

	
	
	currentComponent="tMap_30";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_full_DKK_RRP");
			  	}
			  	
 

ok_Hash.put("tMap_30", true);
end_Hash.put("tMap_30", System.currentTimeMillis());




/**
 * [tMap_30 end ] stop
 */

	
	/**
	 * [tUniqRow_27 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_27";

	

globalMap.put("tUniqRow_27_NB_UNIQUES",nb_uniques_tUniqRow_27);
globalMap.put("tUniqRow_27_NB_DUPLICATES",nb_duplicates_tUniqRow_27);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0");
			  	}
			  	
 

ok_Hash.put("tUniqRow_27", true);
end_Hash.put("tUniqRow_27", System.currentTimeMillis());




/**
 * [tUniqRow_27 end ] stop
 */

	
	/**
	 * [tFilterRow_11 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_11";

	
    globalMap.put("tFilterRow_11_NB_LINE", nb_line_tFilterRow_11);
    globalMap.put("tFilterRow_11_NB_LINE_OK", nb_line_ok_tFilterRow_11);
    globalMap.put("tFilterRow_11_NB_LINE_REJECT", nb_line_reject_tFilterRow_11);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row64");
			  	}
			  	
 

ok_Hash.put("tFilterRow_11", true);
end_Hash.put("tFilterRow_11", System.currentTimeMillis());




/**
 * [tFilterRow_11 end ] stop
 */

	
	/**
	 * [tHashOutput_18 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_18";

	
globalMap.put("tHashOutput_18_NB_LINE", nb_line_tHashOutput_18);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row63");
			  	}
			  	
 

ok_Hash.put("tHashOutput_18", true);
end_Hash.put("tHashOutput_18", System.currentTimeMillis());




/**
 * [tHashOutput_18 end ] stop
 */










	
	/**
	 * [tMap_31 end ] start
	 */

	

	
	
	currentComponent="tMap_31";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_full_DKK_WSP");
			  	}
			  	
 

ok_Hash.put("tMap_31", true);
end_Hash.put("tMap_31", System.currentTimeMillis());




/**
 * [tMap_31 end ] stop
 */

	
	/**
	 * [tUniqRow_28 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_28";

	

globalMap.put("tUniqRow_28_NB_UNIQUES",nb_uniques_tUniqRow_28);
globalMap.put("tUniqRow_28_NB_DUPLICATES",nb_duplicates_tUniqRow_28);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0");
			  	}
			  	
 

ok_Hash.put("tUniqRow_28", true);
end_Hash.put("tUniqRow_28", System.currentTimeMillis());




/**
 * [tUniqRow_28 end ] stop
 */

	
	/**
	 * [tFilterRow_12 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_12";

	
    globalMap.put("tFilterRow_12_NB_LINE", nb_line_tFilterRow_12);
    globalMap.put("tFilterRow_12_NB_LINE_OK", nb_line_ok_tFilterRow_12);
    globalMap.put("tFilterRow_12_NB_LINE_REJECT", nb_line_reject_tFilterRow_12);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row68");
			  	}
			  	
 

ok_Hash.put("tFilterRow_12", true);
end_Hash.put("tFilterRow_12", System.currentTimeMillis());




/**
 * [tFilterRow_12 end ] stop
 */

	
	/**
	 * [tHashOutput_19 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_19";

	
globalMap.put("tHashOutput_19_NB_LINE", nb_line_tHashOutput_19);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row67");
			  	}
			  	
 

ok_Hash.put("tHashOutput_19", true);
end_Hash.put("tHashOutput_19", System.currentTimeMillis());




/**
 * [tHashOutput_19 end ] stop
 */










	
	/**
	 * [tMap_32 end ] start
	 */

	

	
	
	currentComponent="tMap_32";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_full_SEK_WSP");
			  	}
			  	
 

ok_Hash.put("tMap_32", true);
end_Hash.put("tMap_32", System.currentTimeMillis());




/**
 * [tMap_32 end ] stop
 */

	
	/**
	 * [tUniqRow_29 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_29";

	

globalMap.put("tUniqRow_29_NB_UNIQUES",nb_uniques_tUniqRow_29);
globalMap.put("tUniqRow_29_NB_DUPLICATES",nb_duplicates_tUniqRow_29);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0");
			  	}
			  	
 

ok_Hash.put("tUniqRow_29", true);
end_Hash.put("tUniqRow_29", System.currentTimeMillis());




/**
 * [tUniqRow_29 end ] stop
 */

	
	/**
	 * [tFilterRow_13 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_13";

	
    globalMap.put("tFilterRow_13_NB_LINE", nb_line_tFilterRow_13);
    globalMap.put("tFilterRow_13_NB_LINE_OK", nb_line_ok_tFilterRow_13);
    globalMap.put("tFilterRow_13_NB_LINE_REJECT", nb_line_reject_tFilterRow_13);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row69");
			  	}
			  	
 

ok_Hash.put("tFilterRow_13", true);
end_Hash.put("tFilterRow_13", System.currentTimeMillis());




/**
 * [tFilterRow_13 end ] stop
 */

	
	/**
	 * [tHashOutput_20 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_20";

	
globalMap.put("tHashOutput_20_NB_LINE", nb_line_tHashOutput_20);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row70");
			  	}
			  	
 

ok_Hash.put("tHashOutput_20", true);
end_Hash.put("tHashOutput_20", System.currentTimeMillis());




/**
 * [tHashOutput_20 end ] stop
 */










	
	/**
	 * [tMap_33 end ] start
	 */

	

	
	
	currentComponent="tMap_33";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_full_SEK_RRP");
			  	}
			  	
 

ok_Hash.put("tMap_33", true);
end_Hash.put("tMap_33", System.currentTimeMillis());




/**
 * [tMap_33 end ] stop
 */

	
	/**
	 * [tUniqRow_30 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_30";

	

globalMap.put("tUniqRow_30_NB_UNIQUES",nb_uniques_tUniqRow_30);
globalMap.put("tUniqRow_30_NB_DUPLICATES",nb_duplicates_tUniqRow_30);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0");
			  	}
			  	
 

ok_Hash.put("tUniqRow_30", true);
end_Hash.put("tUniqRow_30", System.currentTimeMillis());




/**
 * [tUniqRow_30 end ] stop
 */

	
	/**
	 * [tFilterRow_14 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_14";

	
    globalMap.put("tFilterRow_14_NB_LINE", nb_line_tFilterRow_14);
    globalMap.put("tFilterRow_14_NB_LINE_OK", nb_line_ok_tFilterRow_14);
    globalMap.put("tFilterRow_14_NB_LINE_REJECT", nb_line_reject_tFilterRow_14);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row73");
			  	}
			  	
 

ok_Hash.put("tFilterRow_14", true);
end_Hash.put("tFilterRow_14", System.currentTimeMillis());




/**
 * [tFilterRow_14 end ] stop
 */

	
	/**
	 * [tHashOutput_21 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_21";

	
globalMap.put("tHashOutput_21_NB_LINE", nb_line_tHashOutput_21);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row74");
			  	}
			  	
 

ok_Hash.put("tHashOutput_21", true);
end_Hash.put("tHashOutput_21", System.currentTimeMillis());




/**
 * [tHashOutput_21 end ] stop
 */










	
	/**
	 * [tMap_34 end ] start
	 */

	

	
	
	currentComponent="tMap_34";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_full_EUR_FIN_WSP");
			  	}
			  	
 

ok_Hash.put("tMap_34", true);
end_Hash.put("tMap_34", System.currentTimeMillis());




/**
 * [tMap_34 end ] stop
 */

	
	/**
	 * [tUniqRow_31 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_31";

	

globalMap.put("tUniqRow_31_NB_UNIQUES",nb_uniques_tUniqRow_31);
globalMap.put("tUniqRow_31_NB_DUPLICATES",nb_duplicates_tUniqRow_31);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0");
			  	}
			  	
 

ok_Hash.put("tUniqRow_31", true);
end_Hash.put("tUniqRow_31", System.currentTimeMillis());




/**
 * [tUniqRow_31 end ] stop
 */

	
	/**
	 * [tFilterRow_15 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_15";

	
    globalMap.put("tFilterRow_15_NB_LINE", nb_line_tFilterRow_15);
    globalMap.put("tFilterRow_15_NB_LINE_OK", nb_line_ok_tFilterRow_15);
    globalMap.put("tFilterRow_15_NB_LINE_REJECT", nb_line_reject_tFilterRow_15);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row75");
			  	}
			  	
 

ok_Hash.put("tFilterRow_15", true);
end_Hash.put("tFilterRow_15", System.currentTimeMillis());




/**
 * [tFilterRow_15 end ] stop
 */

	
	/**
	 * [tHashOutput_22 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_22";

	
globalMap.put("tHashOutput_22_NB_LINE", nb_line_tHashOutput_22);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row76");
			  	}
			  	
 

ok_Hash.put("tHashOutput_22", true);
end_Hash.put("tHashOutput_22", System.currentTimeMillis());




/**
 * [tHashOutput_22 end ] stop
 */






















































				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputExcel_2 finally ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_2";

	

 



/**
 * [tFileInputExcel_2 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tMap_20 finally ] start
	 */

	

	
	
	currentComponent="tMap_20";

	

 



/**
 * [tMap_20 finally ] stop
 */

	
	/**
	 * [tUniqRow_18 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_18";

	

 



/**
 * [tUniqRow_18 finally ] stop
 */

	
	/**
	 * [tFilterRow_2 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";

	

 



/**
 * [tFilterRow_2 finally ] stop
 */

	
	/**
	 * [tHashOutput_9 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_9";

	

 



/**
 * [tHashOutput_9 finally ] stop
 */










	
	/**
	 * [tMap_21 finally ] start
	 */

	

	
	
	currentComponent="tMap_21";

	

 



/**
 * [tMap_21 finally ] stop
 */

	
	/**
	 * [tUniqRow_19 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_19";

	

 



/**
 * [tUniqRow_19 finally ] stop
 */

	
	/**
	 * [tFilterRow_3 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_3";

	

 



/**
 * [tFilterRow_3 finally ] stop
 */

	
	/**
	 * [tHashOutput_10 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_10";

	

 



/**
 * [tHashOutput_10 finally ] stop
 */










	
	/**
	 * [tMap_23 finally ] start
	 */

	

	
	
	currentComponent="tMap_23";

	

 



/**
 * [tMap_23 finally ] stop
 */

	
	/**
	 * [tUniqRow_20 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_20";

	

 



/**
 * [tUniqRow_20 finally ] stop
 */

	
	/**
	 * [tFilterRow_4 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_4";

	

 



/**
 * [tFilterRow_4 finally ] stop
 */

	
	/**
	 * [tHashOutput_11 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_11";

	

 



/**
 * [tHashOutput_11 finally ] stop
 */










	
	/**
	 * [tMap_24 finally ] start
	 */

	

	
	
	currentComponent="tMap_24";

	

 



/**
 * [tMap_24 finally ] stop
 */

	
	/**
	 * [tUniqRow_21 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_21";

	

 



/**
 * [tUniqRow_21 finally ] stop
 */

	
	/**
	 * [tFilterRow_5 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_5";

	

 



/**
 * [tFilterRow_5 finally ] stop
 */

	
	/**
	 * [tHashOutput_12 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_12";

	

 



/**
 * [tHashOutput_12 finally ] stop
 */










	
	/**
	 * [tMap_25 finally ] start
	 */

	

	
	
	currentComponent="tMap_25";

	

 



/**
 * [tMap_25 finally ] stop
 */

	
	/**
	 * [tUniqRow_22 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_22";

	

 



/**
 * [tUniqRow_22 finally ] stop
 */

	
	/**
	 * [tFilterRow_6 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_6";

	

 



/**
 * [tFilterRow_6 finally ] stop
 */

	
	/**
	 * [tHashOutput_13 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_13";

	

 



/**
 * [tHashOutput_13 finally ] stop
 */










	
	/**
	 * [tMap_26 finally ] start
	 */

	

	
	
	currentComponent="tMap_26";

	

 



/**
 * [tMap_26 finally ] stop
 */

	
	/**
	 * [tUniqRow_23 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_23";

	

 



/**
 * [tUniqRow_23 finally ] stop
 */

	
	/**
	 * [tFilterRow_7 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_7";

	

 



/**
 * [tFilterRow_7 finally ] stop
 */

	
	/**
	 * [tHashOutput_14 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_14";

	

 



/**
 * [tHashOutput_14 finally ] stop
 */










	
	/**
	 * [tMap_27 finally ] start
	 */

	

	
	
	currentComponent="tMap_27";

	

 



/**
 * [tMap_27 finally ] stop
 */

	
	/**
	 * [tUniqRow_24 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_24";

	

 



/**
 * [tUniqRow_24 finally ] stop
 */

	
	/**
	 * [tFilterRow_8 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_8";

	

 



/**
 * [tFilterRow_8 finally ] stop
 */

	
	/**
	 * [tHashOutput_15 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_15";

	

 



/**
 * [tHashOutput_15 finally ] stop
 */










	
	/**
	 * [tMap_28 finally ] start
	 */

	

	
	
	currentComponent="tMap_28";

	

 



/**
 * [tMap_28 finally ] stop
 */

	
	/**
	 * [tUniqRow_25 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_25";

	

 



/**
 * [tUniqRow_25 finally ] stop
 */

	
	/**
	 * [tFilterRow_9 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_9";

	

 



/**
 * [tFilterRow_9 finally ] stop
 */

	
	/**
	 * [tHashOutput_16 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_16";

	

 



/**
 * [tHashOutput_16 finally ] stop
 */










	
	/**
	 * [tMap_29 finally ] start
	 */

	

	
	
	currentComponent="tMap_29";

	

 



/**
 * [tMap_29 finally ] stop
 */

	
	/**
	 * [tUniqRow_26 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_26";

	

 



/**
 * [tUniqRow_26 finally ] stop
 */

	
	/**
	 * [tFilterRow_10 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_10";

	

 



/**
 * [tFilterRow_10 finally ] stop
 */

	
	/**
	 * [tHashOutput_17 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_17";

	

 



/**
 * [tHashOutput_17 finally ] stop
 */










	
	/**
	 * [tMap_30 finally ] start
	 */

	

	
	
	currentComponent="tMap_30";

	

 



/**
 * [tMap_30 finally ] stop
 */

	
	/**
	 * [tUniqRow_27 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_27";

	

 



/**
 * [tUniqRow_27 finally ] stop
 */

	
	/**
	 * [tFilterRow_11 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_11";

	

 



/**
 * [tFilterRow_11 finally ] stop
 */

	
	/**
	 * [tHashOutput_18 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_18";

	

 



/**
 * [tHashOutput_18 finally ] stop
 */










	
	/**
	 * [tMap_31 finally ] start
	 */

	

	
	
	currentComponent="tMap_31";

	

 



/**
 * [tMap_31 finally ] stop
 */

	
	/**
	 * [tUniqRow_28 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_28";

	

 



/**
 * [tUniqRow_28 finally ] stop
 */

	
	/**
	 * [tFilterRow_12 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_12";

	

 



/**
 * [tFilterRow_12 finally ] stop
 */

	
	/**
	 * [tHashOutput_19 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_19";

	

 



/**
 * [tHashOutput_19 finally ] stop
 */










	
	/**
	 * [tMap_32 finally ] start
	 */

	

	
	
	currentComponent="tMap_32";

	

 



/**
 * [tMap_32 finally ] stop
 */

	
	/**
	 * [tUniqRow_29 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_29";

	

 



/**
 * [tUniqRow_29 finally ] stop
 */

	
	/**
	 * [tFilterRow_13 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_13";

	

 



/**
 * [tFilterRow_13 finally ] stop
 */

	
	/**
	 * [tHashOutput_20 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_20";

	

 



/**
 * [tHashOutput_20 finally ] stop
 */










	
	/**
	 * [tMap_33 finally ] start
	 */

	

	
	
	currentComponent="tMap_33";

	

 



/**
 * [tMap_33 finally ] stop
 */

	
	/**
	 * [tUniqRow_30 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_30";

	

 



/**
 * [tUniqRow_30 finally ] stop
 */

	
	/**
	 * [tFilterRow_14 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_14";

	

 



/**
 * [tFilterRow_14 finally ] stop
 */

	
	/**
	 * [tHashOutput_21 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_21";

	

 



/**
 * [tHashOutput_21 finally ] stop
 */










	
	/**
	 * [tMap_34 finally ] start
	 */

	

	
	
	currentComponent="tMap_34";

	

 



/**
 * [tMap_34 finally ] stop
 */

	
	/**
	 * [tUniqRow_31 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_31";

	

 



/**
 * [tUniqRow_31 finally ] stop
 */

	
	/**
	 * [tFilterRow_15 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_15";

	

 



/**
 * [tFilterRow_15 finally ] stop
 */

	
	/**
	 * [tHashOutput_22 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_22";

	

 



/**
 * [tHashOutput_22 finally ] stop
 */






















































				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputExcel_2_SUBPROCESS_STATE", 1);
	}
	

public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";

	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tSetGlobalVar_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	

public void tSetGlobalVar_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSetGlobalVar_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tSetGlobalVar_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tSetGlobalVar_1", false);
		start_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());
		
	
	currentComponent="tSetGlobalVar_1";

	
		int tos_count_tSetGlobalVar_1 = 0;
		

 



/**
 * [tSetGlobalVar_1 begin ] stop
 */
	
	/**
	 * [tSetGlobalVar_1 main ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

globalMap.put("fieldMap", new HashMap<String, String>());
globalMap.put("dateError",  TalendDate.formatDate("yyyy-MM-ddHHmmss", new Date()) );
globalMap.put("SalesJournalNumber",  TalendDate.formatDate("yyyyMMddHHmmss", new Date()) );

 


	tos_count_tSetGlobalVar_1++;

/**
 * [tSetGlobalVar_1 main ] stop
 */
	
	/**
	 * [tSetGlobalVar_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

 



/**
 * [tSetGlobalVar_1 process_data_begin ] stop
 */
	
	/**
	 * [tSetGlobalVar_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

 



/**
 * [tSetGlobalVar_1 process_data_end ] stop
 */
	
	/**
	 * [tSetGlobalVar_1 end ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

 

ok_Hash.put("tSetGlobalVar_1", true);
end_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());




/**
 * [tSetGlobalVar_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSetGlobalVar_1 finally ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

 



/**
 * [tSetGlobalVar_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSetGlobalVar_1_SUBPROCESS_STATE", 1);
	}
	

public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";

	
		int tos_count_tPostjob_1 = 0;
		

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());




/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	


public static class row34Struct implements routines.system.IPersistableRow<row34Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];

	
			    public String JOURNALNUMBER;

				public String getJOURNALNUMBER () {
					return this.JOURNALNUMBER;
				}
				
			    public String DEFAULTTRADEAGREEMENTTYPE;

				public String getDEFAULTTRADEAGREEMENTTYPE () {
					return this.DEFAULTTRADEAGREEMENTTYPE;
				}
				
			    public String JOURNALDESCRIPTION;

				public String getJOURNALDESCRIPTION () {
					return this.JOURNALDESCRIPTION;
				}
				
			    public String KRFMARKDOWNREASON;

				public String getKRFMARKDOWNREASON () {
					return this.KRFMARKDOWNREASON;
				}
				
			    public String TRADEAGREEMENTJOURNALNAMEID;

				public String getTRADEAGREEMENTJOURNALNAMEID () {
					return this.TRADEAGREEMENTJOURNALNAMEID;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE) {

        	try {

        		int length = 0;
		
					this.JOURNALNUMBER = readString(dis);
					
					this.DEFAULTTRADEAGREEMENTTYPE = readString(dis);
					
					this.JOURNALDESCRIPTION = readString(dis);
					
					this.KRFMARKDOWNREASON = readString(dis);
					
					this.TRADEAGREEMENTJOURNALNAMEID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.JOURNALNUMBER,dos);
					
					// String
				
						writeString(this.DEFAULTTRADEAGREEMENTTYPE,dos);
					
					// String
				
						writeString(this.JOURNALDESCRIPTION,dos);
					
					// String
				
						writeString(this.KRFMARKDOWNREASON,dos);
					
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNAMEID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("JOURNALNUMBER="+JOURNALNUMBER);
		sb.append(",DEFAULTTRADEAGREEMENTTYPE="+DEFAULTTRADEAGREEMENTTYPE);
		sb.append(",JOURNALDESCRIPTION="+JOURNALDESCRIPTION);
		sb.append(",KRFMARKDOWNREASON="+KRFMARKDOWNREASON);
		sb.append(",TRADEAGREEMENTJOURNALNAMEID="+TRADEAGREEMENTJOURNALNAMEID);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row34Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFixedFlowInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row34Struct row34 = new row34Struct();




	
	/**
	 * [tFileOutputExcel_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_11", false);
		start_Hash.put("tFileOutputExcel_11", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_11";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row34");
					}
				
		int tos_count_tFileOutputExcel_11 = 0;
		


		int columnIndex_tFileOutputExcel_11 = 0;
		
		String fileName_tFileOutputExcel_11=context.ExtractPath + "Trade agreement journal table V2.xlsx";
		int nb_line_tFileOutputExcel_11 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_11 = new org.talend.ExcelTool();
		
		xlsxTool_tFileOutputExcel_11.setSheet("Trade agreement journal table V2");
		xlsxTool_tFileOutputExcel_11.setAppend(false,true);
		xlsxTool_tFileOutputExcel_11.setRecalculateFormula(false);
		xlsxTool_tFileOutputExcel_11.setXY(false,0,10,false);
		
		java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_11 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap.get("concurrentHashMap");
		java.lang.Object lockObj_tFileOutputExcel_11 = chm_tFileOutputExcel_11.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_11", k -> new Object());
		synchronized (lockObj_tFileOutputExcel_11) {
			
				xlsxTool_tFileOutputExcel_11.prepareXlsxFile(fileName_tFileOutputExcel_11);
			
		}
		
		xlsxTool_tFileOutputExcel_11.setFont("");
		
		if (xlsxTool_tFileOutputExcel_11.getStartRow() == 0){
		
		xlsxTool_tFileOutputExcel_11.addRow();
		
		xlsxTool_tFileOutputExcel_11.addCellValue("JOURNALNUMBER");
		
		xlsxTool_tFileOutputExcel_11.addCellValue("DEFAULTTRADEAGREEMENTTYPE");
		
		xlsxTool_tFileOutputExcel_11.addCellValue("JOURNALDESCRIPTION");
		
		xlsxTool_tFileOutputExcel_11.addCellValue("KRFMARKDOWNREASON");
		
		xlsxTool_tFileOutputExcel_11.addCellValue("TRADEAGREEMENTJOURNALNAMEID");
		
		nb_line_tFileOutputExcel_11++; 
		
	}
		

 



/**
 * [tFileOutputExcel_11 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_1", false);
		start_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_1";

	
		int tos_count_tFixedFlowInput_1 = 0;
		

	    for (int i_tFixedFlowInput_1 = 0 ; i_tFixedFlowInput_1 < 1 ; i_tFixedFlowInput_1++) {
	                	            	
    	            		row34.JOURNALNUMBER = "HBE1-" + globalMap.get("SalesJournalNumber");
    	            	        	            	
    	            		row34.DEFAULTTRADEAGREEMENTTYPE = "PriceSales";
    	            	        	            	
    	            		row34.JOURNALDESCRIPTION = "Sales Journal BUY";
    	            	        	            	
    	            		row34.KRFMARKDOWNREASON = "";
    	            	        	            	
    	            		row34.TRADEAGREEMENTJOURNALNAMEID = "SalJ";
    	            	
 



/**
 * [tFixedFlowInput_1 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";

	

 


	tos_count_tFixedFlowInput_1++;

/**
 * [tFixedFlowInput_1 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";

	

 



/**
 * [tFixedFlowInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputExcel_11 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_11";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row34");
					}
					

				xlsxTool_tFileOutputExcel_11.addRow();
									   				
	    				if(row34.JOURNALNUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_11.addCellValue(String.valueOf(row34.JOURNALNUMBER));
	    				} else {
	    					xlsxTool_tFileOutputExcel_11.addCellNullValue();
	    				}
					
									   				
	    				if(row34.DEFAULTTRADEAGREEMENTTYPE != null) {
    				
							xlsxTool_tFileOutputExcel_11.addCellValue(String.valueOf(row34.DEFAULTTRADEAGREEMENTTYPE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_11.addCellNullValue();
	    				}
					
									   				
	    				if(row34.JOURNALDESCRIPTION != null) {
    				
							xlsxTool_tFileOutputExcel_11.addCellValue(String.valueOf(row34.JOURNALDESCRIPTION));
	    				} else {
	    					xlsxTool_tFileOutputExcel_11.addCellNullValue();
	    				}
					
									   				
	    				if(row34.KRFMARKDOWNREASON != null) {
    				
							xlsxTool_tFileOutputExcel_11.addCellValue(String.valueOf(row34.KRFMARKDOWNREASON));
	    				} else {
	    					xlsxTool_tFileOutputExcel_11.addCellNullValue();
	    				}
					
									   				
	    				if(row34.TRADEAGREEMENTJOURNALNAMEID != null) {
    				
							xlsxTool_tFileOutputExcel_11.addCellValue(String.valueOf(row34.TRADEAGREEMENTJOURNALNAMEID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_11.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_11++;
				
 


	tos_count_tFileOutputExcel_11++;

/**
 * [tFileOutputExcel_11 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_11";

	

 



/**
 * [tFileOutputExcel_11 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_11";

	

 



/**
 * [tFileOutputExcel_11 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";

	

 



/**
 * [tFixedFlowInput_1 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";

	

        }
        globalMap.put("tFixedFlowInput_1_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_1", true);
end_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());




/**
 * [tFixedFlowInput_1 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_11 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_11";

	

	
	
	
			xlsxTool_tFileOutputExcel_11.writeExcel(fileName_tFileOutputExcel_11,true);
	
		
			nb_line_tFileOutputExcel_11 = nb_line_tFileOutputExcel_11 -1;
		
		globalMap.put("tFileOutputExcel_11_NB_LINE",nb_line_tFileOutputExcel_11);
		
		

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row34");
			  	}
			  	
 

ok_Hash.put("tFileOutputExcel_11", true);
end_Hash.put("tFileOutputExcel_11", System.currentTimeMillis());




/**
 * [tFileOutputExcel_11 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_1 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";

	

 



/**
 * [tFixedFlowInput_1 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_11 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_11";

	

 



/**
 * [tFileOutputExcel_11 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class sortie_add_linenumberStruct implements routines.system.IPersistableRow<sortie_add_linenumberStruct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				
			    public String KRFSALESORDERCATEGORY;

				public String getKRFSALESORDERCATEGORY () {
					return this.KRFSALESORDERCATEGORY;
				}
				
			    public Integer LINENUMBER;

				public Integer getLINENUMBER () {
					return this.LINENUMBER;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
					this.KRFSALESORDERCATEGORY = readString(dis);
					
						this.LINENUMBER = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
					// String
				
						writeString(this.KRFSALESORDERCATEGORY,dos);
					
					// Integer
				
						writeInteger(this.LINENUMBER,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
		sb.append(",KRFSALESORDERCATEGORY="+KRFSALESORDERCATEGORY);
		sb.append(",LINENUMBER="+String.valueOf(LINENUMBER));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_add_linenumberStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_mapStruct implements routines.system.IPersistableRow<sortie_mapStruct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				
			    public String KRFSALESORDERCATEGORY;

				public String getKRFSALESORDERCATEGORY () {
					return this.KRFSALESORDERCATEGORY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
					this.KRFSALESORDERCATEGORY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
					// String
				
						writeString(this.KRFSALESORDERCATEGORY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
		sb.append(",KRFSALESORDERCATEGORY="+KRFSALESORDERCATEGORY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_mapStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row41Struct implements routines.system.IPersistableRow<row41Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row41Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row39Struct implements routines.system.IPersistableRow<row39Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row39Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tHashInput_9Struct implements routines.system.IPersistableRow<after_tHashInput_9Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tHashInput_9Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row40Struct implements routines.system.IPersistableRow<row40Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row40Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row51Struct implements routines.system.IPersistableRow<row51Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row51Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row52Struct implements routines.system.IPersistableRow<row52Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row52Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row53Struct implements routines.system.IPersistableRow<row53Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row53Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row54Struct implements routines.system.IPersistableRow<row54Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row54Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row59Struct implements routines.system.IPersistableRow<row59Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row59Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row60Struct implements routines.system.IPersistableRow<row60Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row60Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row65Struct implements routines.system.IPersistableRow<row65Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row65Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row66Struct implements routines.system.IPersistableRow<row66Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row66Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row71Struct implements routines.system.IPersistableRow<row71Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row71Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row72Struct implements routines.system.IPersistableRow<row72Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row72Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row77Struct implements routines.system.IPersistableRow<row77Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row77Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row78Struct implements routines.system.IPersistableRow<row78Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row78Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tHashInput_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tFileInputExcel_4Process(globalMap);

		row39Struct row39 = new row39Struct();

		row40Struct row40 = new row40Struct();

		row51Struct row51 = new row51Struct();

		row52Struct row52 = new row52Struct();

		row53Struct row53 = new row53Struct();

		row54Struct row54 = new row54Struct();

		row59Struct row59 = new row59Struct();

		row60Struct row60 = new row60Struct();

		row65Struct row65 = new row65Struct();

		row66Struct row66 = new row66Struct();

		row71Struct row71 = new row71Struct();

		row72Struct row72 = new row72Struct();

		row77Struct row77 = new row77Struct();

		row78Struct row78 = new row78Struct();

			row41Struct row41 = new row41Struct();
sortie_mapStruct sortie_map = new sortie_mapStruct();
sortie_add_linenumberStruct sortie_add_linenumber = new sortie_add_linenumberStruct();






	
	/**
	 * [tFileOutputExcel_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_12", false);
		start_Hash.put("tFileOutputExcel_12", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_12";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_add_linenumber");
					}
				
		int tos_count_tFileOutputExcel_12 = 0;
		


		int columnIndex_tFileOutputExcel_12 = 0;
		
		String fileName_tFileOutputExcel_12=context.ExtractPath + "Open sales price journal lines.xlsx";
		int nb_line_tFileOutputExcel_12 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_12 = new org.talend.ExcelTool();
		
		xlsxTool_tFileOutputExcel_12.setSheet("Open sales price journal lines");
		xlsxTool_tFileOutputExcel_12.setAppend(false,true);
		xlsxTool_tFileOutputExcel_12.setRecalculateFormula(false);
		xlsxTool_tFileOutputExcel_12.setXY(true,0,0,false);
		
		java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_12 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap.get("concurrentHashMap");
		java.lang.Object lockObj_tFileOutputExcel_12 = chm_tFileOutputExcel_12.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_12", k -> new Object());
		synchronized (lockObj_tFileOutputExcel_12) {
			
				xlsxTool_tFileOutputExcel_12.prepareXlsxFile(fileName_tFileOutputExcel_12);
			
		}
		
		xlsxTool_tFileOutputExcel_12.setFont("");
		
		xlsxTool_tFileOutputExcel_12.addRow();
		
		xlsxTool_tFileOutputExcel_12.addCellValue("TRADEAGREEMENTJOURNALNUMBER");
		
		xlsxTool_tFileOutputExcel_12.addCellValue("ITEMNUMBER");
		
		xlsxTool_tFileOutputExcel_12.addCellValue("PRICE");
		
		xlsxTool_tFileOutputExcel_12.addCellValue("PRICECURRENCYCODE");
		
		xlsxTool_tFileOutputExcel_12.addCellValue("PRICECUSTOMERGROUPCODE");
		
		xlsxTool_tFileOutputExcel_12.addCellValue("PRODUCTCOLORID");
		
		xlsxTool_tFileOutputExcel_12.addCellValue("PRODUCTSIZEID");
		
		xlsxTool_tFileOutputExcel_12.addCellValue("PRODUCTSTYLEID");
		
		xlsxTool_tFileOutputExcel_12.addCellValue("QUANTITYUNITSYMBOL");
		
		xlsxTool_tFileOutputExcel_12.addCellValue("KRFSALESORDERCATEGORY");
		
		xlsxTool_tFileOutputExcel_12.addCellValue("LINENUMBER");
		
		nb_line_tFileOutputExcel_12++; 
		

 



/**
 * [tFileOutputExcel_12 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_map");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
sortie_add_linenumberStruct sortie_add_linenumber_tmp = new sortie_add_linenumberStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tMap_22 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_22", false);
		start_Hash.put("tMap_22", System.currentTimeMillis());
		
	
	currentComponent="tMap_22";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row41");
					}
				
		int tos_count_tMap_22 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row42Struct> tHash_Lookup_row42 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row42Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row42Struct>) 
					globalMap.get( "tHash_Lookup_row42" ))
					;					
					
	
		tHash_Lookup_row42.initGet();
	

row42Struct row42HashKey = new row42Struct();
row42Struct row42Default = new row42Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_22__Struct  {
}
Var__tMap_22__Struct Var__tMap_22 = new Var__tMap_22__Struct();
// ###############################

// ###############################
// # Outputs initialization
sortie_mapStruct sortie_map_tmp = new sortie_mapStruct();
// ###############################

        
        



        









 



/**
 * [tMap_22 begin ] stop
 */



	
	/**
	 * [tUnite_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tUnite_2", false);
		start_Hash.put("tUnite_2", System.currentTimeMillis());
		
	
	currentComponent="tUnite_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row78","row54","row40","row52","row60","row65","row77","row59","row66","row53","row51","row71","row72","row39");
					}
				
		int tos_count_tUnite_2 = 0;
		

int nb_line_tUnite_2 = 0;

 



/**
 * [tUnite_2 begin ] stop
 */
	
	/**
	 * [tHashInput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_9", false);
		start_Hash.put("tHashInput_9", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_9";

	
		int tos_count_tHashInput_9 = 0;
		


int nb_line_tHashInput_9 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_9=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row37Struct> tHashFile_tHashInput_9 = mf_tHashInput_9.getAdvancedMemoryHashFile("tHashFile_EXTRACT_FOR_DYNAMICS_PRICE_" + pid +"_tHashOutput_9");
if(tHashFile_tHashInput_9==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row37Struct> iterator_tHashInput_9 = tHashFile_tHashInput_9.iterator();
while (iterator_tHashInput_9.hasNext()) {
    row37Struct next_tHashInput_9 = iterator_tHashInput_9.next();

	row39.TRADEAGREEMENTJOURNALNUMBER = next_tHashInput_9.TRADEAGREEMENTJOURNALNUMBER;
	row39.ITEMNUMBER = next_tHashInput_9.ITEMNUMBER;
	row39.PRICE = next_tHashInput_9.PRICE;
	row39.PRICECURRENCYCODE = next_tHashInput_9.PRICECURRENCYCODE;
	row39.PRICECUSTOMERGROUPCODE = next_tHashInput_9.PRICECUSTOMERGROUPCODE;
	row39.PRODUCTCOLORID = next_tHashInput_9.PRODUCTCOLORID;
	row39.PRODUCTSIZEID = next_tHashInput_9.PRODUCTSIZEID;
	row39.PRODUCTSTYLEID = next_tHashInput_9.PRODUCTSTYLEID;
	row39.QUANTITYUNITSYMBOL = next_tHashInput_9.QUANTITYUNITSYMBOL;
 



/**
 * [tHashInput_9 begin ] stop
 */
	
	/**
	 * [tHashInput_9 main ] start
	 */

	

	
	
	currentComponent="tHashInput_9";

	

 


	tos_count_tHashInput_9++;

/**
 * [tHashInput_9 main ] stop
 */
	
	/**
	 * [tHashInput_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_9";

	

 



/**
 * [tHashInput_9 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_2 main ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1,"row39");
						}
						
//////////
 

// for output
			row41 = new row41Struct();
								
			row41.TRADEAGREEMENTJOURNALNUMBER = row39.TRADEAGREEMENTJOURNALNUMBER;								
			row41.ITEMNUMBER = row39.ITEMNUMBER;								
			row41.PRICE = row39.PRICE;								
			row41.PRICECURRENCYCODE = row39.PRICECURRENCYCODE;								
			row41.PRICECUSTOMERGROUPCODE = row39.PRICECUSTOMERGROUPCODE;								
			row41.PRODUCTCOLORID = row39.PRODUCTCOLORID;								
			row41.PRODUCTSIZEID = row39.PRODUCTSIZEID;								
			row41.PRODUCTSTYLEID = row39.PRODUCTSTYLEID;								
			row41.QUANTITYUNITSYMBOL = row39.QUANTITYUNITSYMBOL;			

			nb_line_tUnite_2++;

//////////
 


	tos_count_tUnite_2++;

/**
 * [tUnite_2 main ] stop
 */
	
	/**
	 * [tUnite_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	

 



/**
 * [tUnite_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_22 main ] start
	 */

	

	
	
	currentComponent="tMap_22";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row41");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_22 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_22 = false;
		  boolean mainRowRejected_tMap_22 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row42" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow42 = false;
       		  	    	
       		  	    	
 							row42Struct row42ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_22) { // G_TM_M_020

								

								
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row42.lookup( row42HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row42.hasNext()) { // G_TM_M_090

  								
		  				
	  								
						
									
	
		  								forceLooprow42 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow42 = true;
			           		  	} // G 21
                    		  	
                    		

							row42Struct row42 = null;
                    		  	 
							

								while ((tHash_Lookup_row42 != null && tHash_Lookup_row42.hasNext()) || forceLooprow42) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row42'
									
                    		  	 
							   
                    		  	 
	       		  	    	row42Struct fromLookup_row42 = null;
							row42 = row42Default;
										 
							
								
								if(!forceLooprow42) { // G 46
								
							
								 
							
								
								fromLookup_row42 = tHash_Lookup_row42.next();

							

							if(fromLookup_row42 != null) {
								row42 = fromLookup_row42;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow42 = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_22__Struct Var = Var__tMap_22;// ###############################
        // ###############################
        // # Output tables

sortie_map = null;


// # Output table : 'sortie_map'
sortie_map_tmp.TRADEAGREEMENTJOURNALNUMBER = row41.TRADEAGREEMENTJOURNALNUMBER ;
sortie_map_tmp.ITEMNUMBER = row41.ITEMNUMBER ;
sortie_map_tmp.PRICE = row41.PRICE ;
sortie_map_tmp.PRICECURRENCYCODE = row41.PRICECURRENCYCODE ;
sortie_map_tmp.PRICECUSTOMERGROUPCODE = row41.PRICECUSTOMERGROUPCODE ;
sortie_map_tmp.PRODUCTCOLORID = row41.PRODUCTCOLORID ;
sortie_map_tmp.PRODUCTSIZEID = row41.PRODUCTSIZEID ;
sortie_map_tmp.PRODUCTSTYLEID = row41.PRODUCTSTYLEID ;
sortie_map_tmp.QUANTITYUNITSYMBOL = row41.QUANTITYUNITSYMBOL ;
sortie_map_tmp.KRFSALESORDERCATEGORY = row42.SALESORDERCATEGORY ;
sortie_map = sortie_map_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_22 = false;










 


	tos_count_tMap_22++;

/**
 * [tMap_22 main ] stop
 */
	
	/**
	 * [tMap_22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

 



/**
 * [tMap_22 process_data_begin ] stop
 */
// Start of branch "sortie_map"
if(sortie_map != null) { 



	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_map");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

sortie_add_linenumber = null;


// # Output table : 'sortie_add_linenumber'
sortie_add_linenumber_tmp.TRADEAGREEMENTJOURNALNUMBER = sortie_map.TRADEAGREEMENTJOURNALNUMBER ;
sortie_add_linenumber_tmp.ITEMNUMBER = sortie_map.ITEMNUMBER ;
sortie_add_linenumber_tmp.PRICE = sortie_map.PRICE ;
sortie_add_linenumber_tmp.PRICECURRENCYCODE = sortie_map.PRICECURRENCYCODE ;
sortie_add_linenumber_tmp.PRICECUSTOMERGROUPCODE = sortie_map.PRICECUSTOMERGROUPCODE ;
sortie_add_linenumber_tmp.PRODUCTCOLORID = sortie_map.PRODUCTCOLORID ;
sortie_add_linenumber_tmp.PRODUCTSIZEID = sortie_map.PRODUCTSIZEID ;
sortie_add_linenumber_tmp.PRODUCTSTYLEID = sortie_map.PRODUCTSTYLEID ;
sortie_add_linenumber_tmp.QUANTITYUNITSYMBOL = sortie_map.QUANTITYUNITSYMBOL ;
sortie_add_linenumber_tmp.KRFSALESORDERCATEGORY = sortie_map.KRFSALESORDERCATEGORY ;
sortie_add_linenumber_tmp.LINENUMBER = Numeric.sequence("name", 1, 1) ;
sortie_add_linenumber = sortie_add_linenumber_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "sortie_add_linenumber"
if(sortie_add_linenumber != null) { 



	
	/**
	 * [tFileOutputExcel_12 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_12";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_add_linenumber");
					}
					

				xlsxTool_tFileOutputExcel_12.addRow();
									   				
	    				if(sortie_add_linenumber.TRADEAGREEMENTJOURNALNUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.TRADEAGREEMENTJOURNALNUMBER));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.ITEMNUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.ITEMNUMBER));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRICE != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(sortie_add_linenumber.PRICE);
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRICECURRENCYCODE != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.PRICECURRENCYCODE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRICECUSTOMERGROUPCODE != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.PRICECUSTOMERGROUPCODE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRODUCTCOLORID != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.PRODUCTCOLORID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRODUCTSIZEID != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.PRODUCTSIZEID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRODUCTSTYLEID != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.PRODUCTSTYLEID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.QUANTITYUNITSYMBOL != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.QUANTITYUNITSYMBOL));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.KRFSALESORDERCATEGORY != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.KRFSALESORDERCATEGORY));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.LINENUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(Double.parseDouble(String.valueOf(sortie_add_linenumber.LINENUMBER)));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_12++;
				
 


	tos_count_tFileOutputExcel_12++;

/**
 * [tFileOutputExcel_12 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_12";

	

 



/**
 * [tFileOutputExcel_12 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_12";

	

 



/**
 * [tFileOutputExcel_12 process_data_end ] stop
 */

} // End of branch "sortie_add_linenumber"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */

} // End of branch "sortie_map"



	
		} // close loop of lookup 'row42' // G_TM_M_043
	
	
	/**
	 * [tMap_22 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

 



/**
 * [tMap_22 process_data_end ] stop
 */



	
	/**
	 * [tUnite_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	

 



/**
 * [tUnite_2 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_9";

	

 



/**
 * [tHashInput_9 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_9 end ] start
	 */

	

	
	
	currentComponent="tHashInput_9";

	
    

		
			nb_line_tHashInput_9++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_EXTRACT_FOR_DYNAMICS_PRICE_" + pid +"_tHashOutput_9");
	


	globalMap.put("tHashInput_9_NB_LINE", nb_line_tHashInput_9);       

 

ok_Hash.put("tHashInput_9", true);
end_Hash.put("tHashInput_9", System.currentTimeMillis());




/**
 * [tHashInput_9 end ] stop
 */
	
	/**
	 * [tHashInput_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_10", false);
		start_Hash.put("tHashInput_10", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_10";

	
		int tos_count_tHashInput_10 = 0;
		


int nb_line_tHashInput_10 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_10=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row38Struct> tHashFile_tHashInput_10 = mf_tHashInput_10.getAdvancedMemoryHashFile("tHashFile_EXTRACT_FOR_DYNAMICS_PRICE_" + pid +"_tHashOutput_10");
if(tHashFile_tHashInput_10==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row38Struct> iterator_tHashInput_10 = tHashFile_tHashInput_10.iterator();
while (iterator_tHashInput_10.hasNext()) {
    row38Struct next_tHashInput_10 = iterator_tHashInput_10.next();

	row40.TRADEAGREEMENTJOURNALNUMBER = next_tHashInput_10.TRADEAGREEMENTJOURNALNUMBER;
	row40.ITEMNUMBER = next_tHashInput_10.ITEMNUMBER;
	row40.PRICE = next_tHashInput_10.PRICE;
	row40.PRICECURRENCYCODE = next_tHashInput_10.PRICECURRENCYCODE;
	row40.PRICECUSTOMERGROUPCODE = next_tHashInput_10.PRICECUSTOMERGROUPCODE;
	row40.PRODUCTCOLORID = next_tHashInput_10.PRODUCTCOLORID;
	row40.PRODUCTSIZEID = next_tHashInput_10.PRODUCTSIZEID;
	row40.PRODUCTSTYLEID = next_tHashInput_10.PRODUCTSTYLEID;
	row40.QUANTITYUNITSYMBOL = next_tHashInput_10.QUANTITYUNITSYMBOL;
 



/**
 * [tHashInput_10 begin ] stop
 */
	
	/**
	 * [tHashInput_10 main ] start
	 */

	

	
	
	currentComponent="tHashInput_10";

	

 


	tos_count_tHashInput_10++;

/**
 * [tHashInput_10 main ] stop
 */
	
	/**
	 * [tHashInput_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_10";

	

 



/**
 * [tHashInput_10 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_2 main ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1,"row40");
						}
						
//////////
 

// for output
			row41 = new row41Struct();
								
			row41.TRADEAGREEMENTJOURNALNUMBER = row40.TRADEAGREEMENTJOURNALNUMBER;								
			row41.ITEMNUMBER = row40.ITEMNUMBER;								
			row41.PRICE = row40.PRICE;								
			row41.PRICECURRENCYCODE = row40.PRICECURRENCYCODE;								
			row41.PRICECUSTOMERGROUPCODE = row40.PRICECUSTOMERGROUPCODE;								
			row41.PRODUCTCOLORID = row40.PRODUCTCOLORID;								
			row41.PRODUCTSIZEID = row40.PRODUCTSIZEID;								
			row41.PRODUCTSTYLEID = row40.PRODUCTSTYLEID;								
			row41.QUANTITYUNITSYMBOL = row40.QUANTITYUNITSYMBOL;			

			nb_line_tUnite_2++;

//////////
 


	tos_count_tUnite_2++;

/**
 * [tUnite_2 main ] stop
 */
	
	/**
	 * [tUnite_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	

 



/**
 * [tUnite_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_22 main ] start
	 */

	

	
	
	currentComponent="tMap_22";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row41");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_22 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_22 = false;
		  boolean mainRowRejected_tMap_22 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row42" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow42 = false;
       		  	    	
       		  	    	
 							row42Struct row42ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_22) { // G_TM_M_020

								

								
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row42.lookup( row42HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row42.hasNext()) { // G_TM_M_090

  								
		  				
	  								
						
									
	
		  								forceLooprow42 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow42 = true;
			           		  	} // G 21
                    		  	
                    		

							row42Struct row42 = null;
                    		  	 
							

								while ((tHash_Lookup_row42 != null && tHash_Lookup_row42.hasNext()) || forceLooprow42) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row42'
									
                    		  	 
							   
                    		  	 
	       		  	    	row42Struct fromLookup_row42 = null;
							row42 = row42Default;
										 
							
								
								if(!forceLooprow42) { // G 46
								
							
								 
							
								
								fromLookup_row42 = tHash_Lookup_row42.next();

							

							if(fromLookup_row42 != null) {
								row42 = fromLookup_row42;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow42 = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_22__Struct Var = Var__tMap_22;// ###############################
        // ###############################
        // # Output tables

sortie_map = null;


// # Output table : 'sortie_map'
sortie_map_tmp.TRADEAGREEMENTJOURNALNUMBER = row41.TRADEAGREEMENTJOURNALNUMBER ;
sortie_map_tmp.ITEMNUMBER = row41.ITEMNUMBER ;
sortie_map_tmp.PRICE = row41.PRICE ;
sortie_map_tmp.PRICECURRENCYCODE = row41.PRICECURRENCYCODE ;
sortie_map_tmp.PRICECUSTOMERGROUPCODE = row41.PRICECUSTOMERGROUPCODE ;
sortie_map_tmp.PRODUCTCOLORID = row41.PRODUCTCOLORID ;
sortie_map_tmp.PRODUCTSIZEID = row41.PRODUCTSIZEID ;
sortie_map_tmp.PRODUCTSTYLEID = row41.PRODUCTSTYLEID ;
sortie_map_tmp.QUANTITYUNITSYMBOL = row41.QUANTITYUNITSYMBOL ;
sortie_map_tmp.KRFSALESORDERCATEGORY = row42.SALESORDERCATEGORY ;
sortie_map = sortie_map_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_22 = false;










 


	tos_count_tMap_22++;

/**
 * [tMap_22 main ] stop
 */
	
	/**
	 * [tMap_22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

 



/**
 * [tMap_22 process_data_begin ] stop
 */
// Start of branch "sortie_map"
if(sortie_map != null) { 



	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_map");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

sortie_add_linenumber = null;


// # Output table : 'sortie_add_linenumber'
sortie_add_linenumber_tmp.TRADEAGREEMENTJOURNALNUMBER = sortie_map.TRADEAGREEMENTJOURNALNUMBER ;
sortie_add_linenumber_tmp.ITEMNUMBER = sortie_map.ITEMNUMBER ;
sortie_add_linenumber_tmp.PRICE = sortie_map.PRICE ;
sortie_add_linenumber_tmp.PRICECURRENCYCODE = sortie_map.PRICECURRENCYCODE ;
sortie_add_linenumber_tmp.PRICECUSTOMERGROUPCODE = sortie_map.PRICECUSTOMERGROUPCODE ;
sortie_add_linenumber_tmp.PRODUCTCOLORID = sortie_map.PRODUCTCOLORID ;
sortie_add_linenumber_tmp.PRODUCTSIZEID = sortie_map.PRODUCTSIZEID ;
sortie_add_linenumber_tmp.PRODUCTSTYLEID = sortie_map.PRODUCTSTYLEID ;
sortie_add_linenumber_tmp.QUANTITYUNITSYMBOL = sortie_map.QUANTITYUNITSYMBOL ;
sortie_add_linenumber_tmp.KRFSALESORDERCATEGORY = sortie_map.KRFSALESORDERCATEGORY ;
sortie_add_linenumber_tmp.LINENUMBER = Numeric.sequence("name", 1, 1) ;
sortie_add_linenumber = sortie_add_linenumber_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "sortie_add_linenumber"
if(sortie_add_linenumber != null) { 



	
	/**
	 * [tFileOutputExcel_12 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_12";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_add_linenumber");
					}
					

				xlsxTool_tFileOutputExcel_12.addRow();
									   				
	    				if(sortie_add_linenumber.TRADEAGREEMENTJOURNALNUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.TRADEAGREEMENTJOURNALNUMBER));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.ITEMNUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.ITEMNUMBER));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRICE != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(sortie_add_linenumber.PRICE);
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRICECURRENCYCODE != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.PRICECURRENCYCODE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRICECUSTOMERGROUPCODE != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.PRICECUSTOMERGROUPCODE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRODUCTCOLORID != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.PRODUCTCOLORID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRODUCTSIZEID != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.PRODUCTSIZEID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRODUCTSTYLEID != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.PRODUCTSTYLEID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.QUANTITYUNITSYMBOL != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.QUANTITYUNITSYMBOL));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.KRFSALESORDERCATEGORY != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.KRFSALESORDERCATEGORY));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.LINENUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(Double.parseDouble(String.valueOf(sortie_add_linenumber.LINENUMBER)));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_12++;
				
 


	tos_count_tFileOutputExcel_12++;

/**
 * [tFileOutputExcel_12 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_12";

	

 



/**
 * [tFileOutputExcel_12 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_12";

	

 



/**
 * [tFileOutputExcel_12 process_data_end ] stop
 */

} // End of branch "sortie_add_linenumber"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */

} // End of branch "sortie_map"



	
		} // close loop of lookup 'row42' // G_TM_M_043
	
	
	/**
	 * [tMap_22 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

 



/**
 * [tMap_22 process_data_end ] stop
 */



	
	/**
	 * [tUnite_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	

 



/**
 * [tUnite_2 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_10";

	

 



/**
 * [tHashInput_10 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_10 end ] start
	 */

	

	
	
	currentComponent="tHashInput_10";

	
    

		
			nb_line_tHashInput_10++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_EXTRACT_FOR_DYNAMICS_PRICE_" + pid +"_tHashOutput_10");
	


	globalMap.put("tHashInput_10_NB_LINE", nb_line_tHashInput_10);       

 

ok_Hash.put("tHashInput_10", true);
end_Hash.put("tHashInput_10", System.currentTimeMillis());




/**
 * [tHashInput_10 end ] stop
 */
	
	/**
	 * [tHashInput_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_11", false);
		start_Hash.put("tHashInput_11", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_11";

	
		int tos_count_tHashInput_11 = 0;
		


int nb_line_tHashInput_11 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_11=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row44Struct> tHashFile_tHashInput_11 = mf_tHashInput_11.getAdvancedMemoryHashFile("tHashFile_EXTRACT_FOR_DYNAMICS_PRICE_" + pid +"_tHashOutput_11");
if(tHashFile_tHashInput_11==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row44Struct> iterator_tHashInput_11 = tHashFile_tHashInput_11.iterator();
while (iterator_tHashInput_11.hasNext()) {
    row44Struct next_tHashInput_11 = iterator_tHashInput_11.next();

	row51.TRADEAGREEMENTJOURNALNUMBER = next_tHashInput_11.TRADEAGREEMENTJOURNALNUMBER;
	row51.ITEMNUMBER = next_tHashInput_11.ITEMNUMBER;
	row51.PRICE = next_tHashInput_11.PRICE;
	row51.PRICECURRENCYCODE = next_tHashInput_11.PRICECURRENCYCODE;
	row51.PRICECUSTOMERGROUPCODE = next_tHashInput_11.PRICECUSTOMERGROUPCODE;
	row51.PRODUCTCOLORID = next_tHashInput_11.PRODUCTCOLORID;
	row51.PRODUCTSIZEID = next_tHashInput_11.PRODUCTSIZEID;
	row51.PRODUCTSTYLEID = next_tHashInput_11.PRODUCTSTYLEID;
	row51.QUANTITYUNITSYMBOL = next_tHashInput_11.QUANTITYUNITSYMBOL;
 



/**
 * [tHashInput_11 begin ] stop
 */
	
	/**
	 * [tHashInput_11 main ] start
	 */

	

	
	
	currentComponent="tHashInput_11";

	

 


	tos_count_tHashInput_11++;

/**
 * [tHashInput_11 main ] stop
 */
	
	/**
	 * [tHashInput_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_11";

	

 



/**
 * [tHashInput_11 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_2 main ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1,"row51");
						}
						
//////////
 

// for output
			row41 = new row41Struct();
								
			row41.TRADEAGREEMENTJOURNALNUMBER = row51.TRADEAGREEMENTJOURNALNUMBER;								
			row41.ITEMNUMBER = row51.ITEMNUMBER;								
			row41.PRICE = row51.PRICE;								
			row41.PRICECURRENCYCODE = row51.PRICECURRENCYCODE;								
			row41.PRICECUSTOMERGROUPCODE = row51.PRICECUSTOMERGROUPCODE;								
			row41.PRODUCTCOLORID = row51.PRODUCTCOLORID;								
			row41.PRODUCTSIZEID = row51.PRODUCTSIZEID;								
			row41.PRODUCTSTYLEID = row51.PRODUCTSTYLEID;								
			row41.QUANTITYUNITSYMBOL = row51.QUANTITYUNITSYMBOL;			

			nb_line_tUnite_2++;

//////////
 


	tos_count_tUnite_2++;

/**
 * [tUnite_2 main ] stop
 */
	
	/**
	 * [tUnite_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	

 



/**
 * [tUnite_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_22 main ] start
	 */

	

	
	
	currentComponent="tMap_22";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row41");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_22 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_22 = false;
		  boolean mainRowRejected_tMap_22 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row42" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow42 = false;
       		  	    	
       		  	    	
 							row42Struct row42ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_22) { // G_TM_M_020

								

								
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row42.lookup( row42HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row42.hasNext()) { // G_TM_M_090

  								
		  				
	  								
						
									
	
		  								forceLooprow42 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow42 = true;
			           		  	} // G 21
                    		  	
                    		

							row42Struct row42 = null;
                    		  	 
							

								while ((tHash_Lookup_row42 != null && tHash_Lookup_row42.hasNext()) || forceLooprow42) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row42'
									
                    		  	 
							   
                    		  	 
	       		  	    	row42Struct fromLookup_row42 = null;
							row42 = row42Default;
										 
							
								
								if(!forceLooprow42) { // G 46
								
							
								 
							
								
								fromLookup_row42 = tHash_Lookup_row42.next();

							

							if(fromLookup_row42 != null) {
								row42 = fromLookup_row42;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow42 = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_22__Struct Var = Var__tMap_22;// ###############################
        // ###############################
        // # Output tables

sortie_map = null;


// # Output table : 'sortie_map'
sortie_map_tmp.TRADEAGREEMENTJOURNALNUMBER = row41.TRADEAGREEMENTJOURNALNUMBER ;
sortie_map_tmp.ITEMNUMBER = row41.ITEMNUMBER ;
sortie_map_tmp.PRICE = row41.PRICE ;
sortie_map_tmp.PRICECURRENCYCODE = row41.PRICECURRENCYCODE ;
sortie_map_tmp.PRICECUSTOMERGROUPCODE = row41.PRICECUSTOMERGROUPCODE ;
sortie_map_tmp.PRODUCTCOLORID = row41.PRODUCTCOLORID ;
sortie_map_tmp.PRODUCTSIZEID = row41.PRODUCTSIZEID ;
sortie_map_tmp.PRODUCTSTYLEID = row41.PRODUCTSTYLEID ;
sortie_map_tmp.QUANTITYUNITSYMBOL = row41.QUANTITYUNITSYMBOL ;
sortie_map_tmp.KRFSALESORDERCATEGORY = row42.SALESORDERCATEGORY ;
sortie_map = sortie_map_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_22 = false;










 


	tos_count_tMap_22++;

/**
 * [tMap_22 main ] stop
 */
	
	/**
	 * [tMap_22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

 



/**
 * [tMap_22 process_data_begin ] stop
 */
// Start of branch "sortie_map"
if(sortie_map != null) { 



	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_map");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

sortie_add_linenumber = null;


// # Output table : 'sortie_add_linenumber'
sortie_add_linenumber_tmp.TRADEAGREEMENTJOURNALNUMBER = sortie_map.TRADEAGREEMENTJOURNALNUMBER ;
sortie_add_linenumber_tmp.ITEMNUMBER = sortie_map.ITEMNUMBER ;
sortie_add_linenumber_tmp.PRICE = sortie_map.PRICE ;
sortie_add_linenumber_tmp.PRICECURRENCYCODE = sortie_map.PRICECURRENCYCODE ;
sortie_add_linenumber_tmp.PRICECUSTOMERGROUPCODE = sortie_map.PRICECUSTOMERGROUPCODE ;
sortie_add_linenumber_tmp.PRODUCTCOLORID = sortie_map.PRODUCTCOLORID ;
sortie_add_linenumber_tmp.PRODUCTSIZEID = sortie_map.PRODUCTSIZEID ;
sortie_add_linenumber_tmp.PRODUCTSTYLEID = sortie_map.PRODUCTSTYLEID ;
sortie_add_linenumber_tmp.QUANTITYUNITSYMBOL = sortie_map.QUANTITYUNITSYMBOL ;
sortie_add_linenumber_tmp.KRFSALESORDERCATEGORY = sortie_map.KRFSALESORDERCATEGORY ;
sortie_add_linenumber_tmp.LINENUMBER = Numeric.sequence("name", 1, 1) ;
sortie_add_linenumber = sortie_add_linenumber_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "sortie_add_linenumber"
if(sortie_add_linenumber != null) { 



	
	/**
	 * [tFileOutputExcel_12 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_12";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_add_linenumber");
					}
					

				xlsxTool_tFileOutputExcel_12.addRow();
									   				
	    				if(sortie_add_linenumber.TRADEAGREEMENTJOURNALNUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.TRADEAGREEMENTJOURNALNUMBER));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.ITEMNUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.ITEMNUMBER));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRICE != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(sortie_add_linenumber.PRICE);
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRICECURRENCYCODE != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.PRICECURRENCYCODE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRICECUSTOMERGROUPCODE != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.PRICECUSTOMERGROUPCODE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRODUCTCOLORID != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.PRODUCTCOLORID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRODUCTSIZEID != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.PRODUCTSIZEID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRODUCTSTYLEID != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.PRODUCTSTYLEID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.QUANTITYUNITSYMBOL != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.QUANTITYUNITSYMBOL));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.KRFSALESORDERCATEGORY != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.KRFSALESORDERCATEGORY));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.LINENUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(Double.parseDouble(String.valueOf(sortie_add_linenumber.LINENUMBER)));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_12++;
				
 


	tos_count_tFileOutputExcel_12++;

/**
 * [tFileOutputExcel_12 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_12";

	

 



/**
 * [tFileOutputExcel_12 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_12";

	

 



/**
 * [tFileOutputExcel_12 process_data_end ] stop
 */

} // End of branch "sortie_add_linenumber"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */

} // End of branch "sortie_map"



	
		} // close loop of lookup 'row42' // G_TM_M_043
	
	
	/**
	 * [tMap_22 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

 



/**
 * [tMap_22 process_data_end ] stop
 */



	
	/**
	 * [tUnite_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	

 



/**
 * [tUnite_2 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_11";

	

 



/**
 * [tHashInput_11 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_11 end ] start
	 */

	

	
	
	currentComponent="tHashInput_11";

	
    

		
			nb_line_tHashInput_11++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_EXTRACT_FOR_DYNAMICS_PRICE_" + pid +"_tHashOutput_11");
	


	globalMap.put("tHashInput_11_NB_LINE", nb_line_tHashInput_11);       

 

ok_Hash.put("tHashInput_11", true);
end_Hash.put("tHashInput_11", System.currentTimeMillis());




/**
 * [tHashInput_11 end ] stop
 */
	
	/**
	 * [tHashInput_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_12", false);
		start_Hash.put("tHashInput_12", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_12";

	
		int tos_count_tHashInput_12 = 0;
		


int nb_line_tHashInput_12 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_12=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row46Struct> tHashFile_tHashInput_12 = mf_tHashInput_12.getAdvancedMemoryHashFile("tHashFile_EXTRACT_FOR_DYNAMICS_PRICE_" + pid +"_tHashOutput_12");
if(tHashFile_tHashInput_12==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row46Struct> iterator_tHashInput_12 = tHashFile_tHashInput_12.iterator();
while (iterator_tHashInput_12.hasNext()) {
    row46Struct next_tHashInput_12 = iterator_tHashInput_12.next();

	row52.TRADEAGREEMENTJOURNALNUMBER = next_tHashInput_12.TRADEAGREEMENTJOURNALNUMBER;
	row52.ITEMNUMBER = next_tHashInput_12.ITEMNUMBER;
	row52.PRICE = next_tHashInput_12.PRICE;
	row52.PRICECURRENCYCODE = next_tHashInput_12.PRICECURRENCYCODE;
	row52.PRICECUSTOMERGROUPCODE = next_tHashInput_12.PRICECUSTOMERGROUPCODE;
	row52.PRODUCTCOLORID = next_tHashInput_12.PRODUCTCOLORID;
	row52.PRODUCTSIZEID = next_tHashInput_12.PRODUCTSIZEID;
	row52.PRODUCTSTYLEID = next_tHashInput_12.PRODUCTSTYLEID;
	row52.QUANTITYUNITSYMBOL = next_tHashInput_12.QUANTITYUNITSYMBOL;
 



/**
 * [tHashInput_12 begin ] stop
 */
	
	/**
	 * [tHashInput_12 main ] start
	 */

	

	
	
	currentComponent="tHashInput_12";

	

 


	tos_count_tHashInput_12++;

/**
 * [tHashInput_12 main ] stop
 */
	
	/**
	 * [tHashInput_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_12";

	

 



/**
 * [tHashInput_12 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_2 main ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1,"row52");
						}
						
//////////
 

// for output
			row41 = new row41Struct();
								
			row41.TRADEAGREEMENTJOURNALNUMBER = row52.TRADEAGREEMENTJOURNALNUMBER;								
			row41.ITEMNUMBER = row52.ITEMNUMBER;								
			row41.PRICE = row52.PRICE;								
			row41.PRICECURRENCYCODE = row52.PRICECURRENCYCODE;								
			row41.PRICECUSTOMERGROUPCODE = row52.PRICECUSTOMERGROUPCODE;								
			row41.PRODUCTCOLORID = row52.PRODUCTCOLORID;								
			row41.PRODUCTSIZEID = row52.PRODUCTSIZEID;								
			row41.PRODUCTSTYLEID = row52.PRODUCTSTYLEID;								
			row41.QUANTITYUNITSYMBOL = row52.QUANTITYUNITSYMBOL;			

			nb_line_tUnite_2++;

//////////
 


	tos_count_tUnite_2++;

/**
 * [tUnite_2 main ] stop
 */
	
	/**
	 * [tUnite_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	

 



/**
 * [tUnite_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_22 main ] start
	 */

	

	
	
	currentComponent="tMap_22";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row41");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_22 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_22 = false;
		  boolean mainRowRejected_tMap_22 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row42" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow42 = false;
       		  	    	
       		  	    	
 							row42Struct row42ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_22) { // G_TM_M_020

								

								
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row42.lookup( row42HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row42.hasNext()) { // G_TM_M_090

  								
		  				
	  								
						
									
	
		  								forceLooprow42 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow42 = true;
			           		  	} // G 21
                    		  	
                    		

							row42Struct row42 = null;
                    		  	 
							

								while ((tHash_Lookup_row42 != null && tHash_Lookup_row42.hasNext()) || forceLooprow42) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row42'
									
                    		  	 
							   
                    		  	 
	       		  	    	row42Struct fromLookup_row42 = null;
							row42 = row42Default;
										 
							
								
								if(!forceLooprow42) { // G 46
								
							
								 
							
								
								fromLookup_row42 = tHash_Lookup_row42.next();

							

							if(fromLookup_row42 != null) {
								row42 = fromLookup_row42;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow42 = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_22__Struct Var = Var__tMap_22;// ###############################
        // ###############################
        // # Output tables

sortie_map = null;


// # Output table : 'sortie_map'
sortie_map_tmp.TRADEAGREEMENTJOURNALNUMBER = row41.TRADEAGREEMENTJOURNALNUMBER ;
sortie_map_tmp.ITEMNUMBER = row41.ITEMNUMBER ;
sortie_map_tmp.PRICE = row41.PRICE ;
sortie_map_tmp.PRICECURRENCYCODE = row41.PRICECURRENCYCODE ;
sortie_map_tmp.PRICECUSTOMERGROUPCODE = row41.PRICECUSTOMERGROUPCODE ;
sortie_map_tmp.PRODUCTCOLORID = row41.PRODUCTCOLORID ;
sortie_map_tmp.PRODUCTSIZEID = row41.PRODUCTSIZEID ;
sortie_map_tmp.PRODUCTSTYLEID = row41.PRODUCTSTYLEID ;
sortie_map_tmp.QUANTITYUNITSYMBOL = row41.QUANTITYUNITSYMBOL ;
sortie_map_tmp.KRFSALESORDERCATEGORY = row42.SALESORDERCATEGORY ;
sortie_map = sortie_map_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_22 = false;










 


	tos_count_tMap_22++;

/**
 * [tMap_22 main ] stop
 */
	
	/**
	 * [tMap_22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

 



/**
 * [tMap_22 process_data_begin ] stop
 */
// Start of branch "sortie_map"
if(sortie_map != null) { 



	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_map");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

sortie_add_linenumber = null;


// # Output table : 'sortie_add_linenumber'
sortie_add_linenumber_tmp.TRADEAGREEMENTJOURNALNUMBER = sortie_map.TRADEAGREEMENTJOURNALNUMBER ;
sortie_add_linenumber_tmp.ITEMNUMBER = sortie_map.ITEMNUMBER ;
sortie_add_linenumber_tmp.PRICE = sortie_map.PRICE ;
sortie_add_linenumber_tmp.PRICECURRENCYCODE = sortie_map.PRICECURRENCYCODE ;
sortie_add_linenumber_tmp.PRICECUSTOMERGROUPCODE = sortie_map.PRICECUSTOMERGROUPCODE ;
sortie_add_linenumber_tmp.PRODUCTCOLORID = sortie_map.PRODUCTCOLORID ;
sortie_add_linenumber_tmp.PRODUCTSIZEID = sortie_map.PRODUCTSIZEID ;
sortie_add_linenumber_tmp.PRODUCTSTYLEID = sortie_map.PRODUCTSTYLEID ;
sortie_add_linenumber_tmp.QUANTITYUNITSYMBOL = sortie_map.QUANTITYUNITSYMBOL ;
sortie_add_linenumber_tmp.KRFSALESORDERCATEGORY = sortie_map.KRFSALESORDERCATEGORY ;
sortie_add_linenumber_tmp.LINENUMBER = Numeric.sequence("name", 1, 1) ;
sortie_add_linenumber = sortie_add_linenumber_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "sortie_add_linenumber"
if(sortie_add_linenumber != null) { 



	
	/**
	 * [tFileOutputExcel_12 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_12";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_add_linenumber");
					}
					

				xlsxTool_tFileOutputExcel_12.addRow();
									   				
	    				if(sortie_add_linenumber.TRADEAGREEMENTJOURNALNUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.TRADEAGREEMENTJOURNALNUMBER));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.ITEMNUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.ITEMNUMBER));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRICE != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(sortie_add_linenumber.PRICE);
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRICECURRENCYCODE != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.PRICECURRENCYCODE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRICECUSTOMERGROUPCODE != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.PRICECUSTOMERGROUPCODE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRODUCTCOLORID != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.PRODUCTCOLORID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRODUCTSIZEID != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.PRODUCTSIZEID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRODUCTSTYLEID != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.PRODUCTSTYLEID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.QUANTITYUNITSYMBOL != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.QUANTITYUNITSYMBOL));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.KRFSALESORDERCATEGORY != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.KRFSALESORDERCATEGORY));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.LINENUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(Double.parseDouble(String.valueOf(sortie_add_linenumber.LINENUMBER)));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_12++;
				
 


	tos_count_tFileOutputExcel_12++;

/**
 * [tFileOutputExcel_12 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_12";

	

 



/**
 * [tFileOutputExcel_12 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_12";

	

 



/**
 * [tFileOutputExcel_12 process_data_end ] stop
 */

} // End of branch "sortie_add_linenumber"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */

} // End of branch "sortie_map"



	
		} // close loop of lookup 'row42' // G_TM_M_043
	
	
	/**
	 * [tMap_22 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

 



/**
 * [tMap_22 process_data_end ] stop
 */



	
	/**
	 * [tUnite_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	

 



/**
 * [tUnite_2 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_12";

	

 



/**
 * [tHashInput_12 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_12 end ] start
	 */

	

	
	
	currentComponent="tHashInput_12";

	
    

		
			nb_line_tHashInput_12++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_EXTRACT_FOR_DYNAMICS_PRICE_" + pid +"_tHashOutput_12");
	


	globalMap.put("tHashInput_12_NB_LINE", nb_line_tHashInput_12);       

 

ok_Hash.put("tHashInput_12", true);
end_Hash.put("tHashInput_12", System.currentTimeMillis());




/**
 * [tHashInput_12 end ] stop
 */
	
	/**
	 * [tHashInput_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_13", false);
		start_Hash.put("tHashInput_13", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_13";

	
		int tos_count_tHashInput_13 = 0;
		


int nb_line_tHashInput_13 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_13=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row48Struct> tHashFile_tHashInput_13 = mf_tHashInput_13.getAdvancedMemoryHashFile("tHashFile_EXTRACT_FOR_DYNAMICS_PRICE_" + pid +"_tHashOutput_13");
if(tHashFile_tHashInput_13==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row48Struct> iterator_tHashInput_13 = tHashFile_tHashInput_13.iterator();
while (iterator_tHashInput_13.hasNext()) {
    row48Struct next_tHashInput_13 = iterator_tHashInput_13.next();

	row53.TRADEAGREEMENTJOURNALNUMBER = next_tHashInput_13.TRADEAGREEMENTJOURNALNUMBER;
	row53.ITEMNUMBER = next_tHashInput_13.ITEMNUMBER;
	row53.PRICE = next_tHashInput_13.PRICE;
	row53.PRICECURRENCYCODE = next_tHashInput_13.PRICECURRENCYCODE;
	row53.PRICECUSTOMERGROUPCODE = next_tHashInput_13.PRICECUSTOMERGROUPCODE;
	row53.PRODUCTCOLORID = next_tHashInput_13.PRODUCTCOLORID;
	row53.PRODUCTSIZEID = next_tHashInput_13.PRODUCTSIZEID;
	row53.PRODUCTSTYLEID = next_tHashInput_13.PRODUCTSTYLEID;
	row53.QUANTITYUNITSYMBOL = next_tHashInput_13.QUANTITYUNITSYMBOL;
 



/**
 * [tHashInput_13 begin ] stop
 */
	
	/**
	 * [tHashInput_13 main ] start
	 */

	

	
	
	currentComponent="tHashInput_13";

	

 


	tos_count_tHashInput_13++;

/**
 * [tHashInput_13 main ] stop
 */
	
	/**
	 * [tHashInput_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_13";

	

 



/**
 * [tHashInput_13 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_2 main ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1,"row53");
						}
						
//////////
 

// for output
			row41 = new row41Struct();
								
			row41.TRADEAGREEMENTJOURNALNUMBER = row53.TRADEAGREEMENTJOURNALNUMBER;								
			row41.ITEMNUMBER = row53.ITEMNUMBER;								
			row41.PRICE = row53.PRICE;								
			row41.PRICECURRENCYCODE = row53.PRICECURRENCYCODE;								
			row41.PRICECUSTOMERGROUPCODE = row53.PRICECUSTOMERGROUPCODE;								
			row41.PRODUCTCOLORID = row53.PRODUCTCOLORID;								
			row41.PRODUCTSIZEID = row53.PRODUCTSIZEID;								
			row41.PRODUCTSTYLEID = row53.PRODUCTSTYLEID;								
			row41.QUANTITYUNITSYMBOL = row53.QUANTITYUNITSYMBOL;			

			nb_line_tUnite_2++;

//////////
 


	tos_count_tUnite_2++;

/**
 * [tUnite_2 main ] stop
 */
	
	/**
	 * [tUnite_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	

 



/**
 * [tUnite_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_22 main ] start
	 */

	

	
	
	currentComponent="tMap_22";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row41");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_22 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_22 = false;
		  boolean mainRowRejected_tMap_22 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row42" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow42 = false;
       		  	    	
       		  	    	
 							row42Struct row42ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_22) { // G_TM_M_020

								

								
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row42.lookup( row42HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row42.hasNext()) { // G_TM_M_090

  								
		  				
	  								
						
									
	
		  								forceLooprow42 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow42 = true;
			           		  	} // G 21
                    		  	
                    		

							row42Struct row42 = null;
                    		  	 
							

								while ((tHash_Lookup_row42 != null && tHash_Lookup_row42.hasNext()) || forceLooprow42) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row42'
									
                    		  	 
							   
                    		  	 
	       		  	    	row42Struct fromLookup_row42 = null;
							row42 = row42Default;
										 
							
								
								if(!forceLooprow42) { // G 46
								
							
								 
							
								
								fromLookup_row42 = tHash_Lookup_row42.next();

							

							if(fromLookup_row42 != null) {
								row42 = fromLookup_row42;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow42 = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_22__Struct Var = Var__tMap_22;// ###############################
        // ###############################
        // # Output tables

sortie_map = null;


// # Output table : 'sortie_map'
sortie_map_tmp.TRADEAGREEMENTJOURNALNUMBER = row41.TRADEAGREEMENTJOURNALNUMBER ;
sortie_map_tmp.ITEMNUMBER = row41.ITEMNUMBER ;
sortie_map_tmp.PRICE = row41.PRICE ;
sortie_map_tmp.PRICECURRENCYCODE = row41.PRICECURRENCYCODE ;
sortie_map_tmp.PRICECUSTOMERGROUPCODE = row41.PRICECUSTOMERGROUPCODE ;
sortie_map_tmp.PRODUCTCOLORID = row41.PRODUCTCOLORID ;
sortie_map_tmp.PRODUCTSIZEID = row41.PRODUCTSIZEID ;
sortie_map_tmp.PRODUCTSTYLEID = row41.PRODUCTSTYLEID ;
sortie_map_tmp.QUANTITYUNITSYMBOL = row41.QUANTITYUNITSYMBOL ;
sortie_map_tmp.KRFSALESORDERCATEGORY = row42.SALESORDERCATEGORY ;
sortie_map = sortie_map_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_22 = false;










 


	tos_count_tMap_22++;

/**
 * [tMap_22 main ] stop
 */
	
	/**
	 * [tMap_22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

 



/**
 * [tMap_22 process_data_begin ] stop
 */
// Start of branch "sortie_map"
if(sortie_map != null) { 



	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_map");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

sortie_add_linenumber = null;


// # Output table : 'sortie_add_linenumber'
sortie_add_linenumber_tmp.TRADEAGREEMENTJOURNALNUMBER = sortie_map.TRADEAGREEMENTJOURNALNUMBER ;
sortie_add_linenumber_tmp.ITEMNUMBER = sortie_map.ITEMNUMBER ;
sortie_add_linenumber_tmp.PRICE = sortie_map.PRICE ;
sortie_add_linenumber_tmp.PRICECURRENCYCODE = sortie_map.PRICECURRENCYCODE ;
sortie_add_linenumber_tmp.PRICECUSTOMERGROUPCODE = sortie_map.PRICECUSTOMERGROUPCODE ;
sortie_add_linenumber_tmp.PRODUCTCOLORID = sortie_map.PRODUCTCOLORID ;
sortie_add_linenumber_tmp.PRODUCTSIZEID = sortie_map.PRODUCTSIZEID ;
sortie_add_linenumber_tmp.PRODUCTSTYLEID = sortie_map.PRODUCTSTYLEID ;
sortie_add_linenumber_tmp.QUANTITYUNITSYMBOL = sortie_map.QUANTITYUNITSYMBOL ;
sortie_add_linenumber_tmp.KRFSALESORDERCATEGORY = sortie_map.KRFSALESORDERCATEGORY ;
sortie_add_linenumber_tmp.LINENUMBER = Numeric.sequence("name", 1, 1) ;
sortie_add_linenumber = sortie_add_linenumber_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "sortie_add_linenumber"
if(sortie_add_linenumber != null) { 



	
	/**
	 * [tFileOutputExcel_12 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_12";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_add_linenumber");
					}
					

				xlsxTool_tFileOutputExcel_12.addRow();
									   				
	    				if(sortie_add_linenumber.TRADEAGREEMENTJOURNALNUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.TRADEAGREEMENTJOURNALNUMBER));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.ITEMNUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.ITEMNUMBER));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRICE != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(sortie_add_linenumber.PRICE);
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRICECURRENCYCODE != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.PRICECURRENCYCODE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRICECUSTOMERGROUPCODE != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.PRICECUSTOMERGROUPCODE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRODUCTCOLORID != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.PRODUCTCOLORID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRODUCTSIZEID != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.PRODUCTSIZEID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRODUCTSTYLEID != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.PRODUCTSTYLEID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.QUANTITYUNITSYMBOL != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.QUANTITYUNITSYMBOL));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.KRFSALESORDERCATEGORY != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.KRFSALESORDERCATEGORY));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.LINENUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(Double.parseDouble(String.valueOf(sortie_add_linenumber.LINENUMBER)));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_12++;
				
 


	tos_count_tFileOutputExcel_12++;

/**
 * [tFileOutputExcel_12 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_12";

	

 



/**
 * [tFileOutputExcel_12 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_12";

	

 



/**
 * [tFileOutputExcel_12 process_data_end ] stop
 */

} // End of branch "sortie_add_linenumber"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */

} // End of branch "sortie_map"



	
		} // close loop of lookup 'row42' // G_TM_M_043
	
	
	/**
	 * [tMap_22 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

 



/**
 * [tMap_22 process_data_end ] stop
 */



	
	/**
	 * [tUnite_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	

 



/**
 * [tUnite_2 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_13";

	

 



/**
 * [tHashInput_13 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_13 end ] start
	 */

	

	
	
	currentComponent="tHashInput_13";

	
    

		
			nb_line_tHashInput_13++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_EXTRACT_FOR_DYNAMICS_PRICE_" + pid +"_tHashOutput_13");
	


	globalMap.put("tHashInput_13_NB_LINE", nb_line_tHashInput_13);       

 

ok_Hash.put("tHashInput_13", true);
end_Hash.put("tHashInput_13", System.currentTimeMillis());




/**
 * [tHashInput_13 end ] stop
 */
	
	/**
	 * [tHashInput_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_14", false);
		start_Hash.put("tHashInput_14", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_14";

	
		int tos_count_tHashInput_14 = 0;
		


int nb_line_tHashInput_14 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_14=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row50Struct> tHashFile_tHashInput_14 = mf_tHashInput_14.getAdvancedMemoryHashFile("tHashFile_EXTRACT_FOR_DYNAMICS_PRICE_" + pid +"_tHashOutput_14");
if(tHashFile_tHashInput_14==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row50Struct> iterator_tHashInput_14 = tHashFile_tHashInput_14.iterator();
while (iterator_tHashInput_14.hasNext()) {
    row50Struct next_tHashInput_14 = iterator_tHashInput_14.next();

	row54.TRADEAGREEMENTJOURNALNUMBER = next_tHashInput_14.TRADEAGREEMENTJOURNALNUMBER;
	row54.ITEMNUMBER = next_tHashInput_14.ITEMNUMBER;
	row54.PRICE = next_tHashInput_14.PRICE;
	row54.PRICECURRENCYCODE = next_tHashInput_14.PRICECURRENCYCODE;
	row54.PRICECUSTOMERGROUPCODE = next_tHashInput_14.PRICECUSTOMERGROUPCODE;
	row54.PRODUCTCOLORID = next_tHashInput_14.PRODUCTCOLORID;
	row54.PRODUCTSIZEID = next_tHashInput_14.PRODUCTSIZEID;
	row54.PRODUCTSTYLEID = next_tHashInput_14.PRODUCTSTYLEID;
	row54.QUANTITYUNITSYMBOL = next_tHashInput_14.QUANTITYUNITSYMBOL;
 



/**
 * [tHashInput_14 begin ] stop
 */
	
	/**
	 * [tHashInput_14 main ] start
	 */

	

	
	
	currentComponent="tHashInput_14";

	

 


	tos_count_tHashInput_14++;

/**
 * [tHashInput_14 main ] stop
 */
	
	/**
	 * [tHashInput_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_14";

	

 



/**
 * [tHashInput_14 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_2 main ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1,"row54");
						}
						
//////////
 

// for output
			row41 = new row41Struct();
								
			row41.TRADEAGREEMENTJOURNALNUMBER = row54.TRADEAGREEMENTJOURNALNUMBER;								
			row41.ITEMNUMBER = row54.ITEMNUMBER;								
			row41.PRICE = row54.PRICE;								
			row41.PRICECURRENCYCODE = row54.PRICECURRENCYCODE;								
			row41.PRICECUSTOMERGROUPCODE = row54.PRICECUSTOMERGROUPCODE;								
			row41.PRODUCTCOLORID = row54.PRODUCTCOLORID;								
			row41.PRODUCTSIZEID = row54.PRODUCTSIZEID;								
			row41.PRODUCTSTYLEID = row54.PRODUCTSTYLEID;								
			row41.QUANTITYUNITSYMBOL = row54.QUANTITYUNITSYMBOL;			

			nb_line_tUnite_2++;

//////////
 


	tos_count_tUnite_2++;

/**
 * [tUnite_2 main ] stop
 */
	
	/**
	 * [tUnite_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	

 



/**
 * [tUnite_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_22 main ] start
	 */

	

	
	
	currentComponent="tMap_22";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row41");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_22 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_22 = false;
		  boolean mainRowRejected_tMap_22 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row42" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow42 = false;
       		  	    	
       		  	    	
 							row42Struct row42ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_22) { // G_TM_M_020

								

								
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row42.lookup( row42HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row42.hasNext()) { // G_TM_M_090

  								
		  				
	  								
						
									
	
		  								forceLooprow42 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow42 = true;
			           		  	} // G 21
                    		  	
                    		

							row42Struct row42 = null;
                    		  	 
							

								while ((tHash_Lookup_row42 != null && tHash_Lookup_row42.hasNext()) || forceLooprow42) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row42'
									
                    		  	 
							   
                    		  	 
	       		  	    	row42Struct fromLookup_row42 = null;
							row42 = row42Default;
										 
							
								
								if(!forceLooprow42) { // G 46
								
							
								 
							
								
								fromLookup_row42 = tHash_Lookup_row42.next();

							

							if(fromLookup_row42 != null) {
								row42 = fromLookup_row42;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow42 = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_22__Struct Var = Var__tMap_22;// ###############################
        // ###############################
        // # Output tables

sortie_map = null;


// # Output table : 'sortie_map'
sortie_map_tmp.TRADEAGREEMENTJOURNALNUMBER = row41.TRADEAGREEMENTJOURNALNUMBER ;
sortie_map_tmp.ITEMNUMBER = row41.ITEMNUMBER ;
sortie_map_tmp.PRICE = row41.PRICE ;
sortie_map_tmp.PRICECURRENCYCODE = row41.PRICECURRENCYCODE ;
sortie_map_tmp.PRICECUSTOMERGROUPCODE = row41.PRICECUSTOMERGROUPCODE ;
sortie_map_tmp.PRODUCTCOLORID = row41.PRODUCTCOLORID ;
sortie_map_tmp.PRODUCTSIZEID = row41.PRODUCTSIZEID ;
sortie_map_tmp.PRODUCTSTYLEID = row41.PRODUCTSTYLEID ;
sortie_map_tmp.QUANTITYUNITSYMBOL = row41.QUANTITYUNITSYMBOL ;
sortie_map_tmp.KRFSALESORDERCATEGORY = row42.SALESORDERCATEGORY ;
sortie_map = sortie_map_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_22 = false;










 


	tos_count_tMap_22++;

/**
 * [tMap_22 main ] stop
 */
	
	/**
	 * [tMap_22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

 



/**
 * [tMap_22 process_data_begin ] stop
 */
// Start of branch "sortie_map"
if(sortie_map != null) { 



	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_map");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

sortie_add_linenumber = null;


// # Output table : 'sortie_add_linenumber'
sortie_add_linenumber_tmp.TRADEAGREEMENTJOURNALNUMBER = sortie_map.TRADEAGREEMENTJOURNALNUMBER ;
sortie_add_linenumber_tmp.ITEMNUMBER = sortie_map.ITEMNUMBER ;
sortie_add_linenumber_tmp.PRICE = sortie_map.PRICE ;
sortie_add_linenumber_tmp.PRICECURRENCYCODE = sortie_map.PRICECURRENCYCODE ;
sortie_add_linenumber_tmp.PRICECUSTOMERGROUPCODE = sortie_map.PRICECUSTOMERGROUPCODE ;
sortie_add_linenumber_tmp.PRODUCTCOLORID = sortie_map.PRODUCTCOLORID ;
sortie_add_linenumber_tmp.PRODUCTSIZEID = sortie_map.PRODUCTSIZEID ;
sortie_add_linenumber_tmp.PRODUCTSTYLEID = sortie_map.PRODUCTSTYLEID ;
sortie_add_linenumber_tmp.QUANTITYUNITSYMBOL = sortie_map.QUANTITYUNITSYMBOL ;
sortie_add_linenumber_tmp.KRFSALESORDERCATEGORY = sortie_map.KRFSALESORDERCATEGORY ;
sortie_add_linenumber_tmp.LINENUMBER = Numeric.sequence("name", 1, 1) ;
sortie_add_linenumber = sortie_add_linenumber_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "sortie_add_linenumber"
if(sortie_add_linenumber != null) { 



	
	/**
	 * [tFileOutputExcel_12 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_12";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_add_linenumber");
					}
					

				xlsxTool_tFileOutputExcel_12.addRow();
									   				
	    				if(sortie_add_linenumber.TRADEAGREEMENTJOURNALNUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.TRADEAGREEMENTJOURNALNUMBER));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.ITEMNUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.ITEMNUMBER));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRICE != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(sortie_add_linenumber.PRICE);
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRICECURRENCYCODE != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.PRICECURRENCYCODE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRICECUSTOMERGROUPCODE != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.PRICECUSTOMERGROUPCODE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRODUCTCOLORID != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.PRODUCTCOLORID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRODUCTSIZEID != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.PRODUCTSIZEID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRODUCTSTYLEID != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.PRODUCTSTYLEID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.QUANTITYUNITSYMBOL != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.QUANTITYUNITSYMBOL));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.KRFSALESORDERCATEGORY != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.KRFSALESORDERCATEGORY));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.LINENUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(Double.parseDouble(String.valueOf(sortie_add_linenumber.LINENUMBER)));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_12++;
				
 


	tos_count_tFileOutputExcel_12++;

/**
 * [tFileOutputExcel_12 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_12";

	

 



/**
 * [tFileOutputExcel_12 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_12";

	

 



/**
 * [tFileOutputExcel_12 process_data_end ] stop
 */

} // End of branch "sortie_add_linenumber"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */

} // End of branch "sortie_map"



	
		} // close loop of lookup 'row42' // G_TM_M_043
	
	
	/**
	 * [tMap_22 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

 



/**
 * [tMap_22 process_data_end ] stop
 */



	
	/**
	 * [tUnite_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	

 



/**
 * [tUnite_2 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_14";

	

 



/**
 * [tHashInput_14 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_14 end ] start
	 */

	

	
	
	currentComponent="tHashInput_14";

	
    

		
			nb_line_tHashInput_14++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_EXTRACT_FOR_DYNAMICS_PRICE_" + pid +"_tHashOutput_14");
	


	globalMap.put("tHashInput_14_NB_LINE", nb_line_tHashInput_14);       

 

ok_Hash.put("tHashInput_14", true);
end_Hash.put("tHashInput_14", System.currentTimeMillis());




/**
 * [tHashInput_14 end ] stop
 */
	
	/**
	 * [tHashInput_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_15", false);
		start_Hash.put("tHashInput_15", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_15";

	
		int tos_count_tHashInput_15 = 0;
		


int nb_line_tHashInput_15 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_15=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row56Struct> tHashFile_tHashInput_15 = mf_tHashInput_15.getAdvancedMemoryHashFile("tHashFile_EXTRACT_FOR_DYNAMICS_PRICE_" + pid +"_tHashOutput_15");
if(tHashFile_tHashInput_15==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row56Struct> iterator_tHashInput_15 = tHashFile_tHashInput_15.iterator();
while (iterator_tHashInput_15.hasNext()) {
    row56Struct next_tHashInput_15 = iterator_tHashInput_15.next();

	row59.TRADEAGREEMENTJOURNALNUMBER = next_tHashInput_15.TRADEAGREEMENTJOURNALNUMBER;
	row59.ITEMNUMBER = next_tHashInput_15.ITEMNUMBER;
	row59.PRICE = next_tHashInput_15.PRICE;
	row59.PRICECURRENCYCODE = next_tHashInput_15.PRICECURRENCYCODE;
	row59.PRICECUSTOMERGROUPCODE = next_tHashInput_15.PRICECUSTOMERGROUPCODE;
	row59.PRODUCTCOLORID = next_tHashInput_15.PRODUCTCOLORID;
	row59.PRODUCTSIZEID = next_tHashInput_15.PRODUCTSIZEID;
	row59.PRODUCTSTYLEID = next_tHashInput_15.PRODUCTSTYLEID;
	row59.QUANTITYUNITSYMBOL = next_tHashInput_15.QUANTITYUNITSYMBOL;
 



/**
 * [tHashInput_15 begin ] stop
 */
	
	/**
	 * [tHashInput_15 main ] start
	 */

	

	
	
	currentComponent="tHashInput_15";

	

 


	tos_count_tHashInput_15++;

/**
 * [tHashInput_15 main ] stop
 */
	
	/**
	 * [tHashInput_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_15";

	

 



/**
 * [tHashInput_15 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_2 main ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1,"row59");
						}
						
//////////
 

// for output
			row41 = new row41Struct();
								
			row41.TRADEAGREEMENTJOURNALNUMBER = row59.TRADEAGREEMENTJOURNALNUMBER;								
			row41.ITEMNUMBER = row59.ITEMNUMBER;								
			row41.PRICE = row59.PRICE;								
			row41.PRICECURRENCYCODE = row59.PRICECURRENCYCODE;								
			row41.PRICECUSTOMERGROUPCODE = row59.PRICECUSTOMERGROUPCODE;								
			row41.PRODUCTCOLORID = row59.PRODUCTCOLORID;								
			row41.PRODUCTSIZEID = row59.PRODUCTSIZEID;								
			row41.PRODUCTSTYLEID = row59.PRODUCTSTYLEID;								
			row41.QUANTITYUNITSYMBOL = row59.QUANTITYUNITSYMBOL;			

			nb_line_tUnite_2++;

//////////
 


	tos_count_tUnite_2++;

/**
 * [tUnite_2 main ] stop
 */
	
	/**
	 * [tUnite_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	

 



/**
 * [tUnite_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_22 main ] start
	 */

	

	
	
	currentComponent="tMap_22";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row41");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_22 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_22 = false;
		  boolean mainRowRejected_tMap_22 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row42" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow42 = false;
       		  	    	
       		  	    	
 							row42Struct row42ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_22) { // G_TM_M_020

								

								
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row42.lookup( row42HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row42.hasNext()) { // G_TM_M_090

  								
		  				
	  								
						
									
	
		  								forceLooprow42 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow42 = true;
			           		  	} // G 21
                    		  	
                    		

							row42Struct row42 = null;
                    		  	 
							

								while ((tHash_Lookup_row42 != null && tHash_Lookup_row42.hasNext()) || forceLooprow42) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row42'
									
                    		  	 
							   
                    		  	 
	       		  	    	row42Struct fromLookup_row42 = null;
							row42 = row42Default;
										 
							
								
								if(!forceLooprow42) { // G 46
								
							
								 
							
								
								fromLookup_row42 = tHash_Lookup_row42.next();

							

							if(fromLookup_row42 != null) {
								row42 = fromLookup_row42;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow42 = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_22__Struct Var = Var__tMap_22;// ###############################
        // ###############################
        // # Output tables

sortie_map = null;


// # Output table : 'sortie_map'
sortie_map_tmp.TRADEAGREEMENTJOURNALNUMBER = row41.TRADEAGREEMENTJOURNALNUMBER ;
sortie_map_tmp.ITEMNUMBER = row41.ITEMNUMBER ;
sortie_map_tmp.PRICE = row41.PRICE ;
sortie_map_tmp.PRICECURRENCYCODE = row41.PRICECURRENCYCODE ;
sortie_map_tmp.PRICECUSTOMERGROUPCODE = row41.PRICECUSTOMERGROUPCODE ;
sortie_map_tmp.PRODUCTCOLORID = row41.PRODUCTCOLORID ;
sortie_map_tmp.PRODUCTSIZEID = row41.PRODUCTSIZEID ;
sortie_map_tmp.PRODUCTSTYLEID = row41.PRODUCTSTYLEID ;
sortie_map_tmp.QUANTITYUNITSYMBOL = row41.QUANTITYUNITSYMBOL ;
sortie_map_tmp.KRFSALESORDERCATEGORY = row42.SALESORDERCATEGORY ;
sortie_map = sortie_map_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_22 = false;










 


	tos_count_tMap_22++;

/**
 * [tMap_22 main ] stop
 */
	
	/**
	 * [tMap_22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

 



/**
 * [tMap_22 process_data_begin ] stop
 */
// Start of branch "sortie_map"
if(sortie_map != null) { 



	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_map");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

sortie_add_linenumber = null;


// # Output table : 'sortie_add_linenumber'
sortie_add_linenumber_tmp.TRADEAGREEMENTJOURNALNUMBER = sortie_map.TRADEAGREEMENTJOURNALNUMBER ;
sortie_add_linenumber_tmp.ITEMNUMBER = sortie_map.ITEMNUMBER ;
sortie_add_linenumber_tmp.PRICE = sortie_map.PRICE ;
sortie_add_linenumber_tmp.PRICECURRENCYCODE = sortie_map.PRICECURRENCYCODE ;
sortie_add_linenumber_tmp.PRICECUSTOMERGROUPCODE = sortie_map.PRICECUSTOMERGROUPCODE ;
sortie_add_linenumber_tmp.PRODUCTCOLORID = sortie_map.PRODUCTCOLORID ;
sortie_add_linenumber_tmp.PRODUCTSIZEID = sortie_map.PRODUCTSIZEID ;
sortie_add_linenumber_tmp.PRODUCTSTYLEID = sortie_map.PRODUCTSTYLEID ;
sortie_add_linenumber_tmp.QUANTITYUNITSYMBOL = sortie_map.QUANTITYUNITSYMBOL ;
sortie_add_linenumber_tmp.KRFSALESORDERCATEGORY = sortie_map.KRFSALESORDERCATEGORY ;
sortie_add_linenumber_tmp.LINENUMBER = Numeric.sequence("name", 1, 1) ;
sortie_add_linenumber = sortie_add_linenumber_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "sortie_add_linenumber"
if(sortie_add_linenumber != null) { 



	
	/**
	 * [tFileOutputExcel_12 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_12";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_add_linenumber");
					}
					

				xlsxTool_tFileOutputExcel_12.addRow();
									   				
	    				if(sortie_add_linenumber.TRADEAGREEMENTJOURNALNUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.TRADEAGREEMENTJOURNALNUMBER));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.ITEMNUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.ITEMNUMBER));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRICE != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(sortie_add_linenumber.PRICE);
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRICECURRENCYCODE != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.PRICECURRENCYCODE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRICECUSTOMERGROUPCODE != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.PRICECUSTOMERGROUPCODE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRODUCTCOLORID != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.PRODUCTCOLORID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRODUCTSIZEID != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.PRODUCTSIZEID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRODUCTSTYLEID != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.PRODUCTSTYLEID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.QUANTITYUNITSYMBOL != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.QUANTITYUNITSYMBOL));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.KRFSALESORDERCATEGORY != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.KRFSALESORDERCATEGORY));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.LINENUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(Double.parseDouble(String.valueOf(sortie_add_linenumber.LINENUMBER)));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_12++;
				
 


	tos_count_tFileOutputExcel_12++;

/**
 * [tFileOutputExcel_12 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_12";

	

 



/**
 * [tFileOutputExcel_12 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_12";

	

 



/**
 * [tFileOutputExcel_12 process_data_end ] stop
 */

} // End of branch "sortie_add_linenumber"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */

} // End of branch "sortie_map"



	
		} // close loop of lookup 'row42' // G_TM_M_043
	
	
	/**
	 * [tMap_22 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

 



/**
 * [tMap_22 process_data_end ] stop
 */



	
	/**
	 * [tUnite_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	

 



/**
 * [tUnite_2 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_15";

	

 



/**
 * [tHashInput_15 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_15 end ] start
	 */

	

	
	
	currentComponent="tHashInput_15";

	
    

		
			nb_line_tHashInput_15++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_EXTRACT_FOR_DYNAMICS_PRICE_" + pid +"_tHashOutput_15");
	


	globalMap.put("tHashInput_15_NB_LINE", nb_line_tHashInput_15);       

 

ok_Hash.put("tHashInput_15", true);
end_Hash.put("tHashInput_15", System.currentTimeMillis());




/**
 * [tHashInput_15 end ] stop
 */
	
	/**
	 * [tHashInput_16 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_16", false);
		start_Hash.put("tHashInput_16", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_16";

	
		int tos_count_tHashInput_16 = 0;
		


int nb_line_tHashInput_16 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_16=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row58Struct> tHashFile_tHashInput_16 = mf_tHashInput_16.getAdvancedMemoryHashFile("tHashFile_EXTRACT_FOR_DYNAMICS_PRICE_" + pid +"_tHashOutput_16");
if(tHashFile_tHashInput_16==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row58Struct> iterator_tHashInput_16 = tHashFile_tHashInput_16.iterator();
while (iterator_tHashInput_16.hasNext()) {
    row58Struct next_tHashInput_16 = iterator_tHashInput_16.next();

	row60.TRADEAGREEMENTJOURNALNUMBER = next_tHashInput_16.TRADEAGREEMENTJOURNALNUMBER;
	row60.ITEMNUMBER = next_tHashInput_16.ITEMNUMBER;
	row60.PRICE = next_tHashInput_16.PRICE;
	row60.PRICECURRENCYCODE = next_tHashInput_16.PRICECURRENCYCODE;
	row60.PRICECUSTOMERGROUPCODE = next_tHashInput_16.PRICECUSTOMERGROUPCODE;
	row60.PRODUCTCOLORID = next_tHashInput_16.PRODUCTCOLORID;
	row60.PRODUCTSIZEID = next_tHashInput_16.PRODUCTSIZEID;
	row60.PRODUCTSTYLEID = next_tHashInput_16.PRODUCTSTYLEID;
	row60.QUANTITYUNITSYMBOL = next_tHashInput_16.QUANTITYUNITSYMBOL;
 



/**
 * [tHashInput_16 begin ] stop
 */
	
	/**
	 * [tHashInput_16 main ] start
	 */

	

	
	
	currentComponent="tHashInput_16";

	

 


	tos_count_tHashInput_16++;

/**
 * [tHashInput_16 main ] stop
 */
	
	/**
	 * [tHashInput_16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_16";

	

 



/**
 * [tHashInput_16 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_2 main ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1,"row60");
						}
						
//////////
 

// for output
			row41 = new row41Struct();
								
			row41.TRADEAGREEMENTJOURNALNUMBER = row60.TRADEAGREEMENTJOURNALNUMBER;								
			row41.ITEMNUMBER = row60.ITEMNUMBER;								
			row41.PRICE = row60.PRICE;								
			row41.PRICECURRENCYCODE = row60.PRICECURRENCYCODE;								
			row41.PRICECUSTOMERGROUPCODE = row60.PRICECUSTOMERGROUPCODE;								
			row41.PRODUCTCOLORID = row60.PRODUCTCOLORID;								
			row41.PRODUCTSIZEID = row60.PRODUCTSIZEID;								
			row41.PRODUCTSTYLEID = row60.PRODUCTSTYLEID;								
			row41.QUANTITYUNITSYMBOL = row60.QUANTITYUNITSYMBOL;			

			nb_line_tUnite_2++;

//////////
 


	tos_count_tUnite_2++;

/**
 * [tUnite_2 main ] stop
 */
	
	/**
	 * [tUnite_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	

 



/**
 * [tUnite_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_22 main ] start
	 */

	

	
	
	currentComponent="tMap_22";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row41");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_22 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_22 = false;
		  boolean mainRowRejected_tMap_22 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row42" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow42 = false;
       		  	    	
       		  	    	
 							row42Struct row42ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_22) { // G_TM_M_020

								

								
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row42.lookup( row42HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row42.hasNext()) { // G_TM_M_090

  								
		  				
	  								
						
									
	
		  								forceLooprow42 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow42 = true;
			           		  	} // G 21
                    		  	
                    		

							row42Struct row42 = null;
                    		  	 
							

								while ((tHash_Lookup_row42 != null && tHash_Lookup_row42.hasNext()) || forceLooprow42) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row42'
									
                    		  	 
							   
                    		  	 
	       		  	    	row42Struct fromLookup_row42 = null;
							row42 = row42Default;
										 
							
								
								if(!forceLooprow42) { // G 46
								
							
								 
							
								
								fromLookup_row42 = tHash_Lookup_row42.next();

							

							if(fromLookup_row42 != null) {
								row42 = fromLookup_row42;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow42 = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_22__Struct Var = Var__tMap_22;// ###############################
        // ###############################
        // # Output tables

sortie_map = null;


// # Output table : 'sortie_map'
sortie_map_tmp.TRADEAGREEMENTJOURNALNUMBER = row41.TRADEAGREEMENTJOURNALNUMBER ;
sortie_map_tmp.ITEMNUMBER = row41.ITEMNUMBER ;
sortie_map_tmp.PRICE = row41.PRICE ;
sortie_map_tmp.PRICECURRENCYCODE = row41.PRICECURRENCYCODE ;
sortie_map_tmp.PRICECUSTOMERGROUPCODE = row41.PRICECUSTOMERGROUPCODE ;
sortie_map_tmp.PRODUCTCOLORID = row41.PRODUCTCOLORID ;
sortie_map_tmp.PRODUCTSIZEID = row41.PRODUCTSIZEID ;
sortie_map_tmp.PRODUCTSTYLEID = row41.PRODUCTSTYLEID ;
sortie_map_tmp.QUANTITYUNITSYMBOL = row41.QUANTITYUNITSYMBOL ;
sortie_map_tmp.KRFSALESORDERCATEGORY = row42.SALESORDERCATEGORY ;
sortie_map = sortie_map_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_22 = false;










 


	tos_count_tMap_22++;

/**
 * [tMap_22 main ] stop
 */
	
	/**
	 * [tMap_22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

 



/**
 * [tMap_22 process_data_begin ] stop
 */
// Start of branch "sortie_map"
if(sortie_map != null) { 



	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_map");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

sortie_add_linenumber = null;


// # Output table : 'sortie_add_linenumber'
sortie_add_linenumber_tmp.TRADEAGREEMENTJOURNALNUMBER = sortie_map.TRADEAGREEMENTJOURNALNUMBER ;
sortie_add_linenumber_tmp.ITEMNUMBER = sortie_map.ITEMNUMBER ;
sortie_add_linenumber_tmp.PRICE = sortie_map.PRICE ;
sortie_add_linenumber_tmp.PRICECURRENCYCODE = sortie_map.PRICECURRENCYCODE ;
sortie_add_linenumber_tmp.PRICECUSTOMERGROUPCODE = sortie_map.PRICECUSTOMERGROUPCODE ;
sortie_add_linenumber_tmp.PRODUCTCOLORID = sortie_map.PRODUCTCOLORID ;
sortie_add_linenumber_tmp.PRODUCTSIZEID = sortie_map.PRODUCTSIZEID ;
sortie_add_linenumber_tmp.PRODUCTSTYLEID = sortie_map.PRODUCTSTYLEID ;
sortie_add_linenumber_tmp.QUANTITYUNITSYMBOL = sortie_map.QUANTITYUNITSYMBOL ;
sortie_add_linenumber_tmp.KRFSALESORDERCATEGORY = sortie_map.KRFSALESORDERCATEGORY ;
sortie_add_linenumber_tmp.LINENUMBER = Numeric.sequence("name", 1, 1) ;
sortie_add_linenumber = sortie_add_linenumber_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "sortie_add_linenumber"
if(sortie_add_linenumber != null) { 



	
	/**
	 * [tFileOutputExcel_12 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_12";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_add_linenumber");
					}
					

				xlsxTool_tFileOutputExcel_12.addRow();
									   				
	    				if(sortie_add_linenumber.TRADEAGREEMENTJOURNALNUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.TRADEAGREEMENTJOURNALNUMBER));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.ITEMNUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.ITEMNUMBER));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRICE != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(sortie_add_linenumber.PRICE);
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRICECURRENCYCODE != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.PRICECURRENCYCODE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRICECUSTOMERGROUPCODE != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.PRICECUSTOMERGROUPCODE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRODUCTCOLORID != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.PRODUCTCOLORID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRODUCTSIZEID != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.PRODUCTSIZEID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRODUCTSTYLEID != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.PRODUCTSTYLEID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.QUANTITYUNITSYMBOL != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.QUANTITYUNITSYMBOL));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.KRFSALESORDERCATEGORY != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.KRFSALESORDERCATEGORY));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.LINENUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(Double.parseDouble(String.valueOf(sortie_add_linenumber.LINENUMBER)));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_12++;
				
 


	tos_count_tFileOutputExcel_12++;

/**
 * [tFileOutputExcel_12 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_12";

	

 



/**
 * [tFileOutputExcel_12 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_12";

	

 



/**
 * [tFileOutputExcel_12 process_data_end ] stop
 */

} // End of branch "sortie_add_linenumber"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */

} // End of branch "sortie_map"



	
		} // close loop of lookup 'row42' // G_TM_M_043
	
	
	/**
	 * [tMap_22 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

 



/**
 * [tMap_22 process_data_end ] stop
 */



	
	/**
	 * [tUnite_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	

 



/**
 * [tUnite_2 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_16 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_16";

	

 



/**
 * [tHashInput_16 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_16 end ] start
	 */

	

	
	
	currentComponent="tHashInput_16";

	
    

		
			nb_line_tHashInput_16++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_EXTRACT_FOR_DYNAMICS_PRICE_" + pid +"_tHashOutput_16");
	


	globalMap.put("tHashInput_16_NB_LINE", nb_line_tHashInput_16);       

 

ok_Hash.put("tHashInput_16", true);
end_Hash.put("tHashInput_16", System.currentTimeMillis());




/**
 * [tHashInput_16 end ] stop
 */
	
	/**
	 * [tHashInput_17 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_17", false);
		start_Hash.put("tHashInput_17", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_17";

	
		int tos_count_tHashInput_17 = 0;
		


int nb_line_tHashInput_17 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_17=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row62Struct> tHashFile_tHashInput_17 = mf_tHashInput_17.getAdvancedMemoryHashFile("tHashFile_EXTRACT_FOR_DYNAMICS_PRICE_" + pid +"_tHashOutput_17");
if(tHashFile_tHashInput_17==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row62Struct> iterator_tHashInput_17 = tHashFile_tHashInput_17.iterator();
while (iterator_tHashInput_17.hasNext()) {
    row62Struct next_tHashInput_17 = iterator_tHashInput_17.next();

	row65.TRADEAGREEMENTJOURNALNUMBER = next_tHashInput_17.TRADEAGREEMENTJOURNALNUMBER;
	row65.ITEMNUMBER = next_tHashInput_17.ITEMNUMBER;
	row65.PRICE = next_tHashInput_17.PRICE;
	row65.PRICECURRENCYCODE = next_tHashInput_17.PRICECURRENCYCODE;
	row65.PRICECUSTOMERGROUPCODE = next_tHashInput_17.PRICECUSTOMERGROUPCODE;
	row65.PRODUCTCOLORID = next_tHashInput_17.PRODUCTCOLORID;
	row65.PRODUCTSIZEID = next_tHashInput_17.PRODUCTSIZEID;
	row65.PRODUCTSTYLEID = next_tHashInput_17.PRODUCTSTYLEID;
	row65.QUANTITYUNITSYMBOL = next_tHashInput_17.QUANTITYUNITSYMBOL;
 



/**
 * [tHashInput_17 begin ] stop
 */
	
	/**
	 * [tHashInput_17 main ] start
	 */

	

	
	
	currentComponent="tHashInput_17";

	

 


	tos_count_tHashInput_17++;

/**
 * [tHashInput_17 main ] stop
 */
	
	/**
	 * [tHashInput_17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_17";

	

 



/**
 * [tHashInput_17 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_2 main ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1,"row65");
						}
						
//////////
 

// for output
			row41 = new row41Struct();
								
			row41.TRADEAGREEMENTJOURNALNUMBER = row65.TRADEAGREEMENTJOURNALNUMBER;								
			row41.ITEMNUMBER = row65.ITEMNUMBER;								
			row41.PRICE = row65.PRICE;								
			row41.PRICECURRENCYCODE = row65.PRICECURRENCYCODE;								
			row41.PRICECUSTOMERGROUPCODE = row65.PRICECUSTOMERGROUPCODE;								
			row41.PRODUCTCOLORID = row65.PRODUCTCOLORID;								
			row41.PRODUCTSIZEID = row65.PRODUCTSIZEID;								
			row41.PRODUCTSTYLEID = row65.PRODUCTSTYLEID;								
			row41.QUANTITYUNITSYMBOL = row65.QUANTITYUNITSYMBOL;			

			nb_line_tUnite_2++;

//////////
 


	tos_count_tUnite_2++;

/**
 * [tUnite_2 main ] stop
 */
	
	/**
	 * [tUnite_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	

 



/**
 * [tUnite_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_22 main ] start
	 */

	

	
	
	currentComponent="tMap_22";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row41");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_22 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_22 = false;
		  boolean mainRowRejected_tMap_22 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row42" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow42 = false;
       		  	    	
       		  	    	
 							row42Struct row42ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_22) { // G_TM_M_020

								

								
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row42.lookup( row42HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row42.hasNext()) { // G_TM_M_090

  								
		  				
	  								
						
									
	
		  								forceLooprow42 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow42 = true;
			           		  	} // G 21
                    		  	
                    		

							row42Struct row42 = null;
                    		  	 
							

								while ((tHash_Lookup_row42 != null && tHash_Lookup_row42.hasNext()) || forceLooprow42) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row42'
									
                    		  	 
							   
                    		  	 
	       		  	    	row42Struct fromLookup_row42 = null;
							row42 = row42Default;
										 
							
								
								if(!forceLooprow42) { // G 46
								
							
								 
							
								
								fromLookup_row42 = tHash_Lookup_row42.next();

							

							if(fromLookup_row42 != null) {
								row42 = fromLookup_row42;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow42 = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_22__Struct Var = Var__tMap_22;// ###############################
        // ###############################
        // # Output tables

sortie_map = null;


// # Output table : 'sortie_map'
sortie_map_tmp.TRADEAGREEMENTJOURNALNUMBER = row41.TRADEAGREEMENTJOURNALNUMBER ;
sortie_map_tmp.ITEMNUMBER = row41.ITEMNUMBER ;
sortie_map_tmp.PRICE = row41.PRICE ;
sortie_map_tmp.PRICECURRENCYCODE = row41.PRICECURRENCYCODE ;
sortie_map_tmp.PRICECUSTOMERGROUPCODE = row41.PRICECUSTOMERGROUPCODE ;
sortie_map_tmp.PRODUCTCOLORID = row41.PRODUCTCOLORID ;
sortie_map_tmp.PRODUCTSIZEID = row41.PRODUCTSIZEID ;
sortie_map_tmp.PRODUCTSTYLEID = row41.PRODUCTSTYLEID ;
sortie_map_tmp.QUANTITYUNITSYMBOL = row41.QUANTITYUNITSYMBOL ;
sortie_map_tmp.KRFSALESORDERCATEGORY = row42.SALESORDERCATEGORY ;
sortie_map = sortie_map_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_22 = false;










 


	tos_count_tMap_22++;

/**
 * [tMap_22 main ] stop
 */
	
	/**
	 * [tMap_22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

 



/**
 * [tMap_22 process_data_begin ] stop
 */
// Start of branch "sortie_map"
if(sortie_map != null) { 



	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_map");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

sortie_add_linenumber = null;


// # Output table : 'sortie_add_linenumber'
sortie_add_linenumber_tmp.TRADEAGREEMENTJOURNALNUMBER = sortie_map.TRADEAGREEMENTJOURNALNUMBER ;
sortie_add_linenumber_tmp.ITEMNUMBER = sortie_map.ITEMNUMBER ;
sortie_add_linenumber_tmp.PRICE = sortie_map.PRICE ;
sortie_add_linenumber_tmp.PRICECURRENCYCODE = sortie_map.PRICECURRENCYCODE ;
sortie_add_linenumber_tmp.PRICECUSTOMERGROUPCODE = sortie_map.PRICECUSTOMERGROUPCODE ;
sortie_add_linenumber_tmp.PRODUCTCOLORID = sortie_map.PRODUCTCOLORID ;
sortie_add_linenumber_tmp.PRODUCTSIZEID = sortie_map.PRODUCTSIZEID ;
sortie_add_linenumber_tmp.PRODUCTSTYLEID = sortie_map.PRODUCTSTYLEID ;
sortie_add_linenumber_tmp.QUANTITYUNITSYMBOL = sortie_map.QUANTITYUNITSYMBOL ;
sortie_add_linenumber_tmp.KRFSALESORDERCATEGORY = sortie_map.KRFSALESORDERCATEGORY ;
sortie_add_linenumber_tmp.LINENUMBER = Numeric.sequence("name", 1, 1) ;
sortie_add_linenumber = sortie_add_linenumber_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "sortie_add_linenumber"
if(sortie_add_linenumber != null) { 



	
	/**
	 * [tFileOutputExcel_12 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_12";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_add_linenumber");
					}
					

				xlsxTool_tFileOutputExcel_12.addRow();
									   				
	    				if(sortie_add_linenumber.TRADEAGREEMENTJOURNALNUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.TRADEAGREEMENTJOURNALNUMBER));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.ITEMNUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.ITEMNUMBER));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRICE != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(sortie_add_linenumber.PRICE);
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRICECURRENCYCODE != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.PRICECURRENCYCODE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRICECUSTOMERGROUPCODE != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.PRICECUSTOMERGROUPCODE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRODUCTCOLORID != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.PRODUCTCOLORID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRODUCTSIZEID != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.PRODUCTSIZEID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRODUCTSTYLEID != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.PRODUCTSTYLEID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.QUANTITYUNITSYMBOL != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.QUANTITYUNITSYMBOL));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.KRFSALESORDERCATEGORY != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.KRFSALESORDERCATEGORY));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.LINENUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(Double.parseDouble(String.valueOf(sortie_add_linenumber.LINENUMBER)));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_12++;
				
 


	tos_count_tFileOutputExcel_12++;

/**
 * [tFileOutputExcel_12 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_12";

	

 



/**
 * [tFileOutputExcel_12 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_12";

	

 



/**
 * [tFileOutputExcel_12 process_data_end ] stop
 */

} // End of branch "sortie_add_linenumber"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */

} // End of branch "sortie_map"



	
		} // close loop of lookup 'row42' // G_TM_M_043
	
	
	/**
	 * [tMap_22 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

 



/**
 * [tMap_22 process_data_end ] stop
 */



	
	/**
	 * [tUnite_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	

 



/**
 * [tUnite_2 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_17 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_17";

	

 



/**
 * [tHashInput_17 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_17 end ] start
	 */

	

	
	
	currentComponent="tHashInput_17";

	
    

		
			nb_line_tHashInput_17++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_EXTRACT_FOR_DYNAMICS_PRICE_" + pid +"_tHashOutput_17");
	


	globalMap.put("tHashInput_17_NB_LINE", nb_line_tHashInput_17);       

 

ok_Hash.put("tHashInput_17", true);
end_Hash.put("tHashInput_17", System.currentTimeMillis());




/**
 * [tHashInput_17 end ] stop
 */
	
	/**
	 * [tHashInput_18 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_18", false);
		start_Hash.put("tHashInput_18", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_18";

	
		int tos_count_tHashInput_18 = 0;
		


int nb_line_tHashInput_18 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_18=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row63Struct> tHashFile_tHashInput_18 = mf_tHashInput_18.getAdvancedMemoryHashFile("tHashFile_EXTRACT_FOR_DYNAMICS_PRICE_" + pid +"_tHashOutput_18");
if(tHashFile_tHashInput_18==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row63Struct> iterator_tHashInput_18 = tHashFile_tHashInput_18.iterator();
while (iterator_tHashInput_18.hasNext()) {
    row63Struct next_tHashInput_18 = iterator_tHashInput_18.next();

	row66.TRADEAGREEMENTJOURNALNUMBER = next_tHashInput_18.TRADEAGREEMENTJOURNALNUMBER;
	row66.ITEMNUMBER = next_tHashInput_18.ITEMNUMBER;
	row66.PRICE = next_tHashInput_18.PRICE;
	row66.PRICECURRENCYCODE = next_tHashInput_18.PRICECURRENCYCODE;
	row66.PRICECUSTOMERGROUPCODE = next_tHashInput_18.PRICECUSTOMERGROUPCODE;
	row66.PRODUCTCOLORID = next_tHashInput_18.PRODUCTCOLORID;
	row66.PRODUCTSIZEID = next_tHashInput_18.PRODUCTSIZEID;
	row66.PRODUCTSTYLEID = next_tHashInput_18.PRODUCTSTYLEID;
	row66.QUANTITYUNITSYMBOL = next_tHashInput_18.QUANTITYUNITSYMBOL;
 



/**
 * [tHashInput_18 begin ] stop
 */
	
	/**
	 * [tHashInput_18 main ] start
	 */

	

	
	
	currentComponent="tHashInput_18";

	

 


	tos_count_tHashInput_18++;

/**
 * [tHashInput_18 main ] stop
 */
	
	/**
	 * [tHashInput_18 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_18";

	

 



/**
 * [tHashInput_18 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_2 main ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1,"row66");
						}
						
//////////
 

// for output
			row41 = new row41Struct();
								
			row41.TRADEAGREEMENTJOURNALNUMBER = row66.TRADEAGREEMENTJOURNALNUMBER;								
			row41.ITEMNUMBER = row66.ITEMNUMBER;								
			row41.PRICE = row66.PRICE;								
			row41.PRICECURRENCYCODE = row66.PRICECURRENCYCODE;								
			row41.PRICECUSTOMERGROUPCODE = row66.PRICECUSTOMERGROUPCODE;								
			row41.PRODUCTCOLORID = row66.PRODUCTCOLORID;								
			row41.PRODUCTSIZEID = row66.PRODUCTSIZEID;								
			row41.PRODUCTSTYLEID = row66.PRODUCTSTYLEID;								
			row41.QUANTITYUNITSYMBOL = row66.QUANTITYUNITSYMBOL;			

			nb_line_tUnite_2++;

//////////
 


	tos_count_tUnite_2++;

/**
 * [tUnite_2 main ] stop
 */
	
	/**
	 * [tUnite_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	

 



/**
 * [tUnite_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_22 main ] start
	 */

	

	
	
	currentComponent="tMap_22";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row41");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_22 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_22 = false;
		  boolean mainRowRejected_tMap_22 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row42" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow42 = false;
       		  	    	
       		  	    	
 							row42Struct row42ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_22) { // G_TM_M_020

								

								
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row42.lookup( row42HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row42.hasNext()) { // G_TM_M_090

  								
		  				
	  								
						
									
	
		  								forceLooprow42 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow42 = true;
			           		  	} // G 21
                    		  	
                    		

							row42Struct row42 = null;
                    		  	 
							

								while ((tHash_Lookup_row42 != null && tHash_Lookup_row42.hasNext()) || forceLooprow42) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row42'
									
                    		  	 
							   
                    		  	 
	       		  	    	row42Struct fromLookup_row42 = null;
							row42 = row42Default;
										 
							
								
								if(!forceLooprow42) { // G 46
								
							
								 
							
								
								fromLookup_row42 = tHash_Lookup_row42.next();

							

							if(fromLookup_row42 != null) {
								row42 = fromLookup_row42;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow42 = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_22__Struct Var = Var__tMap_22;// ###############################
        // ###############################
        // # Output tables

sortie_map = null;


// # Output table : 'sortie_map'
sortie_map_tmp.TRADEAGREEMENTJOURNALNUMBER = row41.TRADEAGREEMENTJOURNALNUMBER ;
sortie_map_tmp.ITEMNUMBER = row41.ITEMNUMBER ;
sortie_map_tmp.PRICE = row41.PRICE ;
sortie_map_tmp.PRICECURRENCYCODE = row41.PRICECURRENCYCODE ;
sortie_map_tmp.PRICECUSTOMERGROUPCODE = row41.PRICECUSTOMERGROUPCODE ;
sortie_map_tmp.PRODUCTCOLORID = row41.PRODUCTCOLORID ;
sortie_map_tmp.PRODUCTSIZEID = row41.PRODUCTSIZEID ;
sortie_map_tmp.PRODUCTSTYLEID = row41.PRODUCTSTYLEID ;
sortie_map_tmp.QUANTITYUNITSYMBOL = row41.QUANTITYUNITSYMBOL ;
sortie_map_tmp.KRFSALESORDERCATEGORY = row42.SALESORDERCATEGORY ;
sortie_map = sortie_map_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_22 = false;










 


	tos_count_tMap_22++;

/**
 * [tMap_22 main ] stop
 */
	
	/**
	 * [tMap_22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

 



/**
 * [tMap_22 process_data_begin ] stop
 */
// Start of branch "sortie_map"
if(sortie_map != null) { 



	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_map");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

sortie_add_linenumber = null;


// # Output table : 'sortie_add_linenumber'
sortie_add_linenumber_tmp.TRADEAGREEMENTJOURNALNUMBER = sortie_map.TRADEAGREEMENTJOURNALNUMBER ;
sortie_add_linenumber_tmp.ITEMNUMBER = sortie_map.ITEMNUMBER ;
sortie_add_linenumber_tmp.PRICE = sortie_map.PRICE ;
sortie_add_linenumber_tmp.PRICECURRENCYCODE = sortie_map.PRICECURRENCYCODE ;
sortie_add_linenumber_tmp.PRICECUSTOMERGROUPCODE = sortie_map.PRICECUSTOMERGROUPCODE ;
sortie_add_linenumber_tmp.PRODUCTCOLORID = sortie_map.PRODUCTCOLORID ;
sortie_add_linenumber_tmp.PRODUCTSIZEID = sortie_map.PRODUCTSIZEID ;
sortie_add_linenumber_tmp.PRODUCTSTYLEID = sortie_map.PRODUCTSTYLEID ;
sortie_add_linenumber_tmp.QUANTITYUNITSYMBOL = sortie_map.QUANTITYUNITSYMBOL ;
sortie_add_linenumber_tmp.KRFSALESORDERCATEGORY = sortie_map.KRFSALESORDERCATEGORY ;
sortie_add_linenumber_tmp.LINENUMBER = Numeric.sequence("name", 1, 1) ;
sortie_add_linenumber = sortie_add_linenumber_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "sortie_add_linenumber"
if(sortie_add_linenumber != null) { 



	
	/**
	 * [tFileOutputExcel_12 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_12";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_add_linenumber");
					}
					

				xlsxTool_tFileOutputExcel_12.addRow();
									   				
	    				if(sortie_add_linenumber.TRADEAGREEMENTJOURNALNUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.TRADEAGREEMENTJOURNALNUMBER));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.ITEMNUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.ITEMNUMBER));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRICE != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(sortie_add_linenumber.PRICE);
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRICECURRENCYCODE != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.PRICECURRENCYCODE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRICECUSTOMERGROUPCODE != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.PRICECUSTOMERGROUPCODE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRODUCTCOLORID != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.PRODUCTCOLORID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRODUCTSIZEID != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.PRODUCTSIZEID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRODUCTSTYLEID != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.PRODUCTSTYLEID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.QUANTITYUNITSYMBOL != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.QUANTITYUNITSYMBOL));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.KRFSALESORDERCATEGORY != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.KRFSALESORDERCATEGORY));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.LINENUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(Double.parseDouble(String.valueOf(sortie_add_linenumber.LINENUMBER)));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_12++;
				
 


	tos_count_tFileOutputExcel_12++;

/**
 * [tFileOutputExcel_12 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_12";

	

 



/**
 * [tFileOutputExcel_12 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_12";

	

 



/**
 * [tFileOutputExcel_12 process_data_end ] stop
 */

} // End of branch "sortie_add_linenumber"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */

} // End of branch "sortie_map"



	
		} // close loop of lookup 'row42' // G_TM_M_043
	
	
	/**
	 * [tMap_22 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

 



/**
 * [tMap_22 process_data_end ] stop
 */



	
	/**
	 * [tUnite_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	

 



/**
 * [tUnite_2 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_18 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_18";

	

 



/**
 * [tHashInput_18 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_18 end ] start
	 */

	

	
	
	currentComponent="tHashInput_18";

	
    

		
			nb_line_tHashInput_18++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_EXTRACT_FOR_DYNAMICS_PRICE_" + pid +"_tHashOutput_18");
	


	globalMap.put("tHashInput_18_NB_LINE", nb_line_tHashInput_18);       

 

ok_Hash.put("tHashInput_18", true);
end_Hash.put("tHashInput_18", System.currentTimeMillis());




/**
 * [tHashInput_18 end ] stop
 */
	
	/**
	 * [tHashInput_19 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_19", false);
		start_Hash.put("tHashInput_19", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_19";

	
		int tos_count_tHashInput_19 = 0;
		


int nb_line_tHashInput_19 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_19=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row67Struct> tHashFile_tHashInput_19 = mf_tHashInput_19.getAdvancedMemoryHashFile("tHashFile_EXTRACT_FOR_DYNAMICS_PRICE_" + pid +"_tHashOutput_19");
if(tHashFile_tHashInput_19==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row67Struct> iterator_tHashInput_19 = tHashFile_tHashInput_19.iterator();
while (iterator_tHashInput_19.hasNext()) {
    row67Struct next_tHashInput_19 = iterator_tHashInput_19.next();

	row71.TRADEAGREEMENTJOURNALNUMBER = next_tHashInput_19.TRADEAGREEMENTJOURNALNUMBER;
	row71.ITEMNUMBER = next_tHashInput_19.ITEMNUMBER;
	row71.PRICE = next_tHashInput_19.PRICE;
	row71.PRICECURRENCYCODE = next_tHashInput_19.PRICECURRENCYCODE;
	row71.PRICECUSTOMERGROUPCODE = next_tHashInput_19.PRICECUSTOMERGROUPCODE;
	row71.PRODUCTCOLORID = next_tHashInput_19.PRODUCTCOLORID;
	row71.PRODUCTSIZEID = next_tHashInput_19.PRODUCTSIZEID;
	row71.PRODUCTSTYLEID = next_tHashInput_19.PRODUCTSTYLEID;
	row71.QUANTITYUNITSYMBOL = next_tHashInput_19.QUANTITYUNITSYMBOL;
 



/**
 * [tHashInput_19 begin ] stop
 */
	
	/**
	 * [tHashInput_19 main ] start
	 */

	

	
	
	currentComponent="tHashInput_19";

	

 


	tos_count_tHashInput_19++;

/**
 * [tHashInput_19 main ] stop
 */
	
	/**
	 * [tHashInput_19 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_19";

	

 



/**
 * [tHashInput_19 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_2 main ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1,"row71");
						}
						
//////////
 

// for output
			row41 = new row41Struct();
								
			row41.TRADEAGREEMENTJOURNALNUMBER = row71.TRADEAGREEMENTJOURNALNUMBER;								
			row41.ITEMNUMBER = row71.ITEMNUMBER;								
			row41.PRICE = row71.PRICE;								
			row41.PRICECURRENCYCODE = row71.PRICECURRENCYCODE;								
			row41.PRICECUSTOMERGROUPCODE = row71.PRICECUSTOMERGROUPCODE;								
			row41.PRODUCTCOLORID = row71.PRODUCTCOLORID;								
			row41.PRODUCTSIZEID = row71.PRODUCTSIZEID;								
			row41.PRODUCTSTYLEID = row71.PRODUCTSTYLEID;								
			row41.QUANTITYUNITSYMBOL = row71.QUANTITYUNITSYMBOL;			

			nb_line_tUnite_2++;

//////////
 


	tos_count_tUnite_2++;

/**
 * [tUnite_2 main ] stop
 */
	
	/**
	 * [tUnite_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	

 



/**
 * [tUnite_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_22 main ] start
	 */

	

	
	
	currentComponent="tMap_22";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row41");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_22 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_22 = false;
		  boolean mainRowRejected_tMap_22 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row42" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow42 = false;
       		  	    	
       		  	    	
 							row42Struct row42ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_22) { // G_TM_M_020

								

								
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row42.lookup( row42HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row42.hasNext()) { // G_TM_M_090

  								
		  				
	  								
						
									
	
		  								forceLooprow42 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow42 = true;
			           		  	} // G 21
                    		  	
                    		

							row42Struct row42 = null;
                    		  	 
							

								while ((tHash_Lookup_row42 != null && tHash_Lookup_row42.hasNext()) || forceLooprow42) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row42'
									
                    		  	 
							   
                    		  	 
	       		  	    	row42Struct fromLookup_row42 = null;
							row42 = row42Default;
										 
							
								
								if(!forceLooprow42) { // G 46
								
							
								 
							
								
								fromLookup_row42 = tHash_Lookup_row42.next();

							

							if(fromLookup_row42 != null) {
								row42 = fromLookup_row42;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow42 = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_22__Struct Var = Var__tMap_22;// ###############################
        // ###############################
        // # Output tables

sortie_map = null;


// # Output table : 'sortie_map'
sortie_map_tmp.TRADEAGREEMENTJOURNALNUMBER = row41.TRADEAGREEMENTJOURNALNUMBER ;
sortie_map_tmp.ITEMNUMBER = row41.ITEMNUMBER ;
sortie_map_tmp.PRICE = row41.PRICE ;
sortie_map_tmp.PRICECURRENCYCODE = row41.PRICECURRENCYCODE ;
sortie_map_tmp.PRICECUSTOMERGROUPCODE = row41.PRICECUSTOMERGROUPCODE ;
sortie_map_tmp.PRODUCTCOLORID = row41.PRODUCTCOLORID ;
sortie_map_tmp.PRODUCTSIZEID = row41.PRODUCTSIZEID ;
sortie_map_tmp.PRODUCTSTYLEID = row41.PRODUCTSTYLEID ;
sortie_map_tmp.QUANTITYUNITSYMBOL = row41.QUANTITYUNITSYMBOL ;
sortie_map_tmp.KRFSALESORDERCATEGORY = row42.SALESORDERCATEGORY ;
sortie_map = sortie_map_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_22 = false;










 


	tos_count_tMap_22++;

/**
 * [tMap_22 main ] stop
 */
	
	/**
	 * [tMap_22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

 



/**
 * [tMap_22 process_data_begin ] stop
 */
// Start of branch "sortie_map"
if(sortie_map != null) { 



	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_map");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

sortie_add_linenumber = null;


// # Output table : 'sortie_add_linenumber'
sortie_add_linenumber_tmp.TRADEAGREEMENTJOURNALNUMBER = sortie_map.TRADEAGREEMENTJOURNALNUMBER ;
sortie_add_linenumber_tmp.ITEMNUMBER = sortie_map.ITEMNUMBER ;
sortie_add_linenumber_tmp.PRICE = sortie_map.PRICE ;
sortie_add_linenumber_tmp.PRICECURRENCYCODE = sortie_map.PRICECURRENCYCODE ;
sortie_add_linenumber_tmp.PRICECUSTOMERGROUPCODE = sortie_map.PRICECUSTOMERGROUPCODE ;
sortie_add_linenumber_tmp.PRODUCTCOLORID = sortie_map.PRODUCTCOLORID ;
sortie_add_linenumber_tmp.PRODUCTSIZEID = sortie_map.PRODUCTSIZEID ;
sortie_add_linenumber_tmp.PRODUCTSTYLEID = sortie_map.PRODUCTSTYLEID ;
sortie_add_linenumber_tmp.QUANTITYUNITSYMBOL = sortie_map.QUANTITYUNITSYMBOL ;
sortie_add_linenumber_tmp.KRFSALESORDERCATEGORY = sortie_map.KRFSALESORDERCATEGORY ;
sortie_add_linenumber_tmp.LINENUMBER = Numeric.sequence("name", 1, 1) ;
sortie_add_linenumber = sortie_add_linenumber_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "sortie_add_linenumber"
if(sortie_add_linenumber != null) { 



	
	/**
	 * [tFileOutputExcel_12 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_12";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_add_linenumber");
					}
					

				xlsxTool_tFileOutputExcel_12.addRow();
									   				
	    				if(sortie_add_linenumber.TRADEAGREEMENTJOURNALNUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.TRADEAGREEMENTJOURNALNUMBER));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.ITEMNUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.ITEMNUMBER));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRICE != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(sortie_add_linenumber.PRICE);
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRICECURRENCYCODE != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.PRICECURRENCYCODE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRICECUSTOMERGROUPCODE != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.PRICECUSTOMERGROUPCODE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRODUCTCOLORID != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.PRODUCTCOLORID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRODUCTSIZEID != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.PRODUCTSIZEID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRODUCTSTYLEID != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.PRODUCTSTYLEID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.QUANTITYUNITSYMBOL != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.QUANTITYUNITSYMBOL));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.KRFSALESORDERCATEGORY != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.KRFSALESORDERCATEGORY));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.LINENUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(Double.parseDouble(String.valueOf(sortie_add_linenumber.LINENUMBER)));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_12++;
				
 


	tos_count_tFileOutputExcel_12++;

/**
 * [tFileOutputExcel_12 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_12";

	

 



/**
 * [tFileOutputExcel_12 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_12";

	

 



/**
 * [tFileOutputExcel_12 process_data_end ] stop
 */

} // End of branch "sortie_add_linenumber"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */

} // End of branch "sortie_map"



	
		} // close loop of lookup 'row42' // G_TM_M_043
	
	
	/**
	 * [tMap_22 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

 



/**
 * [tMap_22 process_data_end ] stop
 */



	
	/**
	 * [tUnite_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	

 



/**
 * [tUnite_2 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_19 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_19";

	

 



/**
 * [tHashInput_19 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_19 end ] start
	 */

	

	
	
	currentComponent="tHashInput_19";

	
    

		
			nb_line_tHashInput_19++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_EXTRACT_FOR_DYNAMICS_PRICE_" + pid +"_tHashOutput_19");
	


	globalMap.put("tHashInput_19_NB_LINE", nb_line_tHashInput_19);       

 

ok_Hash.put("tHashInput_19", true);
end_Hash.put("tHashInput_19", System.currentTimeMillis());




/**
 * [tHashInput_19 end ] stop
 */
	
	/**
	 * [tHashInput_20 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_20", false);
		start_Hash.put("tHashInput_20", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_20";

	
		int tos_count_tHashInput_20 = 0;
		


int nb_line_tHashInput_20 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_20=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row70Struct> tHashFile_tHashInput_20 = mf_tHashInput_20.getAdvancedMemoryHashFile("tHashFile_EXTRACT_FOR_DYNAMICS_PRICE_" + pid +"_tHashOutput_20");
if(tHashFile_tHashInput_20==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row70Struct> iterator_tHashInput_20 = tHashFile_tHashInput_20.iterator();
while (iterator_tHashInput_20.hasNext()) {
    row70Struct next_tHashInput_20 = iterator_tHashInput_20.next();

	row72.TRADEAGREEMENTJOURNALNUMBER = next_tHashInput_20.TRADEAGREEMENTJOURNALNUMBER;
	row72.ITEMNUMBER = next_tHashInput_20.ITEMNUMBER;
	row72.PRICE = next_tHashInput_20.PRICE;
	row72.PRICECURRENCYCODE = next_tHashInput_20.PRICECURRENCYCODE;
	row72.PRICECUSTOMERGROUPCODE = next_tHashInput_20.PRICECUSTOMERGROUPCODE;
	row72.PRODUCTCOLORID = next_tHashInput_20.PRODUCTCOLORID;
	row72.PRODUCTSIZEID = next_tHashInput_20.PRODUCTSIZEID;
	row72.PRODUCTSTYLEID = next_tHashInput_20.PRODUCTSTYLEID;
	row72.QUANTITYUNITSYMBOL = next_tHashInput_20.QUANTITYUNITSYMBOL;
 



/**
 * [tHashInput_20 begin ] stop
 */
	
	/**
	 * [tHashInput_20 main ] start
	 */

	

	
	
	currentComponent="tHashInput_20";

	

 


	tos_count_tHashInput_20++;

/**
 * [tHashInput_20 main ] stop
 */
	
	/**
	 * [tHashInput_20 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_20";

	

 



/**
 * [tHashInput_20 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_2 main ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1,"row72");
						}
						
//////////
 

// for output
			row41 = new row41Struct();
								
			row41.TRADEAGREEMENTJOURNALNUMBER = row72.TRADEAGREEMENTJOURNALNUMBER;								
			row41.ITEMNUMBER = row72.ITEMNUMBER;								
			row41.PRICE = row72.PRICE;								
			row41.PRICECURRENCYCODE = row72.PRICECURRENCYCODE;								
			row41.PRICECUSTOMERGROUPCODE = row72.PRICECUSTOMERGROUPCODE;								
			row41.PRODUCTCOLORID = row72.PRODUCTCOLORID;								
			row41.PRODUCTSIZEID = row72.PRODUCTSIZEID;								
			row41.PRODUCTSTYLEID = row72.PRODUCTSTYLEID;								
			row41.QUANTITYUNITSYMBOL = row72.QUANTITYUNITSYMBOL;			

			nb_line_tUnite_2++;

//////////
 


	tos_count_tUnite_2++;

/**
 * [tUnite_2 main ] stop
 */
	
	/**
	 * [tUnite_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	

 



/**
 * [tUnite_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_22 main ] start
	 */

	

	
	
	currentComponent="tMap_22";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row41");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_22 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_22 = false;
		  boolean mainRowRejected_tMap_22 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row42" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow42 = false;
       		  	    	
       		  	    	
 							row42Struct row42ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_22) { // G_TM_M_020

								

								
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row42.lookup( row42HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row42.hasNext()) { // G_TM_M_090

  								
		  				
	  								
						
									
	
		  								forceLooprow42 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow42 = true;
			           		  	} // G 21
                    		  	
                    		

							row42Struct row42 = null;
                    		  	 
							

								while ((tHash_Lookup_row42 != null && tHash_Lookup_row42.hasNext()) || forceLooprow42) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row42'
									
                    		  	 
							   
                    		  	 
	       		  	    	row42Struct fromLookup_row42 = null;
							row42 = row42Default;
										 
							
								
								if(!forceLooprow42) { // G 46
								
							
								 
							
								
								fromLookup_row42 = tHash_Lookup_row42.next();

							

							if(fromLookup_row42 != null) {
								row42 = fromLookup_row42;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow42 = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_22__Struct Var = Var__tMap_22;// ###############################
        // ###############################
        // # Output tables

sortie_map = null;


// # Output table : 'sortie_map'
sortie_map_tmp.TRADEAGREEMENTJOURNALNUMBER = row41.TRADEAGREEMENTJOURNALNUMBER ;
sortie_map_tmp.ITEMNUMBER = row41.ITEMNUMBER ;
sortie_map_tmp.PRICE = row41.PRICE ;
sortie_map_tmp.PRICECURRENCYCODE = row41.PRICECURRENCYCODE ;
sortie_map_tmp.PRICECUSTOMERGROUPCODE = row41.PRICECUSTOMERGROUPCODE ;
sortie_map_tmp.PRODUCTCOLORID = row41.PRODUCTCOLORID ;
sortie_map_tmp.PRODUCTSIZEID = row41.PRODUCTSIZEID ;
sortie_map_tmp.PRODUCTSTYLEID = row41.PRODUCTSTYLEID ;
sortie_map_tmp.QUANTITYUNITSYMBOL = row41.QUANTITYUNITSYMBOL ;
sortie_map_tmp.KRFSALESORDERCATEGORY = row42.SALESORDERCATEGORY ;
sortie_map = sortie_map_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_22 = false;










 


	tos_count_tMap_22++;

/**
 * [tMap_22 main ] stop
 */
	
	/**
	 * [tMap_22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

 



/**
 * [tMap_22 process_data_begin ] stop
 */
// Start of branch "sortie_map"
if(sortie_map != null) { 



	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_map");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

sortie_add_linenumber = null;


// # Output table : 'sortie_add_linenumber'
sortie_add_linenumber_tmp.TRADEAGREEMENTJOURNALNUMBER = sortie_map.TRADEAGREEMENTJOURNALNUMBER ;
sortie_add_linenumber_tmp.ITEMNUMBER = sortie_map.ITEMNUMBER ;
sortie_add_linenumber_tmp.PRICE = sortie_map.PRICE ;
sortie_add_linenumber_tmp.PRICECURRENCYCODE = sortie_map.PRICECURRENCYCODE ;
sortie_add_linenumber_tmp.PRICECUSTOMERGROUPCODE = sortie_map.PRICECUSTOMERGROUPCODE ;
sortie_add_linenumber_tmp.PRODUCTCOLORID = sortie_map.PRODUCTCOLORID ;
sortie_add_linenumber_tmp.PRODUCTSIZEID = sortie_map.PRODUCTSIZEID ;
sortie_add_linenumber_tmp.PRODUCTSTYLEID = sortie_map.PRODUCTSTYLEID ;
sortie_add_linenumber_tmp.QUANTITYUNITSYMBOL = sortie_map.QUANTITYUNITSYMBOL ;
sortie_add_linenumber_tmp.KRFSALESORDERCATEGORY = sortie_map.KRFSALESORDERCATEGORY ;
sortie_add_linenumber_tmp.LINENUMBER = Numeric.sequence("name", 1, 1) ;
sortie_add_linenumber = sortie_add_linenumber_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "sortie_add_linenumber"
if(sortie_add_linenumber != null) { 



	
	/**
	 * [tFileOutputExcel_12 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_12";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_add_linenumber");
					}
					

				xlsxTool_tFileOutputExcel_12.addRow();
									   				
	    				if(sortie_add_linenumber.TRADEAGREEMENTJOURNALNUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.TRADEAGREEMENTJOURNALNUMBER));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.ITEMNUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.ITEMNUMBER));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRICE != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(sortie_add_linenumber.PRICE);
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRICECURRENCYCODE != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.PRICECURRENCYCODE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRICECUSTOMERGROUPCODE != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.PRICECUSTOMERGROUPCODE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRODUCTCOLORID != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.PRODUCTCOLORID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRODUCTSIZEID != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.PRODUCTSIZEID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRODUCTSTYLEID != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.PRODUCTSTYLEID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.QUANTITYUNITSYMBOL != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.QUANTITYUNITSYMBOL));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.KRFSALESORDERCATEGORY != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.KRFSALESORDERCATEGORY));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.LINENUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(Double.parseDouble(String.valueOf(sortie_add_linenumber.LINENUMBER)));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_12++;
				
 


	tos_count_tFileOutputExcel_12++;

/**
 * [tFileOutputExcel_12 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_12";

	

 



/**
 * [tFileOutputExcel_12 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_12";

	

 



/**
 * [tFileOutputExcel_12 process_data_end ] stop
 */

} // End of branch "sortie_add_linenumber"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */

} // End of branch "sortie_map"



	
		} // close loop of lookup 'row42' // G_TM_M_043
	
	
	/**
	 * [tMap_22 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

 



/**
 * [tMap_22 process_data_end ] stop
 */



	
	/**
	 * [tUnite_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	

 



/**
 * [tUnite_2 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_20 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_20";

	

 



/**
 * [tHashInput_20 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_20 end ] start
	 */

	

	
	
	currentComponent="tHashInput_20";

	
    

		
			nb_line_tHashInput_20++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_EXTRACT_FOR_DYNAMICS_PRICE_" + pid +"_tHashOutput_20");
	


	globalMap.put("tHashInput_20_NB_LINE", nb_line_tHashInput_20);       

 

ok_Hash.put("tHashInput_20", true);
end_Hash.put("tHashInput_20", System.currentTimeMillis());




/**
 * [tHashInput_20 end ] stop
 */
	
	/**
	 * [tHashInput_21 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_21", false);
		start_Hash.put("tHashInput_21", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_21";

	
		int tos_count_tHashInput_21 = 0;
		


int nb_line_tHashInput_21 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_21=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row74Struct> tHashFile_tHashInput_21 = mf_tHashInput_21.getAdvancedMemoryHashFile("tHashFile_EXTRACT_FOR_DYNAMICS_PRICE_" + pid +"_tHashOutput_21");
if(tHashFile_tHashInput_21==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row74Struct> iterator_tHashInput_21 = tHashFile_tHashInput_21.iterator();
while (iterator_tHashInput_21.hasNext()) {
    row74Struct next_tHashInput_21 = iterator_tHashInput_21.next();

	row77.TRADEAGREEMENTJOURNALNUMBER = next_tHashInput_21.TRADEAGREEMENTJOURNALNUMBER;
	row77.ITEMNUMBER = next_tHashInput_21.ITEMNUMBER;
	row77.PRICE = next_tHashInput_21.PRICE;
	row77.PRICECURRENCYCODE = next_tHashInput_21.PRICECURRENCYCODE;
	row77.PRICECUSTOMERGROUPCODE = next_tHashInput_21.PRICECUSTOMERGROUPCODE;
	row77.PRODUCTCOLORID = next_tHashInput_21.PRODUCTCOLORID;
	row77.PRODUCTSIZEID = next_tHashInput_21.PRODUCTSIZEID;
	row77.PRODUCTSTYLEID = next_tHashInput_21.PRODUCTSTYLEID;
	row77.QUANTITYUNITSYMBOL = next_tHashInput_21.QUANTITYUNITSYMBOL;
 



/**
 * [tHashInput_21 begin ] stop
 */
	
	/**
	 * [tHashInput_21 main ] start
	 */

	

	
	
	currentComponent="tHashInput_21";

	

 


	tos_count_tHashInput_21++;

/**
 * [tHashInput_21 main ] stop
 */
	
	/**
	 * [tHashInput_21 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_21";

	

 



/**
 * [tHashInput_21 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_2 main ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1,"row77");
						}
						
//////////
 

// for output
			row41 = new row41Struct();
								
			row41.TRADEAGREEMENTJOURNALNUMBER = row77.TRADEAGREEMENTJOURNALNUMBER;								
			row41.ITEMNUMBER = row77.ITEMNUMBER;								
			row41.PRICE = row77.PRICE;								
			row41.PRICECURRENCYCODE = row77.PRICECURRENCYCODE;								
			row41.PRICECUSTOMERGROUPCODE = row77.PRICECUSTOMERGROUPCODE;								
			row41.PRODUCTCOLORID = row77.PRODUCTCOLORID;								
			row41.PRODUCTSIZEID = row77.PRODUCTSIZEID;								
			row41.PRODUCTSTYLEID = row77.PRODUCTSTYLEID;								
			row41.QUANTITYUNITSYMBOL = row77.QUANTITYUNITSYMBOL;			

			nb_line_tUnite_2++;

//////////
 


	tos_count_tUnite_2++;

/**
 * [tUnite_2 main ] stop
 */
	
	/**
	 * [tUnite_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	

 



/**
 * [tUnite_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_22 main ] start
	 */

	

	
	
	currentComponent="tMap_22";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row41");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_22 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_22 = false;
		  boolean mainRowRejected_tMap_22 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row42" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow42 = false;
       		  	    	
       		  	    	
 							row42Struct row42ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_22) { // G_TM_M_020

								

								
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row42.lookup( row42HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row42.hasNext()) { // G_TM_M_090

  								
		  				
	  								
						
									
	
		  								forceLooprow42 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow42 = true;
			           		  	} // G 21
                    		  	
                    		

							row42Struct row42 = null;
                    		  	 
							

								while ((tHash_Lookup_row42 != null && tHash_Lookup_row42.hasNext()) || forceLooprow42) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row42'
									
                    		  	 
							   
                    		  	 
	       		  	    	row42Struct fromLookup_row42 = null;
							row42 = row42Default;
										 
							
								
								if(!forceLooprow42) { // G 46
								
							
								 
							
								
								fromLookup_row42 = tHash_Lookup_row42.next();

							

							if(fromLookup_row42 != null) {
								row42 = fromLookup_row42;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow42 = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_22__Struct Var = Var__tMap_22;// ###############################
        // ###############################
        // # Output tables

sortie_map = null;


// # Output table : 'sortie_map'
sortie_map_tmp.TRADEAGREEMENTJOURNALNUMBER = row41.TRADEAGREEMENTJOURNALNUMBER ;
sortie_map_tmp.ITEMNUMBER = row41.ITEMNUMBER ;
sortie_map_tmp.PRICE = row41.PRICE ;
sortie_map_tmp.PRICECURRENCYCODE = row41.PRICECURRENCYCODE ;
sortie_map_tmp.PRICECUSTOMERGROUPCODE = row41.PRICECUSTOMERGROUPCODE ;
sortie_map_tmp.PRODUCTCOLORID = row41.PRODUCTCOLORID ;
sortie_map_tmp.PRODUCTSIZEID = row41.PRODUCTSIZEID ;
sortie_map_tmp.PRODUCTSTYLEID = row41.PRODUCTSTYLEID ;
sortie_map_tmp.QUANTITYUNITSYMBOL = row41.QUANTITYUNITSYMBOL ;
sortie_map_tmp.KRFSALESORDERCATEGORY = row42.SALESORDERCATEGORY ;
sortie_map = sortie_map_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_22 = false;










 


	tos_count_tMap_22++;

/**
 * [tMap_22 main ] stop
 */
	
	/**
	 * [tMap_22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

 



/**
 * [tMap_22 process_data_begin ] stop
 */
// Start of branch "sortie_map"
if(sortie_map != null) { 



	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_map");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

sortie_add_linenumber = null;


// # Output table : 'sortie_add_linenumber'
sortie_add_linenumber_tmp.TRADEAGREEMENTJOURNALNUMBER = sortie_map.TRADEAGREEMENTJOURNALNUMBER ;
sortie_add_linenumber_tmp.ITEMNUMBER = sortie_map.ITEMNUMBER ;
sortie_add_linenumber_tmp.PRICE = sortie_map.PRICE ;
sortie_add_linenumber_tmp.PRICECURRENCYCODE = sortie_map.PRICECURRENCYCODE ;
sortie_add_linenumber_tmp.PRICECUSTOMERGROUPCODE = sortie_map.PRICECUSTOMERGROUPCODE ;
sortie_add_linenumber_tmp.PRODUCTCOLORID = sortie_map.PRODUCTCOLORID ;
sortie_add_linenumber_tmp.PRODUCTSIZEID = sortie_map.PRODUCTSIZEID ;
sortie_add_linenumber_tmp.PRODUCTSTYLEID = sortie_map.PRODUCTSTYLEID ;
sortie_add_linenumber_tmp.QUANTITYUNITSYMBOL = sortie_map.QUANTITYUNITSYMBOL ;
sortie_add_linenumber_tmp.KRFSALESORDERCATEGORY = sortie_map.KRFSALESORDERCATEGORY ;
sortie_add_linenumber_tmp.LINENUMBER = Numeric.sequence("name", 1, 1) ;
sortie_add_linenumber = sortie_add_linenumber_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "sortie_add_linenumber"
if(sortie_add_linenumber != null) { 



	
	/**
	 * [tFileOutputExcel_12 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_12";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_add_linenumber");
					}
					

				xlsxTool_tFileOutputExcel_12.addRow();
									   				
	    				if(sortie_add_linenumber.TRADEAGREEMENTJOURNALNUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.TRADEAGREEMENTJOURNALNUMBER));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.ITEMNUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.ITEMNUMBER));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRICE != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(sortie_add_linenumber.PRICE);
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRICECURRENCYCODE != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.PRICECURRENCYCODE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRICECUSTOMERGROUPCODE != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.PRICECUSTOMERGROUPCODE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRODUCTCOLORID != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.PRODUCTCOLORID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRODUCTSIZEID != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.PRODUCTSIZEID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRODUCTSTYLEID != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.PRODUCTSTYLEID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.QUANTITYUNITSYMBOL != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.QUANTITYUNITSYMBOL));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.KRFSALESORDERCATEGORY != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.KRFSALESORDERCATEGORY));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.LINENUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(Double.parseDouble(String.valueOf(sortie_add_linenumber.LINENUMBER)));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_12++;
				
 


	tos_count_tFileOutputExcel_12++;

/**
 * [tFileOutputExcel_12 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_12";

	

 



/**
 * [tFileOutputExcel_12 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_12";

	

 



/**
 * [tFileOutputExcel_12 process_data_end ] stop
 */

} // End of branch "sortie_add_linenumber"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */

} // End of branch "sortie_map"



	
		} // close loop of lookup 'row42' // G_TM_M_043
	
	
	/**
	 * [tMap_22 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

 



/**
 * [tMap_22 process_data_end ] stop
 */



	
	/**
	 * [tUnite_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	

 



/**
 * [tUnite_2 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_21 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_21";

	

 



/**
 * [tHashInput_21 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_21 end ] start
	 */

	

	
	
	currentComponent="tHashInput_21";

	
    

		
			nb_line_tHashInput_21++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_EXTRACT_FOR_DYNAMICS_PRICE_" + pid +"_tHashOutput_21");
	


	globalMap.put("tHashInput_21_NB_LINE", nb_line_tHashInput_21);       

 

ok_Hash.put("tHashInput_21", true);
end_Hash.put("tHashInput_21", System.currentTimeMillis());




/**
 * [tHashInput_21 end ] stop
 */
	
	/**
	 * [tHashInput_22 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_22", false);
		start_Hash.put("tHashInput_22", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_22";

	
		int tos_count_tHashInput_22 = 0;
		


int nb_line_tHashInput_22 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_22=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row76Struct> tHashFile_tHashInput_22 = mf_tHashInput_22.getAdvancedMemoryHashFile("tHashFile_EXTRACT_FOR_DYNAMICS_PRICE_" + pid +"_tHashOutput_22");
if(tHashFile_tHashInput_22==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row76Struct> iterator_tHashInput_22 = tHashFile_tHashInput_22.iterator();
while (iterator_tHashInput_22.hasNext()) {
    row76Struct next_tHashInput_22 = iterator_tHashInput_22.next();

	row78.TRADEAGREEMENTJOURNALNUMBER = next_tHashInput_22.TRADEAGREEMENTJOURNALNUMBER;
	row78.ITEMNUMBER = next_tHashInput_22.ITEMNUMBER;
	row78.PRICE = next_tHashInput_22.PRICE;
	row78.PRICECURRENCYCODE = next_tHashInput_22.PRICECURRENCYCODE;
	row78.PRICECUSTOMERGROUPCODE = next_tHashInput_22.PRICECUSTOMERGROUPCODE;
	row78.PRODUCTCOLORID = next_tHashInput_22.PRODUCTCOLORID;
	row78.PRODUCTSIZEID = next_tHashInput_22.PRODUCTSIZEID;
	row78.PRODUCTSTYLEID = next_tHashInput_22.PRODUCTSTYLEID;
	row78.QUANTITYUNITSYMBOL = next_tHashInput_22.QUANTITYUNITSYMBOL;
 



/**
 * [tHashInput_22 begin ] stop
 */
	
	/**
	 * [tHashInput_22 main ] start
	 */

	

	
	
	currentComponent="tHashInput_22";

	

 


	tos_count_tHashInput_22++;

/**
 * [tHashInput_22 main ] stop
 */
	
	/**
	 * [tHashInput_22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_22";

	

 



/**
 * [tHashInput_22 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_2 main ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1,"row78");
						}
						
//////////
 

// for output
			row41 = new row41Struct();
								
			row41.TRADEAGREEMENTJOURNALNUMBER = row78.TRADEAGREEMENTJOURNALNUMBER;								
			row41.ITEMNUMBER = row78.ITEMNUMBER;								
			row41.PRICE = row78.PRICE;								
			row41.PRICECURRENCYCODE = row78.PRICECURRENCYCODE;								
			row41.PRICECUSTOMERGROUPCODE = row78.PRICECUSTOMERGROUPCODE;								
			row41.PRODUCTCOLORID = row78.PRODUCTCOLORID;								
			row41.PRODUCTSIZEID = row78.PRODUCTSIZEID;								
			row41.PRODUCTSTYLEID = row78.PRODUCTSTYLEID;								
			row41.QUANTITYUNITSYMBOL = row78.QUANTITYUNITSYMBOL;			

			nb_line_tUnite_2++;

//////////
 


	tos_count_tUnite_2++;

/**
 * [tUnite_2 main ] stop
 */
	
	/**
	 * [tUnite_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	

 



/**
 * [tUnite_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_22 main ] start
	 */

	

	
	
	currentComponent="tMap_22";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row41");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_22 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_22 = false;
		  boolean mainRowRejected_tMap_22 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row42" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow42 = false;
       		  	    	
       		  	    	
 							row42Struct row42ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_22) { // G_TM_M_020

								

								
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row42.lookup( row42HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row42.hasNext()) { // G_TM_M_090

  								
		  				
	  								
						
									
	
		  								forceLooprow42 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow42 = true;
			           		  	} // G 21
                    		  	
                    		

							row42Struct row42 = null;
                    		  	 
							

								while ((tHash_Lookup_row42 != null && tHash_Lookup_row42.hasNext()) || forceLooprow42) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row42'
									
                    		  	 
							   
                    		  	 
	       		  	    	row42Struct fromLookup_row42 = null;
							row42 = row42Default;
										 
							
								
								if(!forceLooprow42) { // G 46
								
							
								 
							
								
								fromLookup_row42 = tHash_Lookup_row42.next();

							

							if(fromLookup_row42 != null) {
								row42 = fromLookup_row42;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow42 = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_22__Struct Var = Var__tMap_22;// ###############################
        // ###############################
        // # Output tables

sortie_map = null;


// # Output table : 'sortie_map'
sortie_map_tmp.TRADEAGREEMENTJOURNALNUMBER = row41.TRADEAGREEMENTJOURNALNUMBER ;
sortie_map_tmp.ITEMNUMBER = row41.ITEMNUMBER ;
sortie_map_tmp.PRICE = row41.PRICE ;
sortie_map_tmp.PRICECURRENCYCODE = row41.PRICECURRENCYCODE ;
sortie_map_tmp.PRICECUSTOMERGROUPCODE = row41.PRICECUSTOMERGROUPCODE ;
sortie_map_tmp.PRODUCTCOLORID = row41.PRODUCTCOLORID ;
sortie_map_tmp.PRODUCTSIZEID = row41.PRODUCTSIZEID ;
sortie_map_tmp.PRODUCTSTYLEID = row41.PRODUCTSTYLEID ;
sortie_map_tmp.QUANTITYUNITSYMBOL = row41.QUANTITYUNITSYMBOL ;
sortie_map_tmp.KRFSALESORDERCATEGORY = row42.SALESORDERCATEGORY ;
sortie_map = sortie_map_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_22 = false;










 


	tos_count_tMap_22++;

/**
 * [tMap_22 main ] stop
 */
	
	/**
	 * [tMap_22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

 



/**
 * [tMap_22 process_data_begin ] stop
 */
// Start of branch "sortie_map"
if(sortie_map != null) { 



	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_map");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

sortie_add_linenumber = null;


// # Output table : 'sortie_add_linenumber'
sortie_add_linenumber_tmp.TRADEAGREEMENTJOURNALNUMBER = sortie_map.TRADEAGREEMENTJOURNALNUMBER ;
sortie_add_linenumber_tmp.ITEMNUMBER = sortie_map.ITEMNUMBER ;
sortie_add_linenumber_tmp.PRICE = sortie_map.PRICE ;
sortie_add_linenumber_tmp.PRICECURRENCYCODE = sortie_map.PRICECURRENCYCODE ;
sortie_add_linenumber_tmp.PRICECUSTOMERGROUPCODE = sortie_map.PRICECUSTOMERGROUPCODE ;
sortie_add_linenumber_tmp.PRODUCTCOLORID = sortie_map.PRODUCTCOLORID ;
sortie_add_linenumber_tmp.PRODUCTSIZEID = sortie_map.PRODUCTSIZEID ;
sortie_add_linenumber_tmp.PRODUCTSTYLEID = sortie_map.PRODUCTSTYLEID ;
sortie_add_linenumber_tmp.QUANTITYUNITSYMBOL = sortie_map.QUANTITYUNITSYMBOL ;
sortie_add_linenumber_tmp.KRFSALESORDERCATEGORY = sortie_map.KRFSALESORDERCATEGORY ;
sortie_add_linenumber_tmp.LINENUMBER = Numeric.sequence("name", 1, 1) ;
sortie_add_linenumber = sortie_add_linenumber_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "sortie_add_linenumber"
if(sortie_add_linenumber != null) { 



	
	/**
	 * [tFileOutputExcel_12 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_12";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_add_linenumber");
					}
					

				xlsxTool_tFileOutputExcel_12.addRow();
									   				
	    				if(sortie_add_linenumber.TRADEAGREEMENTJOURNALNUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.TRADEAGREEMENTJOURNALNUMBER));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.ITEMNUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.ITEMNUMBER));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRICE != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(sortie_add_linenumber.PRICE);
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRICECURRENCYCODE != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.PRICECURRENCYCODE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRICECUSTOMERGROUPCODE != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.PRICECUSTOMERGROUPCODE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRODUCTCOLORID != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.PRODUCTCOLORID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRODUCTSIZEID != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.PRODUCTSIZEID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.PRODUCTSTYLEID != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.PRODUCTSTYLEID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.QUANTITYUNITSYMBOL != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.QUANTITYUNITSYMBOL));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.KRFSALESORDERCATEGORY != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(String.valueOf(sortie_add_linenumber.KRFSALESORDERCATEGORY));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_add_linenumber.LINENUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_12.addCellValue(Double.parseDouble(String.valueOf(sortie_add_linenumber.LINENUMBER)));
	    				} else {
	    					xlsxTool_tFileOutputExcel_12.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_12++;
				
 


	tos_count_tFileOutputExcel_12++;

/**
 * [tFileOutputExcel_12 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_12";

	

 



/**
 * [tFileOutputExcel_12 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_12";

	

 



/**
 * [tFileOutputExcel_12 process_data_end ] stop
 */

} // End of branch "sortie_add_linenumber"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */

} // End of branch "sortie_map"



	
		} // close loop of lookup 'row42' // G_TM_M_043
	
	
	/**
	 * [tMap_22 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

 



/**
 * [tMap_22 process_data_end ] stop
 */



	
	/**
	 * [tUnite_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	

 



/**
 * [tUnite_2 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_22 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_22";

	

 



/**
 * [tHashInput_22 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_22 end ] start
	 */

	

	
	
	currentComponent="tHashInput_22";

	
    

		
			nb_line_tHashInput_22++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_EXTRACT_FOR_DYNAMICS_PRICE_" + pid +"_tHashOutput_22");
	


	globalMap.put("tHashInput_22_NB_LINE", nb_line_tHashInput_22);       

 

ok_Hash.put("tHashInput_22", true);
end_Hash.put("tHashInput_22", System.currentTimeMillis());




/**
 * [tHashInput_22 end ] stop
 */
	
	/**
	 * [tUnite_2 end ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	

globalMap.put("tUnite_2_NB_LINE", nb_line_tUnite_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row78","row54","row40","row52","row60","row65","row77","row59","row66","row53","row51","row71","row72","row39");
			  	}
			  	
 

ok_Hash.put("tUnite_2", true);
end_Hash.put("tUnite_2", System.currentTimeMillis());




/**
 * [tUnite_2 end ] stop
 */

	
	/**
	 * [tMap_22 end ] start
	 */

	

	
	
	currentComponent="tMap_22";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row42 != null) {
						tHash_Lookup_row42.endGet();
					}
					globalMap.remove( "tHash_Lookup_row42" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row41");
			  	}
			  	
 

ok_Hash.put("tMap_22", true);
end_Hash.put("tMap_22", System.currentTimeMillis());




/**
 * [tMap_22 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_map");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_12 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_12";

	

	
	
	
			xlsxTool_tFileOutputExcel_12.writeExcel(fileName_tFileOutputExcel_12,true);
	
		
			nb_line_tFileOutputExcel_12 = nb_line_tFileOutputExcel_12 -1;
		
		globalMap.put("tFileOutputExcel_12_NB_LINE",nb_line_tFileOutputExcel_12);
		
		

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_add_linenumber");
			  	}
			  	
 

ok_Hash.put("tFileOutputExcel_12", true);
end_Hash.put("tFileOutputExcel_12", System.currentTimeMillis());




/**
 * [tFileOutputExcel_12 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_22"
					     			globalMap.remove("tHash_Lookup_row42"); 
				     			
				try{
					
	
	/**
	 * [tHashInput_9 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_9";

	

 



/**
 * [tHashInput_9 finally ] stop
 */
	
	/**
	 * [tHashInput_10 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_10";

	

 



/**
 * [tHashInput_10 finally ] stop
 */
	
	/**
	 * [tHashInput_11 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_11";

	

 



/**
 * [tHashInput_11 finally ] stop
 */
	
	/**
	 * [tHashInput_12 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_12";

	

 



/**
 * [tHashInput_12 finally ] stop
 */
	
	/**
	 * [tHashInput_13 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_13";

	

 



/**
 * [tHashInput_13 finally ] stop
 */
	
	/**
	 * [tHashInput_14 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_14";

	

 



/**
 * [tHashInput_14 finally ] stop
 */
	
	/**
	 * [tHashInput_15 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_15";

	

 



/**
 * [tHashInput_15 finally ] stop
 */
	
	/**
	 * [tHashInput_16 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_16";

	

 



/**
 * [tHashInput_16 finally ] stop
 */
	
	/**
	 * [tHashInput_17 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_17";

	

 



/**
 * [tHashInput_17 finally ] stop
 */
	
	/**
	 * [tHashInput_18 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_18";

	

 



/**
 * [tHashInput_18 finally ] stop
 */
	
	/**
	 * [tHashInput_19 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_19";

	

 



/**
 * [tHashInput_19 finally ] stop
 */
	
	/**
	 * [tHashInput_20 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_20";

	

 



/**
 * [tHashInput_20 finally ] stop
 */
	
	/**
	 * [tHashInput_21 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_21";

	

 



/**
 * [tHashInput_21 finally ] stop
 */
	
	/**
	 * [tHashInput_22 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_22";

	

 



/**
 * [tHashInput_22 finally ] stop
 */
	
	/**
	 * [tUnite_2 finally ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	

 



/**
 * [tUnite_2 finally ] stop
 */

	
	/**
	 * [tMap_22 finally ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

 



/**
 * [tMap_22 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_12 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_12";

	

 



/**
 * [tFileOutputExcel_12 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_9_SUBPROCESS_STATE", 1);
	}
	


public static class row42Struct implements routines.system.IPersistableRow<row42Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[0];

	
			    public String SALESORDERCATEGORY;

				public String getSALESORDERCATEGORY () {
					return this.SALESORDERCATEGORY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS_PRICE, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS_PRICE) {

        	try {

        		int length = 0;
		
					this.SALESORDERCATEGORY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SALESORDERCATEGORY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SALESORDERCATEGORY="+SALESORDERCATEGORY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row42Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputExcel_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputExcel_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row42Struct row42 = new row42Struct();




	
	/**
	 * [tAdvancedHash_row42 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row42", false);
		start_Hash.put("tAdvancedHash_row42", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row42";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row42");
					}
				
		int tos_count_tAdvancedHash_row42 = 0;
		

			   		// connection name:row42
			   		// source node:tFileInputExcel_4 - inputs:(after_tHashInput_9) outputs:(row42,row42) | target node:tAdvancedHash_row42 - inputs:(row42) outputs:()
			   		// linked node: tMap_22 - inputs:(row41,row42) outputs:(sortie_map)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row42 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_ROWS;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row42Struct> tHash_Lookup_row42 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row42Struct>getLookup(matchingModeEnum_row42);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row42", tHash_Lookup_row42);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row42 begin ] stop
 */



	
	/**
	 * [tFileInputExcel_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputExcel_4", false);
		start_Hash.put("tFileInputExcel_4", System.currentTimeMillis());
		
	
	currentComponent="tFileInputExcel_4";

	
		int tos_count_tFileInputExcel_4 = 0;
		

 
	final String decryptedPassword_tFileInputExcel_4 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[7/p9Y3yp9g0uZ8tq+Za8iAHjDWLX0XUzUUPBew==]");
        String password_tFileInputExcel_4 = decryptedPassword_tFileInputExcel_4;
        if (password_tFileInputExcel_4.isEmpty()){
            password_tFileInputExcel_4 = null;
        }
			class RegexUtil_tFileInputExcel_4 {

		    	public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, String oneSheetName, boolean useRegex) {

			        java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();

			        if(useRegex){//this part process the regex issue

				        java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(oneSheetName);
				        for (org.apache.poi.ss.usermodel.Sheet sheet : workbook) {
				            String sheetName = sheet.getSheetName();
				            java.util.regex.Matcher matcher = pattern.matcher(sheetName);
				            if (matcher.matches()) {
				            	if(sheet != null){
				                	list.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet);
				                }
				            }
				        }

			        }else{
			        	org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook.getSheet(oneSheetName);
		            	if(sheet != null){
		                	list.add(sheet);
		                }

			        }

			        return list;
			    }

			    public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, int index, boolean useRegex) {
			    	java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list =  new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
			    	org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook.getSheetAt(index);
	            	if(sheet != null){
	                	list.add(sheet);
	                }
			    	return list;
			    }

			}
		RegexUtil_tFileInputExcel_4 regexUtil_tFileInputExcel_4 = new RegexUtil_tFileInputExcel_4();

		Object source_tFileInputExcel_4 = context.ReferentielPath +  "K3 fashion - Sales Order category.xlsx";
		org.apache.poi.xssf.usermodel.XSSFWorkbook workbook_tFileInputExcel_4 = null;

		if(source_tFileInputExcel_4 instanceof String){
			workbook_tFileInputExcel_4 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory.create(new java.io.File((String)source_tFileInputExcel_4), password_tFileInputExcel_4);
		} else if(source_tFileInputExcel_4 instanceof java.io.InputStream) {
     		workbook_tFileInputExcel_4 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory.create((java.io.InputStream)source_tFileInputExcel_4, password_tFileInputExcel_4);
		} else{
			workbook_tFileInputExcel_4 = null;
			throw new java.lang.Exception("The data source should be specified as Inputstream or File Path!");
		}
		try {

		java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_tFileInputExcel_4 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
        sheetList_tFileInputExcel_4.addAll(regexUtil_tFileInputExcel_4.getSheets(workbook_tFileInputExcel_4, 0, false));
    	if(sheetList_tFileInputExcel_4.size() <= 0){
            throw new RuntimeException("Special sheets not exist!");
        }

		java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_FilterNull_tFileInputExcel_4 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
		for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_FilterNull_tFileInputExcel_4 : sheetList_tFileInputExcel_4) {
			if(sheet_FilterNull_tFileInputExcel_4!=null && sheetList_FilterNull_tFileInputExcel_4.iterator()!=null && sheet_FilterNull_tFileInputExcel_4.iterator().hasNext()){
				sheetList_FilterNull_tFileInputExcel_4.add(sheet_FilterNull_tFileInputExcel_4);
			}
		}
		sheetList_tFileInputExcel_4 = sheetList_FilterNull_tFileInputExcel_4;
	if(sheetList_tFileInputExcel_4.size()>0){
		int nb_line_tFileInputExcel_4 = 0;

        int begin_line_tFileInputExcel_4 = 1;

        int footer_input_tFileInputExcel_4 = 0;

        int end_line_tFileInputExcel_4=0;
        for(org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_4:sheetList_tFileInputExcel_4){
			end_line_tFileInputExcel_4+=(sheet_tFileInputExcel_4.getLastRowNum()+1);
        }
        end_line_tFileInputExcel_4 -= footer_input_tFileInputExcel_4;
        int limit_tFileInputExcel_4 = -1;
        int start_column_tFileInputExcel_4 = 1-1;
        int end_column_tFileInputExcel_4 = -1;

        org.apache.poi.xssf.usermodel.XSSFRow row_tFileInputExcel_4 = null;
        org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_4 = sheetList_tFileInputExcel_4.get(0);
        int rowCount_tFileInputExcel_4 = 0;
        int sheetIndex_tFileInputExcel_4 = 0;
        int currentRows_tFileInputExcel_4 = (sheetList_tFileInputExcel_4.get(0).getLastRowNum()+1);

		//for the number format
        java.text.DecimalFormat df_tFileInputExcel_4 = new java.text.DecimalFormat("#.####################################");
        char decimalChar_tFileInputExcel_4 = df_tFileInputExcel_4.getDecimalFormatSymbols().getDecimalSeparator();
		
        for(int i_tFileInputExcel_4 = begin_line_tFileInputExcel_4; i_tFileInputExcel_4 < end_line_tFileInputExcel_4; i_tFileInputExcel_4++){

        	int emptyColumnCount_tFileInputExcel_4 = 0;

        	if (limit_tFileInputExcel_4 != -1 && nb_line_tFileInputExcel_4 >= limit_tFileInputExcel_4) {
        		break;
        	}

            while (i_tFileInputExcel_4 >= rowCount_tFileInputExcel_4 + currentRows_tFileInputExcel_4) {
                rowCount_tFileInputExcel_4 += currentRows_tFileInputExcel_4;
                sheet_tFileInputExcel_4 = sheetList_tFileInputExcel_4.get(++sheetIndex_tFileInputExcel_4);
                currentRows_tFileInputExcel_4 = (sheet_tFileInputExcel_4.getLastRowNum()+1);
            }
            globalMap.put("tFileInputExcel_4_CURRENT_SHEET",sheet_tFileInputExcel_4.getSheetName());
            if (rowCount_tFileInputExcel_4 <= i_tFileInputExcel_4) {
                row_tFileInputExcel_4 = sheet_tFileInputExcel_4.getRow(i_tFileInputExcel_4 - rowCount_tFileInputExcel_4);
            }
		    row42 = null;
		    row42 = null;
					int tempRowLength_tFileInputExcel_4 = 1;
				
				int columnIndex_tFileInputExcel_4 = 0;
			
			String[] temp_row_tFileInputExcel_4 = new String[tempRowLength_tFileInputExcel_4];
			int excel_end_column_tFileInputExcel_4;
			if(row_tFileInputExcel_4==null){
				excel_end_column_tFileInputExcel_4=0;
			}else{
				excel_end_column_tFileInputExcel_4=row_tFileInputExcel_4.getLastCellNum();
			}
			int actual_end_column_tFileInputExcel_4;
			if(end_column_tFileInputExcel_4 == -1){
				actual_end_column_tFileInputExcel_4 = excel_end_column_tFileInputExcel_4;
			}
			else{
				actual_end_column_tFileInputExcel_4 = end_column_tFileInputExcel_4 >	excel_end_column_tFileInputExcel_4 ? excel_end_column_tFileInputExcel_4 : end_column_tFileInputExcel_4;
			}
			org.apache.poi.ss.formula.eval.NumberEval ne_tFileInputExcel_4 = null;
			for(int i=0;i<tempRowLength_tFileInputExcel_4;i++){
				if(i + start_column_tFileInputExcel_4 < actual_end_column_tFileInputExcel_4){
					org.apache.poi.ss.usermodel.Cell cell_tFileInputExcel_4 = row_tFileInputExcel_4.getCell(i + start_column_tFileInputExcel_4);
					if(cell_tFileInputExcel_4!=null){
					switch (cell_tFileInputExcel_4.getCellType()) {
                        case STRING:
                            temp_row_tFileInputExcel_4[i] = cell_tFileInputExcel_4.getRichStringCellValue().getString();
                            break;
                        case NUMERIC:
                            if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell_tFileInputExcel_4)) {
									temp_row_tFileInputExcel_4[i] =cell_tFileInputExcel_4.getDateCellValue().toString();
                            } else {
                                temp_row_tFileInputExcel_4[i] = df_tFileInputExcel_4.format(cell_tFileInputExcel_4.getNumericCellValue());
                            }
                            break;
                        case BOOLEAN:
                            temp_row_tFileInputExcel_4[i] =String.valueOf(cell_tFileInputExcel_4.getBooleanCellValue());
                            break;
                        case FORMULA:
        					switch (cell_tFileInputExcel_4.getCachedFormulaResultType()) {
                                case STRING:
                                    temp_row_tFileInputExcel_4[i] = cell_tFileInputExcel_4.getRichStringCellValue().getString();
                                    break;
                                case NUMERIC:
                                    if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell_tFileInputExcel_4)) {
											temp_row_tFileInputExcel_4[i] =cell_tFileInputExcel_4.getDateCellValue().toString();
                                    } else {
	                                    ne_tFileInputExcel_4 = new org.apache.poi.ss.formula.eval.NumberEval(cell_tFileInputExcel_4.getNumericCellValue());
										temp_row_tFileInputExcel_4[i] = ne_tFileInputExcel_4.getStringValue();
                                    }
                                    break;
                                case BOOLEAN:
                                    temp_row_tFileInputExcel_4[i] =String.valueOf(cell_tFileInputExcel_4.getBooleanCellValue());
                                    break;
                                default:
                            		temp_row_tFileInputExcel_4[i] = "";
                            }
                            break;
                        default:
                            temp_row_tFileInputExcel_4[i] = "";
                        }
                	}
                	else{
                		temp_row_tFileInputExcel_4[i]="";
                	}

				}else{
					temp_row_tFileInputExcel_4[i]="";
				}
			}
			boolean whetherReject_tFileInputExcel_4 = false;
			row42 = new row42Struct();
			int curColNum_tFileInputExcel_4 = -1;
			String curColName_tFileInputExcel_4 = "";
			try{
							columnIndex_tFileInputExcel_4 = 0;
						
			if( temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4].length() > 0) {
				curColNum_tFileInputExcel_4=columnIndex_tFileInputExcel_4 + start_column_tFileInputExcel_4 + 1;
				curColName_tFileInputExcel_4 = "SALESORDERCATEGORY";

				row42.SALESORDERCATEGORY = temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4];
			}else{
				row42.SALESORDERCATEGORY = null;
				emptyColumnCount_tFileInputExcel_4++;
			}

				nb_line_tFileInputExcel_4++;
				
			}catch(java.lang.Exception e){
			whetherReject_tFileInputExcel_4 = true;
					 System.err.println(e.getMessage());
					 row42 = null;
			}


		



 



/**
 * [tFileInputExcel_4 begin ] stop
 */
	
	/**
	 * [tFileInputExcel_4 main ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_4";

	

 


	tos_count_tFileInputExcel_4++;

/**
 * [tFileInputExcel_4 main ] stop
 */
	
	/**
	 * [tFileInputExcel_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_4";

	

 



/**
 * [tFileInputExcel_4 process_data_begin ] stop
 */
// Start of branch "row42"
if(row42 != null) { 



	
	/**
	 * [tAdvancedHash_row42 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row42";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row42");
					}
					


			   
			   

					row42Struct row42_HashRow = new row42Struct();
		   	   	   
				
				row42_HashRow.SALESORDERCATEGORY = row42.SALESORDERCATEGORY;
				
			tHash_Lookup_row42.put(row42_HashRow);
			
            




 


	tos_count_tAdvancedHash_row42++;

/**
 * [tAdvancedHash_row42 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row42 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row42";

	

 



/**
 * [tAdvancedHash_row42 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row42 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row42";

	

 



/**
 * [tAdvancedHash_row42 process_data_end ] stop
 */

} // End of branch "row42"




	
	/**
	 * [tFileInputExcel_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_4";

	

 



/**
 * [tFileInputExcel_4 process_data_end ] stop
 */
	
	/**
	 * [tFileInputExcel_4 end ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_4";

	

			}
			
			
			
			globalMap.put("tFileInputExcel_4_NB_LINE",nb_line_tFileInputExcel_4);
			
				}
			
		} finally { 
				
  				if(!(source_tFileInputExcel_4 instanceof java.io.InputStream)){
  					workbook_tFileInputExcel_4.getPackage().revert();
  				}
				
		}	
		
 

ok_Hash.put("tFileInputExcel_4", true);
end_Hash.put("tFileInputExcel_4", System.currentTimeMillis());




/**
 * [tFileInputExcel_4 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row42 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row42";

	

tHash_Lookup_row42.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row42");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row42", true);
end_Hash.put("tAdvancedHash_row42", System.currentTimeMillis());




/**
 * [tAdvancedHash_row42 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputExcel_4 finally ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_4";

	

 



/**
 * [tFileInputExcel_4 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row42 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row42";

	

 



/**
 * [tAdvancedHash_row42 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputExcel_4_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final EXTRACT_FOR_DYNAMICS_PRICE EXTRACT_FOR_DYNAMICS_PRICEClass = new EXTRACT_FOR_DYNAMICS_PRICE();

        int exitCode = EXTRACT_FOR_DYNAMICS_PRICEClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = EXTRACT_FOR_DYNAMICS_PRICE.class.getClassLoader().getResourceAsStream("dev/extract_for_dynamics_price_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = EXTRACT_FOR_DYNAMICS_PRICE.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("ErrorHeader", "id_String");
                            context.ErrorHeader=(String) context.getProperty("ErrorHeader");
                        context.setContextType("hasErrorHeader", "id_Boolean");
                            try{
                                context.hasErrorHeader=routines.system.ParserUtils.parseTo_Boolean (context.getProperty("hasErrorHeader"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "hasErrorHeader", e.getMessage()));
                                context.hasErrorHeader=null;
                            }
                        context.setContextType("dateValidation", "id_String");
                            context.dateValidation=(String) context.getProperty("dateValidation");
                        context.setContextType("timeValidation", "id_String");
                            context.timeValidation=(String) context.getProperty("timeValidation");
                        context.setContextType("ReferentielPath", "id_String");
                            context.ReferentielPath=(String) context.getProperty("ReferentielPath");
                        context.setContextType("IntegrationExcelPath", "id_String");
                            context.IntegrationExcelPath=(String) context.getProperty("IntegrationExcelPath");
                        context.setContextType("ExcelFileName", "id_String");
                            context.ExcelFileName=(String) context.getProperty("ExcelFileName");
                        context.setContextType("LogPath", "id_String");
                            context.LogPath=(String) context.getProperty("LogPath");
                        context.setContextType("isNike", "id_Boolean");
                            try{
                                context.isNike=routines.system.ParserUtils.parseTo_Boolean (context.getProperty("isNike"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "isNike", e.getMessage()));
                                context.isNike=null;
                            }
                        context.setContextType("ExtractPath", "id_String");
                            context.ExtractPath=(String) context.getProperty("ExtractPath");
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("ErrorHeader")) {
                context.ErrorHeader = (String) parentContextMap.get("ErrorHeader");
            }if (parentContextMap.containsKey("hasErrorHeader")) {
                context.hasErrorHeader = (Boolean) parentContextMap.get("hasErrorHeader");
            }if (parentContextMap.containsKey("dateValidation")) {
                context.dateValidation = (String) parentContextMap.get("dateValidation");
            }if (parentContextMap.containsKey("timeValidation")) {
                context.timeValidation = (String) parentContextMap.get("timeValidation");
            }if (parentContextMap.containsKey("ReferentielPath")) {
                context.ReferentielPath = (String) parentContextMap.get("ReferentielPath");
            }if (parentContextMap.containsKey("IntegrationExcelPath")) {
                context.IntegrationExcelPath = (String) parentContextMap.get("IntegrationExcelPath");
            }if (parentContextMap.containsKey("ExcelFileName")) {
                context.ExcelFileName = (String) parentContextMap.get("ExcelFileName");
            }if (parentContextMap.containsKey("LogPath")) {
                context.LogPath = (String) parentContextMap.get("LogPath");
            }if (parentContextMap.containsKey("isNike")) {
                context.isNike = (Boolean) parentContextMap.get("isNike");
            }if (parentContextMap.containsKey("ExtractPath")) {
                context.ExtractPath = (String) parentContextMap.get("ExtractPath");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}



this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tFileInputExcel_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileInputExcel_1) {
globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", -1);

e_tFileInputExcel_1.printStackTrace();

}
try {
errorCode = null;tFixedFlowInput_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFixedFlowInput_1) {
globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", -1);

e_tFixedFlowInput_1.printStackTrace();

}
try {
errorCode = null;tHashInput_9Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tHashInput_9) {
globalMap.put("tHashInput_9_SUBPROCESS_STATE", -1);

e_tHashInput_9.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : EXTRACT_FOR_DYNAMICS_PRICE");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     1410522 characters generated by Talend Open Studio for Data Integration 
 *     on the 12 octobre 2021 à 14:08:20 CEST
 ************************************************************************************************/