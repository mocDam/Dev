// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package dev.extract_for_dynamics_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJavaRow_1
	//import java.util.List;
import java.util.*;
import java.lang.reflect.*;


@SuppressWarnings("unused")

/**
 * Job: EXTRACT_FOR_DYNAMICS Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.3.1.20191031_1204-M3
 * @status DEV
 */
public class EXTRACT_FOR_DYNAMICS implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(ErrorHeader != null){
				
					this.setProperty("ErrorHeader", ErrorHeader.toString());
				
			}
			
			if(hasErrorHeader != null){
				
					this.setProperty("hasErrorHeader", hasErrorHeader.toString());
				
			}
			
			if(dateValidation != null){
				
					this.setProperty("dateValidation", dateValidation.toString());
				
			}
			
			if(timeValidation != null){
				
					this.setProperty("timeValidation", timeValidation.toString());
				
			}
			
			if(ReferentielPath != null){
				
					this.setProperty("ReferentielPath", ReferentielPath.toString());
				
			}
			
			if(IntegrationExcelPath != null){
				
					this.setProperty("IntegrationExcelPath", IntegrationExcelPath.toString());
				
			}
			
			if(ExcelFileName != null){
				
					this.setProperty("ExcelFileName", ExcelFileName.toString());
				
			}
			
			if(LogPath != null){
				
					this.setProperty("LogPath", LogPath.toString());
				
			}
			
			if(isNike != null){
				
					this.setProperty("isNike", isNike.toString());
				
			}
			
			if(ExtractPath != null){
				
					this.setProperty("ExtractPath", ExtractPath.toString());
				
			}
			
		}

public String ErrorHeader;
public String getErrorHeader(){
	return this.ErrorHeader;
}
public Boolean hasErrorHeader;
public Boolean getHasErrorHeader(){
	return this.hasErrorHeader;
}
public String dateValidation;
public String getDateValidation(){
	return this.dateValidation;
}
public String timeValidation;
public String getTimeValidation(){
	return this.timeValidation;
}
public String ReferentielPath;
public String getReferentielPath(){
	return this.ReferentielPath;
}
public String IntegrationExcelPath;
public String getIntegrationExcelPath(){
	return this.IntegrationExcelPath;
}
public String ExcelFileName;
public String getExcelFileName(){
	return this.ExcelFileName;
}
public String LogPath;
public String getLogPath(){
	return this.LogPath;
}
public Boolean isNike;
public Boolean getIsNike(){
	return this.isNike;
}
public String ExtractPath;
public String getExtractPath(){
	return this.ExtractPath;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "EXTRACT_FOR_DYNAMICS";
	private final String projectName = "DEV";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				EXTRACT_FOR_DYNAMICS.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(EXTRACT_FOR_DYNAMICS.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tFileInputExcel_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputExcel_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_19_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_20_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSetGlobalVar_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSetGlobalVar_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputExcel_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUnite_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputExcel_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputExcel_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSetGlobalVar_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputExcel_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];

	
			    public Object ExcelSchema;

				public Object getExcelSchema () {
					return this.ExcelSchema;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS) {

        	try {

        		int length = 0;
		
						this.ExcelSchema = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Object
				
       			    	dos.writeObject(this.ExcelSchema);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ExcelSchema="+String.valueOf(ExcelSchema));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];

	
			    public String newColumn;

				public String getNewColumn () {
					return this.newColumn;
				}
				
			    public String newColumn1;

				public String getNewColumn1 () {
					return this.newColumn1;
				}
				
			    public String newColumn2;

				public String getNewColumn2 () {
					return this.newColumn2;
				}
				
			    public String newColumn3;

				public String getNewColumn3 () {
					return this.newColumn3;
				}
				
			    public String newColumn4;

				public String getNewColumn4 () {
					return this.newColumn4;
				}
				
			    public String newColumn5;

				public String getNewColumn5 () {
					return this.newColumn5;
				}
				
			    public String newColumn6;

				public String getNewColumn6 () {
					return this.newColumn6;
				}
				
			    public String newColumn7;

				public String getNewColumn7 () {
					return this.newColumn7;
				}
				
			    public String newColumn8;

				public String getNewColumn8 () {
					return this.newColumn8;
				}
				
			    public String newColumn9;

				public String getNewColumn9 () {
					return this.newColumn9;
				}
				
			    public String newColumn10;

				public String getNewColumn10 () {
					return this.newColumn10;
				}
				
			    public String newColumn11;

				public String getNewColumn11 () {
					return this.newColumn11;
				}
				
			    public String newColumn12;

				public String getNewColumn12 () {
					return this.newColumn12;
				}
				
			    public String newColumn13;

				public String getNewColumn13 () {
					return this.newColumn13;
				}
				
			    public String newColumn14;

				public String getNewColumn14 () {
					return this.newColumn14;
				}
				
			    public String newColumn15;

				public String getNewColumn15 () {
					return this.newColumn15;
				}
				
			    public String newColumn16;

				public String getNewColumn16 () {
					return this.newColumn16;
				}
				
			    public String newColumn17;

				public String getNewColumn17 () {
					return this.newColumn17;
				}
				
			    public String newColumn18;

				public String getNewColumn18 () {
					return this.newColumn18;
				}
				
			    public String newColumn19;

				public String getNewColumn19 () {
					return this.newColumn19;
				}
				
			    public String newColumn20;

				public String getNewColumn20 () {
					return this.newColumn20;
				}
				
			    public String newColumn21;

				public String getNewColumn21 () {
					return this.newColumn21;
				}
				
			    public String newColumn22;

				public String getNewColumn22 () {
					return this.newColumn22;
				}
				
			    public String newColumn23;

				public String getNewColumn23 () {
					return this.newColumn23;
				}
				
			    public String newColumn24;

				public String getNewColumn24 () {
					return this.newColumn24;
				}
				
			    public String newColumn25;

				public String getNewColumn25 () {
					return this.newColumn25;
				}
				
			    public String newColumn26;

				public String getNewColumn26 () {
					return this.newColumn26;
				}
				
			    public String newColumn27;

				public String getNewColumn27 () {
					return this.newColumn27;
				}
				
			    public String newColumn28;

				public String getNewColumn28 () {
					return this.newColumn28;
				}
				
			    public String newColumn29;

				public String getNewColumn29 () {
					return this.newColumn29;
				}
				
			    public String newColumn30;

				public String getNewColumn30 () {
					return this.newColumn30;
				}
				
			    public String newColumn31;

				public String getNewColumn31 () {
					return this.newColumn31;
				}
				
			    public String newColumn32;

				public String getNewColumn32 () {
					return this.newColumn32;
				}
				
			    public String newColumn33;

				public String getNewColumn33 () {
					return this.newColumn33;
				}
				
			    public String newColumn34;

				public String getNewColumn34 () {
					return this.newColumn34;
				}
				
			    public String newColumn35;

				public String getNewColumn35 () {
					return this.newColumn35;
				}
				
			    public String newColumn36;

				public String getNewColumn36 () {
					return this.newColumn36;
				}
				
			    public String newColumn37;

				public String getNewColumn37 () {
					return this.newColumn37;
				}
				
			    public String newColumn38;

				public String getNewColumn38 () {
					return this.newColumn38;
				}
				
			    public String newColumn39;

				public String getNewColumn39 () {
					return this.newColumn39;
				}
				
			    public String newColumn40;

				public String getNewColumn40 () {
					return this.newColumn40;
				}
				
			    public String newColumn41;

				public String getNewColumn41 () {
					return this.newColumn41;
				}
				
			    public String newColumn42;

				public String getNewColumn42 () {
					return this.newColumn42;
				}
				
			    public String newColumn43;

				public String getNewColumn43 () {
					return this.newColumn43;
				}
				
			    public String newColumn44;

				public String getNewColumn44 () {
					return this.newColumn44;
				}
				
			    public String newColumn45;

				public String getNewColumn45 () {
					return this.newColumn45;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS) {

        	try {

        		int length = 0;
		
					this.newColumn = readString(dis);
					
					this.newColumn1 = readString(dis);
					
					this.newColumn2 = readString(dis);
					
					this.newColumn3 = readString(dis);
					
					this.newColumn4 = readString(dis);
					
					this.newColumn5 = readString(dis);
					
					this.newColumn6 = readString(dis);
					
					this.newColumn7 = readString(dis);
					
					this.newColumn8 = readString(dis);
					
					this.newColumn9 = readString(dis);
					
					this.newColumn10 = readString(dis);
					
					this.newColumn11 = readString(dis);
					
					this.newColumn12 = readString(dis);
					
					this.newColumn13 = readString(dis);
					
					this.newColumn14 = readString(dis);
					
					this.newColumn15 = readString(dis);
					
					this.newColumn16 = readString(dis);
					
					this.newColumn17 = readString(dis);
					
					this.newColumn18 = readString(dis);
					
					this.newColumn19 = readString(dis);
					
					this.newColumn20 = readString(dis);
					
					this.newColumn21 = readString(dis);
					
					this.newColumn22 = readString(dis);
					
					this.newColumn23 = readString(dis);
					
					this.newColumn24 = readString(dis);
					
					this.newColumn25 = readString(dis);
					
					this.newColumn26 = readString(dis);
					
					this.newColumn27 = readString(dis);
					
					this.newColumn28 = readString(dis);
					
					this.newColumn29 = readString(dis);
					
					this.newColumn30 = readString(dis);
					
					this.newColumn31 = readString(dis);
					
					this.newColumn32 = readString(dis);
					
					this.newColumn33 = readString(dis);
					
					this.newColumn34 = readString(dis);
					
					this.newColumn35 = readString(dis);
					
					this.newColumn36 = readString(dis);
					
					this.newColumn37 = readString(dis);
					
					this.newColumn38 = readString(dis);
					
					this.newColumn39 = readString(dis);
					
					this.newColumn40 = readString(dis);
					
					this.newColumn41 = readString(dis);
					
					this.newColumn42 = readString(dis);
					
					this.newColumn43 = readString(dis);
					
					this.newColumn44 = readString(dis);
					
					this.newColumn45 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.newColumn,dos);
					
					// String
				
						writeString(this.newColumn1,dos);
					
					// String
				
						writeString(this.newColumn2,dos);
					
					// String
				
						writeString(this.newColumn3,dos);
					
					// String
				
						writeString(this.newColumn4,dos);
					
					// String
				
						writeString(this.newColumn5,dos);
					
					// String
				
						writeString(this.newColumn6,dos);
					
					// String
				
						writeString(this.newColumn7,dos);
					
					// String
				
						writeString(this.newColumn8,dos);
					
					// String
				
						writeString(this.newColumn9,dos);
					
					// String
				
						writeString(this.newColumn10,dos);
					
					// String
				
						writeString(this.newColumn11,dos);
					
					// String
				
						writeString(this.newColumn12,dos);
					
					// String
				
						writeString(this.newColumn13,dos);
					
					// String
				
						writeString(this.newColumn14,dos);
					
					// String
				
						writeString(this.newColumn15,dos);
					
					// String
				
						writeString(this.newColumn16,dos);
					
					// String
				
						writeString(this.newColumn17,dos);
					
					// String
				
						writeString(this.newColumn18,dos);
					
					// String
				
						writeString(this.newColumn19,dos);
					
					// String
				
						writeString(this.newColumn20,dos);
					
					// String
				
						writeString(this.newColumn21,dos);
					
					// String
				
						writeString(this.newColumn22,dos);
					
					// String
				
						writeString(this.newColumn23,dos);
					
					// String
				
						writeString(this.newColumn24,dos);
					
					// String
				
						writeString(this.newColumn25,dos);
					
					// String
				
						writeString(this.newColumn26,dos);
					
					// String
				
						writeString(this.newColumn27,dos);
					
					// String
				
						writeString(this.newColumn28,dos);
					
					// String
				
						writeString(this.newColumn29,dos);
					
					// String
				
						writeString(this.newColumn30,dos);
					
					// String
				
						writeString(this.newColumn31,dos);
					
					// String
				
						writeString(this.newColumn32,dos);
					
					// String
				
						writeString(this.newColumn33,dos);
					
					// String
				
						writeString(this.newColumn34,dos);
					
					// String
				
						writeString(this.newColumn35,dos);
					
					// String
				
						writeString(this.newColumn36,dos);
					
					// String
				
						writeString(this.newColumn37,dos);
					
					// String
				
						writeString(this.newColumn38,dos);
					
					// String
				
						writeString(this.newColumn39,dos);
					
					// String
				
						writeString(this.newColumn40,dos);
					
					// String
				
						writeString(this.newColumn41,dos);
					
					// String
				
						writeString(this.newColumn42,dos);
					
					// String
				
						writeString(this.newColumn43,dos);
					
					// String
				
						writeString(this.newColumn44,dos);
					
					// String
				
						writeString(this.newColumn45,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("newColumn="+newColumn);
		sb.append(",newColumn1="+newColumn1);
		sb.append(",newColumn2="+newColumn2);
		sb.append(",newColumn3="+newColumn3);
		sb.append(",newColumn4="+newColumn4);
		sb.append(",newColumn5="+newColumn5);
		sb.append(",newColumn6="+newColumn6);
		sb.append(",newColumn7="+newColumn7);
		sb.append(",newColumn8="+newColumn8);
		sb.append(",newColumn9="+newColumn9);
		sb.append(",newColumn10="+newColumn10);
		sb.append(",newColumn11="+newColumn11);
		sb.append(",newColumn12="+newColumn12);
		sb.append(",newColumn13="+newColumn13);
		sb.append(",newColumn14="+newColumn14);
		sb.append(",newColumn15="+newColumn15);
		sb.append(",newColumn16="+newColumn16);
		sb.append(",newColumn17="+newColumn17);
		sb.append(",newColumn18="+newColumn18);
		sb.append(",newColumn19="+newColumn19);
		sb.append(",newColumn20="+newColumn20);
		sb.append(",newColumn21="+newColumn21);
		sb.append(",newColumn22="+newColumn22);
		sb.append(",newColumn23="+newColumn23);
		sb.append(",newColumn24="+newColumn24);
		sb.append(",newColumn25="+newColumn25);
		sb.append(",newColumn26="+newColumn26);
		sb.append(",newColumn27="+newColumn27);
		sb.append(",newColumn28="+newColumn28);
		sb.append(",newColumn29="+newColumn29);
		sb.append(",newColumn30="+newColumn30);
		sb.append(",newColumn31="+newColumn31);
		sb.append(",newColumn32="+newColumn32);
		sb.append(",newColumn33="+newColumn33);
		sb.append(",newColumn34="+newColumn34);
		sb.append(",newColumn35="+newColumn35);
		sb.append(",newColumn36="+newColumn36);
		sb.append(",newColumn37="+newColumn37);
		sb.append(",newColumn38="+newColumn38);
		sb.append(",newColumn39="+newColumn39);
		sb.append(",newColumn40="+newColumn40);
		sb.append(",newColumn41="+newColumn41);
		sb.append(",newColumn42="+newColumn42);
		sb.append(",newColumn43="+newColumn43);
		sb.append(",newColumn44="+newColumn44);
		sb.append(",newColumn45="+newColumn45);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputExcel_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
row2Struct row2 = new row2Struct();





	
	/**
	 * [tLogRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_1", false);
		start_Hash.put("tLogRow_1", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tLogRow_1 = 0;
		

	///////////////////////
	
         class Util_tLogRow_1 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[1];

        public void addRow(String[] row) {

            for (int i = 0; i < 1; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 0 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 0 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);	                

                  
                    //last column
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() - fillChars[1].length()+2; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_1 util_tLogRow_1 = new Util_tLogRow_1();
        util_tLogRow_1.setTableName("tLogRow_1");
        util_tLogRow_1.addRow(new String[]{"ExcelSchema",});        
 		StringBuilder strBuffer_tLogRow_1 = null;
		int nb_line_tLogRow_1 = 0;
///////////////////////    			



 



/**
 * [tLogRow_1 begin ] stop
 */



	
	/**
	 * [tJavaRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_1", false);
		start_Hash.put("tJavaRow_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tJavaRow_1 = 0;
		

int nb_line_tJavaRow_1 = 0;

 



/**
 * [tJavaRow_1 begin ] stop
 */



	
	/**
	 * [tFileInputExcel_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputExcel_1", false);
		start_Hash.put("tFileInputExcel_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputExcel_1";

	
		int tos_count_tFileInputExcel_1 = 0;
		

 
	final String decryptedPassword_tFileInputExcel_1 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[gEkyHbuY9QdOH/uFb6IHlY0aI+CwVgZbIREgpw==]");
        String password_tFileInputExcel_1 = decryptedPassword_tFileInputExcel_1;
        if (password_tFileInputExcel_1.isEmpty()){
            password_tFileInputExcel_1 = null;
        }
			class RegexUtil_tFileInputExcel_1 {

		    	public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, String oneSheetName, boolean useRegex) {

			        java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();

			        if(useRegex){//this part process the regex issue

				        java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(oneSheetName);
				        for (org.apache.poi.ss.usermodel.Sheet sheet : workbook) {
				            String sheetName = sheet.getSheetName();
				            java.util.regex.Matcher matcher = pattern.matcher(sheetName);
				            if (matcher.matches()) {
				            	if(sheet != null){
				                	list.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet);
				                }
				            }
				        }

			        }else{
			        	org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook.getSheet(oneSheetName);
		            	if(sheet != null){
		                	list.add(sheet);
		                }

			        }

			        return list;
			    }

			    public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, int index, boolean useRegex) {
			    	java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list =  new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
			    	org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook.getSheetAt(index);
	            	if(sheet != null){
	                	list.add(sheet);
	                }
			    	return list;
			    }

			}
		RegexUtil_tFileInputExcel_1 regexUtil_tFileInputExcel_1 = new RegexUtil_tFileInputExcel_1();

		Object source_tFileInputExcel_1 = context.IntegrationExcelPath + context.ExcelFileName;
		org.apache.poi.xssf.usermodel.XSSFWorkbook workbook_tFileInputExcel_1 = null;

		if(source_tFileInputExcel_1 instanceof String){
			workbook_tFileInputExcel_1 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory.create(new java.io.File((String)source_tFileInputExcel_1), password_tFileInputExcel_1);
		} else if(source_tFileInputExcel_1 instanceof java.io.InputStream) {
     		workbook_tFileInputExcel_1 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory.create((java.io.InputStream)source_tFileInputExcel_1, password_tFileInputExcel_1);
		} else{
			workbook_tFileInputExcel_1 = null;
			throw new java.lang.Exception("The data source should be specified as Inputstream or File Path!");
		}
		try {

		java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_tFileInputExcel_1 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
        sheetList_tFileInputExcel_1.addAll(regexUtil_tFileInputExcel_1.getSheets(workbook_tFileInputExcel_1, 0, false));
    	if(sheetList_tFileInputExcel_1.size() <= 0){
            throw new RuntimeException("Special sheets not exist!");
        }

		java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_FilterNull_tFileInputExcel_1 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
		for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_FilterNull_tFileInputExcel_1 : sheetList_tFileInputExcel_1) {
			if(sheet_FilterNull_tFileInputExcel_1!=null && sheetList_FilterNull_tFileInputExcel_1.iterator()!=null && sheet_FilterNull_tFileInputExcel_1.iterator().hasNext()){
				sheetList_FilterNull_tFileInputExcel_1.add(sheet_FilterNull_tFileInputExcel_1);
			}
		}
		sheetList_tFileInputExcel_1 = sheetList_FilterNull_tFileInputExcel_1;
	if(sheetList_tFileInputExcel_1.size()>0){
		int nb_line_tFileInputExcel_1 = 0;

        int begin_line_tFileInputExcel_1 = 0;

        int footer_input_tFileInputExcel_1 = 0;

        int end_line_tFileInputExcel_1=0;
        for(org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_1:sheetList_tFileInputExcel_1){
			end_line_tFileInputExcel_1+=(sheet_tFileInputExcel_1.getLastRowNum()+1);
        }
        end_line_tFileInputExcel_1 -= footer_input_tFileInputExcel_1;
        int limit_tFileInputExcel_1 = 1;
        int start_column_tFileInputExcel_1 = 1-1;
        int end_column_tFileInputExcel_1 = -1;
        Integer lastColumn_tFileInputExcel_1 = 47;
        if(lastColumn_tFileInputExcel_1!=null){
        	end_column_tFileInputExcel_1 = lastColumn_tFileInputExcel_1.intValue();
        }

        org.apache.poi.xssf.usermodel.XSSFRow row_tFileInputExcel_1 = null;
        org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_1 = sheetList_tFileInputExcel_1.get(0);
        int rowCount_tFileInputExcel_1 = 0;
        int sheetIndex_tFileInputExcel_1 = 0;
        int currentRows_tFileInputExcel_1 = (sheetList_tFileInputExcel_1.get(0).getLastRowNum()+1);

		//for the number format
        java.text.DecimalFormat df_tFileInputExcel_1 = new java.text.DecimalFormat("#.####################################");
        char decimalChar_tFileInputExcel_1 = df_tFileInputExcel_1.getDecimalFormatSymbols().getDecimalSeparator();
		
        for(int i_tFileInputExcel_1 = begin_line_tFileInputExcel_1; i_tFileInputExcel_1 < end_line_tFileInputExcel_1; i_tFileInputExcel_1++){

        	int emptyColumnCount_tFileInputExcel_1 = 0;

        	if (limit_tFileInputExcel_1 != -1 && nb_line_tFileInputExcel_1 >= limit_tFileInputExcel_1) {
        		break;
        	}

            while (i_tFileInputExcel_1 >= rowCount_tFileInputExcel_1 + currentRows_tFileInputExcel_1) {
                rowCount_tFileInputExcel_1 += currentRows_tFileInputExcel_1;
                sheet_tFileInputExcel_1 = sheetList_tFileInputExcel_1.get(++sheetIndex_tFileInputExcel_1);
                currentRows_tFileInputExcel_1 = (sheet_tFileInputExcel_1.getLastRowNum()+1);
            }
            globalMap.put("tFileInputExcel_1_CURRENT_SHEET",sheet_tFileInputExcel_1.getSheetName());
            if (rowCount_tFileInputExcel_1 <= i_tFileInputExcel_1) {
                row_tFileInputExcel_1 = sheet_tFileInputExcel_1.getRow(i_tFileInputExcel_1 - rowCount_tFileInputExcel_1);
            }
		    row1 = null;
					int tempRowLength_tFileInputExcel_1 = 46;
				
				int columnIndex_tFileInputExcel_1 = 0;
			
			String[] temp_row_tFileInputExcel_1 = new String[tempRowLength_tFileInputExcel_1];
			int excel_end_column_tFileInputExcel_1;
			if(row_tFileInputExcel_1==null){
				excel_end_column_tFileInputExcel_1=0;
			}else{
				excel_end_column_tFileInputExcel_1=row_tFileInputExcel_1.getLastCellNum();
			}
			int actual_end_column_tFileInputExcel_1;
			if(end_column_tFileInputExcel_1 == -1){
				actual_end_column_tFileInputExcel_1 = excel_end_column_tFileInputExcel_1;
			}
			else{
				actual_end_column_tFileInputExcel_1 = end_column_tFileInputExcel_1 >	excel_end_column_tFileInputExcel_1 ? excel_end_column_tFileInputExcel_1 : end_column_tFileInputExcel_1;
			}
			org.apache.poi.ss.formula.eval.NumberEval ne_tFileInputExcel_1 = null;
			for(int i=0;i<tempRowLength_tFileInputExcel_1;i++){
				if(i + start_column_tFileInputExcel_1 < actual_end_column_tFileInputExcel_1){
					org.apache.poi.ss.usermodel.Cell cell_tFileInputExcel_1 = row_tFileInputExcel_1.getCell(i + start_column_tFileInputExcel_1);
					if(cell_tFileInputExcel_1!=null){
					switch (cell_tFileInputExcel_1.getCellType()) {
                        case STRING:
                            temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1.getRichStringCellValue().getString();
                            break;
                        case NUMERIC:
                            if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell_tFileInputExcel_1)) {
									temp_row_tFileInputExcel_1[i] =cell_tFileInputExcel_1.getDateCellValue().toString();
                            } else {
                                temp_row_tFileInputExcel_1[i] = df_tFileInputExcel_1.format(cell_tFileInputExcel_1.getNumericCellValue());
                            }
                            break;
                        case BOOLEAN:
                            temp_row_tFileInputExcel_1[i] =String.valueOf(cell_tFileInputExcel_1.getBooleanCellValue());
                            break;
                        case FORMULA:
        					switch (cell_tFileInputExcel_1.getCachedFormulaResultType()) {
                                case STRING:
                                    temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1.getRichStringCellValue().getString();
                                    break;
                                case NUMERIC:
                                    if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell_tFileInputExcel_1)) {
											temp_row_tFileInputExcel_1[i] =cell_tFileInputExcel_1.getDateCellValue().toString();
                                    } else {
	                                    ne_tFileInputExcel_1 = new org.apache.poi.ss.formula.eval.NumberEval(cell_tFileInputExcel_1.getNumericCellValue());
										temp_row_tFileInputExcel_1[i] = ne_tFileInputExcel_1.getStringValue();
                                    }
                                    break;
                                case BOOLEAN:
                                    temp_row_tFileInputExcel_1[i] =String.valueOf(cell_tFileInputExcel_1.getBooleanCellValue());
                                    break;
                                default:
                            		temp_row_tFileInputExcel_1[i] = "";
                            }
                            break;
                        default:
                            temp_row_tFileInputExcel_1[i] = "";
                        }
                	}
                	else{
                		temp_row_tFileInputExcel_1[i]="";
                	}

				}else{
					temp_row_tFileInputExcel_1[i]="";
				}
			}
			boolean whetherReject_tFileInputExcel_1 = false;
			row1 = new row1Struct();
			int curColNum_tFileInputExcel_1 = -1;
			String curColName_tFileInputExcel_1 = "";
			try{
							columnIndex_tFileInputExcel_1 = 0;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn";

				row1.newColumn = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 1;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn1";

				row1.newColumn1 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn1 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 2;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn2";

				row1.newColumn2 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn2 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 3;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn3";

				row1.newColumn3 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn3 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 4;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn4";

				row1.newColumn4 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn4 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 5;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn5";

				row1.newColumn5 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn5 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 6;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn6";

				row1.newColumn6 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn6 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 7;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn7";

				row1.newColumn7 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn7 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 8;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn8";

				row1.newColumn8 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn8 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 9;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn9";

				row1.newColumn9 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn9 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 10;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn10";

				row1.newColumn10 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn10 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 11;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn11";

				row1.newColumn11 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn11 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 12;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn12";

				row1.newColumn12 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn12 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 13;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn13";

				row1.newColumn13 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn13 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 14;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn14";

				row1.newColumn14 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn14 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 15;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn15";

				row1.newColumn15 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn15 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 16;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn16";

				row1.newColumn16 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn16 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 17;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn17";

				row1.newColumn17 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn17 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 18;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn18";

				row1.newColumn18 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn18 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 19;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn19";

				row1.newColumn19 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn19 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 20;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn20";

				row1.newColumn20 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn20 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 21;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn21";

				row1.newColumn21 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn21 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 22;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn22";

				row1.newColumn22 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn22 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 23;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn23";

				row1.newColumn23 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn23 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 24;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn24";

				row1.newColumn24 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn24 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 25;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn25";

				row1.newColumn25 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn25 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 26;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn26";

				row1.newColumn26 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn26 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 27;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn27";

				row1.newColumn27 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn27 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 28;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn28";

				row1.newColumn28 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn28 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 29;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn29";

				row1.newColumn29 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn29 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 30;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn30";

				row1.newColumn30 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn30 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 31;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn31";

				row1.newColumn31 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn31 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 32;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn32";

				row1.newColumn32 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn32 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 33;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn33";

				row1.newColumn33 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn33 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 34;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn34";

				row1.newColumn34 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn34 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 35;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn35";

				row1.newColumn35 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn35 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 36;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn36";

				row1.newColumn36 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn36 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 37;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn37";

				row1.newColumn37 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn37 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 38;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn38";

				row1.newColumn38 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn38 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 39;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn39";

				row1.newColumn39 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn39 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 40;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn40";

				row1.newColumn40 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn40 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 41;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn41";

				row1.newColumn41 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn41 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 42;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn42";

				row1.newColumn42 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn42 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 43;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn43";

				row1.newColumn43 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn43 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 44;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn44";

				row1.newColumn44 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn44 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 45;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "newColumn45";

				row1.newColumn45 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.newColumn45 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}

				nb_line_tFileInputExcel_1++;
				
			}catch(java.lang.Exception e){
			whetherReject_tFileInputExcel_1 = true;
					 System.err.println(e.getMessage());
					 row1 = null;
			}


		



 



/**
 * [tFileInputExcel_1 begin ] stop
 */
	
	/**
	 * [tFileInputExcel_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_1";

	

 


	tos_count_tFileInputExcel_1++;

/**
 * [tFileInputExcel_1 main ] stop
 */
	
	/**
	 * [tFileInputExcel_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_1";

	

 



/**
 * [tFileInputExcel_1 process_data_begin ] stop
 */
// Start of branch "row1"
if(row1 != null) { 



	
	/**
	 * [tJavaRow_1 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row1");
					}
					

    // code sample:
//
// multiply by 2 the row identifier
// row2.id = row1.id * 2;
//
// lowercase the name
// row2.name = row1.name.toLowerCase();

Map<String, String> fieldMap = (Map<String, String>)globalMap.get("fieldMap");

for( Field f : row1.getClass().getFields() ) {
	if (f.get(row1) != null)
	{
		fieldMap.put((String)f.get(row1), f.getName());
	}
   
}


row2.ExcelSchema = fieldMap;
    nb_line_tJavaRow_1++;   

 


	tos_count_tJavaRow_1++;

/**
 * [tJavaRow_1 main ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 process_data_begin ] stop
 */

	
	/**
	 * [tLogRow_1 main ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row2");
					}
					
///////////////////////		
						

				
				String[] row_tLogRow_1 = new String[1];
   				
	    		if(row2.ExcelSchema != null) { //              
                 row_tLogRow_1[0]=    						    
				                String.valueOf(row2.ExcelSchema)			
					          ;	
							
	    		} //			
    			 

				util_tLogRow_1.addRow(row_tLogRow_1);	
				nb_line_tLogRow_1++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_1++;

/**
 * [tLogRow_1 main ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 process_data_end ] stop
 */

} // End of branch "row1"




	
	/**
	 * [tFileInputExcel_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_1";

	

 



/**
 * [tFileInputExcel_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputExcel_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_1";

	

			}
			
			
			
			globalMap.put("tFileInputExcel_1_NB_LINE",nb_line_tFileInputExcel_1);
			
				}
			
		} finally { 
				
  				if(!(source_tFileInputExcel_1 instanceof java.io.InputStream)){
  					workbook_tFileInputExcel_1.getPackage().revert();
  				}
				
		}	
		
 

ok_Hash.put("tFileInputExcel_1", true);
end_Hash.put("tFileInputExcel_1", System.currentTimeMillis());

   			if (context.hasErrorHeader == false) {
   				
					if(execStat){   
   	 					runStat.updateStatOnConnection("No_Error", 0, "true");
					}
				
    			tFileInputExcel_2Process(globalMap);
   			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("No_Error", 0, "false");
					}   	 
   				}



/**
 * [tFileInputExcel_1 end ] stop
 */

	
	/**
	 * [tJavaRow_1 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

globalMap.put("tJavaRow_1_NB_LINE",nb_line_tJavaRow_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tJavaRow_1", true);
end_Hash.put("tJavaRow_1", System.currentTimeMillis());




/**
 * [tJavaRow_1 end ] stop
 */

	
	/**
	 * [tLogRow_1 end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_1 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_1);
                    }
                    
                    consoleOut_tLogRow_1.println(util_tLogRow_1.format().toString());
                    consoleOut_tLogRow_1.flush();
//////
globalMap.put("tLogRow_1_NB_LINE",nb_line_tLogRow_1);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tLogRow_1", true);
end_Hash.put("tLogRow_1", System.currentTimeMillis());




/**
 * [tLogRow_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputExcel_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_1";

	

 



/**
 * [tFileInputExcel_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 finally ] stop
 */

	
	/**
	 * [tLogRow_1 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", 1);
	}
	


public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];

	
			    public String KRFBRANDID;

				public String getKRFBRANDID () {
					return this.KRFBRANDID;
				}
				
			    public String PRODUCTSEARCHNAME;

				public String getPRODUCTSEARCHNAME () {
					return this.PRODUCTSEARCHNAME;
				}
				
			    public String PRODUCTDESCRIPTION;

				public String getPRODUCTDESCRIPTION () {
					return this.PRODUCTDESCRIPTION;
				}
				
			    public String PRODUCTNAME;

				public String getPRODUCTNAME () {
					return this.PRODUCTNAME;
				}
				
			    public String PRODUCTNUMBER;

				public String getPRODUCTNUMBER () {
					return this.PRODUCTNUMBER;
				}
				
			    public String RETAILPRODUCTCATEGORYNAME;

				public String getRETAILPRODUCTCATEGORYNAME () {
					return this.RETAILPRODUCTCATEGORYNAME;
				}
				
			    public String PRODUCTSUBTYPE;

				public String getPRODUCTSUBTYPE () {
					return this.PRODUCTSUBTYPE;
				}
				
			    public String PRODUCTTYPE;

				public String getPRODUCTTYPE () {
					return this.PRODUCTTYPE;
				}
				
			    public String PRODUCTDIMENSIONGROUPNAME;

				public String getPRODUCTDIMENSIONGROUPNAME () {
					return this.PRODUCTDIMENSIONGROUPNAME;
				}
				
			    public String STORAGEDIMENSIONGROUPNAME;

				public String getSTORAGEDIMENSIONGROUPNAME () {
					return this.STORAGEDIMENSIONGROUPNAME;
				}
				
			    public String TRACKINGDIMENSIONGROUPNAME;

				public String getTRACKINGDIMENSIONGROUPNAME () {
					return this.TRACKINGDIMENSIONGROUPNAME;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS) {

        	try {

        		int length = 0;
		
					this.KRFBRANDID = readString(dis);
					
					this.PRODUCTSEARCHNAME = readString(dis);
					
					this.PRODUCTDESCRIPTION = readString(dis);
					
					this.PRODUCTNAME = readString(dis);
					
					this.PRODUCTNUMBER = readString(dis);
					
					this.RETAILPRODUCTCATEGORYNAME = readString(dis);
					
					this.PRODUCTSUBTYPE = readString(dis);
					
					this.PRODUCTTYPE = readString(dis);
					
					this.PRODUCTDIMENSIONGROUPNAME = readString(dis);
					
					this.STORAGEDIMENSIONGROUPNAME = readString(dis);
					
					this.TRACKINGDIMENSIONGROUPNAME = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.KRFBRANDID,dos);
					
					// String
				
						writeString(this.PRODUCTSEARCHNAME,dos);
					
					// String
				
						writeString(this.PRODUCTDESCRIPTION,dos);
					
					// String
				
						writeString(this.PRODUCTNAME,dos);
					
					// String
				
						writeString(this.PRODUCTNUMBER,dos);
					
					// String
				
						writeString(this.RETAILPRODUCTCATEGORYNAME,dos);
					
					// String
				
						writeString(this.PRODUCTSUBTYPE,dos);
					
					// String
				
						writeString(this.PRODUCTTYPE,dos);
					
					// String
				
						writeString(this.PRODUCTDIMENSIONGROUPNAME,dos);
					
					// String
				
						writeString(this.STORAGEDIMENSIONGROUPNAME,dos);
					
					// String
				
						writeString(this.TRACKINGDIMENSIONGROUPNAME,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("KRFBRANDID="+KRFBRANDID);
		sb.append(",PRODUCTSEARCHNAME="+PRODUCTSEARCHNAME);
		sb.append(",PRODUCTDESCRIPTION="+PRODUCTDESCRIPTION);
		sb.append(",PRODUCTNAME="+PRODUCTNAME);
		sb.append(",PRODUCTNUMBER="+PRODUCTNUMBER);
		sb.append(",RETAILPRODUCTCATEGORYNAME="+RETAILPRODUCTCATEGORYNAME);
		sb.append(",PRODUCTSUBTYPE="+PRODUCTSUBTYPE);
		sb.append(",PRODUCTTYPE="+PRODUCTTYPE);
		sb.append(",PRODUCTDIMENSIONGROUPNAME="+PRODUCTDIMENSIONGROUPNAME);
		sb.append(",STORAGEDIMENSIONGROUPNAME="+STORAGEDIMENSIONGROUPNAME);
		sb.append(",TRACKINGDIMENSIONGROUPNAME="+TRACKINGDIMENSIONGROUPNAME);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];

	
			    public String KRFBRANDID;

				public String getKRFBRANDID () {
					return this.KRFBRANDID;
				}
				
			    public String PRODUCTSEARCHNAME;

				public String getPRODUCTSEARCHNAME () {
					return this.PRODUCTSEARCHNAME;
				}
				
			    public String PRODUCTDESCRIPTION;

				public String getPRODUCTDESCRIPTION () {
					return this.PRODUCTDESCRIPTION;
				}
				
			    public String PRODUCTNAME;

				public String getPRODUCTNAME () {
					return this.PRODUCTNAME;
				}
				
			    public String PRODUCTNUMBER;

				public String getPRODUCTNUMBER () {
					return this.PRODUCTNUMBER;
				}
				
			    public String RETAILPRODUCTCATEGORYNAME;

				public String getRETAILPRODUCTCATEGORYNAME () {
					return this.RETAILPRODUCTCATEGORYNAME;
				}
				
			    public String PRODUCTSUBTYPE;

				public String getPRODUCTSUBTYPE () {
					return this.PRODUCTSUBTYPE;
				}
				
			    public String PRODUCTTYPE;

				public String getPRODUCTTYPE () {
					return this.PRODUCTTYPE;
				}
				
			    public String PRODUCTDIMENSIONGROUPNAME;

				public String getPRODUCTDIMENSIONGROUPNAME () {
					return this.PRODUCTDIMENSIONGROUPNAME;
				}
				
			    public String STORAGEDIMENSIONGROUPNAME;

				public String getSTORAGEDIMENSIONGROUPNAME () {
					return this.STORAGEDIMENSIONGROUPNAME;
				}
				
			    public String TRACKINGDIMENSIONGROUPNAME;

				public String getTRACKINGDIMENSIONGROUPNAME () {
					return this.TRACKINGDIMENSIONGROUPNAME;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS) {

        	try {

        		int length = 0;
		
					this.KRFBRANDID = readString(dis);
					
					this.PRODUCTSEARCHNAME = readString(dis);
					
					this.PRODUCTDESCRIPTION = readString(dis);
					
					this.PRODUCTNAME = readString(dis);
					
					this.PRODUCTNUMBER = readString(dis);
					
					this.RETAILPRODUCTCATEGORYNAME = readString(dis);
					
					this.PRODUCTSUBTYPE = readString(dis);
					
					this.PRODUCTTYPE = readString(dis);
					
					this.PRODUCTDIMENSIONGROUPNAME = readString(dis);
					
					this.STORAGEDIMENSIONGROUPNAME = readString(dis);
					
					this.TRACKINGDIMENSIONGROUPNAME = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.KRFBRANDID,dos);
					
					// String
				
						writeString(this.PRODUCTSEARCHNAME,dos);
					
					// String
				
						writeString(this.PRODUCTDESCRIPTION,dos);
					
					// String
				
						writeString(this.PRODUCTNAME,dos);
					
					// String
				
						writeString(this.PRODUCTNUMBER,dos);
					
					// String
				
						writeString(this.RETAILPRODUCTCATEGORYNAME,dos);
					
					// String
				
						writeString(this.PRODUCTSUBTYPE,dos);
					
					// String
				
						writeString(this.PRODUCTTYPE,dos);
					
					// String
				
						writeString(this.PRODUCTDIMENSIONGROUPNAME,dos);
					
					// String
				
						writeString(this.STORAGEDIMENSIONGROUPNAME,dos);
					
					// String
				
						writeString(this.TRACKINGDIMENSIONGROUPNAME,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("KRFBRANDID="+KRFBRANDID);
		sb.append(",PRODUCTSEARCHNAME="+PRODUCTSEARCHNAME);
		sb.append(",PRODUCTDESCRIPTION="+PRODUCTDESCRIPTION);
		sb.append(",PRODUCTNAME="+PRODUCTNAME);
		sb.append(",PRODUCTNUMBER="+PRODUCTNUMBER);
		sb.append(",RETAILPRODUCTCATEGORYNAME="+RETAILPRODUCTCATEGORYNAME);
		sb.append(",PRODUCTSUBTYPE="+PRODUCTSUBTYPE);
		sb.append(",PRODUCTTYPE="+PRODUCTTYPE);
		sb.append(",PRODUCTDIMENSIONGROUPNAME="+PRODUCTDIMENSIONGROUPNAME);
		sb.append(",STORAGEDIMENSIONGROUPNAME="+STORAGEDIMENSIONGROUPNAME);
		sb.append(",TRACKINGDIMENSIONGROUPNAME="+TRACKINGDIMENSIONGROUPNAME);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];

	
			    public String PRODUCTLIFECYCLESEASONCODE;

				public String getPRODUCTLIFECYCLESEASONCODE () {
					return this.PRODUCTLIFECYCLESEASONCODE;
				}
				
			    public String BOMUNITSYMBOL;

				public String getBOMUNITSYMBOL () {
					return this.BOMUNITSYMBOL;
				}
				
			    public String INVENTORYRESERVATIONHIERARCHYNAME;

				public String getINVENTORYRESERVATIONHIERARCHYNAME () {
					return this.INVENTORYRESERVATIONHIERARCHYNAME;
				}
				
			    public String INVENTORYUNITSYMBOL;

				public String getINVENTORYUNITSYMBOL () {
					return this.INVENTORYUNITSYMBOL;
				}
				
			    public String ITEMMODELGROUPID;

				public String getITEMMODELGROUPID () {
					return this.ITEMMODELGROUPID;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public String KRFBRANDID;

				public String getKRFBRANDID () {
					return this.KRFBRANDID;
				}
				
			    public String KRFCOLORDIMLAYOUT;

				public String getKRFCOLORDIMLAYOUT () {
					return this.KRFCOLORDIMLAYOUT;
				}
				
			    public String KRFSIZEDIMLAYOUT;

				public String getKRFSIZEDIMLAYOUT () {
					return this.KRFSIZEDIMLAYOUT;
				}
				
			    public String KRFSTYLEDIMLAYOUT;

				public String getKRFSTYLEDIMLAYOUT () {
					return this.KRFSTYLEDIMLAYOUT;
				}
				
			    public String KRFAUTOOPENMATRIX;

				public String getKRFAUTOOPENMATRIX () {
					return this.KRFAUTOOPENMATRIX;
				}
				
			    public String ORIGINCOUNTRYREGIONID;

				public String getORIGINCOUNTRYREGIONID () {
					return this.ORIGINCOUNTRYREGIONID;
				}
				
			    public String PRODUCTCOVERAGEGROUPID;

				public String getPRODUCTCOVERAGEGROUPID () {
					return this.PRODUCTCOVERAGEGROUPID;
				}
				
			    public String PRODUCTDIMENSIONGROUPNAME;

				public String getPRODUCTDIMENSIONGROUPNAME () {
					return this.PRODUCTDIMENSIONGROUPNAME;
				}
				
			    public String PRODUCTGROUPID;

				public String getPRODUCTGROUPID () {
					return this.PRODUCTGROUPID;
				}
				
			    public String PRODUCTIONTYPE;

				public String getPRODUCTIONTYPE () {
					return this.PRODUCTIONTYPE;
				}
				
			    public String PRODUCTNUMBER;

				public String getPRODUCTNUMBER () {
					return this.PRODUCTNUMBER;
				}
				
			    public String PRODUCTSEARCHNAME;

				public String getPRODUCTSEARCHNAME () {
					return this.PRODUCTSEARCHNAME;
				}
				
			    public String PRODUCTSUBTYPE;

				public String getPRODUCTSUBTYPE () {
					return this.PRODUCTSUBTYPE;
				}
				
			    public String PRODUCTTYPE;

				public String getPRODUCTTYPE () {
					return this.PRODUCTTYPE;
				}
				
			    public String PURCHASEUNITSYMBOL;

				public String getPURCHASEUNITSYMBOL () {
					return this.PURCHASEUNITSYMBOL;
				}
				
			    public String SALESUNITSYMBOL;

				public String getSALESUNITSYMBOL () {
					return this.SALESUNITSYMBOL;
				}
				
			    public String SEARCHNAME;

				public String getSEARCHNAME () {
					return this.SEARCHNAME;
				}
				
			    public String STORAGEDIMENSIONGROUPNAME;

				public String getSTORAGEDIMENSIONGROUPNAME () {
					return this.STORAGEDIMENSIONGROUPNAME;
				}
				
			    public String TRACKINGDIMENSIONGROUPNAME;

				public String getTRACKINGDIMENSIONGROUPNAME () {
					return this.TRACKINGDIMENSIONGROUPNAME;
				}
				
			    public String PRODUCTLIFECYCLESTATEID;

				public String getPRODUCTLIFECYCLESTATEID () {
					return this.PRODUCTLIFECYCLESTATEID;
				}
				
			    public String PURCHASESALESTAXITEMGROUPCODE;

				public String getPURCHASESALESTAXITEMGROUPCODE () {
					return this.PURCHASESALESTAXITEMGROUPCODE;
				}
				
			    public String SALESSALESTAXITEMGROUPCODE;

				public String getSALESSALESTAXITEMGROUPCODE () {
					return this.SALESSALESTAXITEMGROUPCODE;
				}
				
			    public String UNITCONVERSIONSEQUENCEGROUPID;

				public String getUNITCONVERSIONSEQUENCEGROUPID () {
					return this.UNITCONVERSIONSEQUENCEGROUPID;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS) {

        	try {

        		int length = 0;
		
					this.PRODUCTLIFECYCLESEASONCODE = readString(dis);
					
					this.BOMUNITSYMBOL = readString(dis);
					
					this.INVENTORYRESERVATIONHIERARCHYNAME = readString(dis);
					
					this.INVENTORYUNITSYMBOL = readString(dis);
					
					this.ITEMMODELGROUPID = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
					this.KRFBRANDID = readString(dis);
					
					this.KRFCOLORDIMLAYOUT = readString(dis);
					
					this.KRFSIZEDIMLAYOUT = readString(dis);
					
					this.KRFSTYLEDIMLAYOUT = readString(dis);
					
					this.KRFAUTOOPENMATRIX = readString(dis);
					
					this.ORIGINCOUNTRYREGIONID = readString(dis);
					
					this.PRODUCTCOVERAGEGROUPID = readString(dis);
					
					this.PRODUCTDIMENSIONGROUPNAME = readString(dis);
					
					this.PRODUCTGROUPID = readString(dis);
					
					this.PRODUCTIONTYPE = readString(dis);
					
					this.PRODUCTNUMBER = readString(dis);
					
					this.PRODUCTSEARCHNAME = readString(dis);
					
					this.PRODUCTSUBTYPE = readString(dis);
					
					this.PRODUCTTYPE = readString(dis);
					
					this.PURCHASEUNITSYMBOL = readString(dis);
					
					this.SALESUNITSYMBOL = readString(dis);
					
					this.SEARCHNAME = readString(dis);
					
					this.STORAGEDIMENSIONGROUPNAME = readString(dis);
					
					this.TRACKINGDIMENSIONGROUPNAME = readString(dis);
					
					this.PRODUCTLIFECYCLESTATEID = readString(dis);
					
					this.PURCHASESALESTAXITEMGROUPCODE = readString(dis);
					
					this.SALESSALESTAXITEMGROUPCODE = readString(dis);
					
					this.UNITCONVERSIONSEQUENCEGROUPID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTLIFECYCLESEASONCODE,dos);
					
					// String
				
						writeString(this.BOMUNITSYMBOL,dos);
					
					// String
				
						writeString(this.INVENTORYRESERVATIONHIERARCHYNAME,dos);
					
					// String
				
						writeString(this.INVENTORYUNITSYMBOL,dos);
					
					// String
				
						writeString(this.ITEMMODELGROUPID,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// String
				
						writeString(this.KRFBRANDID,dos);
					
					// String
				
						writeString(this.KRFCOLORDIMLAYOUT,dos);
					
					// String
				
						writeString(this.KRFSIZEDIMLAYOUT,dos);
					
					// String
				
						writeString(this.KRFSTYLEDIMLAYOUT,dos);
					
					// String
				
						writeString(this.KRFAUTOOPENMATRIX,dos);
					
					// String
				
						writeString(this.ORIGINCOUNTRYREGIONID,dos);
					
					// String
				
						writeString(this.PRODUCTCOVERAGEGROUPID,dos);
					
					// String
				
						writeString(this.PRODUCTDIMENSIONGROUPNAME,dos);
					
					// String
				
						writeString(this.PRODUCTGROUPID,dos);
					
					// String
				
						writeString(this.PRODUCTIONTYPE,dos);
					
					// String
				
						writeString(this.PRODUCTNUMBER,dos);
					
					// String
				
						writeString(this.PRODUCTSEARCHNAME,dos);
					
					// String
				
						writeString(this.PRODUCTSUBTYPE,dos);
					
					// String
				
						writeString(this.PRODUCTTYPE,dos);
					
					// String
				
						writeString(this.PURCHASEUNITSYMBOL,dos);
					
					// String
				
						writeString(this.SALESUNITSYMBOL,dos);
					
					// String
				
						writeString(this.SEARCHNAME,dos);
					
					// String
				
						writeString(this.STORAGEDIMENSIONGROUPNAME,dos);
					
					// String
				
						writeString(this.TRACKINGDIMENSIONGROUPNAME,dos);
					
					// String
				
						writeString(this.PRODUCTLIFECYCLESTATEID,dos);
					
					// String
				
						writeString(this.PURCHASESALESTAXITEMGROUPCODE,dos);
					
					// String
				
						writeString(this.SALESSALESTAXITEMGROUPCODE,dos);
					
					// String
				
						writeString(this.UNITCONVERSIONSEQUENCEGROUPID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTLIFECYCLESEASONCODE="+PRODUCTLIFECYCLESEASONCODE);
		sb.append(",BOMUNITSYMBOL="+BOMUNITSYMBOL);
		sb.append(",INVENTORYRESERVATIONHIERARCHYNAME="+INVENTORYRESERVATIONHIERARCHYNAME);
		sb.append(",INVENTORYUNITSYMBOL="+INVENTORYUNITSYMBOL);
		sb.append(",ITEMMODELGROUPID="+ITEMMODELGROUPID);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",KRFBRANDID="+KRFBRANDID);
		sb.append(",KRFCOLORDIMLAYOUT="+KRFCOLORDIMLAYOUT);
		sb.append(",KRFSIZEDIMLAYOUT="+KRFSIZEDIMLAYOUT);
		sb.append(",KRFSTYLEDIMLAYOUT="+KRFSTYLEDIMLAYOUT);
		sb.append(",KRFAUTOOPENMATRIX="+KRFAUTOOPENMATRIX);
		sb.append(",ORIGINCOUNTRYREGIONID="+ORIGINCOUNTRYREGIONID);
		sb.append(",PRODUCTCOVERAGEGROUPID="+PRODUCTCOVERAGEGROUPID);
		sb.append(",PRODUCTDIMENSIONGROUPNAME="+PRODUCTDIMENSIONGROUPNAME);
		sb.append(",PRODUCTGROUPID="+PRODUCTGROUPID);
		sb.append(",PRODUCTIONTYPE="+PRODUCTIONTYPE);
		sb.append(",PRODUCTNUMBER="+PRODUCTNUMBER);
		sb.append(",PRODUCTSEARCHNAME="+PRODUCTSEARCHNAME);
		sb.append(",PRODUCTSUBTYPE="+PRODUCTSUBTYPE);
		sb.append(",PRODUCTTYPE="+PRODUCTTYPE);
		sb.append(",PURCHASEUNITSYMBOL="+PURCHASEUNITSYMBOL);
		sb.append(",SALESUNITSYMBOL="+SALESUNITSYMBOL);
		sb.append(",SEARCHNAME="+SEARCHNAME);
		sb.append(",STORAGEDIMENSIONGROUPNAME="+STORAGEDIMENSIONGROUPNAME);
		sb.append(",TRACKINGDIMENSIONGROUPNAME="+TRACKINGDIMENSIONGROUPNAME);
		sb.append(",PRODUCTLIFECYCLESTATEID="+PRODUCTLIFECYCLESTATEID);
		sb.append(",PURCHASESALESTAXITEMGROUPCODE="+PURCHASESALESTAXITEMGROUPCODE);
		sb.append(",SALESSALESTAXITEMGROUPCODE="+SALESSALESTAXITEMGROUPCODE);
		sb.append(",UNITCONVERSIONSEQUENCEGROUPID="+UNITCONVERSIONSEQUENCEGROUPID);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class Main1Struct implements routines.system.IPersistableRow<Main1Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];

	
			    public String PRODUCTNUMBER;

				public String getPRODUCTNUMBER () {
					return this.PRODUCTNUMBER;
				}
				
			    public String ATTRIBUTETYPENAME;

				public String getATTRIBUTETYPENAME () {
					return this.ATTRIBUTETYPENAME;
				}
				
			    public String ATTRIBUTENAME;

				public String getATTRIBUTENAME () {
					return this.ATTRIBUTENAME;
				}
				
			    public String TEXTVALUE;

				public String getTEXTVALUE () {
					return this.TEXTVALUE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS) {

        	try {

        		int length = 0;
		
					this.PRODUCTNUMBER = readString(dis);
					
					this.ATTRIBUTETYPENAME = readString(dis);
					
					this.ATTRIBUTENAME = readString(dis);
					
					this.TEXTVALUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTNUMBER,dos);
					
					// String
				
						writeString(this.ATTRIBUTETYPENAME,dos);
					
					// String
				
						writeString(this.ATTRIBUTENAME,dos);
					
					// String
				
						writeString(this.TEXTVALUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTNUMBER="+PRODUCTNUMBER);
		sb.append(",ATTRIBUTETYPENAME="+ATTRIBUTETYPENAME);
		sb.append(",ATTRIBUTENAME="+ATTRIBUTENAME);
		sb.append(",TEXTVALUE="+TEXTVALUE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Main1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];

	
			    public String PRODUCTNUMBER;

				public String getPRODUCTNUMBER () {
					return this.PRODUCTNUMBER;
				}
				
			    public String ATTRIBUTETYPENAME;

				public String getATTRIBUTETYPENAME () {
					return this.ATTRIBUTETYPENAME;
				}
				
			    public String ATTRIBUTENAME;

				public String getATTRIBUTENAME () {
					return this.ATTRIBUTENAME;
				}
				
			    public String TEXTVALUE;

				public String getTEXTVALUE () {
					return this.TEXTVALUE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS) {

        	try {

        		int length = 0;
		
					this.PRODUCTNUMBER = readString(dis);
					
					this.ATTRIBUTETYPENAME = readString(dis);
					
					this.ATTRIBUTENAME = readString(dis);
					
					this.TEXTVALUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTNUMBER,dos);
					
					// String
				
						writeString(this.ATTRIBUTETYPENAME,dos);
					
					// String
				
						writeString(this.ATTRIBUTENAME,dos);
					
					// String
				
						writeString(this.TEXTVALUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTNUMBER="+PRODUCTNUMBER);
		sb.append(",ATTRIBUTETYPENAME="+ATTRIBUTETYPENAME);
		sb.append(",ATTRIBUTENAME="+ATTRIBUTENAME);
		sb.append(",TEXTVALUE="+TEXTVALUE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row14Struct implements routines.system.IPersistableRow<row14Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];

	
			    public String PRODUCTNUMBER;

				public String getPRODUCTNUMBER () {
					return this.PRODUCTNUMBER;
				}
				
			    public String ATTRIBUTETYPENAME;

				public String getATTRIBUTETYPENAME () {
					return this.ATTRIBUTETYPENAME;
				}
				
			    public String ATTRIBUTENAME;

				public String getATTRIBUTENAME () {
					return this.ATTRIBUTENAME;
				}
				
			    public String TEXTVALUE;

				public String getTEXTVALUE () {
					return this.TEXTVALUE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS) {

        	try {

        		int length = 0;
		
					this.PRODUCTNUMBER = readString(dis);
					
					this.ATTRIBUTETYPENAME = readString(dis);
					
					this.ATTRIBUTENAME = readString(dis);
					
					this.TEXTVALUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTNUMBER,dos);
					
					// String
				
						writeString(this.ATTRIBUTETYPENAME,dos);
					
					// String
				
						writeString(this.ATTRIBUTENAME,dos);
					
					// String
				
						writeString(this.TEXTVALUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTNUMBER="+PRODUCTNUMBER);
		sb.append(",ATTRIBUTETYPENAME="+ATTRIBUTETYPENAME);
		sb.append(",ATTRIBUTENAME="+ATTRIBUTENAME);
		sb.append(",TEXTVALUE="+TEXTVALUE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row14Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row16Struct implements routines.system.IPersistableRow<row16Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];

	
			    public String PRODUCTNUMBER;

				public String getPRODUCTNUMBER () {
					return this.PRODUCTNUMBER;
				}
				
			    public String ATTRIBUTETYPENAME;

				public String getATTRIBUTETYPENAME () {
					return this.ATTRIBUTETYPENAME;
				}
				
			    public String ATTRIBUTENAME;

				public String getATTRIBUTENAME () {
					return this.ATTRIBUTENAME;
				}
				
			    public String TEXTVALUE;

				public String getTEXTVALUE () {
					return this.TEXTVALUE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS) {

        	try {

        		int length = 0;
		
					this.PRODUCTNUMBER = readString(dis);
					
					this.ATTRIBUTETYPENAME = readString(dis);
					
					this.ATTRIBUTENAME = readString(dis);
					
					this.TEXTVALUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTNUMBER,dos);
					
					// String
				
						writeString(this.ATTRIBUTETYPENAME,dos);
					
					// String
				
						writeString(this.ATTRIBUTENAME,dos);
					
					// String
				
						writeString(this.TEXTVALUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTNUMBER="+PRODUCTNUMBER);
		sb.append(",ATTRIBUTETYPENAME="+ATTRIBUTETYPENAME);
		sb.append(",ATTRIBUTENAME="+ATTRIBUTENAME);
		sb.append(",TEXTVALUE="+TEXTVALUE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row16Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row18Struct implements routines.system.IPersistableRow<row18Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];

	
			    public String PRODUCTNUMBER;

				public String getPRODUCTNUMBER () {
					return this.PRODUCTNUMBER;
				}
				
			    public String ATTRIBUTETYPENAME;

				public String getATTRIBUTETYPENAME () {
					return this.ATTRIBUTETYPENAME;
				}
				
			    public String ATTRIBUTENAME;

				public String getATTRIBUTENAME () {
					return this.ATTRIBUTENAME;
				}
				
			    public String TEXTVALUE;

				public String getTEXTVALUE () {
					return this.TEXTVALUE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS) {

        	try {

        		int length = 0;
		
					this.PRODUCTNUMBER = readString(dis);
					
					this.ATTRIBUTETYPENAME = readString(dis);
					
					this.ATTRIBUTENAME = readString(dis);
					
					this.TEXTVALUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTNUMBER,dos);
					
					// String
				
						writeString(this.ATTRIBUTETYPENAME,dos);
					
					// String
				
						writeString(this.ATTRIBUTENAME,dos);
					
					// String
				
						writeString(this.TEXTVALUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTNUMBER="+PRODUCTNUMBER);
		sb.append(",ATTRIBUTETYPENAME="+ATTRIBUTETYPENAME);
		sb.append(",ATTRIBUTENAME="+ATTRIBUTENAME);
		sb.append(",TEXTVALUE="+TEXTVALUE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row18Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row20Struct implements routines.system.IPersistableRow<row20Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];

	
			    public String PRODUCTNUMBER;

				public String getPRODUCTNUMBER () {
					return this.PRODUCTNUMBER;
				}
				
			    public String ATTRIBUTETYPENAME;

				public String getATTRIBUTETYPENAME () {
					return this.ATTRIBUTETYPENAME;
				}
				
			    public String ATTRIBUTENAME;

				public String getATTRIBUTENAME () {
					return this.ATTRIBUTENAME;
				}
				
			    public String TEXTVALUE;

				public String getTEXTVALUE () {
					return this.TEXTVALUE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS) {

        	try {

        		int length = 0;
		
					this.PRODUCTNUMBER = readString(dis);
					
					this.ATTRIBUTETYPENAME = readString(dis);
					
					this.ATTRIBUTENAME = readString(dis);
					
					this.TEXTVALUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTNUMBER,dos);
					
					// String
				
						writeString(this.ATTRIBUTETYPENAME,dos);
					
					// String
				
						writeString(this.ATTRIBUTENAME,dos);
					
					// String
				
						writeString(this.TEXTVALUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTNUMBER="+PRODUCTNUMBER);
		sb.append(",ATTRIBUTETYPENAME="+ATTRIBUTETYPENAME);
		sb.append(",ATTRIBUTENAME="+ATTRIBUTENAME);
		sb.append(",TEXTVALUE="+TEXTVALUE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row20Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row22Struct implements routines.system.IPersistableRow<row22Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];

	
			    public String PRODUCTNUMBER;

				public String getPRODUCTNUMBER () {
					return this.PRODUCTNUMBER;
				}
				
			    public String ATTRIBUTETYPENAME;

				public String getATTRIBUTETYPENAME () {
					return this.ATTRIBUTETYPENAME;
				}
				
			    public String ATTRIBUTENAME;

				public String getATTRIBUTENAME () {
					return this.ATTRIBUTENAME;
				}
				
			    public String TEXTVALUE;

				public String getTEXTVALUE () {
					return this.TEXTVALUE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS) {

        	try {

        		int length = 0;
		
					this.PRODUCTNUMBER = readString(dis);
					
					this.ATTRIBUTETYPENAME = readString(dis);
					
					this.ATTRIBUTENAME = readString(dis);
					
					this.TEXTVALUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTNUMBER,dos);
					
					// String
				
						writeString(this.ATTRIBUTETYPENAME,dos);
					
					// String
				
						writeString(this.ATTRIBUTENAME,dos);
					
					// String
				
						writeString(this.TEXTVALUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTNUMBER="+PRODUCTNUMBER);
		sb.append(",ATTRIBUTETYPENAME="+ATTRIBUTETYPENAME);
		sb.append(",ATTRIBUTENAME="+ATTRIBUTENAME);
		sb.append(",TEXTVALUE="+TEXTVALUE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row22Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row25Struct implements routines.system.IPersistableRow<row25Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];

	
			    public String PRODUCTNUMBER;

				public String getPRODUCTNUMBER () {
					return this.PRODUCTNUMBER;
				}
				
			    public String ATTRIBUTETYPENAME;

				public String getATTRIBUTETYPENAME () {
					return this.ATTRIBUTETYPENAME;
				}
				
			    public String ATTRIBUTENAME;

				public String getATTRIBUTENAME () {
					return this.ATTRIBUTENAME;
				}
				
			    public String TEXTVALUE;

				public String getTEXTVALUE () {
					return this.TEXTVALUE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS) {

        	try {

        		int length = 0;
		
					this.PRODUCTNUMBER = readString(dis);
					
					this.ATTRIBUTETYPENAME = readString(dis);
					
					this.ATTRIBUTENAME = readString(dis);
					
					this.TEXTVALUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTNUMBER,dos);
					
					// String
				
						writeString(this.ATTRIBUTETYPENAME,dos);
					
					// String
				
						writeString(this.ATTRIBUTENAME,dos);
					
					// String
				
						writeString(this.TEXTVALUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTNUMBER="+PRODUCTNUMBER);
		sb.append(",ATTRIBUTETYPENAME="+ATTRIBUTETYPENAME);
		sb.append(",ATTRIBUTENAME="+ATTRIBUTENAME);
		sb.append(",TEXTVALUE="+TEXTVALUE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row25Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row27Struct implements routines.system.IPersistableRow<row27Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];

	
			    public String PRODUCTMASTERNUMBER;

				public String getPRODUCTMASTERNUMBER () {
					return this.PRODUCTMASTERNUMBER;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS) {

        	try {

        		int length = 0;
		
					this.PRODUCTMASTERNUMBER = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTMASTERNUMBER,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTMASTERNUMBER="+PRODUCTMASTERNUMBER);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row27Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row28Struct implements routines.system.IPersistableRow<row28Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];

	
			    public String PRODUCTMASTERNUMBER;

				public String getPRODUCTMASTERNUMBER () {
					return this.PRODUCTMASTERNUMBER;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS) {

        	try {

        		int length = 0;
		
					this.PRODUCTMASTERNUMBER = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTMASTERNUMBER,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTMASTERNUMBER="+PRODUCTMASTERNUMBER);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row28Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row29Struct implements routines.system.IPersistableRow<row29Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];

	
			    public String PRODUCTMASTERNUMBER;

				public String getPRODUCTMASTERNUMBER () {
					return this.PRODUCTMASTERNUMBER;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS) {

        	try {

        		int length = 0;
		
					this.PRODUCTMASTERNUMBER = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTMASTERNUMBER,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTMASTERNUMBER="+PRODUCTMASTERNUMBER);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row29Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row30Struct implements routines.system.IPersistableRow<row30Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];

	
			    public String PRODUCTMASTERNUMBER;

				public String getPRODUCTMASTERNUMBER () {
					return this.PRODUCTMASTERNUMBER;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String PRODUCTNAME;

				public String getPRODUCTNAME () {
					return this.PRODUCTNAME;
				}
				
			    public String PRODUCTSEARCHNAME;

				public String getPRODUCTSEARCHNAME () {
					return this.PRODUCTSEARCHNAME;
				}
				
			    public String PRODUCTVARIANTNUMBER;

				public String getPRODUCTVARIANTNUMBER () {
					return this.PRODUCTVARIANTNUMBER;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS) {

        	try {

        		int length = 0;
		
					this.PRODUCTMASTERNUMBER = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.PRODUCTNAME = readString(dis);
					
					this.PRODUCTSEARCHNAME = readString(dis);
					
					this.PRODUCTVARIANTNUMBER = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTMASTERNUMBER,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.PRODUCTNAME,dos);
					
					// String
				
						writeString(this.PRODUCTSEARCHNAME,dos);
					
					// String
				
						writeString(this.PRODUCTVARIANTNUMBER,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTMASTERNUMBER="+PRODUCTMASTERNUMBER);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",PRODUCTNAME="+PRODUCTNAME);
		sb.append(",PRODUCTSEARCHNAME="+PRODUCTSEARCHNAME);
		sb.append(",PRODUCTVARIANTNUMBER="+PRODUCTVARIANTNUMBER);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row30Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row32Struct implements routines.system.IPersistableRow<row32Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];

	
			    public String ITEMID;

				public String getITEMID () {
					return this.ITEMID;
				}
				
			    public String INVENTSIZEID;

				public String getINVENTSIZEID () {
					return this.INVENTSIZEID;
				}
				
			    public String INVENTSTYLEID;

				public String getINVENTSTYLEID () {
					return this.INVENTSTYLEID;
				}
				
			    public String INVENTCOLORID;

				public String getINVENTCOLORID () {
					return this.INVENTCOLORID;
				}
				
			    public String PRODUCTSTATUSID;

				public String getPRODUCTSTATUSID () {
					return this.PRODUCTSTATUSID;
				}
				
			    public String SEASONCODE;

				public String getSEASONCODE () {
					return this.SEASONCODE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS) {

        	try {

        		int length = 0;
		
					this.ITEMID = readString(dis);
					
					this.INVENTSIZEID = readString(dis);
					
					this.INVENTSTYLEID = readString(dis);
					
					this.INVENTCOLORID = readString(dis);
					
					this.PRODUCTSTATUSID = readString(dis);
					
					this.SEASONCODE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITEMID,dos);
					
					// String
				
						writeString(this.INVENTSIZEID,dos);
					
					// String
				
						writeString(this.INVENTSTYLEID,dos);
					
					// String
				
						writeString(this.INVENTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSTATUSID,dos);
					
					// String
				
						writeString(this.SEASONCODE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITEMID="+ITEMID);
		sb.append(",INVENTSIZEID="+INVENTSIZEID);
		sb.append(",INVENTSTYLEID="+INVENTSTYLEID);
		sb.append(",INVENTCOLORID="+INVENTCOLORID);
		sb.append(",PRODUCTSTATUSID="+PRODUCTSTATUSID);
		sb.append(",SEASONCODE="+SEASONCODE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row32Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row34Struct implements routines.system.IPersistableRow<row34Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];

	
			    public String PRODUCTNUMBER;

				public String getPRODUCTNUMBER () {
					return this.PRODUCTNUMBER;
				}
				
			    public String ATTRIBUTETYPENAME;

				public String getATTRIBUTETYPENAME () {
					return this.ATTRIBUTETYPENAME;
				}
				
			    public String ATTRIBUTENAME;

				public String getATTRIBUTENAME () {
					return this.ATTRIBUTENAME;
				}
				
			    public String TEXTVALUE;

				public String getTEXTVALUE () {
					return this.TEXTVALUE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS) {

        	try {

        		int length = 0;
		
					this.PRODUCTNUMBER = readString(dis);
					
					this.ATTRIBUTETYPENAME = readString(dis);
					
					this.ATTRIBUTENAME = readString(dis);
					
					this.TEXTVALUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTNUMBER,dos);
					
					// String
				
						writeString(this.ATTRIBUTETYPENAME,dos);
					
					// String
				
						writeString(this.ATTRIBUTENAME,dos);
					
					// String
				
						writeString(this.TEXTVALUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTNUMBER="+PRODUCTNUMBER);
		sb.append(",ATTRIBUTETYPENAME="+ATTRIBUTETYPENAME);
		sb.append(",ATTRIBUTENAME="+ATTRIBUTENAME);
		sb.append(",TEXTVALUE="+TEXTVALUE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row34Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct implements routines.system.IPersistableRow<copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];

	
			    public String PRODUCTNUMBER;

				public String getPRODUCTNUMBER () {
					return this.PRODUCTNUMBER;
				}
				
			    public String ATTRIBUTETYPENAME;

				public String getATTRIBUTETYPENAME () {
					return this.ATTRIBUTETYPENAME;
				}
				
			    public String ATTRIBUTENAME;

				public String getATTRIBUTENAME () {
					return this.ATTRIBUTENAME;
				}
				
			    public String TEXTVALUE;

				public String getTEXTVALUE () {
					return this.TEXTVALUE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS) {

        	try {

        		int length = 0;
		
					this.PRODUCTNUMBER = readString(dis);
					
					this.ATTRIBUTETYPENAME = readString(dis);
					
					this.ATTRIBUTENAME = readString(dis);
					
					this.TEXTVALUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTNUMBER,dos);
					
					// String
				
						writeString(this.ATTRIBUTETYPENAME,dos);
					
					// String
				
						writeString(this.ATTRIBUTENAME,dos);
					
					// String
				
						writeString(this.TEXTVALUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTNUMBER="+PRODUCTNUMBER);
		sb.append(",ATTRIBUTETYPENAME="+ATTRIBUTETYPENAME);
		sb.append(",ATTRIBUTENAME="+ATTRIBUTENAME);
		sb.append(",TEXTVALUE="+TEXTVALUE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row33Struct implements routines.system.IPersistableRow<row33Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];

	
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String PRODUCTQUANTITYUNITSYMBOL;

				public String getPRODUCTQUANTITYUNITSYMBOL () {
					return this.PRODUCTQUANTITYUNITSYMBOL;
				}
				
			    public String BARCODESETUPID;

				public String getBARCODESETUPID () {
					return this.BARCODESETUPID;
				}
				
			    public String BARCODE;

				public String getBARCODE () {
					return this.BARCODE;
				}
				
			    public String ISDEFAULTDISPLAYEDBARCODE;

				public String getISDEFAULTDISPLAYEDBARCODE () {
					return this.ISDEFAULTDISPLAYEDBARCODE;
				}
				
			    public String ISDEFAULTPRINTEDBARCODE;

				public String getISDEFAULTPRINTEDBARCODE () {
					return this.ISDEFAULTPRINTEDBARCODE;
				}
				
			    public String ISDEFAULTSCANNEDBARCODE;

				public String getISDEFAULTSCANNEDBARCODE () {
					return this.ISDEFAULTSCANNEDBARCODE;
				}
				
			    public String PRODUCTDESCRIPTION;

				public String getPRODUCTDESCRIPTION () {
					return this.PRODUCTDESCRIPTION;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS) {

        	try {

        		int length = 0;
		
					this.ITEMNUMBER = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.PRODUCTQUANTITYUNITSYMBOL = readString(dis);
					
					this.BARCODESETUPID = readString(dis);
					
					this.BARCODE = readString(dis);
					
					this.ISDEFAULTDISPLAYEDBARCODE = readString(dis);
					
					this.ISDEFAULTPRINTEDBARCODE = readString(dis);
					
					this.ISDEFAULTSCANNEDBARCODE = readString(dis);
					
					this.PRODUCTDESCRIPTION = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.PRODUCTQUANTITYUNITSYMBOL,dos);
					
					// String
				
						writeString(this.BARCODESETUPID,dos);
					
					// String
				
						writeString(this.BARCODE,dos);
					
					// String
				
						writeString(this.ISDEFAULTDISPLAYEDBARCODE,dos);
					
					// String
				
						writeString(this.ISDEFAULTPRINTEDBARCODE,dos);
					
					// String
				
						writeString(this.ISDEFAULTSCANNEDBARCODE,dos);
					
					// String
				
						writeString(this.PRODUCTDESCRIPTION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",PRODUCTQUANTITYUNITSYMBOL="+PRODUCTQUANTITYUNITSYMBOL);
		sb.append(",BARCODESETUPID="+BARCODESETUPID);
		sb.append(",BARCODE="+BARCODE);
		sb.append(",ISDEFAULTDISPLAYEDBARCODE="+ISDEFAULTDISPLAYEDBARCODE);
		sb.append(",ISDEFAULTPRINTEDBARCODE="+ISDEFAULTPRINTEDBARCODE);
		sb.append(",ISDEFAULTSCANNEDBARCODE="+ISDEFAULTSCANNEDBARCODE);
		sb.append(",PRODUCTDESCRIPTION="+PRODUCTDESCRIPTION);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row33Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_barcodeStruct implements routines.system.IPersistableRow<sortie_barcodeStruct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];

	
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String PRODUCTQUANTITYUNITSYMBOL;

				public String getPRODUCTQUANTITYUNITSYMBOL () {
					return this.PRODUCTQUANTITYUNITSYMBOL;
				}
				
			    public String BARCODESETUPID;

				public String getBARCODESETUPID () {
					return this.BARCODESETUPID;
				}
				
			    public String BARCODE;

				public String getBARCODE () {
					return this.BARCODE;
				}
				
			    public String ISDEFAULTDISPLAYEDBARCODE;

				public String getISDEFAULTDISPLAYEDBARCODE () {
					return this.ISDEFAULTDISPLAYEDBARCODE;
				}
				
			    public String ISDEFAULTPRINTEDBARCODE;

				public String getISDEFAULTPRINTEDBARCODE () {
					return this.ISDEFAULTPRINTEDBARCODE;
				}
				
			    public String ISDEFAULTSCANNEDBARCODE;

				public String getISDEFAULTSCANNEDBARCODE () {
					return this.ISDEFAULTSCANNEDBARCODE;
				}
				
			    public String PRODUCTDESCRIPTION;

				public String getPRODUCTDESCRIPTION () {
					return this.PRODUCTDESCRIPTION;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS) {

        	try {

        		int length = 0;
		
					this.ITEMNUMBER = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.PRODUCTQUANTITYUNITSYMBOL = readString(dis);
					
					this.BARCODESETUPID = readString(dis);
					
					this.BARCODE = readString(dis);
					
					this.ISDEFAULTDISPLAYEDBARCODE = readString(dis);
					
					this.ISDEFAULTPRINTEDBARCODE = readString(dis);
					
					this.ISDEFAULTSCANNEDBARCODE = readString(dis);
					
					this.PRODUCTDESCRIPTION = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.PRODUCTQUANTITYUNITSYMBOL,dos);
					
					// String
				
						writeString(this.BARCODESETUPID,dos);
					
					// String
				
						writeString(this.BARCODE,dos);
					
					// String
				
						writeString(this.ISDEFAULTDISPLAYEDBARCODE,dos);
					
					// String
				
						writeString(this.ISDEFAULTPRINTEDBARCODE,dos);
					
					// String
				
						writeString(this.ISDEFAULTSCANNEDBARCODE,dos);
					
					// String
				
						writeString(this.PRODUCTDESCRIPTION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",PRODUCTQUANTITYUNITSYMBOL="+PRODUCTQUANTITYUNITSYMBOL);
		sb.append(",BARCODESETUPID="+BARCODESETUPID);
		sb.append(",BARCODE="+BARCODE);
		sb.append(",ISDEFAULTDISPLAYEDBARCODE="+ISDEFAULTDISPLAYEDBARCODE);
		sb.append(",ISDEFAULTPRINTEDBARCODE="+ISDEFAULTPRINTEDBARCODE);
		sb.append(",ISDEFAULTSCANNEDBARCODE="+ISDEFAULTSCANNEDBARCODE);
		sb.append(",PRODUCTDESCRIPTION="+PRODUCTDESCRIPTION);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_barcodeStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_full_barcodeStruct implements routines.system.IPersistableRow<sortie_full_barcodeStruct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_full_barcodeStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfsortie_released_product_variantStruct implements routines.system.IPersistableRow<copyOfsortie_released_product_variantStruct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfsortie_released_product_variantStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_product_statusStruct implements routines.system.IPersistableRow<sortie_product_statusStruct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];

	
			    public String ITEMID;

				public String getITEMID () {
					return this.ITEMID;
				}
				
			    public String INVENTSIZEID;

				public String getINVENTSIZEID () {
					return this.INVENTSIZEID;
				}
				
			    public String INVENTSTYLEID;

				public String getINVENTSTYLEID () {
					return this.INVENTSTYLEID;
				}
				
			    public String INVENTCOLORID;

				public String getINVENTCOLORID () {
					return this.INVENTCOLORID;
				}
				
			    public String PRODUCTSTATUSID;

				public String getPRODUCTSTATUSID () {
					return this.PRODUCTSTATUSID;
				}
				
			    public String SEASONCODE;

				public String getSEASONCODE () {
					return this.SEASONCODE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS) {

        	try {

        		int length = 0;
		
					this.ITEMID = readString(dis);
					
					this.INVENTSIZEID = readString(dis);
					
					this.INVENTSTYLEID = readString(dis);
					
					this.INVENTCOLORID = readString(dis);
					
					this.PRODUCTSTATUSID = readString(dis);
					
					this.SEASONCODE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITEMID,dos);
					
					// String
				
						writeString(this.INVENTSIZEID,dos);
					
					// String
				
						writeString(this.INVENTSTYLEID,dos);
					
					// String
				
						writeString(this.INVENTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSTATUSID,dos);
					
					// String
				
						writeString(this.SEASONCODE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITEMID="+ITEMID);
		sb.append(",INVENTSIZEID="+INVENTSIZEID);
		sb.append(",INVENTSTYLEID="+INVENTSTYLEID);
		sb.append(",INVENTCOLORID="+INVENTCOLORID);
		sb.append(",PRODUCTSTATUSID="+PRODUCTSTATUSID);
		sb.append(",SEASONCODE="+SEASONCODE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_product_statusStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row31Struct implements routines.system.IPersistableRow<row31Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];

	
			    public String PRODUCTMASTERNUMBER;

				public String getPRODUCTMASTERNUMBER () {
					return this.PRODUCTMASTERNUMBER;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String PRODUCTNAME;

				public String getPRODUCTNAME () {
					return this.PRODUCTNAME;
				}
				
			    public String PRODUCTSEARCHNAME;

				public String getPRODUCTSEARCHNAME () {
					return this.PRODUCTSEARCHNAME;
				}
				
			    public String PRODUCTVARIANTNUMBER;

				public String getPRODUCTVARIANTNUMBER () {
					return this.PRODUCTVARIANTNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS) {

        	try {

        		int length = 0;
		
					this.PRODUCTMASTERNUMBER = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.PRODUCTNAME = readString(dis);
					
					this.PRODUCTSEARCHNAME = readString(dis);
					
					this.PRODUCTVARIANTNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTMASTERNUMBER,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.PRODUCTNAME,dos);
					
					// String
				
						writeString(this.PRODUCTSEARCHNAME,dos);
					
					// String
				
						writeString(this.PRODUCTVARIANTNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTMASTERNUMBER="+PRODUCTMASTERNUMBER);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",PRODUCTNAME="+PRODUCTNAME);
		sb.append(",PRODUCTSEARCHNAME="+PRODUCTSEARCHNAME);
		sb.append(",PRODUCTVARIANTNUMBER="+PRODUCTVARIANTNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row31Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_released_product_variantStruct implements routines.system.IPersistableRow<sortie_released_product_variantStruct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];

	
			    public String PRODUCTMASTERNUMBER;

				public String getPRODUCTMASTERNUMBER () {
					return this.PRODUCTMASTERNUMBER;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String PRODUCTNAME;

				public String getPRODUCTNAME () {
					return this.PRODUCTNAME;
				}
				
			    public String PRODUCTSEARCHNAME;

				public String getPRODUCTSEARCHNAME () {
					return this.PRODUCTSEARCHNAME;
				}
				
			    public String PRODUCTVARIANTNUMBER;

				public String getPRODUCTVARIANTNUMBER () {
					return this.PRODUCTVARIANTNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS) {

        	try {

        		int length = 0;
		
					this.PRODUCTMASTERNUMBER = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.PRODUCTNAME = readString(dis);
					
					this.PRODUCTSEARCHNAME = readString(dis);
					
					this.PRODUCTVARIANTNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTMASTERNUMBER,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.PRODUCTNAME,dos);
					
					// String
				
						writeString(this.PRODUCTSEARCHNAME,dos);
					
					// String
				
						writeString(this.PRODUCTVARIANTNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTMASTERNUMBER="+PRODUCTMASTERNUMBER);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",PRODUCTNAME="+PRODUCTNAME);
		sb.append(",PRODUCTSEARCHNAME="+PRODUCTSEARCHNAME);
		sb.append(",PRODUCTVARIANTNUMBER="+PRODUCTVARIANTNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_released_product_variantStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_full_varianStruct implements routines.system.IPersistableRow<sortie_full_varianStruct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_full_varianStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_full_product_variantStruct implements routines.system.IPersistableRow<sortie_full_product_variantStruct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_full_product_variantStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_product_variantStruct implements routines.system.IPersistableRow<sortie_product_variantStruct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];

	
			    public String PRODUCTMASTERNUMBER;

				public String getPRODUCTMASTERNUMBER () {
					return this.PRODUCTMASTERNUMBER;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String PRODUCTNAME;

				public String getPRODUCTNAME () {
					return this.PRODUCTNAME;
				}
				
			    public String PRODUCTSEARCHNAME;

				public String getPRODUCTSEARCHNAME () {
					return this.PRODUCTSEARCHNAME;
				}
				
			    public String PRODUCTVARIANTNUMBER;

				public String getPRODUCTVARIANTNUMBER () {
					return this.PRODUCTVARIANTNUMBER;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS) {

        	try {

        		int length = 0;
		
					this.PRODUCTMASTERNUMBER = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.PRODUCTNAME = readString(dis);
					
					this.PRODUCTSEARCHNAME = readString(dis);
					
					this.PRODUCTVARIANTNUMBER = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTMASTERNUMBER,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.PRODUCTNAME,dos);
					
					// String
				
						writeString(this.PRODUCTSEARCHNAME,dos);
					
					// String
				
						writeString(this.PRODUCTVARIANTNUMBER,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTMASTERNUMBER="+PRODUCTMASTERNUMBER);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",PRODUCTNAME="+PRODUCTNAME);
		sb.append(",PRODUCTSEARCHNAME="+PRODUCTSEARCHNAME);
		sb.append(",PRODUCTVARIANTNUMBER="+PRODUCTVARIANTNUMBER);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_product_variantStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_full_fitsStruct implements routines.system.IPersistableRow<sortie_full_fitsStruct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_full_fitsStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_fitsStruct implements routines.system.IPersistableRow<sortie_fitsStruct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];

	
			    public String PRODUCTMASTERNUMBER;

				public String getPRODUCTMASTERNUMBER () {
					return this.PRODUCTMASTERNUMBER;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS) {

        	try {

        		int length = 0;
		
					this.PRODUCTMASTERNUMBER = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTMASTERNUMBER,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTMASTERNUMBER="+PRODUCTMASTERNUMBER);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_fitsStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_full_sizeStruct implements routines.system.IPersistableRow<sortie_full_sizeStruct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_full_sizeStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_sizeStruct implements routines.system.IPersistableRow<sortie_sizeStruct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];

	
			    public String PRODUCTMASTERNUMBER;

				public String getPRODUCTMASTERNUMBER () {
					return this.PRODUCTMASTERNUMBER;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS) {

        	try {

        		int length = 0;
		
					this.PRODUCTMASTERNUMBER = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTMASTERNUMBER,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTMASTERNUMBER="+PRODUCTMASTERNUMBER);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_sizeStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_full_Struct implements routines.system.IPersistableRow<sortie_full_Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_full_Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_colorStruct implements routines.system.IPersistableRow<sortie_colorStruct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];

	
			    public String PRODUCTMASTERNUMBER;

				public String getPRODUCTMASTERNUMBER () {
					return this.PRODUCTMASTERNUMBER;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS) {

        	try {

        		int length = 0;
		
					this.PRODUCTMASTERNUMBER = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTMASTERNUMBER,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTMASTERNUMBER="+PRODUCTMASTERNUMBER);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_colorStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_fullStruct implements routines.system.IPersistableRow<copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_fullStruct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_fullStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct implements routines.system.IPersistableRow<copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];

	
			    public String PRODUCTNUMBER;

				public String getPRODUCTNUMBER () {
					return this.PRODUCTNUMBER;
				}
				
			    public String ATTRIBUTETYPENAME;

				public String getATTRIBUTETYPENAME () {
					return this.ATTRIBUTETYPENAME;
				}
				
			    public String ATTRIBUTENAME;

				public String getATTRIBUTENAME () {
					return this.ATTRIBUTENAME;
				}
				
			    public String TEXTVALUE;

				public String getTEXTVALUE () {
					return this.TEXTVALUE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS) {

        	try {

        		int length = 0;
		
					this.PRODUCTNUMBER = readString(dis);
					
					this.ATTRIBUTETYPENAME = readString(dis);
					
					this.ATTRIBUTENAME = readString(dis);
					
					this.TEXTVALUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTNUMBER,dos);
					
					// String
				
						writeString(this.ATTRIBUTETYPENAME,dos);
					
					// String
				
						writeString(this.ATTRIBUTENAME,dos);
					
					// String
				
						writeString(this.TEXTVALUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTNUMBER="+PRODUCTNUMBER);
		sb.append(",ATTRIBUTETYPENAME="+ATTRIBUTETYPENAME);
		sb.append(",ATTRIBUTENAME="+ATTRIBUTENAME);
		sb.append(",TEXTVALUE="+TEXTVALUE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_fullStruct implements routines.system.IPersistableRow<copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_fullStruct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_fullStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct implements routines.system.IPersistableRow<copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];

	
			    public String PRODUCTNUMBER;

				public String getPRODUCTNUMBER () {
					return this.PRODUCTNUMBER;
				}
				
			    public String ATTRIBUTETYPENAME;

				public String getATTRIBUTETYPENAME () {
					return this.ATTRIBUTETYPENAME;
				}
				
			    public String ATTRIBUTENAME;

				public String getATTRIBUTENAME () {
					return this.ATTRIBUTENAME;
				}
				
			    public String TEXTVALUE;

				public String getTEXTVALUE () {
					return this.TEXTVALUE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS) {

        	try {

        		int length = 0;
		
					this.PRODUCTNUMBER = readString(dis);
					
					this.ATTRIBUTETYPENAME = readString(dis);
					
					this.ATTRIBUTENAME = readString(dis);
					
					this.TEXTVALUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTNUMBER,dos);
					
					// String
				
						writeString(this.ATTRIBUTETYPENAME,dos);
					
					// String
				
						writeString(this.ATTRIBUTENAME,dos);
					
					// String
				
						writeString(this.TEXTVALUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTNUMBER="+PRODUCTNUMBER);
		sb.append(",ATTRIBUTETYPENAME="+ATTRIBUTETYPENAME);
		sb.append(",ATTRIBUTENAME="+ATTRIBUTENAME);
		sb.append(",TEXTVALUE="+TEXTVALUE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_fullStruct implements routines.system.IPersistableRow<copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_fullStruct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_fullStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct implements routines.system.IPersistableRow<copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];

	
			    public String PRODUCTNUMBER;

				public String getPRODUCTNUMBER () {
					return this.PRODUCTNUMBER;
				}
				
			    public String ATTRIBUTETYPENAME;

				public String getATTRIBUTETYPENAME () {
					return this.ATTRIBUTETYPENAME;
				}
				
			    public String ATTRIBUTENAME;

				public String getATTRIBUTENAME () {
					return this.ATTRIBUTENAME;
				}
				
			    public String TEXTVALUE;

				public String getTEXTVALUE () {
					return this.TEXTVALUE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS) {

        	try {

        		int length = 0;
		
					this.PRODUCTNUMBER = readString(dis);
					
					this.ATTRIBUTETYPENAME = readString(dis);
					
					this.ATTRIBUTENAME = readString(dis);
					
					this.TEXTVALUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTNUMBER,dos);
					
					// String
				
						writeString(this.ATTRIBUTETYPENAME,dos);
					
					// String
				
						writeString(this.ATTRIBUTENAME,dos);
					
					// String
				
						writeString(this.TEXTVALUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTNUMBER="+PRODUCTNUMBER);
		sb.append(",ATTRIBUTETYPENAME="+ATTRIBUTETYPENAME);
		sb.append(",ATTRIBUTENAME="+ATTRIBUTENAME);
		sb.append(",TEXTVALUE="+TEXTVALUE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_fullStruct implements routines.system.IPersistableRow<copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_fullStruct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_fullStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct implements routines.system.IPersistableRow<copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];

	
			    public String PRODUCTNUMBER;

				public String getPRODUCTNUMBER () {
					return this.PRODUCTNUMBER;
				}
				
			    public String ATTRIBUTETYPENAME;

				public String getATTRIBUTETYPENAME () {
					return this.ATTRIBUTETYPENAME;
				}
				
			    public String ATTRIBUTENAME;

				public String getATTRIBUTENAME () {
					return this.ATTRIBUTENAME;
				}
				
			    public String TEXTVALUE;

				public String getTEXTVALUE () {
					return this.TEXTVALUE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS) {

        	try {

        		int length = 0;
		
					this.PRODUCTNUMBER = readString(dis);
					
					this.ATTRIBUTETYPENAME = readString(dis);
					
					this.ATTRIBUTENAME = readString(dis);
					
					this.TEXTVALUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTNUMBER,dos);
					
					// String
				
						writeString(this.ATTRIBUTETYPENAME,dos);
					
					// String
				
						writeString(this.ATTRIBUTENAME,dos);
					
					// String
				
						writeString(this.TEXTVALUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTNUMBER="+PRODUCTNUMBER);
		sb.append(",ATTRIBUTETYPENAME="+ATTRIBUTETYPENAME);
		sb.append(",ATTRIBUTENAME="+ATTRIBUTENAME);
		sb.append(",TEXTVALUE="+TEXTVALUE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfcopyOfcopyOfcopyOfsortie_fullStruct implements routines.system.IPersistableRow<copyOfcopyOfcopyOfcopyOfcopyOfsortie_fullStruct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfcopyOfcopyOfcopyOfsortie_fullStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct implements routines.system.IPersistableRow<copyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];

	
			    public String PRODUCTNUMBER;

				public String getPRODUCTNUMBER () {
					return this.PRODUCTNUMBER;
				}
				
			    public String ATTRIBUTETYPENAME;

				public String getATTRIBUTETYPENAME () {
					return this.ATTRIBUTETYPENAME;
				}
				
			    public String ATTRIBUTENAME;

				public String getATTRIBUTENAME () {
					return this.ATTRIBUTENAME;
				}
				
			    public String TEXTVALUE;

				public String getTEXTVALUE () {
					return this.TEXTVALUE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS) {

        	try {

        		int length = 0;
		
					this.PRODUCTNUMBER = readString(dis);
					
					this.ATTRIBUTETYPENAME = readString(dis);
					
					this.ATTRIBUTENAME = readString(dis);
					
					this.TEXTVALUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTNUMBER,dos);
					
					// String
				
						writeString(this.ATTRIBUTETYPENAME,dos);
					
					// String
				
						writeString(this.ATTRIBUTENAME,dos);
					
					// String
				
						writeString(this.TEXTVALUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTNUMBER="+PRODUCTNUMBER);
		sb.append(",ATTRIBUTETYPENAME="+ATTRIBUTETYPENAME);
		sb.append(",ATTRIBUTENAME="+ATTRIBUTENAME);
		sb.append(",TEXTVALUE="+TEXTVALUE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfcopyOfcopyOfsortie_fullStruct implements routines.system.IPersistableRow<copyOfcopyOfcopyOfcopyOfsortie_fullStruct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfcopyOfcopyOfsortie_fullStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfcopyOfcopyOfsortie_productStruct implements routines.system.IPersistableRow<copyOfcopyOfcopyOfcopyOfsortie_productStruct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];

	
			    public String PRODUCTNUMBER;

				public String getPRODUCTNUMBER () {
					return this.PRODUCTNUMBER;
				}
				
			    public String ATTRIBUTETYPENAME;

				public String getATTRIBUTETYPENAME () {
					return this.ATTRIBUTETYPENAME;
				}
				
			    public String ATTRIBUTENAME;

				public String getATTRIBUTENAME () {
					return this.ATTRIBUTENAME;
				}
				
			    public String TEXTVALUE;

				public String getTEXTVALUE () {
					return this.TEXTVALUE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS) {

        	try {

        		int length = 0;
		
					this.PRODUCTNUMBER = readString(dis);
					
					this.ATTRIBUTETYPENAME = readString(dis);
					
					this.ATTRIBUTENAME = readString(dis);
					
					this.TEXTVALUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTNUMBER,dos);
					
					// String
				
						writeString(this.ATTRIBUTETYPENAME,dos);
					
					// String
				
						writeString(this.ATTRIBUTENAME,dos);
					
					// String
				
						writeString(this.TEXTVALUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTNUMBER="+PRODUCTNUMBER);
		sb.append(",ATTRIBUTETYPENAME="+ATTRIBUTETYPENAME);
		sb.append(",ATTRIBUTENAME="+ATTRIBUTENAME);
		sb.append(",TEXTVALUE="+TEXTVALUE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfcopyOfcopyOfsortie_productStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfcopyOfsortie_fullStruct implements routines.system.IPersistableRow<copyOfcopyOfcopyOfsortie_fullStruct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfcopyOfsortie_fullStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfcopyOfsortie_productStruct implements routines.system.IPersistableRow<copyOfcopyOfcopyOfsortie_productStruct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];

	
			    public String PRODUCTNUMBER;

				public String getPRODUCTNUMBER () {
					return this.PRODUCTNUMBER;
				}
				
			    public String ATTRIBUTETYPENAME;

				public String getATTRIBUTETYPENAME () {
					return this.ATTRIBUTETYPENAME;
				}
				
			    public String ATTRIBUTENAME;

				public String getATTRIBUTENAME () {
					return this.ATTRIBUTENAME;
				}
				
			    public String TEXTVALUE;

				public String getTEXTVALUE () {
					return this.TEXTVALUE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS) {

        	try {

        		int length = 0;
		
					this.PRODUCTNUMBER = readString(dis);
					
					this.ATTRIBUTETYPENAME = readString(dis);
					
					this.ATTRIBUTENAME = readString(dis);
					
					this.TEXTVALUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTNUMBER,dos);
					
					// String
				
						writeString(this.ATTRIBUTETYPENAME,dos);
					
					// String
				
						writeString(this.ATTRIBUTENAME,dos);
					
					// String
				
						writeString(this.TEXTVALUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTNUMBER="+PRODUCTNUMBER);
		sb.append(",ATTRIBUTETYPENAME="+ATTRIBUTETYPENAME);
		sb.append(",ATTRIBUTENAME="+ATTRIBUTENAME);
		sb.append(",TEXTVALUE="+TEXTVALUE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfcopyOfsortie_productStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfsortie_fullStruct implements routines.system.IPersistableRow<copyOfcopyOfsortie_fullStruct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfsortie_fullStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfsortie_productStruct implements routines.system.IPersistableRow<copyOfcopyOfsortie_productStruct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];

	
			    public String PRODUCTNUMBER;

				public String getPRODUCTNUMBER () {
					return this.PRODUCTNUMBER;
				}
				
			    public String ATTRIBUTETYPENAME;

				public String getATTRIBUTETYPENAME () {
					return this.ATTRIBUTETYPENAME;
				}
				
			    public String ATTRIBUTENAME;

				public String getATTRIBUTENAME () {
					return this.ATTRIBUTENAME;
				}
				
			    public String TEXTVALUE;

				public String getTEXTVALUE () {
					return this.TEXTVALUE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS) {

        	try {

        		int length = 0;
		
					this.PRODUCTNUMBER = readString(dis);
					
					this.ATTRIBUTETYPENAME = readString(dis);
					
					this.ATTRIBUTENAME = readString(dis);
					
					this.TEXTVALUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTNUMBER,dos);
					
					// String
				
						writeString(this.ATTRIBUTETYPENAME,dos);
					
					// String
				
						writeString(this.ATTRIBUTENAME,dos);
					
					// String
				
						writeString(this.TEXTVALUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTNUMBER="+PRODUCTNUMBER);
		sb.append(",ATTRIBUTETYPENAME="+ATTRIBUTETYPENAME);
		sb.append(",ATTRIBUTENAME="+ATTRIBUTENAME);
		sb.append(",TEXTVALUE="+TEXTVALUE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfsortie_productStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfsortie_fullStruct implements routines.system.IPersistableRow<copyOfsortie_fullStruct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfsortie_fullStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfsortie_productStruct implements routines.system.IPersistableRow<copyOfsortie_productStruct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];

	
			    public String PRODUCTLIFECYCLESEASONCODE;

				public String getPRODUCTLIFECYCLESEASONCODE () {
					return this.PRODUCTLIFECYCLESEASONCODE;
				}
				
			    public String BOMUNITSYMBOL;

				public String getBOMUNITSYMBOL () {
					return this.BOMUNITSYMBOL;
				}
				
			    public String INVENTORYRESERVATIONHIERARCHYNAME;

				public String getINVENTORYRESERVATIONHIERARCHYNAME () {
					return this.INVENTORYRESERVATIONHIERARCHYNAME;
				}
				
			    public String INVENTORYUNITSYMBOL;

				public String getINVENTORYUNITSYMBOL () {
					return this.INVENTORYUNITSYMBOL;
				}
				
			    public String ITEMMODELGROUPID;

				public String getITEMMODELGROUPID () {
					return this.ITEMMODELGROUPID;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public String KRFBRANDID;

				public String getKRFBRANDID () {
					return this.KRFBRANDID;
				}
				
			    public String KRFCOLORDIMLAYOUT;

				public String getKRFCOLORDIMLAYOUT () {
					return this.KRFCOLORDIMLAYOUT;
				}
				
			    public String KRFSIZEDIMLAYOUT;

				public String getKRFSIZEDIMLAYOUT () {
					return this.KRFSIZEDIMLAYOUT;
				}
				
			    public String KRFSTYLEDIMLAYOUT;

				public String getKRFSTYLEDIMLAYOUT () {
					return this.KRFSTYLEDIMLAYOUT;
				}
				
			    public String KRFAUTOOPENMATRIX;

				public String getKRFAUTOOPENMATRIX () {
					return this.KRFAUTOOPENMATRIX;
				}
				
			    public String ORIGINCOUNTRYREGIONID;

				public String getORIGINCOUNTRYREGIONID () {
					return this.ORIGINCOUNTRYREGIONID;
				}
				
			    public String PRODUCTCOVERAGEGROUPID;

				public String getPRODUCTCOVERAGEGROUPID () {
					return this.PRODUCTCOVERAGEGROUPID;
				}
				
			    public String PRODUCTDIMENSIONGROUPNAME;

				public String getPRODUCTDIMENSIONGROUPNAME () {
					return this.PRODUCTDIMENSIONGROUPNAME;
				}
				
			    public String PRODUCTGROUPID;

				public String getPRODUCTGROUPID () {
					return this.PRODUCTGROUPID;
				}
				
			    public String PRODUCTIONTYPE;

				public String getPRODUCTIONTYPE () {
					return this.PRODUCTIONTYPE;
				}
				
			    public String PRODUCTNUMBER;

				public String getPRODUCTNUMBER () {
					return this.PRODUCTNUMBER;
				}
				
			    public String PRODUCTSEARCHNAME;

				public String getPRODUCTSEARCHNAME () {
					return this.PRODUCTSEARCHNAME;
				}
				
			    public String PRODUCTSUBTYPE;

				public String getPRODUCTSUBTYPE () {
					return this.PRODUCTSUBTYPE;
				}
				
			    public String PRODUCTTYPE;

				public String getPRODUCTTYPE () {
					return this.PRODUCTTYPE;
				}
				
			    public String PURCHASEUNITSYMBOL;

				public String getPURCHASEUNITSYMBOL () {
					return this.PURCHASEUNITSYMBOL;
				}
				
			    public String SALESUNITSYMBOL;

				public String getSALESUNITSYMBOL () {
					return this.SALESUNITSYMBOL;
				}
				
			    public String SEARCHNAME;

				public String getSEARCHNAME () {
					return this.SEARCHNAME;
				}
				
			    public String STORAGEDIMENSIONGROUPNAME;

				public String getSTORAGEDIMENSIONGROUPNAME () {
					return this.STORAGEDIMENSIONGROUPNAME;
				}
				
			    public String TRACKINGDIMENSIONGROUPNAME;

				public String getTRACKINGDIMENSIONGROUPNAME () {
					return this.TRACKINGDIMENSIONGROUPNAME;
				}
				
			    public String PRODUCTLIFECYCLESTATEID;

				public String getPRODUCTLIFECYCLESTATEID () {
					return this.PRODUCTLIFECYCLESTATEID;
				}
				
			    public String PURCHASESALESTAXITEMGROUPCODE;

				public String getPURCHASESALESTAXITEMGROUPCODE () {
					return this.PURCHASESALESTAXITEMGROUPCODE;
				}
				
			    public String SALESSALESTAXITEMGROUPCODE;

				public String getSALESSALESTAXITEMGROUPCODE () {
					return this.SALESSALESTAXITEMGROUPCODE;
				}
				
			    public String UNITCONVERSIONSEQUENCEGROUPID;

				public String getUNITCONVERSIONSEQUENCEGROUPID () {
					return this.UNITCONVERSIONSEQUENCEGROUPID;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS) {

        	try {

        		int length = 0;
		
					this.PRODUCTLIFECYCLESEASONCODE = readString(dis);
					
					this.BOMUNITSYMBOL = readString(dis);
					
					this.INVENTORYRESERVATIONHIERARCHYNAME = readString(dis);
					
					this.INVENTORYUNITSYMBOL = readString(dis);
					
					this.ITEMMODELGROUPID = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
					this.KRFBRANDID = readString(dis);
					
					this.KRFCOLORDIMLAYOUT = readString(dis);
					
					this.KRFSIZEDIMLAYOUT = readString(dis);
					
					this.KRFSTYLEDIMLAYOUT = readString(dis);
					
					this.KRFAUTOOPENMATRIX = readString(dis);
					
					this.ORIGINCOUNTRYREGIONID = readString(dis);
					
					this.PRODUCTCOVERAGEGROUPID = readString(dis);
					
					this.PRODUCTDIMENSIONGROUPNAME = readString(dis);
					
					this.PRODUCTGROUPID = readString(dis);
					
					this.PRODUCTIONTYPE = readString(dis);
					
					this.PRODUCTNUMBER = readString(dis);
					
					this.PRODUCTSEARCHNAME = readString(dis);
					
					this.PRODUCTSUBTYPE = readString(dis);
					
					this.PRODUCTTYPE = readString(dis);
					
					this.PURCHASEUNITSYMBOL = readString(dis);
					
					this.SALESUNITSYMBOL = readString(dis);
					
					this.SEARCHNAME = readString(dis);
					
					this.STORAGEDIMENSIONGROUPNAME = readString(dis);
					
					this.TRACKINGDIMENSIONGROUPNAME = readString(dis);
					
					this.PRODUCTLIFECYCLESTATEID = readString(dis);
					
					this.PURCHASESALESTAXITEMGROUPCODE = readString(dis);
					
					this.SALESSALESTAXITEMGROUPCODE = readString(dis);
					
					this.UNITCONVERSIONSEQUENCEGROUPID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTLIFECYCLESEASONCODE,dos);
					
					// String
				
						writeString(this.BOMUNITSYMBOL,dos);
					
					// String
				
						writeString(this.INVENTORYRESERVATIONHIERARCHYNAME,dos);
					
					// String
				
						writeString(this.INVENTORYUNITSYMBOL,dos);
					
					// String
				
						writeString(this.ITEMMODELGROUPID,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// String
				
						writeString(this.KRFBRANDID,dos);
					
					// String
				
						writeString(this.KRFCOLORDIMLAYOUT,dos);
					
					// String
				
						writeString(this.KRFSIZEDIMLAYOUT,dos);
					
					// String
				
						writeString(this.KRFSTYLEDIMLAYOUT,dos);
					
					// String
				
						writeString(this.KRFAUTOOPENMATRIX,dos);
					
					// String
				
						writeString(this.ORIGINCOUNTRYREGIONID,dos);
					
					// String
				
						writeString(this.PRODUCTCOVERAGEGROUPID,dos);
					
					// String
				
						writeString(this.PRODUCTDIMENSIONGROUPNAME,dos);
					
					// String
				
						writeString(this.PRODUCTGROUPID,dos);
					
					// String
				
						writeString(this.PRODUCTIONTYPE,dos);
					
					// String
				
						writeString(this.PRODUCTNUMBER,dos);
					
					// String
				
						writeString(this.PRODUCTSEARCHNAME,dos);
					
					// String
				
						writeString(this.PRODUCTSUBTYPE,dos);
					
					// String
				
						writeString(this.PRODUCTTYPE,dos);
					
					// String
				
						writeString(this.PURCHASEUNITSYMBOL,dos);
					
					// String
				
						writeString(this.SALESUNITSYMBOL,dos);
					
					// String
				
						writeString(this.SEARCHNAME,dos);
					
					// String
				
						writeString(this.STORAGEDIMENSIONGROUPNAME,dos);
					
					// String
				
						writeString(this.TRACKINGDIMENSIONGROUPNAME,dos);
					
					// String
				
						writeString(this.PRODUCTLIFECYCLESTATEID,dos);
					
					// String
				
						writeString(this.PURCHASESALESTAXITEMGROUPCODE,dos);
					
					// String
				
						writeString(this.SALESSALESTAXITEMGROUPCODE,dos);
					
					// String
				
						writeString(this.UNITCONVERSIONSEQUENCEGROUPID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTLIFECYCLESEASONCODE="+PRODUCTLIFECYCLESEASONCODE);
		sb.append(",BOMUNITSYMBOL="+BOMUNITSYMBOL);
		sb.append(",INVENTORYRESERVATIONHIERARCHYNAME="+INVENTORYRESERVATIONHIERARCHYNAME);
		sb.append(",INVENTORYUNITSYMBOL="+INVENTORYUNITSYMBOL);
		sb.append(",ITEMMODELGROUPID="+ITEMMODELGROUPID);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",KRFBRANDID="+KRFBRANDID);
		sb.append(",KRFCOLORDIMLAYOUT="+KRFCOLORDIMLAYOUT);
		sb.append(",KRFSIZEDIMLAYOUT="+KRFSIZEDIMLAYOUT);
		sb.append(",KRFSTYLEDIMLAYOUT="+KRFSTYLEDIMLAYOUT);
		sb.append(",KRFAUTOOPENMATRIX="+KRFAUTOOPENMATRIX);
		sb.append(",ORIGINCOUNTRYREGIONID="+ORIGINCOUNTRYREGIONID);
		sb.append(",PRODUCTCOVERAGEGROUPID="+PRODUCTCOVERAGEGROUPID);
		sb.append(",PRODUCTDIMENSIONGROUPNAME="+PRODUCTDIMENSIONGROUPNAME);
		sb.append(",PRODUCTGROUPID="+PRODUCTGROUPID);
		sb.append(",PRODUCTIONTYPE="+PRODUCTIONTYPE);
		sb.append(",PRODUCTNUMBER="+PRODUCTNUMBER);
		sb.append(",PRODUCTSEARCHNAME="+PRODUCTSEARCHNAME);
		sb.append(",PRODUCTSUBTYPE="+PRODUCTSUBTYPE);
		sb.append(",PRODUCTTYPE="+PRODUCTTYPE);
		sb.append(",PURCHASEUNITSYMBOL="+PURCHASEUNITSYMBOL);
		sb.append(",SALESUNITSYMBOL="+SALESUNITSYMBOL);
		sb.append(",SEARCHNAME="+SEARCHNAME);
		sb.append(",STORAGEDIMENSIONGROUPNAME="+STORAGEDIMENSIONGROUPNAME);
		sb.append(",TRACKINGDIMENSIONGROUPNAME="+TRACKINGDIMENSIONGROUPNAME);
		sb.append(",PRODUCTLIFECYCLESTATEID="+PRODUCTLIFECYCLESTATEID);
		sb.append(",PURCHASESALESTAXITEMGROUPCODE="+PURCHASESALESTAXITEMGROUPCODE);
		sb.append(",SALESSALESTAXITEMGROUPCODE="+SALESSALESTAXITEMGROUPCODE);
		sb.append(",UNITCONVERSIONSEQUENCEGROUPID="+UNITCONVERSIONSEQUENCEGROUPID);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfsortie_productStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_fullStruct implements routines.system.IPersistableRow<sortie_fullStruct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_fullStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_productStruct implements routines.system.IPersistableRow<sortie_productStruct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];

	
			    public String KRFBRANDID;

				public String getKRFBRANDID () {
					return this.KRFBRANDID;
				}
				
			    public String PRODUCTSEARCHNAME;

				public String getPRODUCTSEARCHNAME () {
					return this.PRODUCTSEARCHNAME;
				}
				
			    public String PRODUCTDESCRIPTION;

				public String getPRODUCTDESCRIPTION () {
					return this.PRODUCTDESCRIPTION;
				}
				
			    public String PRODUCTNAME;

				public String getPRODUCTNAME () {
					return this.PRODUCTNAME;
				}
				
			    public String PRODUCTNUMBER;

				public String getPRODUCTNUMBER () {
					return this.PRODUCTNUMBER;
				}
				
			    public String RETAILPRODUCTCATEGORYNAME;

				public String getRETAILPRODUCTCATEGORYNAME () {
					return this.RETAILPRODUCTCATEGORYNAME;
				}
				
			    public String PRODUCTSUBTYPE;

				public String getPRODUCTSUBTYPE () {
					return this.PRODUCTSUBTYPE;
				}
				
			    public String PRODUCTTYPE;

				public String getPRODUCTTYPE () {
					return this.PRODUCTTYPE;
				}
				
			    public String PRODUCTDIMENSIONGROUPNAME;

				public String getPRODUCTDIMENSIONGROUPNAME () {
					return this.PRODUCTDIMENSIONGROUPNAME;
				}
				
			    public String STORAGEDIMENSIONGROUPNAME;

				public String getSTORAGEDIMENSIONGROUPNAME () {
					return this.STORAGEDIMENSIONGROUPNAME;
				}
				
			    public String TRACKINGDIMENSIONGROUPNAME;

				public String getTRACKINGDIMENSIONGROUPNAME () {
					return this.TRACKINGDIMENSIONGROUPNAME;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS) {

        	try {

        		int length = 0;
		
					this.KRFBRANDID = readString(dis);
					
					this.PRODUCTSEARCHNAME = readString(dis);
					
					this.PRODUCTDESCRIPTION = readString(dis);
					
					this.PRODUCTNAME = readString(dis);
					
					this.PRODUCTNUMBER = readString(dis);
					
					this.RETAILPRODUCTCATEGORYNAME = readString(dis);
					
					this.PRODUCTSUBTYPE = readString(dis);
					
					this.PRODUCTTYPE = readString(dis);
					
					this.PRODUCTDIMENSIONGROUPNAME = readString(dis);
					
					this.STORAGEDIMENSIONGROUPNAME = readString(dis);
					
					this.TRACKINGDIMENSIONGROUPNAME = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.KRFBRANDID,dos);
					
					// String
				
						writeString(this.PRODUCTSEARCHNAME,dos);
					
					// String
				
						writeString(this.PRODUCTDESCRIPTION,dos);
					
					// String
				
						writeString(this.PRODUCTNAME,dos);
					
					// String
				
						writeString(this.PRODUCTNUMBER,dos);
					
					// String
				
						writeString(this.RETAILPRODUCTCATEGORYNAME,dos);
					
					// String
				
						writeString(this.PRODUCTSUBTYPE,dos);
					
					// String
				
						writeString(this.PRODUCTTYPE,dos);
					
					// String
				
						writeString(this.PRODUCTDIMENSIONGROUPNAME,dos);
					
					// String
				
						writeString(this.STORAGEDIMENSIONGROUPNAME,dos);
					
					// String
				
						writeString(this.TRACKINGDIMENSIONGROUPNAME,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("KRFBRANDID="+KRFBRANDID);
		sb.append(",PRODUCTSEARCHNAME="+PRODUCTSEARCHNAME);
		sb.append(",PRODUCTDESCRIPTION="+PRODUCTDESCRIPTION);
		sb.append(",PRODUCTNAME="+PRODUCTNAME);
		sb.append(",PRODUCTNUMBER="+PRODUCTNUMBER);
		sb.append(",RETAILPRODUCTCATEGORYNAME="+RETAILPRODUCTCATEGORYNAME);
		sb.append(",PRODUCTSUBTYPE="+PRODUCTSUBTYPE);
		sb.append(",PRODUCTTYPE="+PRODUCTTYPE);
		sb.append(",PRODUCTDIMENSIONGROUPNAME="+PRODUCTDIMENSIONGROUPNAME);
		sb.append(",STORAGEDIMENSIONGROUPNAME="+STORAGEDIMENSIONGROUPNAME);
		sb.append(",TRACKINGDIMENSIONGROUPNAME="+TRACKINGDIMENSIONGROUPNAME);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_productStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_ExcelStruct implements routines.system.IPersistableRow<sortie_ExcelStruct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_ExcelStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];

	
			    public String newColumn;

				public String getNewColumn () {
					return this.newColumn;
				}
				
			    public String newColumn1;

				public String getNewColumn1 () {
					return this.newColumn1;
				}
				
			    public String newColumn2;

				public String getNewColumn2 () {
					return this.newColumn2;
				}
				
			    public String newColumn3;

				public String getNewColumn3 () {
					return this.newColumn3;
				}
				
			    public String newColumn4;

				public String getNewColumn4 () {
					return this.newColumn4;
				}
				
			    public String newColumn5;

				public String getNewColumn5 () {
					return this.newColumn5;
				}
				
			    public String newColumn6;

				public String getNewColumn6 () {
					return this.newColumn6;
				}
				
			    public String newColumn7;

				public String getNewColumn7 () {
					return this.newColumn7;
				}
				
			    public String newColumn8;

				public String getNewColumn8 () {
					return this.newColumn8;
				}
				
			    public String newColumn9;

				public String getNewColumn9 () {
					return this.newColumn9;
				}
				
			    public String newColumn10;

				public String getNewColumn10 () {
					return this.newColumn10;
				}
				
			    public String newColumn11;

				public String getNewColumn11 () {
					return this.newColumn11;
				}
				
			    public String newColumn12;

				public String getNewColumn12 () {
					return this.newColumn12;
				}
				
			    public String newColumn13;

				public String getNewColumn13 () {
					return this.newColumn13;
				}
				
			    public String newColumn14;

				public String getNewColumn14 () {
					return this.newColumn14;
				}
				
			    public String newColumn15;

				public String getNewColumn15 () {
					return this.newColumn15;
				}
				
			    public String newColumn16;

				public String getNewColumn16 () {
					return this.newColumn16;
				}
				
			    public String newColumn17;

				public String getNewColumn17 () {
					return this.newColumn17;
				}
				
			    public String newColumn18;

				public String getNewColumn18 () {
					return this.newColumn18;
				}
				
			    public String newColumn19;

				public String getNewColumn19 () {
					return this.newColumn19;
				}
				
			    public String newColumn20;

				public String getNewColumn20 () {
					return this.newColumn20;
				}
				
			    public String newColumn21;

				public String getNewColumn21 () {
					return this.newColumn21;
				}
				
			    public String newColumn22;

				public String getNewColumn22 () {
					return this.newColumn22;
				}
				
			    public String newColumn23;

				public String getNewColumn23 () {
					return this.newColumn23;
				}
				
			    public String newColumn24;

				public String getNewColumn24 () {
					return this.newColumn24;
				}
				
			    public String newColumn25;

				public String getNewColumn25 () {
					return this.newColumn25;
				}
				
			    public String newColumn26;

				public String getNewColumn26 () {
					return this.newColumn26;
				}
				
			    public String newColumn27;

				public String getNewColumn27 () {
					return this.newColumn27;
				}
				
			    public String newColumn28;

				public String getNewColumn28 () {
					return this.newColumn28;
				}
				
			    public String newColumn29;

				public String getNewColumn29 () {
					return this.newColumn29;
				}
				
			    public String newColumn30;

				public String getNewColumn30 () {
					return this.newColumn30;
				}
				
			    public String newColumn31;

				public String getNewColumn31 () {
					return this.newColumn31;
				}
				
			    public String newColumn32;

				public String getNewColumn32 () {
					return this.newColumn32;
				}
				
			    public String newColumn33;

				public String getNewColumn33 () {
					return this.newColumn33;
				}
				
			    public String newColumn34;

				public String getNewColumn34 () {
					return this.newColumn34;
				}
				
			    public String newColumn35;

				public String getNewColumn35 () {
					return this.newColumn35;
				}
				
			    public String newColumn36;

				public String getNewColumn36 () {
					return this.newColumn36;
				}
				
			    public String newColumn37;

				public String getNewColumn37 () {
					return this.newColumn37;
				}
				
			    public String newColumn38;

				public String getNewColumn38 () {
					return this.newColumn38;
				}
				
			    public String newColumn39;

				public String getNewColumn39 () {
					return this.newColumn39;
				}
				
			    public String newColumn40;

				public String getNewColumn40 () {
					return this.newColumn40;
				}
				
			    public String newColumn41;

				public String getNewColumn41 () {
					return this.newColumn41;
				}
				
			    public String newColumn42;

				public String getNewColumn42 () {
					return this.newColumn42;
				}
				
			    public String newColumn43;

				public String getNewColumn43 () {
					return this.newColumn43;
				}
				
			    public String newColumn44;

				public String getNewColumn44 () {
					return this.newColumn44;
				}
				
			    public String newColumn45;

				public String getNewColumn45 () {
					return this.newColumn45;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS) {

        	try {

        		int length = 0;
		
					this.newColumn = readString(dis);
					
					this.newColumn1 = readString(dis);
					
					this.newColumn2 = readString(dis);
					
					this.newColumn3 = readString(dis);
					
					this.newColumn4 = readString(dis);
					
					this.newColumn5 = readString(dis);
					
					this.newColumn6 = readString(dis);
					
					this.newColumn7 = readString(dis);
					
					this.newColumn8 = readString(dis);
					
					this.newColumn9 = readString(dis);
					
					this.newColumn10 = readString(dis);
					
					this.newColumn11 = readString(dis);
					
					this.newColumn12 = readString(dis);
					
					this.newColumn13 = readString(dis);
					
					this.newColumn14 = readString(dis);
					
					this.newColumn15 = readString(dis);
					
					this.newColumn16 = readString(dis);
					
					this.newColumn17 = readString(dis);
					
					this.newColumn18 = readString(dis);
					
					this.newColumn19 = readString(dis);
					
					this.newColumn20 = readString(dis);
					
					this.newColumn21 = readString(dis);
					
					this.newColumn22 = readString(dis);
					
					this.newColumn23 = readString(dis);
					
					this.newColumn24 = readString(dis);
					
					this.newColumn25 = readString(dis);
					
					this.newColumn26 = readString(dis);
					
					this.newColumn27 = readString(dis);
					
					this.newColumn28 = readString(dis);
					
					this.newColumn29 = readString(dis);
					
					this.newColumn30 = readString(dis);
					
					this.newColumn31 = readString(dis);
					
					this.newColumn32 = readString(dis);
					
					this.newColumn33 = readString(dis);
					
					this.newColumn34 = readString(dis);
					
					this.newColumn35 = readString(dis);
					
					this.newColumn36 = readString(dis);
					
					this.newColumn37 = readString(dis);
					
					this.newColumn38 = readString(dis);
					
					this.newColumn39 = readString(dis);
					
					this.newColumn40 = readString(dis);
					
					this.newColumn41 = readString(dis);
					
					this.newColumn42 = readString(dis);
					
					this.newColumn43 = readString(dis);
					
					this.newColumn44 = readString(dis);
					
					this.newColumn45 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.newColumn,dos);
					
					// String
				
						writeString(this.newColumn1,dos);
					
					// String
				
						writeString(this.newColumn2,dos);
					
					// String
				
						writeString(this.newColumn3,dos);
					
					// String
				
						writeString(this.newColumn4,dos);
					
					// String
				
						writeString(this.newColumn5,dos);
					
					// String
				
						writeString(this.newColumn6,dos);
					
					// String
				
						writeString(this.newColumn7,dos);
					
					// String
				
						writeString(this.newColumn8,dos);
					
					// String
				
						writeString(this.newColumn9,dos);
					
					// String
				
						writeString(this.newColumn10,dos);
					
					// String
				
						writeString(this.newColumn11,dos);
					
					// String
				
						writeString(this.newColumn12,dos);
					
					// String
				
						writeString(this.newColumn13,dos);
					
					// String
				
						writeString(this.newColumn14,dos);
					
					// String
				
						writeString(this.newColumn15,dos);
					
					// String
				
						writeString(this.newColumn16,dos);
					
					// String
				
						writeString(this.newColumn17,dos);
					
					// String
				
						writeString(this.newColumn18,dos);
					
					// String
				
						writeString(this.newColumn19,dos);
					
					// String
				
						writeString(this.newColumn20,dos);
					
					// String
				
						writeString(this.newColumn21,dos);
					
					// String
				
						writeString(this.newColumn22,dos);
					
					// String
				
						writeString(this.newColumn23,dos);
					
					// String
				
						writeString(this.newColumn24,dos);
					
					// String
				
						writeString(this.newColumn25,dos);
					
					// String
				
						writeString(this.newColumn26,dos);
					
					// String
				
						writeString(this.newColumn27,dos);
					
					// String
				
						writeString(this.newColumn28,dos);
					
					// String
				
						writeString(this.newColumn29,dos);
					
					// String
				
						writeString(this.newColumn30,dos);
					
					// String
				
						writeString(this.newColumn31,dos);
					
					// String
				
						writeString(this.newColumn32,dos);
					
					// String
				
						writeString(this.newColumn33,dos);
					
					// String
				
						writeString(this.newColumn34,dos);
					
					// String
				
						writeString(this.newColumn35,dos);
					
					// String
				
						writeString(this.newColumn36,dos);
					
					// String
				
						writeString(this.newColumn37,dos);
					
					// String
				
						writeString(this.newColumn38,dos);
					
					// String
				
						writeString(this.newColumn39,dos);
					
					// String
				
						writeString(this.newColumn40,dos);
					
					// String
				
						writeString(this.newColumn41,dos);
					
					// String
				
						writeString(this.newColumn42,dos);
					
					// String
				
						writeString(this.newColumn43,dos);
					
					// String
				
						writeString(this.newColumn44,dos);
					
					// String
				
						writeString(this.newColumn45,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("newColumn="+newColumn);
		sb.append(",newColumn1="+newColumn1);
		sb.append(",newColumn2="+newColumn2);
		sb.append(",newColumn3="+newColumn3);
		sb.append(",newColumn4="+newColumn4);
		sb.append(",newColumn5="+newColumn5);
		sb.append(",newColumn6="+newColumn6);
		sb.append(",newColumn7="+newColumn7);
		sb.append(",newColumn8="+newColumn8);
		sb.append(",newColumn9="+newColumn9);
		sb.append(",newColumn10="+newColumn10);
		sb.append(",newColumn11="+newColumn11);
		sb.append(",newColumn12="+newColumn12);
		sb.append(",newColumn13="+newColumn13);
		sb.append(",newColumn14="+newColumn14);
		sb.append(",newColumn15="+newColumn15);
		sb.append(",newColumn16="+newColumn16);
		sb.append(",newColumn17="+newColumn17);
		sb.append(",newColumn18="+newColumn18);
		sb.append(",newColumn19="+newColumn19);
		sb.append(",newColumn20="+newColumn20);
		sb.append(",newColumn21="+newColumn21);
		sb.append(",newColumn22="+newColumn22);
		sb.append(",newColumn23="+newColumn23);
		sb.append(",newColumn24="+newColumn24);
		sb.append(",newColumn25="+newColumn25);
		sb.append(",newColumn26="+newColumn26);
		sb.append(",newColumn27="+newColumn27);
		sb.append(",newColumn28="+newColumn28);
		sb.append(",newColumn29="+newColumn29);
		sb.append(",newColumn30="+newColumn30);
		sb.append(",newColumn31="+newColumn31);
		sb.append(",newColumn32="+newColumn32);
		sb.append(",newColumn33="+newColumn33);
		sb.append(",newColumn34="+newColumn34);
		sb.append(",newColumn35="+newColumn35);
		sb.append(",newColumn36="+newColumn36);
		sb.append(",newColumn37="+newColumn37);
		sb.append(",newColumn38="+newColumn38);
		sb.append(",newColumn39="+newColumn39);
		sb.append(",newColumn40="+newColumn40);
		sb.append(",newColumn41="+newColumn41);
		sb.append(",newColumn42="+newColumn42);
		sb.append(",newColumn43="+newColumn43);
		sb.append(",newColumn44="+newColumn44);
		sb.append(",newColumn45="+newColumn45);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tFileInputExcel_2Struct implements routines.system.IPersistableRow<after_tFileInputExcel_2Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];

	
			    public String newColumn;

				public String getNewColumn () {
					return this.newColumn;
				}
				
			    public String newColumn1;

				public String getNewColumn1 () {
					return this.newColumn1;
				}
				
			    public String newColumn2;

				public String getNewColumn2 () {
					return this.newColumn2;
				}
				
			    public String newColumn3;

				public String getNewColumn3 () {
					return this.newColumn3;
				}
				
			    public String newColumn4;

				public String getNewColumn4 () {
					return this.newColumn4;
				}
				
			    public String newColumn5;

				public String getNewColumn5 () {
					return this.newColumn5;
				}
				
			    public String newColumn6;

				public String getNewColumn6 () {
					return this.newColumn6;
				}
				
			    public String newColumn7;

				public String getNewColumn7 () {
					return this.newColumn7;
				}
				
			    public String newColumn8;

				public String getNewColumn8 () {
					return this.newColumn8;
				}
				
			    public String newColumn9;

				public String getNewColumn9 () {
					return this.newColumn9;
				}
				
			    public String newColumn10;

				public String getNewColumn10 () {
					return this.newColumn10;
				}
				
			    public String newColumn11;

				public String getNewColumn11 () {
					return this.newColumn11;
				}
				
			    public String newColumn12;

				public String getNewColumn12 () {
					return this.newColumn12;
				}
				
			    public String newColumn13;

				public String getNewColumn13 () {
					return this.newColumn13;
				}
				
			    public String newColumn14;

				public String getNewColumn14 () {
					return this.newColumn14;
				}
				
			    public String newColumn15;

				public String getNewColumn15 () {
					return this.newColumn15;
				}
				
			    public String newColumn16;

				public String getNewColumn16 () {
					return this.newColumn16;
				}
				
			    public String newColumn17;

				public String getNewColumn17 () {
					return this.newColumn17;
				}
				
			    public String newColumn18;

				public String getNewColumn18 () {
					return this.newColumn18;
				}
				
			    public String newColumn19;

				public String getNewColumn19 () {
					return this.newColumn19;
				}
				
			    public String newColumn20;

				public String getNewColumn20 () {
					return this.newColumn20;
				}
				
			    public String newColumn21;

				public String getNewColumn21 () {
					return this.newColumn21;
				}
				
			    public String newColumn22;

				public String getNewColumn22 () {
					return this.newColumn22;
				}
				
			    public String newColumn23;

				public String getNewColumn23 () {
					return this.newColumn23;
				}
				
			    public String newColumn24;

				public String getNewColumn24 () {
					return this.newColumn24;
				}
				
			    public String newColumn25;

				public String getNewColumn25 () {
					return this.newColumn25;
				}
				
			    public String newColumn26;

				public String getNewColumn26 () {
					return this.newColumn26;
				}
				
			    public String newColumn27;

				public String getNewColumn27 () {
					return this.newColumn27;
				}
				
			    public String newColumn28;

				public String getNewColumn28 () {
					return this.newColumn28;
				}
				
			    public String newColumn29;

				public String getNewColumn29 () {
					return this.newColumn29;
				}
				
			    public String newColumn30;

				public String getNewColumn30 () {
					return this.newColumn30;
				}
				
			    public String newColumn31;

				public String getNewColumn31 () {
					return this.newColumn31;
				}
				
			    public String newColumn32;

				public String getNewColumn32 () {
					return this.newColumn32;
				}
				
			    public String newColumn33;

				public String getNewColumn33 () {
					return this.newColumn33;
				}
				
			    public String newColumn34;

				public String getNewColumn34 () {
					return this.newColumn34;
				}
				
			    public String newColumn35;

				public String getNewColumn35 () {
					return this.newColumn35;
				}
				
			    public String newColumn36;

				public String getNewColumn36 () {
					return this.newColumn36;
				}
				
			    public String newColumn37;

				public String getNewColumn37 () {
					return this.newColumn37;
				}
				
			    public String newColumn38;

				public String getNewColumn38 () {
					return this.newColumn38;
				}
				
			    public String newColumn39;

				public String getNewColumn39 () {
					return this.newColumn39;
				}
				
			    public String newColumn40;

				public String getNewColumn40 () {
					return this.newColumn40;
				}
				
			    public String newColumn41;

				public String getNewColumn41 () {
					return this.newColumn41;
				}
				
			    public String newColumn42;

				public String getNewColumn42 () {
					return this.newColumn42;
				}
				
			    public String newColumn43;

				public String getNewColumn43 () {
					return this.newColumn43;
				}
				
			    public String newColumn44;

				public String getNewColumn44 () {
					return this.newColumn44;
				}
				
			    public String newColumn45;

				public String getNewColumn45 () {
					return this.newColumn45;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS) {

        	try {

        		int length = 0;
		
					this.newColumn = readString(dis);
					
					this.newColumn1 = readString(dis);
					
					this.newColumn2 = readString(dis);
					
					this.newColumn3 = readString(dis);
					
					this.newColumn4 = readString(dis);
					
					this.newColumn5 = readString(dis);
					
					this.newColumn6 = readString(dis);
					
					this.newColumn7 = readString(dis);
					
					this.newColumn8 = readString(dis);
					
					this.newColumn9 = readString(dis);
					
					this.newColumn10 = readString(dis);
					
					this.newColumn11 = readString(dis);
					
					this.newColumn12 = readString(dis);
					
					this.newColumn13 = readString(dis);
					
					this.newColumn14 = readString(dis);
					
					this.newColumn15 = readString(dis);
					
					this.newColumn16 = readString(dis);
					
					this.newColumn17 = readString(dis);
					
					this.newColumn18 = readString(dis);
					
					this.newColumn19 = readString(dis);
					
					this.newColumn20 = readString(dis);
					
					this.newColumn21 = readString(dis);
					
					this.newColumn22 = readString(dis);
					
					this.newColumn23 = readString(dis);
					
					this.newColumn24 = readString(dis);
					
					this.newColumn25 = readString(dis);
					
					this.newColumn26 = readString(dis);
					
					this.newColumn27 = readString(dis);
					
					this.newColumn28 = readString(dis);
					
					this.newColumn29 = readString(dis);
					
					this.newColumn30 = readString(dis);
					
					this.newColumn31 = readString(dis);
					
					this.newColumn32 = readString(dis);
					
					this.newColumn33 = readString(dis);
					
					this.newColumn34 = readString(dis);
					
					this.newColumn35 = readString(dis);
					
					this.newColumn36 = readString(dis);
					
					this.newColumn37 = readString(dis);
					
					this.newColumn38 = readString(dis);
					
					this.newColumn39 = readString(dis);
					
					this.newColumn40 = readString(dis);
					
					this.newColumn41 = readString(dis);
					
					this.newColumn42 = readString(dis);
					
					this.newColumn43 = readString(dis);
					
					this.newColumn44 = readString(dis);
					
					this.newColumn45 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.newColumn,dos);
					
					// String
				
						writeString(this.newColumn1,dos);
					
					// String
				
						writeString(this.newColumn2,dos);
					
					// String
				
						writeString(this.newColumn3,dos);
					
					// String
				
						writeString(this.newColumn4,dos);
					
					// String
				
						writeString(this.newColumn5,dos);
					
					// String
				
						writeString(this.newColumn6,dos);
					
					// String
				
						writeString(this.newColumn7,dos);
					
					// String
				
						writeString(this.newColumn8,dos);
					
					// String
				
						writeString(this.newColumn9,dos);
					
					// String
				
						writeString(this.newColumn10,dos);
					
					// String
				
						writeString(this.newColumn11,dos);
					
					// String
				
						writeString(this.newColumn12,dos);
					
					// String
				
						writeString(this.newColumn13,dos);
					
					// String
				
						writeString(this.newColumn14,dos);
					
					// String
				
						writeString(this.newColumn15,dos);
					
					// String
				
						writeString(this.newColumn16,dos);
					
					// String
				
						writeString(this.newColumn17,dos);
					
					// String
				
						writeString(this.newColumn18,dos);
					
					// String
				
						writeString(this.newColumn19,dos);
					
					// String
				
						writeString(this.newColumn20,dos);
					
					// String
				
						writeString(this.newColumn21,dos);
					
					// String
				
						writeString(this.newColumn22,dos);
					
					// String
				
						writeString(this.newColumn23,dos);
					
					// String
				
						writeString(this.newColumn24,dos);
					
					// String
				
						writeString(this.newColumn25,dos);
					
					// String
				
						writeString(this.newColumn26,dos);
					
					// String
				
						writeString(this.newColumn27,dos);
					
					// String
				
						writeString(this.newColumn28,dos);
					
					// String
				
						writeString(this.newColumn29,dos);
					
					// String
				
						writeString(this.newColumn30,dos);
					
					// String
				
						writeString(this.newColumn31,dos);
					
					// String
				
						writeString(this.newColumn32,dos);
					
					// String
				
						writeString(this.newColumn33,dos);
					
					// String
				
						writeString(this.newColumn34,dos);
					
					// String
				
						writeString(this.newColumn35,dos);
					
					// String
				
						writeString(this.newColumn36,dos);
					
					// String
				
						writeString(this.newColumn37,dos);
					
					// String
				
						writeString(this.newColumn38,dos);
					
					// String
				
						writeString(this.newColumn39,dos);
					
					// String
				
						writeString(this.newColumn40,dos);
					
					// String
				
						writeString(this.newColumn41,dos);
					
					// String
				
						writeString(this.newColumn42,dos);
					
					// String
				
						writeString(this.newColumn43,dos);
					
					// String
				
						writeString(this.newColumn44,dos);
					
					// String
				
						writeString(this.newColumn45,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("newColumn="+newColumn);
		sb.append(",newColumn1="+newColumn1);
		sb.append(",newColumn2="+newColumn2);
		sb.append(",newColumn3="+newColumn3);
		sb.append(",newColumn4="+newColumn4);
		sb.append(",newColumn5="+newColumn5);
		sb.append(",newColumn6="+newColumn6);
		sb.append(",newColumn7="+newColumn7);
		sb.append(",newColumn8="+newColumn8);
		sb.append(",newColumn9="+newColumn9);
		sb.append(",newColumn10="+newColumn10);
		sb.append(",newColumn11="+newColumn11);
		sb.append(",newColumn12="+newColumn12);
		sb.append(",newColumn13="+newColumn13);
		sb.append(",newColumn14="+newColumn14);
		sb.append(",newColumn15="+newColumn15);
		sb.append(",newColumn16="+newColumn16);
		sb.append(",newColumn17="+newColumn17);
		sb.append(",newColumn18="+newColumn18);
		sb.append(",newColumn19="+newColumn19);
		sb.append(",newColumn20="+newColumn20);
		sb.append(",newColumn21="+newColumn21);
		sb.append(",newColumn22="+newColumn22);
		sb.append(",newColumn23="+newColumn23);
		sb.append(",newColumn24="+newColumn24);
		sb.append(",newColumn25="+newColumn25);
		sb.append(",newColumn26="+newColumn26);
		sb.append(",newColumn27="+newColumn27);
		sb.append(",newColumn28="+newColumn28);
		sb.append(",newColumn29="+newColumn29);
		sb.append(",newColumn30="+newColumn30);
		sb.append(",newColumn31="+newColumn31);
		sb.append(",newColumn32="+newColumn32);
		sb.append(",newColumn33="+newColumn33);
		sb.append(",newColumn34="+newColumn34);
		sb.append(",newColumn35="+newColumn35);
		sb.append(",newColumn36="+newColumn36);
		sb.append(",newColumn37="+newColumn37);
		sb.append(",newColumn38="+newColumn38);
		sb.append(",newColumn39="+newColumn39);
		sb.append(",newColumn40="+newColumn40);
		sb.append(",newColumn41="+newColumn41);
		sb.append(",newColumn42="+newColumn42);
		sb.append(",newColumn43="+newColumn43);
		sb.append(",newColumn44="+newColumn44);
		sb.append(",newColumn45="+newColumn45);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tFileInputExcel_2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputExcel_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputExcel_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tFileInputExcel_3Process(globalMap);

		row3Struct row3 = new row3Struct();
sortie_ExcelStruct sortie_Excel = new sortie_ExcelStruct();
sortie_fullStruct sortie_full = new sortie_fullStruct();
sortie_fullStruct row6 = sortie_full;
copyOfsortie_fullStruct copyOfsortie_full = new copyOfsortie_fullStruct();
copyOfcopyOfsortie_fullStruct copyOfcopyOfsortie_full = new copyOfcopyOfsortie_fullStruct();
copyOfcopyOfcopyOfsortie_fullStruct copyOfcopyOfcopyOfsortie_full = new copyOfcopyOfcopyOfsortie_fullStruct();
copyOfcopyOfcopyOfcopyOfsortie_fullStruct copyOfcopyOfcopyOfcopyOfsortie_full = new copyOfcopyOfcopyOfcopyOfsortie_fullStruct();
copyOfcopyOfcopyOfcopyOfcopyOfsortie_fullStruct copyOfcopyOfcopyOfcopyOfcopyOfsortie_full = new copyOfcopyOfcopyOfcopyOfcopyOfsortie_fullStruct();
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_fullStruct copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full = new copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_fullStruct();
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_fullStruct copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full = new copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_fullStruct();
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_fullStruct copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full = new copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_fullStruct();
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_fullStruct copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full = new copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_fullStruct();
sortie_full_Struct sortie_full_ = new sortie_full_Struct();
sortie_full_sizeStruct sortie_full_size = new sortie_full_sizeStruct();
sortie_full_fitsStruct sortie_full_fits = new sortie_full_fitsStruct();
sortie_full_product_variantStruct sortie_full_product_variant = new sortie_full_product_variantStruct();
sortie_released_product_variantStruct sortie_released_product_variant = new sortie_released_product_variantStruct();
row31Struct row31 = new row31Struct();
sortie_full_varianStruct sortie_full_varian = new sortie_full_varianStruct();
copyOfsortie_released_product_variantStruct copyOfsortie_released_product_variant = new copyOfsortie_released_product_variantStruct();
sortie_barcodeStruct sortie_barcode = new sortie_barcodeStruct();
row33Struct row33 = new row33Struct();
sortie_full_barcodeStruct sortie_full_barcode = new sortie_full_barcodeStruct();
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product = new copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct();
row34Struct row34 = new row34Struct();
sortie_product_statusStruct sortie_product_status = new sortie_product_statusStruct();
row32Struct row32 = new row32Struct();
sortie_product_variantStruct sortie_product_variant = new sortie_product_variantStruct();
row30Struct row30 = new row30Struct();
sortie_fitsStruct sortie_fits = new sortie_fitsStruct();
row29Struct row29 = new row29Struct();
sortie_sizeStruct sortie_size = new sortie_sizeStruct();
row28Struct row28 = new row28Struct();
sortie_colorStruct sortie_color = new sortie_colorStruct();
row27Struct row27 = new row27Struct();
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product = new copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct();
row25Struct row25 = new row25Struct();
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product = new copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct();
row22Struct row22 = new row22Struct();
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product = new copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct();
row20Struct row20 = new row20Struct();
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product = new copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct();
row18Struct row18 = new row18Struct();
copyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct copyOfcopyOfcopyOfcopyOfcopyOfsortie_product = new copyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct();
row16Struct row16 = new row16Struct();
copyOfcopyOfcopyOfcopyOfsortie_productStruct copyOfcopyOfcopyOfcopyOfsortie_product = new copyOfcopyOfcopyOfcopyOfsortie_productStruct();
row14Struct row14 = new row14Struct();
copyOfcopyOfcopyOfsortie_productStruct copyOfcopyOfcopyOfsortie_product = new copyOfcopyOfcopyOfsortie_productStruct();
row10Struct row10 = new row10Struct();
copyOfcopyOfsortie_productStruct copyOfcopyOfsortie_product = new copyOfcopyOfsortie_productStruct();
Main1Struct Main1 = new Main1Struct();
copyOfsortie_productStruct copyOfsortie_product = new copyOfsortie_productStruct();
row8Struct row8 = new row8Struct();
sortie_productStruct sortie_product = new sortie_productStruct();
sortie_productStruct row4 = sortie_product;
row5Struct row5 = new row5Struct();






















	
	/**
	 * [tFileOutputExcel_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_8", false);
		start_Hash.put("tFileOutputExcel_8", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_8";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row31");
					}
				
		int tos_count_tFileOutputExcel_8 = 0;
		


		int columnIndex_tFileOutputExcel_8 = 0;
		
		String fileName_tFileOutputExcel_8=context.ExtractPath + "Released product variants V2.xlsx";
		int nb_line_tFileOutputExcel_8 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_8 = new org.talend.ExcelTool();
		
		xlsxTool_tFileOutputExcel_8.setSheet("Released product variants V2");
		xlsxTool_tFileOutputExcel_8.setAppend(false,true);
		xlsxTool_tFileOutputExcel_8.setRecalculateFormula(false);
		xlsxTool_tFileOutputExcel_8.setXY(false,0,10,false);
		
		java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_8 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap.get("concurrentHashMap");
		java.lang.Object lockObj_tFileOutputExcel_8 = chm_tFileOutputExcel_8.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_8", k -> new Object());
		synchronized (lockObj_tFileOutputExcel_8) {
			
				xlsxTool_tFileOutputExcel_8.prepareXlsxFile(fileName_tFileOutputExcel_8);
			
		}
		
		xlsxTool_tFileOutputExcel_8.setFont("");
		
		if (xlsxTool_tFileOutputExcel_8.getStartRow() == 0){
		
		xlsxTool_tFileOutputExcel_8.addRow();
		
		xlsxTool_tFileOutputExcel_8.addCellValue("PRODUCTMASTERNUMBER");
		
		xlsxTool_tFileOutputExcel_8.addCellValue("PRODUCTCOLORID");
		
		xlsxTool_tFileOutputExcel_8.addCellValue("PRODUCTSIZEID");
		
		xlsxTool_tFileOutputExcel_8.addCellValue("PRODUCTSTYLEID");
		
		xlsxTool_tFileOutputExcel_8.addCellValue("PRODUCTNAME");
		
		xlsxTool_tFileOutputExcel_8.addCellValue("PRODUCTSEARCHNAME");
		
		xlsxTool_tFileOutputExcel_8.addCellValue("PRODUCTVARIANTNUMBER");
		
		xlsxTool_tFileOutputExcel_8.addCellValue("ITEMNUMBER");
		
		nb_line_tFileOutputExcel_8++; 
		
	}
		

 



/**
 * [tFileOutputExcel_8 begin ] stop
 */



	
	/**
	 * [tUniqRow_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_15", false);
		start_Hash.put("tUniqRow_15", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_15";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_released_product_variant");
					}
				
		int tos_count_tUniqRow_15 = 0;
		

	
		class KeyStruct_tUniqRow_15 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String PRODUCTMASTERNUMBER;
					String PRODUCTCOLORID;
					String PRODUCTSIZEID;
					String PRODUCTSTYLEID;
					String PRODUCTNAME;
					String PRODUCTSEARCHNAME;
					String PRODUCTVARIANTNUMBER;
					String ITEMNUMBER;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.PRODUCTMASTERNUMBER == null) ? 0 : this.PRODUCTMASTERNUMBER.hashCode());
								
								result = prime * result + ((this.PRODUCTCOLORID == null) ? 0 : this.PRODUCTCOLORID.hashCode());
								
								result = prime * result + ((this.PRODUCTSIZEID == null) ? 0 : this.PRODUCTSIZEID.hashCode());
								
								result = prime * result + ((this.PRODUCTSTYLEID == null) ? 0 : this.PRODUCTSTYLEID.hashCode());
								
								result = prime * result + ((this.PRODUCTNAME == null) ? 0 : this.PRODUCTNAME.hashCode());
								
								result = prime * result + ((this.PRODUCTSEARCHNAME == null) ? 0 : this.PRODUCTSEARCHNAME.hashCode());
								
								result = prime * result + ((this.PRODUCTVARIANTNUMBER == null) ? 0 : this.PRODUCTVARIANTNUMBER.hashCode());
								
								result = prime * result + ((this.ITEMNUMBER == null) ? 0 : this.ITEMNUMBER.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_15 other = (KeyStruct_tUniqRow_15) obj;
				
									if (this.PRODUCTMASTERNUMBER == null) {
										if (other.PRODUCTMASTERNUMBER != null) 
											return false;
								
									} else if (!this.PRODUCTMASTERNUMBER.equals(other.PRODUCTMASTERNUMBER))
								 
										return false;
								
									if (this.PRODUCTCOLORID == null) {
										if (other.PRODUCTCOLORID != null) 
											return false;
								
									} else if (!this.PRODUCTCOLORID.equals(other.PRODUCTCOLORID))
								 
										return false;
								
									if (this.PRODUCTSIZEID == null) {
										if (other.PRODUCTSIZEID != null) 
											return false;
								
									} else if (!this.PRODUCTSIZEID.equals(other.PRODUCTSIZEID))
								 
										return false;
								
									if (this.PRODUCTSTYLEID == null) {
										if (other.PRODUCTSTYLEID != null) 
											return false;
								
									} else if (!this.PRODUCTSTYLEID.equals(other.PRODUCTSTYLEID))
								 
										return false;
								
									if (this.PRODUCTNAME == null) {
										if (other.PRODUCTNAME != null) 
											return false;
								
									} else if (!this.PRODUCTNAME.equals(other.PRODUCTNAME))
								 
										return false;
								
									if (this.PRODUCTSEARCHNAME == null) {
										if (other.PRODUCTSEARCHNAME != null) 
											return false;
								
									} else if (!this.PRODUCTSEARCHNAME.equals(other.PRODUCTSEARCHNAME))
								 
										return false;
								
									if (this.PRODUCTVARIANTNUMBER == null) {
										if (other.PRODUCTVARIANTNUMBER != null) 
											return false;
								
									} else if (!this.PRODUCTVARIANTNUMBER.equals(other.PRODUCTVARIANTNUMBER))
								 
										return false;
								
									if (this.ITEMNUMBER == null) {
										if (other.ITEMNUMBER != null) 
											return false;
								
									} else if (!this.ITEMNUMBER.equals(other.ITEMNUMBER))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_15 = 0;
int nb_duplicates_tUniqRow_15 = 0;
KeyStruct_tUniqRow_15 finder_tUniqRow_15 = new KeyStruct_tUniqRow_15();
java.util.Set<KeyStruct_tUniqRow_15> keystUniqRow_15 = new java.util.HashSet<KeyStruct_tUniqRow_15>(); 

 



/**
 * [tUniqRow_15 begin ] stop
 */







	
	/**
	 * [tFileOutputExcel_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_10", false);
		start_Hash.put("tFileOutputExcel_10", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_10";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row33");
					}
				
		int tos_count_tFileOutputExcel_10 = 0;
		


		int columnIndex_tFileOutputExcel_10 = 0;
		
		String fileName_tFileOutputExcel_10=context.ExtractPath + "Item - barcodes V3.xlsx";
		int nb_line_tFileOutputExcel_10 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_10 = new org.talend.ExcelTool();
		
		xlsxTool_tFileOutputExcel_10.setSheet("Item - barcodes V3");
		xlsxTool_tFileOutputExcel_10.setAppend(false,true);
		xlsxTool_tFileOutputExcel_10.setRecalculateFormula(false);
		xlsxTool_tFileOutputExcel_10.setXY(false,0,10,false);
		
		java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_10 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap.get("concurrentHashMap");
		java.lang.Object lockObj_tFileOutputExcel_10 = chm_tFileOutputExcel_10.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_10", k -> new Object());
		synchronized (lockObj_tFileOutputExcel_10) {
			
				xlsxTool_tFileOutputExcel_10.prepareXlsxFile(fileName_tFileOutputExcel_10);
			
		}
		
		xlsxTool_tFileOutputExcel_10.setFont("");
		
		if (xlsxTool_tFileOutputExcel_10.getStartRow() == 0){
		
		xlsxTool_tFileOutputExcel_10.addRow();
		
		xlsxTool_tFileOutputExcel_10.addCellValue("ITEMNUMBER");
		
		xlsxTool_tFileOutputExcel_10.addCellValue("PRODUCTCOLORID");
		
		xlsxTool_tFileOutputExcel_10.addCellValue("PRODUCTSIZEID");
		
		xlsxTool_tFileOutputExcel_10.addCellValue("PRODUCTSTYLEID");
		
		xlsxTool_tFileOutputExcel_10.addCellValue("PRODUCTQUANTITYUNITSYMBOL");
		
		xlsxTool_tFileOutputExcel_10.addCellValue("BARCODESETUPID");
		
		xlsxTool_tFileOutputExcel_10.addCellValue("BARCODE");
		
		xlsxTool_tFileOutputExcel_10.addCellValue("ISDEFAULTDISPLAYEDBARCODE");
		
		xlsxTool_tFileOutputExcel_10.addCellValue("ISDEFAULTPRINTEDBARCODE");
		
		xlsxTool_tFileOutputExcel_10.addCellValue("ISDEFAULTSCANNEDBARCODE");
		
		xlsxTool_tFileOutputExcel_10.addCellValue("PRODUCTDESCRIPTION");
		
		nb_line_tFileOutputExcel_10++; 
		
	}
		

 



/**
 * [tFileOutputExcel_10 begin ] stop
 */



	
	/**
	 * [tUniqRow_17 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_17", false);
		start_Hash.put("tUniqRow_17", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_17";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_barcode");
					}
				
		int tos_count_tUniqRow_17 = 0;
		

	
		class KeyStruct_tUniqRow_17 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String ITEMNUMBER;
					String PRODUCTCOLORID;
					String PRODUCTSIZEID;
					String PRODUCTSTYLEID;
					String PRODUCTQUANTITYUNITSYMBOL;
					String BARCODESETUPID;
					String BARCODE;
					String ISDEFAULTDISPLAYEDBARCODE;
					String ISDEFAULTPRINTEDBARCODE;
					String ISDEFAULTSCANNEDBARCODE;
					String PRODUCTDESCRIPTION;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.ITEMNUMBER == null) ? 0 : this.ITEMNUMBER.hashCode());
								
								result = prime * result + ((this.PRODUCTCOLORID == null) ? 0 : this.PRODUCTCOLORID.hashCode());
								
								result = prime * result + ((this.PRODUCTSIZEID == null) ? 0 : this.PRODUCTSIZEID.hashCode());
								
								result = prime * result + ((this.PRODUCTSTYLEID == null) ? 0 : this.PRODUCTSTYLEID.hashCode());
								
								result = prime * result + ((this.PRODUCTQUANTITYUNITSYMBOL == null) ? 0 : this.PRODUCTQUANTITYUNITSYMBOL.hashCode());
								
								result = prime * result + ((this.BARCODESETUPID == null) ? 0 : this.BARCODESETUPID.hashCode());
								
								result = prime * result + ((this.BARCODE == null) ? 0 : this.BARCODE.hashCode());
								
								result = prime * result + ((this.ISDEFAULTDISPLAYEDBARCODE == null) ? 0 : this.ISDEFAULTDISPLAYEDBARCODE.hashCode());
								
								result = prime * result + ((this.ISDEFAULTPRINTEDBARCODE == null) ? 0 : this.ISDEFAULTPRINTEDBARCODE.hashCode());
								
								result = prime * result + ((this.ISDEFAULTSCANNEDBARCODE == null) ? 0 : this.ISDEFAULTSCANNEDBARCODE.hashCode());
								
								result = prime * result + ((this.PRODUCTDESCRIPTION == null) ? 0 : this.PRODUCTDESCRIPTION.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_17 other = (KeyStruct_tUniqRow_17) obj;
				
									if (this.ITEMNUMBER == null) {
										if (other.ITEMNUMBER != null) 
											return false;
								
									} else if (!this.ITEMNUMBER.equals(other.ITEMNUMBER))
								 
										return false;
								
									if (this.PRODUCTCOLORID == null) {
										if (other.PRODUCTCOLORID != null) 
											return false;
								
									} else if (!this.PRODUCTCOLORID.equals(other.PRODUCTCOLORID))
								 
										return false;
								
									if (this.PRODUCTSIZEID == null) {
										if (other.PRODUCTSIZEID != null) 
											return false;
								
									} else if (!this.PRODUCTSIZEID.equals(other.PRODUCTSIZEID))
								 
										return false;
								
									if (this.PRODUCTSTYLEID == null) {
										if (other.PRODUCTSTYLEID != null) 
											return false;
								
									} else if (!this.PRODUCTSTYLEID.equals(other.PRODUCTSTYLEID))
								 
										return false;
								
									if (this.PRODUCTQUANTITYUNITSYMBOL == null) {
										if (other.PRODUCTQUANTITYUNITSYMBOL != null) 
											return false;
								
									} else if (!this.PRODUCTQUANTITYUNITSYMBOL.equals(other.PRODUCTQUANTITYUNITSYMBOL))
								 
										return false;
								
									if (this.BARCODESETUPID == null) {
										if (other.BARCODESETUPID != null) 
											return false;
								
									} else if (!this.BARCODESETUPID.equals(other.BARCODESETUPID))
								 
										return false;
								
									if (this.BARCODE == null) {
										if (other.BARCODE != null) 
											return false;
								
									} else if (!this.BARCODE.equals(other.BARCODE))
								 
										return false;
								
									if (this.ISDEFAULTDISPLAYEDBARCODE == null) {
										if (other.ISDEFAULTDISPLAYEDBARCODE != null) 
											return false;
								
									} else if (!this.ISDEFAULTDISPLAYEDBARCODE.equals(other.ISDEFAULTDISPLAYEDBARCODE))
								 
										return false;
								
									if (this.ISDEFAULTPRINTEDBARCODE == null) {
										if (other.ISDEFAULTPRINTEDBARCODE != null) 
											return false;
								
									} else if (!this.ISDEFAULTPRINTEDBARCODE.equals(other.ISDEFAULTPRINTEDBARCODE))
								 
										return false;
								
									if (this.ISDEFAULTSCANNEDBARCODE == null) {
										if (other.ISDEFAULTSCANNEDBARCODE != null) 
											return false;
								
									} else if (!this.ISDEFAULTSCANNEDBARCODE.equals(other.ISDEFAULTSCANNEDBARCODE))
								 
										return false;
								
									if (this.PRODUCTDESCRIPTION == null) {
										if (other.PRODUCTDESCRIPTION != null) 
											return false;
								
									} else if (!this.PRODUCTDESCRIPTION.equals(other.PRODUCTDESCRIPTION))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_17 = 0;
int nb_duplicates_tUniqRow_17 = 0;
KeyStruct_tUniqRow_17 finder_tUniqRow_17 = new KeyStruct_tUniqRow_17();
java.util.Set<KeyStruct_tUniqRow_17> keystUniqRow_17 = new java.util.HashSet<KeyStruct_tUniqRow_17>(); 

 



/**
 * [tUniqRow_17 begin ] stop
 */






	
	/**
	 * [tHashOutput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_9", false);
		start_Hash.put("tHashOutput_9", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_9";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row34");
					}
				
		int tos_count_tHashOutput_9 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_9=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row34Struct> tHashFile_tHashOutput_9 = null;
		String hashKey_tHashOutput_9 = "tHashFile_EXTRACT_FOR_DYNAMICS_" + pid + "_tHashOutput_9";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_9)){
			    if(mf_tHashOutput_9.getResourceMap().get(hashKey_tHashOutput_9) == null){
	      		    mf_tHashOutput_9.getResourceMap().put(hashKey_tHashOutput_9, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row34Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_9 = mf_tHashOutput_9.getResourceMap().get(hashKey_tHashOutput_9);
			    }else{
			    	tHashFile_tHashOutput_9 = mf_tHashOutput_9.getResourceMap().get(hashKey_tHashOutput_9);
			    }
			}
        int nb_line_tHashOutput_9 = 0;
 



/**
 * [tHashOutput_9 begin ] stop
 */



	
	/**
	 * [tUniqRow_18 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_18", false);
		start_Hash.put("tUniqRow_18", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_18";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product");
					}
				
		int tos_count_tUniqRow_18 = 0;
		

	
		class KeyStruct_tUniqRow_18 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String PRODUCTNUMBER;
					String ATTRIBUTETYPENAME;
					String ATTRIBUTENAME;
					String TEXTVALUE;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.PRODUCTNUMBER == null) ? 0 : this.PRODUCTNUMBER.hashCode());
								
								result = prime * result + ((this.ATTRIBUTETYPENAME == null) ? 0 : this.ATTRIBUTETYPENAME.hashCode());
								
								result = prime * result + ((this.ATTRIBUTENAME == null) ? 0 : this.ATTRIBUTENAME.hashCode());
								
								result = prime * result + ((this.TEXTVALUE == null) ? 0 : this.TEXTVALUE.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_18 other = (KeyStruct_tUniqRow_18) obj;
				
									if (this.PRODUCTNUMBER == null) {
										if (other.PRODUCTNUMBER != null) 
											return false;
								
									} else if (!this.PRODUCTNUMBER.equals(other.PRODUCTNUMBER))
								 
										return false;
								
									if (this.ATTRIBUTETYPENAME == null) {
										if (other.ATTRIBUTETYPENAME != null) 
											return false;
								
									} else if (!this.ATTRIBUTETYPENAME.equals(other.ATTRIBUTETYPENAME))
								 
										return false;
								
									if (this.ATTRIBUTENAME == null) {
										if (other.ATTRIBUTENAME != null) 
											return false;
								
									} else if (!this.ATTRIBUTENAME.equals(other.ATTRIBUTENAME))
								 
										return false;
								
									if (this.TEXTVALUE == null) {
										if (other.TEXTVALUE != null) 
											return false;
								
									} else if (!this.TEXTVALUE.equals(other.TEXTVALUE))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_18 = 0;
int nb_duplicates_tUniqRow_18 = 0;
KeyStruct_tUniqRow_18 finder_tUniqRow_18 = new KeyStruct_tUniqRow_18();
java.util.Set<KeyStruct_tUniqRow_18> keystUniqRow_18 = new java.util.HashSet<KeyStruct_tUniqRow_18>(); 

 



/**
 * [tUniqRow_18 begin ] stop
 */



	
	/**
	 * [tMap_20 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_20", false);
		start_Hash.put("tMap_20", System.currentTimeMillis());
		
	
	currentComponent="tMap_20";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_full_barcode");
					}
				
		int tos_count_tMap_20 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_20__Struct  {
}
Var__tMap_20__Struct Var__tMap_20 = new Var__tMap_20__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product_tmp = new copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct();
// ###############################

        
        



        









 



/**
 * [tMap_20 begin ] stop
 */



	
	/**
	 * [tMap_19 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_19", false);
		start_Hash.put("tMap_19", System.currentTimeMillis());
		
	
	currentComponent="tMap_19";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfsortie_released_product_variant");
					}
				
		int tos_count_tMap_19 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_19__Struct  {
}
Var__tMap_19__Struct Var__tMap_19 = new Var__tMap_19__Struct();
// ###############################

// ###############################
// # Outputs initialization
sortie_barcodeStruct sortie_barcode_tmp = new sortie_barcodeStruct();
sortie_full_barcodeStruct sortie_full_barcode_tmp = new sortie_full_barcodeStruct();
// ###############################

        
        



        









 



/**
 * [tMap_19 begin ] stop
 */





	
	/**
	 * [tFileOutputExcel_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_9", false);
		start_Hash.put("tFileOutputExcel_9", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_9";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row32");
					}
				
		int tos_count_tFileOutputExcel_9 = 0;
		


		int columnIndex_tFileOutputExcel_9 = 0;
		
		String fileName_tFileOutputExcel_9=context.ExtractPath + "K3 Fashion - Product status.xlsx";
		int nb_line_tFileOutputExcel_9 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_9 = new org.talend.ExcelTool();
		
		xlsxTool_tFileOutputExcel_9.setSheet("K3 Fashion - Product status");
		xlsxTool_tFileOutputExcel_9.setAppend(false,true);
		xlsxTool_tFileOutputExcel_9.setRecalculateFormula(false);
		xlsxTool_tFileOutputExcel_9.setXY(false,0,10,false);
		
		java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_9 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap.get("concurrentHashMap");
		java.lang.Object lockObj_tFileOutputExcel_9 = chm_tFileOutputExcel_9.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_9", k -> new Object());
		synchronized (lockObj_tFileOutputExcel_9) {
			
				xlsxTool_tFileOutputExcel_9.prepareXlsxFile(fileName_tFileOutputExcel_9);
			
		}
		
		xlsxTool_tFileOutputExcel_9.setFont("");
		
		if (xlsxTool_tFileOutputExcel_9.getStartRow() == 0){
		
		xlsxTool_tFileOutputExcel_9.addRow();
		
		xlsxTool_tFileOutputExcel_9.addCellValue("ITEMID");
		
		xlsxTool_tFileOutputExcel_9.addCellValue("INVENTSIZEID");
		
		xlsxTool_tFileOutputExcel_9.addCellValue("INVENTSTYLEID");
		
		xlsxTool_tFileOutputExcel_9.addCellValue("INVENTCOLORID");
		
		xlsxTool_tFileOutputExcel_9.addCellValue("PRODUCTSTATUSID");
		
		xlsxTool_tFileOutputExcel_9.addCellValue("SEASONCODE");
		
		nb_line_tFileOutputExcel_9++; 
		
	}
		

 



/**
 * [tFileOutputExcel_9 begin ] stop
 */



	
	/**
	 * [tUniqRow_16 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_16", false);
		start_Hash.put("tUniqRow_16", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_16";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_product_status");
					}
				
		int tos_count_tUniqRow_16 = 0;
		

	
		class KeyStruct_tUniqRow_16 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String ITEMID;
					String INVENTSIZEID;
					String INVENTCOLORID;
					String PRODUCTSTATUSID;
					String SEASONCODE;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.ITEMID == null) ? 0 : this.ITEMID.hashCode());
								
								result = prime * result + ((this.INVENTSIZEID == null) ? 0 : this.INVENTSIZEID.hashCode());
								
								result = prime * result + ((this.INVENTCOLORID == null) ? 0 : this.INVENTCOLORID.hashCode());
								
								result = prime * result + ((this.PRODUCTSTATUSID == null) ? 0 : this.PRODUCTSTATUSID.hashCode());
								
								result = prime * result + ((this.SEASONCODE == null) ? 0 : this.SEASONCODE.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_16 other = (KeyStruct_tUniqRow_16) obj;
				
									if (this.ITEMID == null) {
										if (other.ITEMID != null) 
											return false;
								
									} else if (!this.ITEMID.equals(other.ITEMID))
								 
										return false;
								
									if (this.INVENTSIZEID == null) {
										if (other.INVENTSIZEID != null) 
											return false;
								
									} else if (!this.INVENTSIZEID.equals(other.INVENTSIZEID))
								 
										return false;
								
									if (this.INVENTCOLORID == null) {
										if (other.INVENTCOLORID != null) 
											return false;
								
									} else if (!this.INVENTCOLORID.equals(other.INVENTCOLORID))
								 
										return false;
								
									if (this.PRODUCTSTATUSID == null) {
										if (other.PRODUCTSTATUSID != null) 
											return false;
								
									} else if (!this.PRODUCTSTATUSID.equals(other.PRODUCTSTATUSID))
								 
										return false;
								
									if (this.SEASONCODE == null) {
										if (other.SEASONCODE != null) 
											return false;
								
									} else if (!this.SEASONCODE.equals(other.SEASONCODE))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_16 = 0;
int nb_duplicates_tUniqRow_16 = 0;
KeyStruct_tUniqRow_16 finder_tUniqRow_16 = new KeyStruct_tUniqRow_16();
java.util.Set<KeyStruct_tUniqRow_16> keystUniqRow_16 = new java.util.HashSet<KeyStruct_tUniqRow_16>(); 

 



/**
 * [tUniqRow_16 begin ] stop
 */



	
	/**
	 * [tMap_18 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_18", false);
		start_Hash.put("tMap_18", System.currentTimeMillis());
		
	
	currentComponent="tMap_18";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_full_varian");
					}
				
		int tos_count_tMap_18 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_18__Struct  {
}
Var__tMap_18__Struct Var__tMap_18 = new Var__tMap_18__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfsortie_released_product_variantStruct copyOfsortie_released_product_variant_tmp = new copyOfsortie_released_product_variantStruct();
sortie_product_statusStruct sortie_product_status_tmp = new sortie_product_statusStruct();
// ###############################

        
        



        









 



/**
 * [tMap_18 begin ] stop
 */



	
	/**
	 * [tMap_17 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_17", false);
		start_Hash.put("tMap_17", System.currentTimeMillis());
		
	
	currentComponent="tMap_17";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_full_product_variant");
					}
				
		int tos_count_tMap_17 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_17__Struct  {
}
Var__tMap_17__Struct Var__tMap_17 = new Var__tMap_17__Struct();
// ###############################

// ###############################
// # Outputs initialization
sortie_released_product_variantStruct sortie_released_product_variant_tmp = new sortie_released_product_variantStruct();
sortie_full_varianStruct sortie_full_varian_tmp = new sortie_full_varianStruct();
// ###############################

        
        



        









 



/**
 * [tMap_17 begin ] stop
 */





	
	/**
	 * [tFileOutputExcel_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_7", false);
		start_Hash.put("tFileOutputExcel_7", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_7";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row30");
					}
				
		int tos_count_tFileOutputExcel_7 = 0;
		


		int columnIndex_tFileOutputExcel_7 = 0;
		
		String fileName_tFileOutputExcel_7=context.ExtractPath + "Product variants V2.xlsx";
		int nb_line_tFileOutputExcel_7 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_7 = new org.talend.ExcelTool();
		
		xlsxTool_tFileOutputExcel_7.setSheet("Product variants V2");
		xlsxTool_tFileOutputExcel_7.setAppend(false,true);
		xlsxTool_tFileOutputExcel_7.setRecalculateFormula(false);
		xlsxTool_tFileOutputExcel_7.setXY(false,0,10,false);
		
		java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_7 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap.get("concurrentHashMap");
		java.lang.Object lockObj_tFileOutputExcel_7 = chm_tFileOutputExcel_7.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_7", k -> new Object());
		synchronized (lockObj_tFileOutputExcel_7) {
			
				xlsxTool_tFileOutputExcel_7.prepareXlsxFile(fileName_tFileOutputExcel_7);
			
		}
		
		xlsxTool_tFileOutputExcel_7.setFont("");
		
		if (xlsxTool_tFileOutputExcel_7.getStartRow() == 0){
		
		xlsxTool_tFileOutputExcel_7.addRow();
		
		xlsxTool_tFileOutputExcel_7.addCellValue("PRODUCTMASTERNUMBER");
		
		xlsxTool_tFileOutputExcel_7.addCellValue("PRODUCTCOLORID");
		
		xlsxTool_tFileOutputExcel_7.addCellValue("PRODUCTSIZEID");
		
		xlsxTool_tFileOutputExcel_7.addCellValue("PRODUCTSTYLEID");
		
		xlsxTool_tFileOutputExcel_7.addCellValue("PRODUCTNAME");
		
		xlsxTool_tFileOutputExcel_7.addCellValue("PRODUCTSEARCHNAME");
		
		xlsxTool_tFileOutputExcel_7.addCellValue("PRODUCTVARIANTNUMBER");
		
		nb_line_tFileOutputExcel_7++; 
		
	}
		

 



/**
 * [tFileOutputExcel_7 begin ] stop
 */



	
	/**
	 * [tUniqRow_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_14", false);
		start_Hash.put("tUniqRow_14", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_14";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_product_variant");
					}
				
		int tos_count_tUniqRow_14 = 0;
		

	
		class KeyStruct_tUniqRow_14 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String PRODUCTMASTERNUMBER;
					String PRODUCTCOLORID;
					String PRODUCTSIZEID;
					String PRODUCTSTYLEID;
					String PRODUCTNAME;
					String PRODUCTSEARCHNAME;
					String PRODUCTVARIANTNUMBER;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.PRODUCTMASTERNUMBER == null) ? 0 : this.PRODUCTMASTERNUMBER.hashCode());
								
								result = prime * result + ((this.PRODUCTCOLORID == null) ? 0 : this.PRODUCTCOLORID.hashCode());
								
								result = prime * result + ((this.PRODUCTSIZEID == null) ? 0 : this.PRODUCTSIZEID.hashCode());
								
								result = prime * result + ((this.PRODUCTSTYLEID == null) ? 0 : this.PRODUCTSTYLEID.hashCode());
								
								result = prime * result + ((this.PRODUCTNAME == null) ? 0 : this.PRODUCTNAME.hashCode());
								
								result = prime * result + ((this.PRODUCTSEARCHNAME == null) ? 0 : this.PRODUCTSEARCHNAME.hashCode());
								
								result = prime * result + ((this.PRODUCTVARIANTNUMBER == null) ? 0 : this.PRODUCTVARIANTNUMBER.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_14 other = (KeyStruct_tUniqRow_14) obj;
				
									if (this.PRODUCTMASTERNUMBER == null) {
										if (other.PRODUCTMASTERNUMBER != null) 
											return false;
								
									} else if (!this.PRODUCTMASTERNUMBER.equals(other.PRODUCTMASTERNUMBER))
								 
										return false;
								
									if (this.PRODUCTCOLORID == null) {
										if (other.PRODUCTCOLORID != null) 
											return false;
								
									} else if (!this.PRODUCTCOLORID.equals(other.PRODUCTCOLORID))
								 
										return false;
								
									if (this.PRODUCTSIZEID == null) {
										if (other.PRODUCTSIZEID != null) 
											return false;
								
									} else if (!this.PRODUCTSIZEID.equals(other.PRODUCTSIZEID))
								 
										return false;
								
									if (this.PRODUCTSTYLEID == null) {
										if (other.PRODUCTSTYLEID != null) 
											return false;
								
									} else if (!this.PRODUCTSTYLEID.equals(other.PRODUCTSTYLEID))
								 
										return false;
								
									if (this.PRODUCTNAME == null) {
										if (other.PRODUCTNAME != null) 
											return false;
								
									} else if (!this.PRODUCTNAME.equals(other.PRODUCTNAME))
								 
										return false;
								
									if (this.PRODUCTSEARCHNAME == null) {
										if (other.PRODUCTSEARCHNAME != null) 
											return false;
								
									} else if (!this.PRODUCTSEARCHNAME.equals(other.PRODUCTSEARCHNAME))
								 
										return false;
								
									if (this.PRODUCTVARIANTNUMBER == null) {
										if (other.PRODUCTVARIANTNUMBER != null) 
											return false;
								
									} else if (!this.PRODUCTVARIANTNUMBER.equals(other.PRODUCTVARIANTNUMBER))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_14 = 0;
int nb_duplicates_tUniqRow_14 = 0;
KeyStruct_tUniqRow_14 finder_tUniqRow_14 = new KeyStruct_tUniqRow_14();
java.util.Set<KeyStruct_tUniqRow_14> keystUniqRow_14 = new java.util.HashSet<KeyStruct_tUniqRow_14>(); 

 



/**
 * [tUniqRow_14 begin ] stop
 */



	
	/**
	 * [tMap_16 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_16", false);
		start_Hash.put("tMap_16", System.currentTimeMillis());
		
	
	currentComponent="tMap_16";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_full_fits");
					}
				
		int tos_count_tMap_16 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_16__Struct  {
}
Var__tMap_16__Struct Var__tMap_16 = new Var__tMap_16__Struct();
// ###############################

// ###############################
// # Outputs initialization
sortie_full_product_variantStruct sortie_full_product_variant_tmp = new sortie_full_product_variantStruct();
sortie_product_variantStruct sortie_product_variant_tmp = new sortie_product_variantStruct();
// ###############################

        
        



        









 



/**
 * [tMap_16 begin ] stop
 */





	
	/**
	 * [tFileOutputExcel_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_6", false);
		start_Hash.put("tFileOutputExcel_6", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_6";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row29");
					}
				
		int tos_count_tFileOutputExcel_6 = 0;
		


		int columnIndex_tFileOutputExcel_6 = 0;
		
		String fileName_tFileOutputExcel_6=context.ExtractPath + "Product master fits.xlsx";
		int nb_line_tFileOutputExcel_6 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_6 = new org.talend.ExcelTool();
		
		xlsxTool_tFileOutputExcel_6.setSheet("Product master fits");
		xlsxTool_tFileOutputExcel_6.setAppend(false,true);
		xlsxTool_tFileOutputExcel_6.setRecalculateFormula(false);
		xlsxTool_tFileOutputExcel_6.setXY(false,0,10,false);
		
		java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_6 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap.get("concurrentHashMap");
		java.lang.Object lockObj_tFileOutputExcel_6 = chm_tFileOutputExcel_6.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_6", k -> new Object());
		synchronized (lockObj_tFileOutputExcel_6) {
			
				xlsxTool_tFileOutputExcel_6.prepareXlsxFile(fileName_tFileOutputExcel_6);
			
		}
		
		xlsxTool_tFileOutputExcel_6.setFont("");
		
		if (xlsxTool_tFileOutputExcel_6.getStartRow() == 0){
		
		xlsxTool_tFileOutputExcel_6.addRow();
		
		xlsxTool_tFileOutputExcel_6.addCellValue("PRODUCTMASTERNUMBER");
		
		xlsxTool_tFileOutputExcel_6.addCellValue("PRODUCTSTYLEID");
		
		nb_line_tFileOutputExcel_6++; 
		
	}
		

 



/**
 * [tFileOutputExcel_6 begin ] stop
 */



	
	/**
	 * [tUniqRow_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_13", false);
		start_Hash.put("tUniqRow_13", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_13";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_fits");
					}
				
		int tos_count_tUniqRow_13 = 0;
		

	
		class KeyStruct_tUniqRow_13 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String PRODUCTMASTERNUMBER;
					String PRODUCTSTYLEID;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.PRODUCTMASTERNUMBER == null) ? 0 : this.PRODUCTMASTERNUMBER.hashCode());
								
								result = prime * result + ((this.PRODUCTSTYLEID == null) ? 0 : this.PRODUCTSTYLEID.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_13 other = (KeyStruct_tUniqRow_13) obj;
				
									if (this.PRODUCTMASTERNUMBER == null) {
										if (other.PRODUCTMASTERNUMBER != null) 
											return false;
								
									} else if (!this.PRODUCTMASTERNUMBER.equals(other.PRODUCTMASTERNUMBER))
								 
										return false;
								
									if (this.PRODUCTSTYLEID == null) {
										if (other.PRODUCTSTYLEID != null) 
											return false;
								
									} else if (!this.PRODUCTSTYLEID.equals(other.PRODUCTSTYLEID))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_13 = 0;
int nb_duplicates_tUniqRow_13 = 0;
KeyStruct_tUniqRow_13 finder_tUniqRow_13 = new KeyStruct_tUniqRow_13();
java.util.Set<KeyStruct_tUniqRow_13> keystUniqRow_13 = new java.util.HashSet<KeyStruct_tUniqRow_13>(); 

 



/**
 * [tUniqRow_13 begin ] stop
 */



	
	/**
	 * [tMap_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_15", false);
		start_Hash.put("tMap_15", System.currentTimeMillis());
		
	
	currentComponent="tMap_15";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_full_size");
					}
				
		int tos_count_tMap_15 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_15__Struct  {
}
Var__tMap_15__Struct Var__tMap_15 = new Var__tMap_15__Struct();
// ###############################

// ###############################
// # Outputs initialization
sortie_full_fitsStruct sortie_full_fits_tmp = new sortie_full_fitsStruct();
sortie_fitsStruct sortie_fits_tmp = new sortie_fitsStruct();
// ###############################

        
        



        









 



/**
 * [tMap_15 begin ] stop
 */





	
	/**
	 * [tFileOutputExcel_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_5", false);
		start_Hash.put("tFileOutputExcel_5", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row28");
					}
				
		int tos_count_tFileOutputExcel_5 = 0;
		


		int columnIndex_tFileOutputExcel_5 = 0;
		
		String fileName_tFileOutputExcel_5=context.ExtractPath + "Product master sizes.xlsx";
		int nb_line_tFileOutputExcel_5 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_5 = new org.talend.ExcelTool();
		
		xlsxTool_tFileOutputExcel_5.setSheet("Product master sizes");
		xlsxTool_tFileOutputExcel_5.setAppend(false,true);
		xlsxTool_tFileOutputExcel_5.setRecalculateFormula(false);
		xlsxTool_tFileOutputExcel_5.setXY(false,0,10,false);
		
		java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_5 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap.get("concurrentHashMap");
		java.lang.Object lockObj_tFileOutputExcel_5 = chm_tFileOutputExcel_5.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_5", k -> new Object());
		synchronized (lockObj_tFileOutputExcel_5) {
			
				xlsxTool_tFileOutputExcel_5.prepareXlsxFile(fileName_tFileOutputExcel_5);
			
		}
		
		xlsxTool_tFileOutputExcel_5.setFont("");
		
		if (xlsxTool_tFileOutputExcel_5.getStartRow() == 0){
		
		xlsxTool_tFileOutputExcel_5.addRow();
		
		xlsxTool_tFileOutputExcel_5.addCellValue("PRODUCTMASTERNUMBER");
		
		xlsxTool_tFileOutputExcel_5.addCellValue("PRODUCTSIZEID");
		
		nb_line_tFileOutputExcel_5++; 
		
	}
		

 



/**
 * [tFileOutputExcel_5 begin ] stop
 */



	
	/**
	 * [tUniqRow_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_12", false);
		start_Hash.put("tUniqRow_12", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_12";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_size");
					}
				
		int tos_count_tUniqRow_12 = 0;
		

	
		class KeyStruct_tUniqRow_12 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String PRODUCTMASTERNUMBER;
					String PRODUCTSIZEID;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.PRODUCTMASTERNUMBER == null) ? 0 : this.PRODUCTMASTERNUMBER.hashCode());
								
								result = prime * result + ((this.PRODUCTSIZEID == null) ? 0 : this.PRODUCTSIZEID.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_12 other = (KeyStruct_tUniqRow_12) obj;
				
									if (this.PRODUCTMASTERNUMBER == null) {
										if (other.PRODUCTMASTERNUMBER != null) 
											return false;
								
									} else if (!this.PRODUCTMASTERNUMBER.equals(other.PRODUCTMASTERNUMBER))
								 
										return false;
								
									if (this.PRODUCTSIZEID == null) {
										if (other.PRODUCTSIZEID != null) 
											return false;
								
									} else if (!this.PRODUCTSIZEID.equals(other.PRODUCTSIZEID))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_12 = 0;
int nb_duplicates_tUniqRow_12 = 0;
KeyStruct_tUniqRow_12 finder_tUniqRow_12 = new KeyStruct_tUniqRow_12();
java.util.Set<KeyStruct_tUniqRow_12> keystUniqRow_12 = new java.util.HashSet<KeyStruct_tUniqRow_12>(); 

 



/**
 * [tUniqRow_12 begin ] stop
 */



	
	/**
	 * [tMap_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_14", false);
		start_Hash.put("tMap_14", System.currentTimeMillis());
		
	
	currentComponent="tMap_14";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_full_");
					}
				
		int tos_count_tMap_14 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_14__Struct  {
}
Var__tMap_14__Struct Var__tMap_14 = new Var__tMap_14__Struct();
// ###############################

// ###############################
// # Outputs initialization
sortie_full_sizeStruct sortie_full_size_tmp = new sortie_full_sizeStruct();
sortie_sizeStruct sortie_size_tmp = new sortie_sizeStruct();
// ###############################

        
        



        









 



/**
 * [tMap_14 begin ] stop
 */





	
	/**
	 * [tFileOutputExcel_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_4", false);
		start_Hash.put("tFileOutputExcel_4", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row27");
					}
				
		int tos_count_tFileOutputExcel_4 = 0;
		


		int columnIndex_tFileOutputExcel_4 = 0;
		
		String fileName_tFileOutputExcel_4=context.ExtractPath + "Product master colors.xlsx";
		int nb_line_tFileOutputExcel_4 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_4 = new org.talend.ExcelTool();
		
		xlsxTool_tFileOutputExcel_4.setSheet("Product master colors");
		xlsxTool_tFileOutputExcel_4.setAppend(false,true);
		xlsxTool_tFileOutputExcel_4.setRecalculateFormula(false);
		xlsxTool_tFileOutputExcel_4.setXY(false,0,10,false);
		
		java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_4 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap.get("concurrentHashMap");
		java.lang.Object lockObj_tFileOutputExcel_4 = chm_tFileOutputExcel_4.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_4", k -> new Object());
		synchronized (lockObj_tFileOutputExcel_4) {
			
				xlsxTool_tFileOutputExcel_4.prepareXlsxFile(fileName_tFileOutputExcel_4);
			
		}
		
		xlsxTool_tFileOutputExcel_4.setFont("");
		
		if (xlsxTool_tFileOutputExcel_4.getStartRow() == 0){
		
		xlsxTool_tFileOutputExcel_4.addRow();
		
		xlsxTool_tFileOutputExcel_4.addCellValue("PRODUCTMASTERNUMBER");
		
		xlsxTool_tFileOutputExcel_4.addCellValue("PRODUCTCOLORID");
		
		nb_line_tFileOutputExcel_4++; 
		
	}
		

 



/**
 * [tFileOutputExcel_4 begin ] stop
 */



	
	/**
	 * [tUniqRow_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_11", false);
		start_Hash.put("tUniqRow_11", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_11";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_color");
					}
				
		int tos_count_tUniqRow_11 = 0;
		

	
		class KeyStruct_tUniqRow_11 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String PRODUCTMASTERNUMBER;
					String PRODUCTCOLORID;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.PRODUCTMASTERNUMBER == null) ? 0 : this.PRODUCTMASTERNUMBER.hashCode());
								
								result = prime * result + ((this.PRODUCTCOLORID == null) ? 0 : this.PRODUCTCOLORID.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_11 other = (KeyStruct_tUniqRow_11) obj;
				
									if (this.PRODUCTMASTERNUMBER == null) {
										if (other.PRODUCTMASTERNUMBER != null) 
											return false;
								
									} else if (!this.PRODUCTMASTERNUMBER.equals(other.PRODUCTMASTERNUMBER))
								 
										return false;
								
									if (this.PRODUCTCOLORID == null) {
										if (other.PRODUCTCOLORID != null) 
											return false;
								
									} else if (!this.PRODUCTCOLORID.equals(other.PRODUCTCOLORID))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_11 = 0;
int nb_duplicates_tUniqRow_11 = 0;
KeyStruct_tUniqRow_11 finder_tUniqRow_11 = new KeyStruct_tUniqRow_11();
java.util.Set<KeyStruct_tUniqRow_11> keystUniqRow_11 = new java.util.HashSet<KeyStruct_tUniqRow_11>(); 

 



/**
 * [tUniqRow_11 begin ] stop
 */



	
	/**
	 * [tMap_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_13", false);
		start_Hash.put("tMap_13", System.currentTimeMillis());
		
	
	currentComponent="tMap_13";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full");
					}
				
		int tos_count_tMap_13 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_13__Struct  {
}
Var__tMap_13__Struct Var__tMap_13 = new Var__tMap_13__Struct();
// ###############################

// ###############################
// # Outputs initialization
sortie_full_Struct sortie_full__tmp = new sortie_full_Struct();
sortie_colorStruct sortie_color_tmp = new sortie_colorStruct();
// ###############################

        
        



        









 



/**
 * [tMap_13 begin ] stop
 */





	
	/**
	 * [tHashOutput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_8", false);
		start_Hash.put("tHashOutput_8", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_8";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row25");
					}
				
		int tos_count_tHashOutput_8 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_8=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row25Struct> tHashFile_tHashOutput_8 = null;
		String hashKey_tHashOutput_8 = "tHashFile_EXTRACT_FOR_DYNAMICS_" + pid + "_tHashOutput_8";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_8)){
			    if(mf_tHashOutput_8.getResourceMap().get(hashKey_tHashOutput_8) == null){
	      		    mf_tHashOutput_8.getResourceMap().put(hashKey_tHashOutput_8, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row25Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_8 = mf_tHashOutput_8.getResourceMap().get(hashKey_tHashOutput_8);
			    }else{
			    	tHashFile_tHashOutput_8 = mf_tHashOutput_8.getResourceMap().get(hashKey_tHashOutput_8);
			    }
			}
        int nb_line_tHashOutput_8 = 0;
 



/**
 * [tHashOutput_8 begin ] stop
 */



	
	/**
	 * [tUniqRow_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_10", false);
		start_Hash.put("tUniqRow_10", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_10";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product");
					}
				
		int tos_count_tUniqRow_10 = 0;
		

	
		class KeyStruct_tUniqRow_10 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String PRODUCTNUMBER;
					String ATTRIBUTETYPENAME;
					String ATTRIBUTENAME;
					String TEXTVALUE;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.PRODUCTNUMBER == null) ? 0 : this.PRODUCTNUMBER.hashCode());
								
								result = prime * result + ((this.ATTRIBUTETYPENAME == null) ? 0 : this.ATTRIBUTETYPENAME.hashCode());
								
								result = prime * result + ((this.ATTRIBUTENAME == null) ? 0 : this.ATTRIBUTENAME.hashCode());
								
								result = prime * result + ((this.TEXTVALUE == null) ? 0 : this.TEXTVALUE.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_10 other = (KeyStruct_tUniqRow_10) obj;
				
									if (this.PRODUCTNUMBER == null) {
										if (other.PRODUCTNUMBER != null) 
											return false;
								
									} else if (!this.PRODUCTNUMBER.equals(other.PRODUCTNUMBER))
								 
										return false;
								
									if (this.ATTRIBUTETYPENAME == null) {
										if (other.ATTRIBUTETYPENAME != null) 
											return false;
								
									} else if (!this.ATTRIBUTETYPENAME.equals(other.ATTRIBUTETYPENAME))
								 
										return false;
								
									if (this.ATTRIBUTENAME == null) {
										if (other.ATTRIBUTENAME != null) 
											return false;
								
									} else if (!this.ATTRIBUTENAME.equals(other.ATTRIBUTENAME))
								 
										return false;
								
									if (this.TEXTVALUE == null) {
										if (other.TEXTVALUE != null) 
											return false;
								
									} else if (!this.TEXTVALUE.equals(other.TEXTVALUE))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_10 = 0;
int nb_duplicates_tUniqRow_10 = 0;
KeyStruct_tUniqRow_10 finder_tUniqRow_10 = new KeyStruct_tUniqRow_10();
java.util.Set<KeyStruct_tUniqRow_10> keystUniqRow_10 = new java.util.HashSet<KeyStruct_tUniqRow_10>(); 

 



/**
 * [tUniqRow_10 begin ] stop
 */



	
	/**
	 * [tMap_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_12", false);
		start_Hash.put("tMap_12", System.currentTimeMillis());
		
	
	currentComponent="tMap_12";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full");
					}
				
		int tos_count_tMap_12 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_12__Struct  {
}
Var__tMap_12__Struct Var__tMap_12 = new Var__tMap_12__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_fullStruct copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp = new copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_fullStruct();
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product_tmp = new copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct();
// ###############################

        
        



        









 



/**
 * [tMap_12 begin ] stop
 */





	
	/**
	 * [tHashOutput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_7", false);
		start_Hash.put("tHashOutput_7", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_7";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row22");
					}
				
		int tos_count_tHashOutput_7 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_7=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row22Struct> tHashFile_tHashOutput_7 = null;
		String hashKey_tHashOutput_7 = "tHashFile_EXTRACT_FOR_DYNAMICS_" + pid + "_tHashOutput_7";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_7)){
			    if(mf_tHashOutput_7.getResourceMap().get(hashKey_tHashOutput_7) == null){
	      		    mf_tHashOutput_7.getResourceMap().put(hashKey_tHashOutput_7, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row22Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_7 = mf_tHashOutput_7.getResourceMap().get(hashKey_tHashOutput_7);
			    }else{
			    	tHashFile_tHashOutput_7 = mf_tHashOutput_7.getResourceMap().get(hashKey_tHashOutput_7);
			    }
			}
        int nb_line_tHashOutput_7 = 0;
 



/**
 * [tHashOutput_7 begin ] stop
 */



	
	/**
	 * [tUniqRow_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_9", false);
		start_Hash.put("tUniqRow_9", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_9";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product");
					}
				
		int tos_count_tUniqRow_9 = 0;
		

	
		class KeyStruct_tUniqRow_9 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String PRODUCTNUMBER;
					String ATTRIBUTETYPENAME;
					String ATTRIBUTENAME;
					String TEXTVALUE;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.PRODUCTNUMBER == null) ? 0 : this.PRODUCTNUMBER.hashCode());
								
								result = prime * result + ((this.ATTRIBUTETYPENAME == null) ? 0 : this.ATTRIBUTETYPENAME.hashCode());
								
								result = prime * result + ((this.ATTRIBUTENAME == null) ? 0 : this.ATTRIBUTENAME.hashCode());
								
								result = prime * result + ((this.TEXTVALUE == null) ? 0 : this.TEXTVALUE.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_9 other = (KeyStruct_tUniqRow_9) obj;
				
									if (this.PRODUCTNUMBER == null) {
										if (other.PRODUCTNUMBER != null) 
											return false;
								
									} else if (!this.PRODUCTNUMBER.equals(other.PRODUCTNUMBER))
								 
										return false;
								
									if (this.ATTRIBUTETYPENAME == null) {
										if (other.ATTRIBUTETYPENAME != null) 
											return false;
								
									} else if (!this.ATTRIBUTETYPENAME.equals(other.ATTRIBUTETYPENAME))
								 
										return false;
								
									if (this.ATTRIBUTENAME == null) {
										if (other.ATTRIBUTENAME != null) 
											return false;
								
									} else if (!this.ATTRIBUTENAME.equals(other.ATTRIBUTENAME))
								 
										return false;
								
									if (this.TEXTVALUE == null) {
										if (other.TEXTVALUE != null) 
											return false;
								
									} else if (!this.TEXTVALUE.equals(other.TEXTVALUE))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_9 = 0;
int nb_duplicates_tUniqRow_9 = 0;
KeyStruct_tUniqRow_9 finder_tUniqRow_9 = new KeyStruct_tUniqRow_9();
java.util.Set<KeyStruct_tUniqRow_9> keystUniqRow_9 = new java.util.HashSet<KeyStruct_tUniqRow_9>(); 

 



/**
 * [tUniqRow_9 begin ] stop
 */



	
	/**
	 * [tMap_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_11", false);
		start_Hash.put("tMap_11", System.currentTimeMillis());
		
	
	currentComponent="tMap_11";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full");
					}
				
		int tos_count_tMap_11 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_11__Struct  {
}
Var__tMap_11__Struct Var__tMap_11 = new Var__tMap_11__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_fullStruct copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp = new copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_fullStruct();
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product_tmp = new copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct();
// ###############################

        
        



        









 



/**
 * [tMap_11 begin ] stop
 */





	
	/**
	 * [tHashOutput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_6", false);
		start_Hash.put("tHashOutput_6", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_6";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row20");
					}
				
		int tos_count_tHashOutput_6 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_6=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row20Struct> tHashFile_tHashOutput_6 = null;
		String hashKey_tHashOutput_6 = "tHashFile_EXTRACT_FOR_DYNAMICS_" + pid + "_tHashOutput_6";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_6)){
			    if(mf_tHashOutput_6.getResourceMap().get(hashKey_tHashOutput_6) == null){
	      		    mf_tHashOutput_6.getResourceMap().put(hashKey_tHashOutput_6, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row20Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_6 = mf_tHashOutput_6.getResourceMap().get(hashKey_tHashOutput_6);
			    }else{
			    	tHashFile_tHashOutput_6 = mf_tHashOutput_6.getResourceMap().get(hashKey_tHashOutput_6);
			    }
			}
        int nb_line_tHashOutput_6 = 0;
 



/**
 * [tHashOutput_6 begin ] stop
 */



	
	/**
	 * [tUniqRow_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_8", false);
		start_Hash.put("tUniqRow_8", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_8";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product");
					}
				
		int tos_count_tUniqRow_8 = 0;
		

	
		class KeyStruct_tUniqRow_8 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String PRODUCTNUMBER;
					String ATTRIBUTETYPENAME;
					String ATTRIBUTENAME;
					String TEXTVALUE;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.PRODUCTNUMBER == null) ? 0 : this.PRODUCTNUMBER.hashCode());
								
								result = prime * result + ((this.ATTRIBUTETYPENAME == null) ? 0 : this.ATTRIBUTETYPENAME.hashCode());
								
								result = prime * result + ((this.ATTRIBUTENAME == null) ? 0 : this.ATTRIBUTENAME.hashCode());
								
								result = prime * result + ((this.TEXTVALUE == null) ? 0 : this.TEXTVALUE.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_8 other = (KeyStruct_tUniqRow_8) obj;
				
									if (this.PRODUCTNUMBER == null) {
										if (other.PRODUCTNUMBER != null) 
											return false;
								
									} else if (!this.PRODUCTNUMBER.equals(other.PRODUCTNUMBER))
								 
										return false;
								
									if (this.ATTRIBUTETYPENAME == null) {
										if (other.ATTRIBUTETYPENAME != null) 
											return false;
								
									} else if (!this.ATTRIBUTETYPENAME.equals(other.ATTRIBUTETYPENAME))
								 
										return false;
								
									if (this.ATTRIBUTENAME == null) {
										if (other.ATTRIBUTENAME != null) 
											return false;
								
									} else if (!this.ATTRIBUTENAME.equals(other.ATTRIBUTENAME))
								 
										return false;
								
									if (this.TEXTVALUE == null) {
										if (other.TEXTVALUE != null) 
											return false;
								
									} else if (!this.TEXTVALUE.equals(other.TEXTVALUE))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_8 = 0;
int nb_duplicates_tUniqRow_8 = 0;
KeyStruct_tUniqRow_8 finder_tUniqRow_8 = new KeyStruct_tUniqRow_8();
java.util.Set<KeyStruct_tUniqRow_8> keystUniqRow_8 = new java.util.HashSet<KeyStruct_tUniqRow_8>(); 

 



/**
 * [tUniqRow_8 begin ] stop
 */



	
	/**
	 * [tMap_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_10", false);
		start_Hash.put("tMap_10", System.currentTimeMillis());
		
	
	currentComponent="tMap_10";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full");
					}
				
		int tos_count_tMap_10 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_10__Struct  {
}
Var__tMap_10__Struct Var__tMap_10 = new Var__tMap_10__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_fullStruct copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp = new copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_fullStruct();
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product_tmp = new copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct();
// ###############################

        
        



        









 



/**
 * [tMap_10 begin ] stop
 */





	
	/**
	 * [tHashOutput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_5", false);
		start_Hash.put("tHashOutput_5", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row18");
					}
				
		int tos_count_tHashOutput_5 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_5=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row18Struct> tHashFile_tHashOutput_5 = null;
		String hashKey_tHashOutput_5 = "tHashFile_EXTRACT_FOR_DYNAMICS_" + pid + "_tHashOutput_5";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_5)){
			    if(mf_tHashOutput_5.getResourceMap().get(hashKey_tHashOutput_5) == null){
	      		    mf_tHashOutput_5.getResourceMap().put(hashKey_tHashOutput_5, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row18Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_5 = mf_tHashOutput_5.getResourceMap().get(hashKey_tHashOutput_5);
			    }else{
			    	tHashFile_tHashOutput_5 = mf_tHashOutput_5.getResourceMap().get(hashKey_tHashOutput_5);
			    }
			}
        int nb_line_tHashOutput_5 = 0;
 



/**
 * [tHashOutput_5 begin ] stop
 */



	
	/**
	 * [tUniqRow_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_7", false);
		start_Hash.put("tUniqRow_7", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_7";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product");
					}
				
		int tos_count_tUniqRow_7 = 0;
		

	
		class KeyStruct_tUniqRow_7 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String PRODUCTNUMBER;
					String ATTRIBUTETYPENAME;
					String ATTRIBUTENAME;
					String TEXTVALUE;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.PRODUCTNUMBER == null) ? 0 : this.PRODUCTNUMBER.hashCode());
								
								result = prime * result + ((this.ATTRIBUTETYPENAME == null) ? 0 : this.ATTRIBUTETYPENAME.hashCode());
								
								result = prime * result + ((this.ATTRIBUTENAME == null) ? 0 : this.ATTRIBUTENAME.hashCode());
								
								result = prime * result + ((this.TEXTVALUE == null) ? 0 : this.TEXTVALUE.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_7 other = (KeyStruct_tUniqRow_7) obj;
				
									if (this.PRODUCTNUMBER == null) {
										if (other.PRODUCTNUMBER != null) 
											return false;
								
									} else if (!this.PRODUCTNUMBER.equals(other.PRODUCTNUMBER))
								 
										return false;
								
									if (this.ATTRIBUTETYPENAME == null) {
										if (other.ATTRIBUTETYPENAME != null) 
											return false;
								
									} else if (!this.ATTRIBUTETYPENAME.equals(other.ATTRIBUTETYPENAME))
								 
										return false;
								
									if (this.ATTRIBUTENAME == null) {
										if (other.ATTRIBUTENAME != null) 
											return false;
								
									} else if (!this.ATTRIBUTENAME.equals(other.ATTRIBUTENAME))
								 
										return false;
								
									if (this.TEXTVALUE == null) {
										if (other.TEXTVALUE != null) 
											return false;
								
									} else if (!this.TEXTVALUE.equals(other.TEXTVALUE))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_7 = 0;
int nb_duplicates_tUniqRow_7 = 0;
KeyStruct_tUniqRow_7 finder_tUniqRow_7 = new KeyStruct_tUniqRow_7();
java.util.Set<KeyStruct_tUniqRow_7> keystUniqRow_7 = new java.util.HashSet<KeyStruct_tUniqRow_7>(); 

 



/**
 * [tUniqRow_7 begin ] stop
 */



	
	/**
	 * [tMap_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_9", false);
		start_Hash.put("tMap_9", System.currentTimeMillis());
		
	
	currentComponent="tMap_9";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfcopyOfcopyOfcopyOfsortie_full");
					}
				
		int tos_count_tMap_9 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_9__Struct  {
}
Var__tMap_9__Struct Var__tMap_9 = new Var__tMap_9__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_fullStruct copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp = new copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_fullStruct();
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product_tmp = new copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct();
// ###############################

        
        



        









 



/**
 * [tMap_9 begin ] stop
 */





	
	/**
	 * [tHashOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_4", false);
		start_Hash.put("tHashOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row16");
					}
				
		int tos_count_tHashOutput_4 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_4=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row16Struct> tHashFile_tHashOutput_4 = null;
		String hashKey_tHashOutput_4 = "tHashFile_EXTRACT_FOR_DYNAMICS_" + pid + "_tHashOutput_4";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_4)){
			    if(mf_tHashOutput_4.getResourceMap().get(hashKey_tHashOutput_4) == null){
	      		    mf_tHashOutput_4.getResourceMap().put(hashKey_tHashOutput_4, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row16Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_4 = mf_tHashOutput_4.getResourceMap().get(hashKey_tHashOutput_4);
			    }else{
			    	tHashFile_tHashOutput_4 = mf_tHashOutput_4.getResourceMap().get(hashKey_tHashOutput_4);
			    }
			}
        int nb_line_tHashOutput_4 = 0;
 



/**
 * [tHashOutput_4 begin ] stop
 */



	
	/**
	 * [tUniqRow_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_6", false);
		start_Hash.put("tUniqRow_6", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_6";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfcopyOfcopyOfcopyOfsortie_product");
					}
				
		int tos_count_tUniqRow_6 = 0;
		

	
		class KeyStruct_tUniqRow_6 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String PRODUCTNUMBER;
					String ATTRIBUTETYPENAME;
					String ATTRIBUTENAME;
					String TEXTVALUE;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.PRODUCTNUMBER == null) ? 0 : this.PRODUCTNUMBER.hashCode());
								
								result = prime * result + ((this.ATTRIBUTETYPENAME == null) ? 0 : this.ATTRIBUTETYPENAME.hashCode());
								
								result = prime * result + ((this.ATTRIBUTENAME == null) ? 0 : this.ATTRIBUTENAME.hashCode());
								
								result = prime * result + ((this.TEXTVALUE == null) ? 0 : this.TEXTVALUE.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_6 other = (KeyStruct_tUniqRow_6) obj;
				
									if (this.PRODUCTNUMBER == null) {
										if (other.PRODUCTNUMBER != null) 
											return false;
								
									} else if (!this.PRODUCTNUMBER.equals(other.PRODUCTNUMBER))
								 
										return false;
								
									if (this.ATTRIBUTETYPENAME == null) {
										if (other.ATTRIBUTETYPENAME != null) 
											return false;
								
									} else if (!this.ATTRIBUTETYPENAME.equals(other.ATTRIBUTETYPENAME))
								 
										return false;
								
									if (this.ATTRIBUTENAME == null) {
										if (other.ATTRIBUTENAME != null) 
											return false;
								
									} else if (!this.ATTRIBUTENAME.equals(other.ATTRIBUTENAME))
								 
										return false;
								
									if (this.TEXTVALUE == null) {
										if (other.TEXTVALUE != null) 
											return false;
								
									} else if (!this.TEXTVALUE.equals(other.TEXTVALUE))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_6 = 0;
int nb_duplicates_tUniqRow_6 = 0;
KeyStruct_tUniqRow_6 finder_tUniqRow_6 = new KeyStruct_tUniqRow_6();
java.util.Set<KeyStruct_tUniqRow_6> keystUniqRow_6 = new java.util.HashSet<KeyStruct_tUniqRow_6>(); 

 



/**
 * [tUniqRow_6 begin ] stop
 */



	
	/**
	 * [tMap_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_8", false);
		start_Hash.put("tMap_8", System.currentTimeMillis());
		
	
	currentComponent="tMap_8";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfcopyOfcopyOfsortie_full");
					}
				
		int tos_count_tMap_8 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_8__Struct  {
}
Var__tMap_8__Struct Var__tMap_8 = new Var__tMap_8__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfcopyOfcopyOfcopyOfcopyOfsortie_fullStruct copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp = new copyOfcopyOfcopyOfcopyOfcopyOfsortie_fullStruct();
copyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct copyOfcopyOfcopyOfcopyOfcopyOfsortie_product_tmp = new copyOfcopyOfcopyOfcopyOfcopyOfsortie_productStruct();
// ###############################

        
        



        









 



/**
 * [tMap_8 begin ] stop
 */





	
	/**
	 * [tHashOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_3", false);
		start_Hash.put("tHashOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row14");
					}
				
		int tos_count_tHashOutput_3 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_3=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row14Struct> tHashFile_tHashOutput_3 = null;
		String hashKey_tHashOutput_3 = "tHashFile_EXTRACT_FOR_DYNAMICS_" + pid + "_tHashOutput_3";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_3)){
			    if(mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3) == null){
	      		    mf_tHashOutput_3.getResourceMap().put(hashKey_tHashOutput_3, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row14Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_3 = mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3);
			    }else{
			    	tHashFile_tHashOutput_3 = mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3);
			    }
			}
        int nb_line_tHashOutput_3 = 0;
 



/**
 * [tHashOutput_3 begin ] stop
 */



	
	/**
	 * [tUniqRow_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_5", false);
		start_Hash.put("tUniqRow_5", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfcopyOfcopyOfsortie_product");
					}
				
		int tos_count_tUniqRow_5 = 0;
		

	
		class KeyStruct_tUniqRow_5 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String PRODUCTNUMBER;
					String ATTRIBUTETYPENAME;
					String ATTRIBUTENAME;
					String TEXTVALUE;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.PRODUCTNUMBER == null) ? 0 : this.PRODUCTNUMBER.hashCode());
								
								result = prime * result + ((this.ATTRIBUTETYPENAME == null) ? 0 : this.ATTRIBUTETYPENAME.hashCode());
								
								result = prime * result + ((this.ATTRIBUTENAME == null) ? 0 : this.ATTRIBUTENAME.hashCode());
								
								result = prime * result + ((this.TEXTVALUE == null) ? 0 : this.TEXTVALUE.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_5 other = (KeyStruct_tUniqRow_5) obj;
				
									if (this.PRODUCTNUMBER == null) {
										if (other.PRODUCTNUMBER != null) 
											return false;
								
									} else if (!this.PRODUCTNUMBER.equals(other.PRODUCTNUMBER))
								 
										return false;
								
									if (this.ATTRIBUTETYPENAME == null) {
										if (other.ATTRIBUTETYPENAME != null) 
											return false;
								
									} else if (!this.ATTRIBUTETYPENAME.equals(other.ATTRIBUTETYPENAME))
								 
										return false;
								
									if (this.ATTRIBUTENAME == null) {
										if (other.ATTRIBUTENAME != null) 
											return false;
								
									} else if (!this.ATTRIBUTENAME.equals(other.ATTRIBUTENAME))
								 
										return false;
								
									if (this.TEXTVALUE == null) {
										if (other.TEXTVALUE != null) 
											return false;
								
									} else if (!this.TEXTVALUE.equals(other.TEXTVALUE))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_5 = 0;
int nb_duplicates_tUniqRow_5 = 0;
KeyStruct_tUniqRow_5 finder_tUniqRow_5 = new KeyStruct_tUniqRow_5();
java.util.Set<KeyStruct_tUniqRow_5> keystUniqRow_5 = new java.util.HashSet<KeyStruct_tUniqRow_5>(); 

 



/**
 * [tUniqRow_5 begin ] stop
 */



	
	/**
	 * [tMap_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_7", false);
		start_Hash.put("tMap_7", System.currentTimeMillis());
		
	
	currentComponent="tMap_7";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfcopyOfsortie_full");
					}
				
		int tos_count_tMap_7 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_7__Struct  {
}
Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfcopyOfcopyOfcopyOfsortie_fullStruct copyOfcopyOfcopyOfcopyOfsortie_full_tmp = new copyOfcopyOfcopyOfcopyOfsortie_fullStruct();
copyOfcopyOfcopyOfcopyOfsortie_productStruct copyOfcopyOfcopyOfcopyOfsortie_product_tmp = new copyOfcopyOfcopyOfcopyOfsortie_productStruct();
// ###############################

        
        



        









 



/**
 * [tMap_7 begin ] stop
 */





	
	/**
	 * [tHashOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_2", false);
		start_Hash.put("tHashOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row10");
					}
				
		int tos_count_tHashOutput_2 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row10Struct> tHashFile_tHashOutput_2 = null;
		String hashKey_tHashOutput_2 = "tHashFile_EXTRACT_FOR_DYNAMICS_" + pid + "_tHashOutput_2";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_2)){
			    if(mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2) == null){
	      		    mf_tHashOutput_2.getResourceMap().put(hashKey_tHashOutput_2, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row10Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }else{
			    	tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }
			}
        int nb_line_tHashOutput_2 = 0;
 



/**
 * [tHashOutput_2 begin ] stop
 */



	
	/**
	 * [tUniqRow_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_4", false);
		start_Hash.put("tUniqRow_4", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfcopyOfsortie_product");
					}
				
		int tos_count_tUniqRow_4 = 0;
		

	
		class KeyStruct_tUniqRow_4 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String PRODUCTNUMBER;
					String ATTRIBUTETYPENAME;
					String ATTRIBUTENAME;
					String TEXTVALUE;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.PRODUCTNUMBER == null) ? 0 : this.PRODUCTNUMBER.hashCode());
								
								result = prime * result + ((this.ATTRIBUTETYPENAME == null) ? 0 : this.ATTRIBUTETYPENAME.hashCode());
								
								result = prime * result + ((this.ATTRIBUTENAME == null) ? 0 : this.ATTRIBUTENAME.hashCode());
								
								result = prime * result + ((this.TEXTVALUE == null) ? 0 : this.TEXTVALUE.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_4 other = (KeyStruct_tUniqRow_4) obj;
				
									if (this.PRODUCTNUMBER == null) {
										if (other.PRODUCTNUMBER != null) 
											return false;
								
									} else if (!this.PRODUCTNUMBER.equals(other.PRODUCTNUMBER))
								 
										return false;
								
									if (this.ATTRIBUTETYPENAME == null) {
										if (other.ATTRIBUTETYPENAME != null) 
											return false;
								
									} else if (!this.ATTRIBUTETYPENAME.equals(other.ATTRIBUTETYPENAME))
								 
										return false;
								
									if (this.ATTRIBUTENAME == null) {
										if (other.ATTRIBUTENAME != null) 
											return false;
								
									} else if (!this.ATTRIBUTENAME.equals(other.ATTRIBUTENAME))
								 
										return false;
								
									if (this.TEXTVALUE == null) {
										if (other.TEXTVALUE != null) 
											return false;
								
									} else if (!this.TEXTVALUE.equals(other.TEXTVALUE))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_4 = 0;
int nb_duplicates_tUniqRow_4 = 0;
KeyStruct_tUniqRow_4 finder_tUniqRow_4 = new KeyStruct_tUniqRow_4();
java.util.Set<KeyStruct_tUniqRow_4> keystUniqRow_4 = new java.util.HashSet<KeyStruct_tUniqRow_4>(); 

 



/**
 * [tUniqRow_4 begin ] stop
 */



	
	/**
	 * [tMap_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_6", false);
		start_Hash.put("tMap_6", System.currentTimeMillis());
		
	
	currentComponent="tMap_6";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfsortie_full");
					}
				
		int tos_count_tMap_6 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_6__Struct  {
}
Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfcopyOfcopyOfsortie_fullStruct copyOfcopyOfcopyOfsortie_full_tmp = new copyOfcopyOfcopyOfsortie_fullStruct();
copyOfcopyOfcopyOfsortie_productStruct copyOfcopyOfcopyOfsortie_product_tmp = new copyOfcopyOfcopyOfsortie_productStruct();
// ###############################

        
        



        









 



/**
 * [tMap_6 begin ] stop
 */





	
	/**
	 * [tHashOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_1", false);
		start_Hash.put("tHashOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Main1");
					}
				
		int tos_count_tHashOutput_1 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<Main1Struct> tHashFile_tHashOutput_1 = null;
		String hashKey_tHashOutput_1 = "tHashFile_EXTRACT_FOR_DYNAMICS_" + pid + "_tHashOutput_1";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_1)){
			    if(mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1) == null){
	      		    mf_tHashOutput_1.getResourceMap().put(hashKey_tHashOutput_1, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<Main1Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }else{
			    	tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }
			}
        int nb_line_tHashOutput_1 = 0;
 



/**
 * [tHashOutput_1 begin ] stop
 */



	
	/**
	 * [tUniqRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_3", false);
		start_Hash.put("tUniqRow_3", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfsortie_product");
					}
				
		int tos_count_tUniqRow_3 = 0;
		

	
		class KeyStruct_tUniqRow_3 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String PRODUCTNUMBER;
					String ATTRIBUTETYPENAME;
					String ATTRIBUTENAME;
					String TEXTVALUE;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.PRODUCTNUMBER == null) ? 0 : this.PRODUCTNUMBER.hashCode());
								
								result = prime * result + ((this.ATTRIBUTETYPENAME == null) ? 0 : this.ATTRIBUTETYPENAME.hashCode());
								
								result = prime * result + ((this.ATTRIBUTENAME == null) ? 0 : this.ATTRIBUTENAME.hashCode());
								
								result = prime * result + ((this.TEXTVALUE == null) ? 0 : this.TEXTVALUE.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_3 other = (KeyStruct_tUniqRow_3) obj;
				
									if (this.PRODUCTNUMBER == null) {
										if (other.PRODUCTNUMBER != null) 
											return false;
								
									} else if (!this.PRODUCTNUMBER.equals(other.PRODUCTNUMBER))
								 
										return false;
								
									if (this.ATTRIBUTETYPENAME == null) {
										if (other.ATTRIBUTETYPENAME != null) 
											return false;
								
									} else if (!this.ATTRIBUTETYPENAME.equals(other.ATTRIBUTETYPENAME))
								 
										return false;
								
									if (this.ATTRIBUTENAME == null) {
										if (other.ATTRIBUTENAME != null) 
											return false;
								
									} else if (!this.ATTRIBUTENAME.equals(other.ATTRIBUTENAME))
								 
										return false;
								
									if (this.TEXTVALUE == null) {
										if (other.TEXTVALUE != null) 
											return false;
								
									} else if (!this.TEXTVALUE.equals(other.TEXTVALUE))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_3 = 0;
int nb_duplicates_tUniqRow_3 = 0;
KeyStruct_tUniqRow_3 finder_tUniqRow_3 = new KeyStruct_tUniqRow_3();
java.util.Set<KeyStruct_tUniqRow_3> keystUniqRow_3 = new java.util.HashSet<KeyStruct_tUniqRow_3>(); 

 



/**
 * [tUniqRow_3 begin ] stop
 */



	
	/**
	 * [tMap_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_5", false);
		start_Hash.put("tMap_5", System.currentTimeMillis());
		
	
	currentComponent="tMap_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfsortie_full");
					}
				
		int tos_count_tMap_5 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_5__Struct  {
}
Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfcopyOfsortie_fullStruct copyOfcopyOfsortie_full_tmp = new copyOfcopyOfsortie_fullStruct();
copyOfcopyOfsortie_productStruct copyOfcopyOfsortie_product_tmp = new copyOfcopyOfsortie_productStruct();
// ###############################

        
        



        









 



/**
 * [tMap_5 begin ] stop
 */





	
	/**
	 * [tFileOutputExcel_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_2", false);
		start_Hash.put("tFileOutputExcel_2", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tFileOutputExcel_2 = 0;
		


		int columnIndex_tFileOutputExcel_2 = 0;
		
		String fileName_tFileOutputExcel_2=context.ExtractPath + "Released products V2.xlsx";
		int nb_line_tFileOutputExcel_2 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_2 = new org.talend.ExcelTool();
		
		xlsxTool_tFileOutputExcel_2.setSheet("Released products V2");
		xlsxTool_tFileOutputExcel_2.setAppend(false,true);
		xlsxTool_tFileOutputExcel_2.setRecalculateFormula(false);
		xlsxTool_tFileOutputExcel_2.setXY(false,0,10,false);
		
		java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_2 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap.get("concurrentHashMap");
		java.lang.Object lockObj_tFileOutputExcel_2 = chm_tFileOutputExcel_2.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_2", k -> new Object());
		synchronized (lockObj_tFileOutputExcel_2) {
			
				xlsxTool_tFileOutputExcel_2.prepareXlsxFile(fileName_tFileOutputExcel_2);
			
		}
		
		xlsxTool_tFileOutputExcel_2.setFont("");
		
		if (xlsxTool_tFileOutputExcel_2.getStartRow() == 0){
		
		xlsxTool_tFileOutputExcel_2.addRow();
		
		xlsxTool_tFileOutputExcel_2.addCellValue("PRODUCTLIFECYCLESEASONCODE");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("BOMUNITSYMBOL");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("INVENTORYRESERVATIONHIERARCHYNAME");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("INVENTORYUNITSYMBOL");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("ITEMMODELGROUPID");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("ITEMNUMBER");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("KRFBRANDID");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("KRFCOLORDIMLAYOUT");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("KRFSIZEDIMLAYOUT");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("KRFSTYLEDIMLAYOUT");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("KRFAUTOOPENMATRIX");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("ORIGINCOUNTRYREGIONID");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("PRODUCTCOVERAGEGROUPID");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("PRODUCTDIMENSIONGROUPNAME");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("PRODUCTGROUPID");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("PRODUCTIONTYPE");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("PRODUCTNUMBER");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("PRODUCTSEARCHNAME");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("PRODUCTSUBTYPE");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("PRODUCTTYPE");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("PURCHASEUNITSYMBOL");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("SALESUNITSYMBOL");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("SEARCHNAME");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("STORAGEDIMENSIONGROUPNAME");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("TRACKINGDIMENSIONGROUPNAME");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("PRODUCTLIFECYCLESTATEID");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("PURCHASESALESTAXITEMGROUPCODE");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("SALESSALESTAXITEMGROUPCODE");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("UNITCONVERSIONSEQUENCEGROUPID");
		
		nb_line_tFileOutputExcel_2++; 
		
	}
		

 



/**
 * [tFileOutputExcel_2 begin ] stop
 */



	
	/**
	 * [tUniqRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_2", false);
		start_Hash.put("tUniqRow_2", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfsortie_product");
					}
				
		int tos_count_tUniqRow_2 = 0;
		

	
		class KeyStruct_tUniqRow_2 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String PRODUCTLIFECYCLESEASONCODE;
					String BOMUNITSYMBOL;
					String INVENTORYRESERVATIONHIERARCHYNAME;
					String INVENTORYUNITSYMBOL;
					String ITEMMODELGROUPID;
					String ITEMNUMBER;
					String KRFBRANDID;
					String KRFCOLORDIMLAYOUT;
					String KRFSIZEDIMLAYOUT;
					String KRFSTYLEDIMLAYOUT;
					String KRFAUTOOPENMATRIX;
					String ORIGINCOUNTRYREGIONID;
					String PRODUCTCOVERAGEGROUPID;
					String PRODUCTDIMENSIONGROUPNAME;
					String PRODUCTGROUPID;
					String PRODUCTIONTYPE;
					String PRODUCTNUMBER;
					String PRODUCTSEARCHNAME;
					String PRODUCTSUBTYPE;
					String PRODUCTTYPE;
					String PURCHASEUNITSYMBOL;
					String SALESUNITSYMBOL;
					String SEARCHNAME;
					String STORAGEDIMENSIONGROUPNAME;
					String TRACKINGDIMENSIONGROUPNAME;
					String PRODUCTLIFECYCLESTATEID;
					String PURCHASESALESTAXITEMGROUPCODE;
					String SALESSALESTAXITEMGROUPCODE;
					String UNITCONVERSIONSEQUENCEGROUPID;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.PRODUCTLIFECYCLESEASONCODE == null) ? 0 : this.PRODUCTLIFECYCLESEASONCODE.hashCode());
								
								result = prime * result + ((this.BOMUNITSYMBOL == null) ? 0 : this.BOMUNITSYMBOL.hashCode());
								
								result = prime * result + ((this.INVENTORYRESERVATIONHIERARCHYNAME == null) ? 0 : this.INVENTORYRESERVATIONHIERARCHYNAME.hashCode());
								
								result = prime * result + ((this.INVENTORYUNITSYMBOL == null) ? 0 : this.INVENTORYUNITSYMBOL.hashCode());
								
								result = prime * result + ((this.ITEMMODELGROUPID == null) ? 0 : this.ITEMMODELGROUPID.hashCode());
								
								result = prime * result + ((this.ITEMNUMBER == null) ? 0 : this.ITEMNUMBER.hashCode());
								
								result = prime * result + ((this.KRFBRANDID == null) ? 0 : this.KRFBRANDID.hashCode());
								
								result = prime * result + ((this.KRFCOLORDIMLAYOUT == null) ? 0 : this.KRFCOLORDIMLAYOUT.hashCode());
								
								result = prime * result + ((this.KRFSIZEDIMLAYOUT == null) ? 0 : this.KRFSIZEDIMLAYOUT.hashCode());
								
								result = prime * result + ((this.KRFSTYLEDIMLAYOUT == null) ? 0 : this.KRFSTYLEDIMLAYOUT.hashCode());
								
								result = prime * result + ((this.KRFAUTOOPENMATRIX == null) ? 0 : this.KRFAUTOOPENMATRIX.hashCode());
								
								result = prime * result + ((this.ORIGINCOUNTRYREGIONID == null) ? 0 : this.ORIGINCOUNTRYREGIONID.hashCode());
								
								result = prime * result + ((this.PRODUCTCOVERAGEGROUPID == null) ? 0 : this.PRODUCTCOVERAGEGROUPID.hashCode());
								
								result = prime * result + ((this.PRODUCTDIMENSIONGROUPNAME == null) ? 0 : this.PRODUCTDIMENSIONGROUPNAME.hashCode());
								
								result = prime * result + ((this.PRODUCTGROUPID == null) ? 0 : this.PRODUCTGROUPID.hashCode());
								
								result = prime * result + ((this.PRODUCTIONTYPE == null) ? 0 : this.PRODUCTIONTYPE.hashCode());
								
								result = prime * result + ((this.PRODUCTNUMBER == null) ? 0 : this.PRODUCTNUMBER.hashCode());
								
								result = prime * result + ((this.PRODUCTSEARCHNAME == null) ? 0 : this.PRODUCTSEARCHNAME.hashCode());
								
								result = prime * result + ((this.PRODUCTSUBTYPE == null) ? 0 : this.PRODUCTSUBTYPE.hashCode());
								
								result = prime * result + ((this.PRODUCTTYPE == null) ? 0 : this.PRODUCTTYPE.hashCode());
								
								result = prime * result + ((this.PURCHASEUNITSYMBOL == null) ? 0 : this.PURCHASEUNITSYMBOL.hashCode());
								
								result = prime * result + ((this.SALESUNITSYMBOL == null) ? 0 : this.SALESUNITSYMBOL.hashCode());
								
								result = prime * result + ((this.SEARCHNAME == null) ? 0 : this.SEARCHNAME.hashCode());
								
								result = prime * result + ((this.STORAGEDIMENSIONGROUPNAME == null) ? 0 : this.STORAGEDIMENSIONGROUPNAME.hashCode());
								
								result = prime * result + ((this.TRACKINGDIMENSIONGROUPNAME == null) ? 0 : this.TRACKINGDIMENSIONGROUPNAME.hashCode());
								
								result = prime * result + ((this.PRODUCTLIFECYCLESTATEID == null) ? 0 : this.PRODUCTLIFECYCLESTATEID.hashCode());
								
								result = prime * result + ((this.PURCHASESALESTAXITEMGROUPCODE == null) ? 0 : this.PURCHASESALESTAXITEMGROUPCODE.hashCode());
								
								result = prime * result + ((this.SALESSALESTAXITEMGROUPCODE == null) ? 0 : this.SALESSALESTAXITEMGROUPCODE.hashCode());
								
								result = prime * result + ((this.UNITCONVERSIONSEQUENCEGROUPID == null) ? 0 : this.UNITCONVERSIONSEQUENCEGROUPID.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_2 other = (KeyStruct_tUniqRow_2) obj;
				
									if (this.PRODUCTLIFECYCLESEASONCODE == null) {
										if (other.PRODUCTLIFECYCLESEASONCODE != null) 
											return false;
								
									} else if (!this.PRODUCTLIFECYCLESEASONCODE.equals(other.PRODUCTLIFECYCLESEASONCODE))
								 
										return false;
								
									if (this.BOMUNITSYMBOL == null) {
										if (other.BOMUNITSYMBOL != null) 
											return false;
								
									} else if (!this.BOMUNITSYMBOL.equals(other.BOMUNITSYMBOL))
								 
										return false;
								
									if (this.INVENTORYRESERVATIONHIERARCHYNAME == null) {
										if (other.INVENTORYRESERVATIONHIERARCHYNAME != null) 
											return false;
								
									} else if (!this.INVENTORYRESERVATIONHIERARCHYNAME.equals(other.INVENTORYRESERVATIONHIERARCHYNAME))
								 
										return false;
								
									if (this.INVENTORYUNITSYMBOL == null) {
										if (other.INVENTORYUNITSYMBOL != null) 
											return false;
								
									} else if (!this.INVENTORYUNITSYMBOL.equals(other.INVENTORYUNITSYMBOL))
								 
										return false;
								
									if (this.ITEMMODELGROUPID == null) {
										if (other.ITEMMODELGROUPID != null) 
											return false;
								
									} else if (!this.ITEMMODELGROUPID.equals(other.ITEMMODELGROUPID))
								 
										return false;
								
									if (this.ITEMNUMBER == null) {
										if (other.ITEMNUMBER != null) 
											return false;
								
									} else if (!this.ITEMNUMBER.equals(other.ITEMNUMBER))
								 
										return false;
								
									if (this.KRFBRANDID == null) {
										if (other.KRFBRANDID != null) 
											return false;
								
									} else if (!this.KRFBRANDID.equals(other.KRFBRANDID))
								 
										return false;
								
									if (this.KRFCOLORDIMLAYOUT == null) {
										if (other.KRFCOLORDIMLAYOUT != null) 
											return false;
								
									} else if (!this.KRFCOLORDIMLAYOUT.equals(other.KRFCOLORDIMLAYOUT))
								 
										return false;
								
									if (this.KRFSIZEDIMLAYOUT == null) {
										if (other.KRFSIZEDIMLAYOUT != null) 
											return false;
								
									} else if (!this.KRFSIZEDIMLAYOUT.equals(other.KRFSIZEDIMLAYOUT))
								 
										return false;
								
									if (this.KRFSTYLEDIMLAYOUT == null) {
										if (other.KRFSTYLEDIMLAYOUT != null) 
											return false;
								
									} else if (!this.KRFSTYLEDIMLAYOUT.equals(other.KRFSTYLEDIMLAYOUT))
								 
										return false;
								
									if (this.KRFAUTOOPENMATRIX == null) {
										if (other.KRFAUTOOPENMATRIX != null) 
											return false;
								
									} else if (!this.KRFAUTOOPENMATRIX.equals(other.KRFAUTOOPENMATRIX))
								 
										return false;
								
									if (this.ORIGINCOUNTRYREGIONID == null) {
										if (other.ORIGINCOUNTRYREGIONID != null) 
											return false;
								
									} else if (!this.ORIGINCOUNTRYREGIONID.equals(other.ORIGINCOUNTRYREGIONID))
								 
										return false;
								
									if (this.PRODUCTCOVERAGEGROUPID == null) {
										if (other.PRODUCTCOVERAGEGROUPID != null) 
											return false;
								
									} else if (!this.PRODUCTCOVERAGEGROUPID.equals(other.PRODUCTCOVERAGEGROUPID))
								 
										return false;
								
									if (this.PRODUCTDIMENSIONGROUPNAME == null) {
										if (other.PRODUCTDIMENSIONGROUPNAME != null) 
											return false;
								
									} else if (!this.PRODUCTDIMENSIONGROUPNAME.equals(other.PRODUCTDIMENSIONGROUPNAME))
								 
										return false;
								
									if (this.PRODUCTGROUPID == null) {
										if (other.PRODUCTGROUPID != null) 
											return false;
								
									} else if (!this.PRODUCTGROUPID.equals(other.PRODUCTGROUPID))
								 
										return false;
								
									if (this.PRODUCTIONTYPE == null) {
										if (other.PRODUCTIONTYPE != null) 
											return false;
								
									} else if (!this.PRODUCTIONTYPE.equals(other.PRODUCTIONTYPE))
								 
										return false;
								
									if (this.PRODUCTNUMBER == null) {
										if (other.PRODUCTNUMBER != null) 
											return false;
								
									} else if (!this.PRODUCTNUMBER.equals(other.PRODUCTNUMBER))
								 
										return false;
								
									if (this.PRODUCTSEARCHNAME == null) {
										if (other.PRODUCTSEARCHNAME != null) 
											return false;
								
									} else if (!this.PRODUCTSEARCHNAME.equals(other.PRODUCTSEARCHNAME))
								 
										return false;
								
									if (this.PRODUCTSUBTYPE == null) {
										if (other.PRODUCTSUBTYPE != null) 
											return false;
								
									} else if (!this.PRODUCTSUBTYPE.equals(other.PRODUCTSUBTYPE))
								 
										return false;
								
									if (this.PRODUCTTYPE == null) {
										if (other.PRODUCTTYPE != null) 
											return false;
								
									} else if (!this.PRODUCTTYPE.equals(other.PRODUCTTYPE))
								 
										return false;
								
									if (this.PURCHASEUNITSYMBOL == null) {
										if (other.PURCHASEUNITSYMBOL != null) 
											return false;
								
									} else if (!this.PURCHASEUNITSYMBOL.equals(other.PURCHASEUNITSYMBOL))
								 
										return false;
								
									if (this.SALESUNITSYMBOL == null) {
										if (other.SALESUNITSYMBOL != null) 
											return false;
								
									} else if (!this.SALESUNITSYMBOL.equals(other.SALESUNITSYMBOL))
								 
										return false;
								
									if (this.SEARCHNAME == null) {
										if (other.SEARCHNAME != null) 
											return false;
								
									} else if (!this.SEARCHNAME.equals(other.SEARCHNAME))
								 
										return false;
								
									if (this.STORAGEDIMENSIONGROUPNAME == null) {
										if (other.STORAGEDIMENSIONGROUPNAME != null) 
											return false;
								
									} else if (!this.STORAGEDIMENSIONGROUPNAME.equals(other.STORAGEDIMENSIONGROUPNAME))
								 
										return false;
								
									if (this.TRACKINGDIMENSIONGROUPNAME == null) {
										if (other.TRACKINGDIMENSIONGROUPNAME != null) 
											return false;
								
									} else if (!this.TRACKINGDIMENSIONGROUPNAME.equals(other.TRACKINGDIMENSIONGROUPNAME))
								 
										return false;
								
									if (this.PRODUCTLIFECYCLESTATEID == null) {
										if (other.PRODUCTLIFECYCLESTATEID != null) 
											return false;
								
									} else if (!this.PRODUCTLIFECYCLESTATEID.equals(other.PRODUCTLIFECYCLESTATEID))
								 
										return false;
								
									if (this.PURCHASESALESTAXITEMGROUPCODE == null) {
										if (other.PURCHASESALESTAXITEMGROUPCODE != null) 
											return false;
								
									} else if (!this.PURCHASESALESTAXITEMGROUPCODE.equals(other.PURCHASESALESTAXITEMGROUPCODE))
								 
										return false;
								
									if (this.SALESSALESTAXITEMGROUPCODE == null) {
										if (other.SALESSALESTAXITEMGROUPCODE != null) 
											return false;
								
									} else if (!this.SALESSALESTAXITEMGROUPCODE.equals(other.SALESSALESTAXITEMGROUPCODE))
								 
										return false;
								
									if (this.UNITCONVERSIONSEQUENCEGROUPID == null) {
										if (other.UNITCONVERSIONSEQUENCEGROUPID != null) 
											return false;
								
									} else if (!this.UNITCONVERSIONSEQUENCEGROUPID.equals(other.UNITCONVERSIONSEQUENCEGROUPID))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_2 = 0;
int nb_duplicates_tUniqRow_2 = 0;
KeyStruct_tUniqRow_2 finder_tUniqRow_2 = new KeyStruct_tUniqRow_2();
java.util.Set<KeyStruct_tUniqRow_2> keystUniqRow_2 = new java.util.HashSet<KeyStruct_tUniqRow_2>(); 

 



/**
 * [tUniqRow_2 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct> tHash_Lookup_row7 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct>) 
					globalMap.get( "tHash_Lookup_row7" ))
					;					
					
	

row7Struct row7HashKey = new row7Struct();
row7Struct row7Default = new row7Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfsortie_fullStruct copyOfsortie_full_tmp = new copyOfsortie_fullStruct();
copyOfsortie_productStruct copyOfsortie_product_tmp = new copyOfsortie_productStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tLogRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_2", false);
		start_Hash.put("tLogRow_2", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_full");
					}
				
		int tos_count_tLogRow_2 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_2 = "|";
		java.io.PrintStream consoleOut_tLogRow_2 = null;	

 		StringBuilder strBuffer_tLogRow_2 = null;
		int nb_line_tLogRow_2 = 0;
///////////////////////    			



 



/**
 * [tLogRow_2 begin ] stop
 */






	
	/**
	 * [tFileOutputExcel_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_1", false);
		start_Hash.put("tFileOutputExcel_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tFileOutputExcel_1 = 0;
		


		int columnIndex_tFileOutputExcel_1 = 0;
		
		String fileName_tFileOutputExcel_1=context.ExtractPath + "Products V2.xlsx";
		int nb_line_tFileOutputExcel_1 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_1 = new org.talend.ExcelTool();
		
		xlsxTool_tFileOutputExcel_1.setSheet("Products_V2");
		xlsxTool_tFileOutputExcel_1.setAppend(false,true);
		xlsxTool_tFileOutputExcel_1.setRecalculateFormula(false);
		xlsxTool_tFileOutputExcel_1.setXY(false,0,10,false);
		
		java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_1 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap.get("concurrentHashMap");
		java.lang.Object lockObj_tFileOutputExcel_1 = chm_tFileOutputExcel_1.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_1", k -> new Object());
		synchronized (lockObj_tFileOutputExcel_1) {
			
				xlsxTool_tFileOutputExcel_1.prepareXlsxFile(fileName_tFileOutputExcel_1);
			
		}
		
		xlsxTool_tFileOutputExcel_1.setFont("");
		
		if (xlsxTool_tFileOutputExcel_1.getStartRow() == 0){
		
		xlsxTool_tFileOutputExcel_1.addRow();
		
		xlsxTool_tFileOutputExcel_1.addCellValue("KRFBRANDID");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("PRODUCTSEARCHNAME");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("PRODUCTDESCRIPTION");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("PRODUCTNAME");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("PRODUCTNUMBER");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("RETAILPRODUCTCATEGORYNAME");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("PRODUCTSUBTYPE");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("PRODUCTTYPE");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("PRODUCTDIMENSIONGROUPNAME");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("STORAGEDIMENSIONGROUPNAME");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("TRACKINGDIMENSIONGROUPNAME");
		
		nb_line_tFileOutputExcel_1++; 
		
	}
		

 



/**
 * [tFileOutputExcel_1 begin ] stop
 */



	
	/**
	 * [tUniqRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_1", false);
		start_Hash.put("tUniqRow_1", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tUniqRow_1 = 0;
		

	
		class KeyStruct_tUniqRow_1 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String KRFBRANDID;
					String PRODUCTSEARCHNAME;
					String PRODUCTDESCRIPTION;
					String PRODUCTNAME;
					String PRODUCTNUMBER;
					String RETAILPRODUCTCATEGORYNAME;
					String PRODUCTSUBTYPE;
					String PRODUCTTYPE;
					String PRODUCTDIMENSIONGROUPNAME;
					String STORAGEDIMENSIONGROUPNAME;
					String TRACKINGDIMENSIONGROUPNAME;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.KRFBRANDID == null) ? 0 : this.KRFBRANDID.hashCode());
								
								result = prime * result + ((this.PRODUCTSEARCHNAME == null) ? 0 : this.PRODUCTSEARCHNAME.hashCode());
								
								result = prime * result + ((this.PRODUCTDESCRIPTION == null) ? 0 : this.PRODUCTDESCRIPTION.hashCode());
								
								result = prime * result + ((this.PRODUCTNAME == null) ? 0 : this.PRODUCTNAME.hashCode());
								
								result = prime * result + ((this.PRODUCTNUMBER == null) ? 0 : this.PRODUCTNUMBER.hashCode());
								
								result = prime * result + ((this.RETAILPRODUCTCATEGORYNAME == null) ? 0 : this.RETAILPRODUCTCATEGORYNAME.hashCode());
								
								result = prime * result + ((this.PRODUCTSUBTYPE == null) ? 0 : this.PRODUCTSUBTYPE.hashCode());
								
								result = prime * result + ((this.PRODUCTTYPE == null) ? 0 : this.PRODUCTTYPE.hashCode());
								
								result = prime * result + ((this.PRODUCTDIMENSIONGROUPNAME == null) ? 0 : this.PRODUCTDIMENSIONGROUPNAME.hashCode());
								
								result = prime * result + ((this.STORAGEDIMENSIONGROUPNAME == null) ? 0 : this.STORAGEDIMENSIONGROUPNAME.hashCode());
								
								result = prime * result + ((this.TRACKINGDIMENSIONGROUPNAME == null) ? 0 : this.TRACKINGDIMENSIONGROUPNAME.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_1 other = (KeyStruct_tUniqRow_1) obj;
				
									if (this.KRFBRANDID == null) {
										if (other.KRFBRANDID != null) 
											return false;
								
									} else if (!this.KRFBRANDID.equals(other.KRFBRANDID))
								 
										return false;
								
									if (this.PRODUCTSEARCHNAME == null) {
										if (other.PRODUCTSEARCHNAME != null) 
											return false;
								
									} else if (!this.PRODUCTSEARCHNAME.equals(other.PRODUCTSEARCHNAME))
								 
										return false;
								
									if (this.PRODUCTDESCRIPTION == null) {
										if (other.PRODUCTDESCRIPTION != null) 
											return false;
								
									} else if (!this.PRODUCTDESCRIPTION.equals(other.PRODUCTDESCRIPTION))
								 
										return false;
								
									if (this.PRODUCTNAME == null) {
										if (other.PRODUCTNAME != null) 
											return false;
								
									} else if (!this.PRODUCTNAME.equals(other.PRODUCTNAME))
								 
										return false;
								
									if (this.PRODUCTNUMBER == null) {
										if (other.PRODUCTNUMBER != null) 
											return false;
								
									} else if (!this.PRODUCTNUMBER.equals(other.PRODUCTNUMBER))
								 
										return false;
								
									if (this.RETAILPRODUCTCATEGORYNAME == null) {
										if (other.RETAILPRODUCTCATEGORYNAME != null) 
											return false;
								
									} else if (!this.RETAILPRODUCTCATEGORYNAME.equals(other.RETAILPRODUCTCATEGORYNAME))
								 
										return false;
								
									if (this.PRODUCTSUBTYPE == null) {
										if (other.PRODUCTSUBTYPE != null) 
											return false;
								
									} else if (!this.PRODUCTSUBTYPE.equals(other.PRODUCTSUBTYPE))
								 
										return false;
								
									if (this.PRODUCTTYPE == null) {
										if (other.PRODUCTTYPE != null) 
											return false;
								
									} else if (!this.PRODUCTTYPE.equals(other.PRODUCTTYPE))
								 
										return false;
								
									if (this.PRODUCTDIMENSIONGROUPNAME == null) {
										if (other.PRODUCTDIMENSIONGROUPNAME != null) 
											return false;
								
									} else if (!this.PRODUCTDIMENSIONGROUPNAME.equals(other.PRODUCTDIMENSIONGROUPNAME))
								 
										return false;
								
									if (this.STORAGEDIMENSIONGROUPNAME == null) {
										if (other.STORAGEDIMENSIONGROUPNAME != null) 
											return false;
								
									} else if (!this.STORAGEDIMENSIONGROUPNAME.equals(other.STORAGEDIMENSIONGROUPNAME))
								 
										return false;
								
									if (this.TRACKINGDIMENSIONGROUPNAME == null) {
										if (other.TRACKINGDIMENSIONGROUPNAME != null) 
											return false;
								
									} else if (!this.TRACKINGDIMENSIONGROUPNAME.equals(other.TRACKINGDIMENSIONGROUPNAME))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_1 = 0;
int nb_duplicates_tUniqRow_1 = 0;
KeyStruct_tUniqRow_1 finder_tUniqRow_1 = new KeyStruct_tUniqRow_1();
java.util.Set<KeyStruct_tUniqRow_1> keystUniqRow_1 = new java.util.HashSet<KeyStruct_tUniqRow_1>(); 

 



/**
 * [tUniqRow_1 begin ] stop
 */



	
	/**
	 * [tLogRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_3", false);
		start_Hash.put("tLogRow_3", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_product");
					}
				
		int tos_count_tLogRow_3 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_3 = "|";
		java.io.PrintStream consoleOut_tLogRow_3 = null;	

 		StringBuilder strBuffer_tLogRow_3 = null;
		int nb_line_tLogRow_3 = 0;
///////////////////////    			



 



/**
 * [tLogRow_3 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_Excel");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
sortie_fullStruct sortie_full_tmp = new sortie_fullStruct();
sortie_productStruct sortie_product_tmp = new sortie_productStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
	String Fn_BRAND;
	String Fn_SEASON;
	String Fn_CATEGORY;
	String Fn_REF;
	String Fn_DESCRIPTION;
	String Fn_STYLE;
	String Fn_COLOR;
	String Fn_FASHION;
	String Fn_STYLE_COLOR_LABEL;
	String Fn_COLOR_NAME;
	String Fn_LBL;
	String Fn_STYLE_COLOR;
	String Fn_GENDER;
	String Fn_AGE_RANGE;
	String Fn_SIZE_RANGE;
	String Fn_SIZE;
	String Fn_US_SIZE;
	String Fn_CM_SIZE;
	String Fn_PRODUCT;
	String Fn_PRODUCT_STATUS;
	String Fn_PRODUCT_TIER;
	String Fn_ACCT_EXCLUS;
	String Fn_SIZE_RATIO_SPLIT;
	String Fn_REC_SIZE_SPLIT;
	String Fn_CARTON_QTY;
	String Fn_ATTRIBUTE;
	String Fn_UNITS;
	String Fn_EUR_RRP;
	String Fn_EUR_WSP;
	String Fn_GBP_RRP;
	String Fn_GBP_WSP;
	String Fn_CHF_RRP;
	String Fn_CHF_WSP;
	String Fn_NOK_RRP;
	String Fn_NOK_WSP;
	String Fn_DKK_RRP;
	String Fn_DKK_WSP;
	String Fn_SEK_RRP;
	String Fn_SEK_WSP;
	String Fn_EUR_FINN_RRP;
	String Fn_EUR_FINN_WSP;
	String Fn_FABRICATION;
	String Fn_COO;
	String Fn_CUSTOM_TARIFF_CODE;
	String Fn_UPC;
	String Fn_SMU_TYPE;
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
sortie_ExcelStruct sortie_Excel_tmp = new sortie_ExcelStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tFileInputExcel_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputExcel_2", false);
		start_Hash.put("tFileInputExcel_2", System.currentTimeMillis());
		
	
	currentComponent="tFileInputExcel_2";

	
		int tos_count_tFileInputExcel_2 = 0;
		

 
	final String decryptedPassword_tFileInputExcel_2 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[RmRP6u5Z++q4LDdAaR6yD+a6gsAE1wray6ID2A==]");
        String password_tFileInputExcel_2 = decryptedPassword_tFileInputExcel_2;
        if (password_tFileInputExcel_2.isEmpty()){
            password_tFileInputExcel_2 = null;
        }
			class RegexUtil_tFileInputExcel_2 {

		    	public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, String oneSheetName, boolean useRegex) {

			        java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();

			        if(useRegex){//this part process the regex issue

				        java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(oneSheetName);
				        for (org.apache.poi.ss.usermodel.Sheet sheet : workbook) {
				            String sheetName = sheet.getSheetName();
				            java.util.regex.Matcher matcher = pattern.matcher(sheetName);
				            if (matcher.matches()) {
				            	if(sheet != null){
				                	list.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet);
				                }
				            }
				        }

			        }else{
			        	org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook.getSheet(oneSheetName);
		            	if(sheet != null){
		                	list.add(sheet);
		                }

			        }

			        return list;
			    }

			    public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, int index, boolean useRegex) {
			    	java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list =  new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
			    	org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook.getSheetAt(index);
	            	if(sheet != null){
	                	list.add(sheet);
	                }
			    	return list;
			    }

			}
		RegexUtil_tFileInputExcel_2 regexUtil_tFileInputExcel_2 = new RegexUtil_tFileInputExcel_2();

		Object source_tFileInputExcel_2 = context.IntegrationExcelPath + context.ExcelFileName;
		org.apache.poi.xssf.usermodel.XSSFWorkbook workbook_tFileInputExcel_2 = null;

		if(source_tFileInputExcel_2 instanceof String){
			workbook_tFileInputExcel_2 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory.create(new java.io.File((String)source_tFileInputExcel_2), password_tFileInputExcel_2);
		} else if(source_tFileInputExcel_2 instanceof java.io.InputStream) {
     		workbook_tFileInputExcel_2 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory.create((java.io.InputStream)source_tFileInputExcel_2, password_tFileInputExcel_2);
		} else{
			workbook_tFileInputExcel_2 = null;
			throw new java.lang.Exception("The data source should be specified as Inputstream or File Path!");
		}
		try {

		java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_tFileInputExcel_2 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
        sheetList_tFileInputExcel_2.addAll(regexUtil_tFileInputExcel_2.getSheets(workbook_tFileInputExcel_2, 0, false));
    	if(sheetList_tFileInputExcel_2.size() <= 0){
            throw new RuntimeException("Special sheets not exist!");
        }

		java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_FilterNull_tFileInputExcel_2 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
		for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_FilterNull_tFileInputExcel_2 : sheetList_tFileInputExcel_2) {
			if(sheet_FilterNull_tFileInputExcel_2!=null && sheetList_FilterNull_tFileInputExcel_2.iterator()!=null && sheet_FilterNull_tFileInputExcel_2.iterator().hasNext()){
				sheetList_FilterNull_tFileInputExcel_2.add(sheet_FilterNull_tFileInputExcel_2);
			}
		}
		sheetList_tFileInputExcel_2 = sheetList_FilterNull_tFileInputExcel_2;
	if(sheetList_tFileInputExcel_2.size()>0){
		int nb_line_tFileInputExcel_2 = 0;

        int begin_line_tFileInputExcel_2 = 1;

        int footer_input_tFileInputExcel_2 = 0;

        int end_line_tFileInputExcel_2=0;
        for(org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_2:sheetList_tFileInputExcel_2){
			end_line_tFileInputExcel_2+=(sheet_tFileInputExcel_2.getLastRowNum()+1);
        }
        end_line_tFileInputExcel_2 -= footer_input_tFileInputExcel_2;
        int limit_tFileInputExcel_2 = -1;
        int start_column_tFileInputExcel_2 = 1-1;
        int end_column_tFileInputExcel_2 = -1;
        Integer lastColumn_tFileInputExcel_2 = 47;
        if(lastColumn_tFileInputExcel_2!=null){
        	end_column_tFileInputExcel_2 = lastColumn_tFileInputExcel_2.intValue();
        }

        org.apache.poi.xssf.usermodel.XSSFRow row_tFileInputExcel_2 = null;
        org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_2 = sheetList_tFileInputExcel_2.get(0);
        int rowCount_tFileInputExcel_2 = 0;
        int sheetIndex_tFileInputExcel_2 = 0;
        int currentRows_tFileInputExcel_2 = (sheetList_tFileInputExcel_2.get(0).getLastRowNum()+1);

		//for the number format
        java.text.DecimalFormat df_tFileInputExcel_2 = new java.text.DecimalFormat("#.####################################");
        char decimalChar_tFileInputExcel_2 = df_tFileInputExcel_2.getDecimalFormatSymbols().getDecimalSeparator();
		
        for(int i_tFileInputExcel_2 = begin_line_tFileInputExcel_2; i_tFileInputExcel_2 < end_line_tFileInputExcel_2; i_tFileInputExcel_2++){

        	int emptyColumnCount_tFileInputExcel_2 = 0;

        	if (limit_tFileInputExcel_2 != -1 && nb_line_tFileInputExcel_2 >= limit_tFileInputExcel_2) {
        		break;
        	}

            while (i_tFileInputExcel_2 >= rowCount_tFileInputExcel_2 + currentRows_tFileInputExcel_2) {
                rowCount_tFileInputExcel_2 += currentRows_tFileInputExcel_2;
                sheet_tFileInputExcel_2 = sheetList_tFileInputExcel_2.get(++sheetIndex_tFileInputExcel_2);
                currentRows_tFileInputExcel_2 = (sheet_tFileInputExcel_2.getLastRowNum()+1);
            }
            globalMap.put("tFileInputExcel_2_CURRENT_SHEET",sheet_tFileInputExcel_2.getSheetName());
            if (rowCount_tFileInputExcel_2 <= i_tFileInputExcel_2) {
                row_tFileInputExcel_2 = sheet_tFileInputExcel_2.getRow(i_tFileInputExcel_2 - rowCount_tFileInputExcel_2);
            }
		    row3 = null;
					int tempRowLength_tFileInputExcel_2 = 46;
				
				int columnIndex_tFileInputExcel_2 = 0;
			
			String[] temp_row_tFileInputExcel_2 = new String[tempRowLength_tFileInputExcel_2];
			int excel_end_column_tFileInputExcel_2;
			if(row_tFileInputExcel_2==null){
				excel_end_column_tFileInputExcel_2=0;
			}else{
				excel_end_column_tFileInputExcel_2=row_tFileInputExcel_2.getLastCellNum();
			}
			int actual_end_column_tFileInputExcel_2;
			if(end_column_tFileInputExcel_2 == -1){
				actual_end_column_tFileInputExcel_2 = excel_end_column_tFileInputExcel_2;
			}
			else{
				actual_end_column_tFileInputExcel_2 = end_column_tFileInputExcel_2 >	excel_end_column_tFileInputExcel_2 ? excel_end_column_tFileInputExcel_2 : end_column_tFileInputExcel_2;
			}
			org.apache.poi.ss.formula.eval.NumberEval ne_tFileInputExcel_2 = null;
			for(int i=0;i<tempRowLength_tFileInputExcel_2;i++){
				if(i + start_column_tFileInputExcel_2 < actual_end_column_tFileInputExcel_2){
					org.apache.poi.ss.usermodel.Cell cell_tFileInputExcel_2 = row_tFileInputExcel_2.getCell(i + start_column_tFileInputExcel_2);
					if(cell_tFileInputExcel_2!=null){
					switch (cell_tFileInputExcel_2.getCellType()) {
                        case STRING:
                            temp_row_tFileInputExcel_2[i] = cell_tFileInputExcel_2.getRichStringCellValue().getString();
                            break;
                        case NUMERIC:
                            if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell_tFileInputExcel_2)) {
									temp_row_tFileInputExcel_2[i] =cell_tFileInputExcel_2.getDateCellValue().toString();
                            } else {
                                temp_row_tFileInputExcel_2[i] = df_tFileInputExcel_2.format(cell_tFileInputExcel_2.getNumericCellValue());
                            }
                            break;
                        case BOOLEAN:
                            temp_row_tFileInputExcel_2[i] =String.valueOf(cell_tFileInputExcel_2.getBooleanCellValue());
                            break;
                        case FORMULA:
        					switch (cell_tFileInputExcel_2.getCachedFormulaResultType()) {
                                case STRING:
                                    temp_row_tFileInputExcel_2[i] = cell_tFileInputExcel_2.getRichStringCellValue().getString();
                                    break;
                                case NUMERIC:
                                    if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell_tFileInputExcel_2)) {
											temp_row_tFileInputExcel_2[i] =cell_tFileInputExcel_2.getDateCellValue().toString();
                                    } else {
	                                    ne_tFileInputExcel_2 = new org.apache.poi.ss.formula.eval.NumberEval(cell_tFileInputExcel_2.getNumericCellValue());
										temp_row_tFileInputExcel_2[i] = ne_tFileInputExcel_2.getStringValue();
                                    }
                                    break;
                                case BOOLEAN:
                                    temp_row_tFileInputExcel_2[i] =String.valueOf(cell_tFileInputExcel_2.getBooleanCellValue());
                                    break;
                                default:
                            		temp_row_tFileInputExcel_2[i] = "";
                            }
                            break;
                        default:
                            temp_row_tFileInputExcel_2[i] = "";
                        }
                	}
                	else{
                		temp_row_tFileInputExcel_2[i]="";
                	}

				}else{
					temp_row_tFileInputExcel_2[i]="";
				}
			}
			boolean whetherReject_tFileInputExcel_2 = false;
			row3 = new row3Struct();
			int curColNum_tFileInputExcel_2 = -1;
			String curColName_tFileInputExcel_2 = "";
			try{
							columnIndex_tFileInputExcel_2 = 0;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn";

				row3.newColumn = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 1;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn1";

				row3.newColumn1 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn1 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 2;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn2";

				row3.newColumn2 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn2 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 3;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn3";

				row3.newColumn3 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn3 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 4;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn4";

				row3.newColumn4 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn4 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 5;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn5";

				row3.newColumn5 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn5 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 6;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn6";

				row3.newColumn6 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn6 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 7;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn7";

				row3.newColumn7 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn7 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 8;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn8";

				row3.newColumn8 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn8 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 9;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn9";

				row3.newColumn9 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn9 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 10;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn10";

				row3.newColumn10 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn10 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 11;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn11";

				row3.newColumn11 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn11 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 12;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn12";

				row3.newColumn12 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn12 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 13;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn13";

				row3.newColumn13 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn13 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 14;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn14";

				row3.newColumn14 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn14 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 15;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn15";

				row3.newColumn15 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn15 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 16;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn16";

				row3.newColumn16 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn16 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 17;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn17";

				row3.newColumn17 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn17 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 18;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn18";

				row3.newColumn18 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn18 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 19;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn19";

				row3.newColumn19 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn19 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 20;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn20";

				row3.newColumn20 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn20 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 21;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn21";

				row3.newColumn21 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn21 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 22;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn22";

				row3.newColumn22 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn22 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 23;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn23";

				row3.newColumn23 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn23 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 24;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn24";

				row3.newColumn24 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn24 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 25;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn25";

				row3.newColumn25 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn25 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 26;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn26";

				row3.newColumn26 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn26 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 27;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn27";

				row3.newColumn27 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn27 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 28;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn28";

				row3.newColumn28 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn28 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 29;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn29";

				row3.newColumn29 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn29 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 30;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn30";

				row3.newColumn30 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn30 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 31;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn31";

				row3.newColumn31 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn31 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 32;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn32";

				row3.newColumn32 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn32 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 33;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn33";

				row3.newColumn33 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn33 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 34;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn34";

				row3.newColumn34 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn34 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 35;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn35";

				row3.newColumn35 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn35 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 36;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn36";

				row3.newColumn36 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn36 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 37;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn37";

				row3.newColumn37 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn37 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 38;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn38";

				row3.newColumn38 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn38 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 39;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn39";

				row3.newColumn39 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn39 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 40;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn40";

				row3.newColumn40 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn40 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 41;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn41";

				row3.newColumn41 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn41 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 42;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn42";

				row3.newColumn42 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn42 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 43;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn43";

				row3.newColumn43 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn43 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 44;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn44";

				row3.newColumn44 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn44 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}
							columnIndex_tFileInputExcel_2 = 45;
						
			if( temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
				curColNum_tFileInputExcel_2=columnIndex_tFileInputExcel_2 + start_column_tFileInputExcel_2 + 1;
				curColName_tFileInputExcel_2 = "newColumn45";

				row3.newColumn45 = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
			}else{
				row3.newColumn45 = null;
				emptyColumnCount_tFileInputExcel_2++;
			}

				nb_line_tFileInputExcel_2++;
				
			}catch(java.lang.Exception e){
			whetherReject_tFileInputExcel_2 = true;
					 System.err.println(e.getMessage());
					 row3 = null;
			}


		



 



/**
 * [tFileInputExcel_2 begin ] stop
 */
	
	/**
	 * [tFileInputExcel_2 main ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_2";

	

 


	tos_count_tFileInputExcel_2++;

/**
 * [tFileInputExcel_2 main ] stop
 */
	
	/**
	 * [tFileInputExcel_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_2";

	

 



/**
 * [tFileInputExcel_2 process_data_begin ] stop
 */
// Start of branch "row3"
if(row3 != null) { 



	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row3");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;
Var.Fn_BRAND = ((Map<String,String>)globalMap.get("fieldMap")).get("BRAND");
Var.Fn_SEASON = ((Map<String,String>)globalMap.get("fieldMap")).get("SEASON");
Var.Fn_CATEGORY = ((Map<String,String>)globalMap.get("fieldMap")).get("CATEGORY");
Var.Fn_REF = ((Map<String,String>)globalMap.get("fieldMap")).get("REF");
Var.Fn_DESCRIPTION = ((Map<String,String>)globalMap.get("fieldMap")).get("DESCRIPTION");
Var.Fn_STYLE = ((Map<String,String>)globalMap.get("fieldMap")).get("STYLE");
Var.Fn_COLOR = ((Map<String,String>)globalMap.get("fieldMap")).get("COLOR");
Var.Fn_FASHION = ((Map<String,String>)globalMap.get("fieldMap")).get("FASHION");
Var.Fn_STYLE_COLOR_LABEL = ((Map<String,String>)globalMap.get("fieldMap")).get("STYLE-COLOR-LABEL");
Var.Fn_COLOR_NAME = ((Map<String,String>)globalMap.get("fieldMap")).get("COLOR NAME");
Var.Fn_LBL = ((Map<String,String>)globalMap.get("fieldMap")).get("LBL");
Var.Fn_STYLE_COLOR = ((Map<String,String>)globalMap.get("fieldMap")).get("STYLE-COLOR");
Var.Fn_GENDER = ((Map<String,String>)globalMap.get("fieldMap")).get("GENDER");
Var.Fn_AGE_RANGE = ((Map<String,String>)globalMap.get("fieldMap")).get("AGE RANGE");
Var.Fn_SIZE_RANGE = ((Map<String,String>)globalMap.get("fieldMap")).get("SIZE RANGE");
Var.Fn_SIZE = ((Map<String,String>)globalMap.get("fieldMap")).get("SIZE");
Var.Fn_US_SIZE = ((Map<String,String>)globalMap.get("fieldMap")).get("US SIZE");
Var.Fn_CM_SIZE = ((Map<String,String>)globalMap.get("fieldMap")).get("CM SIZE");
Var.Fn_PRODUCT = ((Map<String,String>)globalMap.get("fieldMap")).get("PRODUCT");
Var.Fn_PRODUCT_STATUS = ((Map<String,String>)globalMap.get("fieldMap")).get("PRODUCT STATUS");
Var.Fn_PRODUCT_TIER = ((Map<String,String>)globalMap.get("fieldMap")).get("PRODUCT TIER");
Var.Fn_ACCT_EXCLUS = ((Map<String,String>)globalMap.get("fieldMap")).get("ACCT EXCLUS");
Var.Fn_SIZE_RATIO_SPLIT = ((Map<String,String>)globalMap.get("fieldMap")).get("% SIZE RATIO SPLIT");
Var.Fn_REC_SIZE_SPLIT = ((Map<String,String>)globalMap.get("fieldMap")).get("REC SIZE SPLIT");
Var.Fn_CARTON_QTY = ((Map<String,String>)globalMap.get("fieldMap")).get("CARTON QTY");
Var.Fn_ATTRIBUTE = ((Map<String,String>)globalMap.get("fieldMap")).get("Attribute");
Var.Fn_UNITS = ((Map<String,String>)globalMap.get("fieldMap")).get("UNITS");
Var.Fn_EUR_RRP = ((Map<String,String>)globalMap.get("fieldMap")).get("EUR RRP");
Var.Fn_EUR_WSP = ((Map<String,String>)globalMap.get("fieldMap")).get("EUR WSP");
Var.Fn_GBP_RRP = ((Map<String,String>)globalMap.get("fieldMap")).get("GBP RRP");
Var.Fn_GBP_WSP = ((Map<String,String>)globalMap.get("fieldMap")).get("GBP WSP");
Var.Fn_CHF_RRP = ((Map<String,String>)globalMap.get("fieldMap")).get("CHF RRP");
Var.Fn_CHF_WSP = ((Map<String,String>)globalMap.get("fieldMap")).get("CHF WSP");
Var.Fn_NOK_RRP = ((Map<String,String>)globalMap.get("fieldMap")).get("NOK RRP");
Var.Fn_NOK_WSP = ((Map<String,String>)globalMap.get("fieldMap")).get("NOK WSP");
Var.Fn_DKK_RRP = ((Map<String,String>)globalMap.get("fieldMap")).get("DKK RRP");
Var.Fn_DKK_WSP = ((Map<String,String>)globalMap.get("fieldMap")).get("DKK WSP");
Var.Fn_SEK_RRP = ((Map<String,String>)globalMap.get("fieldMap")).get("SEK RRP");
Var.Fn_SEK_WSP = ((Map<String,String>)globalMap.get("fieldMap")).get("SEK WSP");
Var.Fn_EUR_FINN_RRP = ((Map<String,String>)globalMap.get("fieldMap")).get("EURO (FINN) RRP");
Var.Fn_EUR_FINN_WSP = ((Map<String,String>)globalMap.get("fieldMap")).get("EURO (FINN) WSP");
Var.Fn_FABRICATION = ((Map<String,String>)globalMap.get("fieldMap")).get("FABRICATION");
Var.Fn_COO = ((Map<String,String>)globalMap.get("fieldMap")).get("COO");
Var.Fn_CUSTOM_TARIFF_CODE = ((Map<String,String>)globalMap.get("fieldMap")).get("CUSTOM TARIFF CODE");
Var.Fn_UPC = ((Map<String,String>)globalMap.get("fieldMap")).get("UPC");
Var.Fn_SMU_TYPE = ((Map<String,String>)globalMap.get("fieldMap")).get("SMU TYPE");// ###############################
        // ###############################
        // # Output tables

sortie_Excel = null;


// # Output table : 'sortie_Excel'
sortie_Excel_tmp.BRAND = (String) row3.getClass().getField(Var.Fn_BRAND).get(row3) ;
sortie_Excel_tmp.SEASON = (String) row3.getClass().getField(Var.Fn_SEASON).get(row3) ;
sortie_Excel_tmp.CATEGORY = (String) row3.getClass().getField(Var.Fn_CATEGORY).get(row3) ;
sortie_Excel_tmp.REF = (String) row3.getClass().getField(Var.Fn_REF).get(row3) ;
sortie_Excel_tmp.DESCRIPTION = (String) row3.getClass().getField(Var.Fn_DESCRIPTION).get(row3) ;
sortie_Excel_tmp.STYLE = (String) row3.getClass().getField(Var.Fn_STYLE).get(row3) ;
sortie_Excel_tmp.COLOR = (String) row3.getClass().getField(Var.Fn_COLOR).get(row3) ;
sortie_Excel_tmp.FASHION = (String) row3.getClass().getField(Var.Fn_FASHION).get(row3) ;
sortie_Excel_tmp.STYLECOLORLABEL = (String) row3.getClass().getField(Var.Fn_STYLE_COLOR_LABEL).get(row3) ;
sortie_Excel_tmp.COLORNAME = (String) row3.getClass().getField(Var.Fn_COLOR_NAME).get(row3) ;
sortie_Excel_tmp.LBL = (String) row3.getClass().getField(Var.Fn_LBL).get(row3) ;
sortie_Excel_tmp.STYLE_COLOR = (String) row3.getClass().getField(Var.Fn_STYLE_COLOR).get(row3) ;
sortie_Excel_tmp.GENDER = (String) row3.getClass().getField(Var.Fn_GENDER).get(row3) ;
sortie_Excel_tmp.AGE_RANGE = (String) row3.getClass().getField(Var.Fn_AGE_RANGE).get(row3) ;
sortie_Excel_tmp.SIZE_RANGE = (String) row3.getClass().getField(Var.Fn_SIZE_RANGE).get(row3) ;
sortie_Excel_tmp.SIZE = (String) row3.getClass().getField(Var.Fn_SIZE).get(row3) ;
sortie_Excel_tmp.US_SIZE = (String) row3.getClass().getField(Var.Fn_US_SIZE).get(row3) ;
sortie_Excel_tmp.CM_SIZE = (String) row3.getClass().getField(Var.Fn_CM_SIZE).get(row3) ;
sortie_Excel_tmp.PRODUCT = (String) row3.getClass().getField(Var.Fn_PRODUCT).get(row3) ;
sortie_Excel_tmp.PRODUCT_STATUS = (String) row3.getClass().getField(Var.Fn_PRODUCT_STATUS).get(row3) ;
sortie_Excel_tmp.PRODUCT_TIER = (String) row3.getClass().getField(Var.Fn_PRODUCT_TIER).get(row3) ;
sortie_Excel_tmp.ACCT_EXCLUS = (String) row3.getClass().getField(Var.Fn_ACCT_EXCLUS).get(row3) ;
sortie_Excel_tmp.SIZE_RATIO_SPLIT = (String) row3.getClass().getField(Var.Fn_SIZE_RATIO_SPLIT).get(row3) ;
sortie_Excel_tmp.REC_SIZE_SPLIT = (String) row3.getClass().getField(Var.Fn_REC_SIZE_SPLIT).get(row3) ;
sortie_Excel_tmp.CARTON_QTY = (String) row3.getClass().getField(Var.Fn_CARTON_QTY).get(row3) ;
sortie_Excel_tmp.ATTRIBUTE = (String) row3.getClass().getField(Var.Fn_ATTRIBUTE).get(row3) ;
sortie_Excel_tmp.UNITS = (String) row3.getClass().getField(Var.Fn_UNITS).get(row3) ;
sortie_Excel_tmp.EUR_RRP = (String) row3.getClass().getField(Var.Fn_EUR_RRP).get(row3) ;
sortie_Excel_tmp.EUR_WSP = (String) row3.getClass().getField(Var.Fn_EUR_WSP).get(row3) ;
sortie_Excel_tmp.GBP_RRP = (String) row3.getClass().getField(Var.Fn_GBP_RRP).get(row3) ;
sortie_Excel_tmp.GBP_WSP = (String) row3.getClass().getField(Var.Fn_GBP_WSP).get(row3) ;
sortie_Excel_tmp.CHF_RRP = (String) row3.getClass().getField(Var.Fn_CHF_RRP).get(row3) ;
sortie_Excel_tmp.CHF_WSP = (String) row3.getClass().getField(Var.Fn_CHF_WSP).get(row3) ;
sortie_Excel_tmp.NOK_RRP = (String) row3.getClass().getField(Var.Fn_NOK_RRP).get(row3) ;
sortie_Excel_tmp.NOK_WSP = (String) row3.getClass().getField(Var.Fn_NOK_WSP).get(row3) ;
sortie_Excel_tmp.DKK_RRP = (String) row3.getClass().getField(Var.Fn_DKK_RRP).get(row3) ;
sortie_Excel_tmp.DKK_WSP = (String) row3.getClass().getField(Var.Fn_DKK_WSP).get(row3) ;
sortie_Excel_tmp.SEK_RRP = (String) row3.getClass().getField(Var.Fn_SEK_RRP).get(row3) ;
sortie_Excel_tmp.SEK_WSP = (String) row3.getClass().getField(Var.Fn_SEK_WSP).get(row3) ;
sortie_Excel_tmp.EUR_FINN_RRP = (String) row3.getClass().getField(Var.Fn_EUR_FINN_RRP).get(row3) ;
sortie_Excel_tmp.EUR_FINN_WSP = (String) row3.getClass().getField(Var.Fn_EUR_FINN_WSP).get(row3) ;
sortie_Excel_tmp.FABRICATION = (String) row3.getClass().getField(Var.Fn_FABRICATION).get(row3) ;
sortie_Excel_tmp.COO = (String) row3.getClass().getField(Var.Fn_COO).get(row3) ;
sortie_Excel_tmp.CUSTOM_TARIFF_CODE = (String) row3.getClass().getField(Var.Fn_CUSTOM_TARIFF_CODE).get(row3) ;
sortie_Excel_tmp.UPC = (String) row3.getClass().getField(Var.Fn_UPC).get(row3) ;
sortie_Excel_tmp.SMU_TYPE = (String) row3.getClass().getField(Var.Fn_SMU_TYPE).get(row3) ;
sortie_Excel = sortie_Excel_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "sortie_Excel"
if(sortie_Excel != null) { 



	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_Excel");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

sortie_full = null;
sortie_product = null;


// # Output table : 'sortie_full'
sortie_full_tmp.BRAND = sortie_Excel.BRAND ;
sortie_full_tmp.SEASON = sortie_Excel.SEASON ;
sortie_full_tmp.CATEGORY = sortie_Excel.CATEGORY ;
sortie_full_tmp.REF = sortie_Excel.REF ;
sortie_full_tmp.DESCRIPTION = sortie_Excel.DESCRIPTION ;
sortie_full_tmp.STYLE = sortie_Excel.STYLE ;
sortie_full_tmp.COLOR = sortie_Excel.COLOR ;
sortie_full_tmp.FASHION = sortie_Excel.FASHION ;
sortie_full_tmp.STYLECOLORLABEL = sortie_Excel.STYLECOLORLABEL ;
sortie_full_tmp.COLORNAME = sortie_Excel.COLORNAME ;
sortie_full_tmp.LBL = sortie_Excel.LBL ;
sortie_full_tmp.STYLE_COLOR = sortie_Excel.STYLE_COLOR ;
sortie_full_tmp.GENDER = sortie_Excel.GENDER ;
sortie_full_tmp.AGE_RANGE = sortie_Excel.AGE_RANGE ;
sortie_full_tmp.SIZE_RANGE = sortie_Excel.SIZE_RANGE ;
sortie_full_tmp.SIZE = sortie_Excel.SIZE ;
sortie_full_tmp.US_SIZE = sortie_Excel.US_SIZE ;
sortie_full_tmp.CM_SIZE = sortie_Excel.CM_SIZE ;
sortie_full_tmp.PRODUCT = sortie_Excel.PRODUCT ;
sortie_full_tmp.PRODUCT_STATUS = sortie_Excel.PRODUCT_STATUS ;
sortie_full_tmp.PRODUCT_TIER = sortie_Excel.PRODUCT_TIER ;
sortie_full_tmp.ACCT_EXCLUS = sortie_Excel.ACCT_EXCLUS ;
sortie_full_tmp.SIZE_RATIO_SPLIT = sortie_Excel.SIZE_RATIO_SPLIT ;
sortie_full_tmp.REC_SIZE_SPLIT = sortie_Excel.REC_SIZE_SPLIT ;
sortie_full_tmp.CARTON_QTY = sortie_Excel.CARTON_QTY ;
sortie_full_tmp.ATTRIBUTE = sortie_Excel.ATTRIBUTE ;
sortie_full_tmp.UNITS = sortie_Excel.UNITS ;
sortie_full_tmp.EUR_RRP = sortie_Excel.EUR_RRP ;
sortie_full_tmp.EUR_WSP = sortie_Excel.EUR_WSP ;
sortie_full_tmp.GBP_RRP = sortie_Excel.GBP_RRP ;
sortie_full_tmp.GBP_WSP = sortie_Excel.GBP_WSP ;
sortie_full_tmp.CHF_RRP = sortie_Excel.CHF_RRP ;
sortie_full_tmp.CHF_WSP = sortie_Excel.CHF_WSP ;
sortie_full_tmp.NOK_RRP = sortie_Excel.NOK_RRP ;
sortie_full_tmp.NOK_WSP = sortie_Excel.NOK_WSP ;
sortie_full_tmp.DKK_RRP = sortie_Excel.DKK_RRP ;
sortie_full_tmp.DKK_WSP = sortie_Excel.DKK_WSP ;
sortie_full_tmp.SEK_RRP = sortie_Excel.SEK_RRP ;
sortie_full_tmp.SEK_WSP = sortie_Excel.SEK_WSP ;
sortie_full_tmp.EUR_FINN_RRP = sortie_Excel.EUR_FINN_RRP ;
sortie_full_tmp.EUR_FINN_WSP = sortie_Excel.EUR_FINN_WSP ;
sortie_full_tmp.FABRICATION = sortie_Excel.FABRICATION ;
sortie_full_tmp.COO = sortie_Excel.COO ;
sortie_full_tmp.CUSTOM_TARIFF_CODE = sortie_Excel.CUSTOM_TARIFF_CODE ;
sortie_full_tmp.UPC = sortie_Excel.UPC ;
sortie_full_tmp.SMU_TYPE = sortie_Excel.SMU_TYPE ;
sortie_full = sortie_full_tmp;

// # Output table : 'sortie_product'
sortie_product_tmp.KRFBRANDID = sortie_Excel.BRAND ;
sortie_product_tmp.PRODUCTSEARCHNAME = sortie_Excel.REF ;
sortie_product_tmp.PRODUCTDESCRIPTION = sortie_Excel.DESCRIPTION ;
sortie_product_tmp.PRODUCTNAME = sortie_Excel.DESCRIPTION ;
sortie_product_tmp.PRODUCTNUMBER = sortie_Excel.STYLE ;
sortie_product_tmp.RETAILPRODUCTCATEGORYNAME = sortie_Excel.PRODUCT != "" ?  StringHandling.RIGHT(sortie_Excel.PRODUCT,
StringHandling.LEN(sortie_Excel.PRODUCT)- StringHandling.INDEX(sortie_Excel.PRODUCT,"-") -1) : "" ;
sortie_product_tmp.PRODUCTSUBTYPE = "ProductMaster";
sortie_product_tmp.PRODUCTTYPE = "Item";
sortie_product_tmp.PRODUCTDIMENSIONGROUPNAME = "Clothing";
sortie_product_tmp.STORAGEDIMENSIONGROUPNAME = "Warehouse";
sortie_product_tmp.TRACKINGDIMENSIONGROUPNAME = "Batch";
sortie_product = sortie_product_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "sortie_full"
if(sortie_full != null) { 



	
	/**
	 * [tLogRow_2 main ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_full");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_2 = new StringBuilder();




   				
	    		if(sortie_full.BRAND != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full.BRAND)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full.SEASON != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full.SEASON)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full.CATEGORY != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full.CATEGORY)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full.REF != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full.REF)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full.DESCRIPTION != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full.DESCRIPTION)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full.STYLE != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full.STYLE)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full.COLOR != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full.COLOR)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full.FASHION != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full.FASHION)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full.STYLECOLORLABEL != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full.STYLECOLORLABEL)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full.COLORNAME != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full.COLORNAME)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full.LBL != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full.LBL)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full.STYLE_COLOR != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full.STYLE_COLOR)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full.GENDER != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full.GENDER)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full.AGE_RANGE != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full.AGE_RANGE)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full.SIZE_RANGE != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full.SIZE_RANGE)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full.SIZE != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full.SIZE)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full.US_SIZE != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full.US_SIZE)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full.CM_SIZE != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full.CM_SIZE)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full.PRODUCT != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full.PRODUCT)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full.PRODUCT_STATUS != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full.PRODUCT_STATUS)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full.PRODUCT_TIER != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full.PRODUCT_TIER)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full.ACCT_EXCLUS != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full.ACCT_EXCLUS)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full.SIZE_RATIO_SPLIT != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full.SIZE_RATIO_SPLIT)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full.REC_SIZE_SPLIT != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full.REC_SIZE_SPLIT)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full.CARTON_QTY != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full.CARTON_QTY)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full.ATTRIBUTE != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full.ATTRIBUTE)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full.UNITS != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full.UNITS)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full.EUR_RRP != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full.EUR_RRP)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full.EUR_WSP != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full.EUR_WSP)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full.GBP_RRP != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full.GBP_RRP)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full.GBP_WSP != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full.GBP_WSP)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full.CHF_RRP != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full.CHF_RRP)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full.CHF_WSP != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full.CHF_WSP)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full.NOK_RRP != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full.NOK_RRP)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full.NOK_WSP != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full.NOK_WSP)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full.DKK_RRP != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full.DKK_RRP)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full.DKK_WSP != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full.DKK_WSP)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full.SEK_RRP != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full.SEK_RRP)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full.SEK_WSP != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full.SEK_WSP)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full.EUR_FINN_RRP != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full.EUR_FINN_RRP)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full.EUR_FINN_WSP != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full.EUR_FINN_WSP)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full.FABRICATION != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full.FABRICATION)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full.COO != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full.COO)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full.CUSTOM_TARIFF_CODE != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full.CUSTOM_TARIFF_CODE)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full.UPC != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full.UPC)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(sortie_full.SMU_TYPE != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(sortie_full.SMU_TYPE)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_2 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_2);
                    }
                    consoleOut_tLogRow_2.println(strBuffer_tLogRow_2.toString());
                    consoleOut_tLogRow_2.flush();
                    nb_line_tLogRow_2++;
//////

//////                    
                    
///////////////////////    			

 
     row6 = sortie_full;


	tos_count_tLogRow_2++;

/**
 * [tLogRow_2 main ] stop
 */
	
	/**
	 * [tLogRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row6");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_3 = false;
		  boolean mainRowRejected_tMap_3 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row7" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow7 = false;
       		  	    	
       		  	    	
 							row7Struct row7ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_3) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_3 = false;
								
                        		    		row7HashKey.SHORTNAME = StringHandling.DOWNCASE(row6.COO); ;
                        		    		

								
		                        	row7HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row7.lookup( row7HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row7 != null && tHash_Lookup_row7.getCount(row7HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row7' and it contains more one result from keys :  row7.SHORTNAME = '" + row7HashKey.SHORTNAME + "'");
								} // G 071
							

							row7Struct row7 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row7Struct fromLookup_row7 = null;
							row7 = row7Default;
										 
							
								 
							
							
								if (tHash_Lookup_row7 !=null && tHash_Lookup_row7.hasNext()) { // G 099
								
							
								
								fromLookup_row7 = tHash_Lookup_row7.next();

							
							
								} // G 099
							
							

							if(fromLookup_row7 != null) {
								row7 = fromLookup_row7;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

copyOfsortie_full = null;
copyOfsortie_product = null;


// # Output table : 'copyOfsortie_full'
copyOfsortie_full_tmp.BRAND = row6.BRAND ;
copyOfsortie_full_tmp.SEASON = row6.SEASON ;
copyOfsortie_full_tmp.CATEGORY = row6.CATEGORY ;
copyOfsortie_full_tmp.REF = row6.REF ;
copyOfsortie_full_tmp.DESCRIPTION = row6.DESCRIPTION ;
copyOfsortie_full_tmp.STYLE = row6.STYLE ;
copyOfsortie_full_tmp.COLOR = row6.COLOR ;
copyOfsortie_full_tmp.FASHION = row6.FASHION ;
copyOfsortie_full_tmp.STYLECOLORLABEL = row6.STYLECOLORLABEL ;
copyOfsortie_full_tmp.COLORNAME = row6.COLORNAME ;
copyOfsortie_full_tmp.LBL = row6.LBL ;
copyOfsortie_full_tmp.STYLE_COLOR = row6.STYLE_COLOR ;
copyOfsortie_full_tmp.GENDER = row6.GENDER ;
copyOfsortie_full_tmp.AGE_RANGE = row6.AGE_RANGE ;
copyOfsortie_full_tmp.SIZE_RANGE = row6.SIZE_RANGE ;
copyOfsortie_full_tmp.SIZE = row6.SIZE ;
copyOfsortie_full_tmp.US_SIZE = row6.US_SIZE ;
copyOfsortie_full_tmp.CM_SIZE = row6.CM_SIZE ;
copyOfsortie_full_tmp.PRODUCT = row6.PRODUCT ;
copyOfsortie_full_tmp.PRODUCT_STATUS = row6.PRODUCT_STATUS ;
copyOfsortie_full_tmp.PRODUCT_TIER = row6.PRODUCT_TIER ;
copyOfsortie_full_tmp.ACCT_EXCLUS = row6.ACCT_EXCLUS ;
copyOfsortie_full_tmp.SIZE_RATIO_SPLIT = row6.SIZE_RATIO_SPLIT ;
copyOfsortie_full_tmp.REC_SIZE_SPLIT = row6.REC_SIZE_SPLIT ;
copyOfsortie_full_tmp.CARTON_QTY = row6.CARTON_QTY ;
copyOfsortie_full_tmp.ATTRIBUTE = row6.ATTRIBUTE ;
copyOfsortie_full_tmp.UNITS = row6.UNITS ;
copyOfsortie_full_tmp.EUR_RRP = row6.EUR_RRP ;
copyOfsortie_full_tmp.EUR_WSP = row6.EUR_WSP ;
copyOfsortie_full_tmp.GBP_RRP = row6.GBP_RRP ;
copyOfsortie_full_tmp.GBP_WSP = row6.GBP_WSP ;
copyOfsortie_full_tmp.CHF_RRP = row6.CHF_RRP ;
copyOfsortie_full_tmp.CHF_WSP = row6.CHF_WSP ;
copyOfsortie_full_tmp.NOK_RRP = row6.NOK_RRP ;
copyOfsortie_full_tmp.NOK_WSP = row6.NOK_WSP ;
copyOfsortie_full_tmp.DKK_RRP = row6.DKK_RRP ;
copyOfsortie_full_tmp.DKK_WSP = row6.DKK_WSP ;
copyOfsortie_full_tmp.SEK_RRP = row6.SEK_RRP ;
copyOfsortie_full_tmp.SEK_WSP = row6.SEK_WSP ;
copyOfsortie_full_tmp.EUR_FINN_RRP = row6.EUR_FINN_RRP ;
copyOfsortie_full_tmp.EUR_FINN_WSP = row6.EUR_FINN_WSP ;
copyOfsortie_full_tmp.FABRICATION = row6.FABRICATION ;
copyOfsortie_full_tmp.COO = row7.COUNTRYREGIONID ;
copyOfsortie_full_tmp.CUSTOM_TARIFF_CODE = row6.CUSTOM_TARIFF_CODE ;
copyOfsortie_full_tmp.UPC = row6.UPC ;
copyOfsortie_full_tmp.SMU_TYPE = row6.SMU_TYPE ;
copyOfsortie_full = copyOfsortie_full_tmp;

// # Output table : 'copyOfsortie_product'
copyOfsortie_product_tmp.PRODUCTLIFECYCLESEASONCODE = row6.SEASON ;
copyOfsortie_product_tmp.BOMUNITSYMBOL = "PCS";
copyOfsortie_product_tmp.INVENTORYRESERVATIONHIERARCHYNAME = "Batch";
copyOfsortie_product_tmp.INVENTORYUNITSYMBOL = "PCS";
copyOfsortie_product_tmp.ITEMMODELGROUPID = "FIFO_Batch";
copyOfsortie_product_tmp.ITEMNUMBER = row6.STYLE ;
copyOfsortie_product_tmp.KRFBRANDID = row6.BRAND ;
copyOfsortie_product_tmp.KRFCOLORDIMLAYOUT = "Vertical";
copyOfsortie_product_tmp.KRFSIZEDIMLAYOUT = "Horizontal";
copyOfsortie_product_tmp.KRFSTYLEDIMLAYOUT = "Filter";
copyOfsortie_product_tmp.KRFAUTOOPENMATRIX = "Yes";
copyOfsortie_product_tmp.ORIGINCOUNTRYREGIONID = row7.COUNTRYREGIONID ;
copyOfsortie_product_tmp.PRODUCTCOVERAGEGROUPID = "Group";
copyOfsortie_product_tmp.PRODUCTDIMENSIONGROUPNAME = "Clothing";
copyOfsortie_product_tmp.PRODUCTGROUPID = "SALEABLE";
copyOfsortie_product_tmp.PRODUCTIONTYPE = "None";
copyOfsortie_product_tmp.PRODUCTNUMBER = row6.STYLE ;
copyOfsortie_product_tmp.PRODUCTSEARCHNAME = row6.REF ;
copyOfsortie_product_tmp.PRODUCTSUBTYPE = "ProductMaster";
copyOfsortie_product_tmp.PRODUCTTYPE = "Item";
copyOfsortie_product_tmp.PURCHASEUNITSYMBOL = "PCS";
copyOfsortie_product_tmp.SALESUNITSYMBOL = "PCS";
copyOfsortie_product_tmp.SEARCHNAME = row6.REF ;
copyOfsortie_product_tmp.STORAGEDIMENSIONGROUPNAME = "Warehouse";
copyOfsortie_product_tmp.TRACKINGDIMENSIONGROUPNAME = "Batch";
copyOfsortie_product_tmp.PRODUCTLIFECYCLESTATEID = "ACTIVE";
copyOfsortie_product_tmp.PURCHASESALESTAXITEMGROUPCODE = "STD_D";
copyOfsortie_product_tmp.SALESSALESTAXITEMGROUPCODE = "STD_D";
copyOfsortie_product_tmp.UNITCONVERSIONSEQUENCEGROUPID = "PCS only";
copyOfsortie_product = copyOfsortie_product_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "copyOfsortie_full"
if(copyOfsortie_full != null) { 



	
	/**
	 * [tMap_5 main ] start
	 */

	

	
	
	currentComponent="tMap_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfsortie_full");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_5 = false;
		  boolean mainRowRejected_tMap_5 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
        // ###############################
        // # Output tables

copyOfcopyOfsortie_full = null;
copyOfcopyOfsortie_product = null;


// # Output table : 'copyOfcopyOfsortie_full'
copyOfcopyOfsortie_full_tmp.BRAND = copyOfsortie_full.BRAND ;
copyOfcopyOfsortie_full_tmp.SEASON = copyOfsortie_full.SEASON ;
copyOfcopyOfsortie_full_tmp.CATEGORY = copyOfsortie_full.CATEGORY ;
copyOfcopyOfsortie_full_tmp.REF = copyOfsortie_full.REF ;
copyOfcopyOfsortie_full_tmp.DESCRIPTION = copyOfsortie_full.DESCRIPTION ;
copyOfcopyOfsortie_full_tmp.STYLE = copyOfsortie_full.STYLE ;
copyOfcopyOfsortie_full_tmp.COLOR = copyOfsortie_full.COLOR ;
copyOfcopyOfsortie_full_tmp.FASHION = copyOfsortie_full.FASHION ;
copyOfcopyOfsortie_full_tmp.STYLECOLORLABEL = copyOfsortie_full.STYLECOLORLABEL ;
copyOfcopyOfsortie_full_tmp.COLORNAME = copyOfsortie_full.COLORNAME ;
copyOfcopyOfsortie_full_tmp.LBL = copyOfsortie_full.LBL ;
copyOfcopyOfsortie_full_tmp.STYLE_COLOR = copyOfsortie_full.STYLE_COLOR ;
copyOfcopyOfsortie_full_tmp.GENDER = copyOfsortie_full.GENDER ;
copyOfcopyOfsortie_full_tmp.AGE_RANGE = copyOfsortie_full.AGE_RANGE ;
copyOfcopyOfsortie_full_tmp.SIZE_RANGE = copyOfsortie_full.SIZE_RANGE ;
copyOfcopyOfsortie_full_tmp.SIZE = copyOfsortie_full.SIZE ;
copyOfcopyOfsortie_full_tmp.US_SIZE = copyOfsortie_full.US_SIZE ;
copyOfcopyOfsortie_full_tmp.CM_SIZE = copyOfsortie_full.CM_SIZE ;
copyOfcopyOfsortie_full_tmp.PRODUCT = copyOfsortie_full.PRODUCT ;
copyOfcopyOfsortie_full_tmp.PRODUCT_STATUS = copyOfsortie_full.PRODUCT_STATUS ;
copyOfcopyOfsortie_full_tmp.PRODUCT_TIER = copyOfsortie_full.PRODUCT_TIER ;
copyOfcopyOfsortie_full_tmp.ACCT_EXCLUS = copyOfsortie_full.ACCT_EXCLUS ;
copyOfcopyOfsortie_full_tmp.SIZE_RATIO_SPLIT = copyOfsortie_full.SIZE_RATIO_SPLIT ;
copyOfcopyOfsortie_full_tmp.REC_SIZE_SPLIT = copyOfsortie_full.REC_SIZE_SPLIT ;
copyOfcopyOfsortie_full_tmp.CARTON_QTY = copyOfsortie_full.CARTON_QTY ;
copyOfcopyOfsortie_full_tmp.ATTRIBUTE = copyOfsortie_full.ATTRIBUTE ;
copyOfcopyOfsortie_full_tmp.UNITS = copyOfsortie_full.UNITS ;
copyOfcopyOfsortie_full_tmp.EUR_RRP = copyOfsortie_full.EUR_RRP ;
copyOfcopyOfsortie_full_tmp.EUR_WSP = copyOfsortie_full.EUR_WSP ;
copyOfcopyOfsortie_full_tmp.GBP_RRP = copyOfsortie_full.GBP_RRP ;
copyOfcopyOfsortie_full_tmp.GBP_WSP = copyOfsortie_full.GBP_WSP ;
copyOfcopyOfsortie_full_tmp.CHF_RRP = copyOfsortie_full.CHF_RRP ;
copyOfcopyOfsortie_full_tmp.CHF_WSP = copyOfsortie_full.CHF_WSP ;
copyOfcopyOfsortie_full_tmp.NOK_RRP = copyOfsortie_full.NOK_RRP ;
copyOfcopyOfsortie_full_tmp.NOK_WSP = copyOfsortie_full.NOK_WSP ;
copyOfcopyOfsortie_full_tmp.DKK_RRP = copyOfsortie_full.DKK_RRP ;
copyOfcopyOfsortie_full_tmp.DKK_WSP = copyOfsortie_full.DKK_WSP ;
copyOfcopyOfsortie_full_tmp.SEK_RRP = copyOfsortie_full.SEK_RRP ;
copyOfcopyOfsortie_full_tmp.SEK_WSP = copyOfsortie_full.SEK_WSP ;
copyOfcopyOfsortie_full_tmp.EUR_FINN_RRP = copyOfsortie_full.EUR_FINN_RRP ;
copyOfcopyOfsortie_full_tmp.EUR_FINN_WSP = copyOfsortie_full.EUR_FINN_WSP ;
copyOfcopyOfsortie_full_tmp.FABRICATION = copyOfsortie_full.FABRICATION ;
copyOfcopyOfsortie_full_tmp.COO = copyOfsortie_full.COO ;
copyOfcopyOfsortie_full_tmp.CUSTOM_TARIFF_CODE = copyOfsortie_full.CUSTOM_TARIFF_CODE ;
copyOfcopyOfsortie_full_tmp.UPC = copyOfsortie_full.UPC ;
copyOfcopyOfsortie_full_tmp.SMU_TYPE = copyOfsortie_full.SMU_TYPE ;
copyOfcopyOfsortie_full = copyOfcopyOfsortie_full_tmp;

// # Output table : 'copyOfcopyOfsortie_product'
copyOfcopyOfsortie_product_tmp.PRODUCTNUMBER = copyOfsortie_full.STYLE ;
copyOfcopyOfsortie_product_tmp.ATTRIBUTETYPENAME = "Gender";
copyOfcopyOfsortie_product_tmp.ATTRIBUTENAME = "Gender";
copyOfcopyOfsortie_product_tmp.TEXTVALUE = copyOfsortie_full.GENDER ;
copyOfcopyOfsortie_product = copyOfcopyOfsortie_product_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_5 = false;










 


	tos_count_tMap_5++;

/**
 * [tMap_5 main ] stop
 */
	
	/**
	 * [tMap_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_begin ] stop
 */
// Start of branch "copyOfcopyOfsortie_full"
if(copyOfcopyOfsortie_full != null) { 



	
	/**
	 * [tMap_6 main ] start
	 */

	

	
	
	currentComponent="tMap_6";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfcopyOfsortie_full");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_6 = false;
		  boolean mainRowRejected_tMap_6 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
        // ###############################
        // # Output tables

copyOfcopyOfcopyOfsortie_full = null;
copyOfcopyOfcopyOfsortie_product = null;


// # Output table : 'copyOfcopyOfcopyOfsortie_full'
copyOfcopyOfcopyOfsortie_full_tmp.BRAND = copyOfcopyOfsortie_full.BRAND ;
copyOfcopyOfcopyOfsortie_full_tmp.SEASON = copyOfcopyOfsortie_full.SEASON ;
copyOfcopyOfcopyOfsortie_full_tmp.CATEGORY = copyOfcopyOfsortie_full.CATEGORY ;
copyOfcopyOfcopyOfsortie_full_tmp.REF = copyOfcopyOfsortie_full.REF ;
copyOfcopyOfcopyOfsortie_full_tmp.DESCRIPTION = copyOfcopyOfsortie_full.DESCRIPTION ;
copyOfcopyOfcopyOfsortie_full_tmp.STYLE = copyOfcopyOfsortie_full.STYLE ;
copyOfcopyOfcopyOfsortie_full_tmp.COLOR = copyOfcopyOfsortie_full.COLOR ;
copyOfcopyOfcopyOfsortie_full_tmp.FASHION = copyOfcopyOfsortie_full.FASHION ;
copyOfcopyOfcopyOfsortie_full_tmp.STYLECOLORLABEL = copyOfcopyOfsortie_full.STYLECOLORLABEL ;
copyOfcopyOfcopyOfsortie_full_tmp.COLORNAME = copyOfcopyOfsortie_full.COLORNAME ;
copyOfcopyOfcopyOfsortie_full_tmp.LBL = copyOfcopyOfsortie_full.LBL ;
copyOfcopyOfcopyOfsortie_full_tmp.STYLE_COLOR = copyOfcopyOfsortie_full.STYLE_COLOR ;
copyOfcopyOfcopyOfsortie_full_tmp.GENDER = copyOfcopyOfsortie_full.GENDER ;
copyOfcopyOfcopyOfsortie_full_tmp.AGE_RANGE = copyOfcopyOfsortie_full.AGE_RANGE ;
copyOfcopyOfcopyOfsortie_full_tmp.SIZE_RANGE = copyOfcopyOfsortie_full.SIZE_RANGE ;
copyOfcopyOfcopyOfsortie_full_tmp.SIZE = copyOfcopyOfsortie_full.SIZE ;
copyOfcopyOfcopyOfsortie_full_tmp.US_SIZE = copyOfcopyOfsortie_full.US_SIZE ;
copyOfcopyOfcopyOfsortie_full_tmp.CM_SIZE = copyOfcopyOfsortie_full.CM_SIZE ;
copyOfcopyOfcopyOfsortie_full_tmp.PRODUCT = copyOfcopyOfsortie_full.PRODUCT ;
copyOfcopyOfcopyOfsortie_full_tmp.PRODUCT_STATUS = copyOfcopyOfsortie_full.PRODUCT_STATUS ;
copyOfcopyOfcopyOfsortie_full_tmp.PRODUCT_TIER = copyOfcopyOfsortie_full.PRODUCT_TIER ;
copyOfcopyOfcopyOfsortie_full_tmp.ACCT_EXCLUS = copyOfcopyOfsortie_full.ACCT_EXCLUS ;
copyOfcopyOfcopyOfsortie_full_tmp.SIZE_RATIO_SPLIT = copyOfcopyOfsortie_full.SIZE_RATIO_SPLIT ;
copyOfcopyOfcopyOfsortie_full_tmp.REC_SIZE_SPLIT = copyOfcopyOfsortie_full.REC_SIZE_SPLIT ;
copyOfcopyOfcopyOfsortie_full_tmp.CARTON_QTY = copyOfcopyOfsortie_full.CARTON_QTY ;
copyOfcopyOfcopyOfsortie_full_tmp.ATTRIBUTE = copyOfcopyOfsortie_full.ATTRIBUTE ;
copyOfcopyOfcopyOfsortie_full_tmp.UNITS = copyOfcopyOfsortie_full.UNITS ;
copyOfcopyOfcopyOfsortie_full_tmp.EUR_RRP = copyOfcopyOfsortie_full.EUR_RRP ;
copyOfcopyOfcopyOfsortie_full_tmp.EUR_WSP = copyOfcopyOfsortie_full.EUR_WSP ;
copyOfcopyOfcopyOfsortie_full_tmp.GBP_RRP = copyOfcopyOfsortie_full.GBP_RRP ;
copyOfcopyOfcopyOfsortie_full_tmp.GBP_WSP = copyOfcopyOfsortie_full.GBP_WSP ;
copyOfcopyOfcopyOfsortie_full_tmp.CHF_RRP = copyOfcopyOfsortie_full.CHF_RRP ;
copyOfcopyOfcopyOfsortie_full_tmp.CHF_WSP = copyOfcopyOfsortie_full.CHF_WSP ;
copyOfcopyOfcopyOfsortie_full_tmp.NOK_RRP = copyOfcopyOfsortie_full.NOK_RRP ;
copyOfcopyOfcopyOfsortie_full_tmp.NOK_WSP = copyOfcopyOfsortie_full.NOK_WSP ;
copyOfcopyOfcopyOfsortie_full_tmp.DKK_RRP = copyOfcopyOfsortie_full.DKK_RRP ;
copyOfcopyOfcopyOfsortie_full_tmp.DKK_WSP = copyOfcopyOfsortie_full.DKK_WSP ;
copyOfcopyOfcopyOfsortie_full_tmp.SEK_RRP = copyOfcopyOfsortie_full.SEK_RRP ;
copyOfcopyOfcopyOfsortie_full_tmp.SEK_WSP = copyOfcopyOfsortie_full.SEK_WSP ;
copyOfcopyOfcopyOfsortie_full_tmp.EUR_FINN_RRP = copyOfcopyOfsortie_full.EUR_FINN_RRP ;
copyOfcopyOfcopyOfsortie_full_tmp.EUR_FINN_WSP = copyOfcopyOfsortie_full.EUR_FINN_WSP ;
copyOfcopyOfcopyOfsortie_full_tmp.FABRICATION = copyOfcopyOfsortie_full.FABRICATION ;
copyOfcopyOfcopyOfsortie_full_tmp.COO = copyOfcopyOfsortie_full.COO ;
copyOfcopyOfcopyOfsortie_full_tmp.CUSTOM_TARIFF_CODE = copyOfcopyOfsortie_full.CUSTOM_TARIFF_CODE ;
copyOfcopyOfcopyOfsortie_full_tmp.UPC = copyOfcopyOfsortie_full.UPC ;
copyOfcopyOfcopyOfsortie_full_tmp.SMU_TYPE = copyOfcopyOfsortie_full.SMU_TYPE ;
copyOfcopyOfcopyOfsortie_full = copyOfcopyOfcopyOfsortie_full_tmp;

// # Output table : 'copyOfcopyOfcopyOfsortie_product'
copyOfcopyOfcopyOfsortie_product_tmp.PRODUCTNUMBER = copyOfcopyOfsortie_full.STYLE ;
copyOfcopyOfcopyOfsortie_product_tmp.ATTRIBUTETYPENAME = "Age Range";
copyOfcopyOfcopyOfsortie_product_tmp.ATTRIBUTENAME = "Age Range";
copyOfcopyOfcopyOfsortie_product_tmp.TEXTVALUE = copyOfcopyOfsortie_full.AGE_RANGE ;
copyOfcopyOfcopyOfsortie_product = copyOfcopyOfcopyOfsortie_product_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_6 = false;










 


	tos_count_tMap_6++;

/**
 * [tMap_6 main ] stop
 */
	
	/**
	 * [tMap_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 process_data_begin ] stop
 */
// Start of branch "copyOfcopyOfcopyOfsortie_full"
if(copyOfcopyOfcopyOfsortie_full != null) { 



	
	/**
	 * [tMap_7 main ] start
	 */

	

	
	
	currentComponent="tMap_7";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfcopyOfcopyOfsortie_full");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_7 = false;
		  boolean mainRowRejected_tMap_7 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_7__Struct Var = Var__tMap_7;// ###############################
        // ###############################
        // # Output tables

copyOfcopyOfcopyOfcopyOfsortie_full = null;
copyOfcopyOfcopyOfcopyOfsortie_product = null;


// # Output table : 'copyOfcopyOfcopyOfcopyOfsortie_full'
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.BRAND = copyOfcopyOfcopyOfsortie_full.BRAND ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.SEASON = copyOfcopyOfcopyOfsortie_full.SEASON ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.CATEGORY = copyOfcopyOfcopyOfsortie_full.CATEGORY ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.REF = copyOfcopyOfcopyOfsortie_full.REF ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.DESCRIPTION = copyOfcopyOfcopyOfsortie_full.DESCRIPTION ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.STYLE = copyOfcopyOfcopyOfsortie_full.STYLE ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.COLOR = copyOfcopyOfcopyOfsortie_full.COLOR ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.FASHION = copyOfcopyOfcopyOfsortie_full.FASHION ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.STYLECOLORLABEL = copyOfcopyOfcopyOfsortie_full.STYLECOLORLABEL ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.COLORNAME = copyOfcopyOfcopyOfsortie_full.COLORNAME ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.LBL = copyOfcopyOfcopyOfsortie_full.LBL ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.STYLE_COLOR = copyOfcopyOfcopyOfsortie_full.STYLE_COLOR ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.GENDER = copyOfcopyOfcopyOfsortie_full.GENDER ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.AGE_RANGE = copyOfcopyOfcopyOfsortie_full.AGE_RANGE ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.SIZE_RANGE = copyOfcopyOfcopyOfsortie_full.SIZE_RANGE ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.SIZE = copyOfcopyOfcopyOfsortie_full.SIZE ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.US_SIZE = copyOfcopyOfcopyOfsortie_full.US_SIZE ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.CM_SIZE = copyOfcopyOfcopyOfsortie_full.CM_SIZE ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.PRODUCT = copyOfcopyOfcopyOfsortie_full.PRODUCT ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.PRODUCT_STATUS = copyOfcopyOfcopyOfsortie_full.PRODUCT_STATUS ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.PRODUCT_TIER = copyOfcopyOfcopyOfsortie_full.PRODUCT_TIER ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.ACCT_EXCLUS = copyOfcopyOfcopyOfsortie_full.ACCT_EXCLUS ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.SIZE_RATIO_SPLIT = copyOfcopyOfcopyOfsortie_full.SIZE_RATIO_SPLIT ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.REC_SIZE_SPLIT = copyOfcopyOfcopyOfsortie_full.REC_SIZE_SPLIT ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.CARTON_QTY = copyOfcopyOfcopyOfsortie_full.CARTON_QTY ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.ATTRIBUTE = copyOfcopyOfcopyOfsortie_full.ATTRIBUTE ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.UNITS = copyOfcopyOfcopyOfsortie_full.UNITS ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.EUR_RRP = copyOfcopyOfcopyOfsortie_full.EUR_RRP ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.EUR_WSP = copyOfcopyOfcopyOfsortie_full.EUR_WSP ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.GBP_RRP = copyOfcopyOfcopyOfsortie_full.GBP_RRP ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.GBP_WSP = copyOfcopyOfcopyOfsortie_full.GBP_WSP ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.CHF_RRP = copyOfcopyOfcopyOfsortie_full.CHF_RRP ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.CHF_WSP = copyOfcopyOfcopyOfsortie_full.CHF_WSP ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.NOK_RRP = copyOfcopyOfcopyOfsortie_full.NOK_RRP ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.NOK_WSP = copyOfcopyOfcopyOfsortie_full.NOK_WSP ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.DKK_RRP = copyOfcopyOfcopyOfsortie_full.DKK_RRP ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.DKK_WSP = copyOfcopyOfcopyOfsortie_full.DKK_WSP ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.SEK_RRP = copyOfcopyOfcopyOfsortie_full.SEK_RRP ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.SEK_WSP = copyOfcopyOfcopyOfsortie_full.SEK_WSP ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.EUR_FINN_RRP = copyOfcopyOfcopyOfsortie_full.EUR_FINN_RRP ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.EUR_FINN_WSP = copyOfcopyOfcopyOfsortie_full.EUR_FINN_WSP ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.FABRICATION = copyOfcopyOfcopyOfsortie_full.FABRICATION ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.COO = copyOfcopyOfcopyOfsortie_full.COO ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.CUSTOM_TARIFF_CODE = copyOfcopyOfcopyOfsortie_full.CUSTOM_TARIFF_CODE ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.UPC = copyOfcopyOfcopyOfsortie_full.UPC ;
copyOfcopyOfcopyOfcopyOfsortie_full_tmp.SMU_TYPE = copyOfcopyOfcopyOfsortie_full.SMU_TYPE ;
copyOfcopyOfcopyOfcopyOfsortie_full = copyOfcopyOfcopyOfcopyOfsortie_full_tmp;

// # Output table : 'copyOfcopyOfcopyOfcopyOfsortie_product'
copyOfcopyOfcopyOfcopyOfsortie_product_tmp.PRODUCTNUMBER = copyOfcopyOfcopyOfsortie_full.STYLE ;
copyOfcopyOfcopyOfcopyOfsortie_product_tmp.ATTRIBUTETYPENAME = "Size Range";
copyOfcopyOfcopyOfcopyOfsortie_product_tmp.ATTRIBUTENAME = "Size Range";
copyOfcopyOfcopyOfcopyOfsortie_product_tmp.TEXTVALUE = copyOfcopyOfcopyOfsortie_full.SIZE_RANGE ;
copyOfcopyOfcopyOfcopyOfsortie_product = copyOfcopyOfcopyOfcopyOfsortie_product_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_7 = false;










 


	tos_count_tMap_7++;

/**
 * [tMap_7 main ] stop
 */
	
	/**
	 * [tMap_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 process_data_begin ] stop
 */
// Start of branch "copyOfcopyOfcopyOfcopyOfsortie_full"
if(copyOfcopyOfcopyOfcopyOfsortie_full != null) { 



	
	/**
	 * [tMap_8 main ] start
	 */

	

	
	
	currentComponent="tMap_8";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfcopyOfcopyOfcopyOfsortie_full");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_8 = false;
		  boolean mainRowRejected_tMap_8 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_8__Struct Var = Var__tMap_8;// ###############################
        // ###############################
        // # Output tables

copyOfcopyOfcopyOfcopyOfcopyOfsortie_full = null;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_product = null;


// # Output table : 'copyOfcopyOfcopyOfcopyOfcopyOfsortie_full'
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.BRAND = copyOfcopyOfcopyOfcopyOfsortie_full.BRAND ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.SEASON = copyOfcopyOfcopyOfcopyOfsortie_full.SEASON ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.CATEGORY = copyOfcopyOfcopyOfcopyOfsortie_full.CATEGORY ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.REF = copyOfcopyOfcopyOfcopyOfsortie_full.REF ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.DESCRIPTION = copyOfcopyOfcopyOfcopyOfsortie_full.DESCRIPTION ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.STYLE = copyOfcopyOfcopyOfcopyOfsortie_full.STYLE ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.COLOR = copyOfcopyOfcopyOfcopyOfsortie_full.COLOR ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.FASHION = copyOfcopyOfcopyOfcopyOfsortie_full.FASHION ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.STYLECOLORLABEL = copyOfcopyOfcopyOfcopyOfsortie_full.STYLECOLORLABEL ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.COLORNAME = copyOfcopyOfcopyOfcopyOfsortie_full.COLORNAME ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.LBL = copyOfcopyOfcopyOfcopyOfsortie_full.LBL ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.STYLE_COLOR = copyOfcopyOfcopyOfcopyOfsortie_full.STYLE_COLOR ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.GENDER = copyOfcopyOfcopyOfcopyOfsortie_full.GENDER ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.AGE_RANGE = copyOfcopyOfcopyOfcopyOfsortie_full.AGE_RANGE ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.SIZE_RANGE = copyOfcopyOfcopyOfcopyOfsortie_full.SIZE_RANGE ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.SIZE = copyOfcopyOfcopyOfcopyOfsortie_full.SIZE ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.US_SIZE = copyOfcopyOfcopyOfcopyOfsortie_full.US_SIZE ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.CM_SIZE = copyOfcopyOfcopyOfcopyOfsortie_full.CM_SIZE ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.PRODUCT = copyOfcopyOfcopyOfcopyOfsortie_full.PRODUCT ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.PRODUCT_STATUS = copyOfcopyOfcopyOfcopyOfsortie_full.PRODUCT_STATUS ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.PRODUCT_TIER = copyOfcopyOfcopyOfcopyOfsortie_full.PRODUCT_TIER ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.ACCT_EXCLUS = copyOfcopyOfcopyOfcopyOfsortie_full.ACCT_EXCLUS ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.SIZE_RATIO_SPLIT = copyOfcopyOfcopyOfcopyOfsortie_full.SIZE_RATIO_SPLIT ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.REC_SIZE_SPLIT = copyOfcopyOfcopyOfcopyOfsortie_full.REC_SIZE_SPLIT ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.CARTON_QTY = copyOfcopyOfcopyOfcopyOfsortie_full.CARTON_QTY ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.ATTRIBUTE = copyOfcopyOfcopyOfcopyOfsortie_full.ATTRIBUTE ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.UNITS = copyOfcopyOfcopyOfcopyOfsortie_full.UNITS ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.EUR_RRP = copyOfcopyOfcopyOfcopyOfsortie_full.EUR_RRP ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.EUR_WSP = copyOfcopyOfcopyOfcopyOfsortie_full.EUR_WSP ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.GBP_RRP = copyOfcopyOfcopyOfcopyOfsortie_full.GBP_RRP ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.GBP_WSP = copyOfcopyOfcopyOfcopyOfsortie_full.GBP_WSP ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.CHF_RRP = copyOfcopyOfcopyOfcopyOfsortie_full.CHF_RRP ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.CHF_WSP = copyOfcopyOfcopyOfcopyOfsortie_full.CHF_WSP ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.NOK_RRP = copyOfcopyOfcopyOfcopyOfsortie_full.NOK_RRP ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.NOK_WSP = copyOfcopyOfcopyOfcopyOfsortie_full.NOK_WSP ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.DKK_RRP = copyOfcopyOfcopyOfcopyOfsortie_full.DKK_RRP ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.DKK_WSP = copyOfcopyOfcopyOfcopyOfsortie_full.DKK_WSP ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.SEK_RRP = copyOfcopyOfcopyOfcopyOfsortie_full.SEK_RRP ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.SEK_WSP = copyOfcopyOfcopyOfcopyOfsortie_full.SEK_WSP ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.EUR_FINN_RRP = copyOfcopyOfcopyOfcopyOfsortie_full.EUR_FINN_RRP ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.EUR_FINN_WSP = copyOfcopyOfcopyOfcopyOfsortie_full.EUR_FINN_WSP ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.FABRICATION = copyOfcopyOfcopyOfcopyOfsortie_full.FABRICATION ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.COO = copyOfcopyOfcopyOfcopyOfsortie_full.COO ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.CUSTOM_TARIFF_CODE = copyOfcopyOfcopyOfcopyOfsortie_full.CUSTOM_TARIFF_CODE ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.UPC = copyOfcopyOfcopyOfcopyOfsortie_full.UPC ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.SMU_TYPE = copyOfcopyOfcopyOfcopyOfsortie_full.SMU_TYPE ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_full = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp;

// # Output table : 'copyOfcopyOfcopyOfcopyOfcopyOfsortie_product'
copyOfcopyOfcopyOfcopyOfcopyOfsortie_product_tmp.PRODUCTNUMBER = copyOfcopyOfcopyOfcopyOfsortie_full.STYLE ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_product_tmp.ATTRIBUTETYPENAME = "US Size";
copyOfcopyOfcopyOfcopyOfcopyOfsortie_product_tmp.ATTRIBUTENAME = "US Size";
copyOfcopyOfcopyOfcopyOfcopyOfsortie_product_tmp.TEXTVALUE = copyOfcopyOfcopyOfcopyOfsortie_full.US_SIZE ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_product = copyOfcopyOfcopyOfcopyOfcopyOfsortie_product_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_8 = false;










 


	tos_count_tMap_8++;

/**
 * [tMap_8 main ] stop
 */
	
	/**
	 * [tMap_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_begin ] stop
 */
// Start of branch "copyOfcopyOfcopyOfcopyOfcopyOfsortie_full"
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_full != null) { 



	
	/**
	 * [tMap_9 main ] start
	 */

	

	
	
	currentComponent="tMap_9";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfcopyOfcopyOfcopyOfcopyOfsortie_full");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_9 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_9 = false;
		  boolean mainRowRejected_tMap_9 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_9__Struct Var = Var__tMap_9;// ###############################
        // ###############################
        // # Output tables

copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full = null;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product = null;


// # Output table : 'copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full'
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.BRAND = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.BRAND ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.SEASON = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.SEASON ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.CATEGORY = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.CATEGORY ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.REF = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.REF ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.DESCRIPTION = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.DESCRIPTION ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.STYLE = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.STYLE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.COLOR = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.COLOR ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.FASHION = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.FASHION ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.STYLECOLORLABEL = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.STYLECOLORLABEL ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.COLORNAME = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.COLORNAME ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.LBL = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.LBL ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.STYLE_COLOR = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.STYLE_COLOR ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.GENDER = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.GENDER ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.AGE_RANGE = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.AGE_RANGE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.SIZE_RANGE = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.SIZE_RANGE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.SIZE = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.SIZE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.US_SIZE = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.US_SIZE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.CM_SIZE = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.CM_SIZE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.PRODUCT = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.PRODUCT ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.PRODUCT_STATUS = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.PRODUCT_STATUS ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.PRODUCT_TIER = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.PRODUCT_TIER ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.ACCT_EXCLUS = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.ACCT_EXCLUS ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.SIZE_RATIO_SPLIT = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.SIZE_RATIO_SPLIT ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.REC_SIZE_SPLIT = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.REC_SIZE_SPLIT ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.CARTON_QTY = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.CARTON_QTY ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.ATTRIBUTE = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.ATTRIBUTE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.UNITS = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.UNITS ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.EUR_RRP = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.EUR_RRP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.EUR_WSP = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.EUR_WSP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.GBP_RRP = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.GBP_RRP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.GBP_WSP = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.GBP_WSP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.CHF_RRP = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.CHF_RRP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.CHF_WSP = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.CHF_WSP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.NOK_RRP = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.NOK_RRP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.NOK_WSP = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.NOK_WSP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.DKK_RRP = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.DKK_RRP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.DKK_WSP = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.DKK_WSP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.SEK_RRP = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.SEK_RRP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.SEK_WSP = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.SEK_WSP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.EUR_FINN_RRP = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.EUR_FINN_RRP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.EUR_FINN_WSP = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.EUR_FINN_WSP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.FABRICATION = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.FABRICATION ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.COO = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.COO ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.CUSTOM_TARIFF_CODE = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.CUSTOM_TARIFF_CODE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.UPC = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.UPC ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.SMU_TYPE = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.SMU_TYPE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp;

// # Output table : 'copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product'
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product_tmp.PRODUCTNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.STYLE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product_tmp.ATTRIBUTETYPENAME = "CM Size";
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product_tmp.ATTRIBUTENAME = "CM Size";
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product_tmp.TEXTVALUE = copyOfcopyOfcopyOfcopyOfcopyOfsortie_full.CM_SIZE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_9 = false;










 


	tos_count_tMap_9++;

/**
 * [tMap_9 main ] stop
 */
	
	/**
	 * [tMap_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

 



/**
 * [tMap_9 process_data_begin ] stop
 */
// Start of branch "copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full"
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full != null) { 



	
	/**
	 * [tMap_10 main ] start
	 */

	

	
	
	currentComponent="tMap_10";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_10 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_10 = false;
		  boolean mainRowRejected_tMap_10 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_10__Struct Var = Var__tMap_10;// ###############################
        // ###############################
        // # Output tables

copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full = null;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product = null;


// # Output table : 'copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full'
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.BRAND = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.BRAND ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.SEASON = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.SEASON ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.CATEGORY = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.CATEGORY ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.REF = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.REF ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.DESCRIPTION = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.DESCRIPTION ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.STYLE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.STYLE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.COLOR = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.COLOR ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.FASHION = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.FASHION ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.STYLECOLORLABEL = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.STYLECOLORLABEL ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.COLORNAME = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.COLORNAME ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.LBL = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.LBL ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.STYLE_COLOR = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.STYLE_COLOR ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.GENDER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.GENDER ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.AGE_RANGE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.AGE_RANGE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.SIZE_RANGE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.SIZE_RANGE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.SIZE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.SIZE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.US_SIZE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.US_SIZE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.CM_SIZE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.CM_SIZE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.PRODUCT = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.PRODUCT ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.PRODUCT_STATUS = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.PRODUCT_STATUS ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.PRODUCT_TIER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.PRODUCT_TIER ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.ACCT_EXCLUS = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.ACCT_EXCLUS ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.SIZE_RATIO_SPLIT = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.SIZE_RATIO_SPLIT ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.REC_SIZE_SPLIT = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.REC_SIZE_SPLIT ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.CARTON_QTY = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.CARTON_QTY ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.ATTRIBUTE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.ATTRIBUTE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.UNITS = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.UNITS ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.EUR_RRP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.EUR_RRP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.EUR_WSP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.EUR_WSP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.GBP_RRP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.GBP_RRP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.GBP_WSP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.GBP_WSP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.CHF_RRP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.CHF_RRP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.CHF_WSP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.CHF_WSP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.NOK_RRP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.NOK_RRP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.NOK_WSP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.NOK_WSP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.DKK_RRP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.DKK_RRP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.DKK_WSP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.DKK_WSP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.SEK_RRP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.SEK_RRP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.SEK_WSP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.SEK_WSP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.EUR_FINN_RRP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.EUR_FINN_RRP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.EUR_FINN_WSP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.EUR_FINN_WSP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.FABRICATION = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.FABRICATION ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.COO = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.COO ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.CUSTOM_TARIFF_CODE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.CUSTOM_TARIFF_CODE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.UPC = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.UPC ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.SMU_TYPE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.SMU_TYPE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp;

// # Output table : 'copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product'
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product_tmp.PRODUCTNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.STYLE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product_tmp.ATTRIBUTETYPENAME = "Product Type";
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product_tmp.ATTRIBUTENAME = "Product Type";
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product_tmp.TEXTVALUE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.PRODUCT_TIER ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_10 = false;










 


	tos_count_tMap_10++;

/**
 * [tMap_10 main ] stop
 */
	
	/**
	 * [tMap_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_10";

	

 



/**
 * [tMap_10 process_data_begin ] stop
 */
// Start of branch "copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full"
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full != null) { 



	
	/**
	 * [tMap_11 main ] start
	 */

	

	
	
	currentComponent="tMap_11";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_11 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_11 = false;
		  boolean mainRowRejected_tMap_11 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_11__Struct Var = Var__tMap_11;// ###############################
        // ###############################
        // # Output tables

copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full = null;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product = null;


// # Output table : 'copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full'
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.BRAND = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.BRAND ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.SEASON = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.SEASON ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.CATEGORY = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.CATEGORY ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.REF = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.REF ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.DESCRIPTION = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.DESCRIPTION ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.STYLE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.STYLE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.COLOR = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.COLOR ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.FASHION = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.FASHION ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.STYLECOLORLABEL = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.STYLECOLORLABEL ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.COLORNAME = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.COLORNAME ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.LBL = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.LBL ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.STYLE_COLOR = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.STYLE_COLOR ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.GENDER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.GENDER ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.AGE_RANGE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.AGE_RANGE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.SIZE_RANGE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.SIZE_RANGE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.SIZE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.SIZE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.US_SIZE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.US_SIZE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.CM_SIZE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.CM_SIZE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.PRODUCT = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.PRODUCT ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.PRODUCT_STATUS = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.PRODUCT_STATUS ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.PRODUCT_TIER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.PRODUCT_TIER ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.ACCT_EXCLUS = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.ACCT_EXCLUS ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.SIZE_RATIO_SPLIT = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.SIZE_RATIO_SPLIT ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.REC_SIZE_SPLIT = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.REC_SIZE_SPLIT ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.CARTON_QTY = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.CARTON_QTY ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.ATTRIBUTE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.ATTRIBUTE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.UNITS = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.UNITS ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.EUR_RRP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.EUR_RRP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.EUR_WSP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.EUR_WSP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.GBP_RRP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.GBP_RRP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.GBP_WSP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.GBP_WSP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.CHF_RRP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.CHF_RRP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.CHF_WSP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.CHF_WSP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.NOK_RRP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.NOK_RRP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.NOK_WSP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.NOK_WSP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.DKK_RRP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.DKK_RRP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.DKK_WSP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.DKK_WSP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.SEK_RRP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.SEK_RRP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.SEK_WSP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.SEK_WSP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.EUR_FINN_RRP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.EUR_FINN_RRP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.EUR_FINN_WSP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.EUR_FINN_WSP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.FABRICATION = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.FABRICATION ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.COO = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.COO ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.CUSTOM_TARIFF_CODE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.CUSTOM_TARIFF_CODE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.UPC = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.UPC ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.SMU_TYPE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.SMU_TYPE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp;

// # Output table : 'copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product'
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product_tmp.PRODUCTNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.STYLE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product_tmp.ATTRIBUTETYPENAME = "Attribut";
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product_tmp.ATTRIBUTENAME = "Attribut";
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product_tmp.TEXTVALUE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.ATTRIBUTE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_11 = false;










 


	tos_count_tMap_11++;

/**
 * [tMap_11 main ] stop
 */
	
	/**
	 * [tMap_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_11";

	

 



/**
 * [tMap_11 process_data_begin ] stop
 */
// Start of branch "copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full"
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full != null) { 



	
	/**
	 * [tMap_12 main ] start
	 */

	

	
	
	currentComponent="tMap_12";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_12 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_12 = false;
		  boolean mainRowRejected_tMap_12 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_12__Struct Var = Var__tMap_12;// ###############################
        // ###############################
        // # Output tables

copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full = null;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product = null;


// # Output table : 'copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full'
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.BRAND = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.BRAND ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.SEASON = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.SEASON ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.CATEGORY = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.CATEGORY ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.REF = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.REF ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.DESCRIPTION = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.DESCRIPTION ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.STYLE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.STYLE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.COLOR = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.COLOR ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.FASHION = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.FASHION ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.STYLECOLORLABEL = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.STYLECOLORLABEL ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.COLORNAME = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.COLORNAME ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.LBL = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.LBL ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.STYLE_COLOR = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.STYLE_COLOR ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.GENDER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.GENDER ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.AGE_RANGE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.AGE_RANGE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.SIZE_RANGE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.SIZE_RANGE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.SIZE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.SIZE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.US_SIZE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.US_SIZE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.CM_SIZE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.CM_SIZE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.PRODUCT = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.PRODUCT ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.PRODUCT_STATUS = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.PRODUCT_STATUS ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.PRODUCT_TIER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.PRODUCT_TIER ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.ACCT_EXCLUS = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.ACCT_EXCLUS ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.SIZE_RATIO_SPLIT = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.SIZE_RATIO_SPLIT ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.REC_SIZE_SPLIT = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.REC_SIZE_SPLIT ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.CARTON_QTY = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.CARTON_QTY ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.ATTRIBUTE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.ATTRIBUTE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.UNITS = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.UNITS ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.EUR_RRP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.EUR_RRP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.EUR_WSP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.EUR_WSP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.GBP_RRP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.GBP_RRP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.GBP_WSP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.GBP_WSP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.CHF_RRP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.CHF_RRP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.CHF_WSP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.CHF_WSP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.NOK_RRP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.NOK_RRP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.NOK_WSP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.NOK_WSP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.DKK_RRP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.DKK_RRP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.DKK_WSP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.DKK_WSP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.SEK_RRP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.SEK_RRP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.SEK_WSP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.SEK_WSP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.EUR_FINN_RRP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.EUR_FINN_RRP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.EUR_FINN_WSP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.EUR_FINN_WSP ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.FABRICATION = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.FABRICATION ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.COO = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.COO ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.CUSTOM_TARIFF_CODE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.CUSTOM_TARIFF_CODE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.UPC = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.UPC ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp.SMU_TYPE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.SMU_TYPE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full_tmp;

// # Output table : 'copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product'
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product_tmp.PRODUCTNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.STYLE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product_tmp.ATTRIBUTETYPENAME = "Fabrication";
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product_tmp.ATTRIBUTENAME = "Fabrication";
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product_tmp.TEXTVALUE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.FABRICATION ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_12 = false;










 


	tos_count_tMap_12++;

/**
 * [tMap_12 main ] stop
 */
	
	/**
	 * [tMap_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_12";

	

 



/**
 * [tMap_12 process_data_begin ] stop
 */
// Start of branch "copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full"
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full != null) { 



	
	/**
	 * [tMap_13 main ] start
	 */

	

	
	
	currentComponent="tMap_13";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_13 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_13 = false;
		  boolean mainRowRejected_tMap_13 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_13__Struct Var = Var__tMap_13;// ###############################
        // ###############################
        // # Output tables

sortie_full_ = null;
sortie_color = null;


// # Output table : 'sortie_full_'
sortie_full__tmp.BRAND = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.BRAND ;
sortie_full__tmp.SEASON = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.SEASON ;
sortie_full__tmp.CATEGORY = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.CATEGORY ;
sortie_full__tmp.REF = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.REF ;
sortie_full__tmp.DESCRIPTION = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.DESCRIPTION ;
sortie_full__tmp.STYLE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.STYLE ;
sortie_full__tmp.COLOR = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.COLOR ;
sortie_full__tmp.FASHION = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.FASHION ;
sortie_full__tmp.STYLECOLORLABEL = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.STYLECOLORLABEL ;
sortie_full__tmp.COLORNAME = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.COLORNAME ;
sortie_full__tmp.LBL = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.LBL ;
sortie_full__tmp.STYLE_COLOR = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.STYLE_COLOR ;
sortie_full__tmp.GENDER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.GENDER ;
sortie_full__tmp.AGE_RANGE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.AGE_RANGE ;
sortie_full__tmp.SIZE_RANGE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.SIZE_RANGE ;
sortie_full__tmp.SIZE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.SIZE ;
sortie_full__tmp.US_SIZE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.US_SIZE ;
sortie_full__tmp.CM_SIZE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.CM_SIZE ;
sortie_full__tmp.PRODUCT = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.PRODUCT ;
sortie_full__tmp.PRODUCT_STATUS = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.PRODUCT_STATUS ;
sortie_full__tmp.PRODUCT_TIER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.PRODUCT_TIER ;
sortie_full__tmp.ACCT_EXCLUS = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.ACCT_EXCLUS ;
sortie_full__tmp.SIZE_RATIO_SPLIT = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.SIZE_RATIO_SPLIT ;
sortie_full__tmp.REC_SIZE_SPLIT = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.REC_SIZE_SPLIT ;
sortie_full__tmp.CARTON_QTY = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.CARTON_QTY ;
sortie_full__tmp.ATTRIBUTE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.ATTRIBUTE ;
sortie_full__tmp.UNITS = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.UNITS ;
sortie_full__tmp.EUR_RRP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.EUR_RRP ;
sortie_full__tmp.EUR_WSP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.EUR_WSP ;
sortie_full__tmp.GBP_RRP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.GBP_RRP ;
sortie_full__tmp.GBP_WSP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.GBP_WSP ;
sortie_full__tmp.CHF_RRP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.CHF_RRP ;
sortie_full__tmp.CHF_WSP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.CHF_WSP ;
sortie_full__tmp.NOK_RRP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.NOK_RRP ;
sortie_full__tmp.NOK_WSP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.NOK_WSP ;
sortie_full__tmp.DKK_RRP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.DKK_RRP ;
sortie_full__tmp.DKK_WSP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.DKK_WSP ;
sortie_full__tmp.SEK_RRP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.SEK_RRP ;
sortie_full__tmp.SEK_WSP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.SEK_WSP ;
sortie_full__tmp.EUR_FINN_RRP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.EUR_FINN_RRP ;
sortie_full__tmp.EUR_FINN_WSP = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.EUR_FINN_WSP ;
sortie_full__tmp.FABRICATION = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.FABRICATION ;
sortie_full__tmp.COO = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.COO ;
sortie_full__tmp.CUSTOM_TARIFF_CODE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.CUSTOM_TARIFF_CODE ;
sortie_full__tmp.UPC = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.UPC ;
sortie_full__tmp.SMU_TYPE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.SMU_TYPE ;
sortie_full_ = sortie_full__tmp;

// # Output table : 'sortie_color'
sortie_color_tmp.PRODUCTMASTERNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.STYLE ;
sortie_color_tmp.PRODUCTCOLORID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full.COLOR ;
sortie_color = sortie_color_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_13 = false;










 


	tos_count_tMap_13++;

/**
 * [tMap_13 main ] stop
 */
	
	/**
	 * [tMap_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_13";

	

 



/**
 * [tMap_13 process_data_begin ] stop
 */
// Start of branch "sortie_full_"
if(sortie_full_ != null) { 



	
	/**
	 * [tMap_14 main ] start
	 */

	

	
	
	currentComponent="tMap_14";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_full_");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_14 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_14 = false;
		  boolean mainRowRejected_tMap_14 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_14__Struct Var = Var__tMap_14;// ###############################
        // ###############################
        // # Output tables

sortie_full_size = null;
sortie_size = null;


// # Output table : 'sortie_full_size'
sortie_full_size_tmp.BRAND = sortie_full_.BRAND ;
sortie_full_size_tmp.SEASON = sortie_full_.SEASON ;
sortie_full_size_tmp.CATEGORY = sortie_full_.CATEGORY ;
sortie_full_size_tmp.REF = sortie_full_.REF ;
sortie_full_size_tmp.DESCRIPTION = sortie_full_.DESCRIPTION ;
sortie_full_size_tmp.STYLE = sortie_full_.STYLE ;
sortie_full_size_tmp.COLOR = sortie_full_.COLOR ;
sortie_full_size_tmp.FASHION = sortie_full_.FASHION ;
sortie_full_size_tmp.STYLECOLORLABEL = sortie_full_.STYLECOLORLABEL ;
sortie_full_size_tmp.COLORNAME = sortie_full_.COLORNAME ;
sortie_full_size_tmp.LBL = sortie_full_.LBL ;
sortie_full_size_tmp.STYLE_COLOR = sortie_full_.STYLE_COLOR ;
sortie_full_size_tmp.GENDER = sortie_full_.GENDER ;
sortie_full_size_tmp.AGE_RANGE = sortie_full_.AGE_RANGE ;
sortie_full_size_tmp.SIZE_RANGE = sortie_full_.SIZE_RANGE ;
sortie_full_size_tmp.SIZE = sortie_full_.SIZE ;
sortie_full_size_tmp.US_SIZE = sortie_full_.US_SIZE ;
sortie_full_size_tmp.CM_SIZE = sortie_full_.CM_SIZE ;
sortie_full_size_tmp.PRODUCT = sortie_full_.PRODUCT ;
sortie_full_size_tmp.PRODUCT_STATUS = sortie_full_.PRODUCT_STATUS ;
sortie_full_size_tmp.PRODUCT_TIER = sortie_full_.PRODUCT_TIER ;
sortie_full_size_tmp.ACCT_EXCLUS = sortie_full_.ACCT_EXCLUS ;
sortie_full_size_tmp.SIZE_RATIO_SPLIT = sortie_full_.SIZE_RATIO_SPLIT ;
sortie_full_size_tmp.REC_SIZE_SPLIT = sortie_full_.REC_SIZE_SPLIT ;
sortie_full_size_tmp.CARTON_QTY = sortie_full_.CARTON_QTY ;
sortie_full_size_tmp.ATTRIBUTE = sortie_full_.ATTRIBUTE ;
sortie_full_size_tmp.UNITS = sortie_full_.UNITS ;
sortie_full_size_tmp.EUR_RRP = sortie_full_.EUR_RRP ;
sortie_full_size_tmp.EUR_WSP = sortie_full_.EUR_WSP ;
sortie_full_size_tmp.GBP_RRP = sortie_full_.GBP_RRP ;
sortie_full_size_tmp.GBP_WSP = sortie_full_.GBP_WSP ;
sortie_full_size_tmp.CHF_RRP = sortie_full_.CHF_RRP ;
sortie_full_size_tmp.CHF_WSP = sortie_full_.CHF_WSP ;
sortie_full_size_tmp.NOK_RRP = sortie_full_.NOK_RRP ;
sortie_full_size_tmp.NOK_WSP = sortie_full_.NOK_WSP ;
sortie_full_size_tmp.DKK_RRP = sortie_full_.DKK_RRP ;
sortie_full_size_tmp.DKK_WSP = sortie_full_.DKK_WSP ;
sortie_full_size_tmp.SEK_RRP = sortie_full_.SEK_RRP ;
sortie_full_size_tmp.SEK_WSP = sortie_full_.SEK_WSP ;
sortie_full_size_tmp.EUR_FINN_RRP = sortie_full_.EUR_FINN_RRP ;
sortie_full_size_tmp.EUR_FINN_WSP = sortie_full_.EUR_FINN_WSP ;
sortie_full_size_tmp.FABRICATION = sortie_full_.FABRICATION ;
sortie_full_size_tmp.COO = sortie_full_.COO ;
sortie_full_size_tmp.CUSTOM_TARIFF_CODE = sortie_full_.CUSTOM_TARIFF_CODE ;
sortie_full_size_tmp.UPC = sortie_full_.UPC ;
sortie_full_size_tmp.SMU_TYPE = sortie_full_.SMU_TYPE ;
sortie_full_size = sortie_full_size_tmp;

// # Output table : 'sortie_size'
sortie_size_tmp.PRODUCTMASTERNUMBER = sortie_full_.STYLE ;
sortie_size_tmp.PRODUCTSIZEID = sortie_full_.SIZE ;
sortie_size = sortie_size_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_14 = false;










 


	tos_count_tMap_14++;

/**
 * [tMap_14 main ] stop
 */
	
	/**
	 * [tMap_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_14";

	

 



/**
 * [tMap_14 process_data_begin ] stop
 */
// Start of branch "sortie_full_size"
if(sortie_full_size != null) { 



	
	/**
	 * [tMap_15 main ] start
	 */

	

	
	
	currentComponent="tMap_15";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_full_size");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_15 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_15 = false;
		  boolean mainRowRejected_tMap_15 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_15__Struct Var = Var__tMap_15;// ###############################
        // ###############################
        // # Output tables

sortie_full_fits = null;
sortie_fits = null;


// # Output table : 'sortie_full_fits'
sortie_full_fits_tmp.BRAND = sortie_full_size.BRAND ;
sortie_full_fits_tmp.SEASON = sortie_full_size.SEASON ;
sortie_full_fits_tmp.CATEGORY = sortie_full_size.CATEGORY ;
sortie_full_fits_tmp.REF = sortie_full_size.REF ;
sortie_full_fits_tmp.DESCRIPTION = sortie_full_size.DESCRIPTION ;
sortie_full_fits_tmp.STYLE = sortie_full_size.STYLE ;
sortie_full_fits_tmp.COLOR = sortie_full_size.COLOR ;
sortie_full_fits_tmp.FASHION = sortie_full_size.FASHION ;
sortie_full_fits_tmp.STYLECOLORLABEL = sortie_full_size.STYLECOLORLABEL ;
sortie_full_fits_tmp.COLORNAME = sortie_full_size.COLORNAME ;
sortie_full_fits_tmp.LBL = sortie_full_size.LBL ;
sortie_full_fits_tmp.STYLE_COLOR = sortie_full_size.STYLE_COLOR ;
sortie_full_fits_tmp.GENDER = sortie_full_size.GENDER ;
sortie_full_fits_tmp.AGE_RANGE = sortie_full_size.AGE_RANGE ;
sortie_full_fits_tmp.SIZE_RANGE = sortie_full_size.SIZE_RANGE ;
sortie_full_fits_tmp.SIZE = sortie_full_size.SIZE ;
sortie_full_fits_tmp.US_SIZE = sortie_full_size.US_SIZE ;
sortie_full_fits_tmp.CM_SIZE = sortie_full_size.CM_SIZE ;
sortie_full_fits_tmp.PRODUCT = sortie_full_size.PRODUCT ;
sortie_full_fits_tmp.PRODUCT_STATUS = sortie_full_size.PRODUCT_STATUS ;
sortie_full_fits_tmp.PRODUCT_TIER = sortie_full_size.PRODUCT_TIER ;
sortie_full_fits_tmp.ACCT_EXCLUS = sortie_full_size.ACCT_EXCLUS ;
sortie_full_fits_tmp.SIZE_RATIO_SPLIT = sortie_full_size.SIZE_RATIO_SPLIT ;
sortie_full_fits_tmp.REC_SIZE_SPLIT = sortie_full_size.REC_SIZE_SPLIT ;
sortie_full_fits_tmp.CARTON_QTY = sortie_full_size.CARTON_QTY ;
sortie_full_fits_tmp.ATTRIBUTE = sortie_full_size.ATTRIBUTE ;
sortie_full_fits_tmp.UNITS = sortie_full_size.UNITS ;
sortie_full_fits_tmp.EUR_RRP = sortie_full_size.EUR_RRP ;
sortie_full_fits_tmp.EUR_WSP = sortie_full_size.EUR_WSP ;
sortie_full_fits_tmp.GBP_RRP = sortie_full_size.GBP_RRP ;
sortie_full_fits_tmp.GBP_WSP = sortie_full_size.GBP_WSP ;
sortie_full_fits_tmp.CHF_RRP = sortie_full_size.CHF_RRP ;
sortie_full_fits_tmp.CHF_WSP = sortie_full_size.CHF_WSP ;
sortie_full_fits_tmp.NOK_RRP = sortie_full_size.NOK_RRP ;
sortie_full_fits_tmp.NOK_WSP = sortie_full_size.NOK_WSP ;
sortie_full_fits_tmp.DKK_RRP = sortie_full_size.DKK_RRP ;
sortie_full_fits_tmp.DKK_WSP = sortie_full_size.DKK_WSP ;
sortie_full_fits_tmp.SEK_RRP = sortie_full_size.SEK_RRP ;
sortie_full_fits_tmp.SEK_WSP = sortie_full_size.SEK_WSP ;
sortie_full_fits_tmp.EUR_FINN_RRP = sortie_full_size.EUR_FINN_RRP ;
sortie_full_fits_tmp.EUR_FINN_WSP = sortie_full_size.EUR_FINN_WSP ;
sortie_full_fits_tmp.FABRICATION = sortie_full_size.FABRICATION ;
sortie_full_fits_tmp.COO = sortie_full_size.COO ;
sortie_full_fits_tmp.CUSTOM_TARIFF_CODE = sortie_full_size.CUSTOM_TARIFF_CODE ;
sortie_full_fits_tmp.UPC = sortie_full_size.UPC ;
sortie_full_fits_tmp.SMU_TYPE = sortie_full_size.SMU_TYPE ;
sortie_full_fits = sortie_full_fits_tmp;

// # Output table : 'sortie_fits'
sortie_fits_tmp.PRODUCTMASTERNUMBER = sortie_full_size.STYLE ;
sortie_fits_tmp.PRODUCTSTYLEID = StringHandling.DOWNCASE(sortie_full_size.BRAND ) == "levis" ? "STOCKLEV" : "STOCK" ;
sortie_fits = sortie_fits_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_15 = false;










 


	tos_count_tMap_15++;

/**
 * [tMap_15 main ] stop
 */
	
	/**
	 * [tMap_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_15";

	

 



/**
 * [tMap_15 process_data_begin ] stop
 */
// Start of branch "sortie_full_fits"
if(sortie_full_fits != null) { 



	
	/**
	 * [tMap_16 main ] start
	 */

	

	
	
	currentComponent="tMap_16";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_full_fits");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_16 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_16 = false;
		  boolean mainRowRejected_tMap_16 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_16__Struct Var = Var__tMap_16;// ###############################
        // ###############################
        // # Output tables

sortie_full_product_variant = null;
sortie_product_variant = null;


// # Output table : 'sortie_full_product_variant'
sortie_full_product_variant_tmp.BRAND = sortie_full_fits.BRAND ;
sortie_full_product_variant_tmp.SEASON = sortie_full_fits.SEASON ;
sortie_full_product_variant_tmp.CATEGORY = sortie_full_fits.CATEGORY ;
sortie_full_product_variant_tmp.REF = sortie_full_fits.REF ;
sortie_full_product_variant_tmp.DESCRIPTION = sortie_full_fits.DESCRIPTION ;
sortie_full_product_variant_tmp.STYLE = sortie_full_fits.STYLE ;
sortie_full_product_variant_tmp.COLOR = sortie_full_fits.COLOR ;
sortie_full_product_variant_tmp.FASHION = sortie_full_fits.FASHION ;
sortie_full_product_variant_tmp.STYLECOLORLABEL = sortie_full_fits.STYLECOLORLABEL ;
sortie_full_product_variant_tmp.COLORNAME = sortie_full_fits.COLORNAME ;
sortie_full_product_variant_tmp.LBL = sortie_full_fits.LBL ;
sortie_full_product_variant_tmp.STYLE_COLOR = sortie_full_fits.STYLE_COLOR ;
sortie_full_product_variant_tmp.GENDER = sortie_full_fits.GENDER ;
sortie_full_product_variant_tmp.AGE_RANGE = sortie_full_fits.AGE_RANGE ;
sortie_full_product_variant_tmp.SIZE_RANGE = sortie_full_fits.SIZE_RANGE ;
sortie_full_product_variant_tmp.SIZE = sortie_full_fits.SIZE ;
sortie_full_product_variant_tmp.US_SIZE = sortie_full_fits.US_SIZE ;
sortie_full_product_variant_tmp.CM_SIZE = sortie_full_fits.CM_SIZE ;
sortie_full_product_variant_tmp.PRODUCT = sortie_full_fits.PRODUCT ;
sortie_full_product_variant_tmp.PRODUCT_STATUS = sortie_full_fits.PRODUCT_STATUS ;
sortie_full_product_variant_tmp.PRODUCT_TIER = sortie_full_fits.PRODUCT_TIER ;
sortie_full_product_variant_tmp.ACCT_EXCLUS = sortie_full_fits.ACCT_EXCLUS ;
sortie_full_product_variant_tmp.SIZE_RATIO_SPLIT = sortie_full_fits.SIZE_RATIO_SPLIT ;
sortie_full_product_variant_tmp.REC_SIZE_SPLIT = sortie_full_fits.REC_SIZE_SPLIT ;
sortie_full_product_variant_tmp.CARTON_QTY = sortie_full_fits.CARTON_QTY ;
sortie_full_product_variant_tmp.ATTRIBUTE = sortie_full_fits.ATTRIBUTE ;
sortie_full_product_variant_tmp.UNITS = sortie_full_fits.UNITS ;
sortie_full_product_variant_tmp.EUR_RRP = sortie_full_fits.EUR_RRP ;
sortie_full_product_variant_tmp.EUR_WSP = sortie_full_fits.EUR_WSP ;
sortie_full_product_variant_tmp.GBP_RRP = sortie_full_fits.GBP_RRP ;
sortie_full_product_variant_tmp.GBP_WSP = sortie_full_fits.GBP_WSP ;
sortie_full_product_variant_tmp.CHF_RRP = sortie_full_fits.CHF_RRP ;
sortie_full_product_variant_tmp.CHF_WSP = sortie_full_fits.CHF_WSP ;
sortie_full_product_variant_tmp.NOK_RRP = sortie_full_fits.NOK_RRP ;
sortie_full_product_variant_tmp.NOK_WSP = sortie_full_fits.NOK_WSP ;
sortie_full_product_variant_tmp.DKK_RRP = sortie_full_fits.DKK_RRP ;
sortie_full_product_variant_tmp.DKK_WSP = sortie_full_fits.DKK_WSP ;
sortie_full_product_variant_tmp.SEK_RRP = sortie_full_fits.SEK_RRP ;
sortie_full_product_variant_tmp.SEK_WSP = sortie_full_fits.SEK_WSP ;
sortie_full_product_variant_tmp.EUR_FINN_RRP = sortie_full_fits.EUR_FINN_RRP ;
sortie_full_product_variant_tmp.EUR_FINN_WSP = sortie_full_fits.EUR_FINN_WSP ;
sortie_full_product_variant_tmp.FABRICATION = sortie_full_fits.FABRICATION ;
sortie_full_product_variant_tmp.COO = sortie_full_fits.COO ;
sortie_full_product_variant_tmp.CUSTOM_TARIFF_CODE = sortie_full_fits.CUSTOM_TARIFF_CODE ;
sortie_full_product_variant_tmp.UPC = sortie_full_fits.UPC ;
sortie_full_product_variant_tmp.SMU_TYPE = sortie_full_fits.SMU_TYPE ;
sortie_full_product_variant = sortie_full_product_variant_tmp;

// # Output table : 'sortie_product_variant'
sortie_product_variant_tmp.PRODUCTMASTERNUMBER = sortie_full_fits.STYLE ;
sortie_product_variant_tmp.PRODUCTCOLORID = sortie_full_fits.COLOR ;
sortie_product_variant_tmp.PRODUCTSIZEID = sortie_full_fits.SIZE ;
sortie_product_variant_tmp.PRODUCTSTYLEID = StringHandling.DOWNCASE(sortie_full_fits.BRAND ) == "levis" ? "STOCKLEV":"STOCK" ;
sortie_product_variant_tmp.PRODUCTNAME = sortie_full_fits.DESCRIPTION ;
sortie_product_variant_tmp.PRODUCTSEARCHNAME = sortie_full_fits.REF ;
sortie_product_variant_tmp.PRODUCTVARIANTNUMBER = sortie_full_fits.STYLECOLORLABEL ;
sortie_product_variant = sortie_product_variant_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_16 = false;










 


	tos_count_tMap_16++;

/**
 * [tMap_16 main ] stop
 */
	
	/**
	 * [tMap_16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_16";

	

 



/**
 * [tMap_16 process_data_begin ] stop
 */
// Start of branch "sortie_full_product_variant"
if(sortie_full_product_variant != null) { 



	
	/**
	 * [tMap_17 main ] start
	 */

	

	
	
	currentComponent="tMap_17";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_full_product_variant");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_17 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_17 = false;
		  boolean mainRowRejected_tMap_17 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_17__Struct Var = Var__tMap_17;// ###############################
        // ###############################
        // # Output tables

sortie_released_product_variant = null;
sortie_full_varian = null;


// # Output table : 'sortie_released_product_variant'
sortie_released_product_variant_tmp.PRODUCTMASTERNUMBER = sortie_full_product_variant.STYLE ;
sortie_released_product_variant_tmp.PRODUCTCOLORID = sortie_full_product_variant.COLOR ;
sortie_released_product_variant_tmp.PRODUCTSIZEID = sortie_full_product_variant.SIZE ;
sortie_released_product_variant_tmp.PRODUCTSTYLEID = StringHandling.DOWNCASE(sortie_full_product_variant.BRAND ) == "levis" ? "STOCKLEV":"STOCK" ;
sortie_released_product_variant_tmp.PRODUCTNAME = sortie_full_product_variant.DESCRIPTION ;
sortie_released_product_variant_tmp.PRODUCTSEARCHNAME = sortie_full_product_variant.REF ;
sortie_released_product_variant_tmp.PRODUCTVARIANTNUMBER = sortie_full_product_variant.STYLECOLORLABEL ;
sortie_released_product_variant_tmp.ITEMNUMBER = sortie_full_product_variant.STYLECOLORLABEL ;
sortie_released_product_variant = sortie_released_product_variant_tmp;

// # Output table : 'sortie_full_varian'
sortie_full_varian_tmp.BRAND = sortie_full_product_variant.BRAND ;
sortie_full_varian_tmp.SEASON = sortie_full_product_variant.SEASON ;
sortie_full_varian_tmp.CATEGORY = sortie_full_product_variant.CATEGORY ;
sortie_full_varian_tmp.REF = sortie_full_product_variant.REF ;
sortie_full_varian_tmp.DESCRIPTION = sortie_full_product_variant.DESCRIPTION ;
sortie_full_varian_tmp.STYLE = sortie_full_product_variant.STYLE ;
sortie_full_varian_tmp.COLOR = sortie_full_product_variant.COLOR ;
sortie_full_varian_tmp.FASHION = sortie_full_product_variant.FASHION ;
sortie_full_varian_tmp.STYLECOLORLABEL = sortie_full_product_variant.STYLECOLORLABEL ;
sortie_full_varian_tmp.COLORNAME = sortie_full_product_variant.COLORNAME ;
sortie_full_varian_tmp.LBL = sortie_full_product_variant.LBL ;
sortie_full_varian_tmp.STYLE_COLOR = sortie_full_product_variant.STYLE_COLOR ;
sortie_full_varian_tmp.GENDER = sortie_full_product_variant.GENDER ;
sortie_full_varian_tmp.AGE_RANGE = sortie_full_product_variant.AGE_RANGE ;
sortie_full_varian_tmp.SIZE_RANGE = sortie_full_product_variant.SIZE_RANGE ;
sortie_full_varian_tmp.SIZE = sortie_full_product_variant.SIZE ;
sortie_full_varian_tmp.US_SIZE = sortie_full_product_variant.US_SIZE ;
sortie_full_varian_tmp.CM_SIZE = sortie_full_product_variant.CM_SIZE ;
sortie_full_varian_tmp.PRODUCT = sortie_full_product_variant.PRODUCT ;
sortie_full_varian_tmp.PRODUCT_STATUS = sortie_full_product_variant.PRODUCT_STATUS ;
sortie_full_varian_tmp.PRODUCT_TIER = sortie_full_product_variant.PRODUCT_TIER ;
sortie_full_varian_tmp.ACCT_EXCLUS = sortie_full_product_variant.ACCT_EXCLUS ;
sortie_full_varian_tmp.SIZE_RATIO_SPLIT = sortie_full_product_variant.SIZE_RATIO_SPLIT ;
sortie_full_varian_tmp.REC_SIZE_SPLIT = sortie_full_product_variant.REC_SIZE_SPLIT ;
sortie_full_varian_tmp.CARTON_QTY = sortie_full_product_variant.CARTON_QTY ;
sortie_full_varian_tmp.ATTRIBUTE = sortie_full_product_variant.ATTRIBUTE ;
sortie_full_varian_tmp.UNITS = sortie_full_product_variant.UNITS ;
sortie_full_varian_tmp.EUR_RRP = sortie_full_product_variant.EUR_RRP ;
sortie_full_varian_tmp.EUR_WSP = sortie_full_product_variant.EUR_WSP ;
sortie_full_varian_tmp.GBP_RRP = sortie_full_product_variant.GBP_RRP ;
sortie_full_varian_tmp.GBP_WSP = sortie_full_product_variant.GBP_WSP ;
sortie_full_varian_tmp.CHF_RRP = sortie_full_product_variant.CHF_RRP ;
sortie_full_varian_tmp.CHF_WSP = sortie_full_product_variant.CHF_WSP ;
sortie_full_varian_tmp.NOK_RRP = sortie_full_product_variant.NOK_RRP ;
sortie_full_varian_tmp.NOK_WSP = sortie_full_product_variant.NOK_WSP ;
sortie_full_varian_tmp.DKK_RRP = sortie_full_product_variant.DKK_RRP ;
sortie_full_varian_tmp.DKK_WSP = sortie_full_product_variant.DKK_WSP ;
sortie_full_varian_tmp.SEK_RRP = sortie_full_product_variant.SEK_RRP ;
sortie_full_varian_tmp.SEK_WSP = sortie_full_product_variant.SEK_WSP ;
sortie_full_varian_tmp.EUR_FINN_RRP = sortie_full_product_variant.EUR_FINN_RRP ;
sortie_full_varian_tmp.EUR_FINN_WSP = sortie_full_product_variant.EUR_FINN_WSP ;
sortie_full_varian_tmp.FABRICATION = sortie_full_product_variant.FABRICATION ;
sortie_full_varian_tmp.COO = sortie_full_product_variant.COO ;
sortie_full_varian_tmp.CUSTOM_TARIFF_CODE = sortie_full_product_variant.CUSTOM_TARIFF_CODE ;
sortie_full_varian_tmp.UPC = sortie_full_product_variant.UPC ;
sortie_full_varian_tmp.SMU_TYPE = sortie_full_product_variant.SMU_TYPE ;
sortie_full_varian = sortie_full_varian_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_17 = false;










 


	tos_count_tMap_17++;

/**
 * [tMap_17 main ] stop
 */
	
	/**
	 * [tMap_17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_17";

	

 



/**
 * [tMap_17 process_data_begin ] stop
 */
// Start of branch "sortie_released_product_variant"
if(sortie_released_product_variant != null) { 



	
	/**
	 * [tUniqRow_15 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_15";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_released_product_variant");
					}
					
row31 = null;			
if(sortie_released_product_variant.PRODUCTMASTERNUMBER == null){
	finder_tUniqRow_15.PRODUCTMASTERNUMBER = null;
}else{
	finder_tUniqRow_15.PRODUCTMASTERNUMBER = sortie_released_product_variant.PRODUCTMASTERNUMBER.toLowerCase();
}
if(sortie_released_product_variant.PRODUCTCOLORID == null){
	finder_tUniqRow_15.PRODUCTCOLORID = null;
}else{
	finder_tUniqRow_15.PRODUCTCOLORID = sortie_released_product_variant.PRODUCTCOLORID.toLowerCase();
}
if(sortie_released_product_variant.PRODUCTSIZEID == null){
	finder_tUniqRow_15.PRODUCTSIZEID = null;
}else{
	finder_tUniqRow_15.PRODUCTSIZEID = sortie_released_product_variant.PRODUCTSIZEID.toLowerCase();
}
if(sortie_released_product_variant.PRODUCTSTYLEID == null){
	finder_tUniqRow_15.PRODUCTSTYLEID = null;
}else{
	finder_tUniqRow_15.PRODUCTSTYLEID = sortie_released_product_variant.PRODUCTSTYLEID.toLowerCase();
}
if(sortie_released_product_variant.PRODUCTNAME == null){
	finder_tUniqRow_15.PRODUCTNAME = null;
}else{
	finder_tUniqRow_15.PRODUCTNAME = sortie_released_product_variant.PRODUCTNAME.toLowerCase();
}
if(sortie_released_product_variant.PRODUCTSEARCHNAME == null){
	finder_tUniqRow_15.PRODUCTSEARCHNAME = null;
}else{
	finder_tUniqRow_15.PRODUCTSEARCHNAME = sortie_released_product_variant.PRODUCTSEARCHNAME.toLowerCase();
}
if(sortie_released_product_variant.PRODUCTVARIANTNUMBER == null){
	finder_tUniqRow_15.PRODUCTVARIANTNUMBER = null;
}else{
	finder_tUniqRow_15.PRODUCTVARIANTNUMBER = sortie_released_product_variant.PRODUCTVARIANTNUMBER.toLowerCase();
}
if(sortie_released_product_variant.ITEMNUMBER == null){
	finder_tUniqRow_15.ITEMNUMBER = null;
}else{
	finder_tUniqRow_15.ITEMNUMBER = sortie_released_product_variant.ITEMNUMBER.toLowerCase();
}	
finder_tUniqRow_15.hashCodeDirty = true;
if (!keystUniqRow_15.contains(finder_tUniqRow_15)) {
		KeyStruct_tUniqRow_15 new_tUniqRow_15 = new KeyStruct_tUniqRow_15();

		
if(sortie_released_product_variant.PRODUCTMASTERNUMBER == null){
	new_tUniqRow_15.PRODUCTMASTERNUMBER = null;
}else{
	new_tUniqRow_15.PRODUCTMASTERNUMBER = sortie_released_product_variant.PRODUCTMASTERNUMBER.toLowerCase();
}
if(sortie_released_product_variant.PRODUCTCOLORID == null){
	new_tUniqRow_15.PRODUCTCOLORID = null;
}else{
	new_tUniqRow_15.PRODUCTCOLORID = sortie_released_product_variant.PRODUCTCOLORID.toLowerCase();
}
if(sortie_released_product_variant.PRODUCTSIZEID == null){
	new_tUniqRow_15.PRODUCTSIZEID = null;
}else{
	new_tUniqRow_15.PRODUCTSIZEID = sortie_released_product_variant.PRODUCTSIZEID.toLowerCase();
}
if(sortie_released_product_variant.PRODUCTSTYLEID == null){
	new_tUniqRow_15.PRODUCTSTYLEID = null;
}else{
	new_tUniqRow_15.PRODUCTSTYLEID = sortie_released_product_variant.PRODUCTSTYLEID.toLowerCase();
}
if(sortie_released_product_variant.PRODUCTNAME == null){
	new_tUniqRow_15.PRODUCTNAME = null;
}else{
	new_tUniqRow_15.PRODUCTNAME = sortie_released_product_variant.PRODUCTNAME.toLowerCase();
}
if(sortie_released_product_variant.PRODUCTSEARCHNAME == null){
	new_tUniqRow_15.PRODUCTSEARCHNAME = null;
}else{
	new_tUniqRow_15.PRODUCTSEARCHNAME = sortie_released_product_variant.PRODUCTSEARCHNAME.toLowerCase();
}
if(sortie_released_product_variant.PRODUCTVARIANTNUMBER == null){
	new_tUniqRow_15.PRODUCTVARIANTNUMBER = null;
}else{
	new_tUniqRow_15.PRODUCTVARIANTNUMBER = sortie_released_product_variant.PRODUCTVARIANTNUMBER.toLowerCase();
}
if(sortie_released_product_variant.ITEMNUMBER == null){
	new_tUniqRow_15.ITEMNUMBER = null;
}else{
	new_tUniqRow_15.ITEMNUMBER = sortie_released_product_variant.ITEMNUMBER.toLowerCase();
}
		
		keystUniqRow_15.add(new_tUniqRow_15);if(row31 == null){ 
	
	row31 = new row31Struct();
}row31.PRODUCTMASTERNUMBER = sortie_released_product_variant.PRODUCTMASTERNUMBER;			row31.PRODUCTCOLORID = sortie_released_product_variant.PRODUCTCOLORID;			row31.PRODUCTSIZEID = sortie_released_product_variant.PRODUCTSIZEID;			row31.PRODUCTSTYLEID = sortie_released_product_variant.PRODUCTSTYLEID;			row31.PRODUCTNAME = sortie_released_product_variant.PRODUCTNAME;			row31.PRODUCTSEARCHNAME = sortie_released_product_variant.PRODUCTSEARCHNAME;			row31.PRODUCTVARIANTNUMBER = sortie_released_product_variant.PRODUCTVARIANTNUMBER;			row31.ITEMNUMBER = sortie_released_product_variant.ITEMNUMBER;					
		nb_uniques_tUniqRow_15++;
	} else {
	  nb_duplicates_tUniqRow_15++;
	}

 


	tos_count_tUniqRow_15++;

/**
 * [tUniqRow_15 main ] stop
 */
	
	/**
	 * [tUniqRow_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_15";

	

 



/**
 * [tUniqRow_15 process_data_begin ] stop
 */
// Start of branch "row31"
if(row31 != null) { 



	
	/**
	 * [tFileOutputExcel_8 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_8";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row31");
					}
					

				xlsxTool_tFileOutputExcel_8.addRow();
									   				
	    				if(row31.PRODUCTMASTERNUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_8.addCellValue(String.valueOf(row31.PRODUCTMASTERNUMBER));
	    				} else {
	    					xlsxTool_tFileOutputExcel_8.addCellNullValue();
	    				}
					
									   				
	    				if(row31.PRODUCTCOLORID != null) {
    				
							xlsxTool_tFileOutputExcel_8.addCellValue(String.valueOf(row31.PRODUCTCOLORID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_8.addCellNullValue();
	    				}
					
									   				
	    				if(row31.PRODUCTSIZEID != null) {
    				
							xlsxTool_tFileOutputExcel_8.addCellValue(String.valueOf(row31.PRODUCTSIZEID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_8.addCellNullValue();
	    				}
					
									   				
	    				if(row31.PRODUCTSTYLEID != null) {
    				
							xlsxTool_tFileOutputExcel_8.addCellValue(String.valueOf(row31.PRODUCTSTYLEID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_8.addCellNullValue();
	    				}
					
									   				
	    				if(row31.PRODUCTNAME != null) {
    				
							xlsxTool_tFileOutputExcel_8.addCellValue(String.valueOf(row31.PRODUCTNAME));
	    				} else {
	    					xlsxTool_tFileOutputExcel_8.addCellNullValue();
	    				}
					
									   				
	    				if(row31.PRODUCTSEARCHNAME != null) {
    				
							xlsxTool_tFileOutputExcel_8.addCellValue(String.valueOf(row31.PRODUCTSEARCHNAME));
	    				} else {
	    					xlsxTool_tFileOutputExcel_8.addCellNullValue();
	    				}
					
									   				
	    				if(row31.PRODUCTVARIANTNUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_8.addCellValue(String.valueOf(row31.PRODUCTVARIANTNUMBER));
	    				} else {
	    					xlsxTool_tFileOutputExcel_8.addCellNullValue();
	    				}
					
									   				
	    				if(row31.ITEMNUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_8.addCellValue(String.valueOf(row31.ITEMNUMBER));
	    				} else {
	    					xlsxTool_tFileOutputExcel_8.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_8++;
				
 


	tos_count_tFileOutputExcel_8++;

/**
 * [tFileOutputExcel_8 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_8";

	

 



/**
 * [tFileOutputExcel_8 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_8";

	

 



/**
 * [tFileOutputExcel_8 process_data_end ] stop
 */

} // End of branch "row31"




	
	/**
	 * [tUniqRow_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_15";

	

 



/**
 * [tUniqRow_15 process_data_end ] stop
 */

} // End of branch "sortie_released_product_variant"




// Start of branch "sortie_full_varian"
if(sortie_full_varian != null) { 



	
	/**
	 * [tMap_18 main ] start
	 */

	

	
	
	currentComponent="tMap_18";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_full_varian");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_18 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_18 = false;
		  boolean mainRowRejected_tMap_18 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_18__Struct Var = Var__tMap_18;// ###############################
        // ###############################
        // # Output tables

copyOfsortie_released_product_variant = null;
sortie_product_status = null;


// # Output table : 'copyOfsortie_released_product_variant'
copyOfsortie_released_product_variant_tmp.BRAND = sortie_full_varian.BRAND ;
copyOfsortie_released_product_variant_tmp.SEASON = sortie_full_varian.SEASON ;
copyOfsortie_released_product_variant_tmp.CATEGORY = sortie_full_varian.CATEGORY ;
copyOfsortie_released_product_variant_tmp.REF = sortie_full_varian.REF ;
copyOfsortie_released_product_variant_tmp.DESCRIPTION = sortie_full_varian.DESCRIPTION ;
copyOfsortie_released_product_variant_tmp.STYLE = sortie_full_varian.STYLE ;
copyOfsortie_released_product_variant_tmp.COLOR = sortie_full_varian.COLOR ;
copyOfsortie_released_product_variant_tmp.FASHION = sortie_full_varian.FASHION ;
copyOfsortie_released_product_variant_tmp.STYLECOLORLABEL = sortie_full_varian.STYLECOLORLABEL ;
copyOfsortie_released_product_variant_tmp.COLORNAME = sortie_full_varian.COLORNAME ;
copyOfsortie_released_product_variant_tmp.LBL = sortie_full_varian.LBL ;
copyOfsortie_released_product_variant_tmp.STYLE_COLOR = sortie_full_varian.STYLE_COLOR ;
copyOfsortie_released_product_variant_tmp.GENDER = sortie_full_varian.GENDER ;
copyOfsortie_released_product_variant_tmp.AGE_RANGE = sortie_full_varian.AGE_RANGE ;
copyOfsortie_released_product_variant_tmp.SIZE_RANGE = sortie_full_varian.SIZE_RANGE ;
copyOfsortie_released_product_variant_tmp.SIZE = sortie_full_varian.SIZE ;
copyOfsortie_released_product_variant_tmp.US_SIZE = sortie_full_varian.US_SIZE ;
copyOfsortie_released_product_variant_tmp.CM_SIZE = sortie_full_varian.CM_SIZE ;
copyOfsortie_released_product_variant_tmp.PRODUCT = sortie_full_varian.PRODUCT ;
copyOfsortie_released_product_variant_tmp.PRODUCT_STATUS = sortie_full_varian.PRODUCT_STATUS ;
copyOfsortie_released_product_variant_tmp.PRODUCT_TIER = sortie_full_varian.PRODUCT_TIER ;
copyOfsortie_released_product_variant_tmp.ACCT_EXCLUS = sortie_full_varian.ACCT_EXCLUS ;
copyOfsortie_released_product_variant_tmp.SIZE_RATIO_SPLIT = sortie_full_varian.SIZE_RATIO_SPLIT ;
copyOfsortie_released_product_variant_tmp.REC_SIZE_SPLIT = sortie_full_varian.REC_SIZE_SPLIT ;
copyOfsortie_released_product_variant_tmp.CARTON_QTY = sortie_full_varian.CARTON_QTY ;
copyOfsortie_released_product_variant_tmp.ATTRIBUTE = sortie_full_varian.ATTRIBUTE ;
copyOfsortie_released_product_variant_tmp.UNITS = sortie_full_varian.UNITS ;
copyOfsortie_released_product_variant_tmp.EUR_RRP = sortie_full_varian.EUR_RRP ;
copyOfsortie_released_product_variant_tmp.EUR_WSP = sortie_full_varian.EUR_WSP ;
copyOfsortie_released_product_variant_tmp.GBP_RRP = sortie_full_varian.GBP_RRP ;
copyOfsortie_released_product_variant_tmp.GBP_WSP = sortie_full_varian.GBP_WSP ;
copyOfsortie_released_product_variant_tmp.CHF_RRP = sortie_full_varian.CHF_RRP ;
copyOfsortie_released_product_variant_tmp.CHF_WSP = sortie_full_varian.CHF_WSP ;
copyOfsortie_released_product_variant_tmp.NOK_RRP = sortie_full_varian.NOK_RRP ;
copyOfsortie_released_product_variant_tmp.NOK_WSP = sortie_full_varian.NOK_WSP ;
copyOfsortie_released_product_variant_tmp.DKK_RRP = sortie_full_varian.DKK_RRP ;
copyOfsortie_released_product_variant_tmp.DKK_WSP = sortie_full_varian.DKK_WSP ;
copyOfsortie_released_product_variant_tmp.SEK_RRP = sortie_full_varian.SEK_RRP ;
copyOfsortie_released_product_variant_tmp.SEK_WSP = sortie_full_varian.SEK_WSP ;
copyOfsortie_released_product_variant_tmp.EUR_FINN_RRP = sortie_full_varian.EUR_FINN_RRP ;
copyOfsortie_released_product_variant_tmp.EUR_FINN_WSP = sortie_full_varian.EUR_FINN_WSP ;
copyOfsortie_released_product_variant_tmp.FABRICATION = sortie_full_varian.FABRICATION ;
copyOfsortie_released_product_variant_tmp.COO = sortie_full_varian.COO ;
copyOfsortie_released_product_variant_tmp.CUSTOM_TARIFF_CODE = sortie_full_varian.CUSTOM_TARIFF_CODE ;
copyOfsortie_released_product_variant_tmp.UPC = sortie_full_varian.UPC ;
copyOfsortie_released_product_variant_tmp.SMU_TYPE = sortie_full_varian.SMU_TYPE ;
copyOfsortie_released_product_variant = copyOfsortie_released_product_variant_tmp;

// # Output table : 'sortie_product_status'
sortie_product_status_tmp.ITEMID = sortie_full_varian.STYLE ;
sortie_product_status_tmp.INVENTSIZEID = sortie_full_varian.SIZE ;
sortie_product_status_tmp.INVENTSTYLEID = StringHandling.DOWNCASE(sortie_full_varian.BRAND ) == "levis" ? "STOCKLEV":"STOCK" ;
sortie_product_status_tmp.INVENTCOLORID = sortie_full_varian.COLOR ;
sortie_product_status_tmp.PRODUCTSTATUSID = sortie_full_varian.PRODUCT_STATUS ;
sortie_product_status_tmp.SEASONCODE = sortie_full_varian.SEASON ;
sortie_product_status = sortie_product_status_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_18 = false;










 


	tos_count_tMap_18++;

/**
 * [tMap_18 main ] stop
 */
	
	/**
	 * [tMap_18 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_18";

	

 



/**
 * [tMap_18 process_data_begin ] stop
 */
// Start of branch "copyOfsortie_released_product_variant"
if(copyOfsortie_released_product_variant != null) { 



	
	/**
	 * [tMap_19 main ] start
	 */

	

	
	
	currentComponent="tMap_19";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfsortie_released_product_variant");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_19 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_19 = false;
		  boolean mainRowRejected_tMap_19 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_19__Struct Var = Var__tMap_19;// ###############################
        // ###############################
        // # Output tables

sortie_barcode = null;
sortie_full_barcode = null;


// # Output table : 'sortie_barcode'
sortie_barcode_tmp.ITEMNUMBER = copyOfsortie_released_product_variant.STYLE ;
sortie_barcode_tmp.PRODUCTCOLORID = copyOfsortie_released_product_variant.COLOR ;
sortie_barcode_tmp.PRODUCTSIZEID = copyOfsortie_released_product_variant.SIZE ;
sortie_barcode_tmp.PRODUCTSTYLEID = StringHandling.DOWNCASE( copyOfsortie_released_product_variant.BRAND ) == "levis" ? "STOCKLEV":"STOCK" ;
sortie_barcode_tmp.PRODUCTQUANTITYUNITSYMBOL = "PCS";
sortie_barcode_tmp.BARCODESETUPID = "UPC12";
sortie_barcode_tmp.BARCODE = copyOfsortie_released_product_variant.UPC ;
sortie_barcode_tmp.ISDEFAULTDISPLAYEDBARCODE = "No";
sortie_barcode_tmp.ISDEFAULTPRINTEDBARCODE = "No";
sortie_barcode_tmp.ISDEFAULTSCANNEDBARCODE = "Yes";
sortie_barcode_tmp.PRODUCTDESCRIPTION = copyOfsortie_released_product_variant.DESCRIPTION ;
sortie_barcode = sortie_barcode_tmp;

// # Output table : 'sortie_full_barcode'
sortie_full_barcode_tmp.BRAND = copyOfsortie_released_product_variant.BRAND ;
sortie_full_barcode_tmp.SEASON = copyOfsortie_released_product_variant.SEASON ;
sortie_full_barcode_tmp.CATEGORY = copyOfsortie_released_product_variant.CATEGORY ;
sortie_full_barcode_tmp.REF = copyOfsortie_released_product_variant.REF ;
sortie_full_barcode_tmp.DESCRIPTION = copyOfsortie_released_product_variant.DESCRIPTION ;
sortie_full_barcode_tmp.STYLE = copyOfsortie_released_product_variant.STYLE ;
sortie_full_barcode_tmp.COLOR = copyOfsortie_released_product_variant.COLOR ;
sortie_full_barcode_tmp.FASHION = copyOfsortie_released_product_variant.FASHION ;
sortie_full_barcode_tmp.STYLECOLORLABEL = copyOfsortie_released_product_variant.STYLECOLORLABEL ;
sortie_full_barcode_tmp.COLORNAME = copyOfsortie_released_product_variant.COLORNAME ;
sortie_full_barcode_tmp.LBL = copyOfsortie_released_product_variant.LBL ;
sortie_full_barcode_tmp.STYLE_COLOR = copyOfsortie_released_product_variant.STYLE_COLOR ;
sortie_full_barcode_tmp.GENDER = copyOfsortie_released_product_variant.GENDER ;
sortie_full_barcode_tmp.AGE_RANGE = copyOfsortie_released_product_variant.AGE_RANGE ;
sortie_full_barcode_tmp.SIZE_RANGE = copyOfsortie_released_product_variant.SIZE_RANGE ;
sortie_full_barcode_tmp.SIZE = copyOfsortie_released_product_variant.SIZE ;
sortie_full_barcode_tmp.US_SIZE = copyOfsortie_released_product_variant.US_SIZE ;
sortie_full_barcode_tmp.CM_SIZE = copyOfsortie_released_product_variant.CM_SIZE ;
sortie_full_barcode_tmp.PRODUCT = copyOfsortie_released_product_variant.PRODUCT ;
sortie_full_barcode_tmp.PRODUCT_STATUS = copyOfsortie_released_product_variant.PRODUCT_STATUS ;
sortie_full_barcode_tmp.PRODUCT_TIER = copyOfsortie_released_product_variant.PRODUCT_TIER ;
sortie_full_barcode_tmp.ACCT_EXCLUS = copyOfsortie_released_product_variant.ACCT_EXCLUS ;
sortie_full_barcode_tmp.SIZE_RATIO_SPLIT = copyOfsortie_released_product_variant.SIZE_RATIO_SPLIT ;
sortie_full_barcode_tmp.REC_SIZE_SPLIT = copyOfsortie_released_product_variant.REC_SIZE_SPLIT ;
sortie_full_barcode_tmp.CARTON_QTY = copyOfsortie_released_product_variant.CARTON_QTY ;
sortie_full_barcode_tmp.ATTRIBUTE = copyOfsortie_released_product_variant.ATTRIBUTE ;
sortie_full_barcode_tmp.UNITS = copyOfsortie_released_product_variant.UNITS ;
sortie_full_barcode_tmp.EUR_RRP = copyOfsortie_released_product_variant.EUR_RRP ;
sortie_full_barcode_tmp.EUR_WSP = copyOfsortie_released_product_variant.EUR_WSP ;
sortie_full_barcode_tmp.GBP_RRP = copyOfsortie_released_product_variant.GBP_RRP ;
sortie_full_barcode_tmp.GBP_WSP = copyOfsortie_released_product_variant.GBP_WSP ;
sortie_full_barcode_tmp.CHF_RRP = copyOfsortie_released_product_variant.CHF_RRP ;
sortie_full_barcode_tmp.CHF_WSP = copyOfsortie_released_product_variant.CHF_WSP ;
sortie_full_barcode_tmp.NOK_RRP = copyOfsortie_released_product_variant.NOK_RRP ;
sortie_full_barcode_tmp.NOK_WSP = copyOfsortie_released_product_variant.NOK_WSP ;
sortie_full_barcode_tmp.DKK_RRP = copyOfsortie_released_product_variant.DKK_RRP ;
sortie_full_barcode_tmp.DKK_WSP = copyOfsortie_released_product_variant.DKK_WSP ;
sortie_full_barcode_tmp.SEK_RRP = copyOfsortie_released_product_variant.SEK_RRP ;
sortie_full_barcode_tmp.SEK_WSP = copyOfsortie_released_product_variant.SEK_WSP ;
sortie_full_barcode_tmp.EUR_FINN_RRP = copyOfsortie_released_product_variant.EUR_FINN_RRP ;
sortie_full_barcode_tmp.EUR_FINN_WSP = copyOfsortie_released_product_variant.EUR_FINN_WSP ;
sortie_full_barcode_tmp.FABRICATION = copyOfsortie_released_product_variant.FABRICATION ;
sortie_full_barcode_tmp.COO = copyOfsortie_released_product_variant.COO ;
sortie_full_barcode_tmp.CUSTOM_TARIFF_CODE = copyOfsortie_released_product_variant.CUSTOM_TARIFF_CODE ;
sortie_full_barcode_tmp.UPC = copyOfsortie_released_product_variant.UPC ;
sortie_full_barcode_tmp.SMU_TYPE = copyOfsortie_released_product_variant.SMU_TYPE ;
sortie_full_barcode = sortie_full_barcode_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_19 = false;










 


	tos_count_tMap_19++;

/**
 * [tMap_19 main ] stop
 */
	
	/**
	 * [tMap_19 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_19";

	

 



/**
 * [tMap_19 process_data_begin ] stop
 */
// Start of branch "sortie_barcode"
if(sortie_barcode != null) { 



	
	/**
	 * [tUniqRow_17 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_17";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_barcode");
					}
					
row33 = null;			
if(sortie_barcode.ITEMNUMBER == null){
	finder_tUniqRow_17.ITEMNUMBER = null;
}else{
	finder_tUniqRow_17.ITEMNUMBER = sortie_barcode.ITEMNUMBER.toLowerCase();
}
if(sortie_barcode.PRODUCTCOLORID == null){
	finder_tUniqRow_17.PRODUCTCOLORID = null;
}else{
	finder_tUniqRow_17.PRODUCTCOLORID = sortie_barcode.PRODUCTCOLORID.toLowerCase();
}
if(sortie_barcode.PRODUCTSIZEID == null){
	finder_tUniqRow_17.PRODUCTSIZEID = null;
}else{
	finder_tUniqRow_17.PRODUCTSIZEID = sortie_barcode.PRODUCTSIZEID.toLowerCase();
}
if(sortie_barcode.PRODUCTSTYLEID == null){
	finder_tUniqRow_17.PRODUCTSTYLEID = null;
}else{
	finder_tUniqRow_17.PRODUCTSTYLEID = sortie_barcode.PRODUCTSTYLEID.toLowerCase();
}
if(sortie_barcode.PRODUCTQUANTITYUNITSYMBOL == null){
	finder_tUniqRow_17.PRODUCTQUANTITYUNITSYMBOL = null;
}else{
	finder_tUniqRow_17.PRODUCTQUANTITYUNITSYMBOL = sortie_barcode.PRODUCTQUANTITYUNITSYMBOL.toLowerCase();
}
if(sortie_barcode.BARCODESETUPID == null){
	finder_tUniqRow_17.BARCODESETUPID = null;
}else{
	finder_tUniqRow_17.BARCODESETUPID = sortie_barcode.BARCODESETUPID.toLowerCase();
}
if(sortie_barcode.BARCODE == null){
	finder_tUniqRow_17.BARCODE = null;
}else{
	finder_tUniqRow_17.BARCODE = sortie_barcode.BARCODE.toLowerCase();
}
if(sortie_barcode.ISDEFAULTDISPLAYEDBARCODE == null){
	finder_tUniqRow_17.ISDEFAULTDISPLAYEDBARCODE = null;
}else{
	finder_tUniqRow_17.ISDEFAULTDISPLAYEDBARCODE = sortie_barcode.ISDEFAULTDISPLAYEDBARCODE.toLowerCase();
}
if(sortie_barcode.ISDEFAULTPRINTEDBARCODE == null){
	finder_tUniqRow_17.ISDEFAULTPRINTEDBARCODE = null;
}else{
	finder_tUniqRow_17.ISDEFAULTPRINTEDBARCODE = sortie_barcode.ISDEFAULTPRINTEDBARCODE.toLowerCase();
}
if(sortie_barcode.ISDEFAULTSCANNEDBARCODE == null){
	finder_tUniqRow_17.ISDEFAULTSCANNEDBARCODE = null;
}else{
	finder_tUniqRow_17.ISDEFAULTSCANNEDBARCODE = sortie_barcode.ISDEFAULTSCANNEDBARCODE.toLowerCase();
}
if(sortie_barcode.PRODUCTDESCRIPTION == null){
	finder_tUniqRow_17.PRODUCTDESCRIPTION = null;
}else{
	finder_tUniqRow_17.PRODUCTDESCRIPTION = sortie_barcode.PRODUCTDESCRIPTION.toLowerCase();
}	
finder_tUniqRow_17.hashCodeDirty = true;
if (!keystUniqRow_17.contains(finder_tUniqRow_17)) {
		KeyStruct_tUniqRow_17 new_tUniqRow_17 = new KeyStruct_tUniqRow_17();

		
if(sortie_barcode.ITEMNUMBER == null){
	new_tUniqRow_17.ITEMNUMBER = null;
}else{
	new_tUniqRow_17.ITEMNUMBER = sortie_barcode.ITEMNUMBER.toLowerCase();
}
if(sortie_barcode.PRODUCTCOLORID == null){
	new_tUniqRow_17.PRODUCTCOLORID = null;
}else{
	new_tUniqRow_17.PRODUCTCOLORID = sortie_barcode.PRODUCTCOLORID.toLowerCase();
}
if(sortie_barcode.PRODUCTSIZEID == null){
	new_tUniqRow_17.PRODUCTSIZEID = null;
}else{
	new_tUniqRow_17.PRODUCTSIZEID = sortie_barcode.PRODUCTSIZEID.toLowerCase();
}
if(sortie_barcode.PRODUCTSTYLEID == null){
	new_tUniqRow_17.PRODUCTSTYLEID = null;
}else{
	new_tUniqRow_17.PRODUCTSTYLEID = sortie_barcode.PRODUCTSTYLEID.toLowerCase();
}
if(sortie_barcode.PRODUCTQUANTITYUNITSYMBOL == null){
	new_tUniqRow_17.PRODUCTQUANTITYUNITSYMBOL = null;
}else{
	new_tUniqRow_17.PRODUCTQUANTITYUNITSYMBOL = sortie_barcode.PRODUCTQUANTITYUNITSYMBOL.toLowerCase();
}
if(sortie_barcode.BARCODESETUPID == null){
	new_tUniqRow_17.BARCODESETUPID = null;
}else{
	new_tUniqRow_17.BARCODESETUPID = sortie_barcode.BARCODESETUPID.toLowerCase();
}
if(sortie_barcode.BARCODE == null){
	new_tUniqRow_17.BARCODE = null;
}else{
	new_tUniqRow_17.BARCODE = sortie_barcode.BARCODE.toLowerCase();
}
if(sortie_barcode.ISDEFAULTDISPLAYEDBARCODE == null){
	new_tUniqRow_17.ISDEFAULTDISPLAYEDBARCODE = null;
}else{
	new_tUniqRow_17.ISDEFAULTDISPLAYEDBARCODE = sortie_barcode.ISDEFAULTDISPLAYEDBARCODE.toLowerCase();
}
if(sortie_barcode.ISDEFAULTPRINTEDBARCODE == null){
	new_tUniqRow_17.ISDEFAULTPRINTEDBARCODE = null;
}else{
	new_tUniqRow_17.ISDEFAULTPRINTEDBARCODE = sortie_barcode.ISDEFAULTPRINTEDBARCODE.toLowerCase();
}
if(sortie_barcode.ISDEFAULTSCANNEDBARCODE == null){
	new_tUniqRow_17.ISDEFAULTSCANNEDBARCODE = null;
}else{
	new_tUniqRow_17.ISDEFAULTSCANNEDBARCODE = sortie_barcode.ISDEFAULTSCANNEDBARCODE.toLowerCase();
}
if(sortie_barcode.PRODUCTDESCRIPTION == null){
	new_tUniqRow_17.PRODUCTDESCRIPTION = null;
}else{
	new_tUniqRow_17.PRODUCTDESCRIPTION = sortie_barcode.PRODUCTDESCRIPTION.toLowerCase();
}
		
		keystUniqRow_17.add(new_tUniqRow_17);if(row33 == null){ 
	
	row33 = new row33Struct();
}row33.ITEMNUMBER = sortie_barcode.ITEMNUMBER;			row33.PRODUCTCOLORID = sortie_barcode.PRODUCTCOLORID;			row33.PRODUCTSIZEID = sortie_barcode.PRODUCTSIZEID;			row33.PRODUCTSTYLEID = sortie_barcode.PRODUCTSTYLEID;			row33.PRODUCTQUANTITYUNITSYMBOL = sortie_barcode.PRODUCTQUANTITYUNITSYMBOL;			row33.BARCODESETUPID = sortie_barcode.BARCODESETUPID;			row33.BARCODE = sortie_barcode.BARCODE;			row33.ISDEFAULTDISPLAYEDBARCODE = sortie_barcode.ISDEFAULTDISPLAYEDBARCODE;			row33.ISDEFAULTPRINTEDBARCODE = sortie_barcode.ISDEFAULTPRINTEDBARCODE;			row33.ISDEFAULTSCANNEDBARCODE = sortie_barcode.ISDEFAULTSCANNEDBARCODE;			row33.PRODUCTDESCRIPTION = sortie_barcode.PRODUCTDESCRIPTION;					
		nb_uniques_tUniqRow_17++;
	} else {
	  nb_duplicates_tUniqRow_17++;
	}

 


	tos_count_tUniqRow_17++;

/**
 * [tUniqRow_17 main ] stop
 */
	
	/**
	 * [tUniqRow_17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_17";

	

 



/**
 * [tUniqRow_17 process_data_begin ] stop
 */
// Start of branch "row33"
if(row33 != null) { 



	
	/**
	 * [tFileOutputExcel_10 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_10";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row33");
					}
					

				xlsxTool_tFileOutputExcel_10.addRow();
									   				
	    				if(row33.ITEMNUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_10.addCellValue(String.valueOf(row33.ITEMNUMBER));
	    				} else {
	    					xlsxTool_tFileOutputExcel_10.addCellNullValue();
	    				}
					
									   				
	    				if(row33.PRODUCTCOLORID != null) {
    				
							xlsxTool_tFileOutputExcel_10.addCellValue(String.valueOf(row33.PRODUCTCOLORID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_10.addCellNullValue();
	    				}
					
									   				
	    				if(row33.PRODUCTSIZEID != null) {
    				
							xlsxTool_tFileOutputExcel_10.addCellValue(String.valueOf(row33.PRODUCTSIZEID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_10.addCellNullValue();
	    				}
					
									   				
	    				if(row33.PRODUCTSTYLEID != null) {
    				
							xlsxTool_tFileOutputExcel_10.addCellValue(String.valueOf(row33.PRODUCTSTYLEID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_10.addCellNullValue();
	    				}
					
									   				
	    				if(row33.PRODUCTQUANTITYUNITSYMBOL != null) {
    				
							xlsxTool_tFileOutputExcel_10.addCellValue(String.valueOf(row33.PRODUCTQUANTITYUNITSYMBOL));
	    				} else {
	    					xlsxTool_tFileOutputExcel_10.addCellNullValue();
	    				}
					
									   				
	    				if(row33.BARCODESETUPID != null) {
    				
							xlsxTool_tFileOutputExcel_10.addCellValue(String.valueOf(row33.BARCODESETUPID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_10.addCellNullValue();
	    				}
					
									   				
	    				if(row33.BARCODE != null) {
    				
							xlsxTool_tFileOutputExcel_10.addCellValue(String.valueOf(row33.BARCODE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_10.addCellNullValue();
	    				}
					
									   				
	    				if(row33.ISDEFAULTDISPLAYEDBARCODE != null) {
    				
							xlsxTool_tFileOutputExcel_10.addCellValue(String.valueOf(row33.ISDEFAULTDISPLAYEDBARCODE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_10.addCellNullValue();
	    				}
					
									   				
	    				if(row33.ISDEFAULTPRINTEDBARCODE != null) {
    				
							xlsxTool_tFileOutputExcel_10.addCellValue(String.valueOf(row33.ISDEFAULTPRINTEDBARCODE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_10.addCellNullValue();
	    				}
					
									   				
	    				if(row33.ISDEFAULTSCANNEDBARCODE != null) {
    				
							xlsxTool_tFileOutputExcel_10.addCellValue(String.valueOf(row33.ISDEFAULTSCANNEDBARCODE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_10.addCellNullValue();
	    				}
					
									   				
	    				if(row33.PRODUCTDESCRIPTION != null) {
    				
							xlsxTool_tFileOutputExcel_10.addCellValue(String.valueOf(row33.PRODUCTDESCRIPTION));
	    				} else {
	    					xlsxTool_tFileOutputExcel_10.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_10++;
				
 


	tos_count_tFileOutputExcel_10++;

/**
 * [tFileOutputExcel_10 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_10";

	

 



/**
 * [tFileOutputExcel_10 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_10";

	

 



/**
 * [tFileOutputExcel_10 process_data_end ] stop
 */

} // End of branch "row33"




	
	/**
	 * [tUniqRow_17 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_17";

	

 



/**
 * [tUniqRow_17 process_data_end ] stop
 */

} // End of branch "sortie_barcode"




// Start of branch "sortie_full_barcode"
if(sortie_full_barcode != null) { 



	
	/**
	 * [tMap_20 main ] start
	 */

	

	
	
	currentComponent="tMap_20";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_full_barcode");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_20 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_20 = false;
		  boolean mainRowRejected_tMap_20 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_20__Struct Var = Var__tMap_20;// ###############################
        // ###############################
        // # Output tables

copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product = null;


// # Output table : 'copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product'
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product_tmp.PRODUCTNUMBER = sortie_full_barcode.STYLE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product_tmp.ATTRIBUTETYPENAME = "Category";
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product_tmp.ATTRIBUTENAME = "Category";
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product_tmp.TEXTVALUE = sortie_full_barcode.CATEGORY ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_20 = false;










 


	tos_count_tMap_20++;

/**
 * [tMap_20 main ] stop
 */
	
	/**
	 * [tMap_20 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_20";

	

 



/**
 * [tMap_20 process_data_begin ] stop
 */
// Start of branch "copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product"
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product != null) { 



	
	/**
	 * [tUniqRow_18 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_18";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product");
					}
					
row34 = null;			
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.PRODUCTNUMBER == null){
	finder_tUniqRow_18.PRODUCTNUMBER = null;
}else{
	finder_tUniqRow_18.PRODUCTNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.PRODUCTNUMBER.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTETYPENAME == null){
	finder_tUniqRow_18.ATTRIBUTETYPENAME = null;
}else{
	finder_tUniqRow_18.ATTRIBUTETYPENAME = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTETYPENAME.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTENAME == null){
	finder_tUniqRow_18.ATTRIBUTENAME = null;
}else{
	finder_tUniqRow_18.ATTRIBUTENAME = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTENAME.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.TEXTVALUE == null){
	finder_tUniqRow_18.TEXTVALUE = null;
}else{
	finder_tUniqRow_18.TEXTVALUE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.TEXTVALUE.toLowerCase();
}	
finder_tUniqRow_18.hashCodeDirty = true;
if (!keystUniqRow_18.contains(finder_tUniqRow_18)) {
		KeyStruct_tUniqRow_18 new_tUniqRow_18 = new KeyStruct_tUniqRow_18();

		
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.PRODUCTNUMBER == null){
	new_tUniqRow_18.PRODUCTNUMBER = null;
}else{
	new_tUniqRow_18.PRODUCTNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.PRODUCTNUMBER.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTETYPENAME == null){
	new_tUniqRow_18.ATTRIBUTETYPENAME = null;
}else{
	new_tUniqRow_18.ATTRIBUTETYPENAME = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTETYPENAME.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTENAME == null){
	new_tUniqRow_18.ATTRIBUTENAME = null;
}else{
	new_tUniqRow_18.ATTRIBUTENAME = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTENAME.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.TEXTVALUE == null){
	new_tUniqRow_18.TEXTVALUE = null;
}else{
	new_tUniqRow_18.TEXTVALUE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.TEXTVALUE.toLowerCase();
}
		
		keystUniqRow_18.add(new_tUniqRow_18);if(row34 == null){ 
	
	row34 = new row34Struct();
}row34.PRODUCTNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.PRODUCTNUMBER;			row34.ATTRIBUTETYPENAME = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTETYPENAME;			row34.ATTRIBUTENAME = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTENAME;			row34.TEXTVALUE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.TEXTVALUE;					
		nb_uniques_tUniqRow_18++;
	} else {
	  nb_duplicates_tUniqRow_18++;
	}

 


	tos_count_tUniqRow_18++;

/**
 * [tUniqRow_18 main ] stop
 */
	
	/**
	 * [tUniqRow_18 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_18";

	

 



/**
 * [tUniqRow_18 process_data_begin ] stop
 */
// Start of branch "row34"
if(row34 != null) { 



	
	/**
	 * [tHashOutput_9 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_9";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row34");
					}
					



    
		row34Struct oneRow_tHashOutput_9 = new row34Struct();
				
					oneRow_tHashOutput_9.PRODUCTNUMBER = row34.PRODUCTNUMBER;
					oneRow_tHashOutput_9.ATTRIBUTETYPENAME = row34.ATTRIBUTETYPENAME;
					oneRow_tHashOutput_9.ATTRIBUTENAME = row34.ATTRIBUTENAME;
					oneRow_tHashOutput_9.TEXTVALUE = row34.TEXTVALUE;
		
        tHashFile_tHashOutput_9.put(oneRow_tHashOutput_9);
        nb_line_tHashOutput_9 ++;
 


	tos_count_tHashOutput_9++;

/**
 * [tHashOutput_9 main ] stop
 */
	
	/**
	 * [tHashOutput_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_9";

	

 



/**
 * [tHashOutput_9 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_9";

	

 



/**
 * [tHashOutput_9 process_data_end ] stop
 */

} // End of branch "row34"




	
	/**
	 * [tUniqRow_18 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_18";

	

 



/**
 * [tUniqRow_18 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product"




	
	/**
	 * [tMap_20 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_20";

	

 



/**
 * [tMap_20 process_data_end ] stop
 */

} // End of branch "sortie_full_barcode"




	
	/**
	 * [tMap_19 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_19";

	

 



/**
 * [tMap_19 process_data_end ] stop
 */

} // End of branch "copyOfsortie_released_product_variant"




// Start of branch "sortie_product_status"
if(sortie_product_status != null) { 



	
	/**
	 * [tUniqRow_16 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_16";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_product_status");
					}
					
row32 = null;			
if(sortie_product_status.ITEMID == null){
	finder_tUniqRow_16.ITEMID = null;
}else{
	finder_tUniqRow_16.ITEMID = sortie_product_status.ITEMID.toLowerCase();
}
if(sortie_product_status.INVENTSIZEID == null){
	finder_tUniqRow_16.INVENTSIZEID = null;
}else{
	finder_tUniqRow_16.INVENTSIZEID = sortie_product_status.INVENTSIZEID.toLowerCase();
}
if(sortie_product_status.INVENTCOLORID == null){
	finder_tUniqRow_16.INVENTCOLORID = null;
}else{
	finder_tUniqRow_16.INVENTCOLORID = sortie_product_status.INVENTCOLORID.toLowerCase();
}
if(sortie_product_status.PRODUCTSTATUSID == null){
	finder_tUniqRow_16.PRODUCTSTATUSID = null;
}else{
	finder_tUniqRow_16.PRODUCTSTATUSID = sortie_product_status.PRODUCTSTATUSID.toLowerCase();
}
if(sortie_product_status.SEASONCODE == null){
	finder_tUniqRow_16.SEASONCODE = null;
}else{
	finder_tUniqRow_16.SEASONCODE = sortie_product_status.SEASONCODE.toLowerCase();
}	
finder_tUniqRow_16.hashCodeDirty = true;
if (!keystUniqRow_16.contains(finder_tUniqRow_16)) {
		KeyStruct_tUniqRow_16 new_tUniqRow_16 = new KeyStruct_tUniqRow_16();

		
if(sortie_product_status.ITEMID == null){
	new_tUniqRow_16.ITEMID = null;
}else{
	new_tUniqRow_16.ITEMID = sortie_product_status.ITEMID.toLowerCase();
}
if(sortie_product_status.INVENTSIZEID == null){
	new_tUniqRow_16.INVENTSIZEID = null;
}else{
	new_tUniqRow_16.INVENTSIZEID = sortie_product_status.INVENTSIZEID.toLowerCase();
}
if(sortie_product_status.INVENTCOLORID == null){
	new_tUniqRow_16.INVENTCOLORID = null;
}else{
	new_tUniqRow_16.INVENTCOLORID = sortie_product_status.INVENTCOLORID.toLowerCase();
}
if(sortie_product_status.PRODUCTSTATUSID == null){
	new_tUniqRow_16.PRODUCTSTATUSID = null;
}else{
	new_tUniqRow_16.PRODUCTSTATUSID = sortie_product_status.PRODUCTSTATUSID.toLowerCase();
}
if(sortie_product_status.SEASONCODE == null){
	new_tUniqRow_16.SEASONCODE = null;
}else{
	new_tUniqRow_16.SEASONCODE = sortie_product_status.SEASONCODE.toLowerCase();
}
		
		keystUniqRow_16.add(new_tUniqRow_16);if(row32 == null){ 
	
	row32 = new row32Struct();
}row32.ITEMID = sortie_product_status.ITEMID;			row32.INVENTSIZEID = sortie_product_status.INVENTSIZEID;			row32.INVENTSTYLEID = sortie_product_status.INVENTSTYLEID;			row32.INVENTCOLORID = sortie_product_status.INVENTCOLORID;			row32.PRODUCTSTATUSID = sortie_product_status.PRODUCTSTATUSID;			row32.SEASONCODE = sortie_product_status.SEASONCODE;					
		nb_uniques_tUniqRow_16++;
	} else {
	  nb_duplicates_tUniqRow_16++;
	}

 


	tos_count_tUniqRow_16++;

/**
 * [tUniqRow_16 main ] stop
 */
	
	/**
	 * [tUniqRow_16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_16";

	

 



/**
 * [tUniqRow_16 process_data_begin ] stop
 */
// Start of branch "row32"
if(row32 != null) { 



	
	/**
	 * [tFileOutputExcel_9 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_9";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row32");
					}
					

				xlsxTool_tFileOutputExcel_9.addRow();
									   				
	    				if(row32.ITEMID != null) {
    				
							xlsxTool_tFileOutputExcel_9.addCellValue(String.valueOf(row32.ITEMID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_9.addCellNullValue();
	    				}
					
									   				
	    				if(row32.INVENTSIZEID != null) {
    				
							xlsxTool_tFileOutputExcel_9.addCellValue(String.valueOf(row32.INVENTSIZEID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_9.addCellNullValue();
	    				}
					
									   				
	    				if(row32.INVENTSTYLEID != null) {
    				
							xlsxTool_tFileOutputExcel_9.addCellValue(String.valueOf(row32.INVENTSTYLEID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_9.addCellNullValue();
	    				}
					
									   				
	    				if(row32.INVENTCOLORID != null) {
    				
							xlsxTool_tFileOutputExcel_9.addCellValue(String.valueOf(row32.INVENTCOLORID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_9.addCellNullValue();
	    				}
					
									   				
	    				if(row32.PRODUCTSTATUSID != null) {
    				
							xlsxTool_tFileOutputExcel_9.addCellValue(String.valueOf(row32.PRODUCTSTATUSID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_9.addCellNullValue();
	    				}
					
									   				
	    				if(row32.SEASONCODE != null) {
    				
							xlsxTool_tFileOutputExcel_9.addCellValue(String.valueOf(row32.SEASONCODE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_9.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_9++;
				
 


	tos_count_tFileOutputExcel_9++;

/**
 * [tFileOutputExcel_9 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_9";

	

 



/**
 * [tFileOutputExcel_9 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_9";

	

 



/**
 * [tFileOutputExcel_9 process_data_end ] stop
 */

} // End of branch "row32"




	
	/**
	 * [tUniqRow_16 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_16";

	

 



/**
 * [tUniqRow_16 process_data_end ] stop
 */

} // End of branch "sortie_product_status"




	
	/**
	 * [tMap_18 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_18";

	

 



/**
 * [tMap_18 process_data_end ] stop
 */

} // End of branch "sortie_full_varian"




	
	/**
	 * [tMap_17 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_17";

	

 



/**
 * [tMap_17 process_data_end ] stop
 */

} // End of branch "sortie_full_product_variant"




// Start of branch "sortie_product_variant"
if(sortie_product_variant != null) { 



	
	/**
	 * [tUniqRow_14 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_14";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_product_variant");
					}
					
row30 = null;			
if(sortie_product_variant.PRODUCTMASTERNUMBER == null){
	finder_tUniqRow_14.PRODUCTMASTERNUMBER = null;
}else{
	finder_tUniqRow_14.PRODUCTMASTERNUMBER = sortie_product_variant.PRODUCTMASTERNUMBER.toLowerCase();
}
if(sortie_product_variant.PRODUCTCOLORID == null){
	finder_tUniqRow_14.PRODUCTCOLORID = null;
}else{
	finder_tUniqRow_14.PRODUCTCOLORID = sortie_product_variant.PRODUCTCOLORID.toLowerCase();
}
if(sortie_product_variant.PRODUCTSIZEID == null){
	finder_tUniqRow_14.PRODUCTSIZEID = null;
}else{
	finder_tUniqRow_14.PRODUCTSIZEID = sortie_product_variant.PRODUCTSIZEID.toLowerCase();
}
if(sortie_product_variant.PRODUCTSTYLEID == null){
	finder_tUniqRow_14.PRODUCTSTYLEID = null;
}else{
	finder_tUniqRow_14.PRODUCTSTYLEID = sortie_product_variant.PRODUCTSTYLEID.toLowerCase();
}
if(sortie_product_variant.PRODUCTNAME == null){
	finder_tUniqRow_14.PRODUCTNAME = null;
}else{
	finder_tUniqRow_14.PRODUCTNAME = sortie_product_variant.PRODUCTNAME.toLowerCase();
}
if(sortie_product_variant.PRODUCTSEARCHNAME == null){
	finder_tUniqRow_14.PRODUCTSEARCHNAME = null;
}else{
	finder_tUniqRow_14.PRODUCTSEARCHNAME = sortie_product_variant.PRODUCTSEARCHNAME.toLowerCase();
}
if(sortie_product_variant.PRODUCTVARIANTNUMBER == null){
	finder_tUniqRow_14.PRODUCTVARIANTNUMBER = null;
}else{
	finder_tUniqRow_14.PRODUCTVARIANTNUMBER = sortie_product_variant.PRODUCTVARIANTNUMBER.toLowerCase();
}	
finder_tUniqRow_14.hashCodeDirty = true;
if (!keystUniqRow_14.contains(finder_tUniqRow_14)) {
		KeyStruct_tUniqRow_14 new_tUniqRow_14 = new KeyStruct_tUniqRow_14();

		
if(sortie_product_variant.PRODUCTMASTERNUMBER == null){
	new_tUniqRow_14.PRODUCTMASTERNUMBER = null;
}else{
	new_tUniqRow_14.PRODUCTMASTERNUMBER = sortie_product_variant.PRODUCTMASTERNUMBER.toLowerCase();
}
if(sortie_product_variant.PRODUCTCOLORID == null){
	new_tUniqRow_14.PRODUCTCOLORID = null;
}else{
	new_tUniqRow_14.PRODUCTCOLORID = sortie_product_variant.PRODUCTCOLORID.toLowerCase();
}
if(sortie_product_variant.PRODUCTSIZEID == null){
	new_tUniqRow_14.PRODUCTSIZEID = null;
}else{
	new_tUniqRow_14.PRODUCTSIZEID = sortie_product_variant.PRODUCTSIZEID.toLowerCase();
}
if(sortie_product_variant.PRODUCTSTYLEID == null){
	new_tUniqRow_14.PRODUCTSTYLEID = null;
}else{
	new_tUniqRow_14.PRODUCTSTYLEID = sortie_product_variant.PRODUCTSTYLEID.toLowerCase();
}
if(sortie_product_variant.PRODUCTNAME == null){
	new_tUniqRow_14.PRODUCTNAME = null;
}else{
	new_tUniqRow_14.PRODUCTNAME = sortie_product_variant.PRODUCTNAME.toLowerCase();
}
if(sortie_product_variant.PRODUCTSEARCHNAME == null){
	new_tUniqRow_14.PRODUCTSEARCHNAME = null;
}else{
	new_tUniqRow_14.PRODUCTSEARCHNAME = sortie_product_variant.PRODUCTSEARCHNAME.toLowerCase();
}
if(sortie_product_variant.PRODUCTVARIANTNUMBER == null){
	new_tUniqRow_14.PRODUCTVARIANTNUMBER = null;
}else{
	new_tUniqRow_14.PRODUCTVARIANTNUMBER = sortie_product_variant.PRODUCTVARIANTNUMBER.toLowerCase();
}
		
		keystUniqRow_14.add(new_tUniqRow_14);if(row30 == null){ 
	
	row30 = new row30Struct();
}row30.PRODUCTMASTERNUMBER = sortie_product_variant.PRODUCTMASTERNUMBER;			row30.PRODUCTCOLORID = sortie_product_variant.PRODUCTCOLORID;			row30.PRODUCTSIZEID = sortie_product_variant.PRODUCTSIZEID;			row30.PRODUCTSTYLEID = sortie_product_variant.PRODUCTSTYLEID;			row30.PRODUCTNAME = sortie_product_variant.PRODUCTNAME;			row30.PRODUCTSEARCHNAME = sortie_product_variant.PRODUCTSEARCHNAME;			row30.PRODUCTVARIANTNUMBER = sortie_product_variant.PRODUCTVARIANTNUMBER;					
		nb_uniques_tUniqRow_14++;
	} else {
	  nb_duplicates_tUniqRow_14++;
	}

 


	tos_count_tUniqRow_14++;

/**
 * [tUniqRow_14 main ] stop
 */
	
	/**
	 * [tUniqRow_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_14";

	

 



/**
 * [tUniqRow_14 process_data_begin ] stop
 */
// Start of branch "row30"
if(row30 != null) { 



	
	/**
	 * [tFileOutputExcel_7 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_7";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row30");
					}
					

				xlsxTool_tFileOutputExcel_7.addRow();
									   				
	    				if(row30.PRODUCTMASTERNUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_7.addCellValue(String.valueOf(row30.PRODUCTMASTERNUMBER));
	    				} else {
	    					xlsxTool_tFileOutputExcel_7.addCellNullValue();
	    				}
					
									   				
	    				if(row30.PRODUCTCOLORID != null) {
    				
							xlsxTool_tFileOutputExcel_7.addCellValue(String.valueOf(row30.PRODUCTCOLORID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_7.addCellNullValue();
	    				}
					
									   				
	    				if(row30.PRODUCTSIZEID != null) {
    				
							xlsxTool_tFileOutputExcel_7.addCellValue(String.valueOf(row30.PRODUCTSIZEID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_7.addCellNullValue();
	    				}
					
									   				
	    				if(row30.PRODUCTSTYLEID != null) {
    				
							xlsxTool_tFileOutputExcel_7.addCellValue(String.valueOf(row30.PRODUCTSTYLEID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_7.addCellNullValue();
	    				}
					
									   				
	    				if(row30.PRODUCTNAME != null) {
    				
							xlsxTool_tFileOutputExcel_7.addCellValue(String.valueOf(row30.PRODUCTNAME));
	    				} else {
	    					xlsxTool_tFileOutputExcel_7.addCellNullValue();
	    				}
					
									   				
	    				if(row30.PRODUCTSEARCHNAME != null) {
    				
							xlsxTool_tFileOutputExcel_7.addCellValue(String.valueOf(row30.PRODUCTSEARCHNAME));
	    				} else {
	    					xlsxTool_tFileOutputExcel_7.addCellNullValue();
	    				}
					
									   				
	    				if(row30.PRODUCTVARIANTNUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_7.addCellValue(String.valueOf(row30.PRODUCTVARIANTNUMBER));
	    				} else {
	    					xlsxTool_tFileOutputExcel_7.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_7++;
				
 


	tos_count_tFileOutputExcel_7++;

/**
 * [tFileOutputExcel_7 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_7";

	

 



/**
 * [tFileOutputExcel_7 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_7";

	

 



/**
 * [tFileOutputExcel_7 process_data_end ] stop
 */

} // End of branch "row30"




	
	/**
	 * [tUniqRow_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_14";

	

 



/**
 * [tUniqRow_14 process_data_end ] stop
 */

} // End of branch "sortie_product_variant"




	
	/**
	 * [tMap_16 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_16";

	

 



/**
 * [tMap_16 process_data_end ] stop
 */

} // End of branch "sortie_full_fits"




// Start of branch "sortie_fits"
if(sortie_fits != null) { 



	
	/**
	 * [tUniqRow_13 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_13";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_fits");
					}
					
row29 = null;			
if(sortie_fits.PRODUCTMASTERNUMBER == null){
	finder_tUniqRow_13.PRODUCTMASTERNUMBER = null;
}else{
	finder_tUniqRow_13.PRODUCTMASTERNUMBER = sortie_fits.PRODUCTMASTERNUMBER.toLowerCase();
}
if(sortie_fits.PRODUCTSTYLEID == null){
	finder_tUniqRow_13.PRODUCTSTYLEID = null;
}else{
	finder_tUniqRow_13.PRODUCTSTYLEID = sortie_fits.PRODUCTSTYLEID.toLowerCase();
}	
finder_tUniqRow_13.hashCodeDirty = true;
if (!keystUniqRow_13.contains(finder_tUniqRow_13)) {
		KeyStruct_tUniqRow_13 new_tUniqRow_13 = new KeyStruct_tUniqRow_13();

		
if(sortie_fits.PRODUCTMASTERNUMBER == null){
	new_tUniqRow_13.PRODUCTMASTERNUMBER = null;
}else{
	new_tUniqRow_13.PRODUCTMASTERNUMBER = sortie_fits.PRODUCTMASTERNUMBER.toLowerCase();
}
if(sortie_fits.PRODUCTSTYLEID == null){
	new_tUniqRow_13.PRODUCTSTYLEID = null;
}else{
	new_tUniqRow_13.PRODUCTSTYLEID = sortie_fits.PRODUCTSTYLEID.toLowerCase();
}
		
		keystUniqRow_13.add(new_tUniqRow_13);if(row29 == null){ 
	
	row29 = new row29Struct();
}row29.PRODUCTMASTERNUMBER = sortie_fits.PRODUCTMASTERNUMBER;			row29.PRODUCTSTYLEID = sortie_fits.PRODUCTSTYLEID;					
		nb_uniques_tUniqRow_13++;
	} else {
	  nb_duplicates_tUniqRow_13++;
	}

 


	tos_count_tUniqRow_13++;

/**
 * [tUniqRow_13 main ] stop
 */
	
	/**
	 * [tUniqRow_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_13";

	

 



/**
 * [tUniqRow_13 process_data_begin ] stop
 */
// Start of branch "row29"
if(row29 != null) { 



	
	/**
	 * [tFileOutputExcel_6 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_6";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row29");
					}
					

				xlsxTool_tFileOutputExcel_6.addRow();
									   				
	    				if(row29.PRODUCTMASTERNUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_6.addCellValue(String.valueOf(row29.PRODUCTMASTERNUMBER));
	    				} else {
	    					xlsxTool_tFileOutputExcel_6.addCellNullValue();
	    				}
					
									   				
	    				if(row29.PRODUCTSTYLEID != null) {
    				
							xlsxTool_tFileOutputExcel_6.addCellValue(String.valueOf(row29.PRODUCTSTYLEID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_6.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_6++;
				
 


	tos_count_tFileOutputExcel_6++;

/**
 * [tFileOutputExcel_6 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_6";

	

 



/**
 * [tFileOutputExcel_6 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_6";

	

 



/**
 * [tFileOutputExcel_6 process_data_end ] stop
 */

} // End of branch "row29"




	
	/**
	 * [tUniqRow_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_13";

	

 



/**
 * [tUniqRow_13 process_data_end ] stop
 */

} // End of branch "sortie_fits"




	
	/**
	 * [tMap_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_15";

	

 



/**
 * [tMap_15 process_data_end ] stop
 */

} // End of branch "sortie_full_size"




// Start of branch "sortie_size"
if(sortie_size != null) { 



	
	/**
	 * [tUniqRow_12 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_12";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_size");
					}
					
row28 = null;			
if(sortie_size.PRODUCTMASTERNUMBER == null){
	finder_tUniqRow_12.PRODUCTMASTERNUMBER = null;
}else{
	finder_tUniqRow_12.PRODUCTMASTERNUMBER = sortie_size.PRODUCTMASTERNUMBER.toLowerCase();
}
if(sortie_size.PRODUCTSIZEID == null){
	finder_tUniqRow_12.PRODUCTSIZEID = null;
}else{
	finder_tUniqRow_12.PRODUCTSIZEID = sortie_size.PRODUCTSIZEID.toLowerCase();
}	
finder_tUniqRow_12.hashCodeDirty = true;
if (!keystUniqRow_12.contains(finder_tUniqRow_12)) {
		KeyStruct_tUniqRow_12 new_tUniqRow_12 = new KeyStruct_tUniqRow_12();

		
if(sortie_size.PRODUCTMASTERNUMBER == null){
	new_tUniqRow_12.PRODUCTMASTERNUMBER = null;
}else{
	new_tUniqRow_12.PRODUCTMASTERNUMBER = sortie_size.PRODUCTMASTERNUMBER.toLowerCase();
}
if(sortie_size.PRODUCTSIZEID == null){
	new_tUniqRow_12.PRODUCTSIZEID = null;
}else{
	new_tUniqRow_12.PRODUCTSIZEID = sortie_size.PRODUCTSIZEID.toLowerCase();
}
		
		keystUniqRow_12.add(new_tUniqRow_12);if(row28 == null){ 
	
	row28 = new row28Struct();
}row28.PRODUCTMASTERNUMBER = sortie_size.PRODUCTMASTERNUMBER;			row28.PRODUCTSIZEID = sortie_size.PRODUCTSIZEID;					
		nb_uniques_tUniqRow_12++;
	} else {
	  nb_duplicates_tUniqRow_12++;
	}

 


	tos_count_tUniqRow_12++;

/**
 * [tUniqRow_12 main ] stop
 */
	
	/**
	 * [tUniqRow_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_12";

	

 



/**
 * [tUniqRow_12 process_data_begin ] stop
 */
// Start of branch "row28"
if(row28 != null) { 



	
	/**
	 * [tFileOutputExcel_5 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row28");
					}
					

				xlsxTool_tFileOutputExcel_5.addRow();
									   				
	    				if(row28.PRODUCTMASTERNUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_5.addCellValue(String.valueOf(row28.PRODUCTMASTERNUMBER));
	    				} else {
	    					xlsxTool_tFileOutputExcel_5.addCellNullValue();
	    				}
					
									   				
	    				if(row28.PRODUCTSIZEID != null) {
    				
							xlsxTool_tFileOutputExcel_5.addCellValue(String.valueOf(row28.PRODUCTSIZEID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_5.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_5++;
				
 


	tos_count_tFileOutputExcel_5++;

/**
 * [tFileOutputExcel_5 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_5";

	

 



/**
 * [tFileOutputExcel_5 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_5";

	

 



/**
 * [tFileOutputExcel_5 process_data_end ] stop
 */

} // End of branch "row28"




	
	/**
	 * [tUniqRow_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_12";

	

 



/**
 * [tUniqRow_12 process_data_end ] stop
 */

} // End of branch "sortie_size"




	
	/**
	 * [tMap_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_14";

	

 



/**
 * [tMap_14 process_data_end ] stop
 */

} // End of branch "sortie_full_"




// Start of branch "sortie_color"
if(sortie_color != null) { 



	
	/**
	 * [tUniqRow_11 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_11";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_color");
					}
					
row27 = null;			
if(sortie_color.PRODUCTMASTERNUMBER == null){
	finder_tUniqRow_11.PRODUCTMASTERNUMBER = null;
}else{
	finder_tUniqRow_11.PRODUCTMASTERNUMBER = sortie_color.PRODUCTMASTERNUMBER.toLowerCase();
}
if(sortie_color.PRODUCTCOLORID == null){
	finder_tUniqRow_11.PRODUCTCOLORID = null;
}else{
	finder_tUniqRow_11.PRODUCTCOLORID = sortie_color.PRODUCTCOLORID.toLowerCase();
}	
finder_tUniqRow_11.hashCodeDirty = true;
if (!keystUniqRow_11.contains(finder_tUniqRow_11)) {
		KeyStruct_tUniqRow_11 new_tUniqRow_11 = new KeyStruct_tUniqRow_11();

		
if(sortie_color.PRODUCTMASTERNUMBER == null){
	new_tUniqRow_11.PRODUCTMASTERNUMBER = null;
}else{
	new_tUniqRow_11.PRODUCTMASTERNUMBER = sortie_color.PRODUCTMASTERNUMBER.toLowerCase();
}
if(sortie_color.PRODUCTCOLORID == null){
	new_tUniqRow_11.PRODUCTCOLORID = null;
}else{
	new_tUniqRow_11.PRODUCTCOLORID = sortie_color.PRODUCTCOLORID.toLowerCase();
}
		
		keystUniqRow_11.add(new_tUniqRow_11);if(row27 == null){ 
	
	row27 = new row27Struct();
}row27.PRODUCTMASTERNUMBER = sortie_color.PRODUCTMASTERNUMBER;			row27.PRODUCTCOLORID = sortie_color.PRODUCTCOLORID;					
		nb_uniques_tUniqRow_11++;
	} else {
	  nb_duplicates_tUniqRow_11++;
	}

 


	tos_count_tUniqRow_11++;

/**
 * [tUniqRow_11 main ] stop
 */
	
	/**
	 * [tUniqRow_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_11";

	

 



/**
 * [tUniqRow_11 process_data_begin ] stop
 */
// Start of branch "row27"
if(row27 != null) { 



	
	/**
	 * [tFileOutputExcel_4 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row27");
					}
					

				xlsxTool_tFileOutputExcel_4.addRow();
									   				
	    				if(row27.PRODUCTMASTERNUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_4.addCellValue(String.valueOf(row27.PRODUCTMASTERNUMBER));
	    				} else {
	    					xlsxTool_tFileOutputExcel_4.addCellNullValue();
	    				}
					
									   				
	    				if(row27.PRODUCTCOLORID != null) {
    				
							xlsxTool_tFileOutputExcel_4.addCellValue(String.valueOf(row27.PRODUCTCOLORID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_4.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_4++;
				
 


	tos_count_tFileOutputExcel_4++;

/**
 * [tFileOutputExcel_4 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_4";

	

 



/**
 * [tFileOutputExcel_4 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_4";

	

 



/**
 * [tFileOutputExcel_4 process_data_end ] stop
 */

} // End of branch "row27"




	
	/**
	 * [tUniqRow_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_11";

	

 



/**
 * [tUniqRow_11 process_data_end ] stop
 */

} // End of branch "sortie_color"




	
	/**
	 * [tMap_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_13";

	

 



/**
 * [tMap_13 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full"




// Start of branch "copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product"
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product != null) { 



	
	/**
	 * [tUniqRow_10 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_10";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product");
					}
					
row25 = null;			
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.PRODUCTNUMBER == null){
	finder_tUniqRow_10.PRODUCTNUMBER = null;
}else{
	finder_tUniqRow_10.PRODUCTNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.PRODUCTNUMBER.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTETYPENAME == null){
	finder_tUniqRow_10.ATTRIBUTETYPENAME = null;
}else{
	finder_tUniqRow_10.ATTRIBUTETYPENAME = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTETYPENAME.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTENAME == null){
	finder_tUniqRow_10.ATTRIBUTENAME = null;
}else{
	finder_tUniqRow_10.ATTRIBUTENAME = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTENAME.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.TEXTVALUE == null){
	finder_tUniqRow_10.TEXTVALUE = null;
}else{
	finder_tUniqRow_10.TEXTVALUE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.TEXTVALUE.toLowerCase();
}	
finder_tUniqRow_10.hashCodeDirty = true;
if (!keystUniqRow_10.contains(finder_tUniqRow_10)) {
		KeyStruct_tUniqRow_10 new_tUniqRow_10 = new KeyStruct_tUniqRow_10();

		
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.PRODUCTNUMBER == null){
	new_tUniqRow_10.PRODUCTNUMBER = null;
}else{
	new_tUniqRow_10.PRODUCTNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.PRODUCTNUMBER.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTETYPENAME == null){
	new_tUniqRow_10.ATTRIBUTETYPENAME = null;
}else{
	new_tUniqRow_10.ATTRIBUTETYPENAME = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTETYPENAME.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTENAME == null){
	new_tUniqRow_10.ATTRIBUTENAME = null;
}else{
	new_tUniqRow_10.ATTRIBUTENAME = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTENAME.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.TEXTVALUE == null){
	new_tUniqRow_10.TEXTVALUE = null;
}else{
	new_tUniqRow_10.TEXTVALUE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.TEXTVALUE.toLowerCase();
}
		
		keystUniqRow_10.add(new_tUniqRow_10);if(row25 == null){ 
	
	row25 = new row25Struct();
}row25.PRODUCTNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.PRODUCTNUMBER;			row25.ATTRIBUTETYPENAME = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTETYPENAME;			row25.ATTRIBUTENAME = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTENAME;			row25.TEXTVALUE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.TEXTVALUE;					
		nb_uniques_tUniqRow_10++;
	} else {
	  nb_duplicates_tUniqRow_10++;
	}

 


	tos_count_tUniqRow_10++;

/**
 * [tUniqRow_10 main ] stop
 */
	
	/**
	 * [tUniqRow_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_10";

	

 



/**
 * [tUniqRow_10 process_data_begin ] stop
 */
// Start of branch "row25"
if(row25 != null) { 



	
	/**
	 * [tHashOutput_8 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_8";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row25");
					}
					



    
		row25Struct oneRow_tHashOutput_8 = new row25Struct();
				
					oneRow_tHashOutput_8.PRODUCTNUMBER = row25.PRODUCTNUMBER;
					oneRow_tHashOutput_8.ATTRIBUTETYPENAME = row25.ATTRIBUTETYPENAME;
					oneRow_tHashOutput_8.ATTRIBUTENAME = row25.ATTRIBUTENAME;
					oneRow_tHashOutput_8.TEXTVALUE = row25.TEXTVALUE;
		
        tHashFile_tHashOutput_8.put(oneRow_tHashOutput_8);
        nb_line_tHashOutput_8 ++;
 


	tos_count_tHashOutput_8++;

/**
 * [tHashOutput_8 main ] stop
 */
	
	/**
	 * [tHashOutput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_8";

	

 



/**
 * [tHashOutput_8 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_8";

	

 



/**
 * [tHashOutput_8 process_data_end ] stop
 */

} // End of branch "row25"




	
	/**
	 * [tUniqRow_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_10";

	

 



/**
 * [tUniqRow_10 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product"




	
	/**
	 * [tMap_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_12";

	

 



/**
 * [tMap_12 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full"




// Start of branch "copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product"
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product != null) { 



	
	/**
	 * [tUniqRow_9 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_9";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product");
					}
					
row22 = null;			
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.PRODUCTNUMBER == null){
	finder_tUniqRow_9.PRODUCTNUMBER = null;
}else{
	finder_tUniqRow_9.PRODUCTNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.PRODUCTNUMBER.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTETYPENAME == null){
	finder_tUniqRow_9.ATTRIBUTETYPENAME = null;
}else{
	finder_tUniqRow_9.ATTRIBUTETYPENAME = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTETYPENAME.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTENAME == null){
	finder_tUniqRow_9.ATTRIBUTENAME = null;
}else{
	finder_tUniqRow_9.ATTRIBUTENAME = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTENAME.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.TEXTVALUE == null){
	finder_tUniqRow_9.TEXTVALUE = null;
}else{
	finder_tUniqRow_9.TEXTVALUE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.TEXTVALUE.toLowerCase();
}	
finder_tUniqRow_9.hashCodeDirty = true;
if (!keystUniqRow_9.contains(finder_tUniqRow_9)) {
		KeyStruct_tUniqRow_9 new_tUniqRow_9 = new KeyStruct_tUniqRow_9();

		
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.PRODUCTNUMBER == null){
	new_tUniqRow_9.PRODUCTNUMBER = null;
}else{
	new_tUniqRow_9.PRODUCTNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.PRODUCTNUMBER.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTETYPENAME == null){
	new_tUniqRow_9.ATTRIBUTETYPENAME = null;
}else{
	new_tUniqRow_9.ATTRIBUTETYPENAME = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTETYPENAME.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTENAME == null){
	new_tUniqRow_9.ATTRIBUTENAME = null;
}else{
	new_tUniqRow_9.ATTRIBUTENAME = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTENAME.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.TEXTVALUE == null){
	new_tUniqRow_9.TEXTVALUE = null;
}else{
	new_tUniqRow_9.TEXTVALUE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.TEXTVALUE.toLowerCase();
}
		
		keystUniqRow_9.add(new_tUniqRow_9);if(row22 == null){ 
	
	row22 = new row22Struct();
}row22.PRODUCTNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.PRODUCTNUMBER;			row22.ATTRIBUTETYPENAME = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTETYPENAME;			row22.ATTRIBUTENAME = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTENAME;			row22.TEXTVALUE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.TEXTVALUE;					
		nb_uniques_tUniqRow_9++;
	} else {
	  nb_duplicates_tUniqRow_9++;
	}

 


	tos_count_tUniqRow_9++;

/**
 * [tUniqRow_9 main ] stop
 */
	
	/**
	 * [tUniqRow_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_9";

	

 



/**
 * [tUniqRow_9 process_data_begin ] stop
 */
// Start of branch "row22"
if(row22 != null) { 



	
	/**
	 * [tHashOutput_7 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_7";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row22");
					}
					



    
		row22Struct oneRow_tHashOutput_7 = new row22Struct();
				
					oneRow_tHashOutput_7.PRODUCTNUMBER = row22.PRODUCTNUMBER;
					oneRow_tHashOutput_7.ATTRIBUTETYPENAME = row22.ATTRIBUTETYPENAME;
					oneRow_tHashOutput_7.ATTRIBUTENAME = row22.ATTRIBUTENAME;
					oneRow_tHashOutput_7.TEXTVALUE = row22.TEXTVALUE;
		
        tHashFile_tHashOutput_7.put(oneRow_tHashOutput_7);
        nb_line_tHashOutput_7 ++;
 


	tos_count_tHashOutput_7++;

/**
 * [tHashOutput_7 main ] stop
 */
	
	/**
	 * [tHashOutput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_7";

	

 



/**
 * [tHashOutput_7 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_7";

	

 



/**
 * [tHashOutput_7 process_data_end ] stop
 */

} // End of branch "row22"




	
	/**
	 * [tUniqRow_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_9";

	

 



/**
 * [tUniqRow_9 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product"




	
	/**
	 * [tMap_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_11";

	

 



/**
 * [tMap_11 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full"




// Start of branch "copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product"
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product != null) { 



	
	/**
	 * [tUniqRow_8 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_8";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product");
					}
					
row20 = null;			
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.PRODUCTNUMBER == null){
	finder_tUniqRow_8.PRODUCTNUMBER = null;
}else{
	finder_tUniqRow_8.PRODUCTNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.PRODUCTNUMBER.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTETYPENAME == null){
	finder_tUniqRow_8.ATTRIBUTETYPENAME = null;
}else{
	finder_tUniqRow_8.ATTRIBUTETYPENAME = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTETYPENAME.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTENAME == null){
	finder_tUniqRow_8.ATTRIBUTENAME = null;
}else{
	finder_tUniqRow_8.ATTRIBUTENAME = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTENAME.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.TEXTVALUE == null){
	finder_tUniqRow_8.TEXTVALUE = null;
}else{
	finder_tUniqRow_8.TEXTVALUE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.TEXTVALUE.toLowerCase();
}	
finder_tUniqRow_8.hashCodeDirty = true;
if (!keystUniqRow_8.contains(finder_tUniqRow_8)) {
		KeyStruct_tUniqRow_8 new_tUniqRow_8 = new KeyStruct_tUniqRow_8();

		
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.PRODUCTNUMBER == null){
	new_tUniqRow_8.PRODUCTNUMBER = null;
}else{
	new_tUniqRow_8.PRODUCTNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.PRODUCTNUMBER.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTETYPENAME == null){
	new_tUniqRow_8.ATTRIBUTETYPENAME = null;
}else{
	new_tUniqRow_8.ATTRIBUTETYPENAME = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTETYPENAME.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTENAME == null){
	new_tUniqRow_8.ATTRIBUTENAME = null;
}else{
	new_tUniqRow_8.ATTRIBUTENAME = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTENAME.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.TEXTVALUE == null){
	new_tUniqRow_8.TEXTVALUE = null;
}else{
	new_tUniqRow_8.TEXTVALUE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.TEXTVALUE.toLowerCase();
}
		
		keystUniqRow_8.add(new_tUniqRow_8);if(row20 == null){ 
	
	row20 = new row20Struct();
}row20.PRODUCTNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.PRODUCTNUMBER;			row20.ATTRIBUTETYPENAME = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTETYPENAME;			row20.ATTRIBUTENAME = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTENAME;			row20.TEXTVALUE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.TEXTVALUE;					
		nb_uniques_tUniqRow_8++;
	} else {
	  nb_duplicates_tUniqRow_8++;
	}

 


	tos_count_tUniqRow_8++;

/**
 * [tUniqRow_8 main ] stop
 */
	
	/**
	 * [tUniqRow_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_8";

	

 



/**
 * [tUniqRow_8 process_data_begin ] stop
 */
// Start of branch "row20"
if(row20 != null) { 



	
	/**
	 * [tHashOutput_6 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_6";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row20");
					}
					



    
		row20Struct oneRow_tHashOutput_6 = new row20Struct();
				
					oneRow_tHashOutput_6.PRODUCTNUMBER = row20.PRODUCTNUMBER;
					oneRow_tHashOutput_6.ATTRIBUTETYPENAME = row20.ATTRIBUTETYPENAME;
					oneRow_tHashOutput_6.ATTRIBUTENAME = row20.ATTRIBUTENAME;
					oneRow_tHashOutput_6.TEXTVALUE = row20.TEXTVALUE;
		
        tHashFile_tHashOutput_6.put(oneRow_tHashOutput_6);
        nb_line_tHashOutput_6 ++;
 


	tos_count_tHashOutput_6++;

/**
 * [tHashOutput_6 main ] stop
 */
	
	/**
	 * [tHashOutput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_6";

	

 



/**
 * [tHashOutput_6 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_6";

	

 



/**
 * [tHashOutput_6 process_data_end ] stop
 */

} // End of branch "row20"




	
	/**
	 * [tUniqRow_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_8";

	

 



/**
 * [tUniqRow_8 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product"




	
	/**
	 * [tMap_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_10";

	

 



/**
 * [tMap_10 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full"




// Start of branch "copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product"
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product != null) { 



	
	/**
	 * [tUniqRow_7 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_7";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product");
					}
					
row18 = null;			
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.PRODUCTNUMBER == null){
	finder_tUniqRow_7.PRODUCTNUMBER = null;
}else{
	finder_tUniqRow_7.PRODUCTNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.PRODUCTNUMBER.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTETYPENAME == null){
	finder_tUniqRow_7.ATTRIBUTETYPENAME = null;
}else{
	finder_tUniqRow_7.ATTRIBUTETYPENAME = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTETYPENAME.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTENAME == null){
	finder_tUniqRow_7.ATTRIBUTENAME = null;
}else{
	finder_tUniqRow_7.ATTRIBUTENAME = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTENAME.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.TEXTVALUE == null){
	finder_tUniqRow_7.TEXTVALUE = null;
}else{
	finder_tUniqRow_7.TEXTVALUE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.TEXTVALUE.toLowerCase();
}	
finder_tUniqRow_7.hashCodeDirty = true;
if (!keystUniqRow_7.contains(finder_tUniqRow_7)) {
		KeyStruct_tUniqRow_7 new_tUniqRow_7 = new KeyStruct_tUniqRow_7();

		
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.PRODUCTNUMBER == null){
	new_tUniqRow_7.PRODUCTNUMBER = null;
}else{
	new_tUniqRow_7.PRODUCTNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.PRODUCTNUMBER.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTETYPENAME == null){
	new_tUniqRow_7.ATTRIBUTETYPENAME = null;
}else{
	new_tUniqRow_7.ATTRIBUTETYPENAME = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTETYPENAME.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTENAME == null){
	new_tUniqRow_7.ATTRIBUTENAME = null;
}else{
	new_tUniqRow_7.ATTRIBUTENAME = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTENAME.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.TEXTVALUE == null){
	new_tUniqRow_7.TEXTVALUE = null;
}else{
	new_tUniqRow_7.TEXTVALUE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.TEXTVALUE.toLowerCase();
}
		
		keystUniqRow_7.add(new_tUniqRow_7);if(row18 == null){ 
	
	row18 = new row18Struct();
}row18.PRODUCTNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.PRODUCTNUMBER;			row18.ATTRIBUTETYPENAME = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTETYPENAME;			row18.ATTRIBUTENAME = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTENAME;			row18.TEXTVALUE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product.TEXTVALUE;					
		nb_uniques_tUniqRow_7++;
	} else {
	  nb_duplicates_tUniqRow_7++;
	}

 


	tos_count_tUniqRow_7++;

/**
 * [tUniqRow_7 main ] stop
 */
	
	/**
	 * [tUniqRow_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_7";

	

 



/**
 * [tUniqRow_7 process_data_begin ] stop
 */
// Start of branch "row18"
if(row18 != null) { 



	
	/**
	 * [tHashOutput_5 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row18");
					}
					



    
		row18Struct oneRow_tHashOutput_5 = new row18Struct();
				
					oneRow_tHashOutput_5.PRODUCTNUMBER = row18.PRODUCTNUMBER;
					oneRow_tHashOutput_5.ATTRIBUTETYPENAME = row18.ATTRIBUTETYPENAME;
					oneRow_tHashOutput_5.ATTRIBUTENAME = row18.ATTRIBUTENAME;
					oneRow_tHashOutput_5.TEXTVALUE = row18.TEXTVALUE;
		
        tHashFile_tHashOutput_5.put(oneRow_tHashOutput_5);
        nb_line_tHashOutput_5 ++;
 


	tos_count_tHashOutput_5++;

/**
 * [tHashOutput_5 main ] stop
 */
	
	/**
	 * [tHashOutput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";

	

 



/**
 * [tHashOutput_5 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";

	

 



/**
 * [tHashOutput_5 process_data_end ] stop
 */

} // End of branch "row18"




	
	/**
	 * [tUniqRow_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_7";

	

 



/**
 * [tUniqRow_7 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product"




	
	/**
	 * [tMap_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

 



/**
 * [tMap_9 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfcopyOfcopyOfcopyOfsortie_full"




// Start of branch "copyOfcopyOfcopyOfcopyOfcopyOfsortie_product"
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_product != null) { 



	
	/**
	 * [tUniqRow_6 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_6";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfcopyOfcopyOfcopyOfcopyOfsortie_product");
					}
					
row16 = null;			
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_product.PRODUCTNUMBER == null){
	finder_tUniqRow_6.PRODUCTNUMBER = null;
}else{
	finder_tUniqRow_6.PRODUCTNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfsortie_product.PRODUCTNUMBER.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTETYPENAME == null){
	finder_tUniqRow_6.ATTRIBUTETYPENAME = null;
}else{
	finder_tUniqRow_6.ATTRIBUTETYPENAME = copyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTETYPENAME.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTENAME == null){
	finder_tUniqRow_6.ATTRIBUTENAME = null;
}else{
	finder_tUniqRow_6.ATTRIBUTENAME = copyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTENAME.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_product.TEXTVALUE == null){
	finder_tUniqRow_6.TEXTVALUE = null;
}else{
	finder_tUniqRow_6.TEXTVALUE = copyOfcopyOfcopyOfcopyOfcopyOfsortie_product.TEXTVALUE.toLowerCase();
}	
finder_tUniqRow_6.hashCodeDirty = true;
if (!keystUniqRow_6.contains(finder_tUniqRow_6)) {
		KeyStruct_tUniqRow_6 new_tUniqRow_6 = new KeyStruct_tUniqRow_6();

		
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_product.PRODUCTNUMBER == null){
	new_tUniqRow_6.PRODUCTNUMBER = null;
}else{
	new_tUniqRow_6.PRODUCTNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfsortie_product.PRODUCTNUMBER.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTETYPENAME == null){
	new_tUniqRow_6.ATTRIBUTETYPENAME = null;
}else{
	new_tUniqRow_6.ATTRIBUTETYPENAME = copyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTETYPENAME.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTENAME == null){
	new_tUniqRow_6.ATTRIBUTENAME = null;
}else{
	new_tUniqRow_6.ATTRIBUTENAME = copyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTENAME.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_product.TEXTVALUE == null){
	new_tUniqRow_6.TEXTVALUE = null;
}else{
	new_tUniqRow_6.TEXTVALUE = copyOfcopyOfcopyOfcopyOfcopyOfsortie_product.TEXTVALUE.toLowerCase();
}
		
		keystUniqRow_6.add(new_tUniqRow_6);if(row16 == null){ 
	
	row16 = new row16Struct();
}row16.PRODUCTNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfsortie_product.PRODUCTNUMBER;			row16.ATTRIBUTETYPENAME = copyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTETYPENAME;			row16.ATTRIBUTENAME = copyOfcopyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTENAME;			row16.TEXTVALUE = copyOfcopyOfcopyOfcopyOfcopyOfsortie_product.TEXTVALUE;					
		nb_uniques_tUniqRow_6++;
	} else {
	  nb_duplicates_tUniqRow_6++;
	}

 


	tos_count_tUniqRow_6++;

/**
 * [tUniqRow_6 main ] stop
 */
	
	/**
	 * [tUniqRow_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_6";

	

 



/**
 * [tUniqRow_6 process_data_begin ] stop
 */
// Start of branch "row16"
if(row16 != null) { 



	
	/**
	 * [tHashOutput_4 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row16");
					}
					



    
		row16Struct oneRow_tHashOutput_4 = new row16Struct();
				
					oneRow_tHashOutput_4.PRODUCTNUMBER = row16.PRODUCTNUMBER;
					oneRow_tHashOutput_4.ATTRIBUTETYPENAME = row16.ATTRIBUTETYPENAME;
					oneRow_tHashOutput_4.ATTRIBUTENAME = row16.ATTRIBUTENAME;
					oneRow_tHashOutput_4.TEXTVALUE = row16.TEXTVALUE;
		
        tHashFile_tHashOutput_4.put(oneRow_tHashOutput_4);
        nb_line_tHashOutput_4 ++;
 


	tos_count_tHashOutput_4++;

/**
 * [tHashOutput_4 main ] stop
 */
	
	/**
	 * [tHashOutput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";

	

 



/**
 * [tHashOutput_4 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";

	

 



/**
 * [tHashOutput_4 process_data_end ] stop
 */

} // End of branch "row16"




	
	/**
	 * [tUniqRow_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_6";

	

 



/**
 * [tUniqRow_6 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfcopyOfcopyOfcopyOfsortie_product"




	
	/**
	 * [tMap_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfcopyOfcopyOfsortie_full"




// Start of branch "copyOfcopyOfcopyOfcopyOfsortie_product"
if(copyOfcopyOfcopyOfcopyOfsortie_product != null) { 



	
	/**
	 * [tUniqRow_5 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfcopyOfcopyOfcopyOfsortie_product");
					}
					
row14 = null;			
if(copyOfcopyOfcopyOfcopyOfsortie_product.PRODUCTNUMBER == null){
	finder_tUniqRow_5.PRODUCTNUMBER = null;
}else{
	finder_tUniqRow_5.PRODUCTNUMBER = copyOfcopyOfcopyOfcopyOfsortie_product.PRODUCTNUMBER.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTETYPENAME == null){
	finder_tUniqRow_5.ATTRIBUTETYPENAME = null;
}else{
	finder_tUniqRow_5.ATTRIBUTETYPENAME = copyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTETYPENAME.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTENAME == null){
	finder_tUniqRow_5.ATTRIBUTENAME = null;
}else{
	finder_tUniqRow_5.ATTRIBUTENAME = copyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTENAME.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfsortie_product.TEXTVALUE == null){
	finder_tUniqRow_5.TEXTVALUE = null;
}else{
	finder_tUniqRow_5.TEXTVALUE = copyOfcopyOfcopyOfcopyOfsortie_product.TEXTVALUE.toLowerCase();
}	
finder_tUniqRow_5.hashCodeDirty = true;
if (!keystUniqRow_5.contains(finder_tUniqRow_5)) {
		KeyStruct_tUniqRow_5 new_tUniqRow_5 = new KeyStruct_tUniqRow_5();

		
if(copyOfcopyOfcopyOfcopyOfsortie_product.PRODUCTNUMBER == null){
	new_tUniqRow_5.PRODUCTNUMBER = null;
}else{
	new_tUniqRow_5.PRODUCTNUMBER = copyOfcopyOfcopyOfcopyOfsortie_product.PRODUCTNUMBER.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTETYPENAME == null){
	new_tUniqRow_5.ATTRIBUTETYPENAME = null;
}else{
	new_tUniqRow_5.ATTRIBUTETYPENAME = copyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTETYPENAME.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTENAME == null){
	new_tUniqRow_5.ATTRIBUTENAME = null;
}else{
	new_tUniqRow_5.ATTRIBUTENAME = copyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTENAME.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfsortie_product.TEXTVALUE == null){
	new_tUniqRow_5.TEXTVALUE = null;
}else{
	new_tUniqRow_5.TEXTVALUE = copyOfcopyOfcopyOfcopyOfsortie_product.TEXTVALUE.toLowerCase();
}
		
		keystUniqRow_5.add(new_tUniqRow_5);if(row14 == null){ 
	
	row14 = new row14Struct();
}row14.PRODUCTNUMBER = copyOfcopyOfcopyOfcopyOfsortie_product.PRODUCTNUMBER;			row14.ATTRIBUTETYPENAME = copyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTETYPENAME;			row14.ATTRIBUTENAME = copyOfcopyOfcopyOfcopyOfsortie_product.ATTRIBUTENAME;			row14.TEXTVALUE = copyOfcopyOfcopyOfcopyOfsortie_product.TEXTVALUE;					
		nb_uniques_tUniqRow_5++;
	} else {
	  nb_duplicates_tUniqRow_5++;
	}

 


	tos_count_tUniqRow_5++;

/**
 * [tUniqRow_5 main ] stop
 */
	
	/**
	 * [tUniqRow_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_5";

	

 



/**
 * [tUniqRow_5 process_data_begin ] stop
 */
// Start of branch "row14"
if(row14 != null) { 



	
	/**
	 * [tHashOutput_3 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row14");
					}
					



    
		row14Struct oneRow_tHashOutput_3 = new row14Struct();
				
					oneRow_tHashOutput_3.PRODUCTNUMBER = row14.PRODUCTNUMBER;
					oneRow_tHashOutput_3.ATTRIBUTETYPENAME = row14.ATTRIBUTETYPENAME;
					oneRow_tHashOutput_3.ATTRIBUTENAME = row14.ATTRIBUTENAME;
					oneRow_tHashOutput_3.TEXTVALUE = row14.TEXTVALUE;
		
        tHashFile_tHashOutput_3.put(oneRow_tHashOutput_3);
        nb_line_tHashOutput_3 ++;
 


	tos_count_tHashOutput_3++;

/**
 * [tHashOutput_3 main ] stop
 */
	
	/**
	 * [tHashOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";

	

 



/**
 * [tHashOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";

	

 



/**
 * [tHashOutput_3 process_data_end ] stop
 */

} // End of branch "row14"




	
	/**
	 * [tUniqRow_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_5";

	

 



/**
 * [tUniqRow_5 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfcopyOfcopyOfsortie_product"




	
	/**
	 * [tMap_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfcopyOfsortie_full"




// Start of branch "copyOfcopyOfcopyOfsortie_product"
if(copyOfcopyOfcopyOfsortie_product != null) { 



	
	/**
	 * [tUniqRow_4 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfcopyOfcopyOfsortie_product");
					}
					
row10 = null;			
if(copyOfcopyOfcopyOfsortie_product.PRODUCTNUMBER == null){
	finder_tUniqRow_4.PRODUCTNUMBER = null;
}else{
	finder_tUniqRow_4.PRODUCTNUMBER = copyOfcopyOfcopyOfsortie_product.PRODUCTNUMBER.toLowerCase();
}
if(copyOfcopyOfcopyOfsortie_product.ATTRIBUTETYPENAME == null){
	finder_tUniqRow_4.ATTRIBUTETYPENAME = null;
}else{
	finder_tUniqRow_4.ATTRIBUTETYPENAME = copyOfcopyOfcopyOfsortie_product.ATTRIBUTETYPENAME.toLowerCase();
}
if(copyOfcopyOfcopyOfsortie_product.ATTRIBUTENAME == null){
	finder_tUniqRow_4.ATTRIBUTENAME = null;
}else{
	finder_tUniqRow_4.ATTRIBUTENAME = copyOfcopyOfcopyOfsortie_product.ATTRIBUTENAME.toLowerCase();
}
if(copyOfcopyOfcopyOfsortie_product.TEXTVALUE == null){
	finder_tUniqRow_4.TEXTVALUE = null;
}else{
	finder_tUniqRow_4.TEXTVALUE = copyOfcopyOfcopyOfsortie_product.TEXTVALUE.toLowerCase();
}	
finder_tUniqRow_4.hashCodeDirty = true;
if (!keystUniqRow_4.contains(finder_tUniqRow_4)) {
		KeyStruct_tUniqRow_4 new_tUniqRow_4 = new KeyStruct_tUniqRow_4();

		
if(copyOfcopyOfcopyOfsortie_product.PRODUCTNUMBER == null){
	new_tUniqRow_4.PRODUCTNUMBER = null;
}else{
	new_tUniqRow_4.PRODUCTNUMBER = copyOfcopyOfcopyOfsortie_product.PRODUCTNUMBER.toLowerCase();
}
if(copyOfcopyOfcopyOfsortie_product.ATTRIBUTETYPENAME == null){
	new_tUniqRow_4.ATTRIBUTETYPENAME = null;
}else{
	new_tUniqRow_4.ATTRIBUTETYPENAME = copyOfcopyOfcopyOfsortie_product.ATTRIBUTETYPENAME.toLowerCase();
}
if(copyOfcopyOfcopyOfsortie_product.ATTRIBUTENAME == null){
	new_tUniqRow_4.ATTRIBUTENAME = null;
}else{
	new_tUniqRow_4.ATTRIBUTENAME = copyOfcopyOfcopyOfsortie_product.ATTRIBUTENAME.toLowerCase();
}
if(copyOfcopyOfcopyOfsortie_product.TEXTVALUE == null){
	new_tUniqRow_4.TEXTVALUE = null;
}else{
	new_tUniqRow_4.TEXTVALUE = copyOfcopyOfcopyOfsortie_product.TEXTVALUE.toLowerCase();
}
		
		keystUniqRow_4.add(new_tUniqRow_4);if(row10 == null){ 
	
	row10 = new row10Struct();
}row10.PRODUCTNUMBER = copyOfcopyOfcopyOfsortie_product.PRODUCTNUMBER;			row10.ATTRIBUTETYPENAME = copyOfcopyOfcopyOfsortie_product.ATTRIBUTETYPENAME;			row10.ATTRIBUTENAME = copyOfcopyOfcopyOfsortie_product.ATTRIBUTENAME;			row10.TEXTVALUE = copyOfcopyOfcopyOfsortie_product.TEXTVALUE;					
		nb_uniques_tUniqRow_4++;
	} else {
	  nb_duplicates_tUniqRow_4++;
	}

 


	tos_count_tUniqRow_4++;

/**
 * [tUniqRow_4 main ] stop
 */
	
	/**
	 * [tUniqRow_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_4";

	

 



/**
 * [tUniqRow_4 process_data_begin ] stop
 */
// Start of branch "row10"
if(row10 != null) { 



	
	/**
	 * [tHashOutput_2 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row10");
					}
					



    
		row10Struct oneRow_tHashOutput_2 = new row10Struct();
				
					oneRow_tHashOutput_2.PRODUCTNUMBER = row10.PRODUCTNUMBER;
					oneRow_tHashOutput_2.ATTRIBUTETYPENAME = row10.ATTRIBUTETYPENAME;
					oneRow_tHashOutput_2.ATTRIBUTENAME = row10.ATTRIBUTENAME;
					oneRow_tHashOutput_2.TEXTVALUE = row10.TEXTVALUE;
		
        tHashFile_tHashOutput_2.put(oneRow_tHashOutput_2);
        nb_line_tHashOutput_2 ++;
 


	tos_count_tHashOutput_2++;

/**
 * [tHashOutput_2 main ] stop
 */
	
	/**
	 * [tHashOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";

	

 



/**
 * [tHashOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";

	

 



/**
 * [tHashOutput_2 process_data_end ] stop
 */

} // End of branch "row10"




	
	/**
	 * [tUniqRow_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_4";

	

 



/**
 * [tUniqRow_4 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfcopyOfsortie_product"




	
	/**
	 * [tMap_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfsortie_full"




// Start of branch "copyOfcopyOfsortie_product"
if(copyOfcopyOfsortie_product != null) { 



	
	/**
	 * [tUniqRow_3 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfcopyOfsortie_product");
					}
					
Main1 = null;			
if(copyOfcopyOfsortie_product.PRODUCTNUMBER == null){
	finder_tUniqRow_3.PRODUCTNUMBER = null;
}else{
	finder_tUniqRow_3.PRODUCTNUMBER = copyOfcopyOfsortie_product.PRODUCTNUMBER.toLowerCase();
}
if(copyOfcopyOfsortie_product.ATTRIBUTETYPENAME == null){
	finder_tUniqRow_3.ATTRIBUTETYPENAME = null;
}else{
	finder_tUniqRow_3.ATTRIBUTETYPENAME = copyOfcopyOfsortie_product.ATTRIBUTETYPENAME.toLowerCase();
}
if(copyOfcopyOfsortie_product.ATTRIBUTENAME == null){
	finder_tUniqRow_3.ATTRIBUTENAME = null;
}else{
	finder_tUniqRow_3.ATTRIBUTENAME = copyOfcopyOfsortie_product.ATTRIBUTENAME.toLowerCase();
}
if(copyOfcopyOfsortie_product.TEXTVALUE == null){
	finder_tUniqRow_3.TEXTVALUE = null;
}else{
	finder_tUniqRow_3.TEXTVALUE = copyOfcopyOfsortie_product.TEXTVALUE.toLowerCase();
}	
finder_tUniqRow_3.hashCodeDirty = true;
if (!keystUniqRow_3.contains(finder_tUniqRow_3)) {
		KeyStruct_tUniqRow_3 new_tUniqRow_3 = new KeyStruct_tUniqRow_3();

		
if(copyOfcopyOfsortie_product.PRODUCTNUMBER == null){
	new_tUniqRow_3.PRODUCTNUMBER = null;
}else{
	new_tUniqRow_3.PRODUCTNUMBER = copyOfcopyOfsortie_product.PRODUCTNUMBER.toLowerCase();
}
if(copyOfcopyOfsortie_product.ATTRIBUTETYPENAME == null){
	new_tUniqRow_3.ATTRIBUTETYPENAME = null;
}else{
	new_tUniqRow_3.ATTRIBUTETYPENAME = copyOfcopyOfsortie_product.ATTRIBUTETYPENAME.toLowerCase();
}
if(copyOfcopyOfsortie_product.ATTRIBUTENAME == null){
	new_tUniqRow_3.ATTRIBUTENAME = null;
}else{
	new_tUniqRow_3.ATTRIBUTENAME = copyOfcopyOfsortie_product.ATTRIBUTENAME.toLowerCase();
}
if(copyOfcopyOfsortie_product.TEXTVALUE == null){
	new_tUniqRow_3.TEXTVALUE = null;
}else{
	new_tUniqRow_3.TEXTVALUE = copyOfcopyOfsortie_product.TEXTVALUE.toLowerCase();
}
		
		keystUniqRow_3.add(new_tUniqRow_3);if(Main1 == null){ 
	
	Main1 = new Main1Struct();
}Main1.PRODUCTNUMBER = copyOfcopyOfsortie_product.PRODUCTNUMBER;			Main1.ATTRIBUTETYPENAME = copyOfcopyOfsortie_product.ATTRIBUTETYPENAME;			Main1.ATTRIBUTENAME = copyOfcopyOfsortie_product.ATTRIBUTENAME;			Main1.TEXTVALUE = copyOfcopyOfsortie_product.TEXTVALUE;					
		nb_uniques_tUniqRow_3++;
	} else {
	  nb_duplicates_tUniqRow_3++;
	}

 


	tos_count_tUniqRow_3++;

/**
 * [tUniqRow_3 main ] stop
 */
	
	/**
	 * [tUniqRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_3";

	

 



/**
 * [tUniqRow_3 process_data_begin ] stop
 */
// Start of branch "Main1"
if(Main1 != null) { 



	
	/**
	 * [tHashOutput_1 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"Main1");
					}
					



    
		Main1Struct oneRow_tHashOutput_1 = new Main1Struct();
				
					oneRow_tHashOutput_1.PRODUCTNUMBER = Main1.PRODUCTNUMBER;
					oneRow_tHashOutput_1.ATTRIBUTETYPENAME = Main1.ATTRIBUTETYPENAME;
					oneRow_tHashOutput_1.ATTRIBUTENAME = Main1.ATTRIBUTENAME;
					oneRow_tHashOutput_1.TEXTVALUE = Main1.TEXTVALUE;
		
        tHashFile_tHashOutput_1.put(oneRow_tHashOutput_1);
        nb_line_tHashOutput_1 ++;
 


	tos_count_tHashOutput_1++;

/**
 * [tHashOutput_1 main ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";

	

 



/**
 * [tHashOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";

	

 



/**
 * [tHashOutput_1 process_data_end ] stop
 */

} // End of branch "Main1"




	
	/**
	 * [tUniqRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_3";

	

 



/**
 * [tUniqRow_3 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfsortie_product"




	
	/**
	 * [tMap_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_end ] stop
 */

} // End of branch "copyOfsortie_full"




// Start of branch "copyOfsortie_product"
if(copyOfsortie_product != null) { 



	
	/**
	 * [tUniqRow_2 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfsortie_product");
					}
					
row8 = null;			
if(copyOfsortie_product.PRODUCTLIFECYCLESEASONCODE == null){
	finder_tUniqRow_2.PRODUCTLIFECYCLESEASONCODE = null;
}else{
	finder_tUniqRow_2.PRODUCTLIFECYCLESEASONCODE = copyOfsortie_product.PRODUCTLIFECYCLESEASONCODE.toLowerCase();
}
if(copyOfsortie_product.BOMUNITSYMBOL == null){
	finder_tUniqRow_2.BOMUNITSYMBOL = null;
}else{
	finder_tUniqRow_2.BOMUNITSYMBOL = copyOfsortie_product.BOMUNITSYMBOL.toLowerCase();
}
if(copyOfsortie_product.INVENTORYRESERVATIONHIERARCHYNAME == null){
	finder_tUniqRow_2.INVENTORYRESERVATIONHIERARCHYNAME = null;
}else{
	finder_tUniqRow_2.INVENTORYRESERVATIONHIERARCHYNAME = copyOfsortie_product.INVENTORYRESERVATIONHIERARCHYNAME.toLowerCase();
}
if(copyOfsortie_product.INVENTORYUNITSYMBOL == null){
	finder_tUniqRow_2.INVENTORYUNITSYMBOL = null;
}else{
	finder_tUniqRow_2.INVENTORYUNITSYMBOL = copyOfsortie_product.INVENTORYUNITSYMBOL.toLowerCase();
}
if(copyOfsortie_product.ITEMMODELGROUPID == null){
	finder_tUniqRow_2.ITEMMODELGROUPID = null;
}else{
	finder_tUniqRow_2.ITEMMODELGROUPID = copyOfsortie_product.ITEMMODELGROUPID.toLowerCase();
}
if(copyOfsortie_product.ITEMNUMBER == null){
	finder_tUniqRow_2.ITEMNUMBER = null;
}else{
	finder_tUniqRow_2.ITEMNUMBER = copyOfsortie_product.ITEMNUMBER.toLowerCase();
}
if(copyOfsortie_product.KRFBRANDID == null){
	finder_tUniqRow_2.KRFBRANDID = null;
}else{
	finder_tUniqRow_2.KRFBRANDID = copyOfsortie_product.KRFBRANDID.toLowerCase();
}
if(copyOfsortie_product.KRFCOLORDIMLAYOUT == null){
	finder_tUniqRow_2.KRFCOLORDIMLAYOUT = null;
}else{
	finder_tUniqRow_2.KRFCOLORDIMLAYOUT = copyOfsortie_product.KRFCOLORDIMLAYOUT.toLowerCase();
}
if(copyOfsortie_product.KRFSIZEDIMLAYOUT == null){
	finder_tUniqRow_2.KRFSIZEDIMLAYOUT = null;
}else{
	finder_tUniqRow_2.KRFSIZEDIMLAYOUT = copyOfsortie_product.KRFSIZEDIMLAYOUT.toLowerCase();
}
if(copyOfsortie_product.KRFSTYLEDIMLAYOUT == null){
	finder_tUniqRow_2.KRFSTYLEDIMLAYOUT = null;
}else{
	finder_tUniqRow_2.KRFSTYLEDIMLAYOUT = copyOfsortie_product.KRFSTYLEDIMLAYOUT.toLowerCase();
}
if(copyOfsortie_product.KRFAUTOOPENMATRIX == null){
	finder_tUniqRow_2.KRFAUTOOPENMATRIX = null;
}else{
	finder_tUniqRow_2.KRFAUTOOPENMATRIX = copyOfsortie_product.KRFAUTOOPENMATRIX.toLowerCase();
}
if(copyOfsortie_product.ORIGINCOUNTRYREGIONID == null){
	finder_tUniqRow_2.ORIGINCOUNTRYREGIONID = null;
}else{
	finder_tUniqRow_2.ORIGINCOUNTRYREGIONID = copyOfsortie_product.ORIGINCOUNTRYREGIONID.toLowerCase();
}
if(copyOfsortie_product.PRODUCTCOVERAGEGROUPID == null){
	finder_tUniqRow_2.PRODUCTCOVERAGEGROUPID = null;
}else{
	finder_tUniqRow_2.PRODUCTCOVERAGEGROUPID = copyOfsortie_product.PRODUCTCOVERAGEGROUPID.toLowerCase();
}
if(copyOfsortie_product.PRODUCTDIMENSIONGROUPNAME == null){
	finder_tUniqRow_2.PRODUCTDIMENSIONGROUPNAME = null;
}else{
	finder_tUniqRow_2.PRODUCTDIMENSIONGROUPNAME = copyOfsortie_product.PRODUCTDIMENSIONGROUPNAME.toLowerCase();
}
if(copyOfsortie_product.PRODUCTGROUPID == null){
	finder_tUniqRow_2.PRODUCTGROUPID = null;
}else{
	finder_tUniqRow_2.PRODUCTGROUPID = copyOfsortie_product.PRODUCTGROUPID.toLowerCase();
}
if(copyOfsortie_product.PRODUCTIONTYPE == null){
	finder_tUniqRow_2.PRODUCTIONTYPE = null;
}else{
	finder_tUniqRow_2.PRODUCTIONTYPE = copyOfsortie_product.PRODUCTIONTYPE.toLowerCase();
}
if(copyOfsortie_product.PRODUCTNUMBER == null){
	finder_tUniqRow_2.PRODUCTNUMBER = null;
}else{
	finder_tUniqRow_2.PRODUCTNUMBER = copyOfsortie_product.PRODUCTNUMBER.toLowerCase();
}
if(copyOfsortie_product.PRODUCTSEARCHNAME == null){
	finder_tUniqRow_2.PRODUCTSEARCHNAME = null;
}else{
	finder_tUniqRow_2.PRODUCTSEARCHNAME = copyOfsortie_product.PRODUCTSEARCHNAME.toLowerCase();
}
if(copyOfsortie_product.PRODUCTSUBTYPE == null){
	finder_tUniqRow_2.PRODUCTSUBTYPE = null;
}else{
	finder_tUniqRow_2.PRODUCTSUBTYPE = copyOfsortie_product.PRODUCTSUBTYPE.toLowerCase();
}
if(copyOfsortie_product.PRODUCTTYPE == null){
	finder_tUniqRow_2.PRODUCTTYPE = null;
}else{
	finder_tUniqRow_2.PRODUCTTYPE = copyOfsortie_product.PRODUCTTYPE.toLowerCase();
}
if(copyOfsortie_product.PURCHASEUNITSYMBOL == null){
	finder_tUniqRow_2.PURCHASEUNITSYMBOL = null;
}else{
	finder_tUniqRow_2.PURCHASEUNITSYMBOL = copyOfsortie_product.PURCHASEUNITSYMBOL.toLowerCase();
}
if(copyOfsortie_product.SALESUNITSYMBOL == null){
	finder_tUniqRow_2.SALESUNITSYMBOL = null;
}else{
	finder_tUniqRow_2.SALESUNITSYMBOL = copyOfsortie_product.SALESUNITSYMBOL.toLowerCase();
}
if(copyOfsortie_product.SEARCHNAME == null){
	finder_tUniqRow_2.SEARCHNAME = null;
}else{
	finder_tUniqRow_2.SEARCHNAME = copyOfsortie_product.SEARCHNAME.toLowerCase();
}
if(copyOfsortie_product.STORAGEDIMENSIONGROUPNAME == null){
	finder_tUniqRow_2.STORAGEDIMENSIONGROUPNAME = null;
}else{
	finder_tUniqRow_2.STORAGEDIMENSIONGROUPNAME = copyOfsortie_product.STORAGEDIMENSIONGROUPNAME.toLowerCase();
}
if(copyOfsortie_product.TRACKINGDIMENSIONGROUPNAME == null){
	finder_tUniqRow_2.TRACKINGDIMENSIONGROUPNAME = null;
}else{
	finder_tUniqRow_2.TRACKINGDIMENSIONGROUPNAME = copyOfsortie_product.TRACKINGDIMENSIONGROUPNAME.toLowerCase();
}
if(copyOfsortie_product.PRODUCTLIFECYCLESTATEID == null){
	finder_tUniqRow_2.PRODUCTLIFECYCLESTATEID = null;
}else{
	finder_tUniqRow_2.PRODUCTLIFECYCLESTATEID = copyOfsortie_product.PRODUCTLIFECYCLESTATEID.toLowerCase();
}
if(copyOfsortie_product.PURCHASESALESTAXITEMGROUPCODE == null){
	finder_tUniqRow_2.PURCHASESALESTAXITEMGROUPCODE = null;
}else{
	finder_tUniqRow_2.PURCHASESALESTAXITEMGROUPCODE = copyOfsortie_product.PURCHASESALESTAXITEMGROUPCODE.toLowerCase();
}
if(copyOfsortie_product.SALESSALESTAXITEMGROUPCODE == null){
	finder_tUniqRow_2.SALESSALESTAXITEMGROUPCODE = null;
}else{
	finder_tUniqRow_2.SALESSALESTAXITEMGROUPCODE = copyOfsortie_product.SALESSALESTAXITEMGROUPCODE.toLowerCase();
}
if(copyOfsortie_product.UNITCONVERSIONSEQUENCEGROUPID == null){
	finder_tUniqRow_2.UNITCONVERSIONSEQUENCEGROUPID = null;
}else{
	finder_tUniqRow_2.UNITCONVERSIONSEQUENCEGROUPID = copyOfsortie_product.UNITCONVERSIONSEQUENCEGROUPID.toLowerCase();
}	
finder_tUniqRow_2.hashCodeDirty = true;
if (!keystUniqRow_2.contains(finder_tUniqRow_2)) {
		KeyStruct_tUniqRow_2 new_tUniqRow_2 = new KeyStruct_tUniqRow_2();

		
if(copyOfsortie_product.PRODUCTLIFECYCLESEASONCODE == null){
	new_tUniqRow_2.PRODUCTLIFECYCLESEASONCODE = null;
}else{
	new_tUniqRow_2.PRODUCTLIFECYCLESEASONCODE = copyOfsortie_product.PRODUCTLIFECYCLESEASONCODE.toLowerCase();
}
if(copyOfsortie_product.BOMUNITSYMBOL == null){
	new_tUniqRow_2.BOMUNITSYMBOL = null;
}else{
	new_tUniqRow_2.BOMUNITSYMBOL = copyOfsortie_product.BOMUNITSYMBOL.toLowerCase();
}
if(copyOfsortie_product.INVENTORYRESERVATIONHIERARCHYNAME == null){
	new_tUniqRow_2.INVENTORYRESERVATIONHIERARCHYNAME = null;
}else{
	new_tUniqRow_2.INVENTORYRESERVATIONHIERARCHYNAME = copyOfsortie_product.INVENTORYRESERVATIONHIERARCHYNAME.toLowerCase();
}
if(copyOfsortie_product.INVENTORYUNITSYMBOL == null){
	new_tUniqRow_2.INVENTORYUNITSYMBOL = null;
}else{
	new_tUniqRow_2.INVENTORYUNITSYMBOL = copyOfsortie_product.INVENTORYUNITSYMBOL.toLowerCase();
}
if(copyOfsortie_product.ITEMMODELGROUPID == null){
	new_tUniqRow_2.ITEMMODELGROUPID = null;
}else{
	new_tUniqRow_2.ITEMMODELGROUPID = copyOfsortie_product.ITEMMODELGROUPID.toLowerCase();
}
if(copyOfsortie_product.ITEMNUMBER == null){
	new_tUniqRow_2.ITEMNUMBER = null;
}else{
	new_tUniqRow_2.ITEMNUMBER = copyOfsortie_product.ITEMNUMBER.toLowerCase();
}
if(copyOfsortie_product.KRFBRANDID == null){
	new_tUniqRow_2.KRFBRANDID = null;
}else{
	new_tUniqRow_2.KRFBRANDID = copyOfsortie_product.KRFBRANDID.toLowerCase();
}
if(copyOfsortie_product.KRFCOLORDIMLAYOUT == null){
	new_tUniqRow_2.KRFCOLORDIMLAYOUT = null;
}else{
	new_tUniqRow_2.KRFCOLORDIMLAYOUT = copyOfsortie_product.KRFCOLORDIMLAYOUT.toLowerCase();
}
if(copyOfsortie_product.KRFSIZEDIMLAYOUT == null){
	new_tUniqRow_2.KRFSIZEDIMLAYOUT = null;
}else{
	new_tUniqRow_2.KRFSIZEDIMLAYOUT = copyOfsortie_product.KRFSIZEDIMLAYOUT.toLowerCase();
}
if(copyOfsortie_product.KRFSTYLEDIMLAYOUT == null){
	new_tUniqRow_2.KRFSTYLEDIMLAYOUT = null;
}else{
	new_tUniqRow_2.KRFSTYLEDIMLAYOUT = copyOfsortie_product.KRFSTYLEDIMLAYOUT.toLowerCase();
}
if(copyOfsortie_product.KRFAUTOOPENMATRIX == null){
	new_tUniqRow_2.KRFAUTOOPENMATRIX = null;
}else{
	new_tUniqRow_2.KRFAUTOOPENMATRIX = copyOfsortie_product.KRFAUTOOPENMATRIX.toLowerCase();
}
if(copyOfsortie_product.ORIGINCOUNTRYREGIONID == null){
	new_tUniqRow_2.ORIGINCOUNTRYREGIONID = null;
}else{
	new_tUniqRow_2.ORIGINCOUNTRYREGIONID = copyOfsortie_product.ORIGINCOUNTRYREGIONID.toLowerCase();
}
if(copyOfsortie_product.PRODUCTCOVERAGEGROUPID == null){
	new_tUniqRow_2.PRODUCTCOVERAGEGROUPID = null;
}else{
	new_tUniqRow_2.PRODUCTCOVERAGEGROUPID = copyOfsortie_product.PRODUCTCOVERAGEGROUPID.toLowerCase();
}
if(copyOfsortie_product.PRODUCTDIMENSIONGROUPNAME == null){
	new_tUniqRow_2.PRODUCTDIMENSIONGROUPNAME = null;
}else{
	new_tUniqRow_2.PRODUCTDIMENSIONGROUPNAME = copyOfsortie_product.PRODUCTDIMENSIONGROUPNAME.toLowerCase();
}
if(copyOfsortie_product.PRODUCTGROUPID == null){
	new_tUniqRow_2.PRODUCTGROUPID = null;
}else{
	new_tUniqRow_2.PRODUCTGROUPID = copyOfsortie_product.PRODUCTGROUPID.toLowerCase();
}
if(copyOfsortie_product.PRODUCTIONTYPE == null){
	new_tUniqRow_2.PRODUCTIONTYPE = null;
}else{
	new_tUniqRow_2.PRODUCTIONTYPE = copyOfsortie_product.PRODUCTIONTYPE.toLowerCase();
}
if(copyOfsortie_product.PRODUCTNUMBER == null){
	new_tUniqRow_2.PRODUCTNUMBER = null;
}else{
	new_tUniqRow_2.PRODUCTNUMBER = copyOfsortie_product.PRODUCTNUMBER.toLowerCase();
}
if(copyOfsortie_product.PRODUCTSEARCHNAME == null){
	new_tUniqRow_2.PRODUCTSEARCHNAME = null;
}else{
	new_tUniqRow_2.PRODUCTSEARCHNAME = copyOfsortie_product.PRODUCTSEARCHNAME.toLowerCase();
}
if(copyOfsortie_product.PRODUCTSUBTYPE == null){
	new_tUniqRow_2.PRODUCTSUBTYPE = null;
}else{
	new_tUniqRow_2.PRODUCTSUBTYPE = copyOfsortie_product.PRODUCTSUBTYPE.toLowerCase();
}
if(copyOfsortie_product.PRODUCTTYPE == null){
	new_tUniqRow_2.PRODUCTTYPE = null;
}else{
	new_tUniqRow_2.PRODUCTTYPE = copyOfsortie_product.PRODUCTTYPE.toLowerCase();
}
if(copyOfsortie_product.PURCHASEUNITSYMBOL == null){
	new_tUniqRow_2.PURCHASEUNITSYMBOL = null;
}else{
	new_tUniqRow_2.PURCHASEUNITSYMBOL = copyOfsortie_product.PURCHASEUNITSYMBOL.toLowerCase();
}
if(copyOfsortie_product.SALESUNITSYMBOL == null){
	new_tUniqRow_2.SALESUNITSYMBOL = null;
}else{
	new_tUniqRow_2.SALESUNITSYMBOL = copyOfsortie_product.SALESUNITSYMBOL.toLowerCase();
}
if(copyOfsortie_product.SEARCHNAME == null){
	new_tUniqRow_2.SEARCHNAME = null;
}else{
	new_tUniqRow_2.SEARCHNAME = copyOfsortie_product.SEARCHNAME.toLowerCase();
}
if(copyOfsortie_product.STORAGEDIMENSIONGROUPNAME == null){
	new_tUniqRow_2.STORAGEDIMENSIONGROUPNAME = null;
}else{
	new_tUniqRow_2.STORAGEDIMENSIONGROUPNAME = copyOfsortie_product.STORAGEDIMENSIONGROUPNAME.toLowerCase();
}
if(copyOfsortie_product.TRACKINGDIMENSIONGROUPNAME == null){
	new_tUniqRow_2.TRACKINGDIMENSIONGROUPNAME = null;
}else{
	new_tUniqRow_2.TRACKINGDIMENSIONGROUPNAME = copyOfsortie_product.TRACKINGDIMENSIONGROUPNAME.toLowerCase();
}
if(copyOfsortie_product.PRODUCTLIFECYCLESTATEID == null){
	new_tUniqRow_2.PRODUCTLIFECYCLESTATEID = null;
}else{
	new_tUniqRow_2.PRODUCTLIFECYCLESTATEID = copyOfsortie_product.PRODUCTLIFECYCLESTATEID.toLowerCase();
}
if(copyOfsortie_product.PURCHASESALESTAXITEMGROUPCODE == null){
	new_tUniqRow_2.PURCHASESALESTAXITEMGROUPCODE = null;
}else{
	new_tUniqRow_2.PURCHASESALESTAXITEMGROUPCODE = copyOfsortie_product.PURCHASESALESTAXITEMGROUPCODE.toLowerCase();
}
if(copyOfsortie_product.SALESSALESTAXITEMGROUPCODE == null){
	new_tUniqRow_2.SALESSALESTAXITEMGROUPCODE = null;
}else{
	new_tUniqRow_2.SALESSALESTAXITEMGROUPCODE = copyOfsortie_product.SALESSALESTAXITEMGROUPCODE.toLowerCase();
}
if(copyOfsortie_product.UNITCONVERSIONSEQUENCEGROUPID == null){
	new_tUniqRow_2.UNITCONVERSIONSEQUENCEGROUPID = null;
}else{
	new_tUniqRow_2.UNITCONVERSIONSEQUENCEGROUPID = copyOfsortie_product.UNITCONVERSIONSEQUENCEGROUPID.toLowerCase();
}
		
		keystUniqRow_2.add(new_tUniqRow_2);if(row8 == null){ 
	
	row8 = new row8Struct();
}row8.PRODUCTLIFECYCLESEASONCODE = copyOfsortie_product.PRODUCTLIFECYCLESEASONCODE;			row8.BOMUNITSYMBOL = copyOfsortie_product.BOMUNITSYMBOL;			row8.INVENTORYRESERVATIONHIERARCHYNAME = copyOfsortie_product.INVENTORYRESERVATIONHIERARCHYNAME;			row8.INVENTORYUNITSYMBOL = copyOfsortie_product.INVENTORYUNITSYMBOL;			row8.ITEMMODELGROUPID = copyOfsortie_product.ITEMMODELGROUPID;			row8.ITEMNUMBER = copyOfsortie_product.ITEMNUMBER;			row8.KRFBRANDID = copyOfsortie_product.KRFBRANDID;			row8.KRFCOLORDIMLAYOUT = copyOfsortie_product.KRFCOLORDIMLAYOUT;			row8.KRFSIZEDIMLAYOUT = copyOfsortie_product.KRFSIZEDIMLAYOUT;			row8.KRFSTYLEDIMLAYOUT = copyOfsortie_product.KRFSTYLEDIMLAYOUT;			row8.KRFAUTOOPENMATRIX = copyOfsortie_product.KRFAUTOOPENMATRIX;			row8.ORIGINCOUNTRYREGIONID = copyOfsortie_product.ORIGINCOUNTRYREGIONID;			row8.PRODUCTCOVERAGEGROUPID = copyOfsortie_product.PRODUCTCOVERAGEGROUPID;			row8.PRODUCTDIMENSIONGROUPNAME = copyOfsortie_product.PRODUCTDIMENSIONGROUPNAME;			row8.PRODUCTGROUPID = copyOfsortie_product.PRODUCTGROUPID;			row8.PRODUCTIONTYPE = copyOfsortie_product.PRODUCTIONTYPE;			row8.PRODUCTNUMBER = copyOfsortie_product.PRODUCTNUMBER;			row8.PRODUCTSEARCHNAME = copyOfsortie_product.PRODUCTSEARCHNAME;			row8.PRODUCTSUBTYPE = copyOfsortie_product.PRODUCTSUBTYPE;			row8.PRODUCTTYPE = copyOfsortie_product.PRODUCTTYPE;			row8.PURCHASEUNITSYMBOL = copyOfsortie_product.PURCHASEUNITSYMBOL;			row8.SALESUNITSYMBOL = copyOfsortie_product.SALESUNITSYMBOL;			row8.SEARCHNAME = copyOfsortie_product.SEARCHNAME;			row8.STORAGEDIMENSIONGROUPNAME = copyOfsortie_product.STORAGEDIMENSIONGROUPNAME;			row8.TRACKINGDIMENSIONGROUPNAME = copyOfsortie_product.TRACKINGDIMENSIONGROUPNAME;			row8.PRODUCTLIFECYCLESTATEID = copyOfsortie_product.PRODUCTLIFECYCLESTATEID;			row8.PURCHASESALESTAXITEMGROUPCODE = copyOfsortie_product.PURCHASESALESTAXITEMGROUPCODE;			row8.SALESSALESTAXITEMGROUPCODE = copyOfsortie_product.SALESSALESTAXITEMGROUPCODE;			row8.UNITCONVERSIONSEQUENCEGROUPID = copyOfsortie_product.UNITCONVERSIONSEQUENCEGROUPID;					
		nb_uniques_tUniqRow_2++;
	} else {
	  nb_duplicates_tUniqRow_2++;
	}

 


	tos_count_tUniqRow_2++;

/**
 * [tUniqRow_2 main ] stop
 */
	
	/**
	 * [tUniqRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

 



/**
 * [tUniqRow_2 process_data_begin ] stop
 */
// Start of branch "row8"
if(row8 != null) { 



	
	/**
	 * [tFileOutputExcel_2 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row8");
					}
					

				xlsxTool_tFileOutputExcel_2.addRow();
									   				
	    				if(row8.PRODUCTLIFECYCLESEASONCODE != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row8.PRODUCTLIFECYCLESEASONCODE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row8.BOMUNITSYMBOL != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row8.BOMUNITSYMBOL));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row8.INVENTORYRESERVATIONHIERARCHYNAME != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row8.INVENTORYRESERVATIONHIERARCHYNAME));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row8.INVENTORYUNITSYMBOL != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row8.INVENTORYUNITSYMBOL));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row8.ITEMMODELGROUPID != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row8.ITEMMODELGROUPID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row8.ITEMNUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row8.ITEMNUMBER));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row8.KRFBRANDID != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row8.KRFBRANDID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row8.KRFCOLORDIMLAYOUT != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row8.KRFCOLORDIMLAYOUT));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row8.KRFSIZEDIMLAYOUT != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row8.KRFSIZEDIMLAYOUT));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row8.KRFSTYLEDIMLAYOUT != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row8.KRFSTYLEDIMLAYOUT));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row8.KRFAUTOOPENMATRIX != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row8.KRFAUTOOPENMATRIX));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row8.ORIGINCOUNTRYREGIONID != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row8.ORIGINCOUNTRYREGIONID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row8.PRODUCTCOVERAGEGROUPID != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row8.PRODUCTCOVERAGEGROUPID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row8.PRODUCTDIMENSIONGROUPNAME != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row8.PRODUCTDIMENSIONGROUPNAME));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row8.PRODUCTGROUPID != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row8.PRODUCTGROUPID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row8.PRODUCTIONTYPE != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row8.PRODUCTIONTYPE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row8.PRODUCTNUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row8.PRODUCTNUMBER));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row8.PRODUCTSEARCHNAME != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row8.PRODUCTSEARCHNAME));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row8.PRODUCTSUBTYPE != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row8.PRODUCTSUBTYPE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row8.PRODUCTTYPE != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row8.PRODUCTTYPE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row8.PURCHASEUNITSYMBOL != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row8.PURCHASEUNITSYMBOL));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row8.SALESUNITSYMBOL != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row8.SALESUNITSYMBOL));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row8.SEARCHNAME != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row8.SEARCHNAME));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row8.STORAGEDIMENSIONGROUPNAME != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row8.STORAGEDIMENSIONGROUPNAME));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row8.TRACKINGDIMENSIONGROUPNAME != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row8.TRACKINGDIMENSIONGROUPNAME));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row8.PRODUCTLIFECYCLESTATEID != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row8.PRODUCTLIFECYCLESTATEID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row8.PURCHASESALESTAXITEMGROUPCODE != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row8.PURCHASESALESTAXITEMGROUPCODE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row8.SALESSALESTAXITEMGROUPCODE != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row8.SALESSALESTAXITEMGROUPCODE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row8.UNITCONVERSIONSEQUENCEGROUPID != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row8.UNITCONVERSIONSEQUENCEGROUPID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_2++;
				
 


	tos_count_tFileOutputExcel_2++;

/**
 * [tFileOutputExcel_2 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_2";

	

 



/**
 * [tFileOutputExcel_2 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_2";

	

 



/**
 * [tFileOutputExcel_2 process_data_end ] stop
 */

} // End of branch "row8"




	
	/**
	 * [tUniqRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

 



/**
 * [tUniqRow_2 process_data_end ] stop
 */

} // End of branch "copyOfsortie_product"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 process_data_end ] stop
 */

} // End of branch "sortie_full"




// Start of branch "sortie_product"
if(sortie_product != null) { 



	
	/**
	 * [tLogRow_3 main ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_product");
					}
					
///////////////////////		
						



				strBuffer_tLogRow_3 = new StringBuilder();




   				
	    		if(sortie_product.KRFBRANDID != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(sortie_product.KRFBRANDID)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(sortie_product.PRODUCTSEARCHNAME != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(sortie_product.PRODUCTSEARCHNAME)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(sortie_product.PRODUCTDESCRIPTION != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(sortie_product.PRODUCTDESCRIPTION)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(sortie_product.PRODUCTNAME != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(sortie_product.PRODUCTNAME)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(sortie_product.PRODUCTNUMBER != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(sortie_product.PRODUCTNUMBER)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(sortie_product.RETAILPRODUCTCATEGORYNAME != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(sortie_product.RETAILPRODUCTCATEGORYNAME)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(sortie_product.PRODUCTSUBTYPE != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(sortie_product.PRODUCTSUBTYPE)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(sortie_product.PRODUCTTYPE != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(sortie_product.PRODUCTTYPE)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(sortie_product.PRODUCTDIMENSIONGROUPNAME != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(sortie_product.PRODUCTDIMENSIONGROUPNAME)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(sortie_product.STORAGEDIMENSIONGROUPNAME != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(sortie_product.STORAGEDIMENSIONGROUPNAME)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(sortie_product.TRACKINGDIMENSIONGROUPNAME != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(sortie_product.TRACKINGDIMENSIONGROUPNAME)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_3 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_3 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_3);
                    }
                    consoleOut_tLogRow_3.println(strBuffer_tLogRow_3.toString());
                    consoleOut_tLogRow_3.flush();
                    nb_line_tLogRow_3++;
//////

//////                    
                    
///////////////////////    			

 
     row4 = sortie_product;


	tos_count_tLogRow_3++;

/**
 * [tLogRow_3 main ] stop
 */
	
	/**
	 * [tLogRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 process_data_begin ] stop
 */

	
	/**
	 * [tUniqRow_1 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row4");
					}
					
row5 = null;			
if(row4.KRFBRANDID == null){
	finder_tUniqRow_1.KRFBRANDID = null;
}else{
	finder_tUniqRow_1.KRFBRANDID = row4.KRFBRANDID.toLowerCase();
}
if(row4.PRODUCTSEARCHNAME == null){
	finder_tUniqRow_1.PRODUCTSEARCHNAME = null;
}else{
	finder_tUniqRow_1.PRODUCTSEARCHNAME = row4.PRODUCTSEARCHNAME.toLowerCase();
}
if(row4.PRODUCTDESCRIPTION == null){
	finder_tUniqRow_1.PRODUCTDESCRIPTION = null;
}else{
	finder_tUniqRow_1.PRODUCTDESCRIPTION = row4.PRODUCTDESCRIPTION.toLowerCase();
}
if(row4.PRODUCTNAME == null){
	finder_tUniqRow_1.PRODUCTNAME = null;
}else{
	finder_tUniqRow_1.PRODUCTNAME = row4.PRODUCTNAME.toLowerCase();
}
if(row4.PRODUCTNUMBER == null){
	finder_tUniqRow_1.PRODUCTNUMBER = null;
}else{
	finder_tUniqRow_1.PRODUCTNUMBER = row4.PRODUCTNUMBER.toLowerCase();
}
if(row4.RETAILPRODUCTCATEGORYNAME == null){
	finder_tUniqRow_1.RETAILPRODUCTCATEGORYNAME = null;
}else{
	finder_tUniqRow_1.RETAILPRODUCTCATEGORYNAME = row4.RETAILPRODUCTCATEGORYNAME.toLowerCase();
}
if(row4.PRODUCTSUBTYPE == null){
	finder_tUniqRow_1.PRODUCTSUBTYPE = null;
}else{
	finder_tUniqRow_1.PRODUCTSUBTYPE = row4.PRODUCTSUBTYPE.toLowerCase();
}
if(row4.PRODUCTTYPE == null){
	finder_tUniqRow_1.PRODUCTTYPE = null;
}else{
	finder_tUniqRow_1.PRODUCTTYPE = row4.PRODUCTTYPE.toLowerCase();
}
if(row4.PRODUCTDIMENSIONGROUPNAME == null){
	finder_tUniqRow_1.PRODUCTDIMENSIONGROUPNAME = null;
}else{
	finder_tUniqRow_1.PRODUCTDIMENSIONGROUPNAME = row4.PRODUCTDIMENSIONGROUPNAME.toLowerCase();
}
if(row4.STORAGEDIMENSIONGROUPNAME == null){
	finder_tUniqRow_1.STORAGEDIMENSIONGROUPNAME = null;
}else{
	finder_tUniqRow_1.STORAGEDIMENSIONGROUPNAME = row4.STORAGEDIMENSIONGROUPNAME.toLowerCase();
}
if(row4.TRACKINGDIMENSIONGROUPNAME == null){
	finder_tUniqRow_1.TRACKINGDIMENSIONGROUPNAME = null;
}else{
	finder_tUniqRow_1.TRACKINGDIMENSIONGROUPNAME = row4.TRACKINGDIMENSIONGROUPNAME.toLowerCase();
}	
finder_tUniqRow_1.hashCodeDirty = true;
if (!keystUniqRow_1.contains(finder_tUniqRow_1)) {
		KeyStruct_tUniqRow_1 new_tUniqRow_1 = new KeyStruct_tUniqRow_1();

		
if(row4.KRFBRANDID == null){
	new_tUniqRow_1.KRFBRANDID = null;
}else{
	new_tUniqRow_1.KRFBRANDID = row4.KRFBRANDID.toLowerCase();
}
if(row4.PRODUCTSEARCHNAME == null){
	new_tUniqRow_1.PRODUCTSEARCHNAME = null;
}else{
	new_tUniqRow_1.PRODUCTSEARCHNAME = row4.PRODUCTSEARCHNAME.toLowerCase();
}
if(row4.PRODUCTDESCRIPTION == null){
	new_tUniqRow_1.PRODUCTDESCRIPTION = null;
}else{
	new_tUniqRow_1.PRODUCTDESCRIPTION = row4.PRODUCTDESCRIPTION.toLowerCase();
}
if(row4.PRODUCTNAME == null){
	new_tUniqRow_1.PRODUCTNAME = null;
}else{
	new_tUniqRow_1.PRODUCTNAME = row4.PRODUCTNAME.toLowerCase();
}
if(row4.PRODUCTNUMBER == null){
	new_tUniqRow_1.PRODUCTNUMBER = null;
}else{
	new_tUniqRow_1.PRODUCTNUMBER = row4.PRODUCTNUMBER.toLowerCase();
}
if(row4.RETAILPRODUCTCATEGORYNAME == null){
	new_tUniqRow_1.RETAILPRODUCTCATEGORYNAME = null;
}else{
	new_tUniqRow_1.RETAILPRODUCTCATEGORYNAME = row4.RETAILPRODUCTCATEGORYNAME.toLowerCase();
}
if(row4.PRODUCTSUBTYPE == null){
	new_tUniqRow_1.PRODUCTSUBTYPE = null;
}else{
	new_tUniqRow_1.PRODUCTSUBTYPE = row4.PRODUCTSUBTYPE.toLowerCase();
}
if(row4.PRODUCTTYPE == null){
	new_tUniqRow_1.PRODUCTTYPE = null;
}else{
	new_tUniqRow_1.PRODUCTTYPE = row4.PRODUCTTYPE.toLowerCase();
}
if(row4.PRODUCTDIMENSIONGROUPNAME == null){
	new_tUniqRow_1.PRODUCTDIMENSIONGROUPNAME = null;
}else{
	new_tUniqRow_1.PRODUCTDIMENSIONGROUPNAME = row4.PRODUCTDIMENSIONGROUPNAME.toLowerCase();
}
if(row4.STORAGEDIMENSIONGROUPNAME == null){
	new_tUniqRow_1.STORAGEDIMENSIONGROUPNAME = null;
}else{
	new_tUniqRow_1.STORAGEDIMENSIONGROUPNAME = row4.STORAGEDIMENSIONGROUPNAME.toLowerCase();
}
if(row4.TRACKINGDIMENSIONGROUPNAME == null){
	new_tUniqRow_1.TRACKINGDIMENSIONGROUPNAME = null;
}else{
	new_tUniqRow_1.TRACKINGDIMENSIONGROUPNAME = row4.TRACKINGDIMENSIONGROUPNAME.toLowerCase();
}
		
		keystUniqRow_1.add(new_tUniqRow_1);if(row5 == null){ 
	
	row5 = new row5Struct();
}row5.KRFBRANDID = row4.KRFBRANDID;			row5.PRODUCTSEARCHNAME = row4.PRODUCTSEARCHNAME;			row5.PRODUCTDESCRIPTION = row4.PRODUCTDESCRIPTION;			row5.PRODUCTNAME = row4.PRODUCTNAME;			row5.PRODUCTNUMBER = row4.PRODUCTNUMBER;			row5.RETAILPRODUCTCATEGORYNAME = row4.RETAILPRODUCTCATEGORYNAME;			row5.PRODUCTSUBTYPE = row4.PRODUCTSUBTYPE;			row5.PRODUCTTYPE = row4.PRODUCTTYPE;			row5.PRODUCTDIMENSIONGROUPNAME = row4.PRODUCTDIMENSIONGROUPNAME;			row5.STORAGEDIMENSIONGROUPNAME = row4.STORAGEDIMENSIONGROUPNAME;			row5.TRACKINGDIMENSIONGROUPNAME = row4.TRACKINGDIMENSIONGROUPNAME;					
		nb_uniques_tUniqRow_1++;
	} else {
	  nb_duplicates_tUniqRow_1++;
	}

 


	tos_count_tUniqRow_1++;

/**
 * [tUniqRow_1 main ] stop
 */
	
	/**
	 * [tUniqRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 process_data_begin ] stop
 */
// Start of branch "row5"
if(row5 != null) { 



	
	/**
	 * [tFileOutputExcel_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row5");
					}
					

				xlsxTool_tFileOutputExcel_1.addRow();
									   				
	    				if(row5.KRFBRANDID != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row5.KRFBRANDID));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row5.PRODUCTSEARCHNAME != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row5.PRODUCTSEARCHNAME));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row5.PRODUCTDESCRIPTION != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row5.PRODUCTDESCRIPTION));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row5.PRODUCTNAME != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row5.PRODUCTNAME));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row5.PRODUCTNUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row5.PRODUCTNUMBER));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row5.RETAILPRODUCTCATEGORYNAME != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row5.RETAILPRODUCTCATEGORYNAME));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row5.PRODUCTSUBTYPE != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row5.PRODUCTSUBTYPE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row5.PRODUCTTYPE != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row5.PRODUCTTYPE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row5.PRODUCTDIMENSIONGROUPNAME != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row5.PRODUCTDIMENSIONGROUPNAME));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row5.STORAGEDIMENSIONGROUPNAME != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row5.STORAGEDIMENSIONGROUPNAME));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row5.TRACKINGDIMENSIONGROUPNAME != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row5.TRACKINGDIMENSIONGROUPNAME));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_1++;
				
 


	tos_count_tFileOutputExcel_1++;

/**
 * [tFileOutputExcel_1 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

 



/**
 * [tFileOutputExcel_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

 



/**
 * [tFileOutputExcel_1 process_data_end ] stop
 */

} // End of branch "row5"




	
	/**
	 * [tUniqRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 process_data_end ] stop
 */

} // End of branch "sortie_product"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */

} // End of branch "sortie_Excel"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */

} // End of branch "row3"




	
	/**
	 * [tFileInputExcel_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_2";

	

 



/**
 * [tFileInputExcel_2 process_data_end ] stop
 */
	
	/**
	 * [tFileInputExcel_2 end ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_2";

	

			}
			
			
			
			globalMap.put("tFileInputExcel_2_NB_LINE",nb_line_tFileInputExcel_2);
			
				}
			
		} finally { 
				
  				if(!(source_tFileInputExcel_2 instanceof java.io.InputStream)){
  					workbook_tFileInputExcel_2.getPackage().revert();
  				}
				
		}	
		
 

ok_Hash.put("tFileInputExcel_2", true);
end_Hash.put("tFileInputExcel_2", System.currentTimeMillis());




/**
 * [tFileInputExcel_2 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_Excel");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tLogRow_2 end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	


//////
//////
globalMap.put("tLogRow_2_NB_LINE",nb_line_tLogRow_2);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_full");
			  	}
			  	
 

ok_Hash.put("tLogRow_2", true);
end_Hash.put("tLogRow_2", System.currentTimeMillis());




/**
 * [tLogRow_2 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row7 != null) {
						tHash_Lookup_row7.endGet();
					}
					globalMap.remove( "tHash_Lookup_row7" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tMap_5 end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfsortie_full");
			  	}
			  	
 

ok_Hash.put("tMap_5", true);
end_Hash.put("tMap_5", System.currentTimeMillis());




/**
 * [tMap_5 end ] stop
 */

	
	/**
	 * [tMap_6 end ] start
	 */

	

	
	
	currentComponent="tMap_6";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfsortie_full");
			  	}
			  	
 

ok_Hash.put("tMap_6", true);
end_Hash.put("tMap_6", System.currentTimeMillis());




/**
 * [tMap_6 end ] stop
 */

	
	/**
	 * [tMap_7 end ] start
	 */

	

	
	
	currentComponent="tMap_7";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfcopyOfsortie_full");
			  	}
			  	
 

ok_Hash.put("tMap_7", true);
end_Hash.put("tMap_7", System.currentTimeMillis());




/**
 * [tMap_7 end ] stop
 */

	
	/**
	 * [tMap_8 end ] start
	 */

	

	
	
	currentComponent="tMap_8";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfcopyOfcopyOfsortie_full");
			  	}
			  	
 

ok_Hash.put("tMap_8", true);
end_Hash.put("tMap_8", System.currentTimeMillis());




/**
 * [tMap_8 end ] stop
 */

	
	/**
	 * [tMap_9 end ] start
	 */

	

	
	
	currentComponent="tMap_9";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfcopyOfcopyOfcopyOfsortie_full");
			  	}
			  	
 

ok_Hash.put("tMap_9", true);
end_Hash.put("tMap_9", System.currentTimeMillis());




/**
 * [tMap_9 end ] stop
 */

	
	/**
	 * [tMap_10 end ] start
	 */

	

	
	
	currentComponent="tMap_10";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full");
			  	}
			  	
 

ok_Hash.put("tMap_10", true);
end_Hash.put("tMap_10", System.currentTimeMillis());




/**
 * [tMap_10 end ] stop
 */

	
	/**
	 * [tMap_11 end ] start
	 */

	

	
	
	currentComponent="tMap_11";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full");
			  	}
			  	
 

ok_Hash.put("tMap_11", true);
end_Hash.put("tMap_11", System.currentTimeMillis());




/**
 * [tMap_11 end ] stop
 */

	
	/**
	 * [tMap_12 end ] start
	 */

	

	
	
	currentComponent="tMap_12";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full");
			  	}
			  	
 

ok_Hash.put("tMap_12", true);
end_Hash.put("tMap_12", System.currentTimeMillis());




/**
 * [tMap_12 end ] stop
 */

	
	/**
	 * [tMap_13 end ] start
	 */

	

	
	
	currentComponent="tMap_13";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_full");
			  	}
			  	
 

ok_Hash.put("tMap_13", true);
end_Hash.put("tMap_13", System.currentTimeMillis());




/**
 * [tMap_13 end ] stop
 */

	
	/**
	 * [tMap_14 end ] start
	 */

	

	
	
	currentComponent="tMap_14";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_full_");
			  	}
			  	
 

ok_Hash.put("tMap_14", true);
end_Hash.put("tMap_14", System.currentTimeMillis());




/**
 * [tMap_14 end ] stop
 */

	
	/**
	 * [tMap_15 end ] start
	 */

	

	
	
	currentComponent="tMap_15";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_full_size");
			  	}
			  	
 

ok_Hash.put("tMap_15", true);
end_Hash.put("tMap_15", System.currentTimeMillis());




/**
 * [tMap_15 end ] stop
 */

	
	/**
	 * [tMap_16 end ] start
	 */

	

	
	
	currentComponent="tMap_16";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_full_fits");
			  	}
			  	
 

ok_Hash.put("tMap_16", true);
end_Hash.put("tMap_16", System.currentTimeMillis());




/**
 * [tMap_16 end ] stop
 */

	
	/**
	 * [tMap_17 end ] start
	 */

	

	
	
	currentComponent="tMap_17";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_full_product_variant");
			  	}
			  	
 

ok_Hash.put("tMap_17", true);
end_Hash.put("tMap_17", System.currentTimeMillis());




/**
 * [tMap_17 end ] stop
 */

	
	/**
	 * [tUniqRow_15 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_15";

	

globalMap.put("tUniqRow_15_NB_UNIQUES",nb_uniques_tUniqRow_15);
globalMap.put("tUniqRow_15_NB_DUPLICATES",nb_duplicates_tUniqRow_15);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_released_product_variant");
			  	}
			  	
 

ok_Hash.put("tUniqRow_15", true);
end_Hash.put("tUniqRow_15", System.currentTimeMillis());




/**
 * [tUniqRow_15 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_8 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_8";

	

	
	
	
			xlsxTool_tFileOutputExcel_8.writeExcel(fileName_tFileOutputExcel_8,true);
	
		
			nb_line_tFileOutputExcel_8 = nb_line_tFileOutputExcel_8 -1;
		
		globalMap.put("tFileOutputExcel_8_NB_LINE",nb_line_tFileOutputExcel_8);
		
		

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row31");
			  	}
			  	
 

ok_Hash.put("tFileOutputExcel_8", true);
end_Hash.put("tFileOutputExcel_8", System.currentTimeMillis());




/**
 * [tFileOutputExcel_8 end ] stop
 */







	
	/**
	 * [tMap_18 end ] start
	 */

	

	
	
	currentComponent="tMap_18";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_full_varian");
			  	}
			  	
 

ok_Hash.put("tMap_18", true);
end_Hash.put("tMap_18", System.currentTimeMillis());




/**
 * [tMap_18 end ] stop
 */

	
	/**
	 * [tMap_19 end ] start
	 */

	

	
	
	currentComponent="tMap_19";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfsortie_released_product_variant");
			  	}
			  	
 

ok_Hash.put("tMap_19", true);
end_Hash.put("tMap_19", System.currentTimeMillis());




/**
 * [tMap_19 end ] stop
 */

	
	/**
	 * [tUniqRow_17 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_17";

	

globalMap.put("tUniqRow_17_NB_UNIQUES",nb_uniques_tUniqRow_17);
globalMap.put("tUniqRow_17_NB_DUPLICATES",nb_duplicates_tUniqRow_17);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_barcode");
			  	}
			  	
 

ok_Hash.put("tUniqRow_17", true);
end_Hash.put("tUniqRow_17", System.currentTimeMillis());




/**
 * [tUniqRow_17 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_10 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_10";

	

	
	
	
			xlsxTool_tFileOutputExcel_10.writeExcel(fileName_tFileOutputExcel_10,true);
	
		
			nb_line_tFileOutputExcel_10 = nb_line_tFileOutputExcel_10 -1;
		
		globalMap.put("tFileOutputExcel_10_NB_LINE",nb_line_tFileOutputExcel_10);
		
		

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row33");
			  	}
			  	
 

ok_Hash.put("tFileOutputExcel_10", true);
end_Hash.put("tFileOutputExcel_10", System.currentTimeMillis());




/**
 * [tFileOutputExcel_10 end ] stop
 */







	
	/**
	 * [tMap_20 end ] start
	 */

	

	
	
	currentComponent="tMap_20";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_full_barcode");
			  	}
			  	
 

ok_Hash.put("tMap_20", true);
end_Hash.put("tMap_20", System.currentTimeMillis());




/**
 * [tMap_20 end ] stop
 */

	
	/**
	 * [tUniqRow_18 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_18";

	

globalMap.put("tUniqRow_18_NB_UNIQUES",nb_uniques_tUniqRow_18);
globalMap.put("tUniqRow_18_NB_DUPLICATES",nb_duplicates_tUniqRow_18);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product");
			  	}
			  	
 

ok_Hash.put("tUniqRow_18", true);
end_Hash.put("tUniqRow_18", System.currentTimeMillis());




/**
 * [tUniqRow_18 end ] stop
 */

	
	/**
	 * [tHashOutput_9 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_9";

	
globalMap.put("tHashOutput_9_NB_LINE", nb_line_tHashOutput_9);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row34");
			  	}
			  	
 

ok_Hash.put("tHashOutput_9", true);
end_Hash.put("tHashOutput_9", System.currentTimeMillis());




/**
 * [tHashOutput_9 end ] stop
 */













	
	/**
	 * [tUniqRow_16 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_16";

	

globalMap.put("tUniqRow_16_NB_UNIQUES",nb_uniques_tUniqRow_16);
globalMap.put("tUniqRow_16_NB_DUPLICATES",nb_duplicates_tUniqRow_16);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_product_status");
			  	}
			  	
 

ok_Hash.put("tUniqRow_16", true);
end_Hash.put("tUniqRow_16", System.currentTimeMillis());




/**
 * [tUniqRow_16 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_9 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_9";

	

	
	
	
			xlsxTool_tFileOutputExcel_9.writeExcel(fileName_tFileOutputExcel_9,true);
	
		
			nb_line_tFileOutputExcel_9 = nb_line_tFileOutputExcel_9 -1;
		
		globalMap.put("tFileOutputExcel_9_NB_LINE",nb_line_tFileOutputExcel_9);
		
		

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row32");
			  	}
			  	
 

ok_Hash.put("tFileOutputExcel_9", true);
end_Hash.put("tFileOutputExcel_9", System.currentTimeMillis());




/**
 * [tFileOutputExcel_9 end ] stop
 */













	
	/**
	 * [tUniqRow_14 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_14";

	

globalMap.put("tUniqRow_14_NB_UNIQUES",nb_uniques_tUniqRow_14);
globalMap.put("tUniqRow_14_NB_DUPLICATES",nb_duplicates_tUniqRow_14);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_product_variant");
			  	}
			  	
 

ok_Hash.put("tUniqRow_14", true);
end_Hash.put("tUniqRow_14", System.currentTimeMillis());




/**
 * [tUniqRow_14 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_7 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_7";

	

	
	
	
			xlsxTool_tFileOutputExcel_7.writeExcel(fileName_tFileOutputExcel_7,true);
	
		
			nb_line_tFileOutputExcel_7 = nb_line_tFileOutputExcel_7 -1;
		
		globalMap.put("tFileOutputExcel_7_NB_LINE",nb_line_tFileOutputExcel_7);
		
		

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row30");
			  	}
			  	
 

ok_Hash.put("tFileOutputExcel_7", true);
end_Hash.put("tFileOutputExcel_7", System.currentTimeMillis());




/**
 * [tFileOutputExcel_7 end ] stop
 */










	
	/**
	 * [tUniqRow_13 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_13";

	

globalMap.put("tUniqRow_13_NB_UNIQUES",nb_uniques_tUniqRow_13);
globalMap.put("tUniqRow_13_NB_DUPLICATES",nb_duplicates_tUniqRow_13);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_fits");
			  	}
			  	
 

ok_Hash.put("tUniqRow_13", true);
end_Hash.put("tUniqRow_13", System.currentTimeMillis());




/**
 * [tUniqRow_13 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_6 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_6";

	

	
	
	
			xlsxTool_tFileOutputExcel_6.writeExcel(fileName_tFileOutputExcel_6,true);
	
		
			nb_line_tFileOutputExcel_6 = nb_line_tFileOutputExcel_6 -1;
		
		globalMap.put("tFileOutputExcel_6_NB_LINE",nb_line_tFileOutputExcel_6);
		
		

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row29");
			  	}
			  	
 

ok_Hash.put("tFileOutputExcel_6", true);
end_Hash.put("tFileOutputExcel_6", System.currentTimeMillis());




/**
 * [tFileOutputExcel_6 end ] stop
 */










	
	/**
	 * [tUniqRow_12 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_12";

	

globalMap.put("tUniqRow_12_NB_UNIQUES",nb_uniques_tUniqRow_12);
globalMap.put("tUniqRow_12_NB_DUPLICATES",nb_duplicates_tUniqRow_12);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_size");
			  	}
			  	
 

ok_Hash.put("tUniqRow_12", true);
end_Hash.put("tUniqRow_12", System.currentTimeMillis());




/**
 * [tUniqRow_12 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_5 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_5";

	

	
	
	
			xlsxTool_tFileOutputExcel_5.writeExcel(fileName_tFileOutputExcel_5,true);
	
		
			nb_line_tFileOutputExcel_5 = nb_line_tFileOutputExcel_5 -1;
		
		globalMap.put("tFileOutputExcel_5_NB_LINE",nb_line_tFileOutputExcel_5);
		
		

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row28");
			  	}
			  	
 

ok_Hash.put("tFileOutputExcel_5", true);
end_Hash.put("tFileOutputExcel_5", System.currentTimeMillis());




/**
 * [tFileOutputExcel_5 end ] stop
 */










	
	/**
	 * [tUniqRow_11 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_11";

	

globalMap.put("tUniqRow_11_NB_UNIQUES",nb_uniques_tUniqRow_11);
globalMap.put("tUniqRow_11_NB_DUPLICATES",nb_duplicates_tUniqRow_11);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_color");
			  	}
			  	
 

ok_Hash.put("tUniqRow_11", true);
end_Hash.put("tUniqRow_11", System.currentTimeMillis());




/**
 * [tUniqRow_11 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_4 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_4";

	

	
	
	
			xlsxTool_tFileOutputExcel_4.writeExcel(fileName_tFileOutputExcel_4,true);
	
		
			nb_line_tFileOutputExcel_4 = nb_line_tFileOutputExcel_4 -1;
		
		globalMap.put("tFileOutputExcel_4_NB_LINE",nb_line_tFileOutputExcel_4);
		
		

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row27");
			  	}
			  	
 

ok_Hash.put("tFileOutputExcel_4", true);
end_Hash.put("tFileOutputExcel_4", System.currentTimeMillis());




/**
 * [tFileOutputExcel_4 end ] stop
 */










	
	/**
	 * [tUniqRow_10 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_10";

	

globalMap.put("tUniqRow_10_NB_UNIQUES",nb_uniques_tUniqRow_10);
globalMap.put("tUniqRow_10_NB_DUPLICATES",nb_duplicates_tUniqRow_10);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product");
			  	}
			  	
 

ok_Hash.put("tUniqRow_10", true);
end_Hash.put("tUniqRow_10", System.currentTimeMillis());




/**
 * [tUniqRow_10 end ] stop
 */

	
	/**
	 * [tHashOutput_8 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_8";

	
globalMap.put("tHashOutput_8_NB_LINE", nb_line_tHashOutput_8);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row25");
			  	}
			  	
 

ok_Hash.put("tHashOutput_8", true);
end_Hash.put("tHashOutput_8", System.currentTimeMillis());




/**
 * [tHashOutput_8 end ] stop
 */










	
	/**
	 * [tUniqRow_9 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_9";

	

globalMap.put("tUniqRow_9_NB_UNIQUES",nb_uniques_tUniqRow_9);
globalMap.put("tUniqRow_9_NB_DUPLICATES",nb_duplicates_tUniqRow_9);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product");
			  	}
			  	
 

ok_Hash.put("tUniqRow_9", true);
end_Hash.put("tUniqRow_9", System.currentTimeMillis());




/**
 * [tUniqRow_9 end ] stop
 */

	
	/**
	 * [tHashOutput_7 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_7";

	
globalMap.put("tHashOutput_7_NB_LINE", nb_line_tHashOutput_7);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row22");
			  	}
			  	
 

ok_Hash.put("tHashOutput_7", true);
end_Hash.put("tHashOutput_7", System.currentTimeMillis());




/**
 * [tHashOutput_7 end ] stop
 */










	
	/**
	 * [tUniqRow_8 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_8";

	

globalMap.put("tUniqRow_8_NB_UNIQUES",nb_uniques_tUniqRow_8);
globalMap.put("tUniqRow_8_NB_DUPLICATES",nb_duplicates_tUniqRow_8);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product");
			  	}
			  	
 

ok_Hash.put("tUniqRow_8", true);
end_Hash.put("tUniqRow_8", System.currentTimeMillis());




/**
 * [tUniqRow_8 end ] stop
 */

	
	/**
	 * [tHashOutput_6 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_6";

	
globalMap.put("tHashOutput_6_NB_LINE", nb_line_tHashOutput_6);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row20");
			  	}
			  	
 

ok_Hash.put("tHashOutput_6", true);
end_Hash.put("tHashOutput_6", System.currentTimeMillis());




/**
 * [tHashOutput_6 end ] stop
 */










	
	/**
	 * [tUniqRow_7 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_7";

	

globalMap.put("tUniqRow_7_NB_UNIQUES",nb_uniques_tUniqRow_7);
globalMap.put("tUniqRow_7_NB_DUPLICATES",nb_duplicates_tUniqRow_7);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_product");
			  	}
			  	
 

ok_Hash.put("tUniqRow_7", true);
end_Hash.put("tUniqRow_7", System.currentTimeMillis());




/**
 * [tUniqRow_7 end ] stop
 */

	
	/**
	 * [tHashOutput_5 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";

	
globalMap.put("tHashOutput_5_NB_LINE", nb_line_tHashOutput_5);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row18");
			  	}
			  	
 

ok_Hash.put("tHashOutput_5", true);
end_Hash.put("tHashOutput_5", System.currentTimeMillis());




/**
 * [tHashOutput_5 end ] stop
 */










	
	/**
	 * [tUniqRow_6 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_6";

	

globalMap.put("tUniqRow_6_NB_UNIQUES",nb_uniques_tUniqRow_6);
globalMap.put("tUniqRow_6_NB_DUPLICATES",nb_duplicates_tUniqRow_6);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfcopyOfcopyOfcopyOfsortie_product");
			  	}
			  	
 

ok_Hash.put("tUniqRow_6", true);
end_Hash.put("tUniqRow_6", System.currentTimeMillis());




/**
 * [tUniqRow_6 end ] stop
 */

	
	/**
	 * [tHashOutput_4 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";

	
globalMap.put("tHashOutput_4_NB_LINE", nb_line_tHashOutput_4);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row16");
			  	}
			  	
 

ok_Hash.put("tHashOutput_4", true);
end_Hash.put("tHashOutput_4", System.currentTimeMillis());




/**
 * [tHashOutput_4 end ] stop
 */










	
	/**
	 * [tUniqRow_5 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_5";

	

globalMap.put("tUniqRow_5_NB_UNIQUES",nb_uniques_tUniqRow_5);
globalMap.put("tUniqRow_5_NB_DUPLICATES",nb_duplicates_tUniqRow_5);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfcopyOfcopyOfsortie_product");
			  	}
			  	
 

ok_Hash.put("tUniqRow_5", true);
end_Hash.put("tUniqRow_5", System.currentTimeMillis());




/**
 * [tUniqRow_5 end ] stop
 */

	
	/**
	 * [tHashOutput_3 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";

	
globalMap.put("tHashOutput_3_NB_LINE", nb_line_tHashOutput_3);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row14");
			  	}
			  	
 

ok_Hash.put("tHashOutput_3", true);
end_Hash.put("tHashOutput_3", System.currentTimeMillis());




/**
 * [tHashOutput_3 end ] stop
 */










	
	/**
	 * [tUniqRow_4 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_4";

	

globalMap.put("tUniqRow_4_NB_UNIQUES",nb_uniques_tUniqRow_4);
globalMap.put("tUniqRow_4_NB_DUPLICATES",nb_duplicates_tUniqRow_4);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfcopyOfsortie_product");
			  	}
			  	
 

ok_Hash.put("tUniqRow_4", true);
end_Hash.put("tUniqRow_4", System.currentTimeMillis());




/**
 * [tUniqRow_4 end ] stop
 */

	
	/**
	 * [tHashOutput_2 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";

	
globalMap.put("tHashOutput_2_NB_LINE", nb_line_tHashOutput_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row10");
			  	}
			  	
 

ok_Hash.put("tHashOutput_2", true);
end_Hash.put("tHashOutput_2", System.currentTimeMillis());




/**
 * [tHashOutput_2 end ] stop
 */










	
	/**
	 * [tUniqRow_3 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_3";

	

globalMap.put("tUniqRow_3_NB_UNIQUES",nb_uniques_tUniqRow_3);
globalMap.put("tUniqRow_3_NB_DUPLICATES",nb_duplicates_tUniqRow_3);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfsortie_product");
			  	}
			  	
 

ok_Hash.put("tUniqRow_3", true);
end_Hash.put("tUniqRow_3", System.currentTimeMillis());




/**
 * [tUniqRow_3 end ] stop
 */

	
	/**
	 * [tHashOutput_1 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";

	
globalMap.put("tHashOutput_1_NB_LINE", nb_line_tHashOutput_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Main1");
			  	}
			  	
 

ok_Hash.put("tHashOutput_1", true);
end_Hash.put("tHashOutput_1", System.currentTimeMillis());




/**
 * [tHashOutput_1 end ] stop
 */










	
	/**
	 * [tUniqRow_2 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

globalMap.put("tUniqRow_2_NB_UNIQUES",nb_uniques_tUniqRow_2);
globalMap.put("tUniqRow_2_NB_DUPLICATES",nb_duplicates_tUniqRow_2);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfsortie_product");
			  	}
			  	
 

ok_Hash.put("tUniqRow_2", true);
end_Hash.put("tUniqRow_2", System.currentTimeMillis());




/**
 * [tUniqRow_2 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_2 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_2";

	

	
	
	
			xlsxTool_tFileOutputExcel_2.writeExcel(fileName_tFileOutputExcel_2,true);
	
		
			nb_line_tFileOutputExcel_2 = nb_line_tFileOutputExcel_2 -1;
		
		globalMap.put("tFileOutputExcel_2_NB_LINE",nb_line_tFileOutputExcel_2);
		
		

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 

ok_Hash.put("tFileOutputExcel_2", true);
end_Hash.put("tFileOutputExcel_2", System.currentTimeMillis());




/**
 * [tFileOutputExcel_2 end ] stop
 */













	
	/**
	 * [tLogRow_3 end ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	


//////
//////
globalMap.put("tLogRow_3_NB_LINE",nb_line_tLogRow_3);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_product");
			  	}
			  	
 

ok_Hash.put("tLogRow_3", true);
end_Hash.put("tLogRow_3", System.currentTimeMillis());




/**
 * [tLogRow_3 end ] stop
 */

	
	/**
	 * [tUniqRow_1 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

globalMap.put("tUniqRow_1_NB_UNIQUES",nb_uniques_tUniqRow_1);
globalMap.put("tUniqRow_1_NB_DUPLICATES",nb_duplicates_tUniqRow_1);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tUniqRow_1", true);
end_Hash.put("tUniqRow_1", System.currentTimeMillis());




/**
 * [tUniqRow_1 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

	
	
	
			xlsxTool_tFileOutputExcel_1.writeExcel(fileName_tFileOutputExcel_1,true);
	
		
			nb_line_tFileOutputExcel_1 = nb_line_tFileOutputExcel_1 -1;
		
		globalMap.put("tFileOutputExcel_1_NB_LINE",nb_line_tFileOutputExcel_1);
		
		

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tFileOutputExcel_1", true);
end_Hash.put("tFileOutputExcel_1", System.currentTimeMillis());




/**
 * [tFileOutputExcel_1 end ] stop
 */















				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_3"
					     			globalMap.remove("tHash_Lookup_row7"); 
				     			
				try{
					
	
	/**
	 * [tFileInputExcel_2 finally ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_2";

	

 



/**
 * [tFileInputExcel_2 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tLogRow_2 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tMap_5 finally ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 finally ] stop
 */

	
	/**
	 * [tMap_6 finally ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 finally ] stop
 */

	
	/**
	 * [tMap_7 finally ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 finally ] stop
 */

	
	/**
	 * [tMap_8 finally ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 finally ] stop
 */

	
	/**
	 * [tMap_9 finally ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

 



/**
 * [tMap_9 finally ] stop
 */

	
	/**
	 * [tMap_10 finally ] start
	 */

	

	
	
	currentComponent="tMap_10";

	

 



/**
 * [tMap_10 finally ] stop
 */

	
	/**
	 * [tMap_11 finally ] start
	 */

	

	
	
	currentComponent="tMap_11";

	

 



/**
 * [tMap_11 finally ] stop
 */

	
	/**
	 * [tMap_12 finally ] start
	 */

	

	
	
	currentComponent="tMap_12";

	

 



/**
 * [tMap_12 finally ] stop
 */

	
	/**
	 * [tMap_13 finally ] start
	 */

	

	
	
	currentComponent="tMap_13";

	

 



/**
 * [tMap_13 finally ] stop
 */

	
	/**
	 * [tMap_14 finally ] start
	 */

	

	
	
	currentComponent="tMap_14";

	

 



/**
 * [tMap_14 finally ] stop
 */

	
	/**
	 * [tMap_15 finally ] start
	 */

	

	
	
	currentComponent="tMap_15";

	

 



/**
 * [tMap_15 finally ] stop
 */

	
	/**
	 * [tMap_16 finally ] start
	 */

	

	
	
	currentComponent="tMap_16";

	

 



/**
 * [tMap_16 finally ] stop
 */

	
	/**
	 * [tMap_17 finally ] start
	 */

	

	
	
	currentComponent="tMap_17";

	

 



/**
 * [tMap_17 finally ] stop
 */

	
	/**
	 * [tUniqRow_15 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_15";

	

 



/**
 * [tUniqRow_15 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_8 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_8";

	

 



/**
 * [tFileOutputExcel_8 finally ] stop
 */







	
	/**
	 * [tMap_18 finally ] start
	 */

	

	
	
	currentComponent="tMap_18";

	

 



/**
 * [tMap_18 finally ] stop
 */

	
	/**
	 * [tMap_19 finally ] start
	 */

	

	
	
	currentComponent="tMap_19";

	

 



/**
 * [tMap_19 finally ] stop
 */

	
	/**
	 * [tUniqRow_17 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_17";

	

 



/**
 * [tUniqRow_17 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_10 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_10";

	

 



/**
 * [tFileOutputExcel_10 finally ] stop
 */







	
	/**
	 * [tMap_20 finally ] start
	 */

	

	
	
	currentComponent="tMap_20";

	

 



/**
 * [tMap_20 finally ] stop
 */

	
	/**
	 * [tUniqRow_18 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_18";

	

 



/**
 * [tUniqRow_18 finally ] stop
 */

	
	/**
	 * [tHashOutput_9 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_9";

	

 



/**
 * [tHashOutput_9 finally ] stop
 */













	
	/**
	 * [tUniqRow_16 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_16";

	

 



/**
 * [tUniqRow_16 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_9 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_9";

	

 



/**
 * [tFileOutputExcel_9 finally ] stop
 */













	
	/**
	 * [tUniqRow_14 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_14";

	

 



/**
 * [tUniqRow_14 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_7 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_7";

	

 



/**
 * [tFileOutputExcel_7 finally ] stop
 */










	
	/**
	 * [tUniqRow_13 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_13";

	

 



/**
 * [tUniqRow_13 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_6 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_6";

	

 



/**
 * [tFileOutputExcel_6 finally ] stop
 */










	
	/**
	 * [tUniqRow_12 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_12";

	

 



/**
 * [tUniqRow_12 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_5 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_5";

	

 



/**
 * [tFileOutputExcel_5 finally ] stop
 */










	
	/**
	 * [tUniqRow_11 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_11";

	

 



/**
 * [tUniqRow_11 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_4 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_4";

	

 



/**
 * [tFileOutputExcel_4 finally ] stop
 */










	
	/**
	 * [tUniqRow_10 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_10";

	

 



/**
 * [tUniqRow_10 finally ] stop
 */

	
	/**
	 * [tHashOutput_8 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_8";

	

 



/**
 * [tHashOutput_8 finally ] stop
 */










	
	/**
	 * [tUniqRow_9 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_9";

	

 



/**
 * [tUniqRow_9 finally ] stop
 */

	
	/**
	 * [tHashOutput_7 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_7";

	

 



/**
 * [tHashOutput_7 finally ] stop
 */










	
	/**
	 * [tUniqRow_8 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_8";

	

 



/**
 * [tUniqRow_8 finally ] stop
 */

	
	/**
	 * [tHashOutput_6 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_6";

	

 



/**
 * [tHashOutput_6 finally ] stop
 */










	
	/**
	 * [tUniqRow_7 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_7";

	

 



/**
 * [tUniqRow_7 finally ] stop
 */

	
	/**
	 * [tHashOutput_5 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";

	

 



/**
 * [tHashOutput_5 finally ] stop
 */










	
	/**
	 * [tUniqRow_6 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_6";

	

 



/**
 * [tUniqRow_6 finally ] stop
 */

	
	/**
	 * [tHashOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";

	

 



/**
 * [tHashOutput_4 finally ] stop
 */










	
	/**
	 * [tUniqRow_5 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_5";

	

 



/**
 * [tUniqRow_5 finally ] stop
 */

	
	/**
	 * [tHashOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";

	

 



/**
 * [tHashOutput_3 finally ] stop
 */










	
	/**
	 * [tUniqRow_4 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_4";

	

 



/**
 * [tUniqRow_4 finally ] stop
 */

	
	/**
	 * [tHashOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";

	

 



/**
 * [tHashOutput_2 finally ] stop
 */










	
	/**
	 * [tUniqRow_3 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_3";

	

 



/**
 * [tUniqRow_3 finally ] stop
 */

	
	/**
	 * [tHashOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";

	

 



/**
 * [tHashOutput_1 finally ] stop
 */










	
	/**
	 * [tUniqRow_2 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

 



/**
 * [tUniqRow_2 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_2 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_2";

	

 



/**
 * [tFileOutputExcel_2 finally ] stop
 */













	
	/**
	 * [tLogRow_3 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 finally ] stop
 */

	
	/**
	 * [tUniqRow_1 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

 



/**
 * [tFileOutputExcel_1 finally ] stop
 */















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputExcel_2_SUBPROCESS_STATE", 1);
	}
	

public void tSetGlobalVar_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSetGlobalVar_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tSetGlobalVar_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tSetGlobalVar_1", false);
		start_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());
		
	
	currentComponent="tSetGlobalVar_1";

	
		int tos_count_tSetGlobalVar_1 = 0;
		

 



/**
 * [tSetGlobalVar_1 begin ] stop
 */
	
	/**
	 * [tSetGlobalVar_1 main ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

globalMap.put("fieldMap", new HashMap<String, String>());
globalMap.put("dateError",  TalendDate.formatDate("yyyy-MM-ddHHmmss", new Date()) );

 


	tos_count_tSetGlobalVar_1++;

/**
 * [tSetGlobalVar_1 main ] stop
 */
	
	/**
	 * [tSetGlobalVar_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

 



/**
 * [tSetGlobalVar_1 process_data_begin ] stop
 */
	
	/**
	 * [tSetGlobalVar_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

 



/**
 * [tSetGlobalVar_1 process_data_end ] stop
 */
	
	/**
	 * [tSetGlobalVar_1 end ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

 

ok_Hash.put("tSetGlobalVar_1", true);
end_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());




/**
 * [tSetGlobalVar_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSetGlobalVar_1 finally ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

 



/**
 * [tSetGlobalVar_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSetGlobalVar_1_SUBPROCESS_STATE", 1);
	}
	


public static class row7Struct implements routines.system.IPersistableComparableLookupRow<row7Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String COUNTRYREGIONID;

				public String getCOUNTRYREGIONID () {
					return this.COUNTRYREGIONID;
				}
				
			    public String LANGUAGEID;

				public String getLANGUAGEID () {
					return this.LANGUAGEID;
				}
				
			    public String LONGNAME;

				public String getLONGNAME () {
					return this.LONGNAME;
				}
				
			    public String SHORTNAME;

				public String getSHORTNAME () {
					return this.SHORTNAME;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.SHORTNAME == null) ? 0 : this.SHORTNAME.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row7Struct other = (row7Struct) obj;
		
						if (this.SHORTNAME == null) {
							if (other.SHORTNAME != null)
								return false;
						
						} else if (!this.SHORTNAME.equals(other.SHORTNAME))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row7Struct other) {

		other.COUNTRYREGIONID = this.COUNTRYREGIONID;
	            other.LANGUAGEID = this.LANGUAGEID;
	            other.LONGNAME = this.LONGNAME;
	            other.SHORTNAME = this.SHORTNAME;
	            
	}

	public void copyKeysDataTo(row7Struct other) {

		other.SHORTNAME = this.SHORTNAME;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS) {

        	try {

        		int length = 0;
		
					this.SHORTNAME = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SHORTNAME,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.COUNTRYREGIONID = readString(dis,ois);
					
						this.LANGUAGEID = readString(dis,ois);
					
						this.LONGNAME = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.COUNTRYREGIONID, dos, oos);
					
						writeString(this.LANGUAGEID, dos, oos);
					
						writeString(this.LONGNAME, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("COUNTRYREGIONID="+COUNTRYREGIONID);
		sb.append(",LANGUAGEID="+LANGUAGEID);
		sb.append(",LONGNAME="+LONGNAME);
		sb.append(",SHORTNAME="+SHORTNAME);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SHORTNAME, other.SHORTNAME);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_coo_fileStruct implements routines.system.IPersistableRow<sortie_coo_fileStruct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];

	
			    public String COUNTRYREGIONID;

				public String getCOUNTRYREGIONID () {
					return this.COUNTRYREGIONID;
				}
				
			    public String LANGUAGEID;

				public String getLANGUAGEID () {
					return this.LANGUAGEID;
				}
				
			    public String LONGNAME;

				public String getLONGNAME () {
					return this.LONGNAME;
				}
				
			    public String SHORTNAME;

				public String getSHORTNAME () {
					return this.SHORTNAME;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS) {

        	try {

        		int length = 0;
		
					this.COUNTRYREGIONID = readString(dis);
					
					this.LANGUAGEID = readString(dis);
					
					this.LONGNAME = readString(dis);
					
					this.SHORTNAME = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.COUNTRYREGIONID,dos);
					
					// String
				
						writeString(this.LANGUAGEID,dos);
					
					// String
				
						writeString(this.LONGNAME,dos);
					
					// String
				
						writeString(this.SHORTNAME,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("COUNTRYREGIONID="+COUNTRYREGIONID);
		sb.append(",LANGUAGEID="+LANGUAGEID);
		sb.append(",LONGNAME="+LONGNAME);
		sb.append(",SHORTNAME="+SHORTNAME);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_coo_fileStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row24Struct implements routines.system.IPersistableRow<row24Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];

	
			    public String COUNTRYREGIONID;

				public String getCOUNTRYREGIONID () {
					return this.COUNTRYREGIONID;
				}
				
			    public String LANGUAGEID;

				public String getLANGUAGEID () {
					return this.LANGUAGEID;
				}
				
			    public String LONGNAME;

				public String getLONGNAME () {
					return this.LONGNAME;
				}
				
			    public String SHORTNAME;

				public String getSHORTNAME () {
					return this.SHORTNAME;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS) {

        	try {

        		int length = 0;
		
					this.COUNTRYREGIONID = readString(dis);
					
					this.LANGUAGEID = readString(dis);
					
					this.LONGNAME = readString(dis);
					
					this.SHORTNAME = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.COUNTRYREGIONID,dos);
					
					// String
				
						writeString(this.LANGUAGEID,dos);
					
					// String
				
						writeString(this.LONGNAME,dos);
					
					// String
				
						writeString(this.SHORTNAME,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("COUNTRYREGIONID="+COUNTRYREGIONID);
		sb.append(",LANGUAGEID="+LANGUAGEID);
		sb.append(",LONGNAME="+LONGNAME);
		sb.append(",SHORTNAME="+SHORTNAME);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row24Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputExcel_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputExcel_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row24Struct row24 = new row24Struct();
sortie_coo_fileStruct sortie_coo_file = new sortie_coo_fileStruct();
row7Struct row7 = new row7Struct();






	
	/**
	 * [tAdvancedHash_row7 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row7", false);
		start_Hash.put("tAdvancedHash_row7", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row7";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7");
					}
				
		int tos_count_tAdvancedHash_row7 = 0;
		

			   		// connection name:row7
			   		// source node:tFilterRow_1 - inputs:(sortie_coo_file) outputs:(row7,row7) | target node:tAdvancedHash_row7 - inputs:(row7) outputs:()
			   		// linked node: tMap_3 - inputs:(row6,row7) outputs:(copyOfsortie_full,copyOfsortie_product)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row7 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct> tHash_Lookup_row7 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row7Struct>getLookup(matchingModeEnum_row7);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row7", tHash_Lookup_row7);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row7 begin ] stop
 */



	
	/**
	 * [tFilterRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_1", false);
		start_Hash.put("tFilterRow_1", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_coo_file");
					}
				
		int tos_count_tFilterRow_1 = 0;
		
    int nb_line_tFilterRow_1 = 0;
    int nb_line_ok_tFilterRow_1 = 0;
    int nb_line_reject_tFilterRow_1 = 0;

    class Operator_tFilterRow_1 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_1(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_1 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row24");
					}
				
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
sortie_coo_fileStruct sortie_coo_file_tmp = new sortie_coo_fileStruct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tFileInputExcel_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputExcel_3", false);
		start_Hash.put("tFileInputExcel_3", System.currentTimeMillis());
		
	
	currentComponent="tFileInputExcel_3";

	
		int tos_count_tFileInputExcel_3 = 0;
		

 
	final String decryptedPassword_tFileInputExcel_3 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[bj1WaUqYGx65/gJXzNAQcLHsw9BpkLGKqJ+tUQ==]");
        String password_tFileInputExcel_3 = decryptedPassword_tFileInputExcel_3;
        if (password_tFileInputExcel_3.isEmpty()){
            password_tFileInputExcel_3 = null;
        }
			class RegexUtil_tFileInputExcel_3 {

		    	public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, String oneSheetName, boolean useRegex) {

			        java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();

			        if(useRegex){//this part process the regex issue

				        java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(oneSheetName);
				        for (org.apache.poi.ss.usermodel.Sheet sheet : workbook) {
				            String sheetName = sheet.getSheetName();
				            java.util.regex.Matcher matcher = pattern.matcher(sheetName);
				            if (matcher.matches()) {
				            	if(sheet != null){
				                	list.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet);
				                }
				            }
				        }

			        }else{
			        	org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook.getSheet(oneSheetName);
		            	if(sheet != null){
		                	list.add(sheet);
		                }

			        }

			        return list;
			    }

			    public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, int index, boolean useRegex) {
			    	java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list =  new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
			    	org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook.getSheetAt(index);
	            	if(sheet != null){
	                	list.add(sheet);
	                }
			    	return list;
			    }

			}
		RegexUtil_tFileInputExcel_3 regexUtil_tFileInputExcel_3 = new RegexUtil_tFileInputExcel_3();

		Object source_tFileInputExcel_3 = context.ReferentielPath +  "region translations.xlsx";
		org.apache.poi.xssf.usermodel.XSSFWorkbook workbook_tFileInputExcel_3 = null;

		if(source_tFileInputExcel_3 instanceof String){
			workbook_tFileInputExcel_3 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory.create(new java.io.File((String)source_tFileInputExcel_3), password_tFileInputExcel_3);
		} else if(source_tFileInputExcel_3 instanceof java.io.InputStream) {
     		workbook_tFileInputExcel_3 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory.create((java.io.InputStream)source_tFileInputExcel_3, password_tFileInputExcel_3);
		} else{
			workbook_tFileInputExcel_3 = null;
			throw new java.lang.Exception("The data source should be specified as Inputstream or File Path!");
		}
		try {

		java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_tFileInputExcel_3 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
        sheetList_tFileInputExcel_3.addAll(regexUtil_tFileInputExcel_3.getSheets(workbook_tFileInputExcel_3, 0, false));
    	if(sheetList_tFileInputExcel_3.size() <= 0){
            throw new RuntimeException("Special sheets not exist!");
        }

		java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_FilterNull_tFileInputExcel_3 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
		for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_FilterNull_tFileInputExcel_3 : sheetList_tFileInputExcel_3) {
			if(sheet_FilterNull_tFileInputExcel_3!=null && sheetList_FilterNull_tFileInputExcel_3.iterator()!=null && sheet_FilterNull_tFileInputExcel_3.iterator().hasNext()){
				sheetList_FilterNull_tFileInputExcel_3.add(sheet_FilterNull_tFileInputExcel_3);
			}
		}
		sheetList_tFileInputExcel_3 = sheetList_FilterNull_tFileInputExcel_3;
	if(sheetList_tFileInputExcel_3.size()>0){
		int nb_line_tFileInputExcel_3 = 0;

        int begin_line_tFileInputExcel_3 = 1;

        int footer_input_tFileInputExcel_3 = 0;

        int end_line_tFileInputExcel_3=0;
        for(org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_3:sheetList_tFileInputExcel_3){
			end_line_tFileInputExcel_3+=(sheet_tFileInputExcel_3.getLastRowNum()+1);
        }
        end_line_tFileInputExcel_3 -= footer_input_tFileInputExcel_3;
        int limit_tFileInputExcel_3 = -1;
        int start_column_tFileInputExcel_3 = 1-1;
        int end_column_tFileInputExcel_3 = -1;

        org.apache.poi.xssf.usermodel.XSSFRow row_tFileInputExcel_3 = null;
        org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_3 = sheetList_tFileInputExcel_3.get(0);
        int rowCount_tFileInputExcel_3 = 0;
        int sheetIndex_tFileInputExcel_3 = 0;
        int currentRows_tFileInputExcel_3 = (sheetList_tFileInputExcel_3.get(0).getLastRowNum()+1);

		//for the number format
        java.text.DecimalFormat df_tFileInputExcel_3 = new java.text.DecimalFormat("#.####################################");
        char decimalChar_tFileInputExcel_3 = df_tFileInputExcel_3.getDecimalFormatSymbols().getDecimalSeparator();
		
        for(int i_tFileInputExcel_3 = begin_line_tFileInputExcel_3; i_tFileInputExcel_3 < end_line_tFileInputExcel_3; i_tFileInputExcel_3++){

        	int emptyColumnCount_tFileInputExcel_3 = 0;

        	if (limit_tFileInputExcel_3 != -1 && nb_line_tFileInputExcel_3 >= limit_tFileInputExcel_3) {
        		break;
        	}

            while (i_tFileInputExcel_3 >= rowCount_tFileInputExcel_3 + currentRows_tFileInputExcel_3) {
                rowCount_tFileInputExcel_3 += currentRows_tFileInputExcel_3;
                sheet_tFileInputExcel_3 = sheetList_tFileInputExcel_3.get(++sheetIndex_tFileInputExcel_3);
                currentRows_tFileInputExcel_3 = (sheet_tFileInputExcel_3.getLastRowNum()+1);
            }
            globalMap.put("tFileInputExcel_3_CURRENT_SHEET",sheet_tFileInputExcel_3.getSheetName());
            if (rowCount_tFileInputExcel_3 <= i_tFileInputExcel_3) {
                row_tFileInputExcel_3 = sheet_tFileInputExcel_3.getRow(i_tFileInputExcel_3 - rowCount_tFileInputExcel_3);
            }
		    row24 = null;
					int tempRowLength_tFileInputExcel_3 = 4;
				
				int columnIndex_tFileInputExcel_3 = 0;
			
			String[] temp_row_tFileInputExcel_3 = new String[tempRowLength_tFileInputExcel_3];
			int excel_end_column_tFileInputExcel_3;
			if(row_tFileInputExcel_3==null){
				excel_end_column_tFileInputExcel_3=0;
			}else{
				excel_end_column_tFileInputExcel_3=row_tFileInputExcel_3.getLastCellNum();
			}
			int actual_end_column_tFileInputExcel_3;
			if(end_column_tFileInputExcel_3 == -1){
				actual_end_column_tFileInputExcel_3 = excel_end_column_tFileInputExcel_3;
			}
			else{
				actual_end_column_tFileInputExcel_3 = end_column_tFileInputExcel_3 >	excel_end_column_tFileInputExcel_3 ? excel_end_column_tFileInputExcel_3 : end_column_tFileInputExcel_3;
			}
			org.apache.poi.ss.formula.eval.NumberEval ne_tFileInputExcel_3 = null;
			for(int i=0;i<tempRowLength_tFileInputExcel_3;i++){
				if(i + start_column_tFileInputExcel_3 < actual_end_column_tFileInputExcel_3){
					org.apache.poi.ss.usermodel.Cell cell_tFileInputExcel_3 = row_tFileInputExcel_3.getCell(i + start_column_tFileInputExcel_3);
					if(cell_tFileInputExcel_3!=null){
					switch (cell_tFileInputExcel_3.getCellType()) {
                        case STRING:
                            temp_row_tFileInputExcel_3[i] = cell_tFileInputExcel_3.getRichStringCellValue().getString();
                            break;
                        case NUMERIC:
                            if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell_tFileInputExcel_3)) {
									temp_row_tFileInputExcel_3[i] =cell_tFileInputExcel_3.getDateCellValue().toString();
                            } else {
                                temp_row_tFileInputExcel_3[i] = df_tFileInputExcel_3.format(cell_tFileInputExcel_3.getNumericCellValue());
                            }
                            break;
                        case BOOLEAN:
                            temp_row_tFileInputExcel_3[i] =String.valueOf(cell_tFileInputExcel_3.getBooleanCellValue());
                            break;
                        case FORMULA:
        					switch (cell_tFileInputExcel_3.getCachedFormulaResultType()) {
                                case STRING:
                                    temp_row_tFileInputExcel_3[i] = cell_tFileInputExcel_3.getRichStringCellValue().getString();
                                    break;
                                case NUMERIC:
                                    if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell_tFileInputExcel_3)) {
											temp_row_tFileInputExcel_3[i] =cell_tFileInputExcel_3.getDateCellValue().toString();
                                    } else {
	                                    ne_tFileInputExcel_3 = new org.apache.poi.ss.formula.eval.NumberEval(cell_tFileInputExcel_3.getNumericCellValue());
										temp_row_tFileInputExcel_3[i] = ne_tFileInputExcel_3.getStringValue();
                                    }
                                    break;
                                case BOOLEAN:
                                    temp_row_tFileInputExcel_3[i] =String.valueOf(cell_tFileInputExcel_3.getBooleanCellValue());
                                    break;
                                default:
                            		temp_row_tFileInputExcel_3[i] = "";
                            }
                            break;
                        default:
                            temp_row_tFileInputExcel_3[i] = "";
                        }
                	}
                	else{
                		temp_row_tFileInputExcel_3[i]="";
                	}

				}else{
					temp_row_tFileInputExcel_3[i]="";
				}
			}
			boolean whetherReject_tFileInputExcel_3 = false;
			row24 = new row24Struct();
			int curColNum_tFileInputExcel_3 = -1;
			String curColName_tFileInputExcel_3 = "";
			try{
							columnIndex_tFileInputExcel_3 = 0;
						
			if( temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].length() > 0) {
				curColNum_tFileInputExcel_3=columnIndex_tFileInputExcel_3 + start_column_tFileInputExcel_3 + 1;
				curColName_tFileInputExcel_3 = "COUNTRYREGIONID";

				row24.COUNTRYREGIONID = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3];
			}else{
				row24.COUNTRYREGIONID = null;
				emptyColumnCount_tFileInputExcel_3++;
			}
							columnIndex_tFileInputExcel_3 = 1;
						
			if( temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].length() > 0) {
				curColNum_tFileInputExcel_3=columnIndex_tFileInputExcel_3 + start_column_tFileInputExcel_3 + 1;
				curColName_tFileInputExcel_3 = "LANGUAGEID";

				row24.LANGUAGEID = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3];
			}else{
				row24.LANGUAGEID = null;
				emptyColumnCount_tFileInputExcel_3++;
			}
							columnIndex_tFileInputExcel_3 = 2;
						
			if( temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].length() > 0) {
				curColNum_tFileInputExcel_3=columnIndex_tFileInputExcel_3 + start_column_tFileInputExcel_3 + 1;
				curColName_tFileInputExcel_3 = "LONGNAME";

				row24.LONGNAME = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3];
			}else{
				row24.LONGNAME = null;
				emptyColumnCount_tFileInputExcel_3++;
			}
							columnIndex_tFileInputExcel_3 = 3;
						
			if( temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].length() > 0) {
				curColNum_tFileInputExcel_3=columnIndex_tFileInputExcel_3 + start_column_tFileInputExcel_3 + 1;
				curColName_tFileInputExcel_3 = "SHORTNAME";

				row24.SHORTNAME = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3];
			}else{
				row24.SHORTNAME = null;
				emptyColumnCount_tFileInputExcel_3++;
			}

				nb_line_tFileInputExcel_3++;
				
			}catch(java.lang.Exception e){
			whetherReject_tFileInputExcel_3 = true;
					 System.err.println(e.getMessage());
					 row24 = null;
			}


		



 



/**
 * [tFileInputExcel_3 begin ] stop
 */
	
	/**
	 * [tFileInputExcel_3 main ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_3";

	

 


	tos_count_tFileInputExcel_3++;

/**
 * [tFileInputExcel_3 main ] stop
 */
	
	/**
	 * [tFileInputExcel_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_3";

	

 



/**
 * [tFileInputExcel_3 process_data_begin ] stop
 */
// Start of branch "row24"
if(row24 != null) { 



	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row24");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_4 = false;
		  boolean mainRowRejected_tMap_4 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

sortie_coo_file = null;


// # Output table : 'sortie_coo_file'
sortie_coo_file_tmp.COUNTRYREGIONID = row24.COUNTRYREGIONID ;
sortie_coo_file_tmp.LANGUAGEID = row24.LANGUAGEID ;
sortie_coo_file_tmp.LONGNAME = row24.LONGNAME ;
sortie_coo_file_tmp.SHORTNAME = StringHandling.DOWNCASE(row24.SHORTNAME ) ;
sortie_coo_file = sortie_coo_file_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "sortie_coo_file"
if(sortie_coo_file != null) { 



	
	/**
	 * [tFilterRow_1 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_coo_file");
					}
					

          row7 = null;
          row7 = null;
    Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1("&&");
            ope_tFilterRow_1.matches((sortie_coo_file.LANGUAGEID == null? false : sortie_coo_file.LANGUAGEID.compareTo("en-US") == 0)
                           , "LANGUAGEID.compareTo(\"en-US\") == 0 failed");
    
    if (ope_tFilterRow_1.getMatchFlag()) {
              if(row7 == null){ 
                row7 = new row7Struct();
              }
               row7.COUNTRYREGIONID = sortie_coo_file.COUNTRYREGIONID;
               row7.LANGUAGEID = sortie_coo_file.LANGUAGEID;
               row7.LONGNAME = sortie_coo_file.LONGNAME;
               row7.SHORTNAME = sortie_coo_file.SHORTNAME;
              if(row7 == null){ 
                row7 = new row7Struct();
              }
               row7.COUNTRYREGIONID = sortie_coo_file.COUNTRYREGIONID;
               row7.LANGUAGEID = sortie_coo_file.LANGUAGEID;
               row7.LONGNAME = sortie_coo_file.LONGNAME;
               row7.SHORTNAME = sortie_coo_file.SHORTNAME;    
      nb_line_ok_tFilterRow_1++;
    } else {
      nb_line_reject_tFilterRow_1++;
    }

nb_line_tFilterRow_1++;

 


	tos_count_tFilterRow_1++;

/**
 * [tFilterRow_1 main ] stop
 */
	
	/**
	 * [tFilterRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

 



/**
 * [tFilterRow_1 process_data_begin ] stop
 */
// Start of branch "row7"
if(row7 != null) { 



	
	/**
	 * [tAdvancedHash_row7 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row7");
					}
					


			   
			   

					row7Struct row7_HashRow = new row7Struct();
		   	   	   
				
				row7_HashRow.COUNTRYREGIONID = row7.COUNTRYREGIONID;
				
				row7_HashRow.LANGUAGEID = row7.LANGUAGEID;
				
				row7_HashRow.LONGNAME = row7.LONGNAME;
				
				row7_HashRow.SHORTNAME = row7.SHORTNAME;
				
			tHash_Lookup_row7.put(row7_HashRow);
			
            




 


	tos_count_tAdvancedHash_row7++;

/**
 * [tAdvancedHash_row7 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";

	

 



/**
 * [tAdvancedHash_row7 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row7 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";

	

 



/**
 * [tAdvancedHash_row7 process_data_end ] stop
 */

} // End of branch "row7"




	
	/**
	 * [tFilterRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

 



/**
 * [tFilterRow_1 process_data_end ] stop
 */

} // End of branch "sortie_coo_file"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_end ] stop
 */

} // End of branch "row24"




	
	/**
	 * [tFileInputExcel_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_3";

	

 



/**
 * [tFileInputExcel_3 process_data_end ] stop
 */
	
	/**
	 * [tFileInputExcel_3 end ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_3";

	

			}
			
			
			
			globalMap.put("tFileInputExcel_3_NB_LINE",nb_line_tFileInputExcel_3);
			
				}
			
		} finally { 
				
  				if(!(source_tFileInputExcel_3 instanceof java.io.InputStream)){
  					workbook_tFileInputExcel_3.getPackage().revert();
  				}
				
		}	
		
 

ok_Hash.put("tFileInputExcel_3", true);
end_Hash.put("tFileInputExcel_3", System.currentTimeMillis());




/**
 * [tFileInputExcel_3 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row24");
			  	}
			  	
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tFilterRow_1 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	
    globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
    globalMap.put("tFilterRow_1_NB_LINE_OK", nb_line_ok_tFilterRow_1);
    globalMap.put("tFilterRow_1_NB_LINE_REJECT", nb_line_reject_tFilterRow_1);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_coo_file");
			  	}
			  	
 

ok_Hash.put("tFilterRow_1", true);
end_Hash.put("tFilterRow_1", System.currentTimeMillis());




/**
 * [tFilterRow_1 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row7 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";

	

tHash_Lookup_row7.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row7", true);
end_Hash.put("tAdvancedHash_row7", System.currentTimeMillis());




/**
 * [tAdvancedHash_row7 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputExcel_3 finally ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_3";

	

 



/**
 * [tFileInputExcel_3 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tFilterRow_1 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

 



/**
 * [tFilterRow_1 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row7 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";

	

 



/**
 * [tAdvancedHash_row7 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputExcel_3_SUBPROCESS_STATE", 1);
	}
	

public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";

	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tSetGlobalVar_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	

public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";

	
		int tos_count_tPostjob_1 = 0;
		

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());




/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	


public static class row13Struct implements routines.system.IPersistableRow<row13Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];

	
			    public String PRODUCTNUMBER;

				public String getPRODUCTNUMBER () {
					return this.PRODUCTNUMBER;
				}
				
			    public String ATTRIBUTETYPENAME;

				public String getATTRIBUTETYPENAME () {
					return this.ATTRIBUTETYPENAME;
				}
				
			    public String ATTRIBUTENAME;

				public String getATTRIBUTENAME () {
					return this.ATTRIBUTENAME;
				}
				
			    public String TEXTVALUE;

				public String getTEXTVALUE () {
					return this.TEXTVALUE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS) {

        	try {

        		int length = 0;
		
					this.PRODUCTNUMBER = readString(dis);
					
					this.ATTRIBUTETYPENAME = readString(dis);
					
					this.ATTRIBUTENAME = readString(dis);
					
					this.TEXTVALUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTNUMBER,dos);
					
					// String
				
						writeString(this.ATTRIBUTETYPENAME,dos);
					
					// String
				
						writeString(this.ATTRIBUTENAME,dos);
					
					// String
				
						writeString(this.TEXTVALUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTNUMBER="+PRODUCTNUMBER);
		sb.append(",ATTRIBUTETYPENAME="+ATTRIBUTETYPENAME);
		sb.append(",ATTRIBUTENAME="+ATTRIBUTENAME);
		sb.append(",TEXTVALUE="+TEXTVALUE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row13Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];

	
			    public String PRODUCTNUMBER;

				public String getPRODUCTNUMBER () {
					return this.PRODUCTNUMBER;
				}
				
			    public String ATTRIBUTETYPENAME;

				public String getATTRIBUTETYPENAME () {
					return this.ATTRIBUTETYPENAME;
				}
				
			    public String ATTRIBUTENAME;

				public String getATTRIBUTENAME () {
					return this.ATTRIBUTENAME;
				}
				
			    public String TEXTVALUE;

				public String getTEXTVALUE () {
					return this.TEXTVALUE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS) {

        	try {

        		int length = 0;
		
					this.PRODUCTNUMBER = readString(dis);
					
					this.ATTRIBUTETYPENAME = readString(dis);
					
					this.ATTRIBUTENAME = readString(dis);
					
					this.TEXTVALUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTNUMBER,dos);
					
					// String
				
						writeString(this.ATTRIBUTETYPENAME,dos);
					
					// String
				
						writeString(this.ATTRIBUTENAME,dos);
					
					// String
				
						writeString(this.TEXTVALUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTNUMBER="+PRODUCTNUMBER);
		sb.append(",ATTRIBUTETYPENAME="+ATTRIBUTETYPENAME);
		sb.append(",ATTRIBUTENAME="+ATTRIBUTENAME);
		sb.append(",TEXTVALUE="+TEXTVALUE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row11Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];

	
			    public String PRODUCTNUMBER;

				public String getPRODUCTNUMBER () {
					return this.PRODUCTNUMBER;
				}
				
			    public String ATTRIBUTETYPENAME;

				public String getATTRIBUTETYPENAME () {
					return this.ATTRIBUTETYPENAME;
				}
				
			    public String ATTRIBUTENAME;

				public String getATTRIBUTENAME () {
					return this.ATTRIBUTENAME;
				}
				
			    public String TEXTVALUE;

				public String getTEXTVALUE () {
					return this.TEXTVALUE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS) {

        	try {

        		int length = 0;
		
					this.PRODUCTNUMBER = readString(dis);
					
					this.ATTRIBUTETYPENAME = readString(dis);
					
					this.ATTRIBUTENAME = readString(dis);
					
					this.TEXTVALUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTNUMBER,dos);
					
					// String
				
						writeString(this.ATTRIBUTETYPENAME,dos);
					
					// String
				
						writeString(this.ATTRIBUTENAME,dos);
					
					// String
				
						writeString(this.TEXTVALUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTNUMBER="+PRODUCTNUMBER);
		sb.append(",ATTRIBUTETYPENAME="+ATTRIBUTETYPENAME);
		sb.append(",ATTRIBUTENAME="+ATTRIBUTENAME);
		sb.append(",TEXTVALUE="+TEXTVALUE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row12Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row15Struct implements routines.system.IPersistableRow<row15Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];

	
			    public String PRODUCTNUMBER;

				public String getPRODUCTNUMBER () {
					return this.PRODUCTNUMBER;
				}
				
			    public String ATTRIBUTETYPENAME;

				public String getATTRIBUTETYPENAME () {
					return this.ATTRIBUTETYPENAME;
				}
				
			    public String ATTRIBUTENAME;

				public String getATTRIBUTENAME () {
					return this.ATTRIBUTENAME;
				}
				
			    public String TEXTVALUE;

				public String getTEXTVALUE () {
					return this.TEXTVALUE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS) {

        	try {

        		int length = 0;
		
					this.PRODUCTNUMBER = readString(dis);
					
					this.ATTRIBUTETYPENAME = readString(dis);
					
					this.ATTRIBUTENAME = readString(dis);
					
					this.TEXTVALUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTNUMBER,dos);
					
					// String
				
						writeString(this.ATTRIBUTETYPENAME,dos);
					
					// String
				
						writeString(this.ATTRIBUTENAME,dos);
					
					// String
				
						writeString(this.TEXTVALUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTNUMBER="+PRODUCTNUMBER);
		sb.append(",ATTRIBUTETYPENAME="+ATTRIBUTETYPENAME);
		sb.append(",ATTRIBUTENAME="+ATTRIBUTENAME);
		sb.append(",TEXTVALUE="+TEXTVALUE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row15Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row17Struct implements routines.system.IPersistableRow<row17Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];

	
			    public String PRODUCTNUMBER;

				public String getPRODUCTNUMBER () {
					return this.PRODUCTNUMBER;
				}
				
			    public String ATTRIBUTETYPENAME;

				public String getATTRIBUTETYPENAME () {
					return this.ATTRIBUTETYPENAME;
				}
				
			    public String ATTRIBUTENAME;

				public String getATTRIBUTENAME () {
					return this.ATTRIBUTENAME;
				}
				
			    public String TEXTVALUE;

				public String getTEXTVALUE () {
					return this.TEXTVALUE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS) {

        	try {

        		int length = 0;
		
					this.PRODUCTNUMBER = readString(dis);
					
					this.ATTRIBUTETYPENAME = readString(dis);
					
					this.ATTRIBUTENAME = readString(dis);
					
					this.TEXTVALUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTNUMBER,dos);
					
					// String
				
						writeString(this.ATTRIBUTETYPENAME,dos);
					
					// String
				
						writeString(this.ATTRIBUTENAME,dos);
					
					// String
				
						writeString(this.TEXTVALUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTNUMBER="+PRODUCTNUMBER);
		sb.append(",ATTRIBUTETYPENAME="+ATTRIBUTETYPENAME);
		sb.append(",ATTRIBUTENAME="+ATTRIBUTENAME);
		sb.append(",TEXTVALUE="+TEXTVALUE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row17Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row19Struct implements routines.system.IPersistableRow<row19Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];

	
			    public String PRODUCTNUMBER;

				public String getPRODUCTNUMBER () {
					return this.PRODUCTNUMBER;
				}
				
			    public String ATTRIBUTETYPENAME;

				public String getATTRIBUTETYPENAME () {
					return this.ATTRIBUTETYPENAME;
				}
				
			    public String ATTRIBUTENAME;

				public String getATTRIBUTENAME () {
					return this.ATTRIBUTENAME;
				}
				
			    public String TEXTVALUE;

				public String getTEXTVALUE () {
					return this.TEXTVALUE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS) {

        	try {

        		int length = 0;
		
					this.PRODUCTNUMBER = readString(dis);
					
					this.ATTRIBUTETYPENAME = readString(dis);
					
					this.ATTRIBUTENAME = readString(dis);
					
					this.TEXTVALUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTNUMBER,dos);
					
					// String
				
						writeString(this.ATTRIBUTETYPENAME,dos);
					
					// String
				
						writeString(this.ATTRIBUTENAME,dos);
					
					// String
				
						writeString(this.TEXTVALUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTNUMBER="+PRODUCTNUMBER);
		sb.append(",ATTRIBUTETYPENAME="+ATTRIBUTETYPENAME);
		sb.append(",ATTRIBUTENAME="+ATTRIBUTENAME);
		sb.append(",TEXTVALUE="+TEXTVALUE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row19Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row21Struct implements routines.system.IPersistableRow<row21Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];

	
			    public String PRODUCTNUMBER;

				public String getPRODUCTNUMBER () {
					return this.PRODUCTNUMBER;
				}
				
			    public String ATTRIBUTETYPENAME;

				public String getATTRIBUTETYPENAME () {
					return this.ATTRIBUTETYPENAME;
				}
				
			    public String ATTRIBUTENAME;

				public String getATTRIBUTENAME () {
					return this.ATTRIBUTENAME;
				}
				
			    public String TEXTVALUE;

				public String getTEXTVALUE () {
					return this.TEXTVALUE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS) {

        	try {

        		int length = 0;
		
					this.PRODUCTNUMBER = readString(dis);
					
					this.ATTRIBUTETYPENAME = readString(dis);
					
					this.ATTRIBUTENAME = readString(dis);
					
					this.TEXTVALUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTNUMBER,dos);
					
					// String
				
						writeString(this.ATTRIBUTETYPENAME,dos);
					
					// String
				
						writeString(this.ATTRIBUTENAME,dos);
					
					// String
				
						writeString(this.TEXTVALUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTNUMBER="+PRODUCTNUMBER);
		sb.append(",ATTRIBUTETYPENAME="+ATTRIBUTETYPENAME);
		sb.append(",ATTRIBUTENAME="+ATTRIBUTENAME);
		sb.append(",TEXTVALUE="+TEXTVALUE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row21Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row23Struct implements routines.system.IPersistableRow<row23Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];

	
			    public String PRODUCTNUMBER;

				public String getPRODUCTNUMBER () {
					return this.PRODUCTNUMBER;
				}
				
			    public String ATTRIBUTETYPENAME;

				public String getATTRIBUTETYPENAME () {
					return this.ATTRIBUTETYPENAME;
				}
				
			    public String ATTRIBUTENAME;

				public String getATTRIBUTENAME () {
					return this.ATTRIBUTENAME;
				}
				
			    public String TEXTVALUE;

				public String getTEXTVALUE () {
					return this.TEXTVALUE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS) {

        	try {

        		int length = 0;
		
					this.PRODUCTNUMBER = readString(dis);
					
					this.ATTRIBUTETYPENAME = readString(dis);
					
					this.ATTRIBUTENAME = readString(dis);
					
					this.TEXTVALUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTNUMBER,dos);
					
					// String
				
						writeString(this.ATTRIBUTETYPENAME,dos);
					
					// String
				
						writeString(this.ATTRIBUTENAME,dos);
					
					// String
				
						writeString(this.TEXTVALUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTNUMBER="+PRODUCTNUMBER);
		sb.append(",ATTRIBUTETYPENAME="+ATTRIBUTETYPENAME);
		sb.append(",ATTRIBUTENAME="+ATTRIBUTENAME);
		sb.append(",TEXTVALUE="+TEXTVALUE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row23Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row26Struct implements routines.system.IPersistableRow<row26Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];

	
			    public String PRODUCTNUMBER;

				public String getPRODUCTNUMBER () {
					return this.PRODUCTNUMBER;
				}
				
			    public String ATTRIBUTETYPENAME;

				public String getATTRIBUTETYPENAME () {
					return this.ATTRIBUTETYPENAME;
				}
				
			    public String ATTRIBUTENAME;

				public String getATTRIBUTENAME () {
					return this.ATTRIBUTENAME;
				}
				
			    public String TEXTVALUE;

				public String getTEXTVALUE () {
					return this.TEXTVALUE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS) {

        	try {

        		int length = 0;
		
					this.PRODUCTNUMBER = readString(dis);
					
					this.ATTRIBUTETYPENAME = readString(dis);
					
					this.ATTRIBUTENAME = readString(dis);
					
					this.TEXTVALUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTNUMBER,dos);
					
					// String
				
						writeString(this.ATTRIBUTETYPENAME,dos);
					
					// String
				
						writeString(this.ATTRIBUTENAME,dos);
					
					// String
				
						writeString(this.TEXTVALUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTNUMBER="+PRODUCTNUMBER);
		sb.append(",ATTRIBUTETYPENAME="+ATTRIBUTETYPENAME);
		sb.append(",ATTRIBUTENAME="+ATTRIBUTENAME);
		sb.append(",TEXTVALUE="+TEXTVALUE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row26Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row35Struct implements routines.system.IPersistableRow<row35Struct> {
    final static byte[] commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];
    static byte[] commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[0];

	
			    public String PRODUCTNUMBER;

				public String getPRODUCTNUMBER () {
					return this.PRODUCTNUMBER;
				}
				
			    public String ATTRIBUTETYPENAME;

				public String getATTRIBUTETYPENAME () {
					return this.ATTRIBUTETYPENAME;
				}
				
			    public String ATTRIBUTENAME;

				public String getATTRIBUTENAME () {
					return this.ATTRIBUTENAME;
				}
				
			    public String TEXTVALUE;

				public String getTEXTVALUE () {
					return this.TEXTVALUE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length) {
				if(length < 1024 && commonByteArray_DEV_EXTRACT_FOR_DYNAMICS.length == 0) {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[1024];
				} else {
   					commonByteArray_DEV_EXTRACT_FOR_DYNAMICS = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length);
			strReturn = new String(commonByteArray_DEV_EXTRACT_FOR_DYNAMICS, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_EXTRACT_FOR_DYNAMICS) {

        	try {

        		int length = 0;
		
					this.PRODUCTNUMBER = readString(dis);
					
					this.ATTRIBUTETYPENAME = readString(dis);
					
					this.ATTRIBUTENAME = readString(dis);
					
					this.TEXTVALUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRODUCTNUMBER,dos);
					
					// String
				
						writeString(this.ATTRIBUTETYPENAME,dos);
					
					// String
				
						writeString(this.ATTRIBUTENAME,dos);
					
					// String
				
						writeString(this.TEXTVALUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRODUCTNUMBER="+PRODUCTNUMBER);
		sb.append(",ATTRIBUTETYPENAME="+ATTRIBUTETYPENAME);
		sb.append(",ATTRIBUTENAME="+ATTRIBUTENAME);
		sb.append(",TEXTVALUE="+TEXTVALUE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row35Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tHashInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row11Struct row11 = new row11Struct();

		row12Struct row12 = new row12Struct();

		row15Struct row15 = new row15Struct();

		row17Struct row17 = new row17Struct();

		row19Struct row19 = new row19Struct();

		row21Struct row21 = new row21Struct();

		row23Struct row23 = new row23Struct();

		row26Struct row26 = new row26Struct();

		row35Struct row35 = new row35Struct();

			row13Struct row13 = new row13Struct();




	
	/**
	 * [tFileOutputExcel_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_3", false);
		start_Hash.put("tFileOutputExcel_3", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row13");
					}
				
		int tos_count_tFileOutputExcel_3 = 0;
		


		int columnIndex_tFileOutputExcel_3 = 0;
		
		String fileName_tFileOutputExcel_3=context.ExtractPath + "Product attribute values V2.xlsx";
		int nb_line_tFileOutputExcel_3 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_3 = new org.talend.ExcelTool();
		
		xlsxTool_tFileOutputExcel_3.setSheet("Product attribute values V2");
		xlsxTool_tFileOutputExcel_3.setAppend(false,true);
		xlsxTool_tFileOutputExcel_3.setRecalculateFormula(false);
		xlsxTool_tFileOutputExcel_3.setXY(false,0,10,false);
		
		java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_3 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap.get("concurrentHashMap");
		java.lang.Object lockObj_tFileOutputExcel_3 = chm_tFileOutputExcel_3.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_3", k -> new Object());
		synchronized (lockObj_tFileOutputExcel_3) {
			
				xlsxTool_tFileOutputExcel_3.prepareXlsxFile(fileName_tFileOutputExcel_3);
			
		}
		
		xlsxTool_tFileOutputExcel_3.setFont("");
		
		if (xlsxTool_tFileOutputExcel_3.getStartRow() == 0){
		
		xlsxTool_tFileOutputExcel_3.addRow();
		
		xlsxTool_tFileOutputExcel_3.addCellValue("PRODUCTNUMBER");
		
		xlsxTool_tFileOutputExcel_3.addCellValue("ATTRIBUTETYPENAME");
		
		xlsxTool_tFileOutputExcel_3.addCellValue("ATTRIBUTENAME");
		
		xlsxTool_tFileOutputExcel_3.addCellValue("TEXTVALUE");
		
		nb_line_tFileOutputExcel_3++; 
		
	}
		

 



/**
 * [tFileOutputExcel_3 begin ] stop
 */



	
	/**
	 * [tUnite_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tUnite_1", false);
		start_Hash.put("tUnite_1", System.currentTimeMillis());
		
	
	currentComponent="tUnite_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row23","row15","row19","row21","row26","row35","row12","row11","row17");
					}
				
		int tos_count_tUnite_1 = 0;
		

int nb_line_tUnite_1 = 0;

 



/**
 * [tUnite_1 begin ] stop
 */
	
	/**
	 * [tHashInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_1", false);
		start_Hash.put("tHashInput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_1";

	
		int tos_count_tHashInput_1 = 0;
		


int nb_line_tHashInput_1 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<Main1Struct> tHashFile_tHashInput_1 = mf_tHashInput_1.getAdvancedMemoryHashFile("tHashFile_EXTRACT_FOR_DYNAMICS_" + pid +"_tHashOutput_1");
if(tHashFile_tHashInput_1==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<Main1Struct> iterator_tHashInput_1 = tHashFile_tHashInput_1.iterator();
while (iterator_tHashInput_1.hasNext()) {
    Main1Struct next_tHashInput_1 = iterator_tHashInput_1.next();

	row11.PRODUCTNUMBER = next_tHashInput_1.PRODUCTNUMBER;
	row11.ATTRIBUTETYPENAME = next_tHashInput_1.ATTRIBUTETYPENAME;
	row11.ATTRIBUTENAME = next_tHashInput_1.ATTRIBUTENAME;
	row11.TEXTVALUE = next_tHashInput_1.TEXTVALUE;
 



/**
 * [tHashInput_1 begin ] stop
 */
	
	/**
	 * [tHashInput_1 main ] start
	 */

	

	
	
	currentComponent="tHashInput_1";

	

 


	tos_count_tHashInput_1++;

/**
 * [tHashInput_1 main ] stop
 */
	
	/**
	 * [tHashInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_1";

	

 



/**
 * [tHashInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_1 main ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1,"row11");
						}
						
//////////
 

// for output
			row13 = new row13Struct();
								
			row13.PRODUCTNUMBER = row11.PRODUCTNUMBER;								
			row13.ATTRIBUTETYPENAME = row11.ATTRIBUTETYPENAME;								
			row13.ATTRIBUTENAME = row11.ATTRIBUTENAME;								
			row13.TEXTVALUE = row11.TEXTVALUE;			

			nb_line_tUnite_1++;

//////////
 


	tos_count_tUnite_1++;

/**
 * [tUnite_1 main ] stop
 */
	
	/**
	 * [tUnite_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputExcel_3 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row13");
					}
					

				xlsxTool_tFileOutputExcel_3.addRow();
									   				
	    				if(row13.PRODUCTNUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(row13.PRODUCTNUMBER));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(row13.ATTRIBUTETYPENAME != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(row13.ATTRIBUTETYPENAME));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(row13.ATTRIBUTENAME != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(row13.ATTRIBUTENAME));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(row13.TEXTVALUE != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(row13.TEXTVALUE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_3++;
				
 


	tos_count_tFileOutputExcel_3++;

/**
 * [tFileOutputExcel_3 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";

	

 



/**
 * [tFileOutputExcel_3 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";

	

 



/**
 * [tFileOutputExcel_3 process_data_end ] stop
 */



	
	/**
	 * [tUnite_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";

	

 



/**
 * [tHashInput_1 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_1 end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";

	
    

		
			nb_line_tHashInput_1++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_EXTRACT_FOR_DYNAMICS_" + pid +"_tHashOutput_1");
	


	globalMap.put("tHashInput_1_NB_LINE", nb_line_tHashInput_1);       

 

ok_Hash.put("tHashInput_1", true);
end_Hash.put("tHashInput_1", System.currentTimeMillis());




/**
 * [tHashInput_1 end ] stop
 */
	
	/**
	 * [tHashInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_2", false);
		start_Hash.put("tHashInput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_2";

	
		int tos_count_tHashInput_2 = 0;
		


int nb_line_tHashInput_2 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row10Struct> tHashFile_tHashInput_2 = mf_tHashInput_2.getAdvancedMemoryHashFile("tHashFile_EXTRACT_FOR_DYNAMICS_" + pid +"_tHashOutput_2");
if(tHashFile_tHashInput_2==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row10Struct> iterator_tHashInput_2 = tHashFile_tHashInput_2.iterator();
while (iterator_tHashInput_2.hasNext()) {
    row10Struct next_tHashInput_2 = iterator_tHashInput_2.next();

	row12.PRODUCTNUMBER = next_tHashInput_2.PRODUCTNUMBER;
	row12.ATTRIBUTETYPENAME = next_tHashInput_2.ATTRIBUTETYPENAME;
	row12.ATTRIBUTENAME = next_tHashInput_2.ATTRIBUTENAME;
	row12.TEXTVALUE = next_tHashInput_2.TEXTVALUE;
 



/**
 * [tHashInput_2 begin ] stop
 */
	
	/**
	 * [tHashInput_2 main ] start
	 */

	

	
	
	currentComponent="tHashInput_2";

	

 


	tos_count_tHashInput_2++;

/**
 * [tHashInput_2 main ] stop
 */
	
	/**
	 * [tHashInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_2";

	

 



/**
 * [tHashInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_1 main ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1,"row12");
						}
						
//////////
 

// for output
			row13 = new row13Struct();
								
			row13.PRODUCTNUMBER = row12.PRODUCTNUMBER;								
			row13.ATTRIBUTETYPENAME = row12.ATTRIBUTETYPENAME;								
			row13.ATTRIBUTENAME = row12.ATTRIBUTENAME;								
			row13.TEXTVALUE = row12.TEXTVALUE;			

			nb_line_tUnite_1++;

//////////
 


	tos_count_tUnite_1++;

/**
 * [tUnite_1 main ] stop
 */
	
	/**
	 * [tUnite_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputExcel_3 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row13");
					}
					

				xlsxTool_tFileOutputExcel_3.addRow();
									   				
	    				if(row13.PRODUCTNUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(row13.PRODUCTNUMBER));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(row13.ATTRIBUTETYPENAME != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(row13.ATTRIBUTETYPENAME));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(row13.ATTRIBUTENAME != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(row13.ATTRIBUTENAME));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(row13.TEXTVALUE != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(row13.TEXTVALUE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_3++;
				
 


	tos_count_tFileOutputExcel_3++;

/**
 * [tFileOutputExcel_3 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";

	

 



/**
 * [tFileOutputExcel_3 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";

	

 



/**
 * [tFileOutputExcel_3 process_data_end ] stop
 */



	
	/**
	 * [tUnite_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";

	

 



/**
 * [tHashInput_2 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_2 end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";

	
    

		
			nb_line_tHashInput_2++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_EXTRACT_FOR_DYNAMICS_" + pid +"_tHashOutput_2");
	


	globalMap.put("tHashInput_2_NB_LINE", nb_line_tHashInput_2);       

 

ok_Hash.put("tHashInput_2", true);
end_Hash.put("tHashInput_2", System.currentTimeMillis());




/**
 * [tHashInput_2 end ] stop
 */
	
	/**
	 * [tHashInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_3", false);
		start_Hash.put("tHashInput_3", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_3";

	
		int tos_count_tHashInput_3 = 0;
		


int nb_line_tHashInput_3 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_3=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row14Struct> tHashFile_tHashInput_3 = mf_tHashInput_3.getAdvancedMemoryHashFile("tHashFile_EXTRACT_FOR_DYNAMICS_" + pid +"_tHashOutput_3");
if(tHashFile_tHashInput_3==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row14Struct> iterator_tHashInput_3 = tHashFile_tHashInput_3.iterator();
while (iterator_tHashInput_3.hasNext()) {
    row14Struct next_tHashInput_3 = iterator_tHashInput_3.next();

	row15.PRODUCTNUMBER = next_tHashInput_3.PRODUCTNUMBER;
	row15.ATTRIBUTETYPENAME = next_tHashInput_3.ATTRIBUTETYPENAME;
	row15.ATTRIBUTENAME = next_tHashInput_3.ATTRIBUTENAME;
	row15.TEXTVALUE = next_tHashInput_3.TEXTVALUE;
 



/**
 * [tHashInput_3 begin ] stop
 */
	
	/**
	 * [tHashInput_3 main ] start
	 */

	

	
	
	currentComponent="tHashInput_3";

	

 


	tos_count_tHashInput_3++;

/**
 * [tHashInput_3 main ] stop
 */
	
	/**
	 * [tHashInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_3";

	

 



/**
 * [tHashInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_1 main ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1,"row15");
						}
						
//////////
 

// for output
			row13 = new row13Struct();
								
			row13.PRODUCTNUMBER = row15.PRODUCTNUMBER;								
			row13.ATTRIBUTETYPENAME = row15.ATTRIBUTETYPENAME;								
			row13.ATTRIBUTENAME = row15.ATTRIBUTENAME;								
			row13.TEXTVALUE = row15.TEXTVALUE;			

			nb_line_tUnite_1++;

//////////
 


	tos_count_tUnite_1++;

/**
 * [tUnite_1 main ] stop
 */
	
	/**
	 * [tUnite_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputExcel_3 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row13");
					}
					

				xlsxTool_tFileOutputExcel_3.addRow();
									   				
	    				if(row13.PRODUCTNUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(row13.PRODUCTNUMBER));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(row13.ATTRIBUTETYPENAME != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(row13.ATTRIBUTETYPENAME));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(row13.ATTRIBUTENAME != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(row13.ATTRIBUTENAME));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(row13.TEXTVALUE != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(row13.TEXTVALUE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_3++;
				
 


	tos_count_tFileOutputExcel_3++;

/**
 * [tFileOutputExcel_3 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";

	

 



/**
 * [tFileOutputExcel_3 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";

	

 



/**
 * [tFileOutputExcel_3 process_data_end ] stop
 */



	
	/**
	 * [tUnite_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_3";

	

 



/**
 * [tHashInput_3 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_3 end ] start
	 */

	

	
	
	currentComponent="tHashInput_3";

	
    

		
			nb_line_tHashInput_3++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_EXTRACT_FOR_DYNAMICS_" + pid +"_tHashOutput_3");
	


	globalMap.put("tHashInput_3_NB_LINE", nb_line_tHashInput_3);       

 

ok_Hash.put("tHashInput_3", true);
end_Hash.put("tHashInput_3", System.currentTimeMillis());




/**
 * [tHashInput_3 end ] stop
 */
	
	/**
	 * [tHashInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_4", false);
		start_Hash.put("tHashInput_4", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_4";

	
		int tos_count_tHashInput_4 = 0;
		


int nb_line_tHashInput_4 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_4=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row16Struct> tHashFile_tHashInput_4 = mf_tHashInput_4.getAdvancedMemoryHashFile("tHashFile_EXTRACT_FOR_DYNAMICS_" + pid +"_tHashOutput_4");
if(tHashFile_tHashInput_4==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row16Struct> iterator_tHashInput_4 = tHashFile_tHashInput_4.iterator();
while (iterator_tHashInput_4.hasNext()) {
    row16Struct next_tHashInput_4 = iterator_tHashInput_4.next();

	row17.PRODUCTNUMBER = next_tHashInput_4.PRODUCTNUMBER;
	row17.ATTRIBUTETYPENAME = next_tHashInput_4.ATTRIBUTETYPENAME;
	row17.ATTRIBUTENAME = next_tHashInput_4.ATTRIBUTENAME;
	row17.TEXTVALUE = next_tHashInput_4.TEXTVALUE;
 



/**
 * [tHashInput_4 begin ] stop
 */
	
	/**
	 * [tHashInput_4 main ] start
	 */

	

	
	
	currentComponent="tHashInput_4";

	

 


	tos_count_tHashInput_4++;

/**
 * [tHashInput_4 main ] stop
 */
	
	/**
	 * [tHashInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_4";

	

 



/**
 * [tHashInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_1 main ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1,"row17");
						}
						
//////////
 

// for output
			row13 = new row13Struct();
								
			row13.PRODUCTNUMBER = row17.PRODUCTNUMBER;								
			row13.ATTRIBUTETYPENAME = row17.ATTRIBUTETYPENAME;								
			row13.ATTRIBUTENAME = row17.ATTRIBUTENAME;								
			row13.TEXTVALUE = row17.TEXTVALUE;			

			nb_line_tUnite_1++;

//////////
 


	tos_count_tUnite_1++;

/**
 * [tUnite_1 main ] stop
 */
	
	/**
	 * [tUnite_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputExcel_3 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row13");
					}
					

				xlsxTool_tFileOutputExcel_3.addRow();
									   				
	    				if(row13.PRODUCTNUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(row13.PRODUCTNUMBER));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(row13.ATTRIBUTETYPENAME != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(row13.ATTRIBUTETYPENAME));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(row13.ATTRIBUTENAME != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(row13.ATTRIBUTENAME));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(row13.TEXTVALUE != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(row13.TEXTVALUE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_3++;
				
 


	tos_count_tFileOutputExcel_3++;

/**
 * [tFileOutputExcel_3 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";

	

 



/**
 * [tFileOutputExcel_3 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";

	

 



/**
 * [tFileOutputExcel_3 process_data_end ] stop
 */



	
	/**
	 * [tUnite_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_4";

	

 



/**
 * [tHashInput_4 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_4 end ] start
	 */

	

	
	
	currentComponent="tHashInput_4";

	
    

		
			nb_line_tHashInput_4++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_EXTRACT_FOR_DYNAMICS_" + pid +"_tHashOutput_4");
	


	globalMap.put("tHashInput_4_NB_LINE", nb_line_tHashInput_4);       

 

ok_Hash.put("tHashInput_4", true);
end_Hash.put("tHashInput_4", System.currentTimeMillis());




/**
 * [tHashInput_4 end ] stop
 */
	
	/**
	 * [tHashInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_5", false);
		start_Hash.put("tHashInput_5", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_5";

	
		int tos_count_tHashInput_5 = 0;
		


int nb_line_tHashInput_5 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_5=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row18Struct> tHashFile_tHashInput_5 = mf_tHashInput_5.getAdvancedMemoryHashFile("tHashFile_EXTRACT_FOR_DYNAMICS_" + pid +"_tHashOutput_5");
if(tHashFile_tHashInput_5==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row18Struct> iterator_tHashInput_5 = tHashFile_tHashInput_5.iterator();
while (iterator_tHashInput_5.hasNext()) {
    row18Struct next_tHashInput_5 = iterator_tHashInput_5.next();

	row19.PRODUCTNUMBER = next_tHashInput_5.PRODUCTNUMBER;
	row19.ATTRIBUTETYPENAME = next_tHashInput_5.ATTRIBUTETYPENAME;
	row19.ATTRIBUTENAME = next_tHashInput_5.ATTRIBUTENAME;
	row19.TEXTVALUE = next_tHashInput_5.TEXTVALUE;
 



/**
 * [tHashInput_5 begin ] stop
 */
	
	/**
	 * [tHashInput_5 main ] start
	 */

	

	
	
	currentComponent="tHashInput_5";

	

 


	tos_count_tHashInput_5++;

/**
 * [tHashInput_5 main ] stop
 */
	
	/**
	 * [tHashInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_5";

	

 



/**
 * [tHashInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_1 main ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1,"row19");
						}
						
//////////
 

// for output
			row13 = new row13Struct();
								
			row13.PRODUCTNUMBER = row19.PRODUCTNUMBER;								
			row13.ATTRIBUTETYPENAME = row19.ATTRIBUTETYPENAME;								
			row13.ATTRIBUTENAME = row19.ATTRIBUTENAME;								
			row13.TEXTVALUE = row19.TEXTVALUE;			

			nb_line_tUnite_1++;

//////////
 


	tos_count_tUnite_1++;

/**
 * [tUnite_1 main ] stop
 */
	
	/**
	 * [tUnite_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputExcel_3 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row13");
					}
					

				xlsxTool_tFileOutputExcel_3.addRow();
									   				
	    				if(row13.PRODUCTNUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(row13.PRODUCTNUMBER));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(row13.ATTRIBUTETYPENAME != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(row13.ATTRIBUTETYPENAME));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(row13.ATTRIBUTENAME != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(row13.ATTRIBUTENAME));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(row13.TEXTVALUE != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(row13.TEXTVALUE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_3++;
				
 


	tos_count_tFileOutputExcel_3++;

/**
 * [tFileOutputExcel_3 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";

	

 



/**
 * [tFileOutputExcel_3 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";

	

 



/**
 * [tFileOutputExcel_3 process_data_end ] stop
 */



	
	/**
	 * [tUnite_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_5";

	

 



/**
 * [tHashInput_5 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_5 end ] start
	 */

	

	
	
	currentComponent="tHashInput_5";

	
    

		
			nb_line_tHashInput_5++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_EXTRACT_FOR_DYNAMICS_" + pid +"_tHashOutput_5");
	


	globalMap.put("tHashInput_5_NB_LINE", nb_line_tHashInput_5);       

 

ok_Hash.put("tHashInput_5", true);
end_Hash.put("tHashInput_5", System.currentTimeMillis());




/**
 * [tHashInput_5 end ] stop
 */
	
	/**
	 * [tHashInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_6", false);
		start_Hash.put("tHashInput_6", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_6";

	
		int tos_count_tHashInput_6 = 0;
		


int nb_line_tHashInput_6 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_6=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row20Struct> tHashFile_tHashInput_6 = mf_tHashInput_6.getAdvancedMemoryHashFile("tHashFile_EXTRACT_FOR_DYNAMICS_" + pid +"_tHashOutput_6");
if(tHashFile_tHashInput_6==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row20Struct> iterator_tHashInput_6 = tHashFile_tHashInput_6.iterator();
while (iterator_tHashInput_6.hasNext()) {
    row20Struct next_tHashInput_6 = iterator_tHashInput_6.next();

	row21.PRODUCTNUMBER = next_tHashInput_6.PRODUCTNUMBER;
	row21.ATTRIBUTETYPENAME = next_tHashInput_6.ATTRIBUTETYPENAME;
	row21.ATTRIBUTENAME = next_tHashInput_6.ATTRIBUTENAME;
	row21.TEXTVALUE = next_tHashInput_6.TEXTVALUE;
 



/**
 * [tHashInput_6 begin ] stop
 */
	
	/**
	 * [tHashInput_6 main ] start
	 */

	

	
	
	currentComponent="tHashInput_6";

	

 


	tos_count_tHashInput_6++;

/**
 * [tHashInput_6 main ] stop
 */
	
	/**
	 * [tHashInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_6";

	

 



/**
 * [tHashInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_1 main ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1,"row21");
						}
						
//////////
 

// for output
			row13 = new row13Struct();
								
			row13.PRODUCTNUMBER = row21.PRODUCTNUMBER;								
			row13.ATTRIBUTETYPENAME = row21.ATTRIBUTETYPENAME;								
			row13.ATTRIBUTENAME = row21.ATTRIBUTENAME;								
			row13.TEXTVALUE = row21.TEXTVALUE;			

			nb_line_tUnite_1++;

//////////
 


	tos_count_tUnite_1++;

/**
 * [tUnite_1 main ] stop
 */
	
	/**
	 * [tUnite_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputExcel_3 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row13");
					}
					

				xlsxTool_tFileOutputExcel_3.addRow();
									   				
	    				if(row13.PRODUCTNUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(row13.PRODUCTNUMBER));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(row13.ATTRIBUTETYPENAME != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(row13.ATTRIBUTETYPENAME));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(row13.ATTRIBUTENAME != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(row13.ATTRIBUTENAME));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(row13.TEXTVALUE != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(row13.TEXTVALUE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_3++;
				
 


	tos_count_tFileOutputExcel_3++;

/**
 * [tFileOutputExcel_3 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";

	

 



/**
 * [tFileOutputExcel_3 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";

	

 



/**
 * [tFileOutputExcel_3 process_data_end ] stop
 */



	
	/**
	 * [tUnite_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_6";

	

 



/**
 * [tHashInput_6 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_6 end ] start
	 */

	

	
	
	currentComponent="tHashInput_6";

	
    

		
			nb_line_tHashInput_6++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_EXTRACT_FOR_DYNAMICS_" + pid +"_tHashOutput_6");
	


	globalMap.put("tHashInput_6_NB_LINE", nb_line_tHashInput_6);       

 

ok_Hash.put("tHashInput_6", true);
end_Hash.put("tHashInput_6", System.currentTimeMillis());




/**
 * [tHashInput_6 end ] stop
 */
	
	/**
	 * [tHashInput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_7", false);
		start_Hash.put("tHashInput_7", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_7";

	
		int tos_count_tHashInput_7 = 0;
		


int nb_line_tHashInput_7 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_7=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row22Struct> tHashFile_tHashInput_7 = mf_tHashInput_7.getAdvancedMemoryHashFile("tHashFile_EXTRACT_FOR_DYNAMICS_" + pid +"_tHashOutput_7");
if(tHashFile_tHashInput_7==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row22Struct> iterator_tHashInput_7 = tHashFile_tHashInput_7.iterator();
while (iterator_tHashInput_7.hasNext()) {
    row22Struct next_tHashInput_7 = iterator_tHashInput_7.next();

	row23.PRODUCTNUMBER = next_tHashInput_7.PRODUCTNUMBER;
	row23.ATTRIBUTETYPENAME = next_tHashInput_7.ATTRIBUTETYPENAME;
	row23.ATTRIBUTENAME = next_tHashInput_7.ATTRIBUTENAME;
	row23.TEXTVALUE = next_tHashInput_7.TEXTVALUE;
 



/**
 * [tHashInput_7 begin ] stop
 */
	
	/**
	 * [tHashInput_7 main ] start
	 */

	

	
	
	currentComponent="tHashInput_7";

	

 


	tos_count_tHashInput_7++;

/**
 * [tHashInput_7 main ] stop
 */
	
	/**
	 * [tHashInput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_7";

	

 



/**
 * [tHashInput_7 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_1 main ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1,"row23");
						}
						
//////////
 

// for output
			row13 = new row13Struct();
								
			row13.PRODUCTNUMBER = row23.PRODUCTNUMBER;								
			row13.ATTRIBUTETYPENAME = row23.ATTRIBUTETYPENAME;								
			row13.ATTRIBUTENAME = row23.ATTRIBUTENAME;								
			row13.TEXTVALUE = row23.TEXTVALUE;			

			nb_line_tUnite_1++;

//////////
 


	tos_count_tUnite_1++;

/**
 * [tUnite_1 main ] stop
 */
	
	/**
	 * [tUnite_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputExcel_3 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row13");
					}
					

				xlsxTool_tFileOutputExcel_3.addRow();
									   				
	    				if(row13.PRODUCTNUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(row13.PRODUCTNUMBER));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(row13.ATTRIBUTETYPENAME != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(row13.ATTRIBUTETYPENAME));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(row13.ATTRIBUTENAME != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(row13.ATTRIBUTENAME));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(row13.TEXTVALUE != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(row13.TEXTVALUE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_3++;
				
 


	tos_count_tFileOutputExcel_3++;

/**
 * [tFileOutputExcel_3 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";

	

 



/**
 * [tFileOutputExcel_3 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";

	

 



/**
 * [tFileOutputExcel_3 process_data_end ] stop
 */



	
	/**
	 * [tUnite_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_7";

	

 



/**
 * [tHashInput_7 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_7 end ] start
	 */

	

	
	
	currentComponent="tHashInput_7";

	
    

		
			nb_line_tHashInput_7++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_EXTRACT_FOR_DYNAMICS_" + pid +"_tHashOutput_7");
	


	globalMap.put("tHashInput_7_NB_LINE", nb_line_tHashInput_7);       

 

ok_Hash.put("tHashInput_7", true);
end_Hash.put("tHashInput_7", System.currentTimeMillis());




/**
 * [tHashInput_7 end ] stop
 */
	
	/**
	 * [tHashInput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_8", false);
		start_Hash.put("tHashInput_8", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_8";

	
		int tos_count_tHashInput_8 = 0;
		


int nb_line_tHashInput_8 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_8=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row25Struct> tHashFile_tHashInput_8 = mf_tHashInput_8.getAdvancedMemoryHashFile("tHashFile_EXTRACT_FOR_DYNAMICS_" + pid +"_tHashOutput_8");
if(tHashFile_tHashInput_8==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row25Struct> iterator_tHashInput_8 = tHashFile_tHashInput_8.iterator();
while (iterator_tHashInput_8.hasNext()) {
    row25Struct next_tHashInput_8 = iterator_tHashInput_8.next();

	row26.PRODUCTNUMBER = next_tHashInput_8.PRODUCTNUMBER;
	row26.ATTRIBUTETYPENAME = next_tHashInput_8.ATTRIBUTETYPENAME;
	row26.ATTRIBUTENAME = next_tHashInput_8.ATTRIBUTENAME;
	row26.TEXTVALUE = next_tHashInput_8.TEXTVALUE;
 



/**
 * [tHashInput_8 begin ] stop
 */
	
	/**
	 * [tHashInput_8 main ] start
	 */

	

	
	
	currentComponent="tHashInput_8";

	

 


	tos_count_tHashInput_8++;

/**
 * [tHashInput_8 main ] stop
 */
	
	/**
	 * [tHashInput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_8";

	

 



/**
 * [tHashInput_8 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_1 main ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1,"row26");
						}
						
//////////
 

// for output
			row13 = new row13Struct();
								
			row13.PRODUCTNUMBER = row26.PRODUCTNUMBER;								
			row13.ATTRIBUTETYPENAME = row26.ATTRIBUTETYPENAME;								
			row13.ATTRIBUTENAME = row26.ATTRIBUTENAME;								
			row13.TEXTVALUE = row26.TEXTVALUE;			

			nb_line_tUnite_1++;

//////////
 


	tos_count_tUnite_1++;

/**
 * [tUnite_1 main ] stop
 */
	
	/**
	 * [tUnite_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputExcel_3 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row13");
					}
					

				xlsxTool_tFileOutputExcel_3.addRow();
									   				
	    				if(row13.PRODUCTNUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(row13.PRODUCTNUMBER));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(row13.ATTRIBUTETYPENAME != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(row13.ATTRIBUTETYPENAME));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(row13.ATTRIBUTENAME != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(row13.ATTRIBUTENAME));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(row13.TEXTVALUE != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(row13.TEXTVALUE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_3++;
				
 


	tos_count_tFileOutputExcel_3++;

/**
 * [tFileOutputExcel_3 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";

	

 



/**
 * [tFileOutputExcel_3 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";

	

 



/**
 * [tFileOutputExcel_3 process_data_end ] stop
 */



	
	/**
	 * [tUnite_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_8";

	

 



/**
 * [tHashInput_8 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_8 end ] start
	 */

	

	
	
	currentComponent="tHashInput_8";

	
    

		
			nb_line_tHashInput_8++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_EXTRACT_FOR_DYNAMICS_" + pid +"_tHashOutput_8");
	


	globalMap.put("tHashInput_8_NB_LINE", nb_line_tHashInput_8);       

 

ok_Hash.put("tHashInput_8", true);
end_Hash.put("tHashInput_8", System.currentTimeMillis());




/**
 * [tHashInput_8 end ] stop
 */
	
	/**
	 * [tHashInput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_9", false);
		start_Hash.put("tHashInput_9", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_9";

	
		int tos_count_tHashInput_9 = 0;
		


int nb_line_tHashInput_9 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_9=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row34Struct> tHashFile_tHashInput_9 = mf_tHashInput_9.getAdvancedMemoryHashFile("tHashFile_EXTRACT_FOR_DYNAMICS_" + pid +"_tHashOutput_9");
if(tHashFile_tHashInput_9==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row34Struct> iterator_tHashInput_9 = tHashFile_tHashInput_9.iterator();
while (iterator_tHashInput_9.hasNext()) {
    row34Struct next_tHashInput_9 = iterator_tHashInput_9.next();

	row35.PRODUCTNUMBER = next_tHashInput_9.PRODUCTNUMBER;
	row35.ATTRIBUTETYPENAME = next_tHashInput_9.ATTRIBUTETYPENAME;
	row35.ATTRIBUTENAME = next_tHashInput_9.ATTRIBUTENAME;
	row35.TEXTVALUE = next_tHashInput_9.TEXTVALUE;
 



/**
 * [tHashInput_9 begin ] stop
 */
	
	/**
	 * [tHashInput_9 main ] start
	 */

	

	
	
	currentComponent="tHashInput_9";

	

 


	tos_count_tHashInput_9++;

/**
 * [tHashInput_9 main ] stop
 */
	
	/**
	 * [tHashInput_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_9";

	

 



/**
 * [tHashInput_9 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_1 main ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1,"row35");
						}
						
//////////
 

// for output
			row13 = new row13Struct();
								
			row13.PRODUCTNUMBER = row35.PRODUCTNUMBER;								
			row13.ATTRIBUTETYPENAME = row35.ATTRIBUTETYPENAME;								
			row13.ATTRIBUTENAME = row35.ATTRIBUTENAME;								
			row13.TEXTVALUE = row35.TEXTVALUE;			

			nb_line_tUnite_1++;

//////////
 


	tos_count_tUnite_1++;

/**
 * [tUnite_1 main ] stop
 */
	
	/**
	 * [tUnite_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputExcel_3 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row13");
					}
					

				xlsxTool_tFileOutputExcel_3.addRow();
									   				
	    				if(row13.PRODUCTNUMBER != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(row13.PRODUCTNUMBER));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(row13.ATTRIBUTETYPENAME != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(row13.ATTRIBUTETYPENAME));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(row13.ATTRIBUTENAME != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(row13.ATTRIBUTENAME));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(row13.TEXTVALUE != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(row13.TEXTVALUE));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_3++;
				
 


	tos_count_tFileOutputExcel_3++;

/**
 * [tFileOutputExcel_3 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";

	

 



/**
 * [tFileOutputExcel_3 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";

	

 



/**
 * [tFileOutputExcel_3 process_data_end ] stop
 */



	
	/**
	 * [tUnite_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_9";

	

 



/**
 * [tHashInput_9 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_9 end ] start
	 */

	

	
	
	currentComponent="tHashInput_9";

	
    

		
			nb_line_tHashInput_9++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_EXTRACT_FOR_DYNAMICS_" + pid +"_tHashOutput_9");
	


	globalMap.put("tHashInput_9_NB_LINE", nb_line_tHashInput_9);       

 

ok_Hash.put("tHashInput_9", true);
end_Hash.put("tHashInput_9", System.currentTimeMillis());




/**
 * [tHashInput_9 end ] stop
 */
	
	/**
	 * [tUnite_1 end ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

globalMap.put("tUnite_1_NB_LINE", nb_line_tUnite_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row23","row15","row19","row21","row26","row35","row12","row11","row17");
			  	}
			  	
 

ok_Hash.put("tUnite_1", true);
end_Hash.put("tUnite_1", System.currentTimeMillis());




/**
 * [tUnite_1 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_3 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";

	

	
	
	
			xlsxTool_tFileOutputExcel_3.writeExcel(fileName_tFileOutputExcel_3,true);
	
		
			nb_line_tFileOutputExcel_3 = nb_line_tFileOutputExcel_3 -1;
		
		globalMap.put("tFileOutputExcel_3_NB_LINE",nb_line_tFileOutputExcel_3);
		
		

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row13");
			  	}
			  	
 

ok_Hash.put("tFileOutputExcel_3", true);
end_Hash.put("tFileOutputExcel_3", System.currentTimeMillis());




/**
 * [tFileOutputExcel_3 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_1";

	

 



/**
 * [tHashInput_1 finally ] stop
 */
	
	/**
	 * [tHashInput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_2";

	

 



/**
 * [tHashInput_2 finally ] stop
 */
	
	/**
	 * [tHashInput_3 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_3";

	

 



/**
 * [tHashInput_3 finally ] stop
 */
	
	/**
	 * [tHashInput_4 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_4";

	

 



/**
 * [tHashInput_4 finally ] stop
 */
	
	/**
	 * [tHashInput_5 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_5";

	

 



/**
 * [tHashInput_5 finally ] stop
 */
	
	/**
	 * [tHashInput_6 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_6";

	

 



/**
 * [tHashInput_6 finally ] stop
 */
	
	/**
	 * [tHashInput_7 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_7";

	

 



/**
 * [tHashInput_7 finally ] stop
 */
	
	/**
	 * [tHashInput_8 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_8";

	

 



/**
 * [tHashInput_8 finally ] stop
 */
	
	/**
	 * [tHashInput_9 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_9";

	

 



/**
 * [tHashInput_9 finally ] stop
 */
	
	/**
	 * [tUnite_1 finally ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_3 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";

	

 



/**
 * [tFileOutputExcel_3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final EXTRACT_FOR_DYNAMICS EXTRACT_FOR_DYNAMICSClass = new EXTRACT_FOR_DYNAMICS();

        int exitCode = EXTRACT_FOR_DYNAMICSClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = EXTRACT_FOR_DYNAMICS.class.getClassLoader().getResourceAsStream("dev/extract_for_dynamics_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = EXTRACT_FOR_DYNAMICS.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("ErrorHeader", "id_String");
                            context.ErrorHeader=(String) context.getProperty("ErrorHeader");
                        context.setContextType("hasErrorHeader", "id_Boolean");
                            try{
                                context.hasErrorHeader=routines.system.ParserUtils.parseTo_Boolean (context.getProperty("hasErrorHeader"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "hasErrorHeader", e.getMessage()));
                                context.hasErrorHeader=null;
                            }
                        context.setContextType("dateValidation", "id_String");
                            context.dateValidation=(String) context.getProperty("dateValidation");
                        context.setContextType("timeValidation", "id_String");
                            context.timeValidation=(String) context.getProperty("timeValidation");
                        context.setContextType("ReferentielPath", "id_String");
                            context.ReferentielPath=(String) context.getProperty("ReferentielPath");
                        context.setContextType("IntegrationExcelPath", "id_String");
                            context.IntegrationExcelPath=(String) context.getProperty("IntegrationExcelPath");
                        context.setContextType("ExcelFileName", "id_String");
                            context.ExcelFileName=(String) context.getProperty("ExcelFileName");
                        context.setContextType("LogPath", "id_String");
                            context.LogPath=(String) context.getProperty("LogPath");
                        context.setContextType("isNike", "id_Boolean");
                            try{
                                context.isNike=routines.system.ParserUtils.parseTo_Boolean (context.getProperty("isNike"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "isNike", e.getMessage()));
                                context.isNike=null;
                            }
                        context.setContextType("ExtractPath", "id_String");
                            context.ExtractPath=(String) context.getProperty("ExtractPath");
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("ErrorHeader")) {
                context.ErrorHeader = (String) parentContextMap.get("ErrorHeader");
            }if (parentContextMap.containsKey("hasErrorHeader")) {
                context.hasErrorHeader = (Boolean) parentContextMap.get("hasErrorHeader");
            }if (parentContextMap.containsKey("dateValidation")) {
                context.dateValidation = (String) parentContextMap.get("dateValidation");
            }if (parentContextMap.containsKey("timeValidation")) {
                context.timeValidation = (String) parentContextMap.get("timeValidation");
            }if (parentContextMap.containsKey("ReferentielPath")) {
                context.ReferentielPath = (String) parentContextMap.get("ReferentielPath");
            }if (parentContextMap.containsKey("IntegrationExcelPath")) {
                context.IntegrationExcelPath = (String) parentContextMap.get("IntegrationExcelPath");
            }if (parentContextMap.containsKey("ExcelFileName")) {
                context.ExcelFileName = (String) parentContextMap.get("ExcelFileName");
            }if (parentContextMap.containsKey("LogPath")) {
                context.LogPath = (String) parentContextMap.get("LogPath");
            }if (parentContextMap.containsKey("isNike")) {
                context.isNike = (Boolean) parentContextMap.get("isNike");
            }if (parentContextMap.containsKey("ExtractPath")) {
                context.ExtractPath = (String) parentContextMap.get("ExtractPath");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}



this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tFileInputExcel_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileInputExcel_1) {
globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", -1);

e_tFileInputExcel_1.printStackTrace();

}
try {
errorCode = null;tHashInput_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tHashInput_1) {
globalMap.put("tHashInput_1_SUBPROCESS_STATE", -1);

e_tHashInput_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : EXTRACT_FOR_DYNAMICS");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     1234538 characters generated by Talend Open Studio for Data Integration 
 *     on the 12 octobre 2021 à 14:08:19 CEST
 ************************************************************************************************/