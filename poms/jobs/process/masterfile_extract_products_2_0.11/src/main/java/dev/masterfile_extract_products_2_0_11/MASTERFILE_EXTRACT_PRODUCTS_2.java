// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package dev.masterfile_extract_products_2_0_11;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJava_1
//import java.util.List;

@SuppressWarnings("unused")

/**
 * Job: MASTERFILE_EXTRACT_PRODUCTS_2 Purpose: <br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 7.3.1.20191031_1204-M3
 * @status DEV
 */
public class MASTERFILE_EXTRACT_PRODUCTS_2 implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (ErrorHeader != null) {

				this.setProperty("ErrorHeader", ErrorHeader.toString());

			}

			if (hasErrorHeader != null) {

				this.setProperty("hasErrorHeader", hasErrorHeader.toString());

			}

			if (dateValidation != null) {

				this.setProperty("dateValidation", dateValidation.toString());

			}

			if (timeValidation != null) {

				this.setProperty("timeValidation", timeValidation.toString());

			}

			if (ReferentielPath != null) {

				this.setProperty("ReferentielPath", ReferentielPath.toString());

			}

			if (IntegrationExcelPath != null) {

				this.setProperty("IntegrationExcelPath", IntegrationExcelPath.toString());

			}

			if (ExcelFileName != null) {

				this.setProperty("ExcelFileName", ExcelFileName.toString());

			}

			if (LogPath != null) {

				this.setProperty("LogPath", LogPath.toString());

			}

			if (isNike != null) {

				this.setProperty("isNike", isNike.toString());

			}

			if (ExtractPath != null) {

				this.setProperty("ExtractPath", ExtractPath.toString());

			}

			if (ExtractPathHBE != null) {

				this.setProperty("ExtractPathHBE", ExtractPathHBE.toString());

			}

			if (ExtractPathOTHER != null) {

				this.setProperty("ExtractPathOTHER", ExtractPathOTHER.toString());

			}

			if (excelSheetName != null) {

				this.setProperty("excelSheetName", excelSheetName.toString());

			}

			if (errorFile != null) {

				this.setProperty("errorFile", errorFile.toString());

			}

			if (CreationDate != null) {

				this.setProperty("CreationDate", CreationDate.toString());

			}

			if (SQLSERVER_Server != null) {

				this.setProperty("SQLSERVER_Server", SQLSERVER_Server.toString());

			}

			if (SQLSERVER_Password != null) {

				this.setProperty("SQLSERVER_Password", SQLSERVER_Password.toString());

			}

			if (SQLSERVER_AdditionalParams != null) {

				this.setProperty("SQLSERVER_AdditionalParams", SQLSERVER_AdditionalParams.toString());

			}

			if (SQLSERVER_Database != null) {

				this.setProperty("SQLSERVER_Database", SQLSERVER_Database.toString());

			}

			if (SQLSERVER_Port != null) {

				this.setProperty("SQLSERVER_Port", SQLSERVER_Port.toString());

			}

			if (SQLSERVER_Schema != null) {

				this.setProperty("SQLSERVER_Schema", SQLSERVER_Schema.toString());

			}

			if (SQLSERVER_Login != null) {

				this.setProperty("SQLSERVER_Login", SQLSERVER_Login.toString());

			}

			if (SQLSERVER_LOG_Schema != null) {

				this.setProperty("SQLSERVER_LOG_Schema", SQLSERVER_LOG_Schema.toString());

			}

			if (SQLSERVER_LOG_Server != null) {

				this.setProperty("SQLSERVER_LOG_Server", SQLSERVER_LOG_Server.toString());

			}

			if (SQLSERVER_LOG_AdditionalParams != null) {

				this.setProperty("SQLSERVER_LOG_AdditionalParams", SQLSERVER_LOG_AdditionalParams.toString());

			}

			if (SQLSERVER_LOG_Login != null) {

				this.setProperty("SQLSERVER_LOG_Login", SQLSERVER_LOG_Login.toString());

			}

			if (SQLSERVER_LOG_Port != null) {

				this.setProperty("SQLSERVER_LOG_Port", SQLSERVER_LOG_Port.toString());

			}

			if (SQLSERVER_LOG_Database != null) {

				this.setProperty("SQLSERVER_LOG_Database", SQLSERVER_LOG_Database.toString());

			}

			if (SQLSERVER_LOG_Password != null) {

				this.setProperty("SQLSERVER_LOG_Password", SQLSERVER_LOG_Password.toString());

			}

		}

		public String ErrorHeader;

		public String getErrorHeader() {
			return this.ErrorHeader;
		}

		public Boolean hasErrorHeader;

		public Boolean getHasErrorHeader() {
			return this.hasErrorHeader;
		}

		public String dateValidation;

		public String getDateValidation() {
			return this.dateValidation;
		}

		public String timeValidation;

		public String getTimeValidation() {
			return this.timeValidation;
		}

		public String ReferentielPath;

		public String getReferentielPath() {
			return this.ReferentielPath;
		}

		public String IntegrationExcelPath;

		public String getIntegrationExcelPath() {
			return this.IntegrationExcelPath;
		}

		public String ExcelFileName;

		public String getExcelFileName() {
			return this.ExcelFileName;
		}

		public String LogPath;

		public String getLogPath() {
			return this.LogPath;
		}

		public Boolean isNike;

		public Boolean getIsNike() {
			return this.isNike;
		}

		public String ExtractPath;

		public String getExtractPath() {
			return this.ExtractPath;
		}

		public String ExtractPathHBE;

		public String getExtractPathHBE() {
			return this.ExtractPathHBE;
		}

		public String ExtractPathOTHER;

		public String getExtractPathOTHER() {
			return this.ExtractPathOTHER;
		}

		public String excelSheetName;

		public String getExcelSheetName() {
			return this.excelSheetName;
		}

		public String errorFile;

		public String getErrorFile() {
			return this.errorFile;
		}

		public String CreationDate;

		public String getCreationDate() {
			return this.CreationDate;
		}

		public String SQLSERVER_Server;

		public String getSQLSERVER_Server() {
			return this.SQLSERVER_Server;
		}

		public java.lang.String SQLSERVER_Password;

		public java.lang.String getSQLSERVER_Password() {
			return this.SQLSERVER_Password;
		}

		public String SQLSERVER_AdditionalParams;

		public String getSQLSERVER_AdditionalParams() {
			return this.SQLSERVER_AdditionalParams;
		}

		public String SQLSERVER_Database;

		public String getSQLSERVER_Database() {
			return this.SQLSERVER_Database;
		}

		public String SQLSERVER_Port;

		public String getSQLSERVER_Port() {
			return this.SQLSERVER_Port;
		}

		public String SQLSERVER_Schema;

		public String getSQLSERVER_Schema() {
			return this.SQLSERVER_Schema;
		}

		public String SQLSERVER_Login;

		public String getSQLSERVER_Login() {
			return this.SQLSERVER_Login;
		}

		public String SQLSERVER_LOG_Schema;

		public String getSQLSERVER_LOG_Schema() {
			return this.SQLSERVER_LOG_Schema;
		}

		public String SQLSERVER_LOG_Server;

		public String getSQLSERVER_LOG_Server() {
			return this.SQLSERVER_LOG_Server;
		}

		public String SQLSERVER_LOG_AdditionalParams;

		public String getSQLSERVER_LOG_AdditionalParams() {
			return this.SQLSERVER_LOG_AdditionalParams;
		}

		public String SQLSERVER_LOG_Login;

		public String getSQLSERVER_LOG_Login() {
			return this.SQLSERVER_LOG_Login;
		}

		public String SQLSERVER_LOG_Port;

		public String getSQLSERVER_LOG_Port() {
			return this.SQLSERVER_LOG_Port;
		}

		public String SQLSERVER_LOG_Database;

		public String getSQLSERVER_LOG_Database() {
			return this.SQLSERVER_LOG_Database;
		}

		public java.lang.String SQLSERVER_LOG_Password;

		public java.lang.String getSQLSERVER_LOG_Password() {
			return this.SQLSERVER_LOG_Password;
		}
	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.11";
	private final String jobName = "MASTERFILE_EXTRACT_PRODUCTS_2";
	private final String projectName = "DEV";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	LogCatcherUtils talendLogs_LOGS = new LogCatcherUtils();

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					MASTERFILE_EXTRACT_PRODUCTS_2.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(MASTERFILE_EXTRACT_PRODUCTS_2.this,
									new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
						talendLogs_LOGS.addMessage("Java Exception", currentComponent, 6,
								e.getClass().getName() + ":" + e.getMessage(), 1);
						talendLogs_LOGSProcess(globalMap);
					}
				} catch (TalendException e) {
					// do nothing

				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void preStaLogCon_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		preStaLogCon_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_23_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUniqRow_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputExcel_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUniqRow_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputExcel_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUniqRow_22_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputExcel_13_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUniqRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputExcel_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUniqRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashOutput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashInput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUnite_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUniqRow_19_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputExcel_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tWarn_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tWarn_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostjob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPrejob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_copyOfcopyOfsortie_fashion_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row18_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row19_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row25_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row28_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void connectionStatsLogs_Commit_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		connectionStatsLogs_Commit_onSubJobError(exception, errorComponent, globalMap);
	}

	public void connectionStatsLogs_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		connectionStatsLogs_onSubJobError(exception, errorComponent, globalMap);
	}

	public void talendLogs_LOGS_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		talendLogs_DB_error(exception, errorComponent, globalMap);

	}

	public void talendLogs_DB_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		talendLogs_LOGS_onSubJobError(exception, errorComponent, globalMap);
	}

	public void preStaLogCon_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tHashInput_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_6_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tWarn_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostjob_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPrejob_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void connectionStatsLogs_Commit_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void connectionStatsLogs_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void talendLogs_LOGS_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void preStaLogConProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("preStaLogCon_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [preStaLogCon begin ] start
				 */

				ok_Hash.put("preStaLogCon", false);
				start_Hash.put("preStaLogCon", System.currentTimeMillis());

				currentComponent = "preStaLogCon";

				int tos_count_preStaLogCon = 0;

				/**
				 * [preStaLogCon begin ] stop
				 */

				/**
				 * [preStaLogCon main ] start
				 */

				currentComponent = "preStaLogCon";

				tos_count_preStaLogCon++;

				/**
				 * [preStaLogCon main ] stop
				 */

				/**
				 * [preStaLogCon process_data_begin ] start
				 */

				currentComponent = "preStaLogCon";

				/**
				 * [preStaLogCon process_data_begin ] stop
				 */

				/**
				 * [preStaLogCon process_data_end ] start
				 */

				currentComponent = "preStaLogCon";

				/**
				 * [preStaLogCon process_data_end ] stop
				 */

				/**
				 * [preStaLogCon end ] start
				 */

				currentComponent = "preStaLogCon";

				ok_Hash.put("preStaLogCon", true);
				end_Hash.put("preStaLogCon", System.currentTimeMillis());

				connectionStatsLogsProcess(globalMap);

				/**
				 * [preStaLogCon end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [preStaLogCon finally ] start
				 */

				currentComponent = "preStaLogCon";

				/**
				 * [preStaLogCon finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("preStaLogCon_SUBPROCESS_STATE", 1);
	}

	public static class copyOfcopyOfsortie_fashionStruct
			implements routines.system.IPersistableComparableLookupRow<copyOfcopyOfsortie_fashionStruct> {
		final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[0];
		static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String CODE;

		public String getCODE() {
			return this.CODE;
		}

		public String LABEL;

		public String getLABEL() {
			return this.LABEL;
		}

		public String NAME;

		public String getNAME() {
			return this.NAME;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.CODE == null) ? 0 : this.CODE.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfcopyOfsortie_fashionStruct other = (copyOfcopyOfsortie_fashionStruct) obj;

			if (this.CODE == null) {
				if (other.CODE != null)
					return false;

			} else if (!this.CODE.equals(other.CODE))

				return false;

			return true;
		}

		public void copyDataTo(copyOfcopyOfsortie_fashionStruct other) {

			other.CODE = this.CODE;
			other.LABEL = this.LABEL;
			other.NAME = this.NAME;

		}

		public void copyKeysDataTo(copyOfcopyOfsortie_fashionStruct other) {

			other.CODE = this.CODE;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2.length) {
					if (length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2.length == 0) {
						commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[1024];
					} else {
						commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2, 0, length);
				strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_2) {

				try {

					int length = 0;

					this.CODE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CODE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.LABEL = readString(dis, ois);

				this.NAME = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.LABEL, dos, oos);

				writeString(this.NAME, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CODE=" + CODE);
			sb.append(",LABEL=" + LABEL);
			sb.append(",NAME=" + NAME);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfcopyOfsortie_fashionStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CODE, other.CODE);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row24Struct implements routines.system.IPersistableRow<row24Struct> {
		final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[0];
		static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[0];

		public String Label_Code;

		public String getLabel_Code() {
			return this.Label_Code;
		}

		public String Label_D365;

		public String getLabel_D365() {
			return this.Label_D365;
		}

		public String Label_Name;

		public String getLabel_Name() {
			return this.Label_Name;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2.length) {
					if (length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2.length == 0) {
						commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[1024];
					} else {
						commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2, 0, length);
				strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_2) {

				try {

					int length = 0;

					this.Label_Code = readString(dis);

					this.Label_D365 = readString(dis);

					this.Label_Name = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Label_Code, dos);

				// String

				writeString(this.Label_D365, dos);

				// String

				writeString(this.Label_Name, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Label_Code=" + Label_Code);
			sb.append(",Label_D365=" + Label_D365);
			sb.append(",Label_Name=" + Label_Name);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row24Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row24Struct row24 = new row24Struct();
				copyOfcopyOfsortie_fashionStruct copyOfcopyOfsortie_fashion = new copyOfcopyOfsortie_fashionStruct();

				/**
				 * [tAdvancedHash_copyOfcopyOfsortie_fashion begin ] start
				 */

				ok_Hash.put("tAdvancedHash_copyOfcopyOfsortie_fashion", false);
				start_Hash.put("tAdvancedHash_copyOfcopyOfsortie_fashion", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_copyOfcopyOfsortie_fashion";

				int tos_count_tAdvancedHash_copyOfcopyOfsortie_fashion = 0;

				// connection name:copyOfcopyOfsortie_fashion
				// source node:tMap_8 - inputs:(row24)
				// outputs:(copyOfcopyOfsortie_fashion,copyOfcopyOfsortie_fashion) | target
				// node:tAdvancedHash_copyOfcopyOfsortie_fashion -
				// inputs:(copyOfcopyOfsortie_fashion) outputs:()
				// linked node: tMap_7 - inputs:(copyOfcopyOfsortie_fashion,row18,row19,sortie)
				// outputs:(sortie_Excel)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_copyOfcopyOfsortie_fashion = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<copyOfcopyOfsortie_fashionStruct> tHash_Lookup_copyOfcopyOfsortie_fashion = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<copyOfcopyOfsortie_fashionStruct>getLookup(matchingModeEnum_copyOfcopyOfsortie_fashion);

				globalMap.put("tHash_Lookup_copyOfcopyOfsortie_fashion", tHash_Lookup_copyOfcopyOfsortie_fashion);

				/**
				 * [tAdvancedHash_copyOfcopyOfsortie_fashion begin ] stop
				 */

				/**
				 * [tMap_8 begin ] start
				 */

				ok_Hash.put("tMap_8", false);
				start_Hash.put("tMap_8", System.currentTimeMillis());

				currentComponent = "tMap_8";

				int tos_count_tMap_8 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_8__Struct {
				}
				Var__tMap_8__Struct Var__tMap_8 = new Var__tMap_8__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfcopyOfsortie_fashionStruct copyOfcopyOfsortie_fashion_tmp = new copyOfcopyOfsortie_fashionStruct();
// ###############################

				/**
				 * [tMap_8 begin ] stop
				 */

				/**
				 * [tDBInput_1 begin ] start
				 */

				ok_Hash.put("tDBInput_1", false);
				start_Hash.put("tDBInput_1", System.currentTimeMillis());

				currentComponent = "tDBInput_1";

				int tos_count_tDBInput_1 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_1 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_1 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_1 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_1, talendToDBArray_tDBInput_1);
				int nb_line_tDBInput_1 = 0;
				java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
				java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = context.SQLSERVER_Login;

				final String decryptedPassword_tDBInput_1 = context.SQLSERVER_Password;

				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;

				String port_tDBInput_1 = context.SQLSERVER_Port;
				String dbname_tDBInput_1 = context.SQLSERVER_Database;
				String url_tDBInput_1 = "jdbc:sqlserver://" + context.SQLSERVER_Server;
				if (!"".equals(port_tDBInput_1)) {
					url_tDBInput_1 += ":" + context.SQLSERVER_Port;
				}
				if (!"".equals(dbname_tDBInput_1)) {
					url_tDBInput_1 += ";databaseName=" + context.SQLSERVER_Database;
				}
				url_tDBInput_1 += ";appName=" + projectName + ";" + context.SQLSERVER_AdditionalParams;
				String dbschema_tDBInput_1 = context.SQLSERVER_Schema;

				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1, dbUser_tDBInput_1,
						dbPwd_tDBInput_1);

				java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

				String dbquery_tDBInput_1 = "select LABELCODE as [Label Code], LABELD365 as [Label D365],LabelName as [Label Name] from  data.D365_Labels\nunion \nS"
						+ "elect 'SMS','SMS','SMS'\n";

				globalMap.put("tDBInput_1_QUERY", dbquery_tDBInput_1);
				java.sql.ResultSet rs_tDBInput_1 = null;

				try {
					rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
					java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
					int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

					String tmpContent_tDBInput_1 = null;

					while (rs_tDBInput_1.next()) {
						nb_line_tDBInput_1++;

						if (colQtyInRs_tDBInput_1 < 1) {
							row24.Label_Code = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(1);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
									row24.Label_Code = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row24.Label_Code = tmpContent_tDBInput_1;
								}
							} else {
								row24.Label_Code = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 2) {
							row24.Label_D365 = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(2);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
									row24.Label_D365 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row24.Label_D365 = tmpContent_tDBInput_1;
								}
							} else {
								row24.Label_D365 = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 3) {
							row24.Label_Name = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(3);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
									row24.Label_Name = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row24.Label_Name = tmpContent_tDBInput_1;
								}
							} else {
								row24.Label_Name = null;
							}
						}

						/**
						 * [tDBInput_1 begin ] stop
						 */

						/**
						 * [tDBInput_1 main ] start
						 */

						currentComponent = "tDBInput_1";

						tos_count_tDBInput_1++;

						/**
						 * [tDBInput_1 main ] stop
						 */

						/**
						 * [tDBInput_1 process_data_begin ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_begin ] stop
						 */

						/**
						 * [tMap_8 main ] start
						 */

						currentComponent = "tMap_8";

						boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_8 = false;
						boolean mainRowRejected_tMap_8 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_8__Struct Var = Var__tMap_8;// ###############################
							// ###############################
							// # Output tables

							copyOfcopyOfsortie_fashion = null;

// # Output table : 'copyOfcopyOfsortie_fashion'
							copyOfcopyOfsortie_fashion_tmp.CODE = StringHandling.DOWNCASE(row24.Label_Code);
							copyOfcopyOfsortie_fashion_tmp.LABEL = row24.Label_D365;
							copyOfcopyOfsortie_fashion_tmp.NAME = row24.Label_Name;
							copyOfcopyOfsortie_fashion = copyOfcopyOfsortie_fashion_tmp;
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_8 = false;

						tos_count_tMap_8++;

						/**
						 * [tMap_8 main ] stop
						 */

						/**
						 * [tMap_8 process_data_begin ] start
						 */

						currentComponent = "tMap_8";

						/**
						 * [tMap_8 process_data_begin ] stop
						 */
// Start of branch "copyOfcopyOfsortie_fashion"
						if (copyOfcopyOfsortie_fashion != null) {

							/**
							 * [tAdvancedHash_copyOfcopyOfsortie_fashion main ] start
							 */

							currentComponent = "tAdvancedHash_copyOfcopyOfsortie_fashion";

							copyOfcopyOfsortie_fashionStruct copyOfcopyOfsortie_fashion_HashRow = new copyOfcopyOfsortie_fashionStruct();

							copyOfcopyOfsortie_fashion_HashRow.CODE = copyOfcopyOfsortie_fashion.CODE;

							copyOfcopyOfsortie_fashion_HashRow.LABEL = copyOfcopyOfsortie_fashion.LABEL;

							copyOfcopyOfsortie_fashion_HashRow.NAME = copyOfcopyOfsortie_fashion.NAME;

							tHash_Lookup_copyOfcopyOfsortie_fashion.put(copyOfcopyOfsortie_fashion_HashRow);

							tos_count_tAdvancedHash_copyOfcopyOfsortie_fashion++;

							/**
							 * [tAdvancedHash_copyOfcopyOfsortie_fashion main ] stop
							 */

							/**
							 * [tAdvancedHash_copyOfcopyOfsortie_fashion process_data_begin ] start
							 */

							currentComponent = "tAdvancedHash_copyOfcopyOfsortie_fashion";

							/**
							 * [tAdvancedHash_copyOfcopyOfsortie_fashion process_data_begin ] stop
							 */

							/**
							 * [tAdvancedHash_copyOfcopyOfsortie_fashion process_data_end ] start
							 */

							currentComponent = "tAdvancedHash_copyOfcopyOfsortie_fashion";

							/**
							 * [tAdvancedHash_copyOfcopyOfsortie_fashion process_data_end ] stop
							 */

						} // End of branch "copyOfcopyOfsortie_fashion"

						/**
						 * [tMap_8 process_data_end ] start
						 */

						currentComponent = "tMap_8";

						/**
						 * [tMap_8 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 process_data_end ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 end ] start
						 */

						currentComponent = "tDBInput_1";

					}
				} finally {
					if (rs_tDBInput_1 != null) {
						rs_tDBInput_1.close();
					}
					if (stmt_tDBInput_1 != null) {
						stmt_tDBInput_1.close();
					}
					if (conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {

						conn_tDBInput_1.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_1_NB_LINE", nb_line_tDBInput_1);

				ok_Hash.put("tDBInput_1", true);
				end_Hash.put("tDBInput_1", System.currentTimeMillis());

				/**
				 * [tDBInput_1 end ] stop
				 */

				/**
				 * [tMap_8 end ] start
				 */

				currentComponent = "tMap_8";

// ###############################
// # Lookup hashes releasing
// ###############################      

				ok_Hash.put("tMap_8", true);
				end_Hash.put("tMap_8", System.currentTimeMillis());

				/**
				 * [tMap_8 end ] stop
				 */

				/**
				 * [tAdvancedHash_copyOfcopyOfsortie_fashion end ] start
				 */

				currentComponent = "tAdvancedHash_copyOfcopyOfsortie_fashion";

				tHash_Lookup_copyOfcopyOfsortie_fashion.endPut();

				ok_Hash.put("tAdvancedHash_copyOfcopyOfsortie_fashion", true);
				end_Hash.put("tAdvancedHash_copyOfcopyOfsortie_fashion", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_copyOfcopyOfsortie_fashion end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_1 finally ] start
				 */

				currentComponent = "tDBInput_1";

				/**
				 * [tDBInput_1 finally ] stop
				 */

				/**
				 * [tMap_8 finally ] start
				 */

				currentComponent = "tMap_8";

				/**
				 * [tMap_8 finally ] stop
				 */

				/**
				 * [tAdvancedHash_copyOfcopyOfsortie_fashion finally ] start
				 */

				currentComponent = "tAdvancedHash_copyOfcopyOfsortie_fashion";

				/**
				 * [tAdvancedHash_copyOfcopyOfsortie_fashion finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row13Struct implements routines.system.IPersistableRow<row13Struct> {
		final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[0];
		static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[0];

		public String PRODUCTNUMBER;

		public String getPRODUCTNUMBER() {
			return this.PRODUCTNUMBER;
		}

		public String PRODUCTCATEGORYNAME;

		public String getPRODUCTCATEGORYNAME() {
			return this.PRODUCTCATEGORYNAME;
		}

		public String PRODUCTCATEGORYHIERARCHYNAME;

		public String getPRODUCTCATEGORYHIERARCHYNAME() {
			return this.PRODUCTCATEGORYHIERARCHYNAME;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2.length) {
					if (length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2.length == 0) {
						commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[1024];
					} else {
						commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2, 0, length);
				strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_2) {

				try {

					int length = 0;

					this.PRODUCTNUMBER = readString(dis);

					this.PRODUCTCATEGORYNAME = readString(dis);

					this.PRODUCTCATEGORYHIERARCHYNAME = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PRODUCTNUMBER, dos);

				// String

				writeString(this.PRODUCTCATEGORYNAME, dos);

				// String

				writeString(this.PRODUCTCATEGORYHIERARCHYNAME, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PRODUCTNUMBER=" + PRODUCTNUMBER);
			sb.append(",PRODUCTCATEGORYNAME=" + PRODUCTCATEGORYNAME);
			sb.append(",PRODUCTCATEGORYHIERARCHYNAME=" + PRODUCTCATEGORYHIERARCHYNAME);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row13Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[0];
		static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[0];

		public String PRODUCTNUMBER;

		public String getPRODUCTNUMBER() {
			return this.PRODUCTNUMBER;
		}

		public String PRODUCTCATEGORYNAME;

		public String getPRODUCTCATEGORYNAME() {
			return this.PRODUCTCATEGORYNAME;
		}

		public String PRODUCTCATEGORYHIERARCHYNAME;

		public String getPRODUCTCATEGORYHIERARCHYNAME() {
			return this.PRODUCTCATEGORYHIERARCHYNAME;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2.length) {
					if (length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2.length == 0) {
						commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[1024];
					} else {
						commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2, 0, length);
				strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_2) {

				try {

					int length = 0;

					this.PRODUCTNUMBER = readString(dis);

					this.PRODUCTCATEGORYNAME = readString(dis);

					this.PRODUCTCATEGORYHIERARCHYNAME = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PRODUCTNUMBER, dos);

				// String

				writeString(this.PRODUCTCATEGORYNAME, dos);

				// String

				writeString(this.PRODUCTCATEGORYHIERARCHYNAME, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PRODUCTNUMBER=" + PRODUCTNUMBER);
			sb.append(",PRODUCTCATEGORYNAME=" + PRODUCTCATEGORYNAME);
			sb.append(",PRODUCTCATEGORYHIERARCHYNAME=" + PRODUCTCATEGORYHIERARCHYNAME);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
		final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[0];
		static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[0];

		public String PRODUCTNUMBER;

		public String getPRODUCTNUMBER() {
			return this.PRODUCTNUMBER;
		}

		public String PRODUCTCATEGORYNAME;

		public String getPRODUCTCATEGORYNAME() {
			return this.PRODUCTCATEGORYNAME;
		}

		public String PRODUCTCATEGORYHIERARCHYNAME;

		public String getPRODUCTCATEGORYHIERARCHYNAME() {
			return this.PRODUCTCATEGORYHIERARCHYNAME;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2.length) {
					if (length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2.length == 0) {
						commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[1024];
					} else {
						commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2, 0, length);
				strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_2) {

				try {

					int length = 0;

					this.PRODUCTNUMBER = readString(dis);

					this.PRODUCTCATEGORYNAME = readString(dis);

					this.PRODUCTCATEGORYHIERARCHYNAME = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PRODUCTNUMBER, dos);

				// String

				writeString(this.PRODUCTCATEGORYNAME, dos);

				// String

				writeString(this.PRODUCTCATEGORYHIERARCHYNAME, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PRODUCTNUMBER=" + PRODUCTNUMBER);
			sb.append(",PRODUCTCATEGORYNAME=" + PRODUCTCATEGORYNAME);
			sb.append(",PRODUCTCATEGORYHIERARCHYNAME=" + PRODUCTCATEGORYHIERARCHYNAME);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tHashInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tHashInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row12Struct row12 = new row12Struct();

				row9Struct row9 = new row9Struct();
				row13Struct row13 = new row13Struct();

				/**
				 * [tFileOutputExcel_3 begin ] start
				 */

				ok_Hash.put("tFileOutputExcel_3", false);
				start_Hash.put("tFileOutputExcel_3", System.currentTimeMillis());

				currentComponent = "tFileOutputExcel_3";

				int tos_count_tFileOutputExcel_3 = 0;

				int columnIndex_tFileOutputExcel_3 = 0;

				String fileName_tFileOutputExcel_3 = context.ExtractPathOTHER + "Product category assignments.xlsx";
				int nb_line_tFileOutputExcel_3 = 0;
				org.talend.ExcelTool xlsxTool_tFileOutputExcel_3 = new org.talend.ExcelTool();

				xlsxTool_tFileOutputExcel_3.setSheet("Product category assignments");
				xlsxTool_tFileOutputExcel_3.setAppend(false, true);
				xlsxTool_tFileOutputExcel_3.setRecalculateFormula(false);
				xlsxTool_tFileOutputExcel_3.setXY(false, 0, 10, false);

				java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_3 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap
						.get("concurrentHashMap");
				java.lang.Object lockObj_tFileOutputExcel_3 = chm_tFileOutputExcel_3
						.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_3", k -> new Object());
				synchronized (lockObj_tFileOutputExcel_3) {

					xlsxTool_tFileOutputExcel_3.prepareXlsxFile(fileName_tFileOutputExcel_3);

				}

				xlsxTool_tFileOutputExcel_3.setFont("");

				if (xlsxTool_tFileOutputExcel_3.getStartRow() == 0) {

					xlsxTool_tFileOutputExcel_3.addRow();

					xlsxTool_tFileOutputExcel_3.addCellValue("PRODUCTNUMBER");

					xlsxTool_tFileOutputExcel_3.addCellValue("PRODUCTCATEGORYNAME");

					xlsxTool_tFileOutputExcel_3.addCellValue("PRODUCTCATEGORYHIERARCHYNAME");

					nb_line_tFileOutputExcel_3++;

				}

				/**
				 * [tFileOutputExcel_3 begin ] stop
				 */

				/**
				 * [tUniqRow_19 begin ] start
				 */

				ok_Hash.put("tUniqRow_19", false);
				start_Hash.put("tUniqRow_19", System.currentTimeMillis());

				currentComponent = "tUniqRow_19";

				int tos_count_tUniqRow_19 = 0;

				class KeyStruct_tUniqRow_19 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String PRODUCTNUMBER;
					String PRODUCTCATEGORYNAME;
					String PRODUCTCATEGORYHIERARCHYNAME;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result
									+ ((this.PRODUCTNUMBER == null) ? 0 : this.PRODUCTNUMBER.hashCode());

							result = prime * result
									+ ((this.PRODUCTCATEGORYNAME == null) ? 0 : this.PRODUCTCATEGORYNAME.hashCode());

							result = prime * result + ((this.PRODUCTCATEGORYHIERARCHYNAME == null) ? 0
									: this.PRODUCTCATEGORYHIERARCHYNAME.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_19 other = (KeyStruct_tUniqRow_19) obj;

						if (this.PRODUCTNUMBER == null) {
							if (other.PRODUCTNUMBER != null)
								return false;

						} else if (!this.PRODUCTNUMBER.equals(other.PRODUCTNUMBER))

							return false;

						if (this.PRODUCTCATEGORYNAME == null) {
							if (other.PRODUCTCATEGORYNAME != null)
								return false;

						} else if (!this.PRODUCTCATEGORYNAME.equals(other.PRODUCTCATEGORYNAME))

							return false;

						if (this.PRODUCTCATEGORYHIERARCHYNAME == null) {
							if (other.PRODUCTCATEGORYHIERARCHYNAME != null)
								return false;

						} else if (!this.PRODUCTCATEGORYHIERARCHYNAME.equals(other.PRODUCTCATEGORYHIERARCHYNAME))

							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_19 = 0;
				int nb_duplicates_tUniqRow_19 = 0;
				KeyStruct_tUniqRow_19 finder_tUniqRow_19 = new KeyStruct_tUniqRow_19();
				java.util.Set<KeyStruct_tUniqRow_19> keystUniqRow_19 = new java.util.HashSet<KeyStruct_tUniqRow_19>();

				/**
				 * [tUniqRow_19 begin ] stop
				 */

				/**
				 * [tUnite_1 begin ] start
				 */

				ok_Hash.put("tUnite_1", false);
				start_Hash.put("tUnite_1", System.currentTimeMillis());

				currentComponent = "tUnite_1";

				int tos_count_tUnite_1 = 0;

				int nb_line_tUnite_1 = 0;

				/**
				 * [tUnite_1 begin ] stop
				 */

				/**
				 * [tHashInput_2 begin ] start
				 */

				ok_Hash.put("tHashInput_2", false);
				start_Hash.put("tHashInput_2", System.currentTimeMillis());

				currentComponent = "tHashInput_2";

				int tos_count_tHashInput_2 = 0;

				int nb_line_tHashInput_2 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_2 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row5Struct> tHashFile_tHashInput_2 = mf_tHashInput_2
						.getAdvancedMemoryHashFile("tHashFile_MASTERFILE_EXTRACT_PRODUCTS_2_" + pid + "_tHashOutput_2");
				if (tHashFile_tHashInput_2 == null) {
					throw new RuntimeException(
							"The hash is not initialized : The hash must exist before you read from it");
				}
				java.util.Iterator<row5Struct> iterator_tHashInput_2 = tHashFile_tHashInput_2.iterator();
				while (iterator_tHashInput_2.hasNext()) {
					row5Struct next_tHashInput_2 = iterator_tHashInput_2.next();

					row12.PRODUCTNUMBER = next_tHashInput_2.PRODUCTNUMBER;
					row12.PRODUCTCATEGORYNAME = next_tHashInput_2.PRODUCTCATEGORYNAME;
					row12.PRODUCTCATEGORYHIERARCHYNAME = next_tHashInput_2.PRODUCTCATEGORYHIERARCHYNAME;

					/**
					 * [tHashInput_2 begin ] stop
					 */

					/**
					 * [tHashInput_2 main ] start
					 */

					currentComponent = "tHashInput_2";

					tos_count_tHashInput_2++;

					/**
					 * [tHashInput_2 main ] stop
					 */

					/**
					 * [tHashInput_2 process_data_begin ] start
					 */

					currentComponent = "tHashInput_2";

					/**
					 * [tHashInput_2 process_data_begin ] stop
					 */

					/**
					 * [tUnite_1 main ] start
					 */

					currentComponent = "tUnite_1";

//////////

// for output
					row9 = new row9Struct();

					row9.PRODUCTNUMBER = row12.PRODUCTNUMBER;
					row9.PRODUCTCATEGORYNAME = row12.PRODUCTCATEGORYNAME;
					row9.PRODUCTCATEGORYHIERARCHYNAME = row12.PRODUCTCATEGORYHIERARCHYNAME;

					nb_line_tUnite_1++;

//////////

					tos_count_tUnite_1++;

					/**
					 * [tUnite_1 main ] stop
					 */

					/**
					 * [tUnite_1 process_data_begin ] start
					 */

					currentComponent = "tUnite_1";

					/**
					 * [tUnite_1 process_data_begin ] stop
					 */

					/**
					 * [tUniqRow_19 main ] start
					 */

					currentComponent = "tUniqRow_19";

					row13 = null;
					if (row9.PRODUCTNUMBER == null) {
						finder_tUniqRow_19.PRODUCTNUMBER = null;
					} else {
						finder_tUniqRow_19.PRODUCTNUMBER = row9.PRODUCTNUMBER.toLowerCase();
					}
					if (row9.PRODUCTCATEGORYNAME == null) {
						finder_tUniqRow_19.PRODUCTCATEGORYNAME = null;
					} else {
						finder_tUniqRow_19.PRODUCTCATEGORYNAME = row9.PRODUCTCATEGORYNAME.toLowerCase();
					}
					if (row9.PRODUCTCATEGORYHIERARCHYNAME == null) {
						finder_tUniqRow_19.PRODUCTCATEGORYHIERARCHYNAME = null;
					} else {
						finder_tUniqRow_19.PRODUCTCATEGORYHIERARCHYNAME = row9.PRODUCTCATEGORYHIERARCHYNAME
								.toLowerCase();
					}
					finder_tUniqRow_19.hashCodeDirty = true;
					if (!keystUniqRow_19.contains(finder_tUniqRow_19)) {
						KeyStruct_tUniqRow_19 new_tUniqRow_19 = new KeyStruct_tUniqRow_19();

						if (row9.PRODUCTNUMBER == null) {
							new_tUniqRow_19.PRODUCTNUMBER = null;
						} else {
							new_tUniqRow_19.PRODUCTNUMBER = row9.PRODUCTNUMBER.toLowerCase();
						}
						if (row9.PRODUCTCATEGORYNAME == null) {
							new_tUniqRow_19.PRODUCTCATEGORYNAME = null;
						} else {
							new_tUniqRow_19.PRODUCTCATEGORYNAME = row9.PRODUCTCATEGORYNAME.toLowerCase();
						}
						if (row9.PRODUCTCATEGORYHIERARCHYNAME == null) {
							new_tUniqRow_19.PRODUCTCATEGORYHIERARCHYNAME = null;
						} else {
							new_tUniqRow_19.PRODUCTCATEGORYHIERARCHYNAME = row9.PRODUCTCATEGORYHIERARCHYNAME
									.toLowerCase();
						}

						keystUniqRow_19.add(new_tUniqRow_19);
						if (row13 == null) {

							row13 = new row13Struct();
						}
						row13.PRODUCTNUMBER = row9.PRODUCTNUMBER;
						row13.PRODUCTCATEGORYNAME = row9.PRODUCTCATEGORYNAME;
						row13.PRODUCTCATEGORYHIERARCHYNAME = row9.PRODUCTCATEGORYHIERARCHYNAME;
						nb_uniques_tUniqRow_19++;
					} else {
						nb_duplicates_tUniqRow_19++;
					}

					tos_count_tUniqRow_19++;

					/**
					 * [tUniqRow_19 main ] stop
					 */

					/**
					 * [tUniqRow_19 process_data_begin ] start
					 */

					currentComponent = "tUniqRow_19";

					/**
					 * [tUniqRow_19 process_data_begin ] stop
					 */
// Start of branch "row13"
					if (row13 != null) {

						/**
						 * [tFileOutputExcel_3 main ] start
						 */

						currentComponent = "tFileOutputExcel_3";

						xlsxTool_tFileOutputExcel_3.addRow();

						if (row13.PRODUCTNUMBER != null) {

							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(row13.PRODUCTNUMBER));
						} else {
							xlsxTool_tFileOutputExcel_3.addCellNullValue();
						}

						if (row13.PRODUCTCATEGORYNAME != null) {

							xlsxTool_tFileOutputExcel_3.addCellValue(String.valueOf(row13.PRODUCTCATEGORYNAME));
						} else {
							xlsxTool_tFileOutputExcel_3.addCellNullValue();
						}

						if (row13.PRODUCTCATEGORYHIERARCHYNAME != null) {

							xlsxTool_tFileOutputExcel_3
									.addCellValue(String.valueOf(row13.PRODUCTCATEGORYHIERARCHYNAME));
						} else {
							xlsxTool_tFileOutputExcel_3.addCellNullValue();
						}

						nb_line_tFileOutputExcel_3++;

						tos_count_tFileOutputExcel_3++;

						/**
						 * [tFileOutputExcel_3 main ] stop
						 */

						/**
						 * [tFileOutputExcel_3 process_data_begin ] start
						 */

						currentComponent = "tFileOutputExcel_3";

						/**
						 * [tFileOutputExcel_3 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputExcel_3 process_data_end ] start
						 */

						currentComponent = "tFileOutputExcel_3";

						/**
						 * [tFileOutputExcel_3 process_data_end ] stop
						 */

					} // End of branch "row13"

					/**
					 * [tUniqRow_19 process_data_end ] start
					 */

					currentComponent = "tUniqRow_19";

					/**
					 * [tUniqRow_19 process_data_end ] stop
					 */

					/**
					 * [tUnite_1 process_data_end ] start
					 */

					currentComponent = "tUnite_1";

					/**
					 * [tUnite_1 process_data_end ] stop
					 */

					/**
					 * [tHashInput_2 process_data_end ] start
					 */

					currentComponent = "tHashInput_2";

					/**
					 * [tHashInput_2 process_data_end ] stop
					 */

					/**
					 * [tHashInput_2 end ] start
					 */

					currentComponent = "tHashInput_2";

					nb_line_tHashInput_2++;
				}

				org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.remove("tHashFile_MASTERFILE_EXTRACT_PRODUCTS_2_" + pid + "_tHashOutput_2");

				globalMap.put("tHashInput_2_NB_LINE", nb_line_tHashInput_2);

				ok_Hash.put("tHashInput_2", true);
				end_Hash.put("tHashInput_2", System.currentTimeMillis());

				/**
				 * [tHashInput_2 end ] stop
				 */

				/**
				 * [tUnite_1 end ] start
				 */

				currentComponent = "tUnite_1";

				globalMap.put("tUnite_1_NB_LINE", nb_line_tUnite_1);

				ok_Hash.put("tUnite_1", true);
				end_Hash.put("tUnite_1", System.currentTimeMillis());

				/**
				 * [tUnite_1 end ] stop
				 */

				/**
				 * [tUniqRow_19 end ] start
				 */

				currentComponent = "tUniqRow_19";

				globalMap.put("tUniqRow_19_NB_UNIQUES", nb_uniques_tUniqRow_19);
				globalMap.put("tUniqRow_19_NB_DUPLICATES", nb_duplicates_tUniqRow_19);

				ok_Hash.put("tUniqRow_19", true);
				end_Hash.put("tUniqRow_19", System.currentTimeMillis());

				/**
				 * [tUniqRow_19 end ] stop
				 */

				/**
				 * [tFileOutputExcel_3 end ] start
				 */

				currentComponent = "tFileOutputExcel_3";

				xlsxTool_tFileOutputExcel_3.writeExcel(fileName_tFileOutputExcel_3, true);

				nb_line_tFileOutputExcel_3 = nb_line_tFileOutputExcel_3 - 1;

				globalMap.put("tFileOutputExcel_3_NB_LINE", nb_line_tFileOutputExcel_3);

				ok_Hash.put("tFileOutputExcel_3", true);
				end_Hash.put("tFileOutputExcel_3", System.currentTimeMillis());

				/**
				 * [tFileOutputExcel_3 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tHashInput_2 finally ] start
				 */

				currentComponent = "tHashInput_2";

				/**
				 * [tHashInput_2 finally ] stop
				 */

				/**
				 * [tUnite_1 finally ] start
				 */

				currentComponent = "tUnite_1";

				/**
				 * [tUnite_1 finally ] stop
				 */

				/**
				 * [tUniqRow_19 finally ] start
				 */

				currentComponent = "tUniqRow_19";

				/**
				 * [tUniqRow_19 finally ] stop
				 */

				/**
				 * [tFileOutputExcel_3 finally ] start
				 */

				currentComponent = "tFileOutputExcel_3";

				/**
				 * [tFileOutputExcel_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tHashInput_2_SUBPROCESS_STATE", 1);
	}

	public static class row18Struct implements routines.system.IPersistableComparableLookupRow<row18Struct> {
		final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[0];
		static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String NAME;

		public String getNAME() {
			return this.NAME;
		}

		public String NAME2;

		public String getNAME2() {
			return this.NAME2;
		}

		public String NAME3;

		public String getNAME3() {
			return this.NAME3;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.NAME3 == null) ? 0 : this.NAME3.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row18Struct other = (row18Struct) obj;

			if (this.NAME3 == null) {
				if (other.NAME3 != null)
					return false;

			} else if (!this.NAME3.equals(other.NAME3))

				return false;

			return true;
		}

		public void copyDataTo(row18Struct other) {

			other.NAME = this.NAME;
			other.NAME2 = this.NAME2;
			other.NAME3 = this.NAME3;

		}

		public void copyKeysDataTo(row18Struct other) {

			other.NAME3 = this.NAME3;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2.length) {
					if (length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2.length == 0) {
						commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[1024];
					} else {
						commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2, 0, length);
				strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_2) {

				try {

					int length = 0;

					this.NAME3 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.NAME3, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.NAME = readString(dis, ois);

				this.NAME2 = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.NAME, dos, oos);

				writeString(this.NAME2, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("NAME=" + NAME);
			sb.append(",NAME2=" + NAME2);
			sb.append(",NAME3=" + NAME3);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row18Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.NAME3, other.NAME3);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row18Struct row18 = new row18Struct();

				/**
				 * [tAdvancedHash_row18 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row18", false);
				start_Hash.put("tAdvancedHash_row18", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row18";

				int tos_count_tAdvancedHash_row18 = 0;

				// connection name:row18
				// source node:tDBInput_2 - inputs:(after_tDBInput_6) outputs:(row18,row18) |
				// target node:tAdvancedHash_row18 - inputs:(row18) outputs:()
				// linked node: tMap_7 - inputs:(copyOfcopyOfsortie_fashion,row18,row19,sortie)
				// outputs:(sortie_Excel)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row18 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct> tHash_Lookup_row18 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row18Struct>getLookup(matchingModeEnum_row18);

				globalMap.put("tHash_Lookup_row18", tHash_Lookup_row18);

				/**
				 * [tAdvancedHash_row18 begin ] stop
				 */

				/**
				 * [tDBInput_2 begin ] start
				 */

				ok_Hash.put("tDBInput_2", false);
				start_Hash.put("tDBInput_2", System.currentTimeMillis());

				currentComponent = "tDBInput_2";

				int tos_count_tDBInput_2 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_2 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_2 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_2 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_2, talendToDBArray_tDBInput_2);
				int nb_line_tDBInput_2 = 0;
				java.sql.Connection conn_tDBInput_2 = null;
				String driverClass_tDBInput_2 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
				java.lang.Class jdbcclazz_tDBInput_2 = java.lang.Class.forName(driverClass_tDBInput_2);
				String dbUser_tDBInput_2 = context.SQLSERVER_Login;

				final String decryptedPassword_tDBInput_2 = context.SQLSERVER_Password;

				String dbPwd_tDBInput_2 = decryptedPassword_tDBInput_2;

				String port_tDBInput_2 = context.SQLSERVER_Port;
				String dbname_tDBInput_2 = context.SQLSERVER_Database;
				String url_tDBInput_2 = "jdbc:sqlserver://" + context.SQLSERVER_Server;
				if (!"".equals(port_tDBInput_2)) {
					url_tDBInput_2 += ":" + context.SQLSERVER_Port;
				}
				if (!"".equals(dbname_tDBInput_2)) {
					url_tDBInput_2 += ";databaseName=" + context.SQLSERVER_Database;
				}
				url_tDBInput_2 += ";appName=" + projectName + ";" + context.SQLSERVER_AdditionalParams;
				String dbschema_tDBInput_2 = context.SQLSERVER_Schema;

				conn_tDBInput_2 = java.sql.DriverManager.getConnection(url_tDBInput_2, dbUser_tDBInput_2,
						dbPwd_tDBInput_2);

				java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

				String dbquery_tDBInput_2 = "\nselect CATEGORYNAME AS NAME, PRODUCTCATEGORYHIERARCHYNAME as NAME2, FRIENDLYCATEGORYNAME  as NAME3,LEFT(CATEGORYNAME,"
						+ "2) as CATEGORYCODE \nfrom  data.D365_ProductCategories\nwhere PARENTPRODUCTCATEGORYHIERARCHYNAME = 'Product Family Hiera"
						+ "rchy'\nand PARENTPRODUCTCATEGORYNAME = 'Product Family Hierarchy'\n\n";

				globalMap.put("tDBInput_2_QUERY", dbquery_tDBInput_2);
				java.sql.ResultSet rs_tDBInput_2 = null;

				try {
					rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
					java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
					int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

					String tmpContent_tDBInput_2 = null;

					while (rs_tDBInput_2.next()) {
						nb_line_tDBInput_2++;

						if (colQtyInRs_tDBInput_2 < 1) {
							row18.NAME = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(1);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2.contains(
										rsmd_tDBInput_2.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
									row18.NAME = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row18.NAME = tmpContent_tDBInput_2;
								}
							} else {
								row18.NAME = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 2) {
							row18.NAME2 = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(2);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2.contains(
										rsmd_tDBInput_2.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
									row18.NAME2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row18.NAME2 = tmpContent_tDBInput_2;
								}
							} else {
								row18.NAME2 = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 3) {
							row18.NAME3 = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(3);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2.contains(
										rsmd_tDBInput_2.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
									row18.NAME3 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row18.NAME3 = tmpContent_tDBInput_2;
								}
							} else {
								row18.NAME3 = null;
							}
						}

						/**
						 * [tDBInput_2 begin ] stop
						 */

						/**
						 * [tDBInput_2 main ] start
						 */

						currentComponent = "tDBInput_2";

						tos_count_tDBInput_2++;

						/**
						 * [tDBInput_2 main ] stop
						 */

						/**
						 * [tDBInput_2 process_data_begin ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row18 main ] start
						 */

						currentComponent = "tAdvancedHash_row18";

						row18Struct row18_HashRow = new row18Struct();

						row18_HashRow.NAME = row18.NAME;

						row18_HashRow.NAME2 = row18.NAME2;

						row18_HashRow.NAME3 = row18.NAME3;

						tHash_Lookup_row18.put(row18_HashRow);

						tos_count_tAdvancedHash_row18++;

						/**
						 * [tAdvancedHash_row18 main ] stop
						 */

						/**
						 * [tAdvancedHash_row18 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row18";

						/**
						 * [tAdvancedHash_row18 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row18 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row18";

						/**
						 * [tAdvancedHash_row18 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 process_data_end ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 end ] start
						 */

						currentComponent = "tDBInput_2";

					}
				} finally {
					if (rs_tDBInput_2 != null) {
						rs_tDBInput_2.close();
					}
					if (stmt_tDBInput_2 != null) {
						stmt_tDBInput_2.close();
					}
					if (conn_tDBInput_2 != null && !conn_tDBInput_2.isClosed()) {

						conn_tDBInput_2.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_2_NB_LINE", nb_line_tDBInput_2);

				ok_Hash.put("tDBInput_2", true);
				end_Hash.put("tDBInput_2", System.currentTimeMillis());

				/**
				 * [tDBInput_2 end ] stop
				 */

				/**
				 * [tAdvancedHash_row18 end ] start
				 */

				currentComponent = "tAdvancedHash_row18";

				tHash_Lookup_row18.endPut();

				ok_Hash.put("tAdvancedHash_row18", true);
				end_Hash.put("tAdvancedHash_row18", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row18 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_2 finally ] start
				 */

				currentComponent = "tDBInput_2";

				/**
				 * [tDBInput_2 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row18 finally ] start
				 */

				currentComponent = "tAdvancedHash_row18";

				/**
				 * [tAdvancedHash_row18 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}

	public static class row19Struct implements routines.system.IPersistableComparableLookupRow<row19Struct> {
		final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[0];
		static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String NAME;

		public String getNAME() {
			return this.NAME;
		}

		public String NAME2;

		public String getNAME2() {
			return this.NAME2;
		}

		public String NAME3;

		public String getNAME3() {
			return this.NAME3;
		}

		public String PARENTCODE;

		public String getPARENTCODE() {
			return this.PARENTCODE;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.NAME3 == null) ? 0 : this.NAME3.hashCode());

				result = prime * result + ((this.PARENTCODE == null) ? 0 : this.PARENTCODE.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row19Struct other = (row19Struct) obj;

			if (this.NAME3 == null) {
				if (other.NAME3 != null)
					return false;

			} else if (!this.NAME3.equals(other.NAME3))

				return false;

			if (this.PARENTCODE == null) {
				if (other.PARENTCODE != null)
					return false;

			} else if (!this.PARENTCODE.equals(other.PARENTCODE))

				return false;

			return true;
		}

		public void copyDataTo(row19Struct other) {

			other.NAME = this.NAME;
			other.NAME2 = this.NAME2;
			other.NAME3 = this.NAME3;
			other.PARENTCODE = this.PARENTCODE;

		}

		public void copyKeysDataTo(row19Struct other) {

			other.NAME3 = this.NAME3;
			other.PARENTCODE = this.PARENTCODE;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2.length) {
					if (length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2.length == 0) {
						commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[1024];
					} else {
						commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2, 0, length);
				strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_2) {

				try {

					int length = 0;

					this.NAME3 = readString(dis);

					this.PARENTCODE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.NAME3, dos);

				// String

				writeString(this.PARENTCODE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.NAME = readString(dis, ois);

				this.NAME2 = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.NAME, dos, oos);

				writeString(this.NAME2, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("NAME=" + NAME);
			sb.append(",NAME2=" + NAME2);
			sb.append(",NAME3=" + NAME3);
			sb.append(",PARENTCODE=" + PARENTCODE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row19Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.NAME3, other.NAME3);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.PARENTCODE, other.PARENTCODE);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row19Struct row19 = new row19Struct();

				/**
				 * [tAdvancedHash_row19 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row19", false);
				start_Hash.put("tAdvancedHash_row19", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row19";

				int tos_count_tAdvancedHash_row19 = 0;

				// connection name:row19
				// source node:tDBInput_3 - inputs:(after_tDBInput_6) outputs:(row19,row19) |
				// target node:tAdvancedHash_row19 - inputs:(row19) outputs:()
				// linked node: tMap_7 - inputs:(copyOfcopyOfsortie_fashion,row18,row19,sortie)
				// outputs:(sortie_Excel)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row19 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row19Struct> tHash_Lookup_row19 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row19Struct>getLookup(matchingModeEnum_row19);

				globalMap.put("tHash_Lookup_row19", tHash_Lookup_row19);

				/**
				 * [tAdvancedHash_row19 begin ] stop
				 */

				/**
				 * [tDBInput_3 begin ] start
				 */

				ok_Hash.put("tDBInput_3", false);
				start_Hash.put("tDBInput_3", System.currentTimeMillis());

				currentComponent = "tDBInput_3";

				int tos_count_tDBInput_3 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_3 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_3 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_3 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_3, talendToDBArray_tDBInput_3);
				int nb_line_tDBInput_3 = 0;
				java.sql.Connection conn_tDBInput_3 = null;
				String driverClass_tDBInput_3 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
				java.lang.Class jdbcclazz_tDBInput_3 = java.lang.Class.forName(driverClass_tDBInput_3);
				String dbUser_tDBInput_3 = context.SQLSERVER_Login;

				final String decryptedPassword_tDBInput_3 = context.SQLSERVER_Password;

				String dbPwd_tDBInput_3 = decryptedPassword_tDBInput_3;

				String port_tDBInput_3 = context.SQLSERVER_Port;
				String dbname_tDBInput_3 = context.SQLSERVER_Database;
				String url_tDBInput_3 = "jdbc:sqlserver://" + context.SQLSERVER_Server;
				if (!"".equals(port_tDBInput_3)) {
					url_tDBInput_3 += ":" + context.SQLSERVER_Port;
				}
				if (!"".equals(dbname_tDBInput_3)) {
					url_tDBInput_3 += ";databaseName=" + context.SQLSERVER_Database;
				}
				url_tDBInput_3 += ";appName=" + projectName + ";" + context.SQLSERVER_AdditionalParams;
				String dbschema_tDBInput_3 = context.SQLSERVER_Schema;

				conn_tDBInput_3 = java.sql.DriverManager.getConnection(url_tDBInput_3, dbUser_tDBInput_3,
						dbPwd_tDBInput_3);

				java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

				String dbquery_tDBInput_3 = "\n\n\nselect CATEGORYNAME AS NAME, PRODUCTCATEGORYHIERARCHYNAME as NAME2,FRIENDLYCATEGORYNAME as NAME3, LEFT(PARENTPROD"
						+ "UCTCATEGORYNAME,2) as PARENTCODE from  data.D365_ProductCategories\nwhere PARENTPRODUCTCATEGORYHIERARCHYNAME = 'Product "
						+ "Family Hierarchy'\nand PARENTPRODUCTCATEGORYNAME != 'Product Family Hierarchy'\nunion\nSelect 'TX-SS TEE+ATTACHMENT', 'P"
						+ "RODUCT FAMILY HIERARCHY','TX-SS TEE+ATTACHMENT','KT'\n\n\n";

				globalMap.put("tDBInput_3_QUERY", dbquery_tDBInput_3);
				java.sql.ResultSet rs_tDBInput_3 = null;

				try {
					rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
					java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
					int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

					String tmpContent_tDBInput_3 = null;

					while (rs_tDBInput_3.next()) {
						nb_line_tDBInput_3++;

						if (colQtyInRs_tDBInput_3 < 1) {
							row19.NAME = null;
						} else {

							tmpContent_tDBInput_3 = rs_tDBInput_3.getString(1);
							if (tmpContent_tDBInput_3 != null) {
								if (talendToDBList_tDBInput_3.contains(
										rsmd_tDBInput_3.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
									row19.NAME = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
								} else {
									row19.NAME = tmpContent_tDBInput_3;
								}
							} else {
								row19.NAME = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 2) {
							row19.NAME2 = null;
						} else {

							tmpContent_tDBInput_3 = rs_tDBInput_3.getString(2);
							if (tmpContent_tDBInput_3 != null) {
								if (talendToDBList_tDBInput_3.contains(
										rsmd_tDBInput_3.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
									row19.NAME2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
								} else {
									row19.NAME2 = tmpContent_tDBInput_3;
								}
							} else {
								row19.NAME2 = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 3) {
							row19.NAME3 = null;
						} else {

							tmpContent_tDBInput_3 = rs_tDBInput_3.getString(3);
							if (tmpContent_tDBInput_3 != null) {
								if (talendToDBList_tDBInput_3.contains(
										rsmd_tDBInput_3.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
									row19.NAME3 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
								} else {
									row19.NAME3 = tmpContent_tDBInput_3;
								}
							} else {
								row19.NAME3 = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 4) {
							row19.PARENTCODE = null;
						} else {

							tmpContent_tDBInput_3 = rs_tDBInput_3.getString(4);
							if (tmpContent_tDBInput_3 != null) {
								if (talendToDBList_tDBInput_3.contains(
										rsmd_tDBInput_3.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
									row19.PARENTCODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
								} else {
									row19.PARENTCODE = tmpContent_tDBInput_3;
								}
							} else {
								row19.PARENTCODE = null;
							}
						}

						/**
						 * [tDBInput_3 begin ] stop
						 */

						/**
						 * [tDBInput_3 main ] start
						 */

						currentComponent = "tDBInput_3";

						tos_count_tDBInput_3++;

						/**
						 * [tDBInput_3 main ] stop
						 */

						/**
						 * [tDBInput_3 process_data_begin ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row19 main ] start
						 */

						currentComponent = "tAdvancedHash_row19";

						row19Struct row19_HashRow = new row19Struct();

						row19_HashRow.NAME = row19.NAME;

						row19_HashRow.NAME2 = row19.NAME2;

						row19_HashRow.NAME3 = row19.NAME3;

						row19_HashRow.PARENTCODE = row19.PARENTCODE;

						tHash_Lookup_row19.put(row19_HashRow);

						tos_count_tAdvancedHash_row19++;

						/**
						 * [tAdvancedHash_row19 main ] stop
						 */

						/**
						 * [tAdvancedHash_row19 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row19";

						/**
						 * [tAdvancedHash_row19 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row19 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row19";

						/**
						 * [tAdvancedHash_row19 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 process_data_end ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 end ] start
						 */

						currentComponent = "tDBInput_3";

					}
				} finally {
					if (rs_tDBInput_3 != null) {
						rs_tDBInput_3.close();
					}
					if (stmt_tDBInput_3 != null) {
						stmt_tDBInput_3.close();
					}
					if (conn_tDBInput_3 != null && !conn_tDBInput_3.isClosed()) {

						conn_tDBInput_3.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_3_NB_LINE", nb_line_tDBInput_3);

				ok_Hash.put("tDBInput_3", true);
				end_Hash.put("tDBInput_3", System.currentTimeMillis());

				/**
				 * [tDBInput_3 end ] stop
				 */

				/**
				 * [tAdvancedHash_row19 end ] start
				 */

				currentComponent = "tAdvancedHash_row19";

				tHash_Lookup_row19.endPut();

				ok_Hash.put("tAdvancedHash_row19", true);
				end_Hash.put("tAdvancedHash_row19", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row19 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_3 finally ] start
				 */

				currentComponent = "tDBInput_3";

				/**
				 * [tDBInput_3 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row19 finally ] start
				 */

				currentComponent = "tAdvancedHash_row19";

				/**
				 * [tAdvancedHash_row19 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}

	public static class row25Struct implements routines.system.IPersistableComparableLookupRow<row25Struct> {
		final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[0];
		static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String NAME;

		public String getNAME() {
			return this.NAME;
		}

		public String NAME2;

		public String getNAME2() {
			return this.NAME2;
		}

		public String NAME3;

		public String getNAME3() {
			return this.NAME3;
		}

		public String CATEGORYCODE;

		public String getCATEGORYCODE() {
			return this.CATEGORYCODE;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.NAME3 == null) ? 0 : this.NAME3.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row25Struct other = (row25Struct) obj;

			if (this.NAME3 == null) {
				if (other.NAME3 != null)
					return false;

			} else if (!this.NAME3.equals(other.NAME3))

				return false;

			return true;
		}

		public void copyDataTo(row25Struct other) {

			other.NAME = this.NAME;
			other.NAME2 = this.NAME2;
			other.NAME3 = this.NAME3;
			other.CATEGORYCODE = this.CATEGORYCODE;

		}

		public void copyKeysDataTo(row25Struct other) {

			other.NAME3 = this.NAME3;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2.length) {
					if (length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2.length == 0) {
						commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[1024];
					} else {
						commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2, 0, length);
				strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_2) {

				try {

					int length = 0;

					this.NAME3 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.NAME3, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.NAME = readString(dis, ois);

				this.NAME2 = readString(dis, ois);

				this.CATEGORYCODE = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.NAME, dos, oos);

				writeString(this.NAME2, dos, oos);

				writeString(this.CATEGORYCODE, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("NAME=" + NAME);
			sb.append(",NAME2=" + NAME2);
			sb.append(",NAME3=" + NAME3);
			sb.append(",CATEGORYCODE=" + CATEGORYCODE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row25Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.NAME3, other.NAME3);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row25Struct row25 = new row25Struct();

				/**
				 * [tAdvancedHash_row25 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row25", false);
				start_Hash.put("tAdvancedHash_row25", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row25";

				int tos_count_tAdvancedHash_row25 = 0;

				// connection name:row25
				// source node:tDBInput_4 - inputs:(after_tDBInput_6) outputs:(row25,row25) |
				// target node:tAdvancedHash_row25 - inputs:(row25) outputs:()
				// linked node: tMap_12 - inputs:(row25,row7) outputs:(sortie)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row25 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row25Struct> tHash_Lookup_row25 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row25Struct>getLookup(matchingModeEnum_row25);

				globalMap.put("tHash_Lookup_row25", tHash_Lookup_row25);

				/**
				 * [tAdvancedHash_row25 begin ] stop
				 */

				/**
				 * [tDBInput_4 begin ] start
				 */

				ok_Hash.put("tDBInput_4", false);
				start_Hash.put("tDBInput_4", System.currentTimeMillis());

				currentComponent = "tDBInput_4";

				int tos_count_tDBInput_4 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_4 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_4 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_4 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_4, talendToDBArray_tDBInput_4);
				int nb_line_tDBInput_4 = 0;
				java.sql.Connection conn_tDBInput_4 = null;
				String driverClass_tDBInput_4 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
				java.lang.Class jdbcclazz_tDBInput_4 = java.lang.Class.forName(driverClass_tDBInput_4);
				String dbUser_tDBInput_4 = context.SQLSERVER_Login;

				final String decryptedPassword_tDBInput_4 = context.SQLSERVER_Password;

				String dbPwd_tDBInput_4 = decryptedPassword_tDBInput_4;

				String port_tDBInput_4 = context.SQLSERVER_Port;
				String dbname_tDBInput_4 = context.SQLSERVER_Database;
				String url_tDBInput_4 = "jdbc:sqlserver://" + context.SQLSERVER_Server;
				if (!"".equals(port_tDBInput_4)) {
					url_tDBInput_4 += ":" + context.SQLSERVER_Port;
				}
				if (!"".equals(dbname_tDBInput_4)) {
					url_tDBInput_4 += ";databaseName=" + context.SQLSERVER_Database;
				}
				url_tDBInput_4 += ";appName=" + projectName + ";" + context.SQLSERVER_AdditionalParams;
				String dbschema_tDBInput_4 = context.SQLSERVER_Schema;

				conn_tDBInput_4 = java.sql.DriverManager.getConnection(url_tDBInput_4, dbUser_tDBInput_4,
						dbPwd_tDBInput_4);

				java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();

				String dbquery_tDBInput_4 = "\nselect CATEGORYNAME AS NAME, PRODUCTCATEGORYHIERARCHYNAME as NAME2,FRIENDLYCATEGORYNAME  as NAME3,LEFT(CATEGORYNAME,2"
						+ ") as CATEGORYCODE \nfrom  data.D365_ProductCategories\nwhere PARENTPRODUCTCATEGORYHIERARCHYNAME = 'Product Family Hierar"
						+ "chy'\nand PARENTPRODUCTCATEGORYNAME = 'Product Family Hierarchy'\n\n";

				globalMap.put("tDBInput_4_QUERY", dbquery_tDBInput_4);
				java.sql.ResultSet rs_tDBInput_4 = null;

				try {
					rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
					java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
					int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

					String tmpContent_tDBInput_4 = null;

					while (rs_tDBInput_4.next()) {
						nb_line_tDBInput_4++;

						if (colQtyInRs_tDBInput_4 < 1) {
							row25.NAME = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(1);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
									row25.NAME = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row25.NAME = tmpContent_tDBInput_4;
								}
							} else {
								row25.NAME = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 2) {
							row25.NAME2 = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(2);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
									row25.NAME2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row25.NAME2 = tmpContent_tDBInput_4;
								}
							} else {
								row25.NAME2 = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 3) {
							row25.NAME3 = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(3);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
									row25.NAME3 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row25.NAME3 = tmpContent_tDBInput_4;
								}
							} else {
								row25.NAME3 = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 4) {
							row25.CATEGORYCODE = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(4);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
									row25.CATEGORYCODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row25.CATEGORYCODE = tmpContent_tDBInput_4;
								}
							} else {
								row25.CATEGORYCODE = null;
							}
						}

						/**
						 * [tDBInput_4 begin ] stop
						 */

						/**
						 * [tDBInput_4 main ] start
						 */

						currentComponent = "tDBInput_4";

						tos_count_tDBInput_4++;

						/**
						 * [tDBInput_4 main ] stop
						 */

						/**
						 * [tDBInput_4 process_data_begin ] start
						 */

						currentComponent = "tDBInput_4";

						/**
						 * [tDBInput_4 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row25 main ] start
						 */

						currentComponent = "tAdvancedHash_row25";

						row25Struct row25_HashRow = new row25Struct();

						row25_HashRow.NAME = row25.NAME;

						row25_HashRow.NAME2 = row25.NAME2;

						row25_HashRow.NAME3 = row25.NAME3;

						row25_HashRow.CATEGORYCODE = row25.CATEGORYCODE;

						tHash_Lookup_row25.put(row25_HashRow);

						tos_count_tAdvancedHash_row25++;

						/**
						 * [tAdvancedHash_row25 main ] stop
						 */

						/**
						 * [tAdvancedHash_row25 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row25";

						/**
						 * [tAdvancedHash_row25 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row25 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row25";

						/**
						 * [tAdvancedHash_row25 process_data_end ] stop
						 */

						/**
						 * [tDBInput_4 process_data_end ] start
						 */

						currentComponent = "tDBInput_4";

						/**
						 * [tDBInput_4 process_data_end ] stop
						 */

						/**
						 * [tDBInput_4 end ] start
						 */

						currentComponent = "tDBInput_4";

					}
				} finally {
					if (rs_tDBInput_4 != null) {
						rs_tDBInput_4.close();
					}
					if (stmt_tDBInput_4 != null) {
						stmt_tDBInput_4.close();
					}
					if (conn_tDBInput_4 != null && !conn_tDBInput_4.isClosed()) {

						conn_tDBInput_4.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_4_NB_LINE", nb_line_tDBInput_4);

				ok_Hash.put("tDBInput_4", true);
				end_Hash.put("tDBInput_4", System.currentTimeMillis());

				/**
				 * [tDBInput_4 end ] stop
				 */

				/**
				 * [tAdvancedHash_row25 end ] start
				 */

				currentComponent = "tAdvancedHash_row25";

				tHash_Lookup_row25.endPut();

				ok_Hash.put("tAdvancedHash_row25", true);
				end_Hash.put("tAdvancedHash_row25", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row25 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_4 finally ] start
				 */

				currentComponent = "tDBInput_4";

				/**
				 * [tDBInput_4 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row25 finally ] start
				 */

				currentComponent = "tAdvancedHash_row25";

				/**
				 * [tAdvancedHash_row25 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}

	public static class row28Struct implements routines.system.IPersistableComparableLookupRow<row28Struct> {
		final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[0];
		static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String STYLE;

		public String getSTYLE() {
			return this.STYLE;
		}

		public String SEASON;

		public String getSEASON() {
			return this.SEASON;
		}

		public String ISDEFAULT;

		public String getISDEFAULT() {
			return this.ISDEFAULT;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.STYLE == null) ? 0 : this.STYLE.hashCode());

				result = prime * result + ((this.SEASON == null) ? 0 : this.SEASON.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row28Struct other = (row28Struct) obj;

			if (this.STYLE == null) {
				if (other.STYLE != null)
					return false;

			} else if (!this.STYLE.equals(other.STYLE))

				return false;

			if (this.SEASON == null) {
				if (other.SEASON != null)
					return false;

			} else if (!this.SEASON.equals(other.SEASON))

				return false;

			return true;
		}

		public void copyDataTo(row28Struct other) {

			other.STYLE = this.STYLE;
			other.SEASON = this.SEASON;
			other.ISDEFAULT = this.ISDEFAULT;

		}

		public void copyKeysDataTo(row28Struct other) {

			other.STYLE = this.STYLE;
			other.SEASON = this.SEASON;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2.length) {
					if (length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2.length == 0) {
						commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[1024];
					} else {
						commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2, 0, length);
				strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_2) {

				try {

					int length = 0;

					this.STYLE = readString(dis);

					this.SEASON = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.STYLE, dos);

				// String

				writeString(this.SEASON, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.ISDEFAULT = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.ISDEFAULT, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("STYLE=" + STYLE);
			sb.append(",SEASON=" + SEASON);
			sb.append(",ISDEFAULT=" + ISDEFAULT);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row28Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.STYLE, other.STYLE);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.SEASON, other.SEASON);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row28Struct row28 = new row28Struct();

				/**
				 * [tAdvancedHash_row28 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row28", false);
				start_Hash.put("tAdvancedHash_row28", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row28";

				int tos_count_tAdvancedHash_row28 = 0;

				// connection name:row28
				// source node:tDBInput_5 - inputs:(after_tDBInput_6) outputs:(row28,row28) |
				// target node:tAdvancedHash_row28 - inputs:(row28) outputs:()
				// linked node: tMap_5 - inputs:(copyOfsortie_full_2,row28)
				// outputs:(copyOfcopyOfsortie_full,copyOfcopyOfsortie_product)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row28 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row28Struct> tHash_Lookup_row28 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row28Struct>getLookup(matchingModeEnum_row28);

				globalMap.put("tHash_Lookup_row28", tHash_Lookup_row28);

				/**
				 * [tAdvancedHash_row28 begin ] stop
				 */

				/**
				 * [tDBInput_5 begin ] start
				 */

				ok_Hash.put("tDBInput_5", false);
				start_Hash.put("tDBInput_5", System.currentTimeMillis());

				currentComponent = "tDBInput_5";

				int tos_count_tDBInput_5 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_5 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_5 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_5 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_5, talendToDBArray_tDBInput_5);
				int nb_line_tDBInput_5 = 0;
				java.sql.Connection conn_tDBInput_5 = null;
				String driverClass_tDBInput_5 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
				java.lang.Class jdbcclazz_tDBInput_5 = java.lang.Class.forName(driverClass_tDBInput_5);
				String dbUser_tDBInput_5 = context.SQLSERVER_Login;

				final String decryptedPassword_tDBInput_5 = context.SQLSERVER_Password;

				String dbPwd_tDBInput_5 = decryptedPassword_tDBInput_5;

				String port_tDBInput_5 = context.SQLSERVER_Port;
				String dbname_tDBInput_5 = context.SQLSERVER_Database;
				String url_tDBInput_5 = "jdbc:sqlserver://" + context.SQLSERVER_Server;
				if (!"".equals(port_tDBInput_5)) {
					url_tDBInput_5 += ":" + context.SQLSERVER_Port;
				}
				if (!"".equals(dbname_tDBInput_5)) {
					url_tDBInput_5 += ";databaseName=" + context.SQLSERVER_Database;
				}
				url_tDBInput_5 += ";appName=" + projectName + ";" + context.SQLSERVER_AdditionalParams;
				String dbschema_tDBInput_5 = context.SQLSERVER_Schema;

				conn_tDBInput_5 = java.sql.DriverManager.getConnection(url_tDBInput_5, dbUser_tDBInput_5,
						dbPwd_tDBInput_5);

				java.sql.Statement stmt_tDBInput_5 = conn_tDBInput_5.createStatement();

				String dbquery_tDBInput_5 = "select distinct masterfile.products.STYLE, masterfile.products.SEASON ,\ncase when maxStyleSeason.maxSeason is null the"
						+ "n 'No' else 'Yes' end as ISDEFAULT\nfrom masterfile.products\nleft outer join\n(\n		select \n		ROW_NUMBER() OVER(ORDER B"
						+ "Y ANNEE,Ordre ASC) AS LineNumber,\n		SEASONORDERED.SEASONCODE from\n		(\n			select \n			case when left(SEASONCODE,2) = '"
						+ "SP' then 1 else \n			case when left(SEASONCODE,2) = 'HO' then 4 else \n			case when left(SEASONCODE,2) = 'SU' then 2 els"
						+ "e \n			case when left(SEASONCODE,2) = 'FA' then 3 else -1\n			end end end end as Ordre,right(SEASONCODE,2) as ANNEE, SEA"
						+ "SONCODE from [data].[D365_K3FashionRetailSeasons]\n		) as SEASONORDERED \n) as ORDERED on ORDERED.SEASONCODE = masterfil"
						+ "e.products.SEASON\nleft outer join\n	(\n		select STYLE,MAX( SEASON.LineNumber) maxSeason \n		from masterfile.products\n	"
						+ "	left outer join \n		(\n			select \n			ROW_NUMBER() OVER(ORDER BY ANNEE,Ordre ASC) AS LineNumber,\n			SEASONORDERED.SEAS"
						+ "ONCODE from\n			(\n				select \n			    case when left(SEASONCODE,2) = 'SP' then 1 else \n			    case when left(SEASONCOD"
						+ "E,2) = 'HO' then 4 else \n			    case when left(SEASONCODE,2) = 'SU' then 2 else \n			    case when left(SEASONCODE,2) ="
						+ " 'FA' then 3 else -1\n				end end end end as Ordre,right(SEASONCODE,2) as ANNEE, SEASONCODE from [data].[D365_K3FashionR"
						+ "etailSeasons]\n			) as SEASONORDERED \n		) as SEASON on masterfile.products.SEASON = SEASON.SEASONCODE\n		where masterfi"
						+ "le.products.productExtractDate is null and masterfile.products.fileName = " + "'"
						+ context.ExcelFileName + "'" + " and masterfile.products.CreationDate = " + "'"
						+ context.CreationDate + "'"
						+ " GROUP BY STYLE\n	) as maxStyleSeason on maxStyleSeason.STYLE = masterfile.products.STYLE  and maxStyleSeason.maxSeason"
						+ " =  ORDERED.LineNumber\nwhere masterfile.products.productExtractDate is null and masterfile.products.fileName = "
						+ "'" + context.ExcelFileName + "'" + " and masterfile.products.CreationDate = " + "'"
						+ context.CreationDate + "'";

				globalMap.put("tDBInput_5_QUERY", dbquery_tDBInput_5);
				java.sql.ResultSet rs_tDBInput_5 = null;

				try {
					rs_tDBInput_5 = stmt_tDBInput_5.executeQuery(dbquery_tDBInput_5);
					java.sql.ResultSetMetaData rsmd_tDBInput_5 = rs_tDBInput_5.getMetaData();
					int colQtyInRs_tDBInput_5 = rsmd_tDBInput_5.getColumnCount();

					String tmpContent_tDBInput_5 = null;

					while (rs_tDBInput_5.next()) {
						nb_line_tDBInput_5++;

						if (colQtyInRs_tDBInput_5 < 1) {
							row28.STYLE = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(1);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
									row28.STYLE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row28.STYLE = tmpContent_tDBInput_5;
								}
							} else {
								row28.STYLE = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 2) {
							row28.SEASON = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(2);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
									row28.SEASON = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row28.SEASON = tmpContent_tDBInput_5;
								}
							} else {
								row28.SEASON = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 3) {
							row28.ISDEFAULT = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(3);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
									row28.ISDEFAULT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row28.ISDEFAULT = tmpContent_tDBInput_5;
								}
							} else {
								row28.ISDEFAULT = null;
							}
						}

						/**
						 * [tDBInput_5 begin ] stop
						 */

						/**
						 * [tDBInput_5 main ] start
						 */

						currentComponent = "tDBInput_5";

						tos_count_tDBInput_5++;

						/**
						 * [tDBInput_5 main ] stop
						 */

						/**
						 * [tDBInput_5 process_data_begin ] start
						 */

						currentComponent = "tDBInput_5";

						/**
						 * [tDBInput_5 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row28 main ] start
						 */

						currentComponent = "tAdvancedHash_row28";

						row28Struct row28_HashRow = new row28Struct();

						row28_HashRow.STYLE = row28.STYLE;

						row28_HashRow.SEASON = row28.SEASON;

						row28_HashRow.ISDEFAULT = row28.ISDEFAULT;

						tHash_Lookup_row28.put(row28_HashRow);

						tos_count_tAdvancedHash_row28++;

						/**
						 * [tAdvancedHash_row28 main ] stop
						 */

						/**
						 * [tAdvancedHash_row28 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row28";

						/**
						 * [tAdvancedHash_row28 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row28 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row28";

						/**
						 * [tAdvancedHash_row28 process_data_end ] stop
						 */

						/**
						 * [tDBInput_5 process_data_end ] start
						 */

						currentComponent = "tDBInput_5";

						/**
						 * [tDBInput_5 process_data_end ] stop
						 */

						/**
						 * [tDBInput_5 end ] start
						 */

						currentComponent = "tDBInput_5";

					}
				} finally {
					if (rs_tDBInput_5 != null) {
						rs_tDBInput_5.close();
					}
					if (stmt_tDBInput_5 != null) {
						stmt_tDBInput_5.close();
					}
					if (conn_tDBInput_5 != null && !conn_tDBInput_5.isClosed()) {

						conn_tDBInput_5.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_5_NB_LINE", nb_line_tDBInput_5);

				ok_Hash.put("tDBInput_5", true);
				end_Hash.put("tDBInput_5", System.currentTimeMillis());

				/**
				 * [tDBInput_5 end ] stop
				 */

				/**
				 * [tAdvancedHash_row28 end ] start
				 */

				currentComponent = "tAdvancedHash_row28";

				tHash_Lookup_row28.endPut();

				ok_Hash.put("tAdvancedHash_row28", true);
				end_Hash.put("tAdvancedHash_row28", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row28 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_5 finally ] start
				 */

				currentComponent = "tDBInput_5";

				/**
				 * [tDBInput_5 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row28 finally ] start
				 */

				currentComponent = "tAdvancedHash_row28";

				/**
				 * [tAdvancedHash_row28 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 1);
	}

	public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[0];
		static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[0];

		public String PRODUCTNUMBER;

		public String getPRODUCTNUMBER() {
			return this.PRODUCTNUMBER;
		}

		public String PRODUCTCATEGORYNAME;

		public String getPRODUCTCATEGORYNAME() {
			return this.PRODUCTCATEGORYNAME;
		}

		public String PRODUCTCATEGORYHIERARCHYNAME;

		public String getPRODUCTCATEGORYHIERARCHYNAME() {
			return this.PRODUCTCATEGORYHIERARCHYNAME;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2.length) {
					if (length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2.length == 0) {
						commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[1024];
					} else {
						commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2, 0, length);
				strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_2) {

				try {

					int length = 0;

					this.PRODUCTNUMBER = readString(dis);

					this.PRODUCTCATEGORYNAME = readString(dis);

					this.PRODUCTCATEGORYHIERARCHYNAME = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PRODUCTNUMBER, dos);

				// String

				writeString(this.PRODUCTCATEGORYNAME, dos);

				// String

				writeString(this.PRODUCTCATEGORYHIERARCHYNAME, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PRODUCTNUMBER=" + PRODUCTNUMBER);
			sb.append(",PRODUCTCATEGORYNAME=" + PRODUCTCATEGORYNAME);
			sb.append(",PRODUCTCATEGORYHIERARCHYNAME=" + PRODUCTCATEGORYHIERARCHYNAME);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[0];
		static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[0];

		public String ITEMID;

		public String getITEMID() {
			return this.ITEMID;
		}

		public String SEASONCODE;

		public String getSEASONCODE() {
			return this.SEASONCODE;
		}

		public String ISDEFAULT;

		public String getISDEFAULT() {
			return this.ISDEFAULT;
		}

		public String NOOS;

		public String getNOOS() {
			return this.NOOS;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2.length) {
					if (length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2.length == 0) {
						commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[1024];
					} else {
						commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2, 0, length);
				strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_2) {

				try {

					int length = 0;

					this.ITEMID = readString(dis);

					this.SEASONCODE = readString(dis);

					this.ISDEFAULT = readString(dis);

					this.NOOS = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ITEMID, dos);

				// String

				writeString(this.SEASONCODE, dos);

				// String

				writeString(this.ISDEFAULT, dos);

				// String

				writeString(this.NOOS, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ITEMID=" + ITEMID);
			sb.append(",SEASONCODE=" + SEASONCODE);
			sb.append(",ISDEFAULT=" + ISDEFAULT);
			sb.append(",NOOS=" + NOOS);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row37Struct implements routines.system.IPersistableRow<row37Struct> {
		final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[0];
		static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[0];

		public String PRODUCTMASTERNUMBER;

		public String getPRODUCTMASTERNUMBER() {
			return this.PRODUCTMASTERNUMBER;
		}

		public String PRODUCTMASTERSIZEID;

		public String getPRODUCTMASTERSIZEID() {
			return this.PRODUCTMASTERSIZEID;
		}

		public String LANGUAGEID;

		public String getLANGUAGEID() {
			return this.LANGUAGEID;
		}

		public String TRANSLATEDSIZEDESCRIPTION;

		public String getTRANSLATEDSIZEDESCRIPTION() {
			return this.TRANSLATEDSIZEDESCRIPTION;
		}

		public String TRANSLATEDSIZENAME;

		public String getTRANSLATEDSIZENAME() {
			return this.TRANSLATEDSIZENAME;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2.length) {
					if (length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2.length == 0) {
						commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[1024];
					} else {
						commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2, 0, length);
				strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_2) {

				try {

					int length = 0;

					this.PRODUCTMASTERNUMBER = readString(dis);

					this.PRODUCTMASTERSIZEID = readString(dis);

					this.LANGUAGEID = readString(dis);

					this.TRANSLATEDSIZEDESCRIPTION = readString(dis);

					this.TRANSLATEDSIZENAME = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PRODUCTMASTERNUMBER, dos);

				// String

				writeString(this.PRODUCTMASTERSIZEID, dos);

				// String

				writeString(this.LANGUAGEID, dos);

				// String

				writeString(this.TRANSLATEDSIZEDESCRIPTION, dos);

				// String

				writeString(this.TRANSLATEDSIZENAME, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PRODUCTMASTERNUMBER=" + PRODUCTMASTERNUMBER);
			sb.append(",PRODUCTMASTERSIZEID=" + PRODUCTMASTERSIZEID);
			sb.append(",LANGUAGEID=" + LANGUAGEID);
			sb.append(",TRANSLATEDSIZEDESCRIPTION=" + TRANSLATEDSIZEDESCRIPTION);
			sb.append(",TRANSLATEDSIZENAME=" + TRANSLATEDSIZENAME);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row37Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row17Struct implements routines.system.IPersistableRow<row17Struct> {
		final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[0];
		static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[0];

		public String PRODUCTMASTERNUMBER;

		public String getPRODUCTMASTERNUMBER() {
			return this.PRODUCTMASTERNUMBER;
		}

		public String PRODUCTMASTERSTYLEID;

		public String getPRODUCTMASTERSTYLEID() {
			return this.PRODUCTMASTERSTYLEID;
		}

		public String LANGUAGEID;

		public String getLANGUAGEID() {
			return this.LANGUAGEID;
		}

		public String TRANSLATEDSTYLEDESCRIPTION;

		public String getTRANSLATEDSTYLEDESCRIPTION() {
			return this.TRANSLATEDSTYLEDESCRIPTION;
		}

		public String TRANSLATEDSTYLENAME;

		public String getTRANSLATEDSTYLENAME() {
			return this.TRANSLATEDSTYLENAME;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2.length) {
					if (length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2.length == 0) {
						commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[1024];
					} else {
						commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2, 0, length);
				strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_2) {

				try {

					int length = 0;

					this.PRODUCTMASTERNUMBER = readString(dis);

					this.PRODUCTMASTERSTYLEID = readString(dis);

					this.LANGUAGEID = readString(dis);

					this.TRANSLATEDSTYLEDESCRIPTION = readString(dis);

					this.TRANSLATEDSTYLENAME = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PRODUCTMASTERNUMBER, dos);

				// String

				writeString(this.PRODUCTMASTERSTYLEID, dos);

				// String

				writeString(this.LANGUAGEID, dos);

				// String

				writeString(this.TRANSLATEDSTYLEDESCRIPTION, dos);

				// String

				writeString(this.TRANSLATEDSTYLENAME, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PRODUCTMASTERNUMBER=" + PRODUCTMASTERNUMBER);
			sb.append(",PRODUCTMASTERSTYLEID=" + PRODUCTMASTERSTYLEID);
			sb.append(",LANGUAGEID=" + LANGUAGEID);
			sb.append(",TRANSLATEDSTYLEDESCRIPTION=" + TRANSLATEDSTYLEDESCRIPTION);
			sb.append(",TRANSLATEDSTYLENAME=" + TRANSLATEDSTYLENAME);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row17Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row22Struct implements routines.system.IPersistableRow<row22Struct> {
		final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[0];
		static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[0];

		public String ITEMID;

		public String getITEMID() {
			return this.ITEMID;
		}

		public String SEASONCODE;

		public String getSEASONCODE() {
			return this.SEASONCODE;
		}

		public String DROPID;

		public String getDROPID() {
			return this.DROPID;
		}

		public String DISPLAYORDER;

		public String getDISPLAYORDER() {
			return this.DISPLAYORDER;
		}

		public String ISDEFAULT;

		public String getISDEFAULT() {
			return this.ISDEFAULT;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2.length) {
					if (length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2.length == 0) {
						commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[1024];
					} else {
						commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2, 0, length);
				strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_2) {

				try {

					int length = 0;

					this.ITEMID = readString(dis);

					this.SEASONCODE = readString(dis);

					this.DROPID = readString(dis);

					this.DISPLAYORDER = readString(dis);

					this.ISDEFAULT = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ITEMID, dos);

				// String

				writeString(this.SEASONCODE, dos);

				// String

				writeString(this.DROPID, dos);

				// String

				writeString(this.DISPLAYORDER, dos);

				// String

				writeString(this.ISDEFAULT, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ITEMID=" + ITEMID);
			sb.append(",SEASONCODE=" + SEASONCODE);
			sb.append(",DROPID=" + DROPID);
			sb.append(",DISPLAYORDER=" + DISPLAYORDER);
			sb.append(",ISDEFAULT=" + ISDEFAULT);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row22Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row20Struct implements routines.system.IPersistableRow<row20Struct> {
		final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[0];
		static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[0];

		public String ITEMID;

		public String getITEMID() {
			return this.ITEMID;
		}

		public String SEASONCODE;

		public String getSEASONCODE() {
			return this.SEASONCODE;
		}

		public String DROPID;

		public String getDROPID() {
			return this.DROPID;
		}

		public String DISPLAYORDER;

		public String getDISPLAYORDER() {
			return this.DISPLAYORDER;
		}

		public String ISDEFAULT;

		public String getISDEFAULT() {
			return this.ISDEFAULT;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2.length) {
					if (length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2.length == 0) {
						commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[1024];
					} else {
						commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2, 0, length);
				strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_2) {

				try {

					int length = 0;

					this.ITEMID = readString(dis);

					this.SEASONCODE = readString(dis);

					this.DROPID = readString(dis);

					this.DISPLAYORDER = readString(dis);

					this.ISDEFAULT = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ITEMID, dos);

				// String

				writeString(this.SEASONCODE, dos);

				// String

				writeString(this.DROPID, dos);

				// String

				writeString(this.DISPLAYORDER, dos);

				// String

				writeString(this.ISDEFAULT, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ITEMID=" + ITEMID);
			sb.append(",SEASONCODE=" + SEASONCODE);
			sb.append(",DROPID=" + DROPID);
			sb.append(",DISPLAYORDER=" + DISPLAYORDER);
			sb.append(",ISDEFAULT=" + ISDEFAULT);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row20Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOfcopyOfcopyOfcopyOfsortie_size_0Struct
			implements routines.system.IPersistableRow<copyOfcopyOfcopyOfcopyOfsortie_size_0Struct> {
		final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[0];
		static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[0];

		public String ITEMID;

		public String getITEMID() {
			return this.ITEMID;
		}

		public String SEASONCODE;

		public String getSEASONCODE() {
			return this.SEASONCODE;
		}

		public String DROPID;

		public String getDROPID() {
			return this.DROPID;
		}

		public String DISPLAYORDER;

		public String getDISPLAYORDER() {
			return this.DISPLAYORDER;
		}

		public String ISDEFAULT;

		public String getISDEFAULT() {
			return this.ISDEFAULT;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2.length) {
					if (length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2.length == 0) {
						commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[1024];
					} else {
						commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2, 0, length);
				strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_2) {

				try {

					int length = 0;

					this.ITEMID = readString(dis);

					this.SEASONCODE = readString(dis);

					this.DROPID = readString(dis);

					this.DISPLAYORDER = readString(dis);

					this.ISDEFAULT = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ITEMID, dos);

				// String

				writeString(this.SEASONCODE, dos);

				// String

				writeString(this.DROPID, dos);

				// String

				writeString(this.DISPLAYORDER, dos);

				// String

				writeString(this.ISDEFAULT, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ITEMID=" + ITEMID);
			sb.append(",SEASONCODE=" + SEASONCODE);
			sb.append(",DROPID=" + DROPID);
			sb.append(",DISPLAYORDER=" + DISPLAYORDER);
			sb.append(",ISDEFAULT=" + ISDEFAULT);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfcopyOfcopyOfcopyOfsortie_size_0Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOfsortie_full_Struct implements routines.system.IPersistableRow<copyOfsortie_full_Struct> {
		final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[0];
		static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[0];

		public String BRAND;

		public String getBRAND() {
			return this.BRAND;
		}

		public String SEASON;

		public String getSEASON() {
			return this.SEASON;
		}

		public String CATEGORY;

		public String getCATEGORY() {
			return this.CATEGORY;
		}

		public String REF;

		public String getREF() {
			return this.REF;
		}

		public String DESCRIPTION;

		public String getDESCRIPTION() {
			return this.DESCRIPTION;
		}

		public String STYLE;

		public String getSTYLE() {
			return this.STYLE;
		}

		public String COLOR;

		public String getCOLOR() {
			return this.COLOR;
		}

		public String FASHION;

		public String getFASHION() {
			return this.FASHION;
		}

		public String STYLECOLORLABEL;

		public String getSTYLECOLORLABEL() {
			return this.STYLECOLORLABEL;
		}

		public String COLORNAME;

		public String getCOLORNAME() {
			return this.COLORNAME;
		}

		public String LBL;

		public String getLBL() {
			return this.LBL;
		}

		public String STYLE_COLOR;

		public String getSTYLE_COLOR() {
			return this.STYLE_COLOR;
		}

		public String GENDER;

		public String getGENDER() {
			return this.GENDER;
		}

		public String AGE_RANGE;

		public String getAGE_RANGE() {
			return this.AGE_RANGE;
		}

		public String SIZE_RANGE;

		public String getSIZE_RANGE() {
			return this.SIZE_RANGE;
		}

		public String SIZE;

		public String getSIZE() {
			return this.SIZE;
		}

		public String US_SIZE;

		public String getUS_SIZE() {
			return this.US_SIZE;
		}

		public String CM_SIZE;

		public String getCM_SIZE() {
			return this.CM_SIZE;
		}

		public String PRODUCT;

		public String getPRODUCT() {
			return this.PRODUCT;
		}

		public String PRODUCT_STATUS;

		public String getPRODUCT_STATUS() {
			return this.PRODUCT_STATUS;
		}

		public String PRODUCT_TIER;

		public String getPRODUCT_TIER() {
			return this.PRODUCT_TIER;
		}

		public String ACCT_EXCLUS;

		public String getACCT_EXCLUS() {
			return this.ACCT_EXCLUS;
		}

		public String SIZE_RATIO_SPLIT;

		public String getSIZE_RATIO_SPLIT() {
			return this.SIZE_RATIO_SPLIT;
		}

		public String REC_SIZE_SPLIT;

		public String getREC_SIZE_SPLIT() {
			return this.REC_SIZE_SPLIT;
		}

		public String CARTON_QTY;

		public String getCARTON_QTY() {
			return this.CARTON_QTY;
		}

		public String ATTRIBUTE;

		public String getATTRIBUTE() {
			return this.ATTRIBUTE;
		}

		public String UNITS;

		public String getUNITS() {
			return this.UNITS;
		}

		public String EUR_RRP;

		public String getEUR_RRP() {
			return this.EUR_RRP;
		}

		public String EUR_WSP;

		public String getEUR_WSP() {
			return this.EUR_WSP;
		}

		public String GBP_RRP;

		public String getGBP_RRP() {
			return this.GBP_RRP;
		}

		public String GBP_WSP;

		public String getGBP_WSP() {
			return this.GBP_WSP;
		}

		public String CHF_RRP;

		public String getCHF_RRP() {
			return this.CHF_RRP;
		}

		public String CHF_WSP;

		public String getCHF_WSP() {
			return this.CHF_WSP;
		}

		public String NOK_RRP;

		public String getNOK_RRP() {
			return this.NOK_RRP;
		}

		public String NOK_WSP;

		public String getNOK_WSP() {
			return this.NOK_WSP;
		}

		public String DKK_RRP;

		public String getDKK_RRP() {
			return this.DKK_RRP;
		}

		public String DKK_WSP;

		public String getDKK_WSP() {
			return this.DKK_WSP;
		}

		public String SEK_RRP;

		public String getSEK_RRP() {
			return this.SEK_RRP;
		}

		public String SEK_WSP;

		public String getSEK_WSP() {
			return this.SEK_WSP;
		}

		public String EUR_FINN_RRP;

		public String getEUR_FINN_RRP() {
			return this.EUR_FINN_RRP;
		}

		public String EUR_FINN_WSP;

		public String getEUR_FINN_WSP() {
			return this.EUR_FINN_WSP;
		}

		public String FABRICATION;

		public String getFABRICATION() {
			return this.FABRICATION;
		}

		public String COO;

		public String getCOO() {
			return this.COO;
		}

		public String CUSTOM_TARIFF_CODE;

		public String getCUSTOM_TARIFF_CODE() {
			return this.CUSTOM_TARIFF_CODE;
		}

		public String UPC;

		public String getUPC() {
			return this.UPC;
		}

		public String SMU_TYPE;

		public String getSMU_TYPE() {
			return this.SMU_TYPE;
		}

		public String LABELD365;

		public String getLABELD365() {
			return this.LABELD365;
		}

		public String DELIVERYFLOW;

		public String getDELIVERYFLOW() {
			return this.DELIVERYFLOW;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2.length) {
					if (length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2.length == 0) {
						commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[1024];
					} else {
						commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2, 0, length);
				strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_2) {

				try {

					int length = 0;

					this.BRAND = readString(dis);

					this.SEASON = readString(dis);

					this.CATEGORY = readString(dis);

					this.REF = readString(dis);

					this.DESCRIPTION = readString(dis);

					this.STYLE = readString(dis);

					this.COLOR = readString(dis);

					this.FASHION = readString(dis);

					this.STYLECOLORLABEL = readString(dis);

					this.COLORNAME = readString(dis);

					this.LBL = readString(dis);

					this.STYLE_COLOR = readString(dis);

					this.GENDER = readString(dis);

					this.AGE_RANGE = readString(dis);

					this.SIZE_RANGE = readString(dis);

					this.SIZE = readString(dis);

					this.US_SIZE = readString(dis);

					this.CM_SIZE = readString(dis);

					this.PRODUCT = readString(dis);

					this.PRODUCT_STATUS = readString(dis);

					this.PRODUCT_TIER = readString(dis);

					this.ACCT_EXCLUS = readString(dis);

					this.SIZE_RATIO_SPLIT = readString(dis);

					this.REC_SIZE_SPLIT = readString(dis);

					this.CARTON_QTY = readString(dis);

					this.ATTRIBUTE = readString(dis);

					this.UNITS = readString(dis);

					this.EUR_RRP = readString(dis);

					this.EUR_WSP = readString(dis);

					this.GBP_RRP = readString(dis);

					this.GBP_WSP = readString(dis);

					this.CHF_RRP = readString(dis);

					this.CHF_WSP = readString(dis);

					this.NOK_RRP = readString(dis);

					this.NOK_WSP = readString(dis);

					this.DKK_RRP = readString(dis);

					this.DKK_WSP = readString(dis);

					this.SEK_RRP = readString(dis);

					this.SEK_WSP = readString(dis);

					this.EUR_FINN_RRP = readString(dis);

					this.EUR_FINN_WSP = readString(dis);

					this.FABRICATION = readString(dis);

					this.COO = readString(dis);

					this.CUSTOM_TARIFF_CODE = readString(dis);

					this.UPC = readString(dis);

					this.SMU_TYPE = readString(dis);

					this.LABELD365 = readString(dis);

					this.DELIVERYFLOW = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.BRAND, dos);

				// String

				writeString(this.SEASON, dos);

				// String

				writeString(this.CATEGORY, dos);

				// String

				writeString(this.REF, dos);

				// String

				writeString(this.DESCRIPTION, dos);

				// String

				writeString(this.STYLE, dos);

				// String

				writeString(this.COLOR, dos);

				// String

				writeString(this.FASHION, dos);

				// String

				writeString(this.STYLECOLORLABEL, dos);

				// String

				writeString(this.COLORNAME, dos);

				// String

				writeString(this.LBL, dos);

				// String

				writeString(this.STYLE_COLOR, dos);

				// String

				writeString(this.GENDER, dos);

				// String

				writeString(this.AGE_RANGE, dos);

				// String

				writeString(this.SIZE_RANGE, dos);

				// String

				writeString(this.SIZE, dos);

				// String

				writeString(this.US_SIZE, dos);

				// String

				writeString(this.CM_SIZE, dos);

				// String

				writeString(this.PRODUCT, dos);

				// String

				writeString(this.PRODUCT_STATUS, dos);

				// String

				writeString(this.PRODUCT_TIER, dos);

				// String

				writeString(this.ACCT_EXCLUS, dos);

				// String

				writeString(this.SIZE_RATIO_SPLIT, dos);

				// String

				writeString(this.REC_SIZE_SPLIT, dos);

				// String

				writeString(this.CARTON_QTY, dos);

				// String

				writeString(this.ATTRIBUTE, dos);

				// String

				writeString(this.UNITS, dos);

				// String

				writeString(this.EUR_RRP, dos);

				// String

				writeString(this.EUR_WSP, dos);

				// String

				writeString(this.GBP_RRP, dos);

				// String

				writeString(this.GBP_WSP, dos);

				// String

				writeString(this.CHF_RRP, dos);

				// String

				writeString(this.CHF_WSP, dos);

				// String

				writeString(this.NOK_RRP, dos);

				// String

				writeString(this.NOK_WSP, dos);

				// String

				writeString(this.DKK_RRP, dos);

				// String

				writeString(this.DKK_WSP, dos);

				// String

				writeString(this.SEK_RRP, dos);

				// String

				writeString(this.SEK_WSP, dos);

				// String

				writeString(this.EUR_FINN_RRP, dos);

				// String

				writeString(this.EUR_FINN_WSP, dos);

				// String

				writeString(this.FABRICATION, dos);

				// String

				writeString(this.COO, dos);

				// String

				writeString(this.CUSTOM_TARIFF_CODE, dos);

				// String

				writeString(this.UPC, dos);

				// String

				writeString(this.SMU_TYPE, dos);

				// String

				writeString(this.LABELD365, dos);

				// String

				writeString(this.DELIVERYFLOW, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("BRAND=" + BRAND);
			sb.append(",SEASON=" + SEASON);
			sb.append(",CATEGORY=" + CATEGORY);
			sb.append(",REF=" + REF);
			sb.append(",DESCRIPTION=" + DESCRIPTION);
			sb.append(",STYLE=" + STYLE);
			sb.append(",COLOR=" + COLOR);
			sb.append(",FASHION=" + FASHION);
			sb.append(",STYLECOLORLABEL=" + STYLECOLORLABEL);
			sb.append(",COLORNAME=" + COLORNAME);
			sb.append(",LBL=" + LBL);
			sb.append(",STYLE_COLOR=" + STYLE_COLOR);
			sb.append(",GENDER=" + GENDER);
			sb.append(",AGE_RANGE=" + AGE_RANGE);
			sb.append(",SIZE_RANGE=" + SIZE_RANGE);
			sb.append(",SIZE=" + SIZE);
			sb.append(",US_SIZE=" + US_SIZE);
			sb.append(",CM_SIZE=" + CM_SIZE);
			sb.append(",PRODUCT=" + PRODUCT);
			sb.append(",PRODUCT_STATUS=" + PRODUCT_STATUS);
			sb.append(",PRODUCT_TIER=" + PRODUCT_TIER);
			sb.append(",ACCT_EXCLUS=" + ACCT_EXCLUS);
			sb.append(",SIZE_RATIO_SPLIT=" + SIZE_RATIO_SPLIT);
			sb.append(",REC_SIZE_SPLIT=" + REC_SIZE_SPLIT);
			sb.append(",CARTON_QTY=" + CARTON_QTY);
			sb.append(",ATTRIBUTE=" + ATTRIBUTE);
			sb.append(",UNITS=" + UNITS);
			sb.append(",EUR_RRP=" + EUR_RRP);
			sb.append(",EUR_WSP=" + EUR_WSP);
			sb.append(",GBP_RRP=" + GBP_RRP);
			sb.append(",GBP_WSP=" + GBP_WSP);
			sb.append(",CHF_RRP=" + CHF_RRP);
			sb.append(",CHF_WSP=" + CHF_WSP);
			sb.append(",NOK_RRP=" + NOK_RRP);
			sb.append(",NOK_WSP=" + NOK_WSP);
			sb.append(",DKK_RRP=" + DKK_RRP);
			sb.append(",DKK_WSP=" + DKK_WSP);
			sb.append(",SEK_RRP=" + SEK_RRP);
			sb.append(",SEK_WSP=" + SEK_WSP);
			sb.append(",EUR_FINN_RRP=" + EUR_FINN_RRP);
			sb.append(",EUR_FINN_WSP=" + EUR_FINN_WSP);
			sb.append(",FABRICATION=" + FABRICATION);
			sb.append(",COO=" + COO);
			sb.append(",CUSTOM_TARIFF_CODE=" + CUSTOM_TARIFF_CODE);
			sb.append(",UPC=" + UPC);
			sb.append(",SMU_TYPE=" + SMU_TYPE);
			sb.append(",LABELD365=" + LABELD365);
			sb.append(",DELIVERYFLOW=" + DELIVERYFLOW);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfsortie_full_Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOfcopyOfcopyOfsortie_size_0Struct
			implements routines.system.IPersistableRow<copyOfcopyOfcopyOfsortie_size_0Struct> {
		final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[0];
		static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[0];

		public String PRODUCTMASTERNUMBER;

		public String getPRODUCTMASTERNUMBER() {
			return this.PRODUCTMASTERNUMBER;
		}

		public String PRODUCTMASTERSTYLEID;

		public String getPRODUCTMASTERSTYLEID() {
			return this.PRODUCTMASTERSTYLEID;
		}

		public String LANGUAGEID;

		public String getLANGUAGEID() {
			return this.LANGUAGEID;
		}

		public String TRANSLATEDSTYLEDESCRIPTION;

		public String getTRANSLATEDSTYLEDESCRIPTION() {
			return this.TRANSLATEDSTYLEDESCRIPTION;
		}

		public String TRANSLATEDSTYLENAME;

		public String getTRANSLATEDSTYLENAME() {
			return this.TRANSLATEDSTYLENAME;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2.length) {
					if (length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2.length == 0) {
						commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[1024];
					} else {
						commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2, 0, length);
				strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_2) {

				try {

					int length = 0;

					this.PRODUCTMASTERNUMBER = readString(dis);

					this.PRODUCTMASTERSTYLEID = readString(dis);

					this.LANGUAGEID = readString(dis);

					this.TRANSLATEDSTYLEDESCRIPTION = readString(dis);

					this.TRANSLATEDSTYLENAME = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PRODUCTMASTERNUMBER, dos);

				// String

				writeString(this.PRODUCTMASTERSTYLEID, dos);

				// String

				writeString(this.LANGUAGEID, dos);

				// String

				writeString(this.TRANSLATEDSTYLEDESCRIPTION, dos);

				// String

				writeString(this.TRANSLATEDSTYLENAME, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PRODUCTMASTERNUMBER=" + PRODUCTMASTERNUMBER);
			sb.append(",PRODUCTMASTERSTYLEID=" + PRODUCTMASTERSTYLEID);
			sb.append(",LANGUAGEID=" + LANGUAGEID);
			sb.append(",TRANSLATEDSTYLEDESCRIPTION=" + TRANSLATEDSTYLEDESCRIPTION);
			sb.append(",TRANSLATEDSTYLENAME=" + TRANSLATEDSTYLENAME);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfcopyOfcopyOfsortie_size_0Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class sortie_full_fashionStruct
			implements routines.system.IPersistableRow<sortie_full_fashionStruct> {
		final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[0];
		static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[0];

		public String BRAND;

		public String getBRAND() {
			return this.BRAND;
		}

		public String SEASON;

		public String getSEASON() {
			return this.SEASON;
		}

		public String CATEGORY;

		public String getCATEGORY() {
			return this.CATEGORY;
		}

		public String REF;

		public String getREF() {
			return this.REF;
		}

		public String DESCRIPTION;

		public String getDESCRIPTION() {
			return this.DESCRIPTION;
		}

		public String STYLE;

		public String getSTYLE() {
			return this.STYLE;
		}

		public String COLOR;

		public String getCOLOR() {
			return this.COLOR;
		}

		public String FASHION;

		public String getFASHION() {
			return this.FASHION;
		}

		public String STYLECOLORLABEL;

		public String getSTYLECOLORLABEL() {
			return this.STYLECOLORLABEL;
		}

		public String COLORNAME;

		public String getCOLORNAME() {
			return this.COLORNAME;
		}

		public String LBL;

		public String getLBL() {
			return this.LBL;
		}

		public String STYLE_COLOR;

		public String getSTYLE_COLOR() {
			return this.STYLE_COLOR;
		}

		public String GENDER;

		public String getGENDER() {
			return this.GENDER;
		}

		public String AGE_RANGE;

		public String getAGE_RANGE() {
			return this.AGE_RANGE;
		}

		public String SIZE_RANGE;

		public String getSIZE_RANGE() {
			return this.SIZE_RANGE;
		}

		public String SIZE;

		public String getSIZE() {
			return this.SIZE;
		}

		public String US_SIZE;

		public String getUS_SIZE() {
			return this.US_SIZE;
		}

		public String CM_SIZE;

		public String getCM_SIZE() {
			return this.CM_SIZE;
		}

		public String PRODUCT;

		public String getPRODUCT() {
			return this.PRODUCT;
		}

		public String PRODUCT_STATUS;

		public String getPRODUCT_STATUS() {
			return this.PRODUCT_STATUS;
		}

		public String PRODUCT_TIER;

		public String getPRODUCT_TIER() {
			return this.PRODUCT_TIER;
		}

		public String ACCT_EXCLUS;

		public String getACCT_EXCLUS() {
			return this.ACCT_EXCLUS;
		}

		public String SIZE_RATIO_SPLIT;

		public String getSIZE_RATIO_SPLIT() {
			return this.SIZE_RATIO_SPLIT;
		}

		public String REC_SIZE_SPLIT;

		public String getREC_SIZE_SPLIT() {
			return this.REC_SIZE_SPLIT;
		}

		public String CARTON_QTY;

		public String getCARTON_QTY() {
			return this.CARTON_QTY;
		}

		public String ATTRIBUTE;

		public String getATTRIBUTE() {
			return this.ATTRIBUTE;
		}

		public String UNITS;

		public String getUNITS() {
			return this.UNITS;
		}

		public String EUR_RRP;

		public String getEUR_RRP() {
			return this.EUR_RRP;
		}

		public String EUR_WSP;

		public String getEUR_WSP() {
			return this.EUR_WSP;
		}

		public String GBP_RRP;

		public String getGBP_RRP() {
			return this.GBP_RRP;
		}

		public String GBP_WSP;

		public String getGBP_WSP() {
			return this.GBP_WSP;
		}

		public String CHF_RRP;

		public String getCHF_RRP() {
			return this.CHF_RRP;
		}

		public String CHF_WSP;

		public String getCHF_WSP() {
			return this.CHF_WSP;
		}

		public String NOK_RRP;

		public String getNOK_RRP() {
			return this.NOK_RRP;
		}

		public String NOK_WSP;

		public String getNOK_WSP() {
			return this.NOK_WSP;
		}

		public String DKK_RRP;

		public String getDKK_RRP() {
			return this.DKK_RRP;
		}

		public String DKK_WSP;

		public String getDKK_WSP() {
			return this.DKK_WSP;
		}

		public String SEK_RRP;

		public String getSEK_RRP() {
			return this.SEK_RRP;
		}

		public String SEK_WSP;

		public String getSEK_WSP() {
			return this.SEK_WSP;
		}

		public String EUR_FINN_RRP;

		public String getEUR_FINN_RRP() {
			return this.EUR_FINN_RRP;
		}

		public String EUR_FINN_WSP;

		public String getEUR_FINN_WSP() {
			return this.EUR_FINN_WSP;
		}

		public String FABRICATION;

		public String getFABRICATION() {
			return this.FABRICATION;
		}

		public String COO;

		public String getCOO() {
			return this.COO;
		}

		public String CUSTOM_TARIFF_CODE;

		public String getCUSTOM_TARIFF_CODE() {
			return this.CUSTOM_TARIFF_CODE;
		}

		public String UPC;

		public String getUPC() {
			return this.UPC;
		}

		public String SMU_TYPE;

		public String getSMU_TYPE() {
			return this.SMU_TYPE;
		}

		public String LABELD365;

		public String getLABELD365() {
			return this.LABELD365;
		}

		public String LABELNAMED365;

		public String getLABELNAMED365() {
			return this.LABELNAMED365;
		}

		public String DELIVERYFLOW;

		public String getDELIVERYFLOW() {
			return this.DELIVERYFLOW;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2.length) {
					if (length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2.length == 0) {
						commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[1024];
					} else {
						commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2, 0, length);
				strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_2) {

				try {

					int length = 0;

					this.BRAND = readString(dis);

					this.SEASON = readString(dis);

					this.CATEGORY = readString(dis);

					this.REF = readString(dis);

					this.DESCRIPTION = readString(dis);

					this.STYLE = readString(dis);

					this.COLOR = readString(dis);

					this.FASHION = readString(dis);

					this.STYLECOLORLABEL = readString(dis);

					this.COLORNAME = readString(dis);

					this.LBL = readString(dis);

					this.STYLE_COLOR = readString(dis);

					this.GENDER = readString(dis);

					this.AGE_RANGE = readString(dis);

					this.SIZE_RANGE = readString(dis);

					this.SIZE = readString(dis);

					this.US_SIZE = readString(dis);

					this.CM_SIZE = readString(dis);

					this.PRODUCT = readString(dis);

					this.PRODUCT_STATUS = readString(dis);

					this.PRODUCT_TIER = readString(dis);

					this.ACCT_EXCLUS = readString(dis);

					this.SIZE_RATIO_SPLIT = readString(dis);

					this.REC_SIZE_SPLIT = readString(dis);

					this.CARTON_QTY = readString(dis);

					this.ATTRIBUTE = readString(dis);

					this.UNITS = readString(dis);

					this.EUR_RRP = readString(dis);

					this.EUR_WSP = readString(dis);

					this.GBP_RRP = readString(dis);

					this.GBP_WSP = readString(dis);

					this.CHF_RRP = readString(dis);

					this.CHF_WSP = readString(dis);

					this.NOK_RRP = readString(dis);

					this.NOK_WSP = readString(dis);

					this.DKK_RRP = readString(dis);

					this.DKK_WSP = readString(dis);

					this.SEK_RRP = readString(dis);

					this.SEK_WSP = readString(dis);

					this.EUR_FINN_RRP = readString(dis);

					this.EUR_FINN_WSP = readString(dis);

					this.FABRICATION = readString(dis);

					this.COO = readString(dis);

					this.CUSTOM_TARIFF_CODE = readString(dis);

					this.UPC = readString(dis);

					this.SMU_TYPE = readString(dis);

					this.LABELD365 = readString(dis);

					this.LABELNAMED365 = readString(dis);

					this.DELIVERYFLOW = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.BRAND, dos);

				// String

				writeString(this.SEASON, dos);

				// String

				writeString(this.CATEGORY, dos);

				// String

				writeString(this.REF, dos);

				// String

				writeString(this.DESCRIPTION, dos);

				// String

				writeString(this.STYLE, dos);

				// String

				writeString(this.COLOR, dos);

				// String

				writeString(this.FASHION, dos);

				// String

				writeString(this.STYLECOLORLABEL, dos);

				// String

				writeString(this.COLORNAME, dos);

				// String

				writeString(this.LBL, dos);

				// String

				writeString(this.STYLE_COLOR, dos);

				// String

				writeString(this.GENDER, dos);

				// String

				writeString(this.AGE_RANGE, dos);

				// String

				writeString(this.SIZE_RANGE, dos);

				// String

				writeString(this.SIZE, dos);

				// String

				writeString(this.US_SIZE, dos);

				// String

				writeString(this.CM_SIZE, dos);

				// String

				writeString(this.PRODUCT, dos);

				// String

				writeString(this.PRODUCT_STATUS, dos);

				// String

				writeString(this.PRODUCT_TIER, dos);

				// String

				writeString(this.ACCT_EXCLUS, dos);

				// String

				writeString(this.SIZE_RATIO_SPLIT, dos);

				// String

				writeString(this.REC_SIZE_SPLIT, dos);

				// String

				writeString(this.CARTON_QTY, dos);

				// String

				writeString(this.ATTRIBUTE, dos);

				// String

				writeString(this.UNITS, dos);

				// String

				writeString(this.EUR_RRP, dos);

				// String

				writeString(this.EUR_WSP, dos);

				// String

				writeString(this.GBP_RRP, dos);

				// String

				writeString(this.GBP_WSP, dos);

				// String

				writeString(this.CHF_RRP, dos);

				// String

				writeString(this.CHF_WSP, dos);

				// String

				writeString(this.NOK_RRP, dos);

				// String

				writeString(this.NOK_WSP, dos);

				// String

				writeString(this.DKK_RRP, dos);

				// String

				writeString(this.DKK_WSP, dos);

				// String

				writeString(this.SEK_RRP, dos);

				// String

				writeString(this.SEK_WSP, dos);

				// String

				writeString(this.EUR_FINN_RRP, dos);

				// String

				writeString(this.EUR_FINN_WSP, dos);

				// String

				writeString(this.FABRICATION, dos);

				// String

				writeString(this.COO, dos);

				// String

				writeString(this.CUSTOM_TARIFF_CODE, dos);

				// String

				writeString(this.UPC, dos);

				// String

				writeString(this.SMU_TYPE, dos);

				// String

				writeString(this.LABELD365, dos);

				// String

				writeString(this.LABELNAMED365, dos);

				// String

				writeString(this.DELIVERYFLOW, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("BRAND=" + BRAND);
			sb.append(",SEASON=" + SEASON);
			sb.append(",CATEGORY=" + CATEGORY);
			sb.append(",REF=" + REF);
			sb.append(",DESCRIPTION=" + DESCRIPTION);
			sb.append(",STYLE=" + STYLE);
			sb.append(",COLOR=" + COLOR);
			sb.append(",FASHION=" + FASHION);
			sb.append(",STYLECOLORLABEL=" + STYLECOLORLABEL);
			sb.append(",COLORNAME=" + COLORNAME);
			sb.append(",LBL=" + LBL);
			sb.append(",STYLE_COLOR=" + STYLE_COLOR);
			sb.append(",GENDER=" + GENDER);
			sb.append(",AGE_RANGE=" + AGE_RANGE);
			sb.append(",SIZE_RANGE=" + SIZE_RANGE);
			sb.append(",SIZE=" + SIZE);
			sb.append(",US_SIZE=" + US_SIZE);
			sb.append(",CM_SIZE=" + CM_SIZE);
			sb.append(",PRODUCT=" + PRODUCT);
			sb.append(",PRODUCT_STATUS=" + PRODUCT_STATUS);
			sb.append(",PRODUCT_TIER=" + PRODUCT_TIER);
			sb.append(",ACCT_EXCLUS=" + ACCT_EXCLUS);
			sb.append(",SIZE_RATIO_SPLIT=" + SIZE_RATIO_SPLIT);
			sb.append(",REC_SIZE_SPLIT=" + REC_SIZE_SPLIT);
			sb.append(",CARTON_QTY=" + CARTON_QTY);
			sb.append(",ATTRIBUTE=" + ATTRIBUTE);
			sb.append(",UNITS=" + UNITS);
			sb.append(",EUR_RRP=" + EUR_RRP);
			sb.append(",EUR_WSP=" + EUR_WSP);
			sb.append(",GBP_RRP=" + GBP_RRP);
			sb.append(",GBP_WSP=" + GBP_WSP);
			sb.append(",CHF_RRP=" + CHF_RRP);
			sb.append(",CHF_WSP=" + CHF_WSP);
			sb.append(",NOK_RRP=" + NOK_RRP);
			sb.append(",NOK_WSP=" + NOK_WSP);
			sb.append(",DKK_RRP=" + DKK_RRP);
			sb.append(",DKK_WSP=" + DKK_WSP);
			sb.append(",SEK_RRP=" + SEK_RRP);
			sb.append(",SEK_WSP=" + SEK_WSP);
			sb.append(",EUR_FINN_RRP=" + EUR_FINN_RRP);
			sb.append(",EUR_FINN_WSP=" + EUR_FINN_WSP);
			sb.append(",FABRICATION=" + FABRICATION);
			sb.append(",COO=" + COO);
			sb.append(",CUSTOM_TARIFF_CODE=" + CUSTOM_TARIFF_CODE);
			sb.append(",UPC=" + UPC);
			sb.append(",SMU_TYPE=" + SMU_TYPE);
			sb.append(",LABELD365=" + LABELD365);
			sb.append(",LABELNAMED365=" + LABELNAMED365);
			sb.append(",DELIVERYFLOW=" + DELIVERYFLOW);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(sortie_full_fashionStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class sortie_full_Struct implements routines.system.IPersistableRow<sortie_full_Struct> {
		final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[0];
		static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[0];

		public String BRAND;

		public String getBRAND() {
			return this.BRAND;
		}

		public String SEASON;

		public String getSEASON() {
			return this.SEASON;
		}

		public String CATEGORY;

		public String getCATEGORY() {
			return this.CATEGORY;
		}

		public String REF;

		public String getREF() {
			return this.REF;
		}

		public String DESCRIPTION;

		public String getDESCRIPTION() {
			return this.DESCRIPTION;
		}

		public String STYLE;

		public String getSTYLE() {
			return this.STYLE;
		}

		public String COLOR;

		public String getCOLOR() {
			return this.COLOR;
		}

		public String FASHION;

		public String getFASHION() {
			return this.FASHION;
		}

		public String STYLECOLORLABEL;

		public String getSTYLECOLORLABEL() {
			return this.STYLECOLORLABEL;
		}

		public String COLORNAME;

		public String getCOLORNAME() {
			return this.COLORNAME;
		}

		public String LBL;

		public String getLBL() {
			return this.LBL;
		}

		public String STYLE_COLOR;

		public String getSTYLE_COLOR() {
			return this.STYLE_COLOR;
		}

		public String GENDER;

		public String getGENDER() {
			return this.GENDER;
		}

		public String AGE_RANGE;

		public String getAGE_RANGE() {
			return this.AGE_RANGE;
		}

		public String SIZE_RANGE;

		public String getSIZE_RANGE() {
			return this.SIZE_RANGE;
		}

		public String SIZE;

		public String getSIZE() {
			return this.SIZE;
		}

		public String US_SIZE;

		public String getUS_SIZE() {
			return this.US_SIZE;
		}

		public String CM_SIZE;

		public String getCM_SIZE() {
			return this.CM_SIZE;
		}

		public String PRODUCT;

		public String getPRODUCT() {
			return this.PRODUCT;
		}

		public String PRODUCT_STATUS;

		public String getPRODUCT_STATUS() {
			return this.PRODUCT_STATUS;
		}

		public String PRODUCT_TIER;

		public String getPRODUCT_TIER() {
			return this.PRODUCT_TIER;
		}

		public String ACCT_EXCLUS;

		public String getACCT_EXCLUS() {
			return this.ACCT_EXCLUS;
		}

		public String SIZE_RATIO_SPLIT;

		public String getSIZE_RATIO_SPLIT() {
			return this.SIZE_RATIO_SPLIT;
		}

		public String REC_SIZE_SPLIT;

		public String getREC_SIZE_SPLIT() {
			return this.REC_SIZE_SPLIT;
		}

		public String CARTON_QTY;

		public String getCARTON_QTY() {
			return this.CARTON_QTY;
		}

		public String ATTRIBUTE;

		public String getATTRIBUTE() {
			return this.ATTRIBUTE;
		}

		public String UNITS;

		public String getUNITS() {
			return this.UNITS;
		}

		public String EUR_RRP;

		public String getEUR_RRP() {
			return this.EUR_RRP;
		}

		public String EUR_WSP;

		public String getEUR_WSP() {
			return this.EUR_WSP;
		}

		public String GBP_RRP;

		public String getGBP_RRP() {
			return this.GBP_RRP;
		}

		public String GBP_WSP;

		public String getGBP_WSP() {
			return this.GBP_WSP;
		}

		public String CHF_RRP;

		public String getCHF_RRP() {
			return this.CHF_RRP;
		}

		public String CHF_WSP;

		public String getCHF_WSP() {
			return this.CHF_WSP;
		}

		public String NOK_RRP;

		public String getNOK_RRP() {
			return this.NOK_RRP;
		}

		public String NOK_WSP;

		public String getNOK_WSP() {
			return this.NOK_WSP;
		}

		public String DKK_RRP;

		public String getDKK_RRP() {
			return this.DKK_RRP;
		}

		public String DKK_WSP;

		public String getDKK_WSP() {
			return this.DKK_WSP;
		}

		public String SEK_RRP;

		public String getSEK_RRP() {
			return this.SEK_RRP;
		}

		public String SEK_WSP;

		public String getSEK_WSP() {
			return this.SEK_WSP;
		}

		public String EUR_FINN_RRP;

		public String getEUR_FINN_RRP() {
			return this.EUR_FINN_RRP;
		}

		public String EUR_FINN_WSP;

		public String getEUR_FINN_WSP() {
			return this.EUR_FINN_WSP;
		}

		public String FABRICATION;

		public String getFABRICATION() {
			return this.FABRICATION;
		}

		public String COO;

		public String getCOO() {
			return this.COO;
		}

		public String CUSTOM_TARIFF_CODE;

		public String getCUSTOM_TARIFF_CODE() {
			return this.CUSTOM_TARIFF_CODE;
		}

		public String UPC;

		public String getUPC() {
			return this.UPC;
		}

		public String SMU_TYPE;

		public String getSMU_TYPE() {
			return this.SMU_TYPE;
		}

		public String LABELD365;

		public String getLABELD365() {
			return this.LABELD365;
		}

		public String LABELNAMED365;

		public String getLABELNAMED365() {
			return this.LABELNAMED365;
		}

		public String DELIVERYFLOW;

		public String getDELIVERYFLOW() {
			return this.DELIVERYFLOW;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2.length) {
					if (length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2.length == 0) {
						commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[1024];
					} else {
						commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2, 0, length);
				strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_2) {

				try {

					int length = 0;

					this.BRAND = readString(dis);

					this.SEASON = readString(dis);

					this.CATEGORY = readString(dis);

					this.REF = readString(dis);

					this.DESCRIPTION = readString(dis);

					this.STYLE = readString(dis);

					this.COLOR = readString(dis);

					this.FASHION = readString(dis);

					this.STYLECOLORLABEL = readString(dis);

					this.COLORNAME = readString(dis);

					this.LBL = readString(dis);

					this.STYLE_COLOR = readString(dis);

					this.GENDER = readString(dis);

					this.AGE_RANGE = readString(dis);

					this.SIZE_RANGE = readString(dis);

					this.SIZE = readString(dis);

					this.US_SIZE = readString(dis);

					this.CM_SIZE = readString(dis);

					this.PRODUCT = readString(dis);

					this.PRODUCT_STATUS = readString(dis);

					this.PRODUCT_TIER = readString(dis);

					this.ACCT_EXCLUS = readString(dis);

					this.SIZE_RATIO_SPLIT = readString(dis);

					this.REC_SIZE_SPLIT = readString(dis);

					this.CARTON_QTY = readString(dis);

					this.ATTRIBUTE = readString(dis);

					this.UNITS = readString(dis);

					this.EUR_RRP = readString(dis);

					this.EUR_WSP = readString(dis);

					this.GBP_RRP = readString(dis);

					this.GBP_WSP = readString(dis);

					this.CHF_RRP = readString(dis);

					this.CHF_WSP = readString(dis);

					this.NOK_RRP = readString(dis);

					this.NOK_WSP = readString(dis);

					this.DKK_RRP = readString(dis);

					this.DKK_WSP = readString(dis);

					this.SEK_RRP = readString(dis);

					this.SEK_WSP = readString(dis);

					this.EUR_FINN_RRP = readString(dis);

					this.EUR_FINN_WSP = readString(dis);

					this.FABRICATION = readString(dis);

					this.COO = readString(dis);

					this.CUSTOM_TARIFF_CODE = readString(dis);

					this.UPC = readString(dis);

					this.SMU_TYPE = readString(dis);

					this.LABELD365 = readString(dis);

					this.LABELNAMED365 = readString(dis);

					this.DELIVERYFLOW = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.BRAND, dos);

				// String

				writeString(this.SEASON, dos);

				// String

				writeString(this.CATEGORY, dos);

				// String

				writeString(this.REF, dos);

				// String

				writeString(this.DESCRIPTION, dos);

				// String

				writeString(this.STYLE, dos);

				// String

				writeString(this.COLOR, dos);

				// String

				writeString(this.FASHION, dos);

				// String

				writeString(this.STYLECOLORLABEL, dos);

				// String

				writeString(this.COLORNAME, dos);

				// String

				writeString(this.LBL, dos);

				// String

				writeString(this.STYLE_COLOR, dos);

				// String

				writeString(this.GENDER, dos);

				// String

				writeString(this.AGE_RANGE, dos);

				// String

				writeString(this.SIZE_RANGE, dos);

				// String

				writeString(this.SIZE, dos);

				// String

				writeString(this.US_SIZE, dos);

				// String

				writeString(this.CM_SIZE, dos);

				// String

				writeString(this.PRODUCT, dos);

				// String

				writeString(this.PRODUCT_STATUS, dos);

				// String

				writeString(this.PRODUCT_TIER, dos);

				// String

				writeString(this.ACCT_EXCLUS, dos);

				// String

				writeString(this.SIZE_RATIO_SPLIT, dos);

				// String

				writeString(this.REC_SIZE_SPLIT, dos);

				// String

				writeString(this.CARTON_QTY, dos);

				// String

				writeString(this.ATTRIBUTE, dos);

				// String

				writeString(this.UNITS, dos);

				// String

				writeString(this.EUR_RRP, dos);

				// String

				writeString(this.EUR_WSP, dos);

				// String

				writeString(this.GBP_RRP, dos);

				// String

				writeString(this.GBP_WSP, dos);

				// String

				writeString(this.CHF_RRP, dos);

				// String

				writeString(this.CHF_WSP, dos);

				// String

				writeString(this.NOK_RRP, dos);

				// String

				writeString(this.NOK_WSP, dos);

				// String

				writeString(this.DKK_RRP, dos);

				// String

				writeString(this.DKK_WSP, dos);

				// String

				writeString(this.SEK_RRP, dos);

				// String

				writeString(this.SEK_WSP, dos);

				// String

				writeString(this.EUR_FINN_RRP, dos);

				// String

				writeString(this.EUR_FINN_WSP, dos);

				// String

				writeString(this.FABRICATION, dos);

				// String

				writeString(this.COO, dos);

				// String

				writeString(this.CUSTOM_TARIFF_CODE, dos);

				// String

				writeString(this.UPC, dos);

				// String

				writeString(this.SMU_TYPE, dos);

				// String

				writeString(this.LABELD365, dos);

				// String

				writeString(this.LABELNAMED365, dos);

				// String

				writeString(this.DELIVERYFLOW, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("BRAND=" + BRAND);
			sb.append(",SEASON=" + SEASON);
			sb.append(",CATEGORY=" + CATEGORY);
			sb.append(",REF=" + REF);
			sb.append(",DESCRIPTION=" + DESCRIPTION);
			sb.append(",STYLE=" + STYLE);
			sb.append(",COLOR=" + COLOR);
			sb.append(",FASHION=" + FASHION);
			sb.append(",STYLECOLORLABEL=" + STYLECOLORLABEL);
			sb.append(",COLORNAME=" + COLORNAME);
			sb.append(",LBL=" + LBL);
			sb.append(",STYLE_COLOR=" + STYLE_COLOR);
			sb.append(",GENDER=" + GENDER);
			sb.append(",AGE_RANGE=" + AGE_RANGE);
			sb.append(",SIZE_RANGE=" + SIZE_RANGE);
			sb.append(",SIZE=" + SIZE);
			sb.append(",US_SIZE=" + US_SIZE);
			sb.append(",CM_SIZE=" + CM_SIZE);
			sb.append(",PRODUCT=" + PRODUCT);
			sb.append(",PRODUCT_STATUS=" + PRODUCT_STATUS);
			sb.append(",PRODUCT_TIER=" + PRODUCT_TIER);
			sb.append(",ACCT_EXCLUS=" + ACCT_EXCLUS);
			sb.append(",SIZE_RATIO_SPLIT=" + SIZE_RATIO_SPLIT);
			sb.append(",REC_SIZE_SPLIT=" + REC_SIZE_SPLIT);
			sb.append(",CARTON_QTY=" + CARTON_QTY);
			sb.append(",ATTRIBUTE=" + ATTRIBUTE);
			sb.append(",UNITS=" + UNITS);
			sb.append(",EUR_RRP=" + EUR_RRP);
			sb.append(",EUR_WSP=" + EUR_WSP);
			sb.append(",GBP_RRP=" + GBP_RRP);
			sb.append(",GBP_WSP=" + GBP_WSP);
			sb.append(",CHF_RRP=" + CHF_RRP);
			sb.append(",CHF_WSP=" + CHF_WSP);
			sb.append(",NOK_RRP=" + NOK_RRP);
			sb.append(",NOK_WSP=" + NOK_WSP);
			sb.append(",DKK_RRP=" + DKK_RRP);
			sb.append(",DKK_WSP=" + DKK_WSP);
			sb.append(",SEK_RRP=" + SEK_RRP);
			sb.append(",SEK_WSP=" + SEK_WSP);
			sb.append(",EUR_FINN_RRP=" + EUR_FINN_RRP);
			sb.append(",EUR_FINN_WSP=" + EUR_FINN_WSP);
			sb.append(",FABRICATION=" + FABRICATION);
			sb.append(",COO=" + COO);
			sb.append(",CUSTOM_TARIFF_CODE=" + CUSTOM_TARIFF_CODE);
			sb.append(",UPC=" + UPC);
			sb.append(",SMU_TYPE=" + SMU_TYPE);
			sb.append(",LABELD365=" + LABELD365);
			sb.append(",LABELNAMED365=" + LABELNAMED365);
			sb.append(",DELIVERYFLOW=" + DELIVERYFLOW);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(sortie_full_Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOfcopyOfsortie_sizeStruct
			implements routines.system.IPersistableRow<copyOfcopyOfsortie_sizeStruct> {
		final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[0];
		static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[0];

		public String PRODUCTMASTERNUMBER;

		public String getPRODUCTMASTERNUMBER() {
			return this.PRODUCTMASTERNUMBER;
		}

		public String PRODUCTMASTERSIZEID;

		public String getPRODUCTMASTERSIZEID() {
			return this.PRODUCTMASTERSIZEID;
		}

		public String LANGUAGEID;

		public String getLANGUAGEID() {
			return this.LANGUAGEID;
		}

		public String TRANSLATEDSIZEDESCRIPTION;

		public String getTRANSLATEDSIZEDESCRIPTION() {
			return this.TRANSLATEDSIZEDESCRIPTION;
		}

		public String TRANSLATEDSIZENAME;

		public String getTRANSLATEDSIZENAME() {
			return this.TRANSLATEDSIZENAME;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2.length) {
					if (length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2.length == 0) {
						commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[1024];
					} else {
						commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2, 0, length);
				strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_2) {

				try {

					int length = 0;

					this.PRODUCTMASTERNUMBER = readString(dis);

					this.PRODUCTMASTERSIZEID = readString(dis);

					this.LANGUAGEID = readString(dis);

					this.TRANSLATEDSIZEDESCRIPTION = readString(dis);

					this.TRANSLATEDSIZENAME = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PRODUCTMASTERNUMBER, dos);

				// String

				writeString(this.PRODUCTMASTERSIZEID, dos);

				// String

				writeString(this.LANGUAGEID, dos);

				// String

				writeString(this.TRANSLATEDSIZEDESCRIPTION, dos);

				// String

				writeString(this.TRANSLATEDSIZENAME, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PRODUCTMASTERNUMBER=" + PRODUCTMASTERNUMBER);
			sb.append(",PRODUCTMASTERSIZEID=" + PRODUCTMASTERSIZEID);
			sb.append(",LANGUAGEID=" + LANGUAGEID);
			sb.append(",TRANSLATEDSIZEDESCRIPTION=" + TRANSLATEDSIZEDESCRIPTION);
			sb.append(",TRANSLATEDSIZENAME=" + TRANSLATEDSIZENAME);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfcopyOfsortie_sizeStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class sortie_full_COOStruct implements routines.system.IPersistableRow<sortie_full_COOStruct> {
		final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[0];
		static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[0];

		public String BRAND;

		public String getBRAND() {
			return this.BRAND;
		}

		public String SEASON;

		public String getSEASON() {
			return this.SEASON;
		}

		public String CATEGORY;

		public String getCATEGORY() {
			return this.CATEGORY;
		}

		public String REF;

		public String getREF() {
			return this.REF;
		}

		public String DESCRIPTION;

		public String getDESCRIPTION() {
			return this.DESCRIPTION;
		}

		public String STYLE;

		public String getSTYLE() {
			return this.STYLE;
		}

		public String COLOR;

		public String getCOLOR() {
			return this.COLOR;
		}

		public String FASHION;

		public String getFASHION() {
			return this.FASHION;
		}

		public String STYLECOLORLABEL;

		public String getSTYLECOLORLABEL() {
			return this.STYLECOLORLABEL;
		}

		public String COLORNAME;

		public String getCOLORNAME() {
			return this.COLORNAME;
		}

		public String LBL;

		public String getLBL() {
			return this.LBL;
		}

		public String STYLE_COLOR;

		public String getSTYLE_COLOR() {
			return this.STYLE_COLOR;
		}

		public String GENDER;

		public String getGENDER() {
			return this.GENDER;
		}

		public String AGE_RANGE;

		public String getAGE_RANGE() {
			return this.AGE_RANGE;
		}

		public String SIZE_RANGE;

		public String getSIZE_RANGE() {
			return this.SIZE_RANGE;
		}

		public String SIZE;

		public String getSIZE() {
			return this.SIZE;
		}

		public String US_SIZE;

		public String getUS_SIZE() {
			return this.US_SIZE;
		}

		public String CM_SIZE;

		public String getCM_SIZE() {
			return this.CM_SIZE;
		}

		public String PRODUCT;

		public String getPRODUCT() {
			return this.PRODUCT;
		}

		public String PRODUCT_STATUS;

		public String getPRODUCT_STATUS() {
			return this.PRODUCT_STATUS;
		}

		public String PRODUCT_TIER;

		public String getPRODUCT_TIER() {
			return this.PRODUCT_TIER;
		}

		public String ACCT_EXCLUS;

		public String getACCT_EXCLUS() {
			return this.ACCT_EXCLUS;
		}

		public String SIZE_RATIO_SPLIT;

		public String getSIZE_RATIO_SPLIT() {
			return this.SIZE_RATIO_SPLIT;
		}

		public String REC_SIZE_SPLIT;

		public String getREC_SIZE_SPLIT() {
			return this.REC_SIZE_SPLIT;
		}

		public String CARTON_QTY;

		public String getCARTON_QTY() {
			return this.CARTON_QTY;
		}

		public String ATTRIBUTE;

		public String getATTRIBUTE() {
			return this.ATTRIBUTE;
		}

		public String UNITS;

		public String getUNITS() {
			return this.UNITS;
		}

		public String EUR_RRP;

		public String getEUR_RRP() {
			return this.EUR_RRP;
		}

		public String EUR_WSP;

		public String getEUR_WSP() {
			return this.EUR_WSP;
		}

		public String GBP_RRP;

		public String getGBP_RRP() {
			return this.GBP_RRP;
		}

		public String GBP_WSP;

		public String getGBP_WSP() {
			return this.GBP_WSP;
		}

		public String CHF_RRP;

		public String getCHF_RRP() {
			return this.CHF_RRP;
		}

		public String CHF_WSP;

		public String getCHF_WSP() {
			return this.CHF_WSP;
		}

		public String NOK_RRP;

		public String getNOK_RRP() {
			return this.NOK_RRP;
		}

		public String NOK_WSP;

		public String getNOK_WSP() {
			return this.NOK_WSP;
		}

		public String DKK_RRP;

		public String getDKK_RRP() {
			return this.DKK_RRP;
		}

		public String DKK_WSP;

		public String getDKK_WSP() {
			return this.DKK_WSP;
		}

		public String SEK_RRP;

		public String getSEK_RRP() {
			return this.SEK_RRP;
		}

		public String SEK_WSP;

		public String getSEK_WSP() {
			return this.SEK_WSP;
		}

		public String EUR_FINN_RRP;

		public String getEUR_FINN_RRP() {
			return this.EUR_FINN_RRP;
		}

		public String EUR_FINN_WSP;

		public String getEUR_FINN_WSP() {
			return this.EUR_FINN_WSP;
		}

		public String FABRICATION;

		public String getFABRICATION() {
			return this.FABRICATION;
		}

		public String COO;

		public String getCOO() {
			return this.COO;
		}

		public String CUSTOM_TARIFF_CODE;

		public String getCUSTOM_TARIFF_CODE() {
			return this.CUSTOM_TARIFF_CODE;
		}

		public String UPC;

		public String getUPC() {
			return this.UPC;
		}

		public String SMU_TYPE;

		public String getSMU_TYPE() {
			return this.SMU_TYPE;
		}

		public String LABELD365;

		public String getLABELD365() {
			return this.LABELD365;
		}

		public String LABELNAMED365;

		public String getLABELNAMED365() {
			return this.LABELNAMED365;
		}

		public String FASHIOND365;

		public String getFASHIOND365() {
			return this.FASHIOND365;
		}

		public String PRODUCTD365;

		public String getPRODUCTD365() {
			return this.PRODUCTD365;
		}

		public String DELIVERYFLOW;

		public String getDELIVERYFLOW() {
			return this.DELIVERYFLOW;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2.length) {
					if (length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2.length == 0) {
						commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[1024];
					} else {
						commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2, 0, length);
				strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_2) {

				try {

					int length = 0;

					this.BRAND = readString(dis);

					this.SEASON = readString(dis);

					this.CATEGORY = readString(dis);

					this.REF = readString(dis);

					this.DESCRIPTION = readString(dis);

					this.STYLE = readString(dis);

					this.COLOR = readString(dis);

					this.FASHION = readString(dis);

					this.STYLECOLORLABEL = readString(dis);

					this.COLORNAME = readString(dis);

					this.LBL = readString(dis);

					this.STYLE_COLOR = readString(dis);

					this.GENDER = readString(dis);

					this.AGE_RANGE = readString(dis);

					this.SIZE_RANGE = readString(dis);

					this.SIZE = readString(dis);

					this.US_SIZE = readString(dis);

					this.CM_SIZE = readString(dis);

					this.PRODUCT = readString(dis);

					this.PRODUCT_STATUS = readString(dis);

					this.PRODUCT_TIER = readString(dis);

					this.ACCT_EXCLUS = readString(dis);

					this.SIZE_RATIO_SPLIT = readString(dis);

					this.REC_SIZE_SPLIT = readString(dis);

					this.CARTON_QTY = readString(dis);

					this.ATTRIBUTE = readString(dis);

					this.UNITS = readString(dis);

					this.EUR_RRP = readString(dis);

					this.EUR_WSP = readString(dis);

					this.GBP_RRP = readString(dis);

					this.GBP_WSP = readString(dis);

					this.CHF_RRP = readString(dis);

					this.CHF_WSP = readString(dis);

					this.NOK_RRP = readString(dis);

					this.NOK_WSP = readString(dis);

					this.DKK_RRP = readString(dis);

					this.DKK_WSP = readString(dis);

					this.SEK_RRP = readString(dis);

					this.SEK_WSP = readString(dis);

					this.EUR_FINN_RRP = readString(dis);

					this.EUR_FINN_WSP = readString(dis);

					this.FABRICATION = readString(dis);

					this.COO = readString(dis);

					this.CUSTOM_TARIFF_CODE = readString(dis);

					this.UPC = readString(dis);

					this.SMU_TYPE = readString(dis);

					this.LABELD365 = readString(dis);

					this.LABELNAMED365 = readString(dis);

					this.FASHIOND365 = readString(dis);

					this.PRODUCTD365 = readString(dis);

					this.DELIVERYFLOW = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.BRAND, dos);

				// String

				writeString(this.SEASON, dos);

				// String

				writeString(this.CATEGORY, dos);

				// String

				writeString(this.REF, dos);

				// String

				writeString(this.DESCRIPTION, dos);

				// String

				writeString(this.STYLE, dos);

				// String

				writeString(this.COLOR, dos);

				// String

				writeString(this.FASHION, dos);

				// String

				writeString(this.STYLECOLORLABEL, dos);

				// String

				writeString(this.COLORNAME, dos);

				// String

				writeString(this.LBL, dos);

				// String

				writeString(this.STYLE_COLOR, dos);

				// String

				writeString(this.GENDER, dos);

				// String

				writeString(this.AGE_RANGE, dos);

				// String

				writeString(this.SIZE_RANGE, dos);

				// String

				writeString(this.SIZE, dos);

				// String

				writeString(this.US_SIZE, dos);

				// String

				writeString(this.CM_SIZE, dos);

				// String

				writeString(this.PRODUCT, dos);

				// String

				writeString(this.PRODUCT_STATUS, dos);

				// String

				writeString(this.PRODUCT_TIER, dos);

				// String

				writeString(this.ACCT_EXCLUS, dos);

				// String

				writeString(this.SIZE_RATIO_SPLIT, dos);

				// String

				writeString(this.REC_SIZE_SPLIT, dos);

				// String

				writeString(this.CARTON_QTY, dos);

				// String

				writeString(this.ATTRIBUTE, dos);

				// String

				writeString(this.UNITS, dos);

				// String

				writeString(this.EUR_RRP, dos);

				// String

				writeString(this.EUR_WSP, dos);

				// String

				writeString(this.GBP_RRP, dos);

				// String

				writeString(this.GBP_WSP, dos);

				// String

				writeString(this.CHF_RRP, dos);

				// String

				writeString(this.CHF_WSP, dos);

				// String

				writeString(this.NOK_RRP, dos);

				// String

				writeString(this.NOK_WSP, dos);

				// String

				writeString(this.DKK_RRP, dos);

				// String

				writeString(this.DKK_WSP, dos);

				// String

				writeString(this.SEK_RRP, dos);

				// String

				writeString(this.SEK_WSP, dos);

				// String

				writeString(this.EUR_FINN_RRP, dos);

				// String

				writeString(this.EUR_FINN_WSP, dos);

				// String

				writeString(this.FABRICATION, dos);

				// String

				writeString(this.COO, dos);

				// String

				writeString(this.CUSTOM_TARIFF_CODE, dos);

				// String

				writeString(this.UPC, dos);

				// String

				writeString(this.SMU_TYPE, dos);

				// String

				writeString(this.LABELD365, dos);

				// String

				writeString(this.LABELNAMED365, dos);

				// String

				writeString(this.FASHIOND365, dos);

				// String

				writeString(this.PRODUCTD365, dos);

				// String

				writeString(this.DELIVERYFLOW, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("BRAND=" + BRAND);
			sb.append(",SEASON=" + SEASON);
			sb.append(",CATEGORY=" + CATEGORY);
			sb.append(",REF=" + REF);
			sb.append(",DESCRIPTION=" + DESCRIPTION);
			sb.append(",STYLE=" + STYLE);
			sb.append(",COLOR=" + COLOR);
			sb.append(",FASHION=" + FASHION);
			sb.append(",STYLECOLORLABEL=" + STYLECOLORLABEL);
			sb.append(",COLORNAME=" + COLORNAME);
			sb.append(",LBL=" + LBL);
			sb.append(",STYLE_COLOR=" + STYLE_COLOR);
			sb.append(",GENDER=" + GENDER);
			sb.append(",AGE_RANGE=" + AGE_RANGE);
			sb.append(",SIZE_RANGE=" + SIZE_RANGE);
			sb.append(",SIZE=" + SIZE);
			sb.append(",US_SIZE=" + US_SIZE);
			sb.append(",CM_SIZE=" + CM_SIZE);
			sb.append(",PRODUCT=" + PRODUCT);
			sb.append(",PRODUCT_STATUS=" + PRODUCT_STATUS);
			sb.append(",PRODUCT_TIER=" + PRODUCT_TIER);
			sb.append(",ACCT_EXCLUS=" + ACCT_EXCLUS);
			sb.append(",SIZE_RATIO_SPLIT=" + SIZE_RATIO_SPLIT);
			sb.append(",REC_SIZE_SPLIT=" + REC_SIZE_SPLIT);
			sb.append(",CARTON_QTY=" + CARTON_QTY);
			sb.append(",ATTRIBUTE=" + ATTRIBUTE);
			sb.append(",UNITS=" + UNITS);
			sb.append(",EUR_RRP=" + EUR_RRP);
			sb.append(",EUR_WSP=" + EUR_WSP);
			sb.append(",GBP_RRP=" + GBP_RRP);
			sb.append(",GBP_WSP=" + GBP_WSP);
			sb.append(",CHF_RRP=" + CHF_RRP);
			sb.append(",CHF_WSP=" + CHF_WSP);
			sb.append(",NOK_RRP=" + NOK_RRP);
			sb.append(",NOK_WSP=" + NOK_WSP);
			sb.append(",DKK_RRP=" + DKK_RRP);
			sb.append(",DKK_WSP=" + DKK_WSP);
			sb.append(",SEK_RRP=" + SEK_RRP);
			sb.append(",SEK_WSP=" + SEK_WSP);
			sb.append(",EUR_FINN_RRP=" + EUR_FINN_RRP);
			sb.append(",EUR_FINN_WSP=" + EUR_FINN_WSP);
			sb.append(",FABRICATION=" + FABRICATION);
			sb.append(",COO=" + COO);
			sb.append(",CUSTOM_TARIFF_CODE=" + CUSTOM_TARIFF_CODE);
			sb.append(",UPC=" + UPC);
			sb.append(",SMU_TYPE=" + SMU_TYPE);
			sb.append(",LABELD365=" + LABELD365);
			sb.append(",LABELNAMED365=" + LABELNAMED365);
			sb.append(",FASHIOND365=" + FASHIOND365);
			sb.append(",PRODUCTD365=" + PRODUCTD365);
			sb.append(",DELIVERYFLOW=" + DELIVERYFLOW);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(sortie_full_COOStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOfcopyOfsortie_fullStruct
			implements routines.system.IPersistableRow<copyOfcopyOfsortie_fullStruct> {
		final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[0];
		static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[0];

		public String BRAND;

		public String getBRAND() {
			return this.BRAND;
		}

		public String SEASON;

		public String getSEASON() {
			return this.SEASON;
		}

		public String CATEGORY;

		public String getCATEGORY() {
			return this.CATEGORY;
		}

		public String REF;

		public String getREF() {
			return this.REF;
		}

		public String DESCRIPTION;

		public String getDESCRIPTION() {
			return this.DESCRIPTION;
		}

		public String STYLE;

		public String getSTYLE() {
			return this.STYLE;
		}

		public String COLOR;

		public String getCOLOR() {
			return this.COLOR;
		}

		public String FASHION;

		public String getFASHION() {
			return this.FASHION;
		}

		public String STYLECOLORLABEL;

		public String getSTYLECOLORLABEL() {
			return this.STYLECOLORLABEL;
		}

		public String COLORNAME;

		public String getCOLORNAME() {
			return this.COLORNAME;
		}

		public String LBL;

		public String getLBL() {
			return this.LBL;
		}

		public String STYLE_COLOR;

		public String getSTYLE_COLOR() {
			return this.STYLE_COLOR;
		}

		public String GENDER;

		public String getGENDER() {
			return this.GENDER;
		}

		public String AGE_RANGE;

		public String getAGE_RANGE() {
			return this.AGE_RANGE;
		}

		public String SIZE_RANGE;

		public String getSIZE_RANGE() {
			return this.SIZE_RANGE;
		}

		public String SIZE;

		public String getSIZE() {
			return this.SIZE;
		}

		public String US_SIZE;

		public String getUS_SIZE() {
			return this.US_SIZE;
		}

		public String CM_SIZE;

		public String getCM_SIZE() {
			return this.CM_SIZE;
		}

		public String PRODUCT;

		public String getPRODUCT() {
			return this.PRODUCT;
		}

		public String PRODUCT_STATUS;

		public String getPRODUCT_STATUS() {
			return this.PRODUCT_STATUS;
		}

		public String PRODUCT_TIER;

		public String getPRODUCT_TIER() {
			return this.PRODUCT_TIER;
		}

		public String ACCT_EXCLUS;

		public String getACCT_EXCLUS() {
			return this.ACCT_EXCLUS;
		}

		public String SIZE_RATIO_SPLIT;

		public String getSIZE_RATIO_SPLIT() {
			return this.SIZE_RATIO_SPLIT;
		}

		public String REC_SIZE_SPLIT;

		public String getREC_SIZE_SPLIT() {
			return this.REC_SIZE_SPLIT;
		}

		public String CARTON_QTY;

		public String getCARTON_QTY() {
			return this.CARTON_QTY;
		}

		public String ATTRIBUTE;

		public String getATTRIBUTE() {
			return this.ATTRIBUTE;
		}

		public String UNITS;

		public String getUNITS() {
			return this.UNITS;
		}

		public String EUR_RRP;

		public String getEUR_RRP() {
			return this.EUR_RRP;
		}

		public String EUR_WSP;

		public String getEUR_WSP() {
			return this.EUR_WSP;
		}

		public String GBP_RRP;

		public String getGBP_RRP() {
			return this.GBP_RRP;
		}

		public String GBP_WSP;

		public String getGBP_WSP() {
			return this.GBP_WSP;
		}

		public String CHF_RRP;

		public String getCHF_RRP() {
			return this.CHF_RRP;
		}

		public String CHF_WSP;

		public String getCHF_WSP() {
			return this.CHF_WSP;
		}

		public String NOK_RRP;

		public String getNOK_RRP() {
			return this.NOK_RRP;
		}

		public String NOK_WSP;

		public String getNOK_WSP() {
			return this.NOK_WSP;
		}

		public String DKK_RRP;

		public String getDKK_RRP() {
			return this.DKK_RRP;
		}

		public String DKK_WSP;

		public String getDKK_WSP() {
			return this.DKK_WSP;
		}

		public String SEK_RRP;

		public String getSEK_RRP() {
			return this.SEK_RRP;
		}

		public String SEK_WSP;

		public String getSEK_WSP() {
			return this.SEK_WSP;
		}

		public String EUR_FINN_RRP;

		public String getEUR_FINN_RRP() {
			return this.EUR_FINN_RRP;
		}

		public String EUR_FINN_WSP;

		public String getEUR_FINN_WSP() {
			return this.EUR_FINN_WSP;
		}

		public String FABRICATION;

		public String getFABRICATION() {
			return this.FABRICATION;
		}

		public String COO;

		public String getCOO() {
			return this.COO;
		}

		public String CUSTOM_TARIFF_CODE;

		public String getCUSTOM_TARIFF_CODE() {
			return this.CUSTOM_TARIFF_CODE;
		}

		public String UPC;

		public String getUPC() {
			return this.UPC;
		}

		public String SMU_TYPE;

		public String getSMU_TYPE() {
			return this.SMU_TYPE;
		}

		public String LABELD365;

		public String getLABELD365() {
			return this.LABELD365;
		}

		public String LABELNAMED365;

		public String getLABELNAMED365() {
			return this.LABELNAMED365;
		}

		public String FASHIOND365;

		public String getFASHIOND365() {
			return this.FASHIOND365;
		}

		public String PRODUCTD365;

		public String getPRODUCTD365() {
			return this.PRODUCTD365;
		}

		public String DELIVERYFLOW;

		public String getDELIVERYFLOW() {
			return this.DELIVERYFLOW;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2.length) {
					if (length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2.length == 0) {
						commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[1024];
					} else {
						commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2, 0, length);
				strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_2) {

				try {

					int length = 0;

					this.BRAND = readString(dis);

					this.SEASON = readString(dis);

					this.CATEGORY = readString(dis);

					this.REF = readString(dis);

					this.DESCRIPTION = readString(dis);

					this.STYLE = readString(dis);

					this.COLOR = readString(dis);

					this.FASHION = readString(dis);

					this.STYLECOLORLABEL = readString(dis);

					this.COLORNAME = readString(dis);

					this.LBL = readString(dis);

					this.STYLE_COLOR = readString(dis);

					this.GENDER = readString(dis);

					this.AGE_RANGE = readString(dis);

					this.SIZE_RANGE = readString(dis);

					this.SIZE = readString(dis);

					this.US_SIZE = readString(dis);

					this.CM_SIZE = readString(dis);

					this.PRODUCT = readString(dis);

					this.PRODUCT_STATUS = readString(dis);

					this.PRODUCT_TIER = readString(dis);

					this.ACCT_EXCLUS = readString(dis);

					this.SIZE_RATIO_SPLIT = readString(dis);

					this.REC_SIZE_SPLIT = readString(dis);

					this.CARTON_QTY = readString(dis);

					this.ATTRIBUTE = readString(dis);

					this.UNITS = readString(dis);

					this.EUR_RRP = readString(dis);

					this.EUR_WSP = readString(dis);

					this.GBP_RRP = readString(dis);

					this.GBP_WSP = readString(dis);

					this.CHF_RRP = readString(dis);

					this.CHF_WSP = readString(dis);

					this.NOK_RRP = readString(dis);

					this.NOK_WSP = readString(dis);

					this.DKK_RRP = readString(dis);

					this.DKK_WSP = readString(dis);

					this.SEK_RRP = readString(dis);

					this.SEK_WSP = readString(dis);

					this.EUR_FINN_RRP = readString(dis);

					this.EUR_FINN_WSP = readString(dis);

					this.FABRICATION = readString(dis);

					this.COO = readString(dis);

					this.CUSTOM_TARIFF_CODE = readString(dis);

					this.UPC = readString(dis);

					this.SMU_TYPE = readString(dis);

					this.LABELD365 = readString(dis);

					this.LABELNAMED365 = readString(dis);

					this.FASHIOND365 = readString(dis);

					this.PRODUCTD365 = readString(dis);

					this.DELIVERYFLOW = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.BRAND, dos);

				// String

				writeString(this.SEASON, dos);

				// String

				writeString(this.CATEGORY, dos);

				// String

				writeString(this.REF, dos);

				// String

				writeString(this.DESCRIPTION, dos);

				// String

				writeString(this.STYLE, dos);

				// String

				writeString(this.COLOR, dos);

				// String

				writeString(this.FASHION, dos);

				// String

				writeString(this.STYLECOLORLABEL, dos);

				// String

				writeString(this.COLORNAME, dos);

				// String

				writeString(this.LBL, dos);

				// String

				writeString(this.STYLE_COLOR, dos);

				// String

				writeString(this.GENDER, dos);

				// String

				writeString(this.AGE_RANGE, dos);

				// String

				writeString(this.SIZE_RANGE, dos);

				// String

				writeString(this.SIZE, dos);

				// String

				writeString(this.US_SIZE, dos);

				// String

				writeString(this.CM_SIZE, dos);

				// String

				writeString(this.PRODUCT, dos);

				// String

				writeString(this.PRODUCT_STATUS, dos);

				// String

				writeString(this.PRODUCT_TIER, dos);

				// String

				writeString(this.ACCT_EXCLUS, dos);

				// String

				writeString(this.SIZE_RATIO_SPLIT, dos);

				// String

				writeString(this.REC_SIZE_SPLIT, dos);

				// String

				writeString(this.CARTON_QTY, dos);

				// String

				writeString(this.ATTRIBUTE, dos);

				// String

				writeString(this.UNITS, dos);

				// String

				writeString(this.EUR_RRP, dos);

				// String

				writeString(this.EUR_WSP, dos);

				// String

				writeString(this.GBP_RRP, dos);

				// String

				writeString(this.GBP_WSP, dos);

				// String

				writeString(this.CHF_RRP, dos);

				// String

				writeString(this.CHF_WSP, dos);

				// String

				writeString(this.NOK_RRP, dos);

				// String

				writeString(this.NOK_WSP, dos);

				// String

				writeString(this.DKK_RRP, dos);

				// String

				writeString(this.DKK_WSP, dos);

				// String

				writeString(this.SEK_RRP, dos);

				// String

				writeString(this.SEK_WSP, dos);

				// String

				writeString(this.EUR_FINN_RRP, dos);

				// String

				writeString(this.EUR_FINN_WSP, dos);

				// String

				writeString(this.FABRICATION, dos);

				// String

				writeString(this.COO, dos);

				// String

				writeString(this.CUSTOM_TARIFF_CODE, dos);

				// String

				writeString(this.UPC, dos);

				// String

				writeString(this.SMU_TYPE, dos);

				// String

				writeString(this.LABELD365, dos);

				// String

				writeString(this.LABELNAMED365, dos);

				// String

				writeString(this.FASHIOND365, dos);

				// String

				writeString(this.PRODUCTD365, dos);

				// String

				writeString(this.DELIVERYFLOW, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("BRAND=" + BRAND);
			sb.append(",SEASON=" + SEASON);
			sb.append(",CATEGORY=" + CATEGORY);
			sb.append(",REF=" + REF);
			sb.append(",DESCRIPTION=" + DESCRIPTION);
			sb.append(",STYLE=" + STYLE);
			sb.append(",COLOR=" + COLOR);
			sb.append(",FASHION=" + FASHION);
			sb.append(",STYLECOLORLABEL=" + STYLECOLORLABEL);
			sb.append(",COLORNAME=" + COLORNAME);
			sb.append(",LBL=" + LBL);
			sb.append(",STYLE_COLOR=" + STYLE_COLOR);
			sb.append(",GENDER=" + GENDER);
			sb.append(",AGE_RANGE=" + AGE_RANGE);
			sb.append(",SIZE_RANGE=" + SIZE_RANGE);
			sb.append(",SIZE=" + SIZE);
			sb.append(",US_SIZE=" + US_SIZE);
			sb.append(",CM_SIZE=" + CM_SIZE);
			sb.append(",PRODUCT=" + PRODUCT);
			sb.append(",PRODUCT_STATUS=" + PRODUCT_STATUS);
			sb.append(",PRODUCT_TIER=" + PRODUCT_TIER);
			sb.append(",ACCT_EXCLUS=" + ACCT_EXCLUS);
			sb.append(",SIZE_RATIO_SPLIT=" + SIZE_RATIO_SPLIT);
			sb.append(",REC_SIZE_SPLIT=" + REC_SIZE_SPLIT);
			sb.append(",CARTON_QTY=" + CARTON_QTY);
			sb.append(",ATTRIBUTE=" + ATTRIBUTE);
			sb.append(",UNITS=" + UNITS);
			sb.append(",EUR_RRP=" + EUR_RRP);
			sb.append(",EUR_WSP=" + EUR_WSP);
			sb.append(",GBP_RRP=" + GBP_RRP);
			sb.append(",GBP_WSP=" + GBP_WSP);
			sb.append(",CHF_RRP=" + CHF_RRP);
			sb.append(",CHF_WSP=" + CHF_WSP);
			sb.append(",NOK_RRP=" + NOK_RRP);
			sb.append(",NOK_WSP=" + NOK_WSP);
			sb.append(",DKK_RRP=" + DKK_RRP);
			sb.append(",DKK_WSP=" + DKK_WSP);
			sb.append(",SEK_RRP=" + SEK_RRP);
			sb.append(",SEK_WSP=" + SEK_WSP);
			sb.append(",EUR_FINN_RRP=" + EUR_FINN_RRP);
			sb.append(",EUR_FINN_WSP=" + EUR_FINN_WSP);
			sb.append(",FABRICATION=" + FABRICATION);
			sb.append(",COO=" + COO);
			sb.append(",CUSTOM_TARIFF_CODE=" + CUSTOM_TARIFF_CODE);
			sb.append(",UPC=" + UPC);
			sb.append(",SMU_TYPE=" + SMU_TYPE);
			sb.append(",LABELD365=" + LABELD365);
			sb.append(",LABELNAMED365=" + LABELNAMED365);
			sb.append(",FASHIOND365=" + FASHIOND365);
			sb.append(",PRODUCTD365=" + PRODUCTD365);
			sb.append(",DELIVERYFLOW=" + DELIVERYFLOW);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfcopyOfsortie_fullStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOfcopyOfsortie_productStruct
			implements routines.system.IPersistableRow<copyOfcopyOfsortie_productStruct> {
		final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[0];
		static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[0];

		public String ITEMID;

		public String getITEMID() {
			return this.ITEMID;
		}

		public String SEASONCODE;

		public String getSEASONCODE() {
			return this.SEASONCODE;
		}

		public String ISDEFAULT;

		public String getISDEFAULT() {
			return this.ISDEFAULT;
		}

		public String NOOS;

		public String getNOOS() {
			return this.NOOS;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2.length) {
					if (length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2.length == 0) {
						commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[1024];
					} else {
						commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2, 0, length);
				strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_2) {

				try {

					int length = 0;

					this.ITEMID = readString(dis);

					this.SEASONCODE = readString(dis);

					this.ISDEFAULT = readString(dis);

					this.NOOS = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ITEMID, dos);

				// String

				writeString(this.SEASONCODE, dos);

				// String

				writeString(this.ISDEFAULT, dos);

				// String

				writeString(this.NOOS, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ITEMID=" + ITEMID);
			sb.append(",SEASONCODE=" + SEASONCODE);
			sb.append(",ISDEFAULT=" + ISDEFAULT);
			sb.append(",NOOS=" + NOOS);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfcopyOfsortie_productStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOfsortie_full_2Struct
			implements routines.system.IPersistableRow<copyOfsortie_full_2Struct> {
		final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[0];
		static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[0];

		public String BRAND;

		public String getBRAND() {
			return this.BRAND;
		}

		public String SEASON;

		public String getSEASON() {
			return this.SEASON;
		}

		public String CATEGORY;

		public String getCATEGORY() {
			return this.CATEGORY;
		}

		public String REF;

		public String getREF() {
			return this.REF;
		}

		public String DESCRIPTION;

		public String getDESCRIPTION() {
			return this.DESCRIPTION;
		}

		public String STYLE;

		public String getSTYLE() {
			return this.STYLE;
		}

		public String COLOR;

		public String getCOLOR() {
			return this.COLOR;
		}

		public String FASHION;

		public String getFASHION() {
			return this.FASHION;
		}

		public String STYLECOLORLABEL;

		public String getSTYLECOLORLABEL() {
			return this.STYLECOLORLABEL;
		}

		public String COLORNAME;

		public String getCOLORNAME() {
			return this.COLORNAME;
		}

		public String LBL;

		public String getLBL() {
			return this.LBL;
		}

		public String STYLE_COLOR;

		public String getSTYLE_COLOR() {
			return this.STYLE_COLOR;
		}

		public String GENDER;

		public String getGENDER() {
			return this.GENDER;
		}

		public String AGE_RANGE;

		public String getAGE_RANGE() {
			return this.AGE_RANGE;
		}

		public String SIZE_RANGE;

		public String getSIZE_RANGE() {
			return this.SIZE_RANGE;
		}

		public String SIZE;

		public String getSIZE() {
			return this.SIZE;
		}

		public String US_SIZE;

		public String getUS_SIZE() {
			return this.US_SIZE;
		}

		public String CM_SIZE;

		public String getCM_SIZE() {
			return this.CM_SIZE;
		}

		public String PRODUCT;

		public String getPRODUCT() {
			return this.PRODUCT;
		}

		public String PRODUCT_STATUS;

		public String getPRODUCT_STATUS() {
			return this.PRODUCT_STATUS;
		}

		public String PRODUCT_TIER;

		public String getPRODUCT_TIER() {
			return this.PRODUCT_TIER;
		}

		public String ACCT_EXCLUS;

		public String getACCT_EXCLUS() {
			return this.ACCT_EXCLUS;
		}

		public String SIZE_RATIO_SPLIT;

		public String getSIZE_RATIO_SPLIT() {
			return this.SIZE_RATIO_SPLIT;
		}

		public String REC_SIZE_SPLIT;

		public String getREC_SIZE_SPLIT() {
			return this.REC_SIZE_SPLIT;
		}

		public String CARTON_QTY;

		public String getCARTON_QTY() {
			return this.CARTON_QTY;
		}

		public String ATTRIBUTE;

		public String getATTRIBUTE() {
			return this.ATTRIBUTE;
		}

		public String UNITS;

		public String getUNITS() {
			return this.UNITS;
		}

		public String EUR_RRP;

		public String getEUR_RRP() {
			return this.EUR_RRP;
		}

		public String EUR_WSP;

		public String getEUR_WSP() {
			return this.EUR_WSP;
		}

		public String GBP_RRP;

		public String getGBP_RRP() {
			return this.GBP_RRP;
		}

		public String GBP_WSP;

		public String getGBP_WSP() {
			return this.GBP_WSP;
		}

		public String CHF_RRP;

		public String getCHF_RRP() {
			return this.CHF_RRP;
		}

		public String CHF_WSP;

		public String getCHF_WSP() {
			return this.CHF_WSP;
		}

		public String NOK_RRP;

		public String getNOK_RRP() {
			return this.NOK_RRP;
		}

		public String NOK_WSP;

		public String getNOK_WSP() {
			return this.NOK_WSP;
		}

		public String DKK_RRP;

		public String getDKK_RRP() {
			return this.DKK_RRP;
		}

		public String DKK_WSP;

		public String getDKK_WSP() {
			return this.DKK_WSP;
		}

		public String SEK_RRP;

		public String getSEK_RRP() {
			return this.SEK_RRP;
		}

		public String SEK_WSP;

		public String getSEK_WSP() {
			return this.SEK_WSP;
		}

		public String EUR_FINN_RRP;

		public String getEUR_FINN_RRP() {
			return this.EUR_FINN_RRP;
		}

		public String EUR_FINN_WSP;

		public String getEUR_FINN_WSP() {
			return this.EUR_FINN_WSP;
		}

		public String FABRICATION;

		public String getFABRICATION() {
			return this.FABRICATION;
		}

		public String COO;

		public String getCOO() {
			return this.COO;
		}

		public String CUSTOM_TARIFF_CODE;

		public String getCUSTOM_TARIFF_CODE() {
			return this.CUSTOM_TARIFF_CODE;
		}

		public String UPC;

		public String getUPC() {
			return this.UPC;
		}

		public String SMU_TYPE;

		public String getSMU_TYPE() {
			return this.SMU_TYPE;
		}

		public String LABELD365;

		public String getLABELD365() {
			return this.LABELD365;
		}

		public String LABELNAMED365;

		public String getLABELNAMED365() {
			return this.LABELNAMED365;
		}

		public String FASHIOND365;

		public String getFASHIOND365() {
			return this.FASHIOND365;
		}

		public String PRODUCTD365;

		public String getPRODUCTD365() {
			return this.PRODUCTD365;
		}

		public String DELIVERYFLOW;

		public String getDELIVERYFLOW() {
			return this.DELIVERYFLOW;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2.length) {
					if (length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2.length == 0) {
						commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[1024];
					} else {
						commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2, 0, length);
				strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_2) {

				try {

					int length = 0;

					this.BRAND = readString(dis);

					this.SEASON = readString(dis);

					this.CATEGORY = readString(dis);

					this.REF = readString(dis);

					this.DESCRIPTION = readString(dis);

					this.STYLE = readString(dis);

					this.COLOR = readString(dis);

					this.FASHION = readString(dis);

					this.STYLECOLORLABEL = readString(dis);

					this.COLORNAME = readString(dis);

					this.LBL = readString(dis);

					this.STYLE_COLOR = readString(dis);

					this.GENDER = readString(dis);

					this.AGE_RANGE = readString(dis);

					this.SIZE_RANGE = readString(dis);

					this.SIZE = readString(dis);

					this.US_SIZE = readString(dis);

					this.CM_SIZE = readString(dis);

					this.PRODUCT = readString(dis);

					this.PRODUCT_STATUS = readString(dis);

					this.PRODUCT_TIER = readString(dis);

					this.ACCT_EXCLUS = readString(dis);

					this.SIZE_RATIO_SPLIT = readString(dis);

					this.REC_SIZE_SPLIT = readString(dis);

					this.CARTON_QTY = readString(dis);

					this.ATTRIBUTE = readString(dis);

					this.UNITS = readString(dis);

					this.EUR_RRP = readString(dis);

					this.EUR_WSP = readString(dis);

					this.GBP_RRP = readString(dis);

					this.GBP_WSP = readString(dis);

					this.CHF_RRP = readString(dis);

					this.CHF_WSP = readString(dis);

					this.NOK_RRP = readString(dis);

					this.NOK_WSP = readString(dis);

					this.DKK_RRP = readString(dis);

					this.DKK_WSP = readString(dis);

					this.SEK_RRP = readString(dis);

					this.SEK_WSP = readString(dis);

					this.EUR_FINN_RRP = readString(dis);

					this.EUR_FINN_WSP = readString(dis);

					this.FABRICATION = readString(dis);

					this.COO = readString(dis);

					this.CUSTOM_TARIFF_CODE = readString(dis);

					this.UPC = readString(dis);

					this.SMU_TYPE = readString(dis);

					this.LABELD365 = readString(dis);

					this.LABELNAMED365 = readString(dis);

					this.FASHIOND365 = readString(dis);

					this.PRODUCTD365 = readString(dis);

					this.DELIVERYFLOW = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.BRAND, dos);

				// String

				writeString(this.SEASON, dos);

				// String

				writeString(this.CATEGORY, dos);

				// String

				writeString(this.REF, dos);

				// String

				writeString(this.DESCRIPTION, dos);

				// String

				writeString(this.STYLE, dos);

				// String

				writeString(this.COLOR, dos);

				// String

				writeString(this.FASHION, dos);

				// String

				writeString(this.STYLECOLORLABEL, dos);

				// String

				writeString(this.COLORNAME, dos);

				// String

				writeString(this.LBL, dos);

				// String

				writeString(this.STYLE_COLOR, dos);

				// String

				writeString(this.GENDER, dos);

				// String

				writeString(this.AGE_RANGE, dos);

				// String

				writeString(this.SIZE_RANGE, dos);

				// String

				writeString(this.SIZE, dos);

				// String

				writeString(this.US_SIZE, dos);

				// String

				writeString(this.CM_SIZE, dos);

				// String

				writeString(this.PRODUCT, dos);

				// String

				writeString(this.PRODUCT_STATUS, dos);

				// String

				writeString(this.PRODUCT_TIER, dos);

				// String

				writeString(this.ACCT_EXCLUS, dos);

				// String

				writeString(this.SIZE_RATIO_SPLIT, dos);

				// String

				writeString(this.REC_SIZE_SPLIT, dos);

				// String

				writeString(this.CARTON_QTY, dos);

				// String

				writeString(this.ATTRIBUTE, dos);

				// String

				writeString(this.UNITS, dos);

				// String

				writeString(this.EUR_RRP, dos);

				// String

				writeString(this.EUR_WSP, dos);

				// String

				writeString(this.GBP_RRP, dos);

				// String

				writeString(this.GBP_WSP, dos);

				// String

				writeString(this.CHF_RRP, dos);

				// String

				writeString(this.CHF_WSP, dos);

				// String

				writeString(this.NOK_RRP, dos);

				// String

				writeString(this.NOK_WSP, dos);

				// String

				writeString(this.DKK_RRP, dos);

				// String

				writeString(this.DKK_WSP, dos);

				// String

				writeString(this.SEK_RRP, dos);

				// String

				writeString(this.SEK_WSP, dos);

				// String

				writeString(this.EUR_FINN_RRP, dos);

				// String

				writeString(this.EUR_FINN_WSP, dos);

				// String

				writeString(this.FABRICATION, dos);

				// String

				writeString(this.COO, dos);

				// String

				writeString(this.CUSTOM_TARIFF_CODE, dos);

				// String

				writeString(this.UPC, dos);

				// String

				writeString(this.SMU_TYPE, dos);

				// String

				writeString(this.LABELD365, dos);

				// String

				writeString(this.LABELNAMED365, dos);

				// String

				writeString(this.FASHIOND365, dos);

				// String

				writeString(this.PRODUCTD365, dos);

				// String

				writeString(this.DELIVERYFLOW, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("BRAND=" + BRAND);
			sb.append(",SEASON=" + SEASON);
			sb.append(",CATEGORY=" + CATEGORY);
			sb.append(",REF=" + REF);
			sb.append(",DESCRIPTION=" + DESCRIPTION);
			sb.append(",STYLE=" + STYLE);
			sb.append(",COLOR=" + COLOR);
			sb.append(",FASHION=" + FASHION);
			sb.append(",STYLECOLORLABEL=" + STYLECOLORLABEL);
			sb.append(",COLORNAME=" + COLORNAME);
			sb.append(",LBL=" + LBL);
			sb.append(",STYLE_COLOR=" + STYLE_COLOR);
			sb.append(",GENDER=" + GENDER);
			sb.append(",AGE_RANGE=" + AGE_RANGE);
			sb.append(",SIZE_RANGE=" + SIZE_RANGE);
			sb.append(",SIZE=" + SIZE);
			sb.append(",US_SIZE=" + US_SIZE);
			sb.append(",CM_SIZE=" + CM_SIZE);
			sb.append(",PRODUCT=" + PRODUCT);
			sb.append(",PRODUCT_STATUS=" + PRODUCT_STATUS);
			sb.append(",PRODUCT_TIER=" + PRODUCT_TIER);
			sb.append(",ACCT_EXCLUS=" + ACCT_EXCLUS);
			sb.append(",SIZE_RATIO_SPLIT=" + SIZE_RATIO_SPLIT);
			sb.append(",REC_SIZE_SPLIT=" + REC_SIZE_SPLIT);
			sb.append(",CARTON_QTY=" + CARTON_QTY);
			sb.append(",ATTRIBUTE=" + ATTRIBUTE);
			sb.append(",UNITS=" + UNITS);
			sb.append(",EUR_RRP=" + EUR_RRP);
			sb.append(",EUR_WSP=" + EUR_WSP);
			sb.append(",GBP_RRP=" + GBP_RRP);
			sb.append(",GBP_WSP=" + GBP_WSP);
			sb.append(",CHF_RRP=" + CHF_RRP);
			sb.append(",CHF_WSP=" + CHF_WSP);
			sb.append(",NOK_RRP=" + NOK_RRP);
			sb.append(",NOK_WSP=" + NOK_WSP);
			sb.append(",DKK_RRP=" + DKK_RRP);
			sb.append(",DKK_WSP=" + DKK_WSP);
			sb.append(",SEK_RRP=" + SEK_RRP);
			sb.append(",SEK_WSP=" + SEK_WSP);
			sb.append(",EUR_FINN_RRP=" + EUR_FINN_RRP);
			sb.append(",EUR_FINN_WSP=" + EUR_FINN_WSP);
			sb.append(",FABRICATION=" + FABRICATION);
			sb.append(",COO=" + COO);
			sb.append(",CUSTOM_TARIFF_CODE=" + CUSTOM_TARIFF_CODE);
			sb.append(",UPC=" + UPC);
			sb.append(",SMU_TYPE=" + SMU_TYPE);
			sb.append(",LABELD365=" + LABELD365);
			sb.append(",LABELNAMED365=" + LABELNAMED365);
			sb.append(",FASHIOND365=" + FASHIOND365);
			sb.append(",PRODUCTD365=" + PRODUCTD365);
			sb.append(",DELIVERYFLOW=" + DELIVERYFLOW);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfsortie_full_2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOfsortie_productStruct
			implements routines.system.IPersistableRow<copyOfsortie_productStruct> {
		final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[0];
		static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[0];

		public String PRODUCTNUMBER;

		public String getPRODUCTNUMBER() {
			return this.PRODUCTNUMBER;
		}

		public String PRODUCTCATEGORYNAME;

		public String getPRODUCTCATEGORYNAME() {
			return this.PRODUCTCATEGORYNAME;
		}

		public String PRODUCTCATEGORYHIERARCHYNAME;

		public String getPRODUCTCATEGORYHIERARCHYNAME() {
			return this.PRODUCTCATEGORYHIERARCHYNAME;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2.length) {
					if (length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2.length == 0) {
						commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[1024];
					} else {
						commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2, 0, length);
				strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_2) {

				try {

					int length = 0;

					this.PRODUCTNUMBER = readString(dis);

					this.PRODUCTCATEGORYNAME = readString(dis);

					this.PRODUCTCATEGORYHIERARCHYNAME = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.PRODUCTNUMBER, dos);

				// String

				writeString(this.PRODUCTCATEGORYNAME, dos);

				// String

				writeString(this.PRODUCTCATEGORYHIERARCHYNAME, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PRODUCTNUMBER=" + PRODUCTNUMBER);
			sb.append(",PRODUCTCATEGORYNAME=" + PRODUCTCATEGORYNAME);
			sb.append(",PRODUCTCATEGORYHIERARCHYNAME=" + PRODUCTCATEGORYHIERARCHYNAME);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfsortie_productStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[0];
		static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[0];

		public String BRAND;

		public String getBRAND() {
			return this.BRAND;
		}

		public String SEASON;

		public String getSEASON() {
			return this.SEASON;
		}

		public String CATEGORY;

		public String getCATEGORY() {
			return this.CATEGORY;
		}

		public String REF;

		public String getREF() {
			return this.REF;
		}

		public String DESCRIPTION;

		public String getDESCRIPTION() {
			return this.DESCRIPTION;
		}

		public String STYLE;

		public String getSTYLE() {
			return this.STYLE;
		}

		public String COLOR;

		public String getCOLOR() {
			return this.COLOR;
		}

		public String FASHION;

		public String getFASHION() {
			return this.FASHION;
		}

		public String STYLECOLORLABEL;

		public String getSTYLECOLORLABEL() {
			return this.STYLECOLORLABEL;
		}

		public String COLORNAME;

		public String getCOLORNAME() {
			return this.COLORNAME;
		}

		public String LBL;

		public String getLBL() {
			return this.LBL;
		}

		public String STYLE_COLOR;

		public String getSTYLE_COLOR() {
			return this.STYLE_COLOR;
		}

		public String GENDER;

		public String getGENDER() {
			return this.GENDER;
		}

		public String AGE_RANGE;

		public String getAGE_RANGE() {
			return this.AGE_RANGE;
		}

		public String SIZE_RANGE;

		public String getSIZE_RANGE() {
			return this.SIZE_RANGE;
		}

		public String SIZE;

		public String getSIZE() {
			return this.SIZE;
		}

		public String US_SIZE;

		public String getUS_SIZE() {
			return this.US_SIZE;
		}

		public String CM_SIZE;

		public String getCM_SIZE() {
			return this.CM_SIZE;
		}

		public String PRODUCT;

		public String getPRODUCT() {
			return this.PRODUCT;
		}

		public String PRODUCT_STATUS;

		public String getPRODUCT_STATUS() {
			return this.PRODUCT_STATUS;
		}

		public String PRODUCT_TIER;

		public String getPRODUCT_TIER() {
			return this.PRODUCT_TIER;
		}

		public String ACCT_EXCLUS;

		public String getACCT_EXCLUS() {
			return this.ACCT_EXCLUS;
		}

		public String SIZE_RATIO_SPLIT;

		public String getSIZE_RATIO_SPLIT() {
			return this.SIZE_RATIO_SPLIT;
		}

		public String REC_SIZE_SPLIT;

		public String getREC_SIZE_SPLIT() {
			return this.REC_SIZE_SPLIT;
		}

		public String CARTON_QTY;

		public String getCARTON_QTY() {
			return this.CARTON_QTY;
		}

		public String ATTRIBUTE;

		public String getATTRIBUTE() {
			return this.ATTRIBUTE;
		}

		public String UNITS;

		public String getUNITS() {
			return this.UNITS;
		}

		public String EUR_RRP;

		public String getEUR_RRP() {
			return this.EUR_RRP;
		}

		public String EUR_WSP;

		public String getEUR_WSP() {
			return this.EUR_WSP;
		}

		public String GBP_RRP;

		public String getGBP_RRP() {
			return this.GBP_RRP;
		}

		public String GBP_WSP;

		public String getGBP_WSP() {
			return this.GBP_WSP;
		}

		public String CHF_RRP;

		public String getCHF_RRP() {
			return this.CHF_RRP;
		}

		public String CHF_WSP;

		public String getCHF_WSP() {
			return this.CHF_WSP;
		}

		public String NOK_RRP;

		public String getNOK_RRP() {
			return this.NOK_RRP;
		}

		public String NOK_WSP;

		public String getNOK_WSP() {
			return this.NOK_WSP;
		}

		public String DKK_RRP;

		public String getDKK_RRP() {
			return this.DKK_RRP;
		}

		public String DKK_WSP;

		public String getDKK_WSP() {
			return this.DKK_WSP;
		}

		public String SEK_RRP;

		public String getSEK_RRP() {
			return this.SEK_RRP;
		}

		public String SEK_WSP;

		public String getSEK_WSP() {
			return this.SEK_WSP;
		}

		public String EUR_FINN_RRP;

		public String getEUR_FINN_RRP() {
			return this.EUR_FINN_RRP;
		}

		public String EUR_FINN_WSP;

		public String getEUR_FINN_WSP() {
			return this.EUR_FINN_WSP;
		}

		public String FABRICATION;

		public String getFABRICATION() {
			return this.FABRICATION;
		}

		public String COO;

		public String getCOO() {
			return this.COO;
		}

		public String CUSTOM_TARIFF_CODE;

		public String getCUSTOM_TARIFF_CODE() {
			return this.CUSTOM_TARIFF_CODE;
		}

		public String UPC;

		public String getUPC() {
			return this.UPC;
		}

		public String SMU_TYPE;

		public String getSMU_TYPE() {
			return this.SMU_TYPE;
		}

		public String LABELD365;

		public String getLABELD365() {
			return this.LABELD365;
		}

		public String LABELNAMED365;

		public String getLABELNAMED365() {
			return this.LABELNAMED365;
		}

		public String FASHIOND365;

		public String getFASHIOND365() {
			return this.FASHIOND365;
		}

		public String PRODUCTD365;

		public String getPRODUCTD365() {
			return this.PRODUCTD365;
		}

		public String DELIVERYFLOW;

		public String getDELIVERYFLOW() {
			return this.DELIVERYFLOW;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2.length) {
					if (length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2.length == 0) {
						commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[1024];
					} else {
						commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2, 0, length);
				strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_2) {

				try {

					int length = 0;

					this.BRAND = readString(dis);

					this.SEASON = readString(dis);

					this.CATEGORY = readString(dis);

					this.REF = readString(dis);

					this.DESCRIPTION = readString(dis);

					this.STYLE = readString(dis);

					this.COLOR = readString(dis);

					this.FASHION = readString(dis);

					this.STYLECOLORLABEL = readString(dis);

					this.COLORNAME = readString(dis);

					this.LBL = readString(dis);

					this.STYLE_COLOR = readString(dis);

					this.GENDER = readString(dis);

					this.AGE_RANGE = readString(dis);

					this.SIZE_RANGE = readString(dis);

					this.SIZE = readString(dis);

					this.US_SIZE = readString(dis);

					this.CM_SIZE = readString(dis);

					this.PRODUCT = readString(dis);

					this.PRODUCT_STATUS = readString(dis);

					this.PRODUCT_TIER = readString(dis);

					this.ACCT_EXCLUS = readString(dis);

					this.SIZE_RATIO_SPLIT = readString(dis);

					this.REC_SIZE_SPLIT = readString(dis);

					this.CARTON_QTY = readString(dis);

					this.ATTRIBUTE = readString(dis);

					this.UNITS = readString(dis);

					this.EUR_RRP = readString(dis);

					this.EUR_WSP = readString(dis);

					this.GBP_RRP = readString(dis);

					this.GBP_WSP = readString(dis);

					this.CHF_RRP = readString(dis);

					this.CHF_WSP = readString(dis);

					this.NOK_RRP = readString(dis);

					this.NOK_WSP = readString(dis);

					this.DKK_RRP = readString(dis);

					this.DKK_WSP = readString(dis);

					this.SEK_RRP = readString(dis);

					this.SEK_WSP = readString(dis);

					this.EUR_FINN_RRP = readString(dis);

					this.EUR_FINN_WSP = readString(dis);

					this.FABRICATION = readString(dis);

					this.COO = readString(dis);

					this.CUSTOM_TARIFF_CODE = readString(dis);

					this.UPC = readString(dis);

					this.SMU_TYPE = readString(dis);

					this.LABELD365 = readString(dis);

					this.LABELNAMED365 = readString(dis);

					this.FASHIOND365 = readString(dis);

					this.PRODUCTD365 = readString(dis);

					this.DELIVERYFLOW = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.BRAND, dos);

				// String

				writeString(this.SEASON, dos);

				// String

				writeString(this.CATEGORY, dos);

				// String

				writeString(this.REF, dos);

				// String

				writeString(this.DESCRIPTION, dos);

				// String

				writeString(this.STYLE, dos);

				// String

				writeString(this.COLOR, dos);

				// String

				writeString(this.FASHION, dos);

				// String

				writeString(this.STYLECOLORLABEL, dos);

				// String

				writeString(this.COLORNAME, dos);

				// String

				writeString(this.LBL, dos);

				// String

				writeString(this.STYLE_COLOR, dos);

				// String

				writeString(this.GENDER, dos);

				// String

				writeString(this.AGE_RANGE, dos);

				// String

				writeString(this.SIZE_RANGE, dos);

				// String

				writeString(this.SIZE, dos);

				// String

				writeString(this.US_SIZE, dos);

				// String

				writeString(this.CM_SIZE, dos);

				// String

				writeString(this.PRODUCT, dos);

				// String

				writeString(this.PRODUCT_STATUS, dos);

				// String

				writeString(this.PRODUCT_TIER, dos);

				// String

				writeString(this.ACCT_EXCLUS, dos);

				// String

				writeString(this.SIZE_RATIO_SPLIT, dos);

				// String

				writeString(this.REC_SIZE_SPLIT, dos);

				// String

				writeString(this.CARTON_QTY, dos);

				// String

				writeString(this.ATTRIBUTE, dos);

				// String

				writeString(this.UNITS, dos);

				// String

				writeString(this.EUR_RRP, dos);

				// String

				writeString(this.EUR_WSP, dos);

				// String

				writeString(this.GBP_RRP, dos);

				// String

				writeString(this.GBP_WSP, dos);

				// String

				writeString(this.CHF_RRP, dos);

				// String

				writeString(this.CHF_WSP, dos);

				// String

				writeString(this.NOK_RRP, dos);

				// String

				writeString(this.NOK_WSP, dos);

				// String

				writeString(this.DKK_RRP, dos);

				// String

				writeString(this.DKK_WSP, dos);

				// String

				writeString(this.SEK_RRP, dos);

				// String

				writeString(this.SEK_WSP, dos);

				// String

				writeString(this.EUR_FINN_RRP, dos);

				// String

				writeString(this.EUR_FINN_WSP, dos);

				// String

				writeString(this.FABRICATION, dos);

				// String

				writeString(this.COO, dos);

				// String

				writeString(this.CUSTOM_TARIFF_CODE, dos);

				// String

				writeString(this.UPC, dos);

				// String

				writeString(this.SMU_TYPE, dos);

				// String

				writeString(this.LABELD365, dos);

				// String

				writeString(this.LABELNAMED365, dos);

				// String

				writeString(this.FASHIOND365, dos);

				// String

				writeString(this.PRODUCTD365, dos);

				// String

				writeString(this.DELIVERYFLOW, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("BRAND=" + BRAND);
			sb.append(",SEASON=" + SEASON);
			sb.append(",CATEGORY=" + CATEGORY);
			sb.append(",REF=" + REF);
			sb.append(",DESCRIPTION=" + DESCRIPTION);
			sb.append(",STYLE=" + STYLE);
			sb.append(",COLOR=" + COLOR);
			sb.append(",FASHION=" + FASHION);
			sb.append(",STYLECOLORLABEL=" + STYLECOLORLABEL);
			sb.append(",COLORNAME=" + COLORNAME);
			sb.append(",LBL=" + LBL);
			sb.append(",STYLE_COLOR=" + STYLE_COLOR);
			sb.append(",GENDER=" + GENDER);
			sb.append(",AGE_RANGE=" + AGE_RANGE);
			sb.append(",SIZE_RANGE=" + SIZE_RANGE);
			sb.append(",SIZE=" + SIZE);
			sb.append(",US_SIZE=" + US_SIZE);
			sb.append(",CM_SIZE=" + CM_SIZE);
			sb.append(",PRODUCT=" + PRODUCT);
			sb.append(",PRODUCT_STATUS=" + PRODUCT_STATUS);
			sb.append(",PRODUCT_TIER=" + PRODUCT_TIER);
			sb.append(",ACCT_EXCLUS=" + ACCT_EXCLUS);
			sb.append(",SIZE_RATIO_SPLIT=" + SIZE_RATIO_SPLIT);
			sb.append(",REC_SIZE_SPLIT=" + REC_SIZE_SPLIT);
			sb.append(",CARTON_QTY=" + CARTON_QTY);
			sb.append(",ATTRIBUTE=" + ATTRIBUTE);
			sb.append(",UNITS=" + UNITS);
			sb.append(",EUR_RRP=" + EUR_RRP);
			sb.append(",EUR_WSP=" + EUR_WSP);
			sb.append(",GBP_RRP=" + GBP_RRP);
			sb.append(",GBP_WSP=" + GBP_WSP);
			sb.append(",CHF_RRP=" + CHF_RRP);
			sb.append(",CHF_WSP=" + CHF_WSP);
			sb.append(",NOK_RRP=" + NOK_RRP);
			sb.append(",NOK_WSP=" + NOK_WSP);
			sb.append(",DKK_RRP=" + DKK_RRP);
			sb.append(",DKK_WSP=" + DKK_WSP);
			sb.append(",SEK_RRP=" + SEK_RRP);
			sb.append(",SEK_WSP=" + SEK_WSP);
			sb.append(",EUR_FINN_RRP=" + EUR_FINN_RRP);
			sb.append(",EUR_FINN_WSP=" + EUR_FINN_WSP);
			sb.append(",FABRICATION=" + FABRICATION);
			sb.append(",COO=" + COO);
			sb.append(",CUSTOM_TARIFF_CODE=" + CUSTOM_TARIFF_CODE);
			sb.append(",UPC=" + UPC);
			sb.append(",SMU_TYPE=" + SMU_TYPE);
			sb.append(",LABELD365=" + LABELD365);
			sb.append(",LABELNAMED365=" + LABELNAMED365);
			sb.append(",FASHIOND365=" + FASHIOND365);
			sb.append(",PRODUCTD365=" + PRODUCTD365);
			sb.append(",DELIVERYFLOW=" + DELIVERYFLOW);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class sortie_full_catStruct implements routines.system.IPersistableRow<sortie_full_catStruct> {
		final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[0];
		static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[0];

		public String BRAND;

		public String getBRAND() {
			return this.BRAND;
		}

		public String SEASON;

		public String getSEASON() {
			return this.SEASON;
		}

		public String CATEGORY;

		public String getCATEGORY() {
			return this.CATEGORY;
		}

		public String REF;

		public String getREF() {
			return this.REF;
		}

		public String DESCRIPTION;

		public String getDESCRIPTION() {
			return this.DESCRIPTION;
		}

		public String STYLE;

		public String getSTYLE() {
			return this.STYLE;
		}

		public String COLOR;

		public String getCOLOR() {
			return this.COLOR;
		}

		public String FASHION;

		public String getFASHION() {
			return this.FASHION;
		}

		public String STYLECOLORLABEL;

		public String getSTYLECOLORLABEL() {
			return this.STYLECOLORLABEL;
		}

		public String COLORNAME;

		public String getCOLORNAME() {
			return this.COLORNAME;
		}

		public String LBL;

		public String getLBL() {
			return this.LBL;
		}

		public String STYLE_COLOR;

		public String getSTYLE_COLOR() {
			return this.STYLE_COLOR;
		}

		public String GENDER;

		public String getGENDER() {
			return this.GENDER;
		}

		public String AGE_RANGE;

		public String getAGE_RANGE() {
			return this.AGE_RANGE;
		}

		public String SIZE_RANGE;

		public String getSIZE_RANGE() {
			return this.SIZE_RANGE;
		}

		public String SIZE;

		public String getSIZE() {
			return this.SIZE;
		}

		public String US_SIZE;

		public String getUS_SIZE() {
			return this.US_SIZE;
		}

		public String CM_SIZE;

		public String getCM_SIZE() {
			return this.CM_SIZE;
		}

		public String PRODUCT;

		public String getPRODUCT() {
			return this.PRODUCT;
		}

		public String PRODUCT_STATUS;

		public String getPRODUCT_STATUS() {
			return this.PRODUCT_STATUS;
		}

		public String PRODUCT_TIER;

		public String getPRODUCT_TIER() {
			return this.PRODUCT_TIER;
		}

		public String ACCT_EXCLUS;

		public String getACCT_EXCLUS() {
			return this.ACCT_EXCLUS;
		}

		public String SIZE_RATIO_SPLIT;

		public String getSIZE_RATIO_SPLIT() {
			return this.SIZE_RATIO_SPLIT;
		}

		public String REC_SIZE_SPLIT;

		public String getREC_SIZE_SPLIT() {
			return this.REC_SIZE_SPLIT;
		}

		public String CARTON_QTY;

		public String getCARTON_QTY() {
			return this.CARTON_QTY;
		}

		public String ATTRIBUTE;

		public String getATTRIBUTE() {
			return this.ATTRIBUTE;
		}

		public String UNITS;

		public String getUNITS() {
			return this.UNITS;
		}

		public String EUR_RRP;

		public String getEUR_RRP() {
			return this.EUR_RRP;
		}

		public String EUR_WSP;

		public String getEUR_WSP() {
			return this.EUR_WSP;
		}

		public String GBP_RRP;

		public String getGBP_RRP() {
			return this.GBP_RRP;
		}

		public String GBP_WSP;

		public String getGBP_WSP() {
			return this.GBP_WSP;
		}

		public String CHF_RRP;

		public String getCHF_RRP() {
			return this.CHF_RRP;
		}

		public String CHF_WSP;

		public String getCHF_WSP() {
			return this.CHF_WSP;
		}

		public String NOK_RRP;

		public String getNOK_RRP() {
			return this.NOK_RRP;
		}

		public String NOK_WSP;

		public String getNOK_WSP() {
			return this.NOK_WSP;
		}

		public String DKK_RRP;

		public String getDKK_RRP() {
			return this.DKK_RRP;
		}

		public String DKK_WSP;

		public String getDKK_WSP() {
			return this.DKK_WSP;
		}

		public String SEK_RRP;

		public String getSEK_RRP() {
			return this.SEK_RRP;
		}

		public String SEK_WSP;

		public String getSEK_WSP() {
			return this.SEK_WSP;
		}

		public String EUR_FINN_RRP;

		public String getEUR_FINN_RRP() {
			return this.EUR_FINN_RRP;
		}

		public String EUR_FINN_WSP;

		public String getEUR_FINN_WSP() {
			return this.EUR_FINN_WSP;
		}

		public String FABRICATION;

		public String getFABRICATION() {
			return this.FABRICATION;
		}

		public String COO;

		public String getCOO() {
			return this.COO;
		}

		public String CUSTOM_TARIFF_CODE;

		public String getCUSTOM_TARIFF_CODE() {
			return this.CUSTOM_TARIFF_CODE;
		}

		public String UPC;

		public String getUPC() {
			return this.UPC;
		}

		public String SMU_TYPE;

		public String getSMU_TYPE() {
			return this.SMU_TYPE;
		}

		public String LABELD365;

		public String getLABELD365() {
			return this.LABELD365;
		}

		public String LABELNAMED365;

		public String getLABELNAMED365() {
			return this.LABELNAMED365;
		}

		public String FASHIOND365;

		public String getFASHIOND365() {
			return this.FASHIOND365;
		}

		public String PRODUCTD365;

		public String getPRODUCTD365() {
			return this.PRODUCTD365;
		}

		public String DELIVERYFLOW;

		public String getDELIVERYFLOW() {
			return this.DELIVERYFLOW;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2.length) {
					if (length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2.length == 0) {
						commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[1024];
					} else {
						commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2, 0, length);
				strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_2) {

				try {

					int length = 0;

					this.BRAND = readString(dis);

					this.SEASON = readString(dis);

					this.CATEGORY = readString(dis);

					this.REF = readString(dis);

					this.DESCRIPTION = readString(dis);

					this.STYLE = readString(dis);

					this.COLOR = readString(dis);

					this.FASHION = readString(dis);

					this.STYLECOLORLABEL = readString(dis);

					this.COLORNAME = readString(dis);

					this.LBL = readString(dis);

					this.STYLE_COLOR = readString(dis);

					this.GENDER = readString(dis);

					this.AGE_RANGE = readString(dis);

					this.SIZE_RANGE = readString(dis);

					this.SIZE = readString(dis);

					this.US_SIZE = readString(dis);

					this.CM_SIZE = readString(dis);

					this.PRODUCT = readString(dis);

					this.PRODUCT_STATUS = readString(dis);

					this.PRODUCT_TIER = readString(dis);

					this.ACCT_EXCLUS = readString(dis);

					this.SIZE_RATIO_SPLIT = readString(dis);

					this.REC_SIZE_SPLIT = readString(dis);

					this.CARTON_QTY = readString(dis);

					this.ATTRIBUTE = readString(dis);

					this.UNITS = readString(dis);

					this.EUR_RRP = readString(dis);

					this.EUR_WSP = readString(dis);

					this.GBP_RRP = readString(dis);

					this.GBP_WSP = readString(dis);

					this.CHF_RRP = readString(dis);

					this.CHF_WSP = readString(dis);

					this.NOK_RRP = readString(dis);

					this.NOK_WSP = readString(dis);

					this.DKK_RRP = readString(dis);

					this.DKK_WSP = readString(dis);

					this.SEK_RRP = readString(dis);

					this.SEK_WSP = readString(dis);

					this.EUR_FINN_RRP = readString(dis);

					this.EUR_FINN_WSP = readString(dis);

					this.FABRICATION = readString(dis);

					this.COO = readString(dis);

					this.CUSTOM_TARIFF_CODE = readString(dis);

					this.UPC = readString(dis);

					this.SMU_TYPE = readString(dis);

					this.LABELD365 = readString(dis);

					this.LABELNAMED365 = readString(dis);

					this.FASHIOND365 = readString(dis);

					this.PRODUCTD365 = readString(dis);

					this.DELIVERYFLOW = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.BRAND, dos);

				// String

				writeString(this.SEASON, dos);

				// String

				writeString(this.CATEGORY, dos);

				// String

				writeString(this.REF, dos);

				// String

				writeString(this.DESCRIPTION, dos);

				// String

				writeString(this.STYLE, dos);

				// String

				writeString(this.COLOR, dos);

				// String

				writeString(this.FASHION, dos);

				// String

				writeString(this.STYLECOLORLABEL, dos);

				// String

				writeString(this.COLORNAME, dos);

				// String

				writeString(this.LBL, dos);

				// String

				writeString(this.STYLE_COLOR, dos);

				// String

				writeString(this.GENDER, dos);

				// String

				writeString(this.AGE_RANGE, dos);

				// String

				writeString(this.SIZE_RANGE, dos);

				// String

				writeString(this.SIZE, dos);

				// String

				writeString(this.US_SIZE, dos);

				// String

				writeString(this.CM_SIZE, dos);

				// String

				writeString(this.PRODUCT, dos);

				// String

				writeString(this.PRODUCT_STATUS, dos);

				// String

				writeString(this.PRODUCT_TIER, dos);

				// String

				writeString(this.ACCT_EXCLUS, dos);

				// String

				writeString(this.SIZE_RATIO_SPLIT, dos);

				// String

				writeString(this.REC_SIZE_SPLIT, dos);

				// String

				writeString(this.CARTON_QTY, dos);

				// String

				writeString(this.ATTRIBUTE, dos);

				// String

				writeString(this.UNITS, dos);

				// String

				writeString(this.EUR_RRP, dos);

				// String

				writeString(this.EUR_WSP, dos);

				// String

				writeString(this.GBP_RRP, dos);

				// String

				writeString(this.GBP_WSP, dos);

				// String

				writeString(this.CHF_RRP, dos);

				// String

				writeString(this.CHF_WSP, dos);

				// String

				writeString(this.NOK_RRP, dos);

				// String

				writeString(this.NOK_WSP, dos);

				// String

				writeString(this.DKK_RRP, dos);

				// String

				writeString(this.DKK_WSP, dos);

				// String

				writeString(this.SEK_RRP, dos);

				// String

				writeString(this.SEK_WSP, dos);

				// String

				writeString(this.EUR_FINN_RRP, dos);

				// String

				writeString(this.EUR_FINN_WSP, dos);

				// String

				writeString(this.FABRICATION, dos);

				// String

				writeString(this.COO, dos);

				// String

				writeString(this.CUSTOM_TARIFF_CODE, dos);

				// String

				writeString(this.UPC, dos);

				// String

				writeString(this.SMU_TYPE, dos);

				// String

				writeString(this.LABELD365, dos);

				// String

				writeString(this.LABELNAMED365, dos);

				// String

				writeString(this.FASHIOND365, dos);

				// String

				writeString(this.PRODUCTD365, dos);

				// String

				writeString(this.DELIVERYFLOW, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("BRAND=" + BRAND);
			sb.append(",SEASON=" + SEASON);
			sb.append(",CATEGORY=" + CATEGORY);
			sb.append(",REF=" + REF);
			sb.append(",DESCRIPTION=" + DESCRIPTION);
			sb.append(",STYLE=" + STYLE);
			sb.append(",COLOR=" + COLOR);
			sb.append(",FASHION=" + FASHION);
			sb.append(",STYLECOLORLABEL=" + STYLECOLORLABEL);
			sb.append(",COLORNAME=" + COLORNAME);
			sb.append(",LBL=" + LBL);
			sb.append(",STYLE_COLOR=" + STYLE_COLOR);
			sb.append(",GENDER=" + GENDER);
			sb.append(",AGE_RANGE=" + AGE_RANGE);
			sb.append(",SIZE_RANGE=" + SIZE_RANGE);
			sb.append(",SIZE=" + SIZE);
			sb.append(",US_SIZE=" + US_SIZE);
			sb.append(",CM_SIZE=" + CM_SIZE);
			sb.append(",PRODUCT=" + PRODUCT);
			sb.append(",PRODUCT_STATUS=" + PRODUCT_STATUS);
			sb.append(",PRODUCT_TIER=" + PRODUCT_TIER);
			sb.append(",ACCT_EXCLUS=" + ACCT_EXCLUS);
			sb.append(",SIZE_RATIO_SPLIT=" + SIZE_RATIO_SPLIT);
			sb.append(",REC_SIZE_SPLIT=" + REC_SIZE_SPLIT);
			sb.append(",CARTON_QTY=" + CARTON_QTY);
			sb.append(",ATTRIBUTE=" + ATTRIBUTE);
			sb.append(",UNITS=" + UNITS);
			sb.append(",EUR_RRP=" + EUR_RRP);
			sb.append(",EUR_WSP=" + EUR_WSP);
			sb.append(",GBP_RRP=" + GBP_RRP);
			sb.append(",GBP_WSP=" + GBP_WSP);
			sb.append(",CHF_RRP=" + CHF_RRP);
			sb.append(",CHF_WSP=" + CHF_WSP);
			sb.append(",NOK_RRP=" + NOK_RRP);
			sb.append(",NOK_WSP=" + NOK_WSP);
			sb.append(",DKK_RRP=" + DKK_RRP);
			sb.append(",DKK_WSP=" + DKK_WSP);
			sb.append(",SEK_RRP=" + SEK_RRP);
			sb.append(",SEK_WSP=" + SEK_WSP);
			sb.append(",EUR_FINN_RRP=" + EUR_FINN_RRP);
			sb.append(",EUR_FINN_WSP=" + EUR_FINN_WSP);
			sb.append(",FABRICATION=" + FABRICATION);
			sb.append(",COO=" + COO);
			sb.append(",CUSTOM_TARIFF_CODE=" + CUSTOM_TARIFF_CODE);
			sb.append(",UPC=" + UPC);
			sb.append(",SMU_TYPE=" + SMU_TYPE);
			sb.append(",LABELD365=" + LABELD365);
			sb.append(",LABELNAMED365=" + LABELNAMED365);
			sb.append(",FASHIOND365=" + FASHIOND365);
			sb.append(",PRODUCTD365=" + PRODUCTD365);
			sb.append(",DELIVERYFLOW=" + DELIVERYFLOW);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(sortie_full_catStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class sortie_ExcelStruct implements routines.system.IPersistableRow<sortie_ExcelStruct> {
		final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[0];
		static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[0];

		public String BRAND;

		public String getBRAND() {
			return this.BRAND;
		}

		public String SEASON;

		public String getSEASON() {
			return this.SEASON;
		}

		public String CATEGORY;

		public String getCATEGORY() {
			return this.CATEGORY;
		}

		public String REF;

		public String getREF() {
			return this.REF;
		}

		public String DESCRIPTION;

		public String getDESCRIPTION() {
			return this.DESCRIPTION;
		}

		public String STYLE;

		public String getSTYLE() {
			return this.STYLE;
		}

		public String COLOR;

		public String getCOLOR() {
			return this.COLOR;
		}

		public String FASHION;

		public String getFASHION() {
			return this.FASHION;
		}

		public String STYLECOLORLABEL;

		public String getSTYLECOLORLABEL() {
			return this.STYLECOLORLABEL;
		}

		public String COLORNAME;

		public String getCOLORNAME() {
			return this.COLORNAME;
		}

		public String LBL;

		public String getLBL() {
			return this.LBL;
		}

		public String STYLE_COLOR;

		public String getSTYLE_COLOR() {
			return this.STYLE_COLOR;
		}

		public String GENDER;

		public String getGENDER() {
			return this.GENDER;
		}

		public String AGE_RANGE;

		public String getAGE_RANGE() {
			return this.AGE_RANGE;
		}

		public String SIZE_RANGE;

		public String getSIZE_RANGE() {
			return this.SIZE_RANGE;
		}

		public String SIZE;

		public String getSIZE() {
			return this.SIZE;
		}

		public String US_SIZE;

		public String getUS_SIZE() {
			return this.US_SIZE;
		}

		public String CM_SIZE;

		public String getCM_SIZE() {
			return this.CM_SIZE;
		}

		public String PRODUCT;

		public String getPRODUCT() {
			return this.PRODUCT;
		}

		public String PRODUCT_STATUS;

		public String getPRODUCT_STATUS() {
			return this.PRODUCT_STATUS;
		}

		public String PRODUCT_TIER;

		public String getPRODUCT_TIER() {
			return this.PRODUCT_TIER;
		}

		public String ACCT_EXCLUS;

		public String getACCT_EXCLUS() {
			return this.ACCT_EXCLUS;
		}

		public String SIZE_RATIO_SPLIT;

		public String getSIZE_RATIO_SPLIT() {
			return this.SIZE_RATIO_SPLIT;
		}

		public String REC_SIZE_SPLIT;

		public String getREC_SIZE_SPLIT() {
			return this.REC_SIZE_SPLIT;
		}

		public String CARTON_QTY;

		public String getCARTON_QTY() {
			return this.CARTON_QTY;
		}

		public String ATTRIBUTE;

		public String getATTRIBUTE() {
			return this.ATTRIBUTE;
		}

		public String UNITS;

		public String getUNITS() {
			return this.UNITS;
		}

		public String EUR_RRP;

		public String getEUR_RRP() {
			return this.EUR_RRP;
		}

		public String EUR_WSP;

		public String getEUR_WSP() {
			return this.EUR_WSP;
		}

		public String GBP_RRP;

		public String getGBP_RRP() {
			return this.GBP_RRP;
		}

		public String GBP_WSP;

		public String getGBP_WSP() {
			return this.GBP_WSP;
		}

		public String CHF_RRP;

		public String getCHF_RRP() {
			return this.CHF_RRP;
		}

		public String CHF_WSP;

		public String getCHF_WSP() {
			return this.CHF_WSP;
		}

		public String NOK_RRP;

		public String getNOK_RRP() {
			return this.NOK_RRP;
		}

		public String NOK_WSP;

		public String getNOK_WSP() {
			return this.NOK_WSP;
		}

		public String DKK_RRP;

		public String getDKK_RRP() {
			return this.DKK_RRP;
		}

		public String DKK_WSP;

		public String getDKK_WSP() {
			return this.DKK_WSP;
		}

		public String SEK_RRP;

		public String getSEK_RRP() {
			return this.SEK_RRP;
		}

		public String SEK_WSP;

		public String getSEK_WSP() {
			return this.SEK_WSP;
		}

		public String EUR_FINN_RRP;

		public String getEUR_FINN_RRP() {
			return this.EUR_FINN_RRP;
		}

		public String EUR_FINN_WSP;

		public String getEUR_FINN_WSP() {
			return this.EUR_FINN_WSP;
		}

		public String FABRICATION;

		public String getFABRICATION() {
			return this.FABRICATION;
		}

		public String COO;

		public String getCOO() {
			return this.COO;
		}

		public String CUSTOM_TARIFF_CODE;

		public String getCUSTOM_TARIFF_CODE() {
			return this.CUSTOM_TARIFF_CODE;
		}

		public String UPC;

		public String getUPC() {
			return this.UPC;
		}

		public String SMU_TYPE;

		public String getSMU_TYPE() {
			return this.SMU_TYPE;
		}

		public String LABELD365;

		public String getLABELD365() {
			return this.LABELD365;
		}

		public String LABELNAMED365;

		public String getLABELNAMED365() {
			return this.LABELNAMED365;
		}

		public String FASHIOND365;

		public String getFASHIOND365() {
			return this.FASHIOND365;
		}

		public String PRODUCTD365;

		public String getPRODUCTD365() {
			return this.PRODUCTD365;
		}

		public String DELIVERYFLOW;

		public String getDELIVERYFLOW() {
			return this.DELIVERYFLOW;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2.length) {
					if (length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2.length == 0) {
						commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[1024];
					} else {
						commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2, 0, length);
				strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_2) {

				try {

					int length = 0;

					this.BRAND = readString(dis);

					this.SEASON = readString(dis);

					this.CATEGORY = readString(dis);

					this.REF = readString(dis);

					this.DESCRIPTION = readString(dis);

					this.STYLE = readString(dis);

					this.COLOR = readString(dis);

					this.FASHION = readString(dis);

					this.STYLECOLORLABEL = readString(dis);

					this.COLORNAME = readString(dis);

					this.LBL = readString(dis);

					this.STYLE_COLOR = readString(dis);

					this.GENDER = readString(dis);

					this.AGE_RANGE = readString(dis);

					this.SIZE_RANGE = readString(dis);

					this.SIZE = readString(dis);

					this.US_SIZE = readString(dis);

					this.CM_SIZE = readString(dis);

					this.PRODUCT = readString(dis);

					this.PRODUCT_STATUS = readString(dis);

					this.PRODUCT_TIER = readString(dis);

					this.ACCT_EXCLUS = readString(dis);

					this.SIZE_RATIO_SPLIT = readString(dis);

					this.REC_SIZE_SPLIT = readString(dis);

					this.CARTON_QTY = readString(dis);

					this.ATTRIBUTE = readString(dis);

					this.UNITS = readString(dis);

					this.EUR_RRP = readString(dis);

					this.EUR_WSP = readString(dis);

					this.GBP_RRP = readString(dis);

					this.GBP_WSP = readString(dis);

					this.CHF_RRP = readString(dis);

					this.CHF_WSP = readString(dis);

					this.NOK_RRP = readString(dis);

					this.NOK_WSP = readString(dis);

					this.DKK_RRP = readString(dis);

					this.DKK_WSP = readString(dis);

					this.SEK_RRP = readString(dis);

					this.SEK_WSP = readString(dis);

					this.EUR_FINN_RRP = readString(dis);

					this.EUR_FINN_WSP = readString(dis);

					this.FABRICATION = readString(dis);

					this.COO = readString(dis);

					this.CUSTOM_TARIFF_CODE = readString(dis);

					this.UPC = readString(dis);

					this.SMU_TYPE = readString(dis);

					this.LABELD365 = readString(dis);

					this.LABELNAMED365 = readString(dis);

					this.FASHIOND365 = readString(dis);

					this.PRODUCTD365 = readString(dis);

					this.DELIVERYFLOW = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.BRAND, dos);

				// String

				writeString(this.SEASON, dos);

				// String

				writeString(this.CATEGORY, dos);

				// String

				writeString(this.REF, dos);

				// String

				writeString(this.DESCRIPTION, dos);

				// String

				writeString(this.STYLE, dos);

				// String

				writeString(this.COLOR, dos);

				// String

				writeString(this.FASHION, dos);

				// String

				writeString(this.STYLECOLORLABEL, dos);

				// String

				writeString(this.COLORNAME, dos);

				// String

				writeString(this.LBL, dos);

				// String

				writeString(this.STYLE_COLOR, dos);

				// String

				writeString(this.GENDER, dos);

				// String

				writeString(this.AGE_RANGE, dos);

				// String

				writeString(this.SIZE_RANGE, dos);

				// String

				writeString(this.SIZE, dos);

				// String

				writeString(this.US_SIZE, dos);

				// String

				writeString(this.CM_SIZE, dos);

				// String

				writeString(this.PRODUCT, dos);

				// String

				writeString(this.PRODUCT_STATUS, dos);

				// String

				writeString(this.PRODUCT_TIER, dos);

				// String

				writeString(this.ACCT_EXCLUS, dos);

				// String

				writeString(this.SIZE_RATIO_SPLIT, dos);

				// String

				writeString(this.REC_SIZE_SPLIT, dos);

				// String

				writeString(this.CARTON_QTY, dos);

				// String

				writeString(this.ATTRIBUTE, dos);

				// String

				writeString(this.UNITS, dos);

				// String

				writeString(this.EUR_RRP, dos);

				// String

				writeString(this.EUR_WSP, dos);

				// String

				writeString(this.GBP_RRP, dos);

				// String

				writeString(this.GBP_WSP, dos);

				// String

				writeString(this.CHF_RRP, dos);

				// String

				writeString(this.CHF_WSP, dos);

				// String

				writeString(this.NOK_RRP, dos);

				// String

				writeString(this.NOK_WSP, dos);

				// String

				writeString(this.DKK_RRP, dos);

				// String

				writeString(this.DKK_WSP, dos);

				// String

				writeString(this.SEK_RRP, dos);

				// String

				writeString(this.SEK_WSP, dos);

				// String

				writeString(this.EUR_FINN_RRP, dos);

				// String

				writeString(this.EUR_FINN_WSP, dos);

				// String

				writeString(this.FABRICATION, dos);

				// String

				writeString(this.COO, dos);

				// String

				writeString(this.CUSTOM_TARIFF_CODE, dos);

				// String

				writeString(this.UPC, dos);

				// String

				writeString(this.SMU_TYPE, dos);

				// String

				writeString(this.LABELD365, dos);

				// String

				writeString(this.LABELNAMED365, dos);

				// String

				writeString(this.FASHIOND365, dos);

				// String

				writeString(this.PRODUCTD365, dos);

				// String

				writeString(this.DELIVERYFLOW, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("BRAND=" + BRAND);
			sb.append(",SEASON=" + SEASON);
			sb.append(",CATEGORY=" + CATEGORY);
			sb.append(",REF=" + REF);
			sb.append(",DESCRIPTION=" + DESCRIPTION);
			sb.append(",STYLE=" + STYLE);
			sb.append(",COLOR=" + COLOR);
			sb.append(",FASHION=" + FASHION);
			sb.append(",STYLECOLORLABEL=" + STYLECOLORLABEL);
			sb.append(",COLORNAME=" + COLORNAME);
			sb.append(",LBL=" + LBL);
			sb.append(",STYLE_COLOR=" + STYLE_COLOR);
			sb.append(",GENDER=" + GENDER);
			sb.append(",AGE_RANGE=" + AGE_RANGE);
			sb.append(",SIZE_RANGE=" + SIZE_RANGE);
			sb.append(",SIZE=" + SIZE);
			sb.append(",US_SIZE=" + US_SIZE);
			sb.append(",CM_SIZE=" + CM_SIZE);
			sb.append(",PRODUCT=" + PRODUCT);
			sb.append(",PRODUCT_STATUS=" + PRODUCT_STATUS);
			sb.append(",PRODUCT_TIER=" + PRODUCT_TIER);
			sb.append(",ACCT_EXCLUS=" + ACCT_EXCLUS);
			sb.append(",SIZE_RATIO_SPLIT=" + SIZE_RATIO_SPLIT);
			sb.append(",REC_SIZE_SPLIT=" + REC_SIZE_SPLIT);
			sb.append(",CARTON_QTY=" + CARTON_QTY);
			sb.append(",ATTRIBUTE=" + ATTRIBUTE);
			sb.append(",UNITS=" + UNITS);
			sb.append(",EUR_RRP=" + EUR_RRP);
			sb.append(",EUR_WSP=" + EUR_WSP);
			sb.append(",GBP_RRP=" + GBP_RRP);
			sb.append(",GBP_WSP=" + GBP_WSP);
			sb.append(",CHF_RRP=" + CHF_RRP);
			sb.append(",CHF_WSP=" + CHF_WSP);
			sb.append(",NOK_RRP=" + NOK_RRP);
			sb.append(",NOK_WSP=" + NOK_WSP);
			sb.append(",DKK_RRP=" + DKK_RRP);
			sb.append(",DKK_WSP=" + DKK_WSP);
			sb.append(",SEK_RRP=" + SEK_RRP);
			sb.append(",SEK_WSP=" + SEK_WSP);
			sb.append(",EUR_FINN_RRP=" + EUR_FINN_RRP);
			sb.append(",EUR_FINN_WSP=" + EUR_FINN_WSP);
			sb.append(",FABRICATION=" + FABRICATION);
			sb.append(",COO=" + COO);
			sb.append(",CUSTOM_TARIFF_CODE=" + CUSTOM_TARIFF_CODE);
			sb.append(",UPC=" + UPC);
			sb.append(",SMU_TYPE=" + SMU_TYPE);
			sb.append(",LABELD365=" + LABELD365);
			sb.append(",LABELNAMED365=" + LABELNAMED365);
			sb.append(",FASHIOND365=" + FASHIOND365);
			sb.append(",PRODUCTD365=" + PRODUCTD365);
			sb.append(",DELIVERYFLOW=" + DELIVERYFLOW);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(sortie_ExcelStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class sortieStruct implements routines.system.IPersistableRow<sortieStruct> {
		final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[0];
		static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[0];

		public String BRAND;

		public String getBRAND() {
			return this.BRAND;
		}

		public String SEASON;

		public String getSEASON() {
			return this.SEASON;
		}

		public String CATEGORY;

		public String getCATEGORY() {
			return this.CATEGORY;
		}

		public String REF;

		public String getREF() {
			return this.REF;
		}

		public String DESCRIPTION;

		public String getDESCRIPTION() {
			return this.DESCRIPTION;
		}

		public String STYLE;

		public String getSTYLE() {
			return this.STYLE;
		}

		public String COLOR;

		public String getCOLOR() {
			return this.COLOR;
		}

		public String FASHION;

		public String getFASHION() {
			return this.FASHION;
		}

		public String STYLECOLORLABEL;

		public String getSTYLECOLORLABEL() {
			return this.STYLECOLORLABEL;
		}

		public String COLORNAME;

		public String getCOLORNAME() {
			return this.COLORNAME;
		}

		public String LBL;

		public String getLBL() {
			return this.LBL;
		}

		public String STYLE_COLOR;

		public String getSTYLE_COLOR() {
			return this.STYLE_COLOR;
		}

		public String GENDER;

		public String getGENDER() {
			return this.GENDER;
		}

		public String AGE_RANGE;

		public String getAGE_RANGE() {
			return this.AGE_RANGE;
		}

		public String SIZE_RANGE;

		public String getSIZE_RANGE() {
			return this.SIZE_RANGE;
		}

		public String SIZE;

		public String getSIZE() {
			return this.SIZE;
		}

		public String US_SIZE;

		public String getUS_SIZE() {
			return this.US_SIZE;
		}

		public String CM_SIZE;

		public String getCM_SIZE() {
			return this.CM_SIZE;
		}

		public String PRODUCT;

		public String getPRODUCT() {
			return this.PRODUCT;
		}

		public String PRODUCT_STATUS;

		public String getPRODUCT_STATUS() {
			return this.PRODUCT_STATUS;
		}

		public String PRODUCT_TIER;

		public String getPRODUCT_TIER() {
			return this.PRODUCT_TIER;
		}

		public String ACCT_EXCLUS;

		public String getACCT_EXCLUS() {
			return this.ACCT_EXCLUS;
		}

		public String SIZE_RATIO_SPLIT;

		public String getSIZE_RATIO_SPLIT() {
			return this.SIZE_RATIO_SPLIT;
		}

		public String REC_SIZE_SPLIT;

		public String getREC_SIZE_SPLIT() {
			return this.REC_SIZE_SPLIT;
		}

		public String CARTON_QTY;

		public String getCARTON_QTY() {
			return this.CARTON_QTY;
		}

		public String ATTRIBUTE;

		public String getATTRIBUTE() {
			return this.ATTRIBUTE;
		}

		public String UNITS;

		public String getUNITS() {
			return this.UNITS;
		}

		public String EUR_RRP;

		public String getEUR_RRP() {
			return this.EUR_RRP;
		}

		public String EUR_WSP;

		public String getEUR_WSP() {
			return this.EUR_WSP;
		}

		public String GBP_RRP;

		public String getGBP_RRP() {
			return this.GBP_RRP;
		}

		public String GBP_WSP;

		public String getGBP_WSP() {
			return this.GBP_WSP;
		}

		public String CHF_RRP;

		public String getCHF_RRP() {
			return this.CHF_RRP;
		}

		public String CHF_WSP;

		public String getCHF_WSP() {
			return this.CHF_WSP;
		}

		public String NOK_RRP;

		public String getNOK_RRP() {
			return this.NOK_RRP;
		}

		public String NOK_WSP;

		public String getNOK_WSP() {
			return this.NOK_WSP;
		}

		public String DKK_RRP;

		public String getDKK_RRP() {
			return this.DKK_RRP;
		}

		public String DKK_WSP;

		public String getDKK_WSP() {
			return this.DKK_WSP;
		}

		public String SEK_RRP;

		public String getSEK_RRP() {
			return this.SEK_RRP;
		}

		public String SEK_WSP;

		public String getSEK_WSP() {
			return this.SEK_WSP;
		}

		public String EUR_FINN_RRP;

		public String getEUR_FINN_RRP() {
			return this.EUR_FINN_RRP;
		}

		public String EUR_FINN_WSP;

		public String getEUR_FINN_WSP() {
			return this.EUR_FINN_WSP;
		}

		public String FABRICATION;

		public String getFABRICATION() {
			return this.FABRICATION;
		}

		public String COO;

		public String getCOO() {
			return this.COO;
		}

		public String CUSTOM_TARIFF_CODE;

		public String getCUSTOM_TARIFF_CODE() {
			return this.CUSTOM_TARIFF_CODE;
		}

		public String UPC;

		public String getUPC() {
			return this.UPC;
		}

		public String SMU_TYPE;

		public String getSMU_TYPE() {
			return this.SMU_TYPE;
		}

		public String DELIVERYFLOW;

		public String getDELIVERYFLOW() {
			return this.DELIVERYFLOW;
		}

		public String FASHIONCODED365;

		public String getFASHIONCODED365() {
			return this.FASHIONCODED365;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2.length) {
					if (length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2.length == 0) {
						commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[1024];
					} else {
						commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2, 0, length);
				strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_2) {

				try {

					int length = 0;

					this.BRAND = readString(dis);

					this.SEASON = readString(dis);

					this.CATEGORY = readString(dis);

					this.REF = readString(dis);

					this.DESCRIPTION = readString(dis);

					this.STYLE = readString(dis);

					this.COLOR = readString(dis);

					this.FASHION = readString(dis);

					this.STYLECOLORLABEL = readString(dis);

					this.COLORNAME = readString(dis);

					this.LBL = readString(dis);

					this.STYLE_COLOR = readString(dis);

					this.GENDER = readString(dis);

					this.AGE_RANGE = readString(dis);

					this.SIZE_RANGE = readString(dis);

					this.SIZE = readString(dis);

					this.US_SIZE = readString(dis);

					this.CM_SIZE = readString(dis);

					this.PRODUCT = readString(dis);

					this.PRODUCT_STATUS = readString(dis);

					this.PRODUCT_TIER = readString(dis);

					this.ACCT_EXCLUS = readString(dis);

					this.SIZE_RATIO_SPLIT = readString(dis);

					this.REC_SIZE_SPLIT = readString(dis);

					this.CARTON_QTY = readString(dis);

					this.ATTRIBUTE = readString(dis);

					this.UNITS = readString(dis);

					this.EUR_RRP = readString(dis);

					this.EUR_WSP = readString(dis);

					this.GBP_RRP = readString(dis);

					this.GBP_WSP = readString(dis);

					this.CHF_RRP = readString(dis);

					this.CHF_WSP = readString(dis);

					this.NOK_RRP = readString(dis);

					this.NOK_WSP = readString(dis);

					this.DKK_RRP = readString(dis);

					this.DKK_WSP = readString(dis);

					this.SEK_RRP = readString(dis);

					this.SEK_WSP = readString(dis);

					this.EUR_FINN_RRP = readString(dis);

					this.EUR_FINN_WSP = readString(dis);

					this.FABRICATION = readString(dis);

					this.COO = readString(dis);

					this.CUSTOM_TARIFF_CODE = readString(dis);

					this.UPC = readString(dis);

					this.SMU_TYPE = readString(dis);

					this.DELIVERYFLOW = readString(dis);

					this.FASHIONCODED365 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.BRAND, dos);

				// String

				writeString(this.SEASON, dos);

				// String

				writeString(this.CATEGORY, dos);

				// String

				writeString(this.REF, dos);

				// String

				writeString(this.DESCRIPTION, dos);

				// String

				writeString(this.STYLE, dos);

				// String

				writeString(this.COLOR, dos);

				// String

				writeString(this.FASHION, dos);

				// String

				writeString(this.STYLECOLORLABEL, dos);

				// String

				writeString(this.COLORNAME, dos);

				// String

				writeString(this.LBL, dos);

				// String

				writeString(this.STYLE_COLOR, dos);

				// String

				writeString(this.GENDER, dos);

				// String

				writeString(this.AGE_RANGE, dos);

				// String

				writeString(this.SIZE_RANGE, dos);

				// String

				writeString(this.SIZE, dos);

				// String

				writeString(this.US_SIZE, dos);

				// String

				writeString(this.CM_SIZE, dos);

				// String

				writeString(this.PRODUCT, dos);

				// String

				writeString(this.PRODUCT_STATUS, dos);

				// String

				writeString(this.PRODUCT_TIER, dos);

				// String

				writeString(this.ACCT_EXCLUS, dos);

				// String

				writeString(this.SIZE_RATIO_SPLIT, dos);

				// String

				writeString(this.REC_SIZE_SPLIT, dos);

				// String

				writeString(this.CARTON_QTY, dos);

				// String

				writeString(this.ATTRIBUTE, dos);

				// String

				writeString(this.UNITS, dos);

				// String

				writeString(this.EUR_RRP, dos);

				// String

				writeString(this.EUR_WSP, dos);

				// String

				writeString(this.GBP_RRP, dos);

				// String

				writeString(this.GBP_WSP, dos);

				// String

				writeString(this.CHF_RRP, dos);

				// String

				writeString(this.CHF_WSP, dos);

				// String

				writeString(this.NOK_RRP, dos);

				// String

				writeString(this.NOK_WSP, dos);

				// String

				writeString(this.DKK_RRP, dos);

				// String

				writeString(this.DKK_WSP, dos);

				// String

				writeString(this.SEK_RRP, dos);

				// String

				writeString(this.SEK_WSP, dos);

				// String

				writeString(this.EUR_FINN_RRP, dos);

				// String

				writeString(this.EUR_FINN_WSP, dos);

				// String

				writeString(this.FABRICATION, dos);

				// String

				writeString(this.COO, dos);

				// String

				writeString(this.CUSTOM_TARIFF_CODE, dos);

				// String

				writeString(this.UPC, dos);

				// String

				writeString(this.SMU_TYPE, dos);

				// String

				writeString(this.DELIVERYFLOW, dos);

				// String

				writeString(this.FASHIONCODED365, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("BRAND=" + BRAND);
			sb.append(",SEASON=" + SEASON);
			sb.append(",CATEGORY=" + CATEGORY);
			sb.append(",REF=" + REF);
			sb.append(",DESCRIPTION=" + DESCRIPTION);
			sb.append(",STYLE=" + STYLE);
			sb.append(",COLOR=" + COLOR);
			sb.append(",FASHION=" + FASHION);
			sb.append(",STYLECOLORLABEL=" + STYLECOLORLABEL);
			sb.append(",COLORNAME=" + COLORNAME);
			sb.append(",LBL=" + LBL);
			sb.append(",STYLE_COLOR=" + STYLE_COLOR);
			sb.append(",GENDER=" + GENDER);
			sb.append(",AGE_RANGE=" + AGE_RANGE);
			sb.append(",SIZE_RANGE=" + SIZE_RANGE);
			sb.append(",SIZE=" + SIZE);
			sb.append(",US_SIZE=" + US_SIZE);
			sb.append(",CM_SIZE=" + CM_SIZE);
			sb.append(",PRODUCT=" + PRODUCT);
			sb.append(",PRODUCT_STATUS=" + PRODUCT_STATUS);
			sb.append(",PRODUCT_TIER=" + PRODUCT_TIER);
			sb.append(",ACCT_EXCLUS=" + ACCT_EXCLUS);
			sb.append(",SIZE_RATIO_SPLIT=" + SIZE_RATIO_SPLIT);
			sb.append(",REC_SIZE_SPLIT=" + REC_SIZE_SPLIT);
			sb.append(",CARTON_QTY=" + CARTON_QTY);
			sb.append(",ATTRIBUTE=" + ATTRIBUTE);
			sb.append(",UNITS=" + UNITS);
			sb.append(",EUR_RRP=" + EUR_RRP);
			sb.append(",EUR_WSP=" + EUR_WSP);
			sb.append(",GBP_RRP=" + GBP_RRP);
			sb.append(",GBP_WSP=" + GBP_WSP);
			sb.append(",CHF_RRP=" + CHF_RRP);
			sb.append(",CHF_WSP=" + CHF_WSP);
			sb.append(",NOK_RRP=" + NOK_RRP);
			sb.append(",NOK_WSP=" + NOK_WSP);
			sb.append(",DKK_RRP=" + DKK_RRP);
			sb.append(",DKK_WSP=" + DKK_WSP);
			sb.append(",SEK_RRP=" + SEK_RRP);
			sb.append(",SEK_WSP=" + SEK_WSP);
			sb.append(",EUR_FINN_RRP=" + EUR_FINN_RRP);
			sb.append(",EUR_FINN_WSP=" + EUR_FINN_WSP);
			sb.append(",FABRICATION=" + FABRICATION);
			sb.append(",COO=" + COO);
			sb.append(",CUSTOM_TARIFF_CODE=" + CUSTOM_TARIFF_CODE);
			sb.append(",UPC=" + UPC);
			sb.append(",SMU_TYPE=" + SMU_TYPE);
			sb.append(",DELIVERYFLOW=" + DELIVERYFLOW);
			sb.append(",FASHIONCODED365=" + FASHIONCODED365);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(sortieStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[0];
		static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[0];

		public String BRAND;

		public String getBRAND() {
			return this.BRAND;
		}

		public String SEASON;

		public String getSEASON() {
			return this.SEASON;
		}

		public String CATEGORY;

		public String getCATEGORY() {
			return this.CATEGORY;
		}

		public String REF;

		public String getREF() {
			return this.REF;
		}

		public String DESCRIPTION;

		public String getDESCRIPTION() {
			return this.DESCRIPTION;
		}

		public String STYLE;

		public String getSTYLE() {
			return this.STYLE;
		}

		public String COLOR;

		public String getCOLOR() {
			return this.COLOR;
		}

		public String FASHION;

		public String getFASHION() {
			return this.FASHION;
		}

		public String STYLECOLORLABEL;

		public String getSTYLECOLORLABEL() {
			return this.STYLECOLORLABEL;
		}

		public String COLORNAME;

		public String getCOLORNAME() {
			return this.COLORNAME;
		}

		public String LBL;

		public String getLBL() {
			return this.LBL;
		}

		public String STYLE_COLOR;

		public String getSTYLE_COLOR() {
			return this.STYLE_COLOR;
		}

		public String GENDER;

		public String getGENDER() {
			return this.GENDER;
		}

		public String AGE_RANGE;

		public String getAGE_RANGE() {
			return this.AGE_RANGE;
		}

		public String SIZE_RANGE;

		public String getSIZE_RANGE() {
			return this.SIZE_RANGE;
		}

		public String SIZE;

		public String getSIZE() {
			return this.SIZE;
		}

		public String US_SIZE;

		public String getUS_SIZE() {
			return this.US_SIZE;
		}

		public String CM_SIZE;

		public String getCM_SIZE() {
			return this.CM_SIZE;
		}

		public String PRODUCT;

		public String getPRODUCT() {
			return this.PRODUCT;
		}

		public String PRODUCT_STATUS;

		public String getPRODUCT_STATUS() {
			return this.PRODUCT_STATUS;
		}

		public String PRODUCT_TIER;

		public String getPRODUCT_TIER() {
			return this.PRODUCT_TIER;
		}

		public String ACCT_EXCLUS;

		public String getACCT_EXCLUS() {
			return this.ACCT_EXCLUS;
		}

		public String SIZE_RATIO_SPLIT;

		public String getSIZE_RATIO_SPLIT() {
			return this.SIZE_RATIO_SPLIT;
		}

		public String REC_SIZE_SPLIT;

		public String getREC_SIZE_SPLIT() {
			return this.REC_SIZE_SPLIT;
		}

		public String CARTON_QTY;

		public String getCARTON_QTY() {
			return this.CARTON_QTY;
		}

		public String ATTRIBUTE;

		public String getATTRIBUTE() {
			return this.ATTRIBUTE;
		}

		public String UNITS;

		public String getUNITS() {
			return this.UNITS;
		}

		public String EUR_RRP;

		public String getEUR_RRP() {
			return this.EUR_RRP;
		}

		public String EUR_WSP;

		public String getEUR_WSP() {
			return this.EUR_WSP;
		}

		public String GBP_RRP;

		public String getGBP_RRP() {
			return this.GBP_RRP;
		}

		public String GBP_WSP;

		public String getGBP_WSP() {
			return this.GBP_WSP;
		}

		public String CHF_RRP;

		public String getCHF_RRP() {
			return this.CHF_RRP;
		}

		public String CHF_WSP;

		public String getCHF_WSP() {
			return this.CHF_WSP;
		}

		public String NOK_RRP;

		public String getNOK_RRP() {
			return this.NOK_RRP;
		}

		public String NOK_WSP;

		public String getNOK_WSP() {
			return this.NOK_WSP;
		}

		public String DKK_RRP;

		public String getDKK_RRP() {
			return this.DKK_RRP;
		}

		public String DKK_WSP;

		public String getDKK_WSP() {
			return this.DKK_WSP;
		}

		public String SEK_RRP;

		public String getSEK_RRP() {
			return this.SEK_RRP;
		}

		public String SEK_WSP;

		public String getSEK_WSP() {
			return this.SEK_WSP;
		}

		public String EUR_FINN_RRP;

		public String getEUR_FINN_RRP() {
			return this.EUR_FINN_RRP;
		}

		public String EUR_FINN_WSP;

		public String getEUR_FINN_WSP() {
			return this.EUR_FINN_WSP;
		}

		public String FABRICATION;

		public String getFABRICATION() {
			return this.FABRICATION;
		}

		public String COO;

		public String getCOO() {
			return this.COO;
		}

		public String CUSTOM_TARIFF_CODE;

		public String getCUSTOM_TARIFF_CODE() {
			return this.CUSTOM_TARIFF_CODE;
		}

		public String UPC;

		public String getUPC() {
			return this.UPC;
		}

		public String SMU_TYPE;

		public String getSMU_TYPE() {
			return this.SMU_TYPE;
		}

		public String EAN;

		public String getEAN() {
			return this.EAN;
		}

		public String PRODUCT_CHANNEL;

		public String getPRODUCT_CHANNEL() {
			return this.PRODUCT_CHANNEL;
		}

		public String SUSTAINABILITY;

		public String getSUSTAINABILITY() {
			return this.SUSTAINABILITY;
		}

		public String DELIVERYFLOW;

		public String getDELIVERYFLOW() {
			return this.DELIVERYFLOW;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2.length) {
					if (length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2.length == 0) {
						commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[1024];
					} else {
						commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2, 0, length);
				strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_2) {

				try {

					int length = 0;

					this.BRAND = readString(dis);

					this.SEASON = readString(dis);

					this.CATEGORY = readString(dis);

					this.REF = readString(dis);

					this.DESCRIPTION = readString(dis);

					this.STYLE = readString(dis);

					this.COLOR = readString(dis);

					this.FASHION = readString(dis);

					this.STYLECOLORLABEL = readString(dis);

					this.COLORNAME = readString(dis);

					this.LBL = readString(dis);

					this.STYLE_COLOR = readString(dis);

					this.GENDER = readString(dis);

					this.AGE_RANGE = readString(dis);

					this.SIZE_RANGE = readString(dis);

					this.SIZE = readString(dis);

					this.US_SIZE = readString(dis);

					this.CM_SIZE = readString(dis);

					this.PRODUCT = readString(dis);

					this.PRODUCT_STATUS = readString(dis);

					this.PRODUCT_TIER = readString(dis);

					this.ACCT_EXCLUS = readString(dis);

					this.SIZE_RATIO_SPLIT = readString(dis);

					this.REC_SIZE_SPLIT = readString(dis);

					this.CARTON_QTY = readString(dis);

					this.ATTRIBUTE = readString(dis);

					this.UNITS = readString(dis);

					this.EUR_RRP = readString(dis);

					this.EUR_WSP = readString(dis);

					this.GBP_RRP = readString(dis);

					this.GBP_WSP = readString(dis);

					this.CHF_RRP = readString(dis);

					this.CHF_WSP = readString(dis);

					this.NOK_RRP = readString(dis);

					this.NOK_WSP = readString(dis);

					this.DKK_RRP = readString(dis);

					this.DKK_WSP = readString(dis);

					this.SEK_RRP = readString(dis);

					this.SEK_WSP = readString(dis);

					this.EUR_FINN_RRP = readString(dis);

					this.EUR_FINN_WSP = readString(dis);

					this.FABRICATION = readString(dis);

					this.COO = readString(dis);

					this.CUSTOM_TARIFF_CODE = readString(dis);

					this.UPC = readString(dis);

					this.SMU_TYPE = readString(dis);

					this.EAN = readString(dis);

					this.PRODUCT_CHANNEL = readString(dis);

					this.SUSTAINABILITY = readString(dis);

					this.DELIVERYFLOW = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.BRAND, dos);

				// String

				writeString(this.SEASON, dos);

				// String

				writeString(this.CATEGORY, dos);

				// String

				writeString(this.REF, dos);

				// String

				writeString(this.DESCRIPTION, dos);

				// String

				writeString(this.STYLE, dos);

				// String

				writeString(this.COLOR, dos);

				// String

				writeString(this.FASHION, dos);

				// String

				writeString(this.STYLECOLORLABEL, dos);

				// String

				writeString(this.COLORNAME, dos);

				// String

				writeString(this.LBL, dos);

				// String

				writeString(this.STYLE_COLOR, dos);

				// String

				writeString(this.GENDER, dos);

				// String

				writeString(this.AGE_RANGE, dos);

				// String

				writeString(this.SIZE_RANGE, dos);

				// String

				writeString(this.SIZE, dos);

				// String

				writeString(this.US_SIZE, dos);

				// String

				writeString(this.CM_SIZE, dos);

				// String

				writeString(this.PRODUCT, dos);

				// String

				writeString(this.PRODUCT_STATUS, dos);

				// String

				writeString(this.PRODUCT_TIER, dos);

				// String

				writeString(this.ACCT_EXCLUS, dos);

				// String

				writeString(this.SIZE_RATIO_SPLIT, dos);

				// String

				writeString(this.REC_SIZE_SPLIT, dos);

				// String

				writeString(this.CARTON_QTY, dos);

				// String

				writeString(this.ATTRIBUTE, dos);

				// String

				writeString(this.UNITS, dos);

				// String

				writeString(this.EUR_RRP, dos);

				// String

				writeString(this.EUR_WSP, dos);

				// String

				writeString(this.GBP_RRP, dos);

				// String

				writeString(this.GBP_WSP, dos);

				// String

				writeString(this.CHF_RRP, dos);

				// String

				writeString(this.CHF_WSP, dos);

				// String

				writeString(this.NOK_RRP, dos);

				// String

				writeString(this.NOK_WSP, dos);

				// String

				writeString(this.DKK_RRP, dos);

				// String

				writeString(this.DKK_WSP, dos);

				// String

				writeString(this.SEK_RRP, dos);

				// String

				writeString(this.SEK_WSP, dos);

				// String

				writeString(this.EUR_FINN_RRP, dos);

				// String

				writeString(this.EUR_FINN_WSP, dos);

				// String

				writeString(this.FABRICATION, dos);

				// String

				writeString(this.COO, dos);

				// String

				writeString(this.CUSTOM_TARIFF_CODE, dos);

				// String

				writeString(this.UPC, dos);

				// String

				writeString(this.SMU_TYPE, dos);

				// String

				writeString(this.EAN, dos);

				// String

				writeString(this.PRODUCT_CHANNEL, dos);

				// String

				writeString(this.SUSTAINABILITY, dos);

				// String

				writeString(this.DELIVERYFLOW, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("BRAND=" + BRAND);
			sb.append(",SEASON=" + SEASON);
			sb.append(",CATEGORY=" + CATEGORY);
			sb.append(",REF=" + REF);
			sb.append(",DESCRIPTION=" + DESCRIPTION);
			sb.append(",STYLE=" + STYLE);
			sb.append(",COLOR=" + COLOR);
			sb.append(",FASHION=" + FASHION);
			sb.append(",STYLECOLORLABEL=" + STYLECOLORLABEL);
			sb.append(",COLORNAME=" + COLORNAME);
			sb.append(",LBL=" + LBL);
			sb.append(",STYLE_COLOR=" + STYLE_COLOR);
			sb.append(",GENDER=" + GENDER);
			sb.append(",AGE_RANGE=" + AGE_RANGE);
			sb.append(",SIZE_RANGE=" + SIZE_RANGE);
			sb.append(",SIZE=" + SIZE);
			sb.append(",US_SIZE=" + US_SIZE);
			sb.append(",CM_SIZE=" + CM_SIZE);
			sb.append(",PRODUCT=" + PRODUCT);
			sb.append(",PRODUCT_STATUS=" + PRODUCT_STATUS);
			sb.append(",PRODUCT_TIER=" + PRODUCT_TIER);
			sb.append(",ACCT_EXCLUS=" + ACCT_EXCLUS);
			sb.append(",SIZE_RATIO_SPLIT=" + SIZE_RATIO_SPLIT);
			sb.append(",REC_SIZE_SPLIT=" + REC_SIZE_SPLIT);
			sb.append(",CARTON_QTY=" + CARTON_QTY);
			sb.append(",ATTRIBUTE=" + ATTRIBUTE);
			sb.append(",UNITS=" + UNITS);
			sb.append(",EUR_RRP=" + EUR_RRP);
			sb.append(",EUR_WSP=" + EUR_WSP);
			sb.append(",GBP_RRP=" + GBP_RRP);
			sb.append(",GBP_WSP=" + GBP_WSP);
			sb.append(",CHF_RRP=" + CHF_RRP);
			sb.append(",CHF_WSP=" + CHF_WSP);
			sb.append(",NOK_RRP=" + NOK_RRP);
			sb.append(",NOK_WSP=" + NOK_WSP);
			sb.append(",DKK_RRP=" + DKK_RRP);
			sb.append(",DKK_WSP=" + DKK_WSP);
			sb.append(",SEK_RRP=" + SEK_RRP);
			sb.append(",SEK_WSP=" + SEK_WSP);
			sb.append(",EUR_FINN_RRP=" + EUR_FINN_RRP);
			sb.append(",EUR_FINN_WSP=" + EUR_FINN_WSP);
			sb.append(",FABRICATION=" + FABRICATION);
			sb.append(",COO=" + COO);
			sb.append(",CUSTOM_TARIFF_CODE=" + CUSTOM_TARIFF_CODE);
			sb.append(",UPC=" + UPC);
			sb.append(",SMU_TYPE=" + SMU_TYPE);
			sb.append(",EAN=" + EAN);
			sb.append(",PRODUCT_CHANNEL=" + PRODUCT_CHANNEL);
			sb.append(",SUSTAINABILITY=" + SUSTAINABILITY);
			sb.append(",DELIVERYFLOW=" + DELIVERYFLOW);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class sortie_Excel1Struct implements routines.system.IPersistableRow<sortie_Excel1Struct> {
		final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[0];
		static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[0];

		public String BRAND;

		public String getBRAND() {
			return this.BRAND;
		}

		public String SEASON;

		public String getSEASON() {
			return this.SEASON;
		}

		public String CATEGORY;

		public String getCATEGORY() {
			return this.CATEGORY;
		}

		public String REF;

		public String getREF() {
			return this.REF;
		}

		public String DESCRIPTION;

		public String getDESCRIPTION() {
			return this.DESCRIPTION;
		}

		public String STYLE;

		public String getSTYLE() {
			return this.STYLE;
		}

		public String COLOR;

		public String getCOLOR() {
			return this.COLOR;
		}

		public String FASHION;

		public String getFASHION() {
			return this.FASHION;
		}

		public String STYLECOLORLABEL;

		public String getSTYLECOLORLABEL() {
			return this.STYLECOLORLABEL;
		}

		public String COLORNAME;

		public String getCOLORNAME() {
			return this.COLORNAME;
		}

		public String LBL;

		public String getLBL() {
			return this.LBL;
		}

		public String STYLE_COLOR;

		public String getSTYLE_COLOR() {
			return this.STYLE_COLOR;
		}

		public String GENDER;

		public String getGENDER() {
			return this.GENDER;
		}

		public String AGE_RANGE;

		public String getAGE_RANGE() {
			return this.AGE_RANGE;
		}

		public String SIZE_RANGE;

		public String getSIZE_RANGE() {
			return this.SIZE_RANGE;
		}

		public String SIZE;

		public String getSIZE() {
			return this.SIZE;
		}

		public String US_SIZE;

		public String getUS_SIZE() {
			return this.US_SIZE;
		}

		public String CM_SIZE;

		public String getCM_SIZE() {
			return this.CM_SIZE;
		}

		public String PRODUCT;

		public String getPRODUCT() {
			return this.PRODUCT;
		}

		public String PRODUCT_STATUS;

		public String getPRODUCT_STATUS() {
			return this.PRODUCT_STATUS;
		}

		public String PRODUCT_TIER;

		public String getPRODUCT_TIER() {
			return this.PRODUCT_TIER;
		}

		public String ACCT_EXCLUS;

		public String getACCT_EXCLUS() {
			return this.ACCT_EXCLUS;
		}

		public String SIZE_RATIO_SPLIT;

		public String getSIZE_RATIO_SPLIT() {
			return this.SIZE_RATIO_SPLIT;
		}

		public String REC_SIZE_SPLIT;

		public String getREC_SIZE_SPLIT() {
			return this.REC_SIZE_SPLIT;
		}

		public String CARTON_QTY;

		public String getCARTON_QTY() {
			return this.CARTON_QTY;
		}

		public String ATTRIBUTE;

		public String getATTRIBUTE() {
			return this.ATTRIBUTE;
		}

		public String UNITS;

		public String getUNITS() {
			return this.UNITS;
		}

		public String EUR_RRP;

		public String getEUR_RRP() {
			return this.EUR_RRP;
		}

		public String EUR_WSP;

		public String getEUR_WSP() {
			return this.EUR_WSP;
		}

		public String GBP_RRP;

		public String getGBP_RRP() {
			return this.GBP_RRP;
		}

		public String GBP_WSP;

		public String getGBP_WSP() {
			return this.GBP_WSP;
		}

		public String CHF_RRP;

		public String getCHF_RRP() {
			return this.CHF_RRP;
		}

		public String CHF_WSP;

		public String getCHF_WSP() {
			return this.CHF_WSP;
		}

		public String NOK_RRP;

		public String getNOK_RRP() {
			return this.NOK_RRP;
		}

		public String NOK_WSP;

		public String getNOK_WSP() {
			return this.NOK_WSP;
		}

		public String DKK_RRP;

		public String getDKK_RRP() {
			return this.DKK_RRP;
		}

		public String DKK_WSP;

		public String getDKK_WSP() {
			return this.DKK_WSP;
		}

		public String SEK_RRP;

		public String getSEK_RRP() {
			return this.SEK_RRP;
		}

		public String SEK_WSP;

		public String getSEK_WSP() {
			return this.SEK_WSP;
		}

		public String EUR_FINN_RRP;

		public String getEUR_FINN_RRP() {
			return this.EUR_FINN_RRP;
		}

		public String EUR_FINN_WSP;

		public String getEUR_FINN_WSP() {
			return this.EUR_FINN_WSP;
		}

		public String FABRICATION;

		public String getFABRICATION() {
			return this.FABRICATION;
		}

		public String COO;

		public String getCOO() {
			return this.COO;
		}

		public String CUSTOM_TARIFF_CODE;

		public String getCUSTOM_TARIFF_CODE() {
			return this.CUSTOM_TARIFF_CODE;
		}

		public String UPC;

		public String getUPC() {
			return this.UPC;
		}

		public String SMU_TYPE;

		public String getSMU_TYPE() {
			return this.SMU_TYPE;
		}

		public String EAN;

		public String getEAN() {
			return this.EAN;
		}

		public String PRODUCT_CHANNEL;

		public String getPRODUCT_CHANNEL() {
			return this.PRODUCT_CHANNEL;
		}

		public String SUSTAINABILITY;

		public String getSUSTAINABILITY() {
			return this.SUSTAINABILITY;
		}

		public String DELIVERYFLOW;

		public String getDELIVERYFLOW() {
			return this.DELIVERYFLOW;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2.length) {
					if (length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2.length == 0) {
						commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[1024];
					} else {
						commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2, 0, length);
				strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_2) {

				try {

					int length = 0;

					this.BRAND = readString(dis);

					this.SEASON = readString(dis);

					this.CATEGORY = readString(dis);

					this.REF = readString(dis);

					this.DESCRIPTION = readString(dis);

					this.STYLE = readString(dis);

					this.COLOR = readString(dis);

					this.FASHION = readString(dis);

					this.STYLECOLORLABEL = readString(dis);

					this.COLORNAME = readString(dis);

					this.LBL = readString(dis);

					this.STYLE_COLOR = readString(dis);

					this.GENDER = readString(dis);

					this.AGE_RANGE = readString(dis);

					this.SIZE_RANGE = readString(dis);

					this.SIZE = readString(dis);

					this.US_SIZE = readString(dis);

					this.CM_SIZE = readString(dis);

					this.PRODUCT = readString(dis);

					this.PRODUCT_STATUS = readString(dis);

					this.PRODUCT_TIER = readString(dis);

					this.ACCT_EXCLUS = readString(dis);

					this.SIZE_RATIO_SPLIT = readString(dis);

					this.REC_SIZE_SPLIT = readString(dis);

					this.CARTON_QTY = readString(dis);

					this.ATTRIBUTE = readString(dis);

					this.UNITS = readString(dis);

					this.EUR_RRP = readString(dis);

					this.EUR_WSP = readString(dis);

					this.GBP_RRP = readString(dis);

					this.GBP_WSP = readString(dis);

					this.CHF_RRP = readString(dis);

					this.CHF_WSP = readString(dis);

					this.NOK_RRP = readString(dis);

					this.NOK_WSP = readString(dis);

					this.DKK_RRP = readString(dis);

					this.DKK_WSP = readString(dis);

					this.SEK_RRP = readString(dis);

					this.SEK_WSP = readString(dis);

					this.EUR_FINN_RRP = readString(dis);

					this.EUR_FINN_WSP = readString(dis);

					this.FABRICATION = readString(dis);

					this.COO = readString(dis);

					this.CUSTOM_TARIFF_CODE = readString(dis);

					this.UPC = readString(dis);

					this.SMU_TYPE = readString(dis);

					this.EAN = readString(dis);

					this.PRODUCT_CHANNEL = readString(dis);

					this.SUSTAINABILITY = readString(dis);

					this.DELIVERYFLOW = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.BRAND, dos);

				// String

				writeString(this.SEASON, dos);

				// String

				writeString(this.CATEGORY, dos);

				// String

				writeString(this.REF, dos);

				// String

				writeString(this.DESCRIPTION, dos);

				// String

				writeString(this.STYLE, dos);

				// String

				writeString(this.COLOR, dos);

				// String

				writeString(this.FASHION, dos);

				// String

				writeString(this.STYLECOLORLABEL, dos);

				// String

				writeString(this.COLORNAME, dos);

				// String

				writeString(this.LBL, dos);

				// String

				writeString(this.STYLE_COLOR, dos);

				// String

				writeString(this.GENDER, dos);

				// String

				writeString(this.AGE_RANGE, dos);

				// String

				writeString(this.SIZE_RANGE, dos);

				// String

				writeString(this.SIZE, dos);

				// String

				writeString(this.US_SIZE, dos);

				// String

				writeString(this.CM_SIZE, dos);

				// String

				writeString(this.PRODUCT, dos);

				// String

				writeString(this.PRODUCT_STATUS, dos);

				// String

				writeString(this.PRODUCT_TIER, dos);

				// String

				writeString(this.ACCT_EXCLUS, dos);

				// String

				writeString(this.SIZE_RATIO_SPLIT, dos);

				// String

				writeString(this.REC_SIZE_SPLIT, dos);

				// String

				writeString(this.CARTON_QTY, dos);

				// String

				writeString(this.ATTRIBUTE, dos);

				// String

				writeString(this.UNITS, dos);

				// String

				writeString(this.EUR_RRP, dos);

				// String

				writeString(this.EUR_WSP, dos);

				// String

				writeString(this.GBP_RRP, dos);

				// String

				writeString(this.GBP_WSP, dos);

				// String

				writeString(this.CHF_RRP, dos);

				// String

				writeString(this.CHF_WSP, dos);

				// String

				writeString(this.NOK_RRP, dos);

				// String

				writeString(this.NOK_WSP, dos);

				// String

				writeString(this.DKK_RRP, dos);

				// String

				writeString(this.DKK_WSP, dos);

				// String

				writeString(this.SEK_RRP, dos);

				// String

				writeString(this.SEK_WSP, dos);

				// String

				writeString(this.EUR_FINN_RRP, dos);

				// String

				writeString(this.EUR_FINN_WSP, dos);

				// String

				writeString(this.FABRICATION, dos);

				// String

				writeString(this.COO, dos);

				// String

				writeString(this.CUSTOM_TARIFF_CODE, dos);

				// String

				writeString(this.UPC, dos);

				// String

				writeString(this.SMU_TYPE, dos);

				// String

				writeString(this.EAN, dos);

				// String

				writeString(this.PRODUCT_CHANNEL, dos);

				// String

				writeString(this.SUSTAINABILITY, dos);

				// String

				writeString(this.DELIVERYFLOW, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("BRAND=" + BRAND);
			sb.append(",SEASON=" + SEASON);
			sb.append(",CATEGORY=" + CATEGORY);
			sb.append(",REF=" + REF);
			sb.append(",DESCRIPTION=" + DESCRIPTION);
			sb.append(",STYLE=" + STYLE);
			sb.append(",COLOR=" + COLOR);
			sb.append(",FASHION=" + FASHION);
			sb.append(",STYLECOLORLABEL=" + STYLECOLORLABEL);
			sb.append(",COLORNAME=" + COLORNAME);
			sb.append(",LBL=" + LBL);
			sb.append(",STYLE_COLOR=" + STYLE_COLOR);
			sb.append(",GENDER=" + GENDER);
			sb.append(",AGE_RANGE=" + AGE_RANGE);
			sb.append(",SIZE_RANGE=" + SIZE_RANGE);
			sb.append(",SIZE=" + SIZE);
			sb.append(",US_SIZE=" + US_SIZE);
			sb.append(",CM_SIZE=" + CM_SIZE);
			sb.append(",PRODUCT=" + PRODUCT);
			sb.append(",PRODUCT_STATUS=" + PRODUCT_STATUS);
			sb.append(",PRODUCT_TIER=" + PRODUCT_TIER);
			sb.append(",ACCT_EXCLUS=" + ACCT_EXCLUS);
			sb.append(",SIZE_RATIO_SPLIT=" + SIZE_RATIO_SPLIT);
			sb.append(",REC_SIZE_SPLIT=" + REC_SIZE_SPLIT);
			sb.append(",CARTON_QTY=" + CARTON_QTY);
			sb.append(",ATTRIBUTE=" + ATTRIBUTE);
			sb.append(",UNITS=" + UNITS);
			sb.append(",EUR_RRP=" + EUR_RRP);
			sb.append(",EUR_WSP=" + EUR_WSP);
			sb.append(",GBP_RRP=" + GBP_RRP);
			sb.append(",GBP_WSP=" + GBP_WSP);
			sb.append(",CHF_RRP=" + CHF_RRP);
			sb.append(",CHF_WSP=" + CHF_WSP);
			sb.append(",NOK_RRP=" + NOK_RRP);
			sb.append(",NOK_WSP=" + NOK_WSP);
			sb.append(",DKK_RRP=" + DKK_RRP);
			sb.append(",DKK_WSP=" + DKK_WSP);
			sb.append(",SEK_RRP=" + SEK_RRP);
			sb.append(",SEK_WSP=" + SEK_WSP);
			sb.append(",EUR_FINN_RRP=" + EUR_FINN_RRP);
			sb.append(",EUR_FINN_WSP=" + EUR_FINN_WSP);
			sb.append(",FABRICATION=" + FABRICATION);
			sb.append(",COO=" + COO);
			sb.append(",CUSTOM_TARIFF_CODE=" + CUSTOM_TARIFF_CODE);
			sb.append(",UPC=" + UPC);
			sb.append(",SMU_TYPE=" + SMU_TYPE);
			sb.append(",EAN=" + EAN);
			sb.append(",PRODUCT_CHANNEL=" + PRODUCT_CHANNEL);
			sb.append(",SUSTAINABILITY=" + SUSTAINABILITY);
			sb.append(",DELIVERYFLOW=" + DELIVERYFLOW);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(sortie_Excel1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[0];
		static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[0];

		public String BRAND;

		public String getBRAND() {
			return this.BRAND;
		}

		public String SEASON;

		public String getSEASON() {
			return this.SEASON;
		}

		public String CATEGORY;

		public String getCATEGORY() {
			return this.CATEGORY;
		}

		public String REF;

		public String getREF() {
			return this.REF;
		}

		public String DESCRIPTION;

		public String getDESCRIPTION() {
			return this.DESCRIPTION;
		}

		public String STYLE;

		public String getSTYLE() {
			return this.STYLE;
		}

		public String COLOR;

		public String getCOLOR() {
			return this.COLOR;
		}

		public String COLORNAME;

		public String getCOLORNAME() {
			return this.COLORNAME;
		}

		public String STYLE_COLOR;

		public String getSTYLE_COLOR() {
			return this.STYLE_COLOR;
		}

		public String STYLECOLORLABEL;

		public String getSTYLECOLORLABEL() {
			return this.STYLECOLORLABEL;
		}

		public String LBL;

		public String getLBL() {
			return this.LBL;
		}

		public String GENDER;

		public String getGENDER() {
			return this.GENDER;
		}

		public String AGE_RANGE;

		public String getAGE_RANGE() {
			return this.AGE_RANGE;
		}

		public String SIZE_RANGE;

		public String getSIZE_RANGE() {
			return this.SIZE_RANGE;
		}

		public String SIZE;

		public String getSIZE() {
			return this.SIZE;
		}

		public String US_SIZE;

		public String getUS_SIZE() {
			return this.US_SIZE;
		}

		public String CM_SIZE;

		public String getCM_SIZE() {
			return this.CM_SIZE;
		}

		public String FASHION;

		public String getFASHION() {
			return this.FASHION;
		}

		public String PRODUCT;

		public String getPRODUCT() {
			return this.PRODUCT;
		}

		public String PRODUCT_CHANNEL;

		public String getPRODUCT_CHANNEL() {
			return this.PRODUCT_CHANNEL;
		}

		public String PRODUCT_STATUS;

		public String getPRODUCT_STATUS() {
			return this.PRODUCT_STATUS;
		}

		public String PRODUCT_TIER;

		public String getPRODUCT_TIER() {
			return this.PRODUCT_TIER;
		}

		public String ACCT_EXCLUS;

		public String getACCT_EXCLUS() {
			return this.ACCT_EXCLUS;
		}

		public String EUR_RRP;

		public String getEUR_RRP() {
			return this.EUR_RRP;
		}

		public String EUR_WSP;

		public String getEUR_WSP() {
			return this.EUR_WSP;
		}

		public String GBP_RRP;

		public String getGBP_RRP() {
			return this.GBP_RRP;
		}

		public String GBP_WSP;

		public String getGBP_WSP() {
			return this.GBP_WSP;
		}

		public String CHF_RRP;

		public String getCHF_RRP() {
			return this.CHF_RRP;
		}

		public String CHF_WSP;

		public String getCHF_WSP() {
			return this.CHF_WSP;
		}

		public String DKK_RRP;

		public String getDKK_RRP() {
			return this.DKK_RRP;
		}

		public String DKK_WSP;

		public String getDKK_WSP() {
			return this.DKK_WSP;
		}

		public String NOK_RRP;

		public String getNOK_RRP() {
			return this.NOK_RRP;
		}

		public String NOK_WSP;

		public String getNOK_WSP() {
			return this.NOK_WSP;
		}

		public String SEK_RRP;

		public String getSEK_RRP() {
			return this.SEK_RRP;
		}

		public String SEK_WSP;

		public String getSEK_WSP() {
			return this.SEK_WSP;
		}

		public String EUR_FINN_RRP;

		public String getEUR_FINN_RRP() {
			return this.EUR_FINN_RRP;
		}

		public String EUR_FINN_WSP;

		public String getEUR_FINN_WSP() {
			return this.EUR_FINN_WSP;
		}

		public String CARTON_QTY;

		public String getCARTON_QTY() {
			return this.CARTON_QTY;
		}

		public String FABRICATION;

		public String getFABRICATION() {
			return this.FABRICATION;
		}

		public String COO;

		public String getCOO() {
			return this.COO;
		}

		public String CUSTOM_TARIFF_CODE;

		public String getCUSTOM_TARIFF_CODE() {
			return this.CUSTOM_TARIFF_CODE;
		}

		public String UPC;

		public String getUPC() {
			return this.UPC;
		}

		public String EAN;

		public String getEAN() {
			return this.EAN;
		}

		public String DELIVERYFLOW;

		public String getDELIVERYFLOW() {
			return this.DELIVERYFLOW;
		}

		public String SUSTAINABILITY;

		public String getSUSTAINABILITY() {
			return this.SUSTAINABILITY;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2.length) {
					if (length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2.length == 0) {
						commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[1024];
					} else {
						commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2, 0, length);
				strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_2) {

				try {

					int length = 0;

					this.BRAND = readString(dis);

					this.SEASON = readString(dis);

					this.CATEGORY = readString(dis);

					this.REF = readString(dis);

					this.DESCRIPTION = readString(dis);

					this.STYLE = readString(dis);

					this.COLOR = readString(dis);

					this.COLORNAME = readString(dis);

					this.STYLE_COLOR = readString(dis);

					this.STYLECOLORLABEL = readString(dis);

					this.LBL = readString(dis);

					this.GENDER = readString(dis);

					this.AGE_RANGE = readString(dis);

					this.SIZE_RANGE = readString(dis);

					this.SIZE = readString(dis);

					this.US_SIZE = readString(dis);

					this.CM_SIZE = readString(dis);

					this.FASHION = readString(dis);

					this.PRODUCT = readString(dis);

					this.PRODUCT_CHANNEL = readString(dis);

					this.PRODUCT_STATUS = readString(dis);

					this.PRODUCT_TIER = readString(dis);

					this.ACCT_EXCLUS = readString(dis);

					this.EUR_RRP = readString(dis);

					this.EUR_WSP = readString(dis);

					this.GBP_RRP = readString(dis);

					this.GBP_WSP = readString(dis);

					this.CHF_RRP = readString(dis);

					this.CHF_WSP = readString(dis);

					this.DKK_RRP = readString(dis);

					this.DKK_WSP = readString(dis);

					this.NOK_RRP = readString(dis);

					this.NOK_WSP = readString(dis);

					this.SEK_RRP = readString(dis);

					this.SEK_WSP = readString(dis);

					this.EUR_FINN_RRP = readString(dis);

					this.EUR_FINN_WSP = readString(dis);

					this.CARTON_QTY = readString(dis);

					this.FABRICATION = readString(dis);

					this.COO = readString(dis);

					this.CUSTOM_TARIFF_CODE = readString(dis);

					this.UPC = readString(dis);

					this.EAN = readString(dis);

					this.DELIVERYFLOW = readString(dis);

					this.SUSTAINABILITY = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.BRAND, dos);

				// String

				writeString(this.SEASON, dos);

				// String

				writeString(this.CATEGORY, dos);

				// String

				writeString(this.REF, dos);

				// String

				writeString(this.DESCRIPTION, dos);

				// String

				writeString(this.STYLE, dos);

				// String

				writeString(this.COLOR, dos);

				// String

				writeString(this.COLORNAME, dos);

				// String

				writeString(this.STYLE_COLOR, dos);

				// String

				writeString(this.STYLECOLORLABEL, dos);

				// String

				writeString(this.LBL, dos);

				// String

				writeString(this.GENDER, dos);

				// String

				writeString(this.AGE_RANGE, dos);

				// String

				writeString(this.SIZE_RANGE, dos);

				// String

				writeString(this.SIZE, dos);

				// String

				writeString(this.US_SIZE, dos);

				// String

				writeString(this.CM_SIZE, dos);

				// String

				writeString(this.FASHION, dos);

				// String

				writeString(this.PRODUCT, dos);

				// String

				writeString(this.PRODUCT_CHANNEL, dos);

				// String

				writeString(this.PRODUCT_STATUS, dos);

				// String

				writeString(this.PRODUCT_TIER, dos);

				// String

				writeString(this.ACCT_EXCLUS, dos);

				// String

				writeString(this.EUR_RRP, dos);

				// String

				writeString(this.EUR_WSP, dos);

				// String

				writeString(this.GBP_RRP, dos);

				// String

				writeString(this.GBP_WSP, dos);

				// String

				writeString(this.CHF_RRP, dos);

				// String

				writeString(this.CHF_WSP, dos);

				// String

				writeString(this.DKK_RRP, dos);

				// String

				writeString(this.DKK_WSP, dos);

				// String

				writeString(this.NOK_RRP, dos);

				// String

				writeString(this.NOK_WSP, dos);

				// String

				writeString(this.SEK_RRP, dos);

				// String

				writeString(this.SEK_WSP, dos);

				// String

				writeString(this.EUR_FINN_RRP, dos);

				// String

				writeString(this.EUR_FINN_WSP, dos);

				// String

				writeString(this.CARTON_QTY, dos);

				// String

				writeString(this.FABRICATION, dos);

				// String

				writeString(this.COO, dos);

				// String

				writeString(this.CUSTOM_TARIFF_CODE, dos);

				// String

				writeString(this.UPC, dos);

				// String

				writeString(this.EAN, dos);

				// String

				writeString(this.DELIVERYFLOW, dos);

				// String

				writeString(this.SUSTAINABILITY, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("BRAND=" + BRAND);
			sb.append(",SEASON=" + SEASON);
			sb.append(",CATEGORY=" + CATEGORY);
			sb.append(",REF=" + REF);
			sb.append(",DESCRIPTION=" + DESCRIPTION);
			sb.append(",STYLE=" + STYLE);
			sb.append(",COLOR=" + COLOR);
			sb.append(",COLORNAME=" + COLORNAME);
			sb.append(",STYLE_COLOR=" + STYLE_COLOR);
			sb.append(",STYLECOLORLABEL=" + STYLECOLORLABEL);
			sb.append(",LBL=" + LBL);
			sb.append(",GENDER=" + GENDER);
			sb.append(",AGE_RANGE=" + AGE_RANGE);
			sb.append(",SIZE_RANGE=" + SIZE_RANGE);
			sb.append(",SIZE=" + SIZE);
			sb.append(",US_SIZE=" + US_SIZE);
			sb.append(",CM_SIZE=" + CM_SIZE);
			sb.append(",FASHION=" + FASHION);
			sb.append(",PRODUCT=" + PRODUCT);
			sb.append(",PRODUCT_CHANNEL=" + PRODUCT_CHANNEL);
			sb.append(",PRODUCT_STATUS=" + PRODUCT_STATUS);
			sb.append(",PRODUCT_TIER=" + PRODUCT_TIER);
			sb.append(",ACCT_EXCLUS=" + ACCT_EXCLUS);
			sb.append(",EUR_RRP=" + EUR_RRP);
			sb.append(",EUR_WSP=" + EUR_WSP);
			sb.append(",GBP_RRP=" + GBP_RRP);
			sb.append(",GBP_WSP=" + GBP_WSP);
			sb.append(",CHF_RRP=" + CHF_RRP);
			sb.append(",CHF_WSP=" + CHF_WSP);
			sb.append(",DKK_RRP=" + DKK_RRP);
			sb.append(",DKK_WSP=" + DKK_WSP);
			sb.append(",NOK_RRP=" + NOK_RRP);
			sb.append(",NOK_WSP=" + NOK_WSP);
			sb.append(",SEK_RRP=" + SEK_RRP);
			sb.append(",SEK_WSP=" + SEK_WSP);
			sb.append(",EUR_FINN_RRP=" + EUR_FINN_RRP);
			sb.append(",EUR_FINN_WSP=" + EUR_FINN_WSP);
			sb.append(",CARTON_QTY=" + CARTON_QTY);
			sb.append(",FABRICATION=" + FABRICATION);
			sb.append(",COO=" + COO);
			sb.append(",CUSTOM_TARIFF_CODE=" + CUSTOM_TARIFF_CODE);
			sb.append(",UPC=" + UPC);
			sb.append(",EAN=" + EAN);
			sb.append(",DELIVERYFLOW=" + DELIVERYFLOW);
			sb.append(",SUSTAINABILITY=" + SUSTAINABILITY);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tDBInput_6Struct implements routines.system.IPersistableRow<after_tDBInput_6Struct> {
		final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[0];
		static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[0];

		public String BRAND;

		public String getBRAND() {
			return this.BRAND;
		}

		public String SEASON;

		public String getSEASON() {
			return this.SEASON;
		}

		public String CATEGORY;

		public String getCATEGORY() {
			return this.CATEGORY;
		}

		public String REF;

		public String getREF() {
			return this.REF;
		}

		public String DESCRIPTION;

		public String getDESCRIPTION() {
			return this.DESCRIPTION;
		}

		public String STYLE;

		public String getSTYLE() {
			return this.STYLE;
		}

		public String COLOR;

		public String getCOLOR() {
			return this.COLOR;
		}

		public String COLORNAME;

		public String getCOLORNAME() {
			return this.COLORNAME;
		}

		public String STYLE_COLOR;

		public String getSTYLE_COLOR() {
			return this.STYLE_COLOR;
		}

		public String STYLECOLORLABEL;

		public String getSTYLECOLORLABEL() {
			return this.STYLECOLORLABEL;
		}

		public String LBL;

		public String getLBL() {
			return this.LBL;
		}

		public String GENDER;

		public String getGENDER() {
			return this.GENDER;
		}

		public String AGE_RANGE;

		public String getAGE_RANGE() {
			return this.AGE_RANGE;
		}

		public String SIZE_RANGE;

		public String getSIZE_RANGE() {
			return this.SIZE_RANGE;
		}

		public String SIZE;

		public String getSIZE() {
			return this.SIZE;
		}

		public String US_SIZE;

		public String getUS_SIZE() {
			return this.US_SIZE;
		}

		public String CM_SIZE;

		public String getCM_SIZE() {
			return this.CM_SIZE;
		}

		public String FASHION;

		public String getFASHION() {
			return this.FASHION;
		}

		public String PRODUCT;

		public String getPRODUCT() {
			return this.PRODUCT;
		}

		public String PRODUCT_CHANNEL;

		public String getPRODUCT_CHANNEL() {
			return this.PRODUCT_CHANNEL;
		}

		public String PRODUCT_STATUS;

		public String getPRODUCT_STATUS() {
			return this.PRODUCT_STATUS;
		}

		public String PRODUCT_TIER;

		public String getPRODUCT_TIER() {
			return this.PRODUCT_TIER;
		}

		public String ACCT_EXCLUS;

		public String getACCT_EXCLUS() {
			return this.ACCT_EXCLUS;
		}

		public String EUR_RRP;

		public String getEUR_RRP() {
			return this.EUR_RRP;
		}

		public String EUR_WSP;

		public String getEUR_WSP() {
			return this.EUR_WSP;
		}

		public String GBP_RRP;

		public String getGBP_RRP() {
			return this.GBP_RRP;
		}

		public String GBP_WSP;

		public String getGBP_WSP() {
			return this.GBP_WSP;
		}

		public String CHF_RRP;

		public String getCHF_RRP() {
			return this.CHF_RRP;
		}

		public String CHF_WSP;

		public String getCHF_WSP() {
			return this.CHF_WSP;
		}

		public String DKK_RRP;

		public String getDKK_RRP() {
			return this.DKK_RRP;
		}

		public String DKK_WSP;

		public String getDKK_WSP() {
			return this.DKK_WSP;
		}

		public String NOK_RRP;

		public String getNOK_RRP() {
			return this.NOK_RRP;
		}

		public String NOK_WSP;

		public String getNOK_WSP() {
			return this.NOK_WSP;
		}

		public String SEK_RRP;

		public String getSEK_RRP() {
			return this.SEK_RRP;
		}

		public String SEK_WSP;

		public String getSEK_WSP() {
			return this.SEK_WSP;
		}

		public String EUR_FINN_RRP;

		public String getEUR_FINN_RRP() {
			return this.EUR_FINN_RRP;
		}

		public String EUR_FINN_WSP;

		public String getEUR_FINN_WSP() {
			return this.EUR_FINN_WSP;
		}

		public String CARTON_QTY;

		public String getCARTON_QTY() {
			return this.CARTON_QTY;
		}

		public String FABRICATION;

		public String getFABRICATION() {
			return this.FABRICATION;
		}

		public String COO;

		public String getCOO() {
			return this.COO;
		}

		public String CUSTOM_TARIFF_CODE;

		public String getCUSTOM_TARIFF_CODE() {
			return this.CUSTOM_TARIFF_CODE;
		}

		public String UPC;

		public String getUPC() {
			return this.UPC;
		}

		public String EAN;

		public String getEAN() {
			return this.EAN;
		}

		public String DELIVERYFLOW;

		public String getDELIVERYFLOW() {
			return this.DELIVERYFLOW;
		}

		public String SUSTAINABILITY;

		public String getSUSTAINABILITY() {
			return this.SUSTAINABILITY;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2.length) {
					if (length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2.length == 0) {
						commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[1024];
					} else {
						commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2, 0, length);
				strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_2) {

				try {

					int length = 0;

					this.BRAND = readString(dis);

					this.SEASON = readString(dis);

					this.CATEGORY = readString(dis);

					this.REF = readString(dis);

					this.DESCRIPTION = readString(dis);

					this.STYLE = readString(dis);

					this.COLOR = readString(dis);

					this.COLORNAME = readString(dis);

					this.STYLE_COLOR = readString(dis);

					this.STYLECOLORLABEL = readString(dis);

					this.LBL = readString(dis);

					this.GENDER = readString(dis);

					this.AGE_RANGE = readString(dis);

					this.SIZE_RANGE = readString(dis);

					this.SIZE = readString(dis);

					this.US_SIZE = readString(dis);

					this.CM_SIZE = readString(dis);

					this.FASHION = readString(dis);

					this.PRODUCT = readString(dis);

					this.PRODUCT_CHANNEL = readString(dis);

					this.PRODUCT_STATUS = readString(dis);

					this.PRODUCT_TIER = readString(dis);

					this.ACCT_EXCLUS = readString(dis);

					this.EUR_RRP = readString(dis);

					this.EUR_WSP = readString(dis);

					this.GBP_RRP = readString(dis);

					this.GBP_WSP = readString(dis);

					this.CHF_RRP = readString(dis);

					this.CHF_WSP = readString(dis);

					this.DKK_RRP = readString(dis);

					this.DKK_WSP = readString(dis);

					this.NOK_RRP = readString(dis);

					this.NOK_WSP = readString(dis);

					this.SEK_RRP = readString(dis);

					this.SEK_WSP = readString(dis);

					this.EUR_FINN_RRP = readString(dis);

					this.EUR_FINN_WSP = readString(dis);

					this.CARTON_QTY = readString(dis);

					this.FABRICATION = readString(dis);

					this.COO = readString(dis);

					this.CUSTOM_TARIFF_CODE = readString(dis);

					this.UPC = readString(dis);

					this.EAN = readString(dis);

					this.DELIVERYFLOW = readString(dis);

					this.SUSTAINABILITY = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.BRAND, dos);

				// String

				writeString(this.SEASON, dos);

				// String

				writeString(this.CATEGORY, dos);

				// String

				writeString(this.REF, dos);

				// String

				writeString(this.DESCRIPTION, dos);

				// String

				writeString(this.STYLE, dos);

				// String

				writeString(this.COLOR, dos);

				// String

				writeString(this.COLORNAME, dos);

				// String

				writeString(this.STYLE_COLOR, dos);

				// String

				writeString(this.STYLECOLORLABEL, dos);

				// String

				writeString(this.LBL, dos);

				// String

				writeString(this.GENDER, dos);

				// String

				writeString(this.AGE_RANGE, dos);

				// String

				writeString(this.SIZE_RANGE, dos);

				// String

				writeString(this.SIZE, dos);

				// String

				writeString(this.US_SIZE, dos);

				// String

				writeString(this.CM_SIZE, dos);

				// String

				writeString(this.FASHION, dos);

				// String

				writeString(this.PRODUCT, dos);

				// String

				writeString(this.PRODUCT_CHANNEL, dos);

				// String

				writeString(this.PRODUCT_STATUS, dos);

				// String

				writeString(this.PRODUCT_TIER, dos);

				// String

				writeString(this.ACCT_EXCLUS, dos);

				// String

				writeString(this.EUR_RRP, dos);

				// String

				writeString(this.EUR_WSP, dos);

				// String

				writeString(this.GBP_RRP, dos);

				// String

				writeString(this.GBP_WSP, dos);

				// String

				writeString(this.CHF_RRP, dos);

				// String

				writeString(this.CHF_WSP, dos);

				// String

				writeString(this.DKK_RRP, dos);

				// String

				writeString(this.DKK_WSP, dos);

				// String

				writeString(this.NOK_RRP, dos);

				// String

				writeString(this.NOK_WSP, dos);

				// String

				writeString(this.SEK_RRP, dos);

				// String

				writeString(this.SEK_WSP, dos);

				// String

				writeString(this.EUR_FINN_RRP, dos);

				// String

				writeString(this.EUR_FINN_WSP, dos);

				// String

				writeString(this.CARTON_QTY, dos);

				// String

				writeString(this.FABRICATION, dos);

				// String

				writeString(this.COO, dos);

				// String

				writeString(this.CUSTOM_TARIFF_CODE, dos);

				// String

				writeString(this.UPC, dos);

				// String

				writeString(this.EAN, dos);

				// String

				writeString(this.DELIVERYFLOW, dos);

				// String

				writeString(this.SUSTAINABILITY, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("BRAND=" + BRAND);
			sb.append(",SEASON=" + SEASON);
			sb.append(",CATEGORY=" + CATEGORY);
			sb.append(",REF=" + REF);
			sb.append(",DESCRIPTION=" + DESCRIPTION);
			sb.append(",STYLE=" + STYLE);
			sb.append(",COLOR=" + COLOR);
			sb.append(",COLORNAME=" + COLORNAME);
			sb.append(",STYLE_COLOR=" + STYLE_COLOR);
			sb.append(",STYLECOLORLABEL=" + STYLECOLORLABEL);
			sb.append(",LBL=" + LBL);
			sb.append(",GENDER=" + GENDER);
			sb.append(",AGE_RANGE=" + AGE_RANGE);
			sb.append(",SIZE_RANGE=" + SIZE_RANGE);
			sb.append(",SIZE=" + SIZE);
			sb.append(",US_SIZE=" + US_SIZE);
			sb.append(",CM_SIZE=" + CM_SIZE);
			sb.append(",FASHION=" + FASHION);
			sb.append(",PRODUCT=" + PRODUCT);
			sb.append(",PRODUCT_CHANNEL=" + PRODUCT_CHANNEL);
			sb.append(",PRODUCT_STATUS=" + PRODUCT_STATUS);
			sb.append(",PRODUCT_TIER=" + PRODUCT_TIER);
			sb.append(",ACCT_EXCLUS=" + ACCT_EXCLUS);
			sb.append(",EUR_RRP=" + EUR_RRP);
			sb.append(",EUR_WSP=" + EUR_WSP);
			sb.append(",GBP_RRP=" + GBP_RRP);
			sb.append(",GBP_WSP=" + GBP_WSP);
			sb.append(",CHF_RRP=" + CHF_RRP);
			sb.append(",CHF_WSP=" + CHF_WSP);
			sb.append(",DKK_RRP=" + DKK_RRP);
			sb.append(",DKK_WSP=" + DKK_WSP);
			sb.append(",NOK_RRP=" + NOK_RRP);
			sb.append(",NOK_WSP=" + NOK_WSP);
			sb.append(",SEK_RRP=" + SEK_RRP);
			sb.append(",SEK_WSP=" + SEK_WSP);
			sb.append(",EUR_FINN_RRP=" + EUR_FINN_RRP);
			sb.append(",EUR_FINN_WSP=" + EUR_FINN_WSP);
			sb.append(",CARTON_QTY=" + CARTON_QTY);
			sb.append(",FABRICATION=" + FABRICATION);
			sb.append(",COO=" + COO);
			sb.append(",CUSTOM_TARIFF_CODE=" + CUSTOM_TARIFF_CODE);
			sb.append(",UPC=" + UPC);
			sb.append(",EAN=" + EAN);
			sb.append(",DELIVERYFLOW=" + DELIVERYFLOW);
			sb.append(",SUSTAINABILITY=" + SUSTAINABILITY);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tDBInput_6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tDBInput_1Process(globalMap);
				tDBInput_2Process(globalMap);
				tDBInput_3Process(globalMap);
				tDBInput_4Process(globalMap);
				tDBInput_5Process(globalMap);

				row1Struct row1 = new row1Struct();
				sortie_Excel1Struct sortie_Excel1 = new sortie_Excel1Struct();
				row7Struct row7 = new row7Struct();
				sortieStruct sortie = new sortieStruct();
				sortie_ExcelStruct sortie_Excel = new sortie_ExcelStruct();
				sortie_full_catStruct sortie_full_cat = new sortie_full_catStruct();
				sortie_full_catStruct row6 = sortie_full_cat;
				copyOfsortie_full_2Struct copyOfsortie_full_2 = new copyOfsortie_full_2Struct();
				copyOfcopyOfsortie_fullStruct copyOfcopyOfsortie_full = new copyOfcopyOfsortie_fullStruct();
				sortie_full_COOStruct sortie_full_COO = new sortie_full_COOStruct();
				sortie_full_Struct sortie_full_ = new sortie_full_Struct();
				sortie_full_fashionStruct sortie_full_fashion = new sortie_full_fashionStruct();
				copyOfsortie_full_Struct copyOfsortie_full_ = new copyOfsortie_full_Struct();
				copyOfcopyOfcopyOfcopyOfsortie_size_0Struct copyOfcopyOfcopyOfcopyOfsortie_size_0 = new copyOfcopyOfcopyOfcopyOfsortie_size_0Struct();
				row20Struct row20 = new row20Struct();
				row22Struct row22 = new row22Struct();
				copyOfcopyOfcopyOfsortie_size_0Struct copyOfcopyOfcopyOfsortie_size_0 = new copyOfcopyOfcopyOfsortie_size_0Struct();
				row17Struct row17 = new row17Struct();
				copyOfcopyOfsortie_sizeStruct copyOfcopyOfsortie_size = new copyOfcopyOfsortie_sizeStruct();
				row37Struct row37 = new row37Struct();
				copyOfcopyOfsortie_productStruct copyOfcopyOfsortie_product = new copyOfcopyOfsortie_productStruct();
				row2Struct row2 = new row2Struct();
				copyOfsortie_productStruct copyOfsortie_product = new copyOfsortie_productStruct();
				row5Struct row5 = new row5Struct();

				/**
				 * [tFileOutputExcel_6 begin ] start
				 */

				ok_Hash.put("tFileOutputExcel_6", false);
				start_Hash.put("tFileOutputExcel_6", System.currentTimeMillis());

				currentComponent = "tFileOutputExcel_6";

				int tos_count_tFileOutputExcel_6 = 0;

				int columnIndex_tFileOutputExcel_6 = 0;

				String fileName_tFileOutputExcel_6 = context.ExtractPathOTHER
						+ "K3 Fashion - Item season drop relations.xlsx";
				int nb_line_tFileOutputExcel_6 = 0;
				org.talend.ExcelTool xlsxTool_tFileOutputExcel_6 = new org.talend.ExcelTool();

				xlsxTool_tFileOutputExcel_6.setSheet("K3 Fashion - Item season drop relations");
				xlsxTool_tFileOutputExcel_6.setAppend(false, true);
				xlsxTool_tFileOutputExcel_6.setRecalculateFormula(false);
				xlsxTool_tFileOutputExcel_6.setXY(false, 0, 10, false);

				java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_6 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap
						.get("concurrentHashMap");
				java.lang.Object lockObj_tFileOutputExcel_6 = chm_tFileOutputExcel_6
						.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_6", k -> new Object());
				synchronized (lockObj_tFileOutputExcel_6) {

					xlsxTool_tFileOutputExcel_6.prepareXlsxFile(fileName_tFileOutputExcel_6);

				}

				xlsxTool_tFileOutputExcel_6.setFont("");

				if (xlsxTool_tFileOutputExcel_6.getStartRow() == 0) {

					xlsxTool_tFileOutputExcel_6.addRow();

					xlsxTool_tFileOutputExcel_6.addCellValue("ITEMID");

					xlsxTool_tFileOutputExcel_6.addCellValue("SEASONCODE");

					xlsxTool_tFileOutputExcel_6.addCellValue("DROPID");

					xlsxTool_tFileOutputExcel_6.addCellValue("DISPLAYORDER");

					xlsxTool_tFileOutputExcel_6.addCellValue("ISDEFAULT");

					nb_line_tFileOutputExcel_6++;

				}

				/**
				 * [tFileOutputExcel_6 begin ] stop
				 */

				/**
				 * [tFilterRow_1 begin ] start
				 */

				ok_Hash.put("tFilterRow_1", false);
				start_Hash.put("tFilterRow_1", System.currentTimeMillis());

				currentComponent = "tFilterRow_1";

				int tos_count_tFilterRow_1 = 0;

				int nb_line_tFilterRow_1 = 0;
				int nb_line_ok_tFilterRow_1 = 0;
				int nb_line_reject_tFilterRow_1 = 0;

				class Operator_tFilterRow_1 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_1(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_1 begin ] stop
				 */

				/**
				 * [tUniqRow_7 begin ] start
				 */

				ok_Hash.put("tUniqRow_7", false);
				start_Hash.put("tUniqRow_7", System.currentTimeMillis());

				currentComponent = "tUniqRow_7";

				int tos_count_tUniqRow_7 = 0;

				class KeyStruct_tUniqRow_7 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String ITEMID;
					String SEASONCODE;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + ((this.ITEMID == null) ? 0 : this.ITEMID.hashCode());

							result = prime * result + ((this.SEASONCODE == null) ? 0 : this.SEASONCODE.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_7 other = (KeyStruct_tUniqRow_7) obj;

						if (this.ITEMID == null) {
							if (other.ITEMID != null)
								return false;

						} else if (!this.ITEMID.equals(other.ITEMID))

							return false;

						if (this.SEASONCODE == null) {
							if (other.SEASONCODE != null)
								return false;

						} else if (!this.SEASONCODE.equals(other.SEASONCODE))

							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_7 = 0;
				int nb_duplicates_tUniqRow_7 = 0;
				KeyStruct_tUniqRow_7 finder_tUniqRow_7 = new KeyStruct_tUniqRow_7();
				java.util.Set<KeyStruct_tUniqRow_7> keystUniqRow_7 = new java.util.HashSet<KeyStruct_tUniqRow_7>();

				/**
				 * [tUniqRow_7 begin ] stop
				 */

				/**
				 * [tMap_10 begin ] start
				 */

				ok_Hash.put("tMap_10", false);
				start_Hash.put("tMap_10", System.currentTimeMillis());

				currentComponent = "tMap_10";

				int tos_count_tMap_10 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_10__Struct {
				}
				Var__tMap_10__Struct Var__tMap_10 = new Var__tMap_10__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfcopyOfcopyOfcopyOfsortie_size_0Struct copyOfcopyOfcopyOfcopyOfsortie_size_0_tmp = new copyOfcopyOfcopyOfcopyOfsortie_size_0Struct();
// ###############################

				/**
				 * [tMap_10 begin ] stop
				 */

				/**
				 * [tFileOutputExcel_5 begin ] start
				 */

				ok_Hash.put("tFileOutputExcel_5", false);
				start_Hash.put("tFileOutputExcel_5", System.currentTimeMillis());

				currentComponent = "tFileOutputExcel_5";

				int tos_count_tFileOutputExcel_5 = 0;

				int columnIndex_tFileOutputExcel_5 = 0;

				String fileName_tFileOutputExcel_5 = context.ExtractPathHBE + "Product master fit translations.xlsx";
				int nb_line_tFileOutputExcel_5 = 0;
				org.talend.ExcelTool xlsxTool_tFileOutputExcel_5 = new org.talend.ExcelTool();

				xlsxTool_tFileOutputExcel_5.setSheet("Product master fit translations");
				xlsxTool_tFileOutputExcel_5.setAppend(false, true);
				xlsxTool_tFileOutputExcel_5.setRecalculateFormula(false);
				xlsxTool_tFileOutputExcel_5.setXY(false, 0, 10, false);

				java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_5 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap
						.get("concurrentHashMap");
				java.lang.Object lockObj_tFileOutputExcel_5 = chm_tFileOutputExcel_5
						.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_5", k -> new Object());
				synchronized (lockObj_tFileOutputExcel_5) {

					xlsxTool_tFileOutputExcel_5.prepareXlsxFile(fileName_tFileOutputExcel_5);

				}

				xlsxTool_tFileOutputExcel_5.setFont("");

				if (xlsxTool_tFileOutputExcel_5.getStartRow() == 0) {

					xlsxTool_tFileOutputExcel_5.addRow();

					xlsxTool_tFileOutputExcel_5.addCellValue("PRODUCTMASTERNUMBER");

					xlsxTool_tFileOutputExcel_5.addCellValue("PRODUCTMASTERSTYLEID");

					xlsxTool_tFileOutputExcel_5.addCellValue("LANGUAGEID");

					xlsxTool_tFileOutputExcel_5.addCellValue("TRANSLATEDSTYLEDESCRIPTION");

					xlsxTool_tFileOutputExcel_5.addCellValue("TRANSLATEDSTYLENAME");

					nb_line_tFileOutputExcel_5++;

				}

				/**
				 * [tFileOutputExcel_5 begin ] stop
				 */

				/**
				 * [tUniqRow_6 begin ] start
				 */

				ok_Hash.put("tUniqRow_6", false);
				start_Hash.put("tUniqRow_6", System.currentTimeMillis());

				currentComponent = "tUniqRow_6";

				int tos_count_tUniqRow_6 = 0;

				class KeyStruct_tUniqRow_6 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String PRODUCTMASTERNUMBER;
					String PRODUCTMASTERSTYLEID;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result
									+ ((this.PRODUCTMASTERNUMBER == null) ? 0 : this.PRODUCTMASTERNUMBER.hashCode());

							result = prime * result
									+ ((this.PRODUCTMASTERSTYLEID == null) ? 0 : this.PRODUCTMASTERSTYLEID.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_6 other = (KeyStruct_tUniqRow_6) obj;

						if (this.PRODUCTMASTERNUMBER == null) {
							if (other.PRODUCTMASTERNUMBER != null)
								return false;

						} else if (!this.PRODUCTMASTERNUMBER.equals(other.PRODUCTMASTERNUMBER))

							return false;

						if (this.PRODUCTMASTERSTYLEID == null) {
							if (other.PRODUCTMASTERSTYLEID != null)
								return false;

						} else if (!this.PRODUCTMASTERSTYLEID.equals(other.PRODUCTMASTERSTYLEID))

							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_6 = 0;
				int nb_duplicates_tUniqRow_6 = 0;
				KeyStruct_tUniqRow_6 finder_tUniqRow_6 = new KeyStruct_tUniqRow_6();
				java.util.Set<KeyStruct_tUniqRow_6> keystUniqRow_6 = new java.util.HashSet<KeyStruct_tUniqRow_6>();

				/**
				 * [tUniqRow_6 begin ] stop
				 */

				/**
				 * [tMap_9 begin ] start
				 */

				ok_Hash.put("tMap_9", false);
				start_Hash.put("tMap_9", System.currentTimeMillis());

				currentComponent = "tMap_9";

				int tos_count_tMap_9 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_9__Struct {
				}
				Var__tMap_9__Struct Var__tMap_9 = new Var__tMap_9__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfsortie_full_Struct copyOfsortie_full__tmp = new copyOfsortie_full_Struct();
				copyOfcopyOfcopyOfsortie_size_0Struct copyOfcopyOfcopyOfsortie_size_0_tmp = new copyOfcopyOfcopyOfsortie_size_0Struct();
// ###############################

				/**
				 * [tMap_9 begin ] stop
				 */

				/**
				 * [tMap_4 begin ] start
				 */

				ok_Hash.put("tMap_4", false);
				start_Hash.put("tMap_4", System.currentTimeMillis());

				currentComponent = "tMap_4";

				int tos_count_tMap_4 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_4__Struct {
				}
				Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
				sortie_full_fashionStruct sortie_full_fashion_tmp = new sortie_full_fashionStruct();
// ###############################

				/**
				 * [tMap_4 begin ] stop
				 */

				/**
				 * [tFileOutputExcel_13 begin ] start
				 */

				ok_Hash.put("tFileOutputExcel_13", false);
				start_Hash.put("tFileOutputExcel_13", System.currentTimeMillis());

				currentComponent = "tFileOutputExcel_13";

				int tos_count_tFileOutputExcel_13 = 0;

				int columnIndex_tFileOutputExcel_13 = 0;

				String fileName_tFileOutputExcel_13 = context.ExtractPathHBE + "Product master size translations.xlsx";
				int nb_line_tFileOutputExcel_13 = 0;
				org.talend.ExcelTool xlsxTool_tFileOutputExcel_13 = new org.talend.ExcelTool();

				xlsxTool_tFileOutputExcel_13.setSheet("Product master size translations");
				xlsxTool_tFileOutputExcel_13.setAppend(false, true);
				xlsxTool_tFileOutputExcel_13.setRecalculateFormula(false);
				xlsxTool_tFileOutputExcel_13.setXY(false, 0, 10, false);

				java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_13 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap
						.get("concurrentHashMap");
				java.lang.Object lockObj_tFileOutputExcel_13 = chm_tFileOutputExcel_13
						.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_13", k -> new Object());
				synchronized (lockObj_tFileOutputExcel_13) {

					xlsxTool_tFileOutputExcel_13.prepareXlsxFile(fileName_tFileOutputExcel_13);

				}

				xlsxTool_tFileOutputExcel_13.setFont("");

				if (xlsxTool_tFileOutputExcel_13.getStartRow() == 0) {

					xlsxTool_tFileOutputExcel_13.addRow();

					xlsxTool_tFileOutputExcel_13.addCellValue("PRODUCTMASTERNUMBER");

					xlsxTool_tFileOutputExcel_13.addCellValue("PRODUCTMASTERSIZEID");

					xlsxTool_tFileOutputExcel_13.addCellValue("LANGUAGEID");

					xlsxTool_tFileOutputExcel_13.addCellValue("TRANSLATEDSIZEDESCRIPTION");

					xlsxTool_tFileOutputExcel_13.addCellValue("TRANSLATEDSIZENAME");

					nb_line_tFileOutputExcel_13++;

				}

				/**
				 * [tFileOutputExcel_13 begin ] stop
				 */

				/**
				 * [tUniqRow_22 begin ] start
				 */

				ok_Hash.put("tUniqRow_22", false);
				start_Hash.put("tUniqRow_22", System.currentTimeMillis());

				currentComponent = "tUniqRow_22";

				int tos_count_tUniqRow_22 = 0;

				class KeyStruct_tUniqRow_22 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String PRODUCTMASTERNUMBER;
					String PRODUCTMASTERSIZEID;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result
									+ ((this.PRODUCTMASTERNUMBER == null) ? 0 : this.PRODUCTMASTERNUMBER.hashCode());

							result = prime * result
									+ ((this.PRODUCTMASTERSIZEID == null) ? 0 : this.PRODUCTMASTERSIZEID.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_22 other = (KeyStruct_tUniqRow_22) obj;

						if (this.PRODUCTMASTERNUMBER == null) {
							if (other.PRODUCTMASTERNUMBER != null)
								return false;

						} else if (!this.PRODUCTMASTERNUMBER.equals(other.PRODUCTMASTERNUMBER))

							return false;

						if (this.PRODUCTMASTERSIZEID == null) {
							if (other.PRODUCTMASTERSIZEID != null)
								return false;

						} else if (!this.PRODUCTMASTERSIZEID.equals(other.PRODUCTMASTERSIZEID))

							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_22 = 0;
				int nb_duplicates_tUniqRow_22 = 0;
				KeyStruct_tUniqRow_22 finder_tUniqRow_22 = new KeyStruct_tUniqRow_22();
				java.util.Set<KeyStruct_tUniqRow_22> keystUniqRow_22 = new java.util.HashSet<KeyStruct_tUniqRow_22>();

				/**
				 * [tUniqRow_22 begin ] stop
				 */

				/**
				 * [tMap_23 begin ] start
				 */

				ok_Hash.put("tMap_23", false);
				start_Hash.put("tMap_23", System.currentTimeMillis());

				currentComponent = "tMap_23";

				int tos_count_tMap_23 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_23__Struct {
				}
				Var__tMap_23__Struct Var__tMap_23 = new Var__tMap_23__Struct();
// ###############################

// ###############################
// # Outputs initialization
				sortie_full_Struct sortie_full__tmp = new sortie_full_Struct();
				copyOfcopyOfsortie_sizeStruct copyOfcopyOfsortie_size_tmp = new copyOfcopyOfsortie_sizeStruct();
// ###############################

				/**
				 * [tMap_23 begin ] stop
				 */

				/**
				 * [tMap_6 begin ] start
				 */

				ok_Hash.put("tMap_6", false);
				start_Hash.put("tMap_6", System.currentTimeMillis());

				currentComponent = "tMap_6";

				int tos_count_tMap_6 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_6__Struct {
				}
				Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
				sortie_full_COOStruct sortie_full_COO_tmp = new sortie_full_COOStruct();
// ###############################

				/**
				 * [tMap_6 begin ] stop
				 */

				/**
				 * [tFileOutputExcel_1 begin ] start
				 */

				ok_Hash.put("tFileOutputExcel_1", false);
				start_Hash.put("tFileOutputExcel_1", System.currentTimeMillis());

				currentComponent = "tFileOutputExcel_1";

				int tos_count_tFileOutputExcel_1 = 0;

				int columnIndex_tFileOutputExcel_1 = 0;

				String fileName_tFileOutputExcel_1 = context.ExtractPathOTHER
						+ "K3 Fashion - Item season relations.xlsx";
				int nb_line_tFileOutputExcel_1 = 0;
				org.talend.ExcelTool xlsxTool_tFileOutputExcel_1 = new org.talend.ExcelTool();

				xlsxTool_tFileOutputExcel_1.setSheet("K3 Fashion - Item season relations");
				xlsxTool_tFileOutputExcel_1.setAppend(false, true);
				xlsxTool_tFileOutputExcel_1.setRecalculateFormula(false);
				xlsxTool_tFileOutputExcel_1.setXY(false, 0, 10, false);

				java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_1 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap
						.get("concurrentHashMap");
				java.lang.Object lockObj_tFileOutputExcel_1 = chm_tFileOutputExcel_1
						.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_1", k -> new Object());
				synchronized (lockObj_tFileOutputExcel_1) {

					xlsxTool_tFileOutputExcel_1.prepareXlsxFile(fileName_tFileOutputExcel_1);

				}

				xlsxTool_tFileOutputExcel_1.setFont("");

				if (xlsxTool_tFileOutputExcel_1.getStartRow() == 0) {

					xlsxTool_tFileOutputExcel_1.addRow();

					xlsxTool_tFileOutputExcel_1.addCellValue("ITEMID");

					xlsxTool_tFileOutputExcel_1.addCellValue("SEASONCODE");

					xlsxTool_tFileOutputExcel_1.addCellValue("ISDEFAULT");

					xlsxTool_tFileOutputExcel_1.addCellValue("NOOS");

					nb_line_tFileOutputExcel_1++;

				}

				/**
				 * [tFileOutputExcel_1 begin ] stop
				 */

				/**
				 * [tUniqRow_3 begin ] start
				 */

				ok_Hash.put("tUniqRow_3", false);
				start_Hash.put("tUniqRow_3", System.currentTimeMillis());

				currentComponent = "tUniqRow_3";

				int tos_count_tUniqRow_3 = 0;

				class KeyStruct_tUniqRow_3 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String ITEMID;
					String SEASONCODE;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + ((this.ITEMID == null) ? 0 : this.ITEMID.hashCode());

							result = prime * result + ((this.SEASONCODE == null) ? 0 : this.SEASONCODE.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_3 other = (KeyStruct_tUniqRow_3) obj;

						if (this.ITEMID == null) {
							if (other.ITEMID != null)
								return false;

						} else if (!this.ITEMID.equals(other.ITEMID))

							return false;

						if (this.SEASONCODE == null) {
							if (other.SEASONCODE != null)
								return false;

						} else if (!this.SEASONCODE.equals(other.SEASONCODE))

							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_3 = 0;
				int nb_duplicates_tUniqRow_3 = 0;
				KeyStruct_tUniqRow_3 finder_tUniqRow_3 = new KeyStruct_tUniqRow_3();
				java.util.Set<KeyStruct_tUniqRow_3> keystUniqRow_3 = new java.util.HashSet<KeyStruct_tUniqRow_3>();

				/**
				 * [tUniqRow_3 begin ] stop
				 */

				/**
				 * [tMap_5 begin ] start
				 */

				ok_Hash.put("tMap_5", false);
				start_Hash.put("tMap_5", System.currentTimeMillis());

				currentComponent = "tMap_5";

				int tos_count_tMap_5 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row28Struct> tHash_Lookup_row28 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row28Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row28Struct>) globalMap
						.get("tHash_Lookup_row28"));

				row28Struct row28HashKey = new row28Struct();
				row28Struct row28Default = new row28Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_5__Struct {
				}
				Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfcopyOfsortie_fullStruct copyOfcopyOfsortie_full_tmp = new copyOfcopyOfsortie_fullStruct();
				copyOfcopyOfsortie_productStruct copyOfcopyOfsortie_product_tmp = new copyOfcopyOfsortie_productStruct();
// ###############################

				/**
				 * [tMap_5 begin ] stop
				 */

				/**
				 * [tHashOutput_2 begin ] start
				 */

				ok_Hash.put("tHashOutput_2", false);
				start_Hash.put("tHashOutput_2", System.currentTimeMillis());

				currentComponent = "tHashOutput_2";

				int tos_count_tHashOutput_2 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_2 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row5Struct> tHashFile_tHashOutput_2 = null;
				String hashKey_tHashOutput_2 = "tHashFile_MASTERFILE_EXTRACT_PRODUCTS_2_" + pid + "_tHashOutput_2";
				synchronized (org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.get(hashKey_tHashOutput_2)) {
					if (mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2) == null) {
						mf_tHashOutput_2.getResourceMap().put(hashKey_tHashOutput_2,
								new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row5Struct>(
										org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
						tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
					} else {
						tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
					}
				}
				int nb_line_tHashOutput_2 = 0;

				/**
				 * [tHashOutput_2 begin ] stop
				 */

				/**
				 * [tUniqRow_2 begin ] start
				 */

				ok_Hash.put("tUniqRow_2", false);
				start_Hash.put("tUniqRow_2", System.currentTimeMillis());

				currentComponent = "tUniqRow_2";

				int tos_count_tUniqRow_2 = 0;

				class KeyStruct_tUniqRow_2 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String PRODUCTNUMBER;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result
									+ ((this.PRODUCTNUMBER == null) ? 0 : this.PRODUCTNUMBER.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_2 other = (KeyStruct_tUniqRow_2) obj;

						if (this.PRODUCTNUMBER == null) {
							if (other.PRODUCTNUMBER != null)
								return false;

						} else if (!this.PRODUCTNUMBER.equals(other.PRODUCTNUMBER))

							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_2 = 0;
				int nb_duplicates_tUniqRow_2 = 0;
				KeyStruct_tUniqRow_2 finder_tUniqRow_2 = new KeyStruct_tUniqRow_2();
				java.util.Set<KeyStruct_tUniqRow_2> keystUniqRow_2 = new java.util.HashSet<KeyStruct_tUniqRow_2>();

				/**
				 * [tUniqRow_2 begin ] stop
				 */

				/**
				 * [tMap_3 begin ] start
				 */

				ok_Hash.put("tMap_3", false);
				start_Hash.put("tMap_3", System.currentTimeMillis());

				currentComponent = "tMap_3";

				int tos_count_tMap_3 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_3__Struct {
				}
				Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfsortie_full_2Struct copyOfsortie_full_2_tmp = new copyOfsortie_full_2Struct();
				copyOfsortie_productStruct copyOfsortie_product_tmp = new copyOfsortie_productStruct();
// ###############################

				/**
				 * [tMap_3 begin ] stop
				 */

				/**
				 * [tLogRow_2 begin ] start
				 */

				ok_Hash.put("tLogRow_2", false);
				start_Hash.put("tLogRow_2", System.currentTimeMillis());

				currentComponent = "tLogRow_2";

				int tos_count_tLogRow_2 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_2 = "|";
				java.io.PrintStream consoleOut_tLogRow_2 = null;

				StringBuilder strBuffer_tLogRow_2 = null;
				int nb_line_tLogRow_2 = 0;
///////////////////////    			

				/**
				 * [tLogRow_2 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				int tos_count_tMap_2 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
				sortie_full_catStruct sortie_full_cat_tmp = new sortie_full_catStruct();
// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tMap_7 begin ] start
				 */

				ok_Hash.put("tMap_7", false);
				start_Hash.put("tMap_7", System.currentTimeMillis());

				currentComponent = "tMap_7";

				int tos_count_tMap_7 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<copyOfcopyOfsortie_fashionStruct> tHash_Lookup_copyOfcopyOfsortie_fashion = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<copyOfcopyOfsortie_fashionStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<copyOfcopyOfsortie_fashionStruct>) globalMap
						.get("tHash_Lookup_copyOfcopyOfsortie_fashion"));

				copyOfcopyOfsortie_fashionStruct copyOfcopyOfsortie_fashionHashKey = new copyOfcopyOfsortie_fashionStruct();
				copyOfcopyOfsortie_fashionStruct copyOfcopyOfsortie_fashionDefault = new copyOfcopyOfsortie_fashionStruct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct> tHash_Lookup_row18 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct>) globalMap
						.get("tHash_Lookup_row18"));

				row18Struct row18HashKey = new row18Struct();
				row18Struct row18Default = new row18Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row19Struct> tHash_Lookup_row19 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row19Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row19Struct>) globalMap
						.get("tHash_Lookup_row19"));

				row19Struct row19HashKey = new row19Struct();
				row19Struct row19Default = new row19Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_7__Struct {
				}
				Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
// ###############################

// ###############################
// # Outputs initialization
				sortie_ExcelStruct sortie_Excel_tmp = new sortie_ExcelStruct();
// ###############################

				/**
				 * [tMap_7 begin ] stop
				 */

				/**
				 * [tMap_12 begin ] start
				 */

				ok_Hash.put("tMap_12", false);
				start_Hash.put("tMap_12", System.currentTimeMillis());

				currentComponent = "tMap_12";

				int tos_count_tMap_12 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row25Struct> tHash_Lookup_row25 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row25Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row25Struct>) globalMap
						.get("tHash_Lookup_row25"));

				row25Struct row25HashKey = new row25Struct();
				row25Struct row25Default = new row25Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_12__Struct {
				}
				Var__tMap_12__Struct Var__tMap_12 = new Var__tMap_12__Struct();
// ###############################

// ###############################
// # Outputs initialization
				sortieStruct sortie_tmp = new sortieStruct();
// ###############################

				/**
				 * [tMap_12 begin ] stop
				 */

				/**
				 * [tFilterRow_2 begin ] start
				 */

				ok_Hash.put("tFilterRow_2", false);
				start_Hash.put("tFilterRow_2", System.currentTimeMillis());

				currentComponent = "tFilterRow_2";

				int tos_count_tFilterRow_2 = 0;

				int nb_line_tFilterRow_2 = 0;
				int nb_line_ok_tFilterRow_2 = 0;
				int nb_line_reject_tFilterRow_2 = 0;

				class Operator_tFilterRow_2 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_2(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_2 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				sortie_Excel1Struct sortie_Excel1_tmp = new sortie_Excel1Struct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tDBInput_6 begin ] start
				 */

				ok_Hash.put("tDBInput_6", false);
				start_Hash.put("tDBInput_6", System.currentTimeMillis());

				currentComponent = "tDBInput_6";

				int tos_count_tDBInput_6 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_6 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_6 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_6 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_6, talendToDBArray_tDBInput_6);
				int nb_line_tDBInput_6 = 0;
				java.sql.Connection conn_tDBInput_6 = null;
				String driverClass_tDBInput_6 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
				java.lang.Class jdbcclazz_tDBInput_6 = java.lang.Class.forName(driverClass_tDBInput_6);
				String dbUser_tDBInput_6 = context.SQLSERVER_Login;

				final String decryptedPassword_tDBInput_6 = context.SQLSERVER_Password;

				String dbPwd_tDBInput_6 = decryptedPassword_tDBInput_6;

				String port_tDBInput_6 = context.SQLSERVER_Port;
				String dbname_tDBInput_6 = context.SQLSERVER_Database;
				String url_tDBInput_6 = "jdbc:sqlserver://" + context.SQLSERVER_Server;
				if (!"".equals(port_tDBInput_6)) {
					url_tDBInput_6 += ":" + context.SQLSERVER_Port;
				}
				if (!"".equals(dbname_tDBInput_6)) {
					url_tDBInput_6 += ";databaseName=" + context.SQLSERVER_Database;
				}
				url_tDBInput_6 += ";appName=" + projectName + ";" + context.SQLSERVER_AdditionalParams;
				String dbschema_tDBInput_6 = context.SQLSERVER_Schema;

				conn_tDBInput_6 = java.sql.DriverManager.getConnection(url_tDBInput_6, dbUser_tDBInput_6,
						dbPwd_tDBInput_6);

				java.sql.Statement stmt_tDBInput_6 = conn_tDBInput_6.createStatement();

				String dbquery_tDBInput_6 = "select [BRAND]\n      ,[SEASON]\n      ,[CATEGORY]\n      ,[REF]\n      ,[DESCRIPTION]\n      ,[STYLE]\n      ,[COLOR]"
						+ "\n      ,[COLORNAME]\n      ,[STYLE_COLOR]\n      ,[STYLECOLORLABEL]\n      ,[LBL]\n      ,[GENDER]\n      ,[AGE_RANGE]\n"
						+ "      ,[SIZE_RANGE]\n      ,[SIZE]\n      ,[US_SIZE]\n      ,[CM_SIZE]\n      ,[FASHION]\n      ,[PRODUCT]\n      ,[PROD"
						+ "UCT_CHANNEL]\n      ,[PRODUCT_STATUS]\n      ,[PRODUCT_TIER]\n      ,[ACCT_EXCLUS]\n      ,[EUR_RRP]\n      ,[EUR_WSP]\n"
						+ "      ,[GBP_RRP]\n      ,[GBP_WSP]\n      ,[CHF_RRP]\n      ,[CHF_WSP]\n      ,[DKK_RRP]\n      ,[DKK_WSP]\n      ,[NOK_"
						+ "RRP]\n      ,[NOK_WSP]\n      ,[SEK_RRP]\n      ,[SEK_WSP]\n      ,[EUR_FINN_RRP]\n      ,[EUR_FINN_WSP]\n      ,[CARTON"
						+ "_QTY]\n      ,[FABRICATION]\n      ,[COO]\n      ,[CUSTOM_TARIFF_CODE]\n      ,[UPC]\n      ,[EAN]\n      ,[DELIVERYFLOW"
						+ "]\n      ,[SUSTAINABILITY]  from  [masterfile].[Products] where ProductExtractDate is null and  fileName = "
						+ "'" + context.ExcelFileName + "'" + " and CreationDate = " + "'" + context.CreationDate + "'";

				globalMap.put("tDBInput_6_QUERY", dbquery_tDBInput_6);
				java.sql.ResultSet rs_tDBInput_6 = null;

				try {
					rs_tDBInput_6 = stmt_tDBInput_6.executeQuery(dbquery_tDBInput_6);
					java.sql.ResultSetMetaData rsmd_tDBInput_6 = rs_tDBInput_6.getMetaData();
					int colQtyInRs_tDBInput_6 = rsmd_tDBInput_6.getColumnCount();

					String tmpContent_tDBInput_6 = null;

					while (rs_tDBInput_6.next()) {
						nb_line_tDBInput_6++;

						if (colQtyInRs_tDBInput_6 < 1) {
							row1.BRAND = null;
						} else {

							tmpContent_tDBInput_6 = rs_tDBInput_6.getString(1);
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.BRAND = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row1.BRAND = tmpContent_tDBInput_6;
								}
							} else {
								row1.BRAND = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 2) {
							row1.SEASON = null;
						} else {

							tmpContent_tDBInput_6 = rs_tDBInput_6.getString(2);
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.SEASON = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row1.SEASON = tmpContent_tDBInput_6;
								}
							} else {
								row1.SEASON = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 3) {
							row1.CATEGORY = null;
						} else {

							tmpContent_tDBInput_6 = rs_tDBInput_6.getString(3);
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.CATEGORY = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row1.CATEGORY = tmpContent_tDBInput_6;
								}
							} else {
								row1.CATEGORY = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 4) {
							row1.REF = null;
						} else {

							tmpContent_tDBInput_6 = rs_tDBInput_6.getString(4);
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.REF = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row1.REF = tmpContent_tDBInput_6;
								}
							} else {
								row1.REF = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 5) {
							row1.DESCRIPTION = null;
						} else {

							tmpContent_tDBInput_6 = rs_tDBInput_6.getString(5);
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(5).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.DESCRIPTION = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row1.DESCRIPTION = tmpContent_tDBInput_6;
								}
							} else {
								row1.DESCRIPTION = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 6) {
							row1.STYLE = null;
						} else {

							tmpContent_tDBInput_6 = rs_tDBInput_6.getString(6);
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(6).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.STYLE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row1.STYLE = tmpContent_tDBInput_6;
								}
							} else {
								row1.STYLE = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 7) {
							row1.COLOR = null;
						} else {

							tmpContent_tDBInput_6 = rs_tDBInput_6.getString(7);
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(7).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.COLOR = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row1.COLOR = tmpContent_tDBInput_6;
								}
							} else {
								row1.COLOR = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 8) {
							row1.COLORNAME = null;
						} else {

							tmpContent_tDBInput_6 = rs_tDBInput_6.getString(8);
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(8).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.COLORNAME = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row1.COLORNAME = tmpContent_tDBInput_6;
								}
							} else {
								row1.COLORNAME = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 9) {
							row1.STYLE_COLOR = null;
						} else {

							tmpContent_tDBInput_6 = rs_tDBInput_6.getString(9);
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(9).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.STYLE_COLOR = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row1.STYLE_COLOR = tmpContent_tDBInput_6;
								}
							} else {
								row1.STYLE_COLOR = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 10) {
							row1.STYLECOLORLABEL = null;
						} else {

							tmpContent_tDBInput_6 = rs_tDBInput_6.getString(10);
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(10).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.STYLECOLORLABEL = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row1.STYLECOLORLABEL = tmpContent_tDBInput_6;
								}
							} else {
								row1.STYLECOLORLABEL = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 11) {
							row1.LBL = null;
						} else {

							tmpContent_tDBInput_6 = rs_tDBInput_6.getString(11);
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(11).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.LBL = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row1.LBL = tmpContent_tDBInput_6;
								}
							} else {
								row1.LBL = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 12) {
							row1.GENDER = null;
						} else {

							tmpContent_tDBInput_6 = rs_tDBInput_6.getString(12);
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(12).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.GENDER = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row1.GENDER = tmpContent_tDBInput_6;
								}
							} else {
								row1.GENDER = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 13) {
							row1.AGE_RANGE = null;
						} else {

							tmpContent_tDBInput_6 = rs_tDBInput_6.getString(13);
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(13).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.AGE_RANGE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row1.AGE_RANGE = tmpContent_tDBInput_6;
								}
							} else {
								row1.AGE_RANGE = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 14) {
							row1.SIZE_RANGE = null;
						} else {

							tmpContent_tDBInput_6 = rs_tDBInput_6.getString(14);
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(14).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.SIZE_RANGE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row1.SIZE_RANGE = tmpContent_tDBInput_6;
								}
							} else {
								row1.SIZE_RANGE = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 15) {
							row1.SIZE = null;
						} else {

							tmpContent_tDBInput_6 = rs_tDBInput_6.getString(15);
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(15).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.SIZE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row1.SIZE = tmpContent_tDBInput_6;
								}
							} else {
								row1.SIZE = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 16) {
							row1.US_SIZE = null;
						} else {

							tmpContent_tDBInput_6 = rs_tDBInput_6.getString(16);
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(16).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.US_SIZE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row1.US_SIZE = tmpContent_tDBInput_6;
								}
							} else {
								row1.US_SIZE = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 17) {
							row1.CM_SIZE = null;
						} else {

							tmpContent_tDBInput_6 = rs_tDBInput_6.getString(17);
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(17).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.CM_SIZE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row1.CM_SIZE = tmpContent_tDBInput_6;
								}
							} else {
								row1.CM_SIZE = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 18) {
							row1.FASHION = null;
						} else {

							tmpContent_tDBInput_6 = rs_tDBInput_6.getString(18);
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(18).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.FASHION = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row1.FASHION = tmpContent_tDBInput_6;
								}
							} else {
								row1.FASHION = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 19) {
							row1.PRODUCT = null;
						} else {

							tmpContent_tDBInput_6 = rs_tDBInput_6.getString(19);
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(19).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.PRODUCT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row1.PRODUCT = tmpContent_tDBInput_6;
								}
							} else {
								row1.PRODUCT = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 20) {
							row1.PRODUCT_CHANNEL = null;
						} else {

							tmpContent_tDBInput_6 = rs_tDBInput_6.getString(20);
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(20).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.PRODUCT_CHANNEL = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row1.PRODUCT_CHANNEL = tmpContent_tDBInput_6;
								}
							} else {
								row1.PRODUCT_CHANNEL = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 21) {
							row1.PRODUCT_STATUS = null;
						} else {

							tmpContent_tDBInput_6 = rs_tDBInput_6.getString(21);
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(21).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.PRODUCT_STATUS = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row1.PRODUCT_STATUS = tmpContent_tDBInput_6;
								}
							} else {
								row1.PRODUCT_STATUS = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 22) {
							row1.PRODUCT_TIER = null;
						} else {

							tmpContent_tDBInput_6 = rs_tDBInput_6.getString(22);
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(22).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.PRODUCT_TIER = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row1.PRODUCT_TIER = tmpContent_tDBInput_6;
								}
							} else {
								row1.PRODUCT_TIER = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 23) {
							row1.ACCT_EXCLUS = null;
						} else {

							tmpContent_tDBInput_6 = rs_tDBInput_6.getString(23);
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(23).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.ACCT_EXCLUS = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row1.ACCT_EXCLUS = tmpContent_tDBInput_6;
								}
							} else {
								row1.ACCT_EXCLUS = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 24) {
							row1.EUR_RRP = null;
						} else {

							tmpContent_tDBInput_6 = rs_tDBInput_6.getString(24);
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(24).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.EUR_RRP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row1.EUR_RRP = tmpContent_tDBInput_6;
								}
							} else {
								row1.EUR_RRP = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 25) {
							row1.EUR_WSP = null;
						} else {

							tmpContent_tDBInput_6 = rs_tDBInput_6.getString(25);
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(25).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.EUR_WSP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row1.EUR_WSP = tmpContent_tDBInput_6;
								}
							} else {
								row1.EUR_WSP = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 26) {
							row1.GBP_RRP = null;
						} else {

							tmpContent_tDBInput_6 = rs_tDBInput_6.getString(26);
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(26).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.GBP_RRP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row1.GBP_RRP = tmpContent_tDBInput_6;
								}
							} else {
								row1.GBP_RRP = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 27) {
							row1.GBP_WSP = null;
						} else {

							tmpContent_tDBInput_6 = rs_tDBInput_6.getString(27);
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(27).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.GBP_WSP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row1.GBP_WSP = tmpContent_tDBInput_6;
								}
							} else {
								row1.GBP_WSP = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 28) {
							row1.CHF_RRP = null;
						} else {

							tmpContent_tDBInput_6 = rs_tDBInput_6.getString(28);
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(28).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.CHF_RRP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row1.CHF_RRP = tmpContent_tDBInput_6;
								}
							} else {
								row1.CHF_RRP = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 29) {
							row1.CHF_WSP = null;
						} else {

							tmpContent_tDBInput_6 = rs_tDBInput_6.getString(29);
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(29).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.CHF_WSP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row1.CHF_WSP = tmpContent_tDBInput_6;
								}
							} else {
								row1.CHF_WSP = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 30) {
							row1.DKK_RRP = null;
						} else {

							tmpContent_tDBInput_6 = rs_tDBInput_6.getString(30);
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(30).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.DKK_RRP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row1.DKK_RRP = tmpContent_tDBInput_6;
								}
							} else {
								row1.DKK_RRP = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 31) {
							row1.DKK_WSP = null;
						} else {

							tmpContent_tDBInput_6 = rs_tDBInput_6.getString(31);
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(31).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.DKK_WSP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row1.DKK_WSP = tmpContent_tDBInput_6;
								}
							} else {
								row1.DKK_WSP = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 32) {
							row1.NOK_RRP = null;
						} else {

							tmpContent_tDBInput_6 = rs_tDBInput_6.getString(32);
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(32).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.NOK_RRP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row1.NOK_RRP = tmpContent_tDBInput_6;
								}
							} else {
								row1.NOK_RRP = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 33) {
							row1.NOK_WSP = null;
						} else {

							tmpContent_tDBInput_6 = rs_tDBInput_6.getString(33);
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(33).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.NOK_WSP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row1.NOK_WSP = tmpContent_tDBInput_6;
								}
							} else {
								row1.NOK_WSP = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 34) {
							row1.SEK_RRP = null;
						} else {

							tmpContent_tDBInput_6 = rs_tDBInput_6.getString(34);
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(34).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.SEK_RRP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row1.SEK_RRP = tmpContent_tDBInput_6;
								}
							} else {
								row1.SEK_RRP = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 35) {
							row1.SEK_WSP = null;
						} else {

							tmpContent_tDBInput_6 = rs_tDBInput_6.getString(35);
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(35).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.SEK_WSP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row1.SEK_WSP = tmpContent_tDBInput_6;
								}
							} else {
								row1.SEK_WSP = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 36) {
							row1.EUR_FINN_RRP = null;
						} else {

							tmpContent_tDBInput_6 = rs_tDBInput_6.getString(36);
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(36).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.EUR_FINN_RRP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row1.EUR_FINN_RRP = tmpContent_tDBInput_6;
								}
							} else {
								row1.EUR_FINN_RRP = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 37) {
							row1.EUR_FINN_WSP = null;
						} else {

							tmpContent_tDBInput_6 = rs_tDBInput_6.getString(37);
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(37).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.EUR_FINN_WSP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row1.EUR_FINN_WSP = tmpContent_tDBInput_6;
								}
							} else {
								row1.EUR_FINN_WSP = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 38) {
							row1.CARTON_QTY = null;
						} else {

							tmpContent_tDBInput_6 = rs_tDBInput_6.getString(38);
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(38).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.CARTON_QTY = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row1.CARTON_QTY = tmpContent_tDBInput_6;
								}
							} else {
								row1.CARTON_QTY = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 39) {
							row1.FABRICATION = null;
						} else {

							tmpContent_tDBInput_6 = rs_tDBInput_6.getString(39);
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(39).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.FABRICATION = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row1.FABRICATION = tmpContent_tDBInput_6;
								}
							} else {
								row1.FABRICATION = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 40) {
							row1.COO = null;
						} else {

							tmpContent_tDBInput_6 = rs_tDBInput_6.getString(40);
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(40).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.COO = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row1.COO = tmpContent_tDBInput_6;
								}
							} else {
								row1.COO = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 41) {
							row1.CUSTOM_TARIFF_CODE = null;
						} else {

							tmpContent_tDBInput_6 = rs_tDBInput_6.getString(41);
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(41).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.CUSTOM_TARIFF_CODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row1.CUSTOM_TARIFF_CODE = tmpContent_tDBInput_6;
								}
							} else {
								row1.CUSTOM_TARIFF_CODE = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 42) {
							row1.UPC = null;
						} else {

							tmpContent_tDBInput_6 = rs_tDBInput_6.getString(42);
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(42).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.UPC = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row1.UPC = tmpContent_tDBInput_6;
								}
							} else {
								row1.UPC = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 43) {
							row1.EAN = null;
						} else {

							tmpContent_tDBInput_6 = rs_tDBInput_6.getString(43);
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(43).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.EAN = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row1.EAN = tmpContent_tDBInput_6;
								}
							} else {
								row1.EAN = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 44) {
							row1.DELIVERYFLOW = null;
						} else {

							tmpContent_tDBInput_6 = rs_tDBInput_6.getString(44);
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(44).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.DELIVERYFLOW = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row1.DELIVERYFLOW = tmpContent_tDBInput_6;
								}
							} else {
								row1.DELIVERYFLOW = null;
							}
						}
						if (colQtyInRs_tDBInput_6 < 45) {
							row1.SUSTAINABILITY = null;
						} else {

							tmpContent_tDBInput_6 = rs_tDBInput_6.getString(45);
							if (tmpContent_tDBInput_6 != null) {
								if (talendToDBList_tDBInput_6.contains(
										rsmd_tDBInput_6.getColumnTypeName(45).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.SUSTAINABILITY = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
								} else {
									row1.SUSTAINABILITY = tmpContent_tDBInput_6;
								}
							} else {
								row1.SUSTAINABILITY = null;
							}
						}

						/**
						 * [tDBInput_6 begin ] stop
						 */

						/**
						 * [tDBInput_6 main ] start
						 */

						currentComponent = "tDBInput_6";

						tos_count_tDBInput_6++;

						/**
						 * [tDBInput_6 main ] stop
						 */

						/**
						 * [tDBInput_6 process_data_begin ] start
						 */

						currentComponent = "tDBInput_6";

						/**
						 * [tDBInput_6 process_data_begin ] stop
						 */

						/**
						 * [tMap_1 main ] start
						 */

						currentComponent = "tMap_1";

						boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_1 = false;
						boolean mainRowRejected_tMap_1 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
							// ###############################
							// # Output tables

							sortie_Excel1 = null;

// # Output table : 'sortie_Excel1'
							sortie_Excel1_tmp.BRAND = row1.BRAND;
							sortie_Excel1_tmp.SEASON = row1.SEASON;
							sortie_Excel1_tmp.CATEGORY = row1.CATEGORY;
							sortie_Excel1_tmp.REF = row1.REF;
							sortie_Excel1_tmp.DESCRIPTION = row1.DESCRIPTION;
							sortie_Excel1_tmp.STYLE = row1.STYLE;
							sortie_Excel1_tmp.COLOR = row1.COLOR;
							sortie_Excel1_tmp.FASHION = row1.FASHION;
							sortie_Excel1_tmp.STYLECOLORLABEL = row1.STYLECOLORLABEL;
							sortie_Excel1_tmp.COLORNAME = row1.COLORNAME;
							sortie_Excel1_tmp.LBL = row1.LBL;
							sortie_Excel1_tmp.STYLE_COLOR = row1.STYLE_COLOR;
							sortie_Excel1_tmp.GENDER = row1.GENDER;
							sortie_Excel1_tmp.AGE_RANGE = row1.AGE_RANGE;
							sortie_Excel1_tmp.SIZE_RANGE = row1.SIZE_RANGE;
							sortie_Excel1_tmp.SIZE = row1.SIZE;
							sortie_Excel1_tmp.US_SIZE = row1.US_SIZE;
							sortie_Excel1_tmp.CM_SIZE = row1.CM_SIZE;
							sortie_Excel1_tmp.PRODUCT = row1.PRODUCT;
							sortie_Excel1_tmp.PRODUCT_STATUS = row1.PRODUCT_STATUS;
							sortie_Excel1_tmp.PRODUCT_TIER = row1.PRODUCT_TIER;
							sortie_Excel1_tmp.ACCT_EXCLUS = row1.ACCT_EXCLUS;
							sortie_Excel1_tmp.SIZE_RATIO_SPLIT = "";
							sortie_Excel1_tmp.REC_SIZE_SPLIT = "";
							sortie_Excel1_tmp.CARTON_QTY = row1.CARTON_QTY;
							sortie_Excel1_tmp.ATTRIBUTE = "";
							sortie_Excel1_tmp.UNITS = "";
							sortie_Excel1_tmp.EUR_RRP = row1.EUR_RRP;
							sortie_Excel1_tmp.EUR_WSP = row1.EUR_WSP;
							sortie_Excel1_tmp.GBP_RRP = row1.GBP_RRP;
							sortie_Excel1_tmp.GBP_WSP = row1.GBP_WSP;
							sortie_Excel1_tmp.CHF_RRP = row1.CHF_RRP;
							sortie_Excel1_tmp.CHF_WSP = row1.CHF_WSP;
							sortie_Excel1_tmp.NOK_RRP = row1.NOK_RRP;
							sortie_Excel1_tmp.NOK_WSP = row1.NOK_WSP;
							sortie_Excel1_tmp.DKK_RRP = row1.DKK_RRP;
							sortie_Excel1_tmp.DKK_WSP = row1.DKK_WSP;
							sortie_Excel1_tmp.SEK_RRP = row1.SEK_RRP;
							sortie_Excel1_tmp.SEK_WSP = row1.SEK_WSP;
							sortie_Excel1_tmp.EUR_FINN_RRP = row1.EUR_FINN_RRP;
							sortie_Excel1_tmp.EUR_FINN_WSP = row1.EUR_FINN_WSP;
							sortie_Excel1_tmp.FABRICATION = row1.FABRICATION;
							sortie_Excel1_tmp.COO = row1.COO;
							sortie_Excel1_tmp.CUSTOM_TARIFF_CODE = row1.CUSTOM_TARIFF_CODE;
							sortie_Excel1_tmp.UPC = row1.UPC;
							sortie_Excel1_tmp.SMU_TYPE = "";
							sortie_Excel1_tmp.EAN = row1.EAN;
							sortie_Excel1_tmp.PRODUCT_CHANNEL = row1.PRODUCT_CHANNEL;
							sortie_Excel1_tmp.SUSTAINABILITY = row1.SUSTAINABILITY;
							sortie_Excel1_tmp.DELIVERYFLOW = row1.DELIVERYFLOW;
							sortie_Excel1 = sortie_Excel1_tmp;
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_1 = false;

						tos_count_tMap_1++;

						/**
						 * [tMap_1 main ] stop
						 */

						/**
						 * [tMap_1 process_data_begin ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_begin ] stop
						 */
// Start of branch "sortie_Excel1"
						if (sortie_Excel1 != null) {

							/**
							 * [tFilterRow_2 main ] start
							 */

							currentComponent = "tFilterRow_2";

							row7 = null;
							Operator_tFilterRow_2 ope_tFilterRow_2 = new Operator_tFilterRow_2("&&");
							ope_tFilterRow_2.matches(
									(sortie_Excel1.STYLE == null ? false : sortie_Excel1.STYLE.compareTo("") != 0),
									"STYLE.compareTo(\"\") != 0 failed");

							if (ope_tFilterRow_2.getMatchFlag()) {
								if (row7 == null) {
									row7 = new row7Struct();
								}
								row7.BRAND = sortie_Excel1.BRAND;
								row7.SEASON = sortie_Excel1.SEASON;
								row7.CATEGORY = sortie_Excel1.CATEGORY;
								row7.REF = sortie_Excel1.REF;
								row7.DESCRIPTION = sortie_Excel1.DESCRIPTION;
								row7.STYLE = sortie_Excel1.STYLE;
								row7.COLOR = sortie_Excel1.COLOR;
								row7.FASHION = sortie_Excel1.FASHION;
								row7.STYLECOLORLABEL = sortie_Excel1.STYLECOLORLABEL;
								row7.COLORNAME = sortie_Excel1.COLORNAME;
								row7.LBL = sortie_Excel1.LBL;
								row7.STYLE_COLOR = sortie_Excel1.STYLE_COLOR;
								row7.GENDER = sortie_Excel1.GENDER;
								row7.AGE_RANGE = sortie_Excel1.AGE_RANGE;
								row7.SIZE_RANGE = sortie_Excel1.SIZE_RANGE;
								row7.SIZE = sortie_Excel1.SIZE;
								row7.US_SIZE = sortie_Excel1.US_SIZE;
								row7.CM_SIZE = sortie_Excel1.CM_SIZE;
								row7.PRODUCT = sortie_Excel1.PRODUCT;
								row7.PRODUCT_STATUS = sortie_Excel1.PRODUCT_STATUS;
								row7.PRODUCT_TIER = sortie_Excel1.PRODUCT_TIER;
								row7.ACCT_EXCLUS = sortie_Excel1.ACCT_EXCLUS;
								row7.SIZE_RATIO_SPLIT = sortie_Excel1.SIZE_RATIO_SPLIT;
								row7.REC_SIZE_SPLIT = sortie_Excel1.REC_SIZE_SPLIT;
								row7.CARTON_QTY = sortie_Excel1.CARTON_QTY;
								row7.ATTRIBUTE = sortie_Excel1.ATTRIBUTE;
								row7.UNITS = sortie_Excel1.UNITS;
								row7.EUR_RRP = sortie_Excel1.EUR_RRP;
								row7.EUR_WSP = sortie_Excel1.EUR_WSP;
								row7.GBP_RRP = sortie_Excel1.GBP_RRP;
								row7.GBP_WSP = sortie_Excel1.GBP_WSP;
								row7.CHF_RRP = sortie_Excel1.CHF_RRP;
								row7.CHF_WSP = sortie_Excel1.CHF_WSP;
								row7.NOK_RRP = sortie_Excel1.NOK_RRP;
								row7.NOK_WSP = sortie_Excel1.NOK_WSP;
								row7.DKK_RRP = sortie_Excel1.DKK_RRP;
								row7.DKK_WSP = sortie_Excel1.DKK_WSP;
								row7.SEK_RRP = sortie_Excel1.SEK_RRP;
								row7.SEK_WSP = sortie_Excel1.SEK_WSP;
								row7.EUR_FINN_RRP = sortie_Excel1.EUR_FINN_RRP;
								row7.EUR_FINN_WSP = sortie_Excel1.EUR_FINN_WSP;
								row7.FABRICATION = sortie_Excel1.FABRICATION;
								row7.COO = sortie_Excel1.COO;
								row7.CUSTOM_TARIFF_CODE = sortie_Excel1.CUSTOM_TARIFF_CODE;
								row7.UPC = sortie_Excel1.UPC;
								row7.SMU_TYPE = sortie_Excel1.SMU_TYPE;
								row7.EAN = sortie_Excel1.EAN;
								row7.PRODUCT_CHANNEL = sortie_Excel1.PRODUCT_CHANNEL;
								row7.SUSTAINABILITY = sortie_Excel1.SUSTAINABILITY;
								row7.DELIVERYFLOW = sortie_Excel1.DELIVERYFLOW;
								nb_line_ok_tFilterRow_2++;
							} else {
								nb_line_reject_tFilterRow_2++;
							}

							nb_line_tFilterRow_2++;

							tos_count_tFilterRow_2++;

							/**
							 * [tFilterRow_2 main ] stop
							 */

							/**
							 * [tFilterRow_2 process_data_begin ] start
							 */

							currentComponent = "tFilterRow_2";

							/**
							 * [tFilterRow_2 process_data_begin ] stop
							 */
// Start of branch "row7"
							if (row7 != null) {

								/**
								 * [tMap_12 main ] start
								 */

								currentComponent = "tMap_12";

								boolean hasCasePrimitiveKeyWithNull_tMap_12 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_12 = false;
								boolean mainRowRejected_tMap_12 = false;

								///////////////////////////////////////////////
								// Starting Lookup Table "row25"
								///////////////////////////////////////////////

								boolean forceLooprow25 = false;

								row25Struct row25ObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_12) { // G_TM_M_020

									hasCasePrimitiveKeyWithNull_tMap_12 = false;

									row25HashKey.NAME3 = StringHandling
											.TRIM(StringHandling.CHANGE(row7.FASHION, " - ", "-"));

									row25HashKey.hashCodeDirty = true;

									tHash_Lookup_row25.lookup(row25HashKey);

								} // G_TM_M_020

								if (tHash_Lookup_row25 != null && tHash_Lookup_row25.getCount(row25HashKey) > 1) { // G
																													// 071

									// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
									// 'row25' and it contains more one result from keys : row25.NAME3 = '" +
									// row25HashKey.NAME3 + "'");
								} // G 071

								row25Struct row25 = null;

								row25Struct fromLookup_row25 = null;
								row25 = row25Default;

								if (tHash_Lookup_row25 != null && tHash_Lookup_row25.hasNext()) { // G 099

									fromLookup_row25 = tHash_Lookup_row25.next();

								} // G 099

								if (fromLookup_row25 != null) {
									row25 = fromLookup_row25;
								}

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_12__Struct Var = Var__tMap_12;// ###############################
									// ###############################
									// # Output tables

									sortie = null;

// # Output table : 'sortie'
									sortie_tmp.BRAND = row7.BRAND.replaceAll(" ", " ");
									sortie_tmp.SEASON = row7.SEASON.replaceAll(" ", " ");
									sortie_tmp.CATEGORY = row7.CATEGORY;
									sortie_tmp.REF = row7.REF.replaceAll(" ", " ");
									sortie_tmp.DESCRIPTION = row7.DESCRIPTION.replaceAll(" ", " ");
									sortie_tmp.STYLE = row7.STYLE.replaceAll(" ", " ");
									sortie_tmp.COLOR = row7.COLOR.replaceAll(" ", " ");
									sortie_tmp.FASHION = StringHandling
											.TRIM(StringHandling.CHANGE(row7.FASHION, " - ", "-")).replaceAll(" ", " ");
									sortie_tmp.STYLECOLORLABEL = row7.STYLECOLORLABEL.replaceAll(" ", " ");
									sortie_tmp.COLORNAME = row7.COLORNAME.replaceAll(" ", " ");
									sortie_tmp.LBL = row7.LBL.replaceAll(" ", " ");
									sortie_tmp.STYLE_COLOR = row7.STYLE_COLOR.replaceAll(" ", " ");
									sortie_tmp.GENDER = row7.GENDER.replaceAll(" ", " ");
									sortie_tmp.AGE_RANGE = row7.AGE_RANGE.replaceAll(" ", " ");
									sortie_tmp.SIZE_RANGE = row7.SIZE_RANGE.replaceAll(" ", " ");
									sortie_tmp.SIZE = row7.SIZE.replaceAll(" ", " ");
									sortie_tmp.US_SIZE = row7.US_SIZE;
									sortie_tmp.CM_SIZE = row7.CM_SIZE;
									sortie_tmp.PRODUCT = StringHandling
											.TRIM(StringHandling.CHANGE(row7.PRODUCT, " - ", "-")).replaceAll(" ", " ");
									sortie_tmp.PRODUCT_STATUS = row7.PRODUCT_STATUS.replaceAll(" ", " ");
									sortie_tmp.PRODUCT_TIER = row7.PRODUCT_TIER;
									sortie_tmp.ACCT_EXCLUS = row7.ACCT_EXCLUS;
									sortie_tmp.SIZE_RATIO_SPLIT = row7.SIZE_RATIO_SPLIT;
									sortie_tmp.REC_SIZE_SPLIT = row7.REC_SIZE_SPLIT;
									sortie_tmp.CARTON_QTY = row7.CARTON_QTY;
									sortie_tmp.ATTRIBUTE = row7.ATTRIBUTE;
									sortie_tmp.UNITS = row7.UNITS;
									sortie_tmp.EUR_RRP = row7.EUR_RRP;
									sortie_tmp.EUR_WSP = row7.EUR_WSP;
									sortie_tmp.GBP_RRP = row7.GBP_RRP;
									sortie_tmp.GBP_WSP = row7.GBP_WSP;
									sortie_tmp.CHF_RRP = row7.CHF_RRP;
									sortie_tmp.CHF_WSP = row7.CHF_WSP;
									sortie_tmp.NOK_RRP = row7.NOK_RRP;
									sortie_tmp.NOK_WSP = row7.NOK_WSP;
									sortie_tmp.DKK_RRP = row7.DKK_RRP;
									sortie_tmp.DKK_WSP = row7.DKK_WSP;
									sortie_tmp.SEK_RRP = row7.SEK_RRP;
									sortie_tmp.SEK_WSP = row7.SEK_WSP;
									sortie_tmp.EUR_FINN_RRP = row7.EUR_FINN_RRP;
									sortie_tmp.EUR_FINN_WSP = row7.EUR_FINN_WSP;
									sortie_tmp.FABRICATION = row7.FABRICATION;
									sortie_tmp.COO = row7.COO;
									sortie_tmp.CUSTOM_TARIFF_CODE = row7.CUSTOM_TARIFF_CODE;
									sortie_tmp.UPC = row7.UPC;
									sortie_tmp.SMU_TYPE = row7.SMU_TYPE;
									sortie_tmp.DELIVERYFLOW = row7.DELIVERYFLOW;
									sortie_tmp.FASHIONCODED365 = row25.CATEGORYCODE;
									sortie = sortie_tmp;
// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_12 = false;

								tos_count_tMap_12++;

								/**
								 * [tMap_12 main ] stop
								 */

								/**
								 * [tMap_12 process_data_begin ] start
								 */

								currentComponent = "tMap_12";

								/**
								 * [tMap_12 process_data_begin ] stop
								 */
// Start of branch "sortie"
								if (sortie != null) {

									/**
									 * [tMap_7 main ] start
									 */

									currentComponent = "tMap_7";

									boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;

									// ###############################
									// # Input tables (lookups)
									boolean rejectedInnerJoin_tMap_7 = false;
									boolean mainRowRejected_tMap_7 = false;

									///////////////////////////////////////////////
									// Starting Lookup Table "copyOfcopyOfsortie_fashion"
									///////////////////////////////////////////////

									boolean forceLoopcopyOfcopyOfsortie_fashion = false;

									copyOfcopyOfsortie_fashionStruct copyOfcopyOfsortie_fashionObjectFromLookup = null;

									if (!rejectedInnerJoin_tMap_7) { // G_TM_M_020

										hasCasePrimitiveKeyWithNull_tMap_7 = false;

										copyOfcopyOfsortie_fashionHashKey.CODE = StringHandling.DOWNCASE(sortie.LBL);

										copyOfcopyOfsortie_fashionHashKey.hashCodeDirty = true;

										tHash_Lookup_copyOfcopyOfsortie_fashion
												.lookup(copyOfcopyOfsortie_fashionHashKey);

									} // G_TM_M_020

									if (tHash_Lookup_copyOfcopyOfsortie_fashion != null
											&& tHash_Lookup_copyOfcopyOfsortie_fashion
													.getCount(copyOfcopyOfsortie_fashionHashKey) > 1) { // G 071

										// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
										// 'copyOfcopyOfsortie_fashion' and it contains more one result from keys :
										// copyOfcopyOfsortie_fashion.CODE = '" + copyOfcopyOfsortie_fashionHashKey.CODE
										// + "'");
									} // G 071

									copyOfcopyOfsortie_fashionStruct copyOfcopyOfsortie_fashion = null;

									copyOfcopyOfsortie_fashionStruct fromLookup_copyOfcopyOfsortie_fashion = null;
									copyOfcopyOfsortie_fashion = copyOfcopyOfsortie_fashionDefault;

									if (tHash_Lookup_copyOfcopyOfsortie_fashion != null
											&& tHash_Lookup_copyOfcopyOfsortie_fashion.hasNext()) { // G 099

										fromLookup_copyOfcopyOfsortie_fashion = tHash_Lookup_copyOfcopyOfsortie_fashion
												.next();

									} // G 099

									if (fromLookup_copyOfcopyOfsortie_fashion != null) {
										copyOfcopyOfsortie_fashion = fromLookup_copyOfcopyOfsortie_fashion;
									}

									///////////////////////////////////////////////
									// Starting Lookup Table "row18"
									///////////////////////////////////////////////

									boolean forceLooprow18 = false;

									row18Struct row18ObjectFromLookup = null;

									if (!rejectedInnerJoin_tMap_7) { // G_TM_M_020

										hasCasePrimitiveKeyWithNull_tMap_7 = false;

										row18HashKey.NAME3 = StringHandling.TRIM(sortie.FASHION);

										row18HashKey.hashCodeDirty = true;

										tHash_Lookup_row18.lookup(row18HashKey);

									} // G_TM_M_020

									if (tHash_Lookup_row18 != null && tHash_Lookup_row18.getCount(row18HashKey) > 1) { // G
																														// 071

										// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
										// 'row18' and it contains more one result from keys : row18.NAME3 = '" +
										// row18HashKey.NAME3 + "'");
									} // G 071

									row18Struct row18 = null;

									row18Struct fromLookup_row18 = null;
									row18 = row18Default;

									if (tHash_Lookup_row18 != null && tHash_Lookup_row18.hasNext()) { // G 099

										fromLookup_row18 = tHash_Lookup_row18.next();

									} // G 099

									if (fromLookup_row18 != null) {
										row18 = fromLookup_row18;
									}

									///////////////////////////////////////////////
									// Starting Lookup Table "row19"
									///////////////////////////////////////////////

									boolean forceLooprow19 = false;

									row19Struct row19ObjectFromLookup = null;

									if (!rejectedInnerJoin_tMap_7) { // G_TM_M_020

										hasCasePrimitiveKeyWithNull_tMap_7 = false;

										row19HashKey.NAME3 = StringHandling.TRIM(sortie.PRODUCT);

										row19HashKey.PARENTCODE = sortie.FASHIONCODED365;

										row19HashKey.hashCodeDirty = true;

										tHash_Lookup_row19.lookup(row19HashKey);

									} // G_TM_M_020

									if (tHash_Lookup_row19 != null && tHash_Lookup_row19.getCount(row19HashKey) > 1) { // G
																														// 071

										// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
										// 'row19' and it contains more one result from keys : row19.NAME3 = '" +
										// row19HashKey.NAME3 + "', row19.PARENTCODE = '" + row19HashKey.PARENTCODE +
										// "'");
									} // G 071

									row19Struct row19 = null;

									row19Struct fromLookup_row19 = null;
									row19 = row19Default;

									if (tHash_Lookup_row19 != null && tHash_Lookup_row19.hasNext()) { // G 099

										fromLookup_row19 = tHash_Lookup_row19.next();

									} // G 099

									if (fromLookup_row19 != null) {
										row19 = fromLookup_row19;
									}

									// ###############################
									{ // start of Var scope

										// ###############################
										// # Vars tables

										Var__tMap_7__Struct Var = Var__tMap_7;// ###############################
										// ###############################
										// # Output tables

										sortie_Excel = null;

// # Output table : 'sortie_Excel'
										sortie_Excel_tmp.BRAND = sortie.BRAND;
										sortie_Excel_tmp.SEASON = sortie.SEASON;
										sortie_Excel_tmp.CATEGORY = sortie.CATEGORY;
										sortie_Excel_tmp.REF = sortie.REF;
										sortie_Excel_tmp.DESCRIPTION = sortie.DESCRIPTION;
										sortie_Excel_tmp.STYLE = sortie.STYLE;
										sortie_Excel_tmp.COLOR = sortie.COLOR;
										sortie_Excel_tmp.FASHION = sortie.FASHION;
										sortie_Excel_tmp.STYLECOLORLABEL = sortie.STYLECOLORLABEL;
										sortie_Excel_tmp.COLORNAME = sortie.COLORNAME;
										sortie_Excel_tmp.LBL = sortie.LBL;
										sortie_Excel_tmp.STYLE_COLOR = sortie.STYLE_COLOR;
										sortie_Excel_tmp.GENDER = sortie.GENDER;
										sortie_Excel_tmp.AGE_RANGE = sortie.AGE_RANGE;
										sortie_Excel_tmp.SIZE_RANGE = sortie.SIZE_RANGE;
										sortie_Excel_tmp.SIZE = sortie.SIZE;
										sortie_Excel_tmp.US_SIZE = sortie.US_SIZE;
										sortie_Excel_tmp.CM_SIZE = sortie.CM_SIZE;
										sortie_Excel_tmp.PRODUCT = sortie.PRODUCT;
										sortie_Excel_tmp.PRODUCT_STATUS = sortie.PRODUCT_STATUS;
										sortie_Excel_tmp.PRODUCT_TIER = sortie.PRODUCT_TIER;
										sortie_Excel_tmp.ACCT_EXCLUS = sortie.ACCT_EXCLUS;
										sortie_Excel_tmp.SIZE_RATIO_SPLIT = sortie.SIZE_RATIO_SPLIT;
										sortie_Excel_tmp.REC_SIZE_SPLIT = sortie.REC_SIZE_SPLIT;
										sortie_Excel_tmp.CARTON_QTY = sortie.CARTON_QTY;
										sortie_Excel_tmp.ATTRIBUTE = sortie.ATTRIBUTE;
										sortie_Excel_tmp.UNITS = sortie.UNITS;
										sortie_Excel_tmp.EUR_RRP = sortie.EUR_RRP;
										sortie_Excel_tmp.EUR_WSP = sortie.EUR_WSP;
										sortie_Excel_tmp.GBP_RRP = sortie.GBP_RRP;
										sortie_Excel_tmp.GBP_WSP = sortie.GBP_WSP;
										sortie_Excel_tmp.CHF_RRP = sortie.CHF_RRP;
										sortie_Excel_tmp.CHF_WSP = sortie.CHF_WSP;
										sortie_Excel_tmp.NOK_RRP = sortie.NOK_RRP;
										sortie_Excel_tmp.NOK_WSP = sortie.NOK_WSP;
										sortie_Excel_tmp.DKK_RRP = sortie.DKK_RRP;
										sortie_Excel_tmp.DKK_WSP = sortie.DKK_WSP;
										sortie_Excel_tmp.SEK_RRP = sortie.SEK_RRP;
										sortie_Excel_tmp.SEK_WSP = sortie.SEK_WSP;
										sortie_Excel_tmp.EUR_FINN_RRP = sortie.EUR_FINN_RRP;
										sortie_Excel_tmp.EUR_FINN_WSP = sortie.EUR_FINN_WSP;
										sortie_Excel_tmp.FABRICATION = sortie.FABRICATION;
										sortie_Excel_tmp.COO = sortie.COO;
										sortie_Excel_tmp.CUSTOM_TARIFF_CODE = sortie.CUSTOM_TARIFF_CODE;
										sortie_Excel_tmp.UPC = sortie.UPC;
										sortie_Excel_tmp.SMU_TYPE = sortie.SMU_TYPE;
										sortie_Excel_tmp.LABELD365 = copyOfcopyOfsortie_fashion.LABEL;
										sortie_Excel_tmp.LABELNAMED365 = copyOfcopyOfsortie_fashion.NAME;
										sortie_Excel_tmp.FASHIOND365 = row18.NAME;
										sortie_Excel_tmp.PRODUCTD365 = row19.NAME;
										sortie_Excel_tmp.DELIVERYFLOW = sortie.DELIVERYFLOW;
										sortie_Excel = sortie_Excel_tmp;
// ###############################

									} // end of Var scope

									rejectedInnerJoin_tMap_7 = false;

									tos_count_tMap_7++;

									/**
									 * [tMap_7 main ] stop
									 */

									/**
									 * [tMap_7 process_data_begin ] start
									 */

									currentComponent = "tMap_7";

									/**
									 * [tMap_7 process_data_begin ] stop
									 */
// Start of branch "sortie_Excel"
									if (sortie_Excel != null) {

										/**
										 * [tMap_2 main ] start
										 */

										currentComponent = "tMap_2";

										boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

										// ###############################
										// # Input tables (lookups)
										boolean rejectedInnerJoin_tMap_2 = false;
										boolean mainRowRejected_tMap_2 = false;

										// ###############################
										{ // start of Var scope

											// ###############################
											// # Vars tables

											Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
											// ###############################
											// # Output tables

											sortie_full_cat = null;

// # Output table : 'sortie_full_cat'
											sortie_full_cat_tmp.BRAND = sortie_Excel.BRAND;
											sortie_full_cat_tmp.SEASON = sortie_Excel.SEASON;
											sortie_full_cat_tmp.CATEGORY = sortie_Excel.CATEGORY;
											sortie_full_cat_tmp.REF = sortie_Excel.REF;
											sortie_full_cat_tmp.DESCRIPTION = sortie_Excel.DESCRIPTION;
											sortie_full_cat_tmp.STYLE = sortie_Excel.STYLE;
											sortie_full_cat_tmp.COLOR = sortie_Excel.COLOR;
											sortie_full_cat_tmp.FASHION = sortie_Excel.FASHION;
											sortie_full_cat_tmp.STYLECOLORLABEL = sortie_Excel.STYLECOLORLABEL;
											sortie_full_cat_tmp.COLORNAME = sortie_Excel.COLORNAME;
											sortie_full_cat_tmp.LBL = sortie_Excel.LBL;
											sortie_full_cat_tmp.STYLE_COLOR = sortie_Excel.STYLE_COLOR;
											sortie_full_cat_tmp.GENDER = sortie_Excel.GENDER;
											sortie_full_cat_tmp.AGE_RANGE = sortie_Excel.AGE_RANGE;
											sortie_full_cat_tmp.SIZE_RANGE = sortie_Excel.SIZE_RANGE;
											sortie_full_cat_tmp.SIZE = sortie_Excel.SIZE;
											sortie_full_cat_tmp.US_SIZE = sortie_Excel.US_SIZE;
											sortie_full_cat_tmp.CM_SIZE = sortie_Excel.CM_SIZE;
											sortie_full_cat_tmp.PRODUCT = sortie_Excel.PRODUCT;
											sortie_full_cat_tmp.PRODUCT_STATUS = sortie_Excel.PRODUCT_STATUS;
											sortie_full_cat_tmp.PRODUCT_TIER = sortie_Excel.PRODUCT_TIER;
											sortie_full_cat_tmp.ACCT_EXCLUS = sortie_Excel.ACCT_EXCLUS;
											sortie_full_cat_tmp.SIZE_RATIO_SPLIT = sortie_Excel.SIZE_RATIO_SPLIT;
											sortie_full_cat_tmp.REC_SIZE_SPLIT = sortie_Excel.REC_SIZE_SPLIT;
											sortie_full_cat_tmp.CARTON_QTY = sortie_Excel.CARTON_QTY;
											sortie_full_cat_tmp.ATTRIBUTE = sortie_Excel.ATTRIBUTE;
											sortie_full_cat_tmp.UNITS = sortie_Excel.UNITS;
											sortie_full_cat_tmp.EUR_RRP = sortie_Excel.EUR_RRP;
											sortie_full_cat_tmp.EUR_WSP = sortie_Excel.EUR_WSP;
											sortie_full_cat_tmp.GBP_RRP = sortie_Excel.GBP_RRP;
											sortie_full_cat_tmp.GBP_WSP = sortie_Excel.GBP_WSP;
											sortie_full_cat_tmp.CHF_RRP = sortie_Excel.CHF_RRP;
											sortie_full_cat_tmp.CHF_WSP = sortie_Excel.CHF_WSP;
											sortie_full_cat_tmp.NOK_RRP = sortie_Excel.NOK_RRP;
											sortie_full_cat_tmp.NOK_WSP = sortie_Excel.NOK_WSP;
											sortie_full_cat_tmp.DKK_RRP = sortie_Excel.DKK_RRP;
											sortie_full_cat_tmp.DKK_WSP = sortie_Excel.DKK_WSP;
											sortie_full_cat_tmp.SEK_RRP = sortie_Excel.SEK_RRP;
											sortie_full_cat_tmp.SEK_WSP = sortie_Excel.SEK_WSP;
											sortie_full_cat_tmp.EUR_FINN_RRP = sortie_Excel.EUR_FINN_RRP;
											sortie_full_cat_tmp.EUR_FINN_WSP = sortie_Excel.EUR_FINN_WSP;
											sortie_full_cat_tmp.FABRICATION = sortie_Excel.FABRICATION;
											sortie_full_cat_tmp.COO = sortie_Excel.COO;
											sortie_full_cat_tmp.CUSTOM_TARIFF_CODE = sortie_Excel.CUSTOM_TARIFF_CODE;
											sortie_full_cat_tmp.UPC = sortie_Excel.UPC;
											sortie_full_cat_tmp.SMU_TYPE = sortie_Excel.SMU_TYPE;
											sortie_full_cat_tmp.LABELD365 = sortie_Excel.LABELD365;
											sortie_full_cat_tmp.LABELNAMED365 = sortie_Excel.LABELNAMED365;
											sortie_full_cat_tmp.FASHIOND365 = sortie_Excel.FASHIOND365;
											sortie_full_cat_tmp.PRODUCTD365 = sortie_Excel.PRODUCTD365;
											sortie_full_cat_tmp.DELIVERYFLOW = sortie_Excel.DELIVERYFLOW;
											sortie_full_cat = sortie_full_cat_tmp;
// ###############################

										} // end of Var scope

										rejectedInnerJoin_tMap_2 = false;

										tos_count_tMap_2++;

										/**
										 * [tMap_2 main ] stop
										 */

										/**
										 * [tMap_2 process_data_begin ] start
										 */

										currentComponent = "tMap_2";

										/**
										 * [tMap_2 process_data_begin ] stop
										 */
// Start of branch "sortie_full_cat"
										if (sortie_full_cat != null) {

											/**
											 * [tLogRow_2 main ] start
											 */

											currentComponent = "tLogRow_2";

///////////////////////		

											strBuffer_tLogRow_2 = new StringBuilder();

											if (sortie_full_cat.BRAND != null) { //

												strBuffer_tLogRow_2.append(String.valueOf(sortie_full_cat.BRAND));

											} //

											strBuffer_tLogRow_2.append("|");

											if (sortie_full_cat.SEASON != null) { //

												strBuffer_tLogRow_2.append(String.valueOf(sortie_full_cat.SEASON));

											} //

											strBuffer_tLogRow_2.append("|");

											if (sortie_full_cat.CATEGORY != null) { //

												strBuffer_tLogRow_2.append(String.valueOf(sortie_full_cat.CATEGORY));

											} //

											strBuffer_tLogRow_2.append("|");

											if (sortie_full_cat.REF != null) { //

												strBuffer_tLogRow_2.append(String.valueOf(sortie_full_cat.REF));

											} //

											strBuffer_tLogRow_2.append("|");

											if (sortie_full_cat.DESCRIPTION != null) { //

												strBuffer_tLogRow_2.append(String.valueOf(sortie_full_cat.DESCRIPTION));

											} //

											strBuffer_tLogRow_2.append("|");

											if (sortie_full_cat.STYLE != null) { //

												strBuffer_tLogRow_2.append(String.valueOf(sortie_full_cat.STYLE));

											} //

											strBuffer_tLogRow_2.append("|");

											if (sortie_full_cat.COLOR != null) { //

												strBuffer_tLogRow_2.append(String.valueOf(sortie_full_cat.COLOR));

											} //

											strBuffer_tLogRow_2.append("|");

											if (sortie_full_cat.FASHION != null) { //

												strBuffer_tLogRow_2.append(String.valueOf(sortie_full_cat.FASHION));

											} //

											strBuffer_tLogRow_2.append("|");

											if (sortie_full_cat.STYLECOLORLABEL != null) { //

												strBuffer_tLogRow_2
														.append(String.valueOf(sortie_full_cat.STYLECOLORLABEL));

											} //

											strBuffer_tLogRow_2.append("|");

											if (sortie_full_cat.COLORNAME != null) { //

												strBuffer_tLogRow_2.append(String.valueOf(sortie_full_cat.COLORNAME));

											} //

											strBuffer_tLogRow_2.append("|");

											if (sortie_full_cat.LBL != null) { //

												strBuffer_tLogRow_2.append(String.valueOf(sortie_full_cat.LBL));

											} //

											strBuffer_tLogRow_2.append("|");

											if (sortie_full_cat.STYLE_COLOR != null) { //

												strBuffer_tLogRow_2.append(String.valueOf(sortie_full_cat.STYLE_COLOR));

											} //

											strBuffer_tLogRow_2.append("|");

											if (sortie_full_cat.GENDER != null) { //

												strBuffer_tLogRow_2.append(String.valueOf(sortie_full_cat.GENDER));

											} //

											strBuffer_tLogRow_2.append("|");

											if (sortie_full_cat.AGE_RANGE != null) { //

												strBuffer_tLogRow_2.append(String.valueOf(sortie_full_cat.AGE_RANGE));

											} //

											strBuffer_tLogRow_2.append("|");

											if (sortie_full_cat.SIZE_RANGE != null) { //

												strBuffer_tLogRow_2.append(String.valueOf(sortie_full_cat.SIZE_RANGE));

											} //

											strBuffer_tLogRow_2.append("|");

											if (sortie_full_cat.SIZE != null) { //

												strBuffer_tLogRow_2.append(String.valueOf(sortie_full_cat.SIZE));

											} //

											strBuffer_tLogRow_2.append("|");

											if (sortie_full_cat.US_SIZE != null) { //

												strBuffer_tLogRow_2.append(String.valueOf(sortie_full_cat.US_SIZE));

											} //

											strBuffer_tLogRow_2.append("|");

											if (sortie_full_cat.CM_SIZE != null) { //

												strBuffer_tLogRow_2.append(String.valueOf(sortie_full_cat.CM_SIZE));

											} //

											strBuffer_tLogRow_2.append("|");

											if (sortie_full_cat.PRODUCT != null) { //

												strBuffer_tLogRow_2.append(String.valueOf(sortie_full_cat.PRODUCT));

											} //

											strBuffer_tLogRow_2.append("|");

											if (sortie_full_cat.PRODUCT_STATUS != null) { //

												strBuffer_tLogRow_2
														.append(String.valueOf(sortie_full_cat.PRODUCT_STATUS));

											} //

											strBuffer_tLogRow_2.append("|");

											if (sortie_full_cat.PRODUCT_TIER != null) { //

												strBuffer_tLogRow_2
														.append(String.valueOf(sortie_full_cat.PRODUCT_TIER));

											} //

											strBuffer_tLogRow_2.append("|");

											if (sortie_full_cat.ACCT_EXCLUS != null) { //

												strBuffer_tLogRow_2.append(String.valueOf(sortie_full_cat.ACCT_EXCLUS));

											} //

											strBuffer_tLogRow_2.append("|");

											if (sortie_full_cat.SIZE_RATIO_SPLIT != null) { //

												strBuffer_tLogRow_2
														.append(String.valueOf(sortie_full_cat.SIZE_RATIO_SPLIT));

											} //

											strBuffer_tLogRow_2.append("|");

											if (sortie_full_cat.REC_SIZE_SPLIT != null) { //

												strBuffer_tLogRow_2
														.append(String.valueOf(sortie_full_cat.REC_SIZE_SPLIT));

											} //

											strBuffer_tLogRow_2.append("|");

											if (sortie_full_cat.CARTON_QTY != null) { //

												strBuffer_tLogRow_2.append(String.valueOf(sortie_full_cat.CARTON_QTY));

											} //

											strBuffer_tLogRow_2.append("|");

											if (sortie_full_cat.ATTRIBUTE != null) { //

												strBuffer_tLogRow_2.append(String.valueOf(sortie_full_cat.ATTRIBUTE));

											} //

											strBuffer_tLogRow_2.append("|");

											if (sortie_full_cat.UNITS != null) { //

												strBuffer_tLogRow_2.append(String.valueOf(sortie_full_cat.UNITS));

											} //

											strBuffer_tLogRow_2.append("|");

											if (sortie_full_cat.EUR_RRP != null) { //

												strBuffer_tLogRow_2.append(String.valueOf(sortie_full_cat.EUR_RRP));

											} //

											strBuffer_tLogRow_2.append("|");

											if (sortie_full_cat.EUR_WSP != null) { //

												strBuffer_tLogRow_2.append(String.valueOf(sortie_full_cat.EUR_WSP));

											} //

											strBuffer_tLogRow_2.append("|");

											if (sortie_full_cat.GBP_RRP != null) { //

												strBuffer_tLogRow_2.append(String.valueOf(sortie_full_cat.GBP_RRP));

											} //

											strBuffer_tLogRow_2.append("|");

											if (sortie_full_cat.GBP_WSP != null) { //

												strBuffer_tLogRow_2.append(String.valueOf(sortie_full_cat.GBP_WSP));

											} //

											strBuffer_tLogRow_2.append("|");

											if (sortie_full_cat.CHF_RRP != null) { //

												strBuffer_tLogRow_2.append(String.valueOf(sortie_full_cat.CHF_RRP));

											} //

											strBuffer_tLogRow_2.append("|");

											if (sortie_full_cat.CHF_WSP != null) { //

												strBuffer_tLogRow_2.append(String.valueOf(sortie_full_cat.CHF_WSP));

											} //

											strBuffer_tLogRow_2.append("|");

											if (sortie_full_cat.NOK_RRP != null) { //

												strBuffer_tLogRow_2.append(String.valueOf(sortie_full_cat.NOK_RRP));

											} //

											strBuffer_tLogRow_2.append("|");

											if (sortie_full_cat.NOK_WSP != null) { //

												strBuffer_tLogRow_2.append(String.valueOf(sortie_full_cat.NOK_WSP));

											} //

											strBuffer_tLogRow_2.append("|");

											if (sortie_full_cat.DKK_RRP != null) { //

												strBuffer_tLogRow_2.append(String.valueOf(sortie_full_cat.DKK_RRP));

											} //

											strBuffer_tLogRow_2.append("|");

											if (sortie_full_cat.DKK_WSP != null) { //

												strBuffer_tLogRow_2.append(String.valueOf(sortie_full_cat.DKK_WSP));

											} //

											strBuffer_tLogRow_2.append("|");

											if (sortie_full_cat.SEK_RRP != null) { //

												strBuffer_tLogRow_2.append(String.valueOf(sortie_full_cat.SEK_RRP));

											} //

											strBuffer_tLogRow_2.append("|");

											if (sortie_full_cat.SEK_WSP != null) { //

												strBuffer_tLogRow_2.append(String.valueOf(sortie_full_cat.SEK_WSP));

											} //

											strBuffer_tLogRow_2.append("|");

											if (sortie_full_cat.EUR_FINN_RRP != null) { //

												strBuffer_tLogRow_2
														.append(String.valueOf(sortie_full_cat.EUR_FINN_RRP));

											} //

											strBuffer_tLogRow_2.append("|");

											if (sortie_full_cat.EUR_FINN_WSP != null) { //

												strBuffer_tLogRow_2
														.append(String.valueOf(sortie_full_cat.EUR_FINN_WSP));

											} //

											strBuffer_tLogRow_2.append("|");

											if (sortie_full_cat.FABRICATION != null) { //

												strBuffer_tLogRow_2.append(String.valueOf(sortie_full_cat.FABRICATION));

											} //

											strBuffer_tLogRow_2.append("|");

											if (sortie_full_cat.COO != null) { //

												strBuffer_tLogRow_2.append(String.valueOf(sortie_full_cat.COO));

											} //

											strBuffer_tLogRow_2.append("|");

											if (sortie_full_cat.CUSTOM_TARIFF_CODE != null) { //

												strBuffer_tLogRow_2
														.append(String.valueOf(sortie_full_cat.CUSTOM_TARIFF_CODE));

											} //

											strBuffer_tLogRow_2.append("|");

											if (sortie_full_cat.UPC != null) { //

												strBuffer_tLogRow_2.append(String.valueOf(sortie_full_cat.UPC));

											} //

											strBuffer_tLogRow_2.append("|");

											if (sortie_full_cat.SMU_TYPE != null) { //

												strBuffer_tLogRow_2.append(String.valueOf(sortie_full_cat.SMU_TYPE));

											} //

											strBuffer_tLogRow_2.append("|");

											if (sortie_full_cat.LABELD365 != null) { //

												strBuffer_tLogRow_2.append(String.valueOf(sortie_full_cat.LABELD365));

											} //

											strBuffer_tLogRow_2.append("|");

											if (sortie_full_cat.LABELNAMED365 != null) { //

												strBuffer_tLogRow_2
														.append(String.valueOf(sortie_full_cat.LABELNAMED365));

											} //

											strBuffer_tLogRow_2.append("|");

											if (sortie_full_cat.FASHIOND365 != null) { //

												strBuffer_tLogRow_2.append(String.valueOf(sortie_full_cat.FASHIOND365));

											} //

											strBuffer_tLogRow_2.append("|");

											if (sortie_full_cat.PRODUCTD365 != null) { //

												strBuffer_tLogRow_2.append(String.valueOf(sortie_full_cat.PRODUCTD365));

											} //

											strBuffer_tLogRow_2.append("|");

											if (sortie_full_cat.DELIVERYFLOW != null) { //

												strBuffer_tLogRow_2
														.append(String.valueOf(sortie_full_cat.DELIVERYFLOW));

											} //

											if (globalMap.get("tLogRow_CONSOLE") != null) {
												consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap
														.get("tLogRow_CONSOLE");
											} else {
												consoleOut_tLogRow_2 = new java.io.PrintStream(
														new java.io.BufferedOutputStream(System.out));
												globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_2);
											}
											consoleOut_tLogRow_2.println(strBuffer_tLogRow_2.toString());
											consoleOut_tLogRow_2.flush();
											nb_line_tLogRow_2++;
//////

//////                    

///////////////////////    			

											row6 = sortie_full_cat;

											tos_count_tLogRow_2++;

											/**
											 * [tLogRow_2 main ] stop
											 */

											/**
											 * [tLogRow_2 process_data_begin ] start
											 */

											currentComponent = "tLogRow_2";

											/**
											 * [tLogRow_2 process_data_begin ] stop
											 */

											/**
											 * [tMap_3 main ] start
											 */

											currentComponent = "tMap_3";

											boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

											// ###############################
											// # Input tables (lookups)
											boolean rejectedInnerJoin_tMap_3 = false;
											boolean mainRowRejected_tMap_3 = false;

											// ###############################
											{ // start of Var scope

												// ###############################
												// # Vars tables

												Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
												// ###############################
												// # Output tables

												copyOfsortie_full_2 = null;
												copyOfsortie_product = null;

// # Output table : 'copyOfsortie_full_2'
												copyOfsortie_full_2_tmp.BRAND = row6.BRAND;
												copyOfsortie_full_2_tmp.SEASON = row6.SEASON;
												copyOfsortie_full_2_tmp.CATEGORY = row6.CATEGORY;
												copyOfsortie_full_2_tmp.REF = row6.REF;
												copyOfsortie_full_2_tmp.DESCRIPTION = row6.DESCRIPTION;
												copyOfsortie_full_2_tmp.STYLE = row6.STYLE;
												copyOfsortie_full_2_tmp.COLOR = row6.COLOR;
												copyOfsortie_full_2_tmp.FASHION = row6.FASHION;
												copyOfsortie_full_2_tmp.STYLECOLORLABEL = row6.STYLECOLORLABEL;
												copyOfsortie_full_2_tmp.COLORNAME = row6.COLORNAME;
												copyOfsortie_full_2_tmp.LBL = row6.LBL;
												copyOfsortie_full_2_tmp.STYLE_COLOR = row6.STYLE_COLOR;
												copyOfsortie_full_2_tmp.GENDER = row6.GENDER;
												copyOfsortie_full_2_tmp.AGE_RANGE = row6.AGE_RANGE;
												copyOfsortie_full_2_tmp.SIZE_RANGE = row6.SIZE_RANGE;
												copyOfsortie_full_2_tmp.SIZE = row6.SIZE;
												copyOfsortie_full_2_tmp.US_SIZE = row6.US_SIZE;
												copyOfsortie_full_2_tmp.CM_SIZE = row6.CM_SIZE;
												copyOfsortie_full_2_tmp.PRODUCT = row6.PRODUCT;
												copyOfsortie_full_2_tmp.PRODUCT_STATUS = row6.PRODUCT_STATUS;
												copyOfsortie_full_2_tmp.PRODUCT_TIER = row6.PRODUCT_TIER;
												copyOfsortie_full_2_tmp.ACCT_EXCLUS = row6.ACCT_EXCLUS;
												copyOfsortie_full_2_tmp.SIZE_RATIO_SPLIT = row6.SIZE_RATIO_SPLIT;
												copyOfsortie_full_2_tmp.REC_SIZE_SPLIT = row6.REC_SIZE_SPLIT;
												copyOfsortie_full_2_tmp.CARTON_QTY = row6.CARTON_QTY;
												copyOfsortie_full_2_tmp.ATTRIBUTE = row6.ATTRIBUTE;
												copyOfsortie_full_2_tmp.UNITS = row6.UNITS;
												copyOfsortie_full_2_tmp.EUR_RRP = row6.EUR_RRP;
												copyOfsortie_full_2_tmp.EUR_WSP = row6.EUR_WSP;
												copyOfsortie_full_2_tmp.GBP_RRP = row6.GBP_RRP;
												copyOfsortie_full_2_tmp.GBP_WSP = row6.GBP_WSP;
												copyOfsortie_full_2_tmp.CHF_RRP = row6.CHF_RRP;
												copyOfsortie_full_2_tmp.CHF_WSP = row6.CHF_WSP;
												copyOfsortie_full_2_tmp.NOK_RRP = row6.NOK_RRP;
												copyOfsortie_full_2_tmp.NOK_WSP = row6.NOK_WSP;
												copyOfsortie_full_2_tmp.DKK_RRP = row6.DKK_RRP;
												copyOfsortie_full_2_tmp.DKK_WSP = row6.DKK_WSP;
												copyOfsortie_full_2_tmp.SEK_RRP = row6.SEK_RRP;
												copyOfsortie_full_2_tmp.SEK_WSP = row6.SEK_WSP;
												copyOfsortie_full_2_tmp.EUR_FINN_RRP = row6.EUR_FINN_RRP;
												copyOfsortie_full_2_tmp.EUR_FINN_WSP = row6.EUR_FINN_WSP;
												copyOfsortie_full_2_tmp.FABRICATION = row6.FABRICATION;
												copyOfsortie_full_2_tmp.COO = "";
												copyOfsortie_full_2_tmp.CUSTOM_TARIFF_CODE = row6.CUSTOM_TARIFF_CODE;
												copyOfsortie_full_2_tmp.UPC = row6.UPC;
												copyOfsortie_full_2_tmp.SMU_TYPE = row6.SMU_TYPE;
												copyOfsortie_full_2_tmp.LABELD365 = row6.LABELD365;
												copyOfsortie_full_2_tmp.LABELNAMED365 = row6.LABELNAMED365;
												copyOfsortie_full_2_tmp.FASHIOND365 = row6.FASHIOND365;
												copyOfsortie_full_2_tmp.PRODUCTD365 = row6.PRODUCTD365;
												copyOfsortie_full_2_tmp.DELIVERYFLOW = row6.DELIVERYFLOW;
												copyOfsortie_full_2 = copyOfsortie_full_2_tmp;

// # Output table : 'copyOfsortie_product'
												copyOfsortie_product_tmp.PRODUCTNUMBER = row6.STYLE;
												copyOfsortie_product_tmp.PRODUCTCATEGORYNAME = row6.PRODUCTD365;
												copyOfsortie_product_tmp.PRODUCTCATEGORYHIERARCHYNAME = "Product Family Hierarchy";
												copyOfsortie_product = copyOfsortie_product_tmp;
// ###############################

											} // end of Var scope

											rejectedInnerJoin_tMap_3 = false;

											tos_count_tMap_3++;

											/**
											 * [tMap_3 main ] stop
											 */

											/**
											 * [tMap_3 process_data_begin ] start
											 */

											currentComponent = "tMap_3";

											/**
											 * [tMap_3 process_data_begin ] stop
											 */
// Start of branch "copyOfsortie_full_2"
											if (copyOfsortie_full_2 != null) {

												/**
												 * [tMap_5 main ] start
												 */

												currentComponent = "tMap_5";

												boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;

												// ###############################
												// # Input tables (lookups)
												boolean rejectedInnerJoin_tMap_5 = false;
												boolean mainRowRejected_tMap_5 = false;

												///////////////////////////////////////////////
												// Starting Lookup Table "row28"
												///////////////////////////////////////////////

												boolean forceLooprow28 = false;

												row28Struct row28ObjectFromLookup = null;

												if (!rejectedInnerJoin_tMap_5) { // G_TM_M_020

													hasCasePrimitiveKeyWithNull_tMap_5 = false;

													row28HashKey.STYLE = copyOfsortie_full_2.STYLE;

													row28HashKey.SEASON = copyOfsortie_full_2.SEASON;

													row28HashKey.hashCodeDirty = true;

													tHash_Lookup_row28.lookup(row28HashKey);

												} // G_TM_M_020

												if (tHash_Lookup_row28 != null
														&& tHash_Lookup_row28.getCount(row28HashKey) > 1) { // G 071

													// System.out.println("WARNING: UNIQUE MATCH is configured for the
													// lookup 'row28' and it contains more one result from keys :
													// row28.STYLE = '" + row28HashKey.STYLE + "', row28.SEASON = '" +
													// row28HashKey.SEASON + "'");
												} // G 071

												row28Struct row28 = null;

												row28Struct fromLookup_row28 = null;
												row28 = row28Default;

												if (tHash_Lookup_row28 != null && tHash_Lookup_row28.hasNext()) { // G
																													// 099

													fromLookup_row28 = tHash_Lookup_row28.next();

												} // G 099

												if (fromLookup_row28 != null) {
													row28 = fromLookup_row28;
												}

												// ###############################
												{ // start of Var scope

													// ###############################
													// # Vars tables

													Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
													// ###############################
													// # Output tables

													copyOfcopyOfsortie_full = null;
													copyOfcopyOfsortie_product = null;

// # Output table : 'copyOfcopyOfsortie_full'
													copyOfcopyOfsortie_full_tmp.BRAND = copyOfsortie_full_2.BRAND;
													copyOfcopyOfsortie_full_tmp.SEASON = copyOfsortie_full_2.SEASON;
													copyOfcopyOfsortie_full_tmp.CATEGORY = copyOfsortie_full_2.CATEGORY;
													copyOfcopyOfsortie_full_tmp.REF = copyOfsortie_full_2.REF;
													copyOfcopyOfsortie_full_tmp.DESCRIPTION = copyOfsortie_full_2.DESCRIPTION;
													copyOfcopyOfsortie_full_tmp.STYLE = copyOfsortie_full_2.STYLE;
													copyOfcopyOfsortie_full_tmp.COLOR = copyOfsortie_full_2.COLOR;
													copyOfcopyOfsortie_full_tmp.FASHION = copyOfsortie_full_2.FASHION;
													copyOfcopyOfsortie_full_tmp.STYLECOLORLABEL = copyOfsortie_full_2.STYLECOLORLABEL;
													copyOfcopyOfsortie_full_tmp.COLORNAME = copyOfsortie_full_2.COLORNAME;
													copyOfcopyOfsortie_full_tmp.LBL = copyOfsortie_full_2.LBL;
													copyOfcopyOfsortie_full_tmp.STYLE_COLOR = copyOfsortie_full_2.STYLE_COLOR;
													copyOfcopyOfsortie_full_tmp.GENDER = copyOfsortie_full_2.GENDER;
													copyOfcopyOfsortie_full_tmp.AGE_RANGE = copyOfsortie_full_2.AGE_RANGE;
													copyOfcopyOfsortie_full_tmp.SIZE_RANGE = copyOfsortie_full_2.SIZE_RANGE;
													copyOfcopyOfsortie_full_tmp.SIZE = copyOfsortie_full_2.SIZE;
													copyOfcopyOfsortie_full_tmp.US_SIZE = copyOfsortie_full_2.US_SIZE;
													copyOfcopyOfsortie_full_tmp.CM_SIZE = copyOfsortie_full_2.CM_SIZE;
													copyOfcopyOfsortie_full_tmp.PRODUCT = copyOfsortie_full_2.PRODUCT;
													copyOfcopyOfsortie_full_tmp.PRODUCT_STATUS = copyOfsortie_full_2.PRODUCT_STATUS;
													copyOfcopyOfsortie_full_tmp.PRODUCT_TIER = copyOfsortie_full_2.PRODUCT_TIER;
													copyOfcopyOfsortie_full_tmp.ACCT_EXCLUS = copyOfsortie_full_2.ACCT_EXCLUS;
													copyOfcopyOfsortie_full_tmp.SIZE_RATIO_SPLIT = copyOfsortie_full_2.SIZE_RATIO_SPLIT;
													copyOfcopyOfsortie_full_tmp.REC_SIZE_SPLIT = copyOfsortie_full_2.REC_SIZE_SPLIT;
													copyOfcopyOfsortie_full_tmp.CARTON_QTY = copyOfsortie_full_2.CARTON_QTY;
													copyOfcopyOfsortie_full_tmp.ATTRIBUTE = copyOfsortie_full_2.ATTRIBUTE;
													copyOfcopyOfsortie_full_tmp.UNITS = copyOfsortie_full_2.UNITS;
													copyOfcopyOfsortie_full_tmp.EUR_RRP = copyOfsortie_full_2.EUR_RRP;
													copyOfcopyOfsortie_full_tmp.EUR_WSP = copyOfsortie_full_2.EUR_WSP;
													copyOfcopyOfsortie_full_tmp.GBP_RRP = copyOfsortie_full_2.GBP_RRP;
													copyOfcopyOfsortie_full_tmp.GBP_WSP = copyOfsortie_full_2.GBP_WSP;
													copyOfcopyOfsortie_full_tmp.CHF_RRP = copyOfsortie_full_2.CHF_RRP;
													copyOfcopyOfsortie_full_tmp.CHF_WSP = copyOfsortie_full_2.CHF_WSP;
													copyOfcopyOfsortie_full_tmp.NOK_RRP = copyOfsortie_full_2.NOK_RRP;
													copyOfcopyOfsortie_full_tmp.NOK_WSP = copyOfsortie_full_2.NOK_WSP;
													copyOfcopyOfsortie_full_tmp.DKK_RRP = copyOfsortie_full_2.DKK_RRP;
													copyOfcopyOfsortie_full_tmp.DKK_WSP = copyOfsortie_full_2.DKK_WSP;
													copyOfcopyOfsortie_full_tmp.SEK_RRP = copyOfsortie_full_2.SEK_RRP;
													copyOfcopyOfsortie_full_tmp.SEK_WSP = copyOfsortie_full_2.SEK_WSP;
													copyOfcopyOfsortie_full_tmp.EUR_FINN_RRP = copyOfsortie_full_2.EUR_FINN_RRP;
													copyOfcopyOfsortie_full_tmp.EUR_FINN_WSP = copyOfsortie_full_2.EUR_FINN_WSP;
													copyOfcopyOfsortie_full_tmp.FABRICATION = copyOfsortie_full_2.FABRICATION;
													copyOfcopyOfsortie_full_tmp.COO = copyOfsortie_full_2.COO;
													copyOfcopyOfsortie_full_tmp.CUSTOM_TARIFF_CODE = copyOfsortie_full_2.CUSTOM_TARIFF_CODE;
													copyOfcopyOfsortie_full_tmp.UPC = copyOfsortie_full_2.UPC;
													copyOfcopyOfsortie_full_tmp.SMU_TYPE = copyOfsortie_full_2.SMU_TYPE;
													copyOfcopyOfsortie_full_tmp.LABELD365 = copyOfsortie_full_2.LABELD365;
													copyOfcopyOfsortie_full_tmp.LABELNAMED365 = copyOfsortie_full_2.LABELNAMED365;
													copyOfcopyOfsortie_full_tmp.FASHIOND365 = copyOfsortie_full_2.FASHIOND365;
													copyOfcopyOfsortie_full_tmp.PRODUCTD365 = copyOfsortie_full_2.PRODUCTD365;
													copyOfcopyOfsortie_full_tmp.DELIVERYFLOW = copyOfsortie_full_2.DELIVERYFLOW;
													copyOfcopyOfsortie_full = copyOfcopyOfsortie_full_tmp;

// # Output table : 'copyOfcopyOfsortie_product'
													copyOfcopyOfsortie_product_tmp.ITEMID = copyOfsortie_full_2.STYLE;
													copyOfcopyOfsortie_product_tmp.SEASONCODE = copyOfsortie_full_2.SEASON;
													copyOfcopyOfsortie_product_tmp.ISDEFAULT = row28.ISDEFAULT;
													copyOfcopyOfsortie_product_tmp.NOOS = "No";
													copyOfcopyOfsortie_product = copyOfcopyOfsortie_product_tmp;
// ###############################

												} // end of Var scope

												rejectedInnerJoin_tMap_5 = false;

												tos_count_tMap_5++;

												/**
												 * [tMap_5 main ] stop
												 */

												/**
												 * [tMap_5 process_data_begin ] start
												 */

												currentComponent = "tMap_5";

												/**
												 * [tMap_5 process_data_begin ] stop
												 */
// Start of branch "copyOfcopyOfsortie_full"
												if (copyOfcopyOfsortie_full != null) {

													/**
													 * [tMap_6 main ] start
													 */

													currentComponent = "tMap_6";

													boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;

													// ###############################
													// # Input tables (lookups)
													boolean rejectedInnerJoin_tMap_6 = false;
													boolean mainRowRejected_tMap_6 = false;

													// ###############################
													{ // start of Var scope

														// ###############################
														// # Vars tables

														Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
														// ###############################
														// # Output tables

														sortie_full_COO = null;

// # Output table : 'sortie_full_COO'
														sortie_full_COO_tmp.BRAND = copyOfcopyOfsortie_full.BRAND;
														sortie_full_COO_tmp.SEASON = copyOfcopyOfsortie_full.SEASON;
														sortie_full_COO_tmp.CATEGORY = copyOfcopyOfsortie_full.CATEGORY;
														sortie_full_COO_tmp.REF = copyOfcopyOfsortie_full.REF;
														sortie_full_COO_tmp.DESCRIPTION = copyOfcopyOfsortie_full.DESCRIPTION;
														sortie_full_COO_tmp.STYLE = copyOfcopyOfsortie_full.STYLE;
														sortie_full_COO_tmp.COLOR = copyOfcopyOfsortie_full.COLOR;
														sortie_full_COO_tmp.FASHION = copyOfcopyOfsortie_full.FASHION;
														sortie_full_COO_tmp.STYLECOLORLABEL = copyOfcopyOfsortie_full.STYLECOLORLABEL;
														sortie_full_COO_tmp.COLORNAME = copyOfcopyOfsortie_full.COLORNAME;
														sortie_full_COO_tmp.LBL = copyOfcopyOfsortie_full.LBL;
														sortie_full_COO_tmp.STYLE_COLOR = copyOfcopyOfsortie_full.STYLE_COLOR;
														sortie_full_COO_tmp.GENDER = copyOfcopyOfsortie_full.GENDER;
														sortie_full_COO_tmp.AGE_RANGE = copyOfcopyOfsortie_full.AGE_RANGE;
														sortie_full_COO_tmp.SIZE_RANGE = copyOfcopyOfsortie_full.SIZE_RANGE;
														sortie_full_COO_tmp.SIZE = copyOfcopyOfsortie_full.SIZE;
														sortie_full_COO_tmp.US_SIZE = copyOfcopyOfsortie_full.US_SIZE;
														sortie_full_COO_tmp.CM_SIZE = copyOfcopyOfsortie_full.CM_SIZE;
														sortie_full_COO_tmp.PRODUCT = copyOfcopyOfsortie_full.PRODUCT;
														sortie_full_COO_tmp.PRODUCT_STATUS = copyOfcopyOfsortie_full.PRODUCT_STATUS;
														sortie_full_COO_tmp.PRODUCT_TIER = copyOfcopyOfsortie_full.PRODUCT_TIER;
														sortie_full_COO_tmp.ACCT_EXCLUS = copyOfcopyOfsortie_full.ACCT_EXCLUS;
														sortie_full_COO_tmp.SIZE_RATIO_SPLIT = copyOfcopyOfsortie_full.SIZE_RATIO_SPLIT;
														sortie_full_COO_tmp.REC_SIZE_SPLIT = copyOfcopyOfsortie_full.REC_SIZE_SPLIT;
														sortie_full_COO_tmp.CARTON_QTY = copyOfcopyOfsortie_full.CARTON_QTY;
														sortie_full_COO_tmp.ATTRIBUTE = copyOfcopyOfsortie_full.ATTRIBUTE;
														sortie_full_COO_tmp.UNITS = copyOfcopyOfsortie_full.UNITS;
														sortie_full_COO_tmp.EUR_RRP = copyOfcopyOfsortie_full.EUR_RRP;
														sortie_full_COO_tmp.EUR_WSP = copyOfcopyOfsortie_full.EUR_WSP;
														sortie_full_COO_tmp.GBP_RRP = copyOfcopyOfsortie_full.GBP_RRP;
														sortie_full_COO_tmp.GBP_WSP = copyOfcopyOfsortie_full.GBP_WSP;
														sortie_full_COO_tmp.CHF_RRP = copyOfcopyOfsortie_full.CHF_RRP;
														sortie_full_COO_tmp.CHF_WSP = copyOfcopyOfsortie_full.CHF_WSP;
														sortie_full_COO_tmp.NOK_RRP = copyOfcopyOfsortie_full.NOK_RRP;
														sortie_full_COO_tmp.NOK_WSP = copyOfcopyOfsortie_full.NOK_WSP;
														sortie_full_COO_tmp.DKK_RRP = copyOfcopyOfsortie_full.DKK_RRP;
														sortie_full_COO_tmp.DKK_WSP = copyOfcopyOfsortie_full.DKK_WSP;
														sortie_full_COO_tmp.SEK_RRP = copyOfcopyOfsortie_full.SEK_RRP;
														sortie_full_COO_tmp.SEK_WSP = copyOfcopyOfsortie_full.SEK_WSP;
														sortie_full_COO_tmp.EUR_FINN_RRP = copyOfcopyOfsortie_full.EUR_FINN_RRP;
														sortie_full_COO_tmp.EUR_FINN_WSP = copyOfcopyOfsortie_full.EUR_FINN_WSP;
														sortie_full_COO_tmp.FABRICATION = copyOfcopyOfsortie_full.FABRICATION;
														sortie_full_COO_tmp.COO = copyOfcopyOfsortie_full.COO;
														sortie_full_COO_tmp.CUSTOM_TARIFF_CODE = copyOfcopyOfsortie_full.CUSTOM_TARIFF_CODE;
														sortie_full_COO_tmp.UPC = copyOfcopyOfsortie_full.UPC;
														sortie_full_COO_tmp.SMU_TYPE = copyOfcopyOfsortie_full.SMU_TYPE;
														sortie_full_COO_tmp.LABELD365 = copyOfcopyOfsortie_full.LABELD365;
														sortie_full_COO_tmp.LABELNAMED365 = copyOfcopyOfsortie_full.LABELNAMED365;
														sortie_full_COO_tmp.FASHIOND365 = copyOfcopyOfsortie_full.FASHIOND365;
														sortie_full_COO_tmp.PRODUCTD365 = copyOfcopyOfsortie_full.PRODUCTD365;
														sortie_full_COO_tmp.DELIVERYFLOW = copyOfcopyOfsortie_full.DELIVERYFLOW;
														sortie_full_COO = sortie_full_COO_tmp;
// ###############################

													} // end of Var scope

													rejectedInnerJoin_tMap_6 = false;

													tos_count_tMap_6++;

													/**
													 * [tMap_6 main ] stop
													 */

													/**
													 * [tMap_6 process_data_begin ] start
													 */

													currentComponent = "tMap_6";

													/**
													 * [tMap_6 process_data_begin ] stop
													 */
// Start of branch "sortie_full_COO"
													if (sortie_full_COO != null) {

														/**
														 * [tMap_23 main ] start
														 */

														currentComponent = "tMap_23";

														boolean hasCasePrimitiveKeyWithNull_tMap_23 = false;

														// ###############################
														// # Input tables (lookups)
														boolean rejectedInnerJoin_tMap_23 = false;
														boolean mainRowRejected_tMap_23 = false;

														// ###############################
														{ // start of Var scope

															// ###############################
															// # Vars tables

															Var__tMap_23__Struct Var = Var__tMap_23;// ###############################
															// ###############################
															// # Output tables

															sortie_full_ = null;
															copyOfcopyOfsortie_size = null;

// # Output table : 'sortie_full_'
															sortie_full__tmp.BRAND = sortie_full_COO.BRAND;
															sortie_full__tmp.SEASON = sortie_full_COO.SEASON;
															sortie_full__tmp.CATEGORY = sortie_full_COO.CATEGORY;
															sortie_full__tmp.REF = sortie_full_COO.REF;
															sortie_full__tmp.DESCRIPTION = sortie_full_COO.DESCRIPTION;
															sortie_full__tmp.STYLE = sortie_full_COO.STYLE;
															sortie_full__tmp.COLOR = sortie_full_COO.COLOR;
															sortie_full__tmp.FASHION = sortie_full_COO.FASHION;
															sortie_full__tmp.STYLECOLORLABEL = sortie_full_COO.STYLECOLORLABEL;
															sortie_full__tmp.COLORNAME = sortie_full_COO.COLORNAME;
															sortie_full__tmp.LBL = sortie_full_COO.LBL;
															sortie_full__tmp.STYLE_COLOR = sortie_full_COO.STYLE_COLOR;
															sortie_full__tmp.GENDER = sortie_full_COO.GENDER;
															sortie_full__tmp.AGE_RANGE = sortie_full_COO.AGE_RANGE;
															sortie_full__tmp.SIZE_RANGE = sortie_full_COO.SIZE_RANGE;
															sortie_full__tmp.SIZE = sortie_full_COO.SIZE;
															sortie_full__tmp.US_SIZE = sortie_full_COO.US_SIZE;
															sortie_full__tmp.CM_SIZE = sortie_full_COO.CM_SIZE;
															sortie_full__tmp.PRODUCT = sortie_full_COO.PRODUCT;
															sortie_full__tmp.PRODUCT_STATUS = sortie_full_COO.PRODUCT_STATUS;
															sortie_full__tmp.PRODUCT_TIER = sortie_full_COO.PRODUCT_TIER;
															sortie_full__tmp.ACCT_EXCLUS = sortie_full_COO.ACCT_EXCLUS;
															sortie_full__tmp.SIZE_RATIO_SPLIT = sortie_full_COO.SIZE_RATIO_SPLIT;
															sortie_full__tmp.REC_SIZE_SPLIT = sortie_full_COO.REC_SIZE_SPLIT;
															sortie_full__tmp.CARTON_QTY = sortie_full_COO.CARTON_QTY;
															sortie_full__tmp.ATTRIBUTE = sortie_full_COO.ATTRIBUTE;
															sortie_full__tmp.UNITS = sortie_full_COO.UNITS;
															sortie_full__tmp.EUR_RRP = sortie_full_COO.EUR_RRP;
															sortie_full__tmp.EUR_WSP = sortie_full_COO.EUR_WSP;
															sortie_full__tmp.GBP_RRP = sortie_full_COO.GBP_RRP;
															sortie_full__tmp.GBP_WSP = sortie_full_COO.GBP_WSP;
															sortie_full__tmp.CHF_RRP = sortie_full_COO.CHF_RRP;
															sortie_full__tmp.CHF_WSP = sortie_full_COO.CHF_WSP;
															sortie_full__tmp.NOK_RRP = sortie_full_COO.NOK_RRP;
															sortie_full__tmp.NOK_WSP = sortie_full_COO.NOK_WSP;
															sortie_full__tmp.DKK_RRP = sortie_full_COO.DKK_RRP;
															sortie_full__tmp.DKK_WSP = sortie_full_COO.DKK_WSP;
															sortie_full__tmp.SEK_RRP = sortie_full_COO.SEK_RRP;
															sortie_full__tmp.SEK_WSP = sortie_full_COO.SEK_WSP;
															sortie_full__tmp.EUR_FINN_RRP = sortie_full_COO.EUR_FINN_RRP;
															sortie_full__tmp.EUR_FINN_WSP = sortie_full_COO.EUR_FINN_WSP;
															sortie_full__tmp.FABRICATION = sortie_full_COO.FABRICATION;
															sortie_full__tmp.COO = sortie_full_COO.COO;
															sortie_full__tmp.CUSTOM_TARIFF_CODE = sortie_full_COO.CUSTOM_TARIFF_CODE;
															sortie_full__tmp.UPC = sortie_full_COO.UPC;
															sortie_full__tmp.SMU_TYPE = sortie_full_COO.SMU_TYPE;
															sortie_full__tmp.LABELD365 = sortie_full_COO.LABELD365;
															sortie_full__tmp.LABELNAMED365 = sortie_full_COO.LABELNAMED365;
															sortie_full__tmp.DELIVERYFLOW = sortie_full_COO.DELIVERYFLOW;
															sortie_full_ = sortie_full__tmp;

// # Output table : 'copyOfcopyOfsortie_size'
															copyOfcopyOfsortie_size_tmp.PRODUCTMASTERNUMBER = sortie_full_COO.STYLE;
															copyOfcopyOfsortie_size_tmp.PRODUCTMASTERSIZEID = sortie_full_COO.SIZE;
															copyOfcopyOfsortie_size_tmp.LANGUAGEID = "en-US";
															copyOfcopyOfsortie_size_tmp.TRANSLATEDSIZEDESCRIPTION = sortie_full_COO.CM_SIZE;
															copyOfcopyOfsortie_size_tmp.TRANSLATEDSIZENAME = sortie_full_COO.US_SIZE;
															copyOfcopyOfsortie_size = copyOfcopyOfsortie_size_tmp;
// ###############################

														} // end of Var scope

														rejectedInnerJoin_tMap_23 = false;

														tos_count_tMap_23++;

														/**
														 * [tMap_23 main ] stop
														 */

														/**
														 * [tMap_23 process_data_begin ] start
														 */

														currentComponent = "tMap_23";

														/**
														 * [tMap_23 process_data_begin ] stop
														 */
// Start of branch "sortie_full_"
														if (sortie_full_ != null) {

															/**
															 * [tMap_4 main ] start
															 */

															currentComponent = "tMap_4";

															boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;

															// ###############################
															// # Input tables (lookups)
															boolean rejectedInnerJoin_tMap_4 = false;
															boolean mainRowRejected_tMap_4 = false;

															// ###############################
															{ // start of Var scope

																// ###############################
																// # Vars tables

																Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
																// ###############################
																// # Output tables

																sortie_full_fashion = null;

// # Output table : 'sortie_full_fashion'
																sortie_full_fashion_tmp.BRAND = sortie_full_.BRAND;
																sortie_full_fashion_tmp.SEASON = sortie_full_.SEASON;
																sortie_full_fashion_tmp.CATEGORY = sortie_full_.CATEGORY;
																sortie_full_fashion_tmp.REF = sortie_full_.REF;
																sortie_full_fashion_tmp.DESCRIPTION = sortie_full_.DESCRIPTION;
																sortie_full_fashion_tmp.STYLE = sortie_full_.STYLE;
																sortie_full_fashion_tmp.COLOR = sortie_full_.COLOR;
																sortie_full_fashion_tmp.FASHION = sortie_full_.FASHION;
																sortie_full_fashion_tmp.STYLECOLORLABEL = sortie_full_.STYLECOLORLABEL;
																sortie_full_fashion_tmp.COLORNAME = sortie_full_.COLORNAME;
																sortie_full_fashion_tmp.LBL = sortie_full_.LBL;
																sortie_full_fashion_tmp.STYLE_COLOR = sortie_full_.STYLE_COLOR;
																sortie_full_fashion_tmp.GENDER = sortie_full_.GENDER;
																sortie_full_fashion_tmp.AGE_RANGE = sortie_full_.AGE_RANGE;
																sortie_full_fashion_tmp.SIZE_RANGE = sortie_full_.SIZE_RANGE;
																sortie_full_fashion_tmp.SIZE = sortie_full_.SIZE;
																sortie_full_fashion_tmp.US_SIZE = sortie_full_.US_SIZE;
																sortie_full_fashion_tmp.CM_SIZE = sortie_full_.CM_SIZE;
																sortie_full_fashion_tmp.PRODUCT = sortie_full_.PRODUCT;
																sortie_full_fashion_tmp.PRODUCT_STATUS = sortie_full_.PRODUCT_STATUS;
																sortie_full_fashion_tmp.PRODUCT_TIER = sortie_full_.PRODUCT_TIER;
																sortie_full_fashion_tmp.ACCT_EXCLUS = sortie_full_.ACCT_EXCLUS;
																sortie_full_fashion_tmp.SIZE_RATIO_SPLIT = sortie_full_.SIZE_RATIO_SPLIT;
																sortie_full_fashion_tmp.REC_SIZE_SPLIT = sortie_full_.REC_SIZE_SPLIT;
																sortie_full_fashion_tmp.CARTON_QTY = sortie_full_.CARTON_QTY;
																sortie_full_fashion_tmp.ATTRIBUTE = sortie_full_.ATTRIBUTE;
																sortie_full_fashion_tmp.UNITS = sortie_full_.UNITS;
																sortie_full_fashion_tmp.EUR_RRP = sortie_full_.EUR_RRP;
																sortie_full_fashion_tmp.EUR_WSP = sortie_full_.EUR_WSP;
																sortie_full_fashion_tmp.GBP_RRP = sortie_full_.GBP_RRP;
																sortie_full_fashion_tmp.GBP_WSP = sortie_full_.GBP_WSP;
																sortie_full_fashion_tmp.CHF_RRP = sortie_full_.CHF_RRP;
																sortie_full_fashion_tmp.CHF_WSP = sortie_full_.CHF_WSP;
																sortie_full_fashion_tmp.NOK_RRP = sortie_full_.NOK_RRP;
																sortie_full_fashion_tmp.NOK_WSP = sortie_full_.NOK_WSP;
																sortie_full_fashion_tmp.DKK_RRP = sortie_full_.DKK_RRP;
																sortie_full_fashion_tmp.DKK_WSP = sortie_full_.DKK_WSP;
																sortie_full_fashion_tmp.SEK_RRP = sortie_full_.SEK_RRP;
																sortie_full_fashion_tmp.SEK_WSP = sortie_full_.SEK_WSP;
																sortie_full_fashion_tmp.EUR_FINN_RRP = sortie_full_.EUR_FINN_RRP;
																sortie_full_fashion_tmp.EUR_FINN_WSP = sortie_full_.EUR_FINN_WSP;
																sortie_full_fashion_tmp.FABRICATION = sortie_full_.FABRICATION;
																sortie_full_fashion_tmp.COO = sortie_full_.COO;
																sortie_full_fashion_tmp.CUSTOM_TARIFF_CODE = sortie_full_.CUSTOM_TARIFF_CODE;
																sortie_full_fashion_tmp.UPC = sortie_full_.UPC;
																sortie_full_fashion_tmp.SMU_TYPE = sortie_full_.SMU_TYPE;
																sortie_full_fashion_tmp.LABELD365 = sortie_full_.LABELD365;
																sortie_full_fashion_tmp.LABELNAMED365 = sortie_full_.LABELNAMED365;
																sortie_full_fashion_tmp.DELIVERYFLOW = sortie_full_.DELIVERYFLOW;
																sortie_full_fashion = sortie_full_fashion_tmp;
// ###############################

															} // end of Var scope

															rejectedInnerJoin_tMap_4 = false;

															tos_count_tMap_4++;

															/**
															 * [tMap_4 main ] stop
															 */

															/**
															 * [tMap_4 process_data_begin ] start
															 */

															currentComponent = "tMap_4";

															/**
															 * [tMap_4 process_data_begin ] stop
															 */
// Start of branch "sortie_full_fashion"
															if (sortie_full_fashion != null) {

																/**
																 * [tMap_9 main ] start
																 */

																currentComponent = "tMap_9";

																boolean hasCasePrimitiveKeyWithNull_tMap_9 = false;

																// ###############################
																// # Input tables (lookups)
																boolean rejectedInnerJoin_tMap_9 = false;
																boolean mainRowRejected_tMap_9 = false;

																// ###############################
																{ // start of Var scope

																	// ###############################
																	// # Vars tables

																	Var__tMap_9__Struct Var = Var__tMap_9;// ###############################
																	// ###############################
																	// # Output tables

																	copyOfsortie_full_ = null;
																	copyOfcopyOfcopyOfsortie_size_0 = null;

// # Output table : 'copyOfsortie_full_'
																	copyOfsortie_full__tmp.BRAND = sortie_full_fashion.BRAND;
																	copyOfsortie_full__tmp.SEASON = sortie_full_fashion.SEASON;
																	copyOfsortie_full__tmp.CATEGORY = sortie_full_fashion.CATEGORY;
																	copyOfsortie_full__tmp.REF = sortie_full_fashion.REF;
																	copyOfsortie_full__tmp.DESCRIPTION = sortie_full_fashion.DESCRIPTION;
																	copyOfsortie_full__tmp.STYLE = sortie_full_fashion.STYLE;
																	copyOfsortie_full__tmp.COLOR = sortie_full_fashion.COLOR;
																	copyOfsortie_full__tmp.FASHION = sortie_full_fashion.FASHION;
																	copyOfsortie_full__tmp.STYLECOLORLABEL = sortie_full_fashion.STYLECOLORLABEL;
																	copyOfsortie_full__tmp.COLORNAME = sortie_full_fashion.COLORNAME;
																	copyOfsortie_full__tmp.LBL = sortie_full_fashion.LBL;
																	copyOfsortie_full__tmp.STYLE_COLOR = sortie_full_fashion.STYLE_COLOR;
																	copyOfsortie_full__tmp.GENDER = sortie_full_fashion.GENDER;
																	copyOfsortie_full__tmp.AGE_RANGE = sortie_full_fashion.AGE_RANGE;
																	copyOfsortie_full__tmp.SIZE_RANGE = sortie_full_fashion.SIZE_RANGE;
																	copyOfsortie_full__tmp.SIZE = sortie_full_fashion.SIZE;
																	copyOfsortie_full__tmp.US_SIZE = sortie_full_fashion.US_SIZE;
																	copyOfsortie_full__tmp.CM_SIZE = sortie_full_fashion.CM_SIZE;
																	copyOfsortie_full__tmp.PRODUCT = sortie_full_fashion.PRODUCT;
																	copyOfsortie_full__tmp.PRODUCT_STATUS = sortie_full_fashion.PRODUCT_STATUS;
																	copyOfsortie_full__tmp.PRODUCT_TIER = sortie_full_fashion.PRODUCT_TIER;
																	copyOfsortie_full__tmp.ACCT_EXCLUS = sortie_full_fashion.ACCT_EXCLUS;
																	copyOfsortie_full__tmp.SIZE_RATIO_SPLIT = sortie_full_fashion.SIZE_RATIO_SPLIT;
																	copyOfsortie_full__tmp.REC_SIZE_SPLIT = sortie_full_fashion.REC_SIZE_SPLIT;
																	copyOfsortie_full__tmp.CARTON_QTY = sortie_full_fashion.CARTON_QTY;
																	copyOfsortie_full__tmp.ATTRIBUTE = sortie_full_fashion.ATTRIBUTE;
																	copyOfsortie_full__tmp.UNITS = sortie_full_fashion.UNITS;
																	copyOfsortie_full__tmp.EUR_RRP = sortie_full_fashion.EUR_RRP;
																	copyOfsortie_full__tmp.EUR_WSP = sortie_full_fashion.EUR_WSP;
																	copyOfsortie_full__tmp.GBP_RRP = sortie_full_fashion.GBP_RRP;
																	copyOfsortie_full__tmp.GBP_WSP = sortie_full_fashion.GBP_WSP;
																	copyOfsortie_full__tmp.CHF_RRP = sortie_full_fashion.CHF_RRP;
																	copyOfsortie_full__tmp.CHF_WSP = sortie_full_fashion.CHF_WSP;
																	copyOfsortie_full__tmp.NOK_RRP = sortie_full_fashion.NOK_RRP;
																	copyOfsortie_full__tmp.NOK_WSP = sortie_full_fashion.NOK_WSP;
																	copyOfsortie_full__tmp.DKK_RRP = sortie_full_fashion.DKK_RRP;
																	copyOfsortie_full__tmp.DKK_WSP = sortie_full_fashion.DKK_WSP;
																	copyOfsortie_full__tmp.SEK_RRP = sortie_full_fashion.SEK_RRP;
																	copyOfsortie_full__tmp.SEK_WSP = sortie_full_fashion.SEK_WSP;
																	copyOfsortie_full__tmp.EUR_FINN_RRP = sortie_full_fashion.EUR_FINN_RRP;
																	copyOfsortie_full__tmp.EUR_FINN_WSP = sortie_full_fashion.EUR_FINN_WSP;
																	copyOfsortie_full__tmp.FABRICATION = sortie_full_fashion.FABRICATION;
																	copyOfsortie_full__tmp.COO = sortie_full_fashion.COO;
																	copyOfsortie_full__tmp.CUSTOM_TARIFF_CODE = sortie_full_fashion.CUSTOM_TARIFF_CODE;
																	copyOfsortie_full__tmp.UPC = sortie_full_fashion.UPC;
																	copyOfsortie_full__tmp.SMU_TYPE = sortie_full_fashion.SMU_TYPE;
																	copyOfsortie_full__tmp.LABELD365 = sortie_full_fashion.LABELD365;
																	copyOfsortie_full__tmp.DELIVERYFLOW = sortie_full_fashion.DELIVERYFLOW;
																	copyOfsortie_full_ = copyOfsortie_full__tmp;

// # Output table : 'copyOfcopyOfcopyOfsortie_size_0'
																	copyOfcopyOfcopyOfsortie_size_0_tmp.PRODUCTMASTERNUMBER = sortie_full_fashion.STYLE;
																	copyOfcopyOfcopyOfsortie_size_0_tmp.PRODUCTMASTERSTYLEID = sortie_full_fashion.LABELD365;
																	copyOfcopyOfcopyOfsortie_size_0_tmp.LANGUAGEID = "en-US";
																	copyOfcopyOfcopyOfsortie_size_0_tmp.TRANSLATEDSTYLEDESCRIPTION = sortie_full_fashion.LABELNAMED365;
																	copyOfcopyOfcopyOfsortie_size_0_tmp.TRANSLATEDSTYLENAME = sortie_full_fashion.LABELNAMED365;
																	copyOfcopyOfcopyOfsortie_size_0 = copyOfcopyOfcopyOfsortie_size_0_tmp;
// ###############################

																} // end of Var scope

																rejectedInnerJoin_tMap_9 = false;

																tos_count_tMap_9++;

																/**
																 * [tMap_9 main ] stop
																 */

																/**
																 * [tMap_9 process_data_begin ] start
																 */

																currentComponent = "tMap_9";

																/**
																 * [tMap_9 process_data_begin ] stop
																 */
// Start of branch "copyOfsortie_full_"
																if (copyOfsortie_full_ != null) {

																	/**
																	 * [tMap_10 main ] start
																	 */

																	currentComponent = "tMap_10";

																	boolean hasCasePrimitiveKeyWithNull_tMap_10 = false;

																	// ###############################
																	// # Input tables (lookups)
																	boolean rejectedInnerJoin_tMap_10 = false;
																	boolean mainRowRejected_tMap_10 = false;

																	// ###############################
																	{ // start of Var scope

																		// ###############################
																		// # Vars tables

																		Var__tMap_10__Struct Var = Var__tMap_10;// ###############################
																		// ###############################
																		// # Output tables

																		copyOfcopyOfcopyOfcopyOfsortie_size_0 = null;

// # Output table : 'copyOfcopyOfcopyOfcopyOfsortie_size_0'
																		copyOfcopyOfcopyOfcopyOfsortie_size_0_tmp.ITEMID = copyOfsortie_full_.STYLE;
																		copyOfcopyOfcopyOfcopyOfsortie_size_0_tmp.SEASONCODE = copyOfsortie_full_.SEASON;
																		copyOfcopyOfcopyOfcopyOfsortie_size_0_tmp.DROPID = copyOfsortie_full_.DELIVERYFLOW;
																		copyOfcopyOfcopyOfcopyOfsortie_size_0_tmp.DISPLAYORDER = ".000000";
																		copyOfcopyOfcopyOfcopyOfsortie_size_0_tmp.ISDEFAULT = "Yes";
																		copyOfcopyOfcopyOfcopyOfsortie_size_0 = copyOfcopyOfcopyOfcopyOfsortie_size_0_tmp;
// ###############################

																	} // end of Var scope

																	rejectedInnerJoin_tMap_10 = false;

																	tos_count_tMap_10++;

																	/**
																	 * [tMap_10 main ] stop
																	 */

																	/**
																	 * [tMap_10 process_data_begin ] start
																	 */

																	currentComponent = "tMap_10";

																	/**
																	 * [tMap_10 process_data_begin ] stop
																	 */
// Start of branch "copyOfcopyOfcopyOfcopyOfsortie_size_0"
																	if (copyOfcopyOfcopyOfcopyOfsortie_size_0 != null) {

																		/**
																		 * [tUniqRow_7 main ] start
																		 */

																		currentComponent = "tUniqRow_7";

																		row20 = null;
																		if (copyOfcopyOfcopyOfcopyOfsortie_size_0.ITEMID == null) {
																			finder_tUniqRow_7.ITEMID = null;
																		} else {
																			finder_tUniqRow_7.ITEMID = copyOfcopyOfcopyOfcopyOfsortie_size_0.ITEMID
																					.toLowerCase();
																		}
																		if (copyOfcopyOfcopyOfcopyOfsortie_size_0.SEASONCODE == null) {
																			finder_tUniqRow_7.SEASONCODE = null;
																		} else {
																			finder_tUniqRow_7.SEASONCODE = copyOfcopyOfcopyOfcopyOfsortie_size_0.SEASONCODE
																					.toLowerCase();
																		}
																		finder_tUniqRow_7.hashCodeDirty = true;
																		if (!keystUniqRow_7
																				.contains(finder_tUniqRow_7)) {
																			KeyStruct_tUniqRow_7 new_tUniqRow_7 = new KeyStruct_tUniqRow_7();

																			if (copyOfcopyOfcopyOfcopyOfsortie_size_0.ITEMID == null) {
																				new_tUniqRow_7.ITEMID = null;
																			} else {
																				new_tUniqRow_7.ITEMID = copyOfcopyOfcopyOfcopyOfsortie_size_0.ITEMID
																						.toLowerCase();
																			}
																			if (copyOfcopyOfcopyOfcopyOfsortie_size_0.SEASONCODE == null) {
																				new_tUniqRow_7.SEASONCODE = null;
																			} else {
																				new_tUniqRow_7.SEASONCODE = copyOfcopyOfcopyOfcopyOfsortie_size_0.SEASONCODE
																						.toLowerCase();
																			}

																			keystUniqRow_7.add(new_tUniqRow_7);
																			if (row20 == null) {

																				row20 = new row20Struct();
																			}
																			row20.ITEMID = copyOfcopyOfcopyOfcopyOfsortie_size_0.ITEMID;
																			row20.SEASONCODE = copyOfcopyOfcopyOfcopyOfsortie_size_0.SEASONCODE;
																			row20.DROPID = copyOfcopyOfcopyOfcopyOfsortie_size_0.DROPID;
																			row20.DISPLAYORDER = copyOfcopyOfcopyOfcopyOfsortie_size_0.DISPLAYORDER;
																			row20.ISDEFAULT = copyOfcopyOfcopyOfcopyOfsortie_size_0.ISDEFAULT;
																			nb_uniques_tUniqRow_7++;
																		} else {
																			nb_duplicates_tUniqRow_7++;
																		}

																		tos_count_tUniqRow_7++;

																		/**
																		 * [tUniqRow_7 main ] stop
																		 */

																		/**
																		 * [tUniqRow_7 process_data_begin ] start
																		 */

																		currentComponent = "tUniqRow_7";

																		/**
																		 * [tUniqRow_7 process_data_begin ] stop
																		 */
// Start of branch "row20"
																		if (row20 != null) {

																			/**
																			 * [tFilterRow_1 main ] start
																			 */

																			currentComponent = "tFilterRow_1";

																			row22 = null;
																			Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1(
																					"&&");
																			ope_tFilterRow_1.matches(
																					(row20.DROPID == null ? false
																							: row20.DROPID.compareTo(
																									"") != 0),
																					"DROPID.compareTo(\"\") != 0 failed");

																			if (ope_tFilterRow_1.getMatchFlag()) {
																				if (row22 == null) {
																					row22 = new row22Struct();
																				}
																				row22.ITEMID = row20.ITEMID;
																				row22.SEASONCODE = row20.SEASONCODE;
																				row22.DROPID = row20.DROPID;
																				row22.DISPLAYORDER = row20.DISPLAYORDER;
																				row22.ISDEFAULT = row20.ISDEFAULT;
																				nb_line_ok_tFilterRow_1++;
																			} else {
																				nb_line_reject_tFilterRow_1++;
																			}

																			nb_line_tFilterRow_1++;

																			tos_count_tFilterRow_1++;

																			/**
																			 * [tFilterRow_1 main ] stop
																			 */

																			/**
																			 * [tFilterRow_1 process_data_begin ] start
																			 */

																			currentComponent = "tFilterRow_1";

																			/**
																			 * [tFilterRow_1 process_data_begin ] stop
																			 */
// Start of branch "row22"
																			if (row22 != null) {

																				/**
																				 * [tFileOutputExcel_6 main ] start
																				 */

																				currentComponent = "tFileOutputExcel_6";

																				xlsxTool_tFileOutputExcel_6.addRow();

																				if (row22.ITEMID != null) {

																					xlsxTool_tFileOutputExcel_6
																							.addCellValue(
																									String.valueOf(
																											row22.ITEMID));
																				} else {
																					xlsxTool_tFileOutputExcel_6
																							.addCellNullValue();
																				}

																				if (row22.SEASONCODE != null) {

																					xlsxTool_tFileOutputExcel_6
																							.addCellValue(
																									String.valueOf(
																											row22.SEASONCODE));
																				} else {
																					xlsxTool_tFileOutputExcel_6
																							.addCellNullValue();
																				}

																				if (row22.DROPID != null) {

																					xlsxTool_tFileOutputExcel_6
																							.addCellValue(
																									String.valueOf(
																											row22.DROPID));
																				} else {
																					xlsxTool_tFileOutputExcel_6
																							.addCellNullValue();
																				}

																				if (row22.DISPLAYORDER != null) {

																					xlsxTool_tFileOutputExcel_6
																							.addCellValue(
																									String.valueOf(
																											row22.DISPLAYORDER));
																				} else {
																					xlsxTool_tFileOutputExcel_6
																							.addCellNullValue();
																				}

																				if (row22.ISDEFAULT != null) {

																					xlsxTool_tFileOutputExcel_6
																							.addCellValue(
																									String.valueOf(
																											row22.ISDEFAULT));
																				} else {
																					xlsxTool_tFileOutputExcel_6
																							.addCellNullValue();
																				}

																				nb_line_tFileOutputExcel_6++;

																				tos_count_tFileOutputExcel_6++;

																				/**
																				 * [tFileOutputExcel_6 main ] stop
																				 */

																				/**
																				 * [tFileOutputExcel_6
																				 * process_data_begin ] start
																				 */

																				currentComponent = "tFileOutputExcel_6";

																				/**
																				 * [tFileOutputExcel_6
																				 * process_data_begin ] stop
																				 */

																				/**
																				 * [tFileOutputExcel_6 process_data_end
																				 * ] start
																				 */

																				currentComponent = "tFileOutputExcel_6";

																				/**
																				 * [tFileOutputExcel_6 process_data_end
																				 * ] stop
																				 */

																			} // End of branch "row22"

																			/**
																			 * [tFilterRow_1 process_data_end ] start
																			 */

																			currentComponent = "tFilterRow_1";

																			/**
																			 * [tFilterRow_1 process_data_end ] stop
																			 */

																		} // End of branch "row20"

																		/**
																		 * [tUniqRow_7 process_data_end ] start
																		 */

																		currentComponent = "tUniqRow_7";

																		/**
																		 * [tUniqRow_7 process_data_end ] stop
																		 */

																	} // End of branch
																		// "copyOfcopyOfcopyOfcopyOfsortie_size_0"

																	/**
																	 * [tMap_10 process_data_end ] start
																	 */

																	currentComponent = "tMap_10";

																	/**
																	 * [tMap_10 process_data_end ] stop
																	 */

																} // End of branch "copyOfsortie_full_"

// Start of branch "copyOfcopyOfcopyOfsortie_size_0"
																if (copyOfcopyOfcopyOfsortie_size_0 != null) {

																	/**
																	 * [tUniqRow_6 main ] start
																	 */

																	currentComponent = "tUniqRow_6";

																	row17 = null;
																	if (copyOfcopyOfcopyOfsortie_size_0.PRODUCTMASTERNUMBER == null) {
																		finder_tUniqRow_6.PRODUCTMASTERNUMBER = null;
																	} else {
																		finder_tUniqRow_6.PRODUCTMASTERNUMBER = copyOfcopyOfcopyOfsortie_size_0.PRODUCTMASTERNUMBER
																				.toLowerCase();
																	}
																	if (copyOfcopyOfcopyOfsortie_size_0.PRODUCTMASTERSTYLEID == null) {
																		finder_tUniqRow_6.PRODUCTMASTERSTYLEID = null;
																	} else {
																		finder_tUniqRow_6.PRODUCTMASTERSTYLEID = copyOfcopyOfcopyOfsortie_size_0.PRODUCTMASTERSTYLEID
																				.toLowerCase();
																	}
																	finder_tUniqRow_6.hashCodeDirty = true;
																	if (!keystUniqRow_6.contains(finder_tUniqRow_6)) {
																		KeyStruct_tUniqRow_6 new_tUniqRow_6 = new KeyStruct_tUniqRow_6();

																		if (copyOfcopyOfcopyOfsortie_size_0.PRODUCTMASTERNUMBER == null) {
																			new_tUniqRow_6.PRODUCTMASTERNUMBER = null;
																		} else {
																			new_tUniqRow_6.PRODUCTMASTERNUMBER = copyOfcopyOfcopyOfsortie_size_0.PRODUCTMASTERNUMBER
																					.toLowerCase();
																		}
																		if (copyOfcopyOfcopyOfsortie_size_0.PRODUCTMASTERSTYLEID == null) {
																			new_tUniqRow_6.PRODUCTMASTERSTYLEID = null;
																		} else {
																			new_tUniqRow_6.PRODUCTMASTERSTYLEID = copyOfcopyOfcopyOfsortie_size_0.PRODUCTMASTERSTYLEID
																					.toLowerCase();
																		}

																		keystUniqRow_6.add(new_tUniqRow_6);
																		if (row17 == null) {

																			row17 = new row17Struct();
																		}
																		row17.PRODUCTMASTERNUMBER = copyOfcopyOfcopyOfsortie_size_0.PRODUCTMASTERNUMBER;
																		row17.PRODUCTMASTERSTYLEID = copyOfcopyOfcopyOfsortie_size_0.PRODUCTMASTERSTYLEID;
																		row17.LANGUAGEID = copyOfcopyOfcopyOfsortie_size_0.LANGUAGEID;
																		row17.TRANSLATEDSTYLEDESCRIPTION = copyOfcopyOfcopyOfsortie_size_0.TRANSLATEDSTYLEDESCRIPTION;
																		row17.TRANSLATEDSTYLENAME = copyOfcopyOfcopyOfsortie_size_0.TRANSLATEDSTYLENAME;
																		nb_uniques_tUniqRow_6++;
																	} else {
																		nb_duplicates_tUniqRow_6++;
																	}

																	tos_count_tUniqRow_6++;

																	/**
																	 * [tUniqRow_6 main ] stop
																	 */

																	/**
																	 * [tUniqRow_6 process_data_begin ] start
																	 */

																	currentComponent = "tUniqRow_6";

																	/**
																	 * [tUniqRow_6 process_data_begin ] stop
																	 */
// Start of branch "row17"
																	if (row17 != null) {

																		/**
																		 * [tFileOutputExcel_5 main ] start
																		 */

																		currentComponent = "tFileOutputExcel_5";

																		xlsxTool_tFileOutputExcel_5.addRow();

																		if (row17.PRODUCTMASTERNUMBER != null) {

																			xlsxTool_tFileOutputExcel_5
																					.addCellValue(String.valueOf(
																							row17.PRODUCTMASTERNUMBER));
																		} else {
																			xlsxTool_tFileOutputExcel_5
																					.addCellNullValue();
																		}

																		if (row17.PRODUCTMASTERSTYLEID != null) {

																			xlsxTool_tFileOutputExcel_5
																					.addCellValue(String.valueOf(
																							row17.PRODUCTMASTERSTYLEID));
																		} else {
																			xlsxTool_tFileOutputExcel_5
																					.addCellNullValue();
																		}

																		if (row17.LANGUAGEID != null) {

																			xlsxTool_tFileOutputExcel_5.addCellValue(
																					String.valueOf(row17.LANGUAGEID));
																		} else {
																			xlsxTool_tFileOutputExcel_5
																					.addCellNullValue();
																		}

																		if (row17.TRANSLATEDSTYLEDESCRIPTION != null) {

																			xlsxTool_tFileOutputExcel_5
																					.addCellValue(String.valueOf(
																							row17.TRANSLATEDSTYLEDESCRIPTION));
																		} else {
																			xlsxTool_tFileOutputExcel_5
																					.addCellNullValue();
																		}

																		if (row17.TRANSLATEDSTYLENAME != null) {

																			xlsxTool_tFileOutputExcel_5
																					.addCellValue(String.valueOf(
																							row17.TRANSLATEDSTYLENAME));
																		} else {
																			xlsxTool_tFileOutputExcel_5
																					.addCellNullValue();
																		}

																		nb_line_tFileOutputExcel_5++;

																		tos_count_tFileOutputExcel_5++;

																		/**
																		 * [tFileOutputExcel_5 main ] stop
																		 */

																		/**
																		 * [tFileOutputExcel_5 process_data_begin ]
																		 * start
																		 */

																		currentComponent = "tFileOutputExcel_5";

																		/**
																		 * [tFileOutputExcel_5 process_data_begin ] stop
																		 */

																		/**
																		 * [tFileOutputExcel_5 process_data_end ] start
																		 */

																		currentComponent = "tFileOutputExcel_5";

																		/**
																		 * [tFileOutputExcel_5 process_data_end ] stop
																		 */

																	} // End of branch "row17"

																	/**
																	 * [tUniqRow_6 process_data_end ] start
																	 */

																	currentComponent = "tUniqRow_6";

																	/**
																	 * [tUniqRow_6 process_data_end ] stop
																	 */

																} // End of branch "copyOfcopyOfcopyOfsortie_size_0"

																/**
																 * [tMap_9 process_data_end ] start
																 */

																currentComponent = "tMap_9";

																/**
																 * [tMap_9 process_data_end ] stop
																 */

															} // End of branch "sortie_full_fashion"

															/**
															 * [tMap_4 process_data_end ] start
															 */

															currentComponent = "tMap_4";

															/**
															 * [tMap_4 process_data_end ] stop
															 */

														} // End of branch "sortie_full_"

// Start of branch "copyOfcopyOfsortie_size"
														if (copyOfcopyOfsortie_size != null) {

															/**
															 * [tUniqRow_22 main ] start
															 */

															currentComponent = "tUniqRow_22";

															row37 = null;
															if (copyOfcopyOfsortie_size.PRODUCTMASTERNUMBER == null) {
																finder_tUniqRow_22.PRODUCTMASTERNUMBER = null;
															} else {
																finder_tUniqRow_22.PRODUCTMASTERNUMBER = copyOfcopyOfsortie_size.PRODUCTMASTERNUMBER
																		.toLowerCase();
															}
															if (copyOfcopyOfsortie_size.PRODUCTMASTERSIZEID == null) {
																finder_tUniqRow_22.PRODUCTMASTERSIZEID = null;
															} else {
																finder_tUniqRow_22.PRODUCTMASTERSIZEID = copyOfcopyOfsortie_size.PRODUCTMASTERSIZEID
																		.toLowerCase();
															}
															finder_tUniqRow_22.hashCodeDirty = true;
															if (!keystUniqRow_22.contains(finder_tUniqRow_22)) {
																KeyStruct_tUniqRow_22 new_tUniqRow_22 = new KeyStruct_tUniqRow_22();

																if (copyOfcopyOfsortie_size.PRODUCTMASTERNUMBER == null) {
																	new_tUniqRow_22.PRODUCTMASTERNUMBER = null;
																} else {
																	new_tUniqRow_22.PRODUCTMASTERNUMBER = copyOfcopyOfsortie_size.PRODUCTMASTERNUMBER
																			.toLowerCase();
																}
																if (copyOfcopyOfsortie_size.PRODUCTMASTERSIZEID == null) {
																	new_tUniqRow_22.PRODUCTMASTERSIZEID = null;
																} else {
																	new_tUniqRow_22.PRODUCTMASTERSIZEID = copyOfcopyOfsortie_size.PRODUCTMASTERSIZEID
																			.toLowerCase();
																}

																keystUniqRow_22.add(new_tUniqRow_22);
																if (row37 == null) {

																	row37 = new row37Struct();
																}
																row37.PRODUCTMASTERNUMBER = copyOfcopyOfsortie_size.PRODUCTMASTERNUMBER;
																row37.PRODUCTMASTERSIZEID = copyOfcopyOfsortie_size.PRODUCTMASTERSIZEID;
																row37.LANGUAGEID = copyOfcopyOfsortie_size.LANGUAGEID;
																row37.TRANSLATEDSIZEDESCRIPTION = copyOfcopyOfsortie_size.TRANSLATEDSIZEDESCRIPTION;
																row37.TRANSLATEDSIZENAME = copyOfcopyOfsortie_size.TRANSLATEDSIZENAME;
																nb_uniques_tUniqRow_22++;
															} else {
																nb_duplicates_tUniqRow_22++;
															}

															tos_count_tUniqRow_22++;

															/**
															 * [tUniqRow_22 main ] stop
															 */

															/**
															 * [tUniqRow_22 process_data_begin ] start
															 */

															currentComponent = "tUniqRow_22";

															/**
															 * [tUniqRow_22 process_data_begin ] stop
															 */
// Start of branch "row37"
															if (row37 != null) {

																/**
																 * [tFileOutputExcel_13 main ] start
																 */

																currentComponent = "tFileOutputExcel_13";

																xlsxTool_tFileOutputExcel_13.addRow();

																if (row37.PRODUCTMASTERNUMBER != null) {

																	xlsxTool_tFileOutputExcel_13.addCellValue(
																			String.valueOf(row37.PRODUCTMASTERNUMBER));
																} else {
																	xlsxTool_tFileOutputExcel_13.addCellNullValue();
																}

																if (row37.PRODUCTMASTERSIZEID != null) {

																	xlsxTool_tFileOutputExcel_13.addCellValue(
																			String.valueOf(row37.PRODUCTMASTERSIZEID));
																} else {
																	xlsxTool_tFileOutputExcel_13.addCellNullValue();
																}

																if (row37.LANGUAGEID != null) {

																	xlsxTool_tFileOutputExcel_13.addCellValue(
																			String.valueOf(row37.LANGUAGEID));
																} else {
																	xlsxTool_tFileOutputExcel_13.addCellNullValue();
																}

																if (row37.TRANSLATEDSIZEDESCRIPTION != null) {

																	xlsxTool_tFileOutputExcel_13.addCellValue(String
																			.valueOf(row37.TRANSLATEDSIZEDESCRIPTION));
																} else {
																	xlsxTool_tFileOutputExcel_13.addCellNullValue();
																}

																if (row37.TRANSLATEDSIZENAME != null) {

																	xlsxTool_tFileOutputExcel_13.addCellValue(
																			String.valueOf(row37.TRANSLATEDSIZENAME));
																} else {
																	xlsxTool_tFileOutputExcel_13.addCellNullValue();
																}

																nb_line_tFileOutputExcel_13++;

																tos_count_tFileOutputExcel_13++;

																/**
																 * [tFileOutputExcel_13 main ] stop
																 */

																/**
																 * [tFileOutputExcel_13 process_data_begin ] start
																 */

																currentComponent = "tFileOutputExcel_13";

																/**
																 * [tFileOutputExcel_13 process_data_begin ] stop
																 */

																/**
																 * [tFileOutputExcel_13 process_data_end ] start
																 */

																currentComponent = "tFileOutputExcel_13";

																/**
																 * [tFileOutputExcel_13 process_data_end ] stop
																 */

															} // End of branch "row37"

															/**
															 * [tUniqRow_22 process_data_end ] start
															 */

															currentComponent = "tUniqRow_22";

															/**
															 * [tUniqRow_22 process_data_end ] stop
															 */

														} // End of branch "copyOfcopyOfsortie_size"

														/**
														 * [tMap_23 process_data_end ] start
														 */

														currentComponent = "tMap_23";

														/**
														 * [tMap_23 process_data_end ] stop
														 */

													} // End of branch "sortie_full_COO"

													/**
													 * [tMap_6 process_data_end ] start
													 */

													currentComponent = "tMap_6";

													/**
													 * [tMap_6 process_data_end ] stop
													 */

												} // End of branch "copyOfcopyOfsortie_full"

// Start of branch "copyOfcopyOfsortie_product"
												if (copyOfcopyOfsortie_product != null) {

													/**
													 * [tUniqRow_3 main ] start
													 */

													currentComponent = "tUniqRow_3";

													row2 = null;
													if (copyOfcopyOfsortie_product.ITEMID == null) {
														finder_tUniqRow_3.ITEMID = null;
													} else {
														finder_tUniqRow_3.ITEMID = copyOfcopyOfsortie_product.ITEMID
																.toLowerCase();
													}
													if (copyOfcopyOfsortie_product.SEASONCODE == null) {
														finder_tUniqRow_3.SEASONCODE = null;
													} else {
														finder_tUniqRow_3.SEASONCODE = copyOfcopyOfsortie_product.SEASONCODE
																.toLowerCase();
													}
													finder_tUniqRow_3.hashCodeDirty = true;
													if (!keystUniqRow_3.contains(finder_tUniqRow_3)) {
														KeyStruct_tUniqRow_3 new_tUniqRow_3 = new KeyStruct_tUniqRow_3();

														if (copyOfcopyOfsortie_product.ITEMID == null) {
															new_tUniqRow_3.ITEMID = null;
														} else {
															new_tUniqRow_3.ITEMID = copyOfcopyOfsortie_product.ITEMID
																	.toLowerCase();
														}
														if (copyOfcopyOfsortie_product.SEASONCODE == null) {
															new_tUniqRow_3.SEASONCODE = null;
														} else {
															new_tUniqRow_3.SEASONCODE = copyOfcopyOfsortie_product.SEASONCODE
																	.toLowerCase();
														}

														keystUniqRow_3.add(new_tUniqRow_3);
														if (row2 == null) {

															row2 = new row2Struct();
														}
														row2.ITEMID = copyOfcopyOfsortie_product.ITEMID;
														row2.SEASONCODE = copyOfcopyOfsortie_product.SEASONCODE;
														row2.ISDEFAULT = copyOfcopyOfsortie_product.ISDEFAULT;
														row2.NOOS = copyOfcopyOfsortie_product.NOOS;
														nb_uniques_tUniqRow_3++;
													} else {
														nb_duplicates_tUniqRow_3++;
													}

													tos_count_tUniqRow_3++;

													/**
													 * [tUniqRow_3 main ] stop
													 */

													/**
													 * [tUniqRow_3 process_data_begin ] start
													 */

													currentComponent = "tUniqRow_3";

													/**
													 * [tUniqRow_3 process_data_begin ] stop
													 */
// Start of branch "row2"
													if (row2 != null) {

														/**
														 * [tFileOutputExcel_1 main ] start
														 */

														currentComponent = "tFileOutputExcel_1";

														xlsxTool_tFileOutputExcel_1.addRow();

														if (row2.ITEMID != null) {

															xlsxTool_tFileOutputExcel_1
																	.addCellValue(String.valueOf(row2.ITEMID));
														} else {
															xlsxTool_tFileOutputExcel_1.addCellNullValue();
														}

														if (row2.SEASONCODE != null) {

															xlsxTool_tFileOutputExcel_1
																	.addCellValue(String.valueOf(row2.SEASONCODE));
														} else {
															xlsxTool_tFileOutputExcel_1.addCellNullValue();
														}

														if (row2.ISDEFAULT != null) {

															xlsxTool_tFileOutputExcel_1
																	.addCellValue(String.valueOf(row2.ISDEFAULT));
														} else {
															xlsxTool_tFileOutputExcel_1.addCellNullValue();
														}

														if (row2.NOOS != null) {

															xlsxTool_tFileOutputExcel_1
																	.addCellValue(String.valueOf(row2.NOOS));
														} else {
															xlsxTool_tFileOutputExcel_1.addCellNullValue();
														}

														nb_line_tFileOutputExcel_1++;

														tos_count_tFileOutputExcel_1++;

														/**
														 * [tFileOutputExcel_1 main ] stop
														 */

														/**
														 * [tFileOutputExcel_1 process_data_begin ] start
														 */

														currentComponent = "tFileOutputExcel_1";

														/**
														 * [tFileOutputExcel_1 process_data_begin ] stop
														 */

														/**
														 * [tFileOutputExcel_1 process_data_end ] start
														 */

														currentComponent = "tFileOutputExcel_1";

														/**
														 * [tFileOutputExcel_1 process_data_end ] stop
														 */

													} // End of branch "row2"

													/**
													 * [tUniqRow_3 process_data_end ] start
													 */

													currentComponent = "tUniqRow_3";

													/**
													 * [tUniqRow_3 process_data_end ] stop
													 */

												} // End of branch "copyOfcopyOfsortie_product"

												/**
												 * [tMap_5 process_data_end ] start
												 */

												currentComponent = "tMap_5";

												/**
												 * [tMap_5 process_data_end ] stop
												 */

											} // End of branch "copyOfsortie_full_2"

// Start of branch "copyOfsortie_product"
											if (copyOfsortie_product != null) {

												/**
												 * [tUniqRow_2 main ] start
												 */

												currentComponent = "tUniqRow_2";

												row5 = null;
												if (copyOfsortie_product.PRODUCTNUMBER == null) {
													finder_tUniqRow_2.PRODUCTNUMBER = null;
												} else {
													finder_tUniqRow_2.PRODUCTNUMBER = copyOfsortie_product.PRODUCTNUMBER
															.toLowerCase();
												}
												finder_tUniqRow_2.hashCodeDirty = true;
												if (!keystUniqRow_2.contains(finder_tUniqRow_2)) {
													KeyStruct_tUniqRow_2 new_tUniqRow_2 = new KeyStruct_tUniqRow_2();

													if (copyOfsortie_product.PRODUCTNUMBER == null) {
														new_tUniqRow_2.PRODUCTNUMBER = null;
													} else {
														new_tUniqRow_2.PRODUCTNUMBER = copyOfsortie_product.PRODUCTNUMBER
																.toLowerCase();
													}

													keystUniqRow_2.add(new_tUniqRow_2);
													if (row5 == null) {

														row5 = new row5Struct();
													}
													row5.PRODUCTNUMBER = copyOfsortie_product.PRODUCTNUMBER;
													row5.PRODUCTCATEGORYNAME = copyOfsortie_product.PRODUCTCATEGORYNAME;
													row5.PRODUCTCATEGORYHIERARCHYNAME = copyOfsortie_product.PRODUCTCATEGORYHIERARCHYNAME;
													nb_uniques_tUniqRow_2++;
												} else {
													nb_duplicates_tUniqRow_2++;
												}

												tos_count_tUniqRow_2++;

												/**
												 * [tUniqRow_2 main ] stop
												 */

												/**
												 * [tUniqRow_2 process_data_begin ] start
												 */

												currentComponent = "tUniqRow_2";

												/**
												 * [tUniqRow_2 process_data_begin ] stop
												 */
// Start of branch "row5"
												if (row5 != null) {

													/**
													 * [tHashOutput_2 main ] start
													 */

													currentComponent = "tHashOutput_2";

													row5Struct oneRow_tHashOutput_2 = new row5Struct();

													oneRow_tHashOutput_2.PRODUCTNUMBER = row5.PRODUCTNUMBER;
													oneRow_tHashOutput_2.PRODUCTCATEGORYNAME = row5.PRODUCTCATEGORYNAME;
													oneRow_tHashOutput_2.PRODUCTCATEGORYHIERARCHYNAME = row5.PRODUCTCATEGORYHIERARCHYNAME;

													tHashFile_tHashOutput_2.put(oneRow_tHashOutput_2);
													nb_line_tHashOutput_2++;

													tos_count_tHashOutput_2++;

													/**
													 * [tHashOutput_2 main ] stop
													 */

													/**
													 * [tHashOutput_2 process_data_begin ] start
													 */

													currentComponent = "tHashOutput_2";

													/**
													 * [tHashOutput_2 process_data_begin ] stop
													 */

													/**
													 * [tHashOutput_2 process_data_end ] start
													 */

													currentComponent = "tHashOutput_2";

													/**
													 * [tHashOutput_2 process_data_end ] stop
													 */

												} // End of branch "row5"

												/**
												 * [tUniqRow_2 process_data_end ] start
												 */

												currentComponent = "tUniqRow_2";

												/**
												 * [tUniqRow_2 process_data_end ] stop
												 */

											} // End of branch "copyOfsortie_product"

											/**
											 * [tMap_3 process_data_end ] start
											 */

											currentComponent = "tMap_3";

											/**
											 * [tMap_3 process_data_end ] stop
											 */

											/**
											 * [tLogRow_2 process_data_end ] start
											 */

											currentComponent = "tLogRow_2";

											/**
											 * [tLogRow_2 process_data_end ] stop
											 */

										} // End of branch "sortie_full_cat"

										/**
										 * [tMap_2 process_data_end ] start
										 */

										currentComponent = "tMap_2";

										/**
										 * [tMap_2 process_data_end ] stop
										 */

									} // End of branch "sortie_Excel"

									/**
									 * [tMap_7 process_data_end ] start
									 */

									currentComponent = "tMap_7";

									/**
									 * [tMap_7 process_data_end ] stop
									 */

								} // End of branch "sortie"

								/**
								 * [tMap_12 process_data_end ] start
								 */

								currentComponent = "tMap_12";

								/**
								 * [tMap_12 process_data_end ] stop
								 */

							} // End of branch "row7"

							/**
							 * [tFilterRow_2 process_data_end ] start
							 */

							currentComponent = "tFilterRow_2";

							/**
							 * [tFilterRow_2 process_data_end ] stop
							 */

						} // End of branch "sortie_Excel1"

						/**
						 * [tMap_1 process_data_end ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_6 process_data_end ] start
						 */

						currentComponent = "tDBInput_6";

						/**
						 * [tDBInput_6 process_data_end ] stop
						 */

						/**
						 * [tDBInput_6 end ] start
						 */

						currentComponent = "tDBInput_6";

					}
				} finally {
					if (rs_tDBInput_6 != null) {
						rs_tDBInput_6.close();
					}
					if (stmt_tDBInput_6 != null) {
						stmt_tDBInput_6.close();
					}
					if (conn_tDBInput_6 != null && !conn_tDBInput_6.isClosed()) {

						conn_tDBInput_6.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_6_NB_LINE", nb_line_tDBInput_6);

				ok_Hash.put("tDBInput_6", true);
				end_Hash.put("tDBInput_6", System.currentTimeMillis());

				tWarn_1Process(globalMap);

				/**
				 * [tDBInput_6 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
// ###############################      

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tFilterRow_2 end ] start
				 */

				currentComponent = "tFilterRow_2";

				globalMap.put("tFilterRow_2_NB_LINE", nb_line_tFilterRow_2);
				globalMap.put("tFilterRow_2_NB_LINE_OK", nb_line_ok_tFilterRow_2);
				globalMap.put("tFilterRow_2_NB_LINE_REJECT", nb_line_reject_tFilterRow_2);

				ok_Hash.put("tFilterRow_2", true);
				end_Hash.put("tFilterRow_2", System.currentTimeMillis());

				/**
				 * [tFilterRow_2 end ] stop
				 */

				/**
				 * [tMap_12 end ] start
				 */

				currentComponent = "tMap_12";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row25 != null) {
					tHash_Lookup_row25.endGet();
				}
				globalMap.remove("tHash_Lookup_row25");

// ###############################      

				ok_Hash.put("tMap_12", true);
				end_Hash.put("tMap_12", System.currentTimeMillis());

				/**
				 * [tMap_12 end ] stop
				 */

				/**
				 * [tMap_7 end ] start
				 */

				currentComponent = "tMap_7";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_copyOfcopyOfsortie_fashion != null) {
					tHash_Lookup_copyOfcopyOfsortie_fashion.endGet();
				}
				globalMap.remove("tHash_Lookup_copyOfcopyOfsortie_fashion");

				if (tHash_Lookup_row18 != null) {
					tHash_Lookup_row18.endGet();
				}
				globalMap.remove("tHash_Lookup_row18");

				if (tHash_Lookup_row19 != null) {
					tHash_Lookup_row19.endGet();
				}
				globalMap.remove("tHash_Lookup_row19");

// ###############################      

				ok_Hash.put("tMap_7", true);
				end_Hash.put("tMap_7", System.currentTimeMillis());

				/**
				 * [tMap_7 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

// ###############################
// # Lookup hashes releasing
// ###############################      

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tLogRow_2 end ] start
				 */

				currentComponent = "tLogRow_2";

//////
//////
				globalMap.put("tLogRow_2_NB_LINE", nb_line_tLogRow_2);

///////////////////////    			

				ok_Hash.put("tLogRow_2", true);
				end_Hash.put("tLogRow_2", System.currentTimeMillis());

				/**
				 * [tLogRow_2 end ] stop
				 */

				/**
				 * [tMap_3 end ] start
				 */

				currentComponent = "tMap_3";

// ###############################
// # Lookup hashes releasing
// ###############################      

				ok_Hash.put("tMap_3", true);
				end_Hash.put("tMap_3", System.currentTimeMillis());

				/**
				 * [tMap_3 end ] stop
				 */

				/**
				 * [tMap_5 end ] start
				 */

				currentComponent = "tMap_5";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row28 != null) {
					tHash_Lookup_row28.endGet();
				}
				globalMap.remove("tHash_Lookup_row28");

// ###############################      

				ok_Hash.put("tMap_5", true);
				end_Hash.put("tMap_5", System.currentTimeMillis());

				/**
				 * [tMap_5 end ] stop
				 */

				/**
				 * [tMap_6 end ] start
				 */

				currentComponent = "tMap_6";

// ###############################
// # Lookup hashes releasing
// ###############################      

				ok_Hash.put("tMap_6", true);
				end_Hash.put("tMap_6", System.currentTimeMillis());

				/**
				 * [tMap_6 end ] stop
				 */

				/**
				 * [tMap_23 end ] start
				 */

				currentComponent = "tMap_23";

// ###############################
// # Lookup hashes releasing
// ###############################      

				ok_Hash.put("tMap_23", true);
				end_Hash.put("tMap_23", System.currentTimeMillis());

				/**
				 * [tMap_23 end ] stop
				 */

				/**
				 * [tMap_4 end ] start
				 */

				currentComponent = "tMap_4";

// ###############################
// # Lookup hashes releasing
// ###############################      

				ok_Hash.put("tMap_4", true);
				end_Hash.put("tMap_4", System.currentTimeMillis());

				/**
				 * [tMap_4 end ] stop
				 */

				/**
				 * [tMap_9 end ] start
				 */

				currentComponent = "tMap_9";

// ###############################
// # Lookup hashes releasing
// ###############################      

				ok_Hash.put("tMap_9", true);
				end_Hash.put("tMap_9", System.currentTimeMillis());

				/**
				 * [tMap_9 end ] stop
				 */

				/**
				 * [tMap_10 end ] start
				 */

				currentComponent = "tMap_10";

// ###############################
// # Lookup hashes releasing
// ###############################      

				ok_Hash.put("tMap_10", true);
				end_Hash.put("tMap_10", System.currentTimeMillis());

				/**
				 * [tMap_10 end ] stop
				 */

				/**
				 * [tUniqRow_7 end ] start
				 */

				currentComponent = "tUniqRow_7";

				globalMap.put("tUniqRow_7_NB_UNIQUES", nb_uniques_tUniqRow_7);
				globalMap.put("tUniqRow_7_NB_DUPLICATES", nb_duplicates_tUniqRow_7);

				ok_Hash.put("tUniqRow_7", true);
				end_Hash.put("tUniqRow_7", System.currentTimeMillis());

				/**
				 * [tUniqRow_7 end ] stop
				 */

				/**
				 * [tFilterRow_1 end ] start
				 */

				currentComponent = "tFilterRow_1";

				globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_OK", nb_line_ok_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_REJECT", nb_line_reject_tFilterRow_1);

				ok_Hash.put("tFilterRow_1", true);
				end_Hash.put("tFilterRow_1", System.currentTimeMillis());

				/**
				 * [tFilterRow_1 end ] stop
				 */

				/**
				 * [tFileOutputExcel_6 end ] start
				 */

				currentComponent = "tFileOutputExcel_6";

				xlsxTool_tFileOutputExcel_6.writeExcel(fileName_tFileOutputExcel_6, true);

				nb_line_tFileOutputExcel_6 = nb_line_tFileOutputExcel_6 - 1;

				globalMap.put("tFileOutputExcel_6_NB_LINE", nb_line_tFileOutputExcel_6);

				ok_Hash.put("tFileOutputExcel_6", true);
				end_Hash.put("tFileOutputExcel_6", System.currentTimeMillis());

				/**
				 * [tFileOutputExcel_6 end ] stop
				 */

				/**
				 * [tUniqRow_6 end ] start
				 */

				currentComponent = "tUniqRow_6";

				globalMap.put("tUniqRow_6_NB_UNIQUES", nb_uniques_tUniqRow_6);
				globalMap.put("tUniqRow_6_NB_DUPLICATES", nb_duplicates_tUniqRow_6);

				ok_Hash.put("tUniqRow_6", true);
				end_Hash.put("tUniqRow_6", System.currentTimeMillis());

				/**
				 * [tUniqRow_6 end ] stop
				 */

				/**
				 * [tFileOutputExcel_5 end ] start
				 */

				currentComponent = "tFileOutputExcel_5";

				xlsxTool_tFileOutputExcel_5.writeExcel(fileName_tFileOutputExcel_5, true);

				nb_line_tFileOutputExcel_5 = nb_line_tFileOutputExcel_5 - 1;

				globalMap.put("tFileOutputExcel_5_NB_LINE", nb_line_tFileOutputExcel_5);

				ok_Hash.put("tFileOutputExcel_5", true);
				end_Hash.put("tFileOutputExcel_5", System.currentTimeMillis());

				/**
				 * [tFileOutputExcel_5 end ] stop
				 */

				/**
				 * [tUniqRow_22 end ] start
				 */

				currentComponent = "tUniqRow_22";

				globalMap.put("tUniqRow_22_NB_UNIQUES", nb_uniques_tUniqRow_22);
				globalMap.put("tUniqRow_22_NB_DUPLICATES", nb_duplicates_tUniqRow_22);

				ok_Hash.put("tUniqRow_22", true);
				end_Hash.put("tUniqRow_22", System.currentTimeMillis());

				/**
				 * [tUniqRow_22 end ] stop
				 */

				/**
				 * [tFileOutputExcel_13 end ] start
				 */

				currentComponent = "tFileOutputExcel_13";

				xlsxTool_tFileOutputExcel_13.writeExcel(fileName_tFileOutputExcel_13, true);

				nb_line_tFileOutputExcel_13 = nb_line_tFileOutputExcel_13 - 1;

				globalMap.put("tFileOutputExcel_13_NB_LINE", nb_line_tFileOutputExcel_13);

				ok_Hash.put("tFileOutputExcel_13", true);
				end_Hash.put("tFileOutputExcel_13", System.currentTimeMillis());

				/**
				 * [tFileOutputExcel_13 end ] stop
				 */

				/**
				 * [tUniqRow_3 end ] start
				 */

				currentComponent = "tUniqRow_3";

				globalMap.put("tUniqRow_3_NB_UNIQUES", nb_uniques_tUniqRow_3);
				globalMap.put("tUniqRow_3_NB_DUPLICATES", nb_duplicates_tUniqRow_3);

				ok_Hash.put("tUniqRow_3", true);
				end_Hash.put("tUniqRow_3", System.currentTimeMillis());

				/**
				 * [tUniqRow_3 end ] stop
				 */

				/**
				 * [tFileOutputExcel_1 end ] start
				 */

				currentComponent = "tFileOutputExcel_1";

				xlsxTool_tFileOutputExcel_1.writeExcel(fileName_tFileOutputExcel_1, true);

				nb_line_tFileOutputExcel_1 = nb_line_tFileOutputExcel_1 - 1;

				globalMap.put("tFileOutputExcel_1_NB_LINE", nb_line_tFileOutputExcel_1);

				ok_Hash.put("tFileOutputExcel_1", true);
				end_Hash.put("tFileOutputExcel_1", System.currentTimeMillis());

				/**
				 * [tFileOutputExcel_1 end ] stop
				 */

				/**
				 * [tUniqRow_2 end ] start
				 */

				currentComponent = "tUniqRow_2";

				globalMap.put("tUniqRow_2_NB_UNIQUES", nb_uniques_tUniqRow_2);
				globalMap.put("tUniqRow_2_NB_DUPLICATES", nb_duplicates_tUniqRow_2);

				ok_Hash.put("tUniqRow_2", true);
				end_Hash.put("tUniqRow_2", System.currentTimeMillis());

				/**
				 * [tUniqRow_2 end ] stop
				 */

				/**
				 * [tHashOutput_2 end ] start
				 */

				currentComponent = "tHashOutput_2";

				globalMap.put("tHashOutput_2_NB_LINE", nb_line_tHashOutput_2);

				ok_Hash.put("tHashOutput_2", true);
				end_Hash.put("tHashOutput_2", System.currentTimeMillis());

				tHashInput_2Process(globalMap);

				/**
				 * [tHashOutput_2 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_5"
			globalMap.remove("tHash_Lookup_row28");

			// free memory for "tMap_7"
			globalMap.remove("tHash_Lookup_copyOfcopyOfsortie_fashion");

			// free memory for "tMap_7"
			globalMap.remove("tHash_Lookup_row18");

			// free memory for "tMap_7"
			globalMap.remove("tHash_Lookup_row19");

			// free memory for "tMap_12"
			globalMap.remove("tHash_Lookup_row25");

			try {

				/**
				 * [tDBInput_6 finally ] start
				 */

				currentComponent = "tDBInput_6";

				/**
				 * [tDBInput_6 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tFilterRow_2 finally ] start
				 */

				currentComponent = "tFilterRow_2";

				/**
				 * [tFilterRow_2 finally ] stop
				 */

				/**
				 * [tMap_12 finally ] start
				 */

				currentComponent = "tMap_12";

				/**
				 * [tMap_12 finally ] stop
				 */

				/**
				 * [tMap_7 finally ] start
				 */

				currentComponent = "tMap_7";

				/**
				 * [tMap_7 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tLogRow_2 finally ] start
				 */

				currentComponent = "tLogRow_2";

				/**
				 * [tLogRow_2 finally ] stop
				 */

				/**
				 * [tMap_3 finally ] start
				 */

				currentComponent = "tMap_3";

				/**
				 * [tMap_3 finally ] stop
				 */

				/**
				 * [tMap_5 finally ] start
				 */

				currentComponent = "tMap_5";

				/**
				 * [tMap_5 finally ] stop
				 */

				/**
				 * [tMap_6 finally ] start
				 */

				currentComponent = "tMap_6";

				/**
				 * [tMap_6 finally ] stop
				 */

				/**
				 * [tMap_23 finally ] start
				 */

				currentComponent = "tMap_23";

				/**
				 * [tMap_23 finally ] stop
				 */

				/**
				 * [tMap_4 finally ] start
				 */

				currentComponent = "tMap_4";

				/**
				 * [tMap_4 finally ] stop
				 */

				/**
				 * [tMap_9 finally ] start
				 */

				currentComponent = "tMap_9";

				/**
				 * [tMap_9 finally ] stop
				 */

				/**
				 * [tMap_10 finally ] start
				 */

				currentComponent = "tMap_10";

				/**
				 * [tMap_10 finally ] stop
				 */

				/**
				 * [tUniqRow_7 finally ] start
				 */

				currentComponent = "tUniqRow_7";

				/**
				 * [tUniqRow_7 finally ] stop
				 */

				/**
				 * [tFilterRow_1 finally ] start
				 */

				currentComponent = "tFilterRow_1";

				/**
				 * [tFilterRow_1 finally ] stop
				 */

				/**
				 * [tFileOutputExcel_6 finally ] start
				 */

				currentComponent = "tFileOutputExcel_6";

				/**
				 * [tFileOutputExcel_6 finally ] stop
				 */

				/**
				 * [tUniqRow_6 finally ] start
				 */

				currentComponent = "tUniqRow_6";

				/**
				 * [tUniqRow_6 finally ] stop
				 */

				/**
				 * [tFileOutputExcel_5 finally ] start
				 */

				currentComponent = "tFileOutputExcel_5";

				/**
				 * [tFileOutputExcel_5 finally ] stop
				 */

				/**
				 * [tUniqRow_22 finally ] start
				 */

				currentComponent = "tUniqRow_22";

				/**
				 * [tUniqRow_22 finally ] stop
				 */

				/**
				 * [tFileOutputExcel_13 finally ] start
				 */

				currentComponent = "tFileOutputExcel_13";

				/**
				 * [tFileOutputExcel_13 finally ] stop
				 */

				/**
				 * [tUniqRow_3 finally ] start
				 */

				currentComponent = "tUniqRow_3";

				/**
				 * [tUniqRow_3 finally ] stop
				 */

				/**
				 * [tFileOutputExcel_1 finally ] start
				 */

				currentComponent = "tFileOutputExcel_1";

				/**
				 * [tFileOutputExcel_1 finally ] stop
				 */

				/**
				 * [tUniqRow_2 finally ] start
				 */

				currentComponent = "tUniqRow_2";

				/**
				 * [tUniqRow_2 finally ] stop
				 */

				/**
				 * [tHashOutput_2 finally ] start
				 */

				currentComponent = "tHashOutput_2";

				/**
				 * [tHashOutput_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 1);
	}

	public void tWarn_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tWarn_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tWarn_1 begin ] start
				 */

				ok_Hash.put("tWarn_1", false);
				start_Hash.put("tWarn_1", System.currentTimeMillis());

				currentComponent = "tWarn_1";

				int tos_count_tWarn_1 = 0;

				/**
				 * [tWarn_1 begin ] stop
				 */

				/**
				 * [tWarn_1 main ] start
				 */

				currentComponent = "tWarn_1";

				try {

					resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_1", "", Thread.currentThread().getId() + "", "INFO",
							"", "Nb line found :" + ((Integer) globalMap.get("tDBInput_6_NB_LINE")), "", "");
					talendLogs_LOGS.addMessage("tWarn", "tWarn_1", 3,
							"Nb line found :" + ((Integer) globalMap.get("tDBInput_6_NB_LINE")), 3);
					talendLogs_LOGSProcess(globalMap);
					globalMap.put("tWarn_1_WARN_MESSAGES",
							"Nb line found :" + ((Integer) globalMap.get("tDBInput_6_NB_LINE")));
					globalMap.put("tWarn_1_WARN_PRIORITY", 3);
					globalMap.put("tWarn_1_WARN_CODE", 3);

				} catch (Exception e_tWarn_1) {
					logIgnoredError(
							String.format("tWarn_1 - tWarn failed to log message due to internal error: %s", e_tWarn_1),
							e_tWarn_1);
				}

				tos_count_tWarn_1++;

				/**
				 * [tWarn_1 main ] stop
				 */

				/**
				 * [tWarn_1 process_data_begin ] start
				 */

				currentComponent = "tWarn_1";

				/**
				 * [tWarn_1 process_data_begin ] stop
				 */

				/**
				 * [tWarn_1 process_data_end ] start
				 */

				currentComponent = "tWarn_1";

				/**
				 * [tWarn_1 process_data_end ] stop
				 */

				/**
				 * [tWarn_1 end ] start
				 */

				currentComponent = "tWarn_1";

				ok_Hash.put("tWarn_1", true);
				end_Hash.put("tWarn_1", System.currentTimeMillis());

				/**
				 * [tWarn_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tWarn_1 finally ] start
				 */

				currentComponent = "tWarn_1";

				/**
				 * [tWarn_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tWarn_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tJava_1 begin ] start
				 */

				ok_Hash.put("tJava_1", false);
				start_Hash.put("tJava_1", System.currentTimeMillis());

				currentComponent = "tJava_1";

				int tos_count_tJava_1 = 0;

				System.out.println("SUB JOB EXTRACT PRODUCT 2");
				System.out.println(context.ExcelFileName);
				System.out.println(context.CreationDate);

				/**
				 * [tJava_1 begin ] stop
				 */

				/**
				 * [tJava_1 main ] start
				 */

				currentComponent = "tJava_1";

				tos_count_tJava_1++;

				/**
				 * [tJava_1 main ] stop
				 */

				/**
				 * [tJava_1 process_data_begin ] start
				 */

				currentComponent = "tJava_1";

				/**
				 * [tJava_1 process_data_begin ] stop
				 */

				/**
				 * [tJava_1 process_data_end ] start
				 */

				currentComponent = "tJava_1";

				/**
				 * [tJava_1 process_data_end ] stop
				 */

				/**
				 * [tJava_1 end ] start
				 */

				currentComponent = "tJava_1";

				ok_Hash.put("tJava_1", true);
				end_Hash.put("tJava_1", System.currentTimeMillis());

				/**
				 * [tJava_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_1 finally ] start
				 */

				currentComponent = "tJava_1";

				/**
				 * [tJava_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}

	public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPostjob_1 begin ] start
				 */

				ok_Hash.put("tPostjob_1", false);
				start_Hash.put("tPostjob_1", System.currentTimeMillis());

				currentComponent = "tPostjob_1";

				int tos_count_tPostjob_1 = 0;

				/**
				 * [tPostjob_1 begin ] stop
				 */

				/**
				 * [tPostjob_1 main ] start
				 */

				currentComponent = "tPostjob_1";

				tos_count_tPostjob_1++;

				/**
				 * [tPostjob_1 main ] stop
				 */

				/**
				 * [tPostjob_1 process_data_begin ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 process_data_begin ] stop
				 */

				/**
				 * [tPostjob_1 process_data_end ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 process_data_end ] stop
				 */

				/**
				 * [tPostjob_1 end ] start
				 */

				currentComponent = "tPostjob_1";

				ok_Hash.put("tPostjob_1", true);
				end_Hash.put("tPostjob_1", System.currentTimeMillis());

				/**
				 * [tPostjob_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPostjob_1 finally ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}

	public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPrejob_1 begin ] start
				 */

				ok_Hash.put("tPrejob_1", false);
				start_Hash.put("tPrejob_1", System.currentTimeMillis());

				currentComponent = "tPrejob_1";

				int tos_count_tPrejob_1 = 0;

				/**
				 * [tPrejob_1 begin ] stop
				 */

				/**
				 * [tPrejob_1 main ] start
				 */

				currentComponent = "tPrejob_1";

				tos_count_tPrejob_1++;

				/**
				 * [tPrejob_1 main ] stop
				 */

				/**
				 * [tPrejob_1 process_data_begin ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_begin ] stop
				 */

				/**
				 * [tPrejob_1 process_data_end ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_end ] stop
				 */

				/**
				 * [tPrejob_1 end ] start
				 */

				currentComponent = "tPrejob_1";

				ok_Hash.put("tPrejob_1", true);
				end_Hash.put("tPrejob_1", System.currentTimeMillis());

				tJava_1Process(globalMap);

				/**
				 * [tPrejob_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPrejob_1 finally ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}

	public void connectionStatsLogs_CommitProcess(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("connectionStatsLogs_Commit_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [connectionStatsLogs_Commit begin ] start
				 */

				ok_Hash.put("connectionStatsLogs_Commit", false);
				start_Hash.put("connectionStatsLogs_Commit", System.currentTimeMillis());

				currentComponent = "connectionStatsLogs_Commit";

				int tos_count_connectionStatsLogs_Commit = 0;

				/**
				 * [connectionStatsLogs_Commit begin ] stop
				 */

				/**
				 * [connectionStatsLogs_Commit main ] start
				 */

				currentComponent = "connectionStatsLogs_Commit";

				java.sql.Connection conn_connectionStatsLogs_Commit = (java.sql.Connection) globalMap
						.get("conn_connectionStatsLogs");
				if (conn_connectionStatsLogs_Commit != null && !conn_connectionStatsLogs_Commit.isClosed()) {

					conn_connectionStatsLogs_Commit.commit();

				}

				tos_count_connectionStatsLogs_Commit++;

				/**
				 * [connectionStatsLogs_Commit main ] stop
				 */

				/**
				 * [connectionStatsLogs_Commit process_data_begin ] start
				 */

				currentComponent = "connectionStatsLogs_Commit";

				/**
				 * [connectionStatsLogs_Commit process_data_begin ] stop
				 */

				/**
				 * [connectionStatsLogs_Commit process_data_end ] start
				 */

				currentComponent = "connectionStatsLogs_Commit";

				/**
				 * [connectionStatsLogs_Commit process_data_end ] stop
				 */

				/**
				 * [connectionStatsLogs_Commit end ] start
				 */

				currentComponent = "connectionStatsLogs_Commit";

				ok_Hash.put("connectionStatsLogs_Commit", true);
				end_Hash.put("connectionStatsLogs_Commit", System.currentTimeMillis());

				/**
				 * [connectionStatsLogs_Commit end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [connectionStatsLogs_Commit finally ] start
				 */

				currentComponent = "connectionStatsLogs_Commit";

				/**
				 * [connectionStatsLogs_Commit finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("connectionStatsLogs_Commit_SUBPROCESS_STATE", 1);
	}

	public void connectionStatsLogsProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("connectionStatsLogs_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [connectionStatsLogs begin ] start
				 */

				ok_Hash.put("connectionStatsLogs", false);
				start_Hash.put("connectionStatsLogs", System.currentTimeMillis());

				currentComponent = "connectionStatsLogs";

				int tos_count_connectionStatsLogs = 0;

				String url_connectionStatsLogs = "jdbc:sqlserver://" + context.SQLSERVER_LOG_Server;
				String port_connectionStatsLogs = context.SQLSERVER_LOG_Port;
				String dbname_connectionStatsLogs = context.SQLSERVER_LOG_Database;
				if (!"".equals(port_connectionStatsLogs)) {
					url_connectionStatsLogs += ":" + context.SQLSERVER_LOG_Port;
				}
				if (!"".equals(dbname_connectionStatsLogs)) {

					url_connectionStatsLogs += ";databaseName=" + context.SQLSERVER_LOG_Database;
				}
				url_connectionStatsLogs += ";appName=" + projectName + ";" + context.SQLSERVER_LOG_AdditionalParams;
				String dbUser_connectionStatsLogs = context.SQLSERVER_LOG_Login;

				final String decryptedPassword_connectionStatsLogs = context.SQLSERVER_LOG_Password;
				String dbPwd_connectionStatsLogs = decryptedPassword_connectionStatsLogs;

				java.sql.Connection conn_connectionStatsLogs = null;

				String sharedConnectionName_connectionStatsLogs = "jdbc:sqlserver://" + context.SQLSERVER_LOG_Server
						+ ":" + context.SQLSERVER_LOG_Port + ";DatabaseName=" + context.SQLSERVER_LOG_Schema + ";"
						+ context.SQLSERVER_LOG_AdditionalParams + "" + "_StatsAndLog_Shared_Connection";
				conn_connectionStatsLogs = SharedDBConnection.getDBConnection(
						"com.microsoft.sqlserver.jdbc.SQLServerDriver", url_connectionStatsLogs,
						dbUser_connectionStatsLogs, dbPwd_connectionStatsLogs,
						sharedConnectionName_connectionStatsLogs);
				if (null != conn_connectionStatsLogs) {

					conn_connectionStatsLogs.setAutoCommit(false);
				}

				globalMap.put("dbschema_connectionStatsLogs", context.SQLSERVER_LOG_Schema);

				globalMap.put("db_connectionStatsLogs", context.SQLSERVER_LOG_Database);

				globalMap.put("conn_connectionStatsLogs", conn_connectionStatsLogs);

				globalMap.put("shareIdentitySetting_connectionStatsLogs", false);

				/**
				 * [connectionStatsLogs begin ] stop
				 */

				/**
				 * [connectionStatsLogs main ] start
				 */

				currentComponent = "connectionStatsLogs";

				tos_count_connectionStatsLogs++;

				/**
				 * [connectionStatsLogs main ] stop
				 */

				/**
				 * [connectionStatsLogs process_data_begin ] start
				 */

				currentComponent = "connectionStatsLogs";

				/**
				 * [connectionStatsLogs process_data_begin ] stop
				 */

				/**
				 * [connectionStatsLogs process_data_end ] start
				 */

				currentComponent = "connectionStatsLogs";

				/**
				 * [connectionStatsLogs process_data_end ] stop
				 */

				/**
				 * [connectionStatsLogs end ] start
				 */

				currentComponent = "connectionStatsLogs";

				ok_Hash.put("connectionStatsLogs", true);
				end_Hash.put("connectionStatsLogs", System.currentTimeMillis());

				/**
				 * [connectionStatsLogs end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [connectionStatsLogs finally ] start
				 */

				currentComponent = "connectionStatsLogs";

				/**
				 * [connectionStatsLogs finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("connectionStatsLogs_SUBPROCESS_STATE", 1);
	}

	public static class row_talendLogs_LOGSStruct
			implements routines.system.IPersistableRow<row_talendLogs_LOGSStruct> {
		final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[0];
		static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public Integer priority;

		public Integer getPriority() {
			return this.priority;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Integer code;

		public Integer getCode() {
			return this.code;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2.length) {
					if (length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2.length == 0) {
						commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[1024];
					} else {
						commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2, 0, length);
				strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRODUCTS_2, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRODUCTS_2) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.root_pid = readString(dis);

					this.father_pid = readString(dis);

					this.project = readString(dis);

					this.job = readString(dis);

					this.context = readString(dis);

					this.priority = readInteger(dis);

					this.type = readString(dis);

					this.origin = readString(dis);

					this.message = readString(dis);

					this.code = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.root_pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.context, dos);

				// Integer

				writeInteger(this.priority, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message, dos);

				// Integer

				writeInteger(this.code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",context=" + context);
			sb.append(",priority=" + String.valueOf(priority));
			sb.append(",type=" + type);
			sb.append(",origin=" + origin);
			sb.append(",message=" + message);
			sb.append(",code=" + String.valueOf(code));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_talendLogs_LOGSStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void talendLogs_LOGSProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("talendLogs_LOGS_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row_talendLogs_LOGSStruct row_talendLogs_LOGS = new row_talendLogs_LOGSStruct();

				/**
				 * [talendLogs_DB begin ] start
				 */

				ok_Hash.put("talendLogs_DB", false);
				start_Hash.put("talendLogs_DB", System.currentTimeMillis());

				currentVirtualComponent = "talendLogs_DB";

				currentComponent = "talendLogs_DB";

				int tos_count_talendLogs_DB = 0;

				int nb_line_talendLogs_DB = 0;
				int nb_line_update_talendLogs_DB = 0;
				int nb_line_inserted_talendLogs_DB = 0;
				int nb_line_deleted_talendLogs_DB = 0;
				int nb_line_rejected_talendLogs_DB = 0;

				int deletedCount_talendLogs_DB = 0;
				int updatedCount_talendLogs_DB = 0;
				int insertedCount_talendLogs_DB = 0;
				int rejectedCount_talendLogs_DB = 0;
				String dbschema_talendLogs_DB = null;
				String tableName_talendLogs_DB = null;
				boolean whetherReject_talendLogs_DB = false;

				java.util.Calendar calendar_talendLogs_DB = java.util.Calendar.getInstance();
				long year1_talendLogs_DB = TalendDate.parseDate("yyyy-MM-dd", "0001-01-01").getTime();
				long year2_talendLogs_DB = TalendDate.parseDate("yyyy-MM-dd", "1753-01-01").getTime();
				long year10000_talendLogs_DB = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss", "9999-12-31 24:00:00")
						.getTime();
				long date_talendLogs_DB;

				java.util.Calendar calendar_datetimeoffset_talendLogs_DB = java.util.Calendar
						.getInstance(java.util.TimeZone.getTimeZone("UTC"));

				java.sql.Connection conn_talendLogs_DB = null;
				String dbUser_talendLogs_DB = null;
				dbschema_talendLogs_DB = (String) globalMap.get("dbschema_connectionStatsLogs");
				conn_talendLogs_DB = (java.sql.Connection) globalMap.get("conn_connectionStatsLogs");

				int batchSize_talendLogs_DB = 10000;
				int batchSizeCounter_talendLogs_DB = 0;

				if (dbschema_talendLogs_DB == null || dbschema_talendLogs_DB.trim().length() == 0) {
					tableName_talendLogs_DB = "log";
				} else {
					tableName_talendLogs_DB = dbschema_talendLogs_DB + "].[" + "log";
				}
				int count_talendLogs_DB = 0;

				// [%connection%][checktable][tableName]
				String keyCheckTable_talendLogs_DB = conn_talendLogs_DB + "[checktable]" + "[" + "log" + "]";

				if (GlobalResource.resourceMap.get(keyCheckTable_talendLogs_DB) == null) {// }

					synchronized (GlobalResource.resourceLockMap.get(keyCheckTable_talendLogs_DB)) {// }
						if (GlobalResource.resourceMap.get(keyCheckTable_talendLogs_DB) == null) {// }
							boolean whetherExist_talendLogs_DB = false;
							try (java.sql.Statement isExistStmt_talendLogs_DB = conn_talendLogs_DB.createStatement()) {
								try {
									isExistStmt_talendLogs_DB
											.execute("SELECT TOP 1 1 FROM [" + tableName_talendLogs_DB + "]");
									whetherExist_talendLogs_DB = true;
								} catch (java.lang.Exception e) {
									whetherExist_talendLogs_DB = false;
								}
							}
							if (!whetherExist_talendLogs_DB) {
								try (java.sql.Statement stmtCreate_talendLogs_DB = conn_talendLogs_DB
										.createStatement()) {
									stmtCreate_talendLogs_DB.execute("CREATE TABLE [" + tableName_talendLogs_DB
											+ "]([moment] DATETIME ,[pid] VARCHAR(20)  ,[root_pid] VARCHAR(20)  ,[father_pid] VARCHAR(20)  ,[project] VARCHAR(50)  ,[job] VARCHAR(255)  ,[context] VARCHAR(50)  ,[priority] INT ,[type] VARCHAR(255)  ,[origin] VARCHAR(255)  ,[message] VARCHAR(255)  ,[code] INT )");
								}
							}
							GlobalResource.resourceMap.put(keyCheckTable_talendLogs_DB, true);
							// {{{
						} // end of if
					} // end synchronized
				}
				String insert_talendLogs_DB = "INSERT INTO [" + tableName_talendLogs_DB
						+ "] ([moment],[pid],[root_pid],[father_pid],[project],[job],[context],[priority],[type],[origin],[message],[code]) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_talendLogs_DB = null;
				String keyPsmt_talendLogs_DB = conn_talendLogs_DB + "[psmt]" + "[" + "log" + "]";
				pstmt_talendLogs_DB = SharedDBPreparedStatement.getSharedPreparedStatement(conn_talendLogs_DB,
						insert_talendLogs_DB, keyPsmt_talendLogs_DB);
				resourceMap.put("pstmt_talendLogs_DB", pstmt_talendLogs_DB);
				boolean isShareIdentity_talendLogs_DB = globalMap
						.get("shareIdentitySetting_connectionStatsLogs") != null
						&& (Boolean) globalMap.get("shareIdentitySetting_connectionStatsLogs") == true;

				/**
				 * [talendLogs_DB begin ] stop
				 */

				/**
				 * [talendLogs_LOGS begin ] start
				 */

				ok_Hash.put("talendLogs_LOGS", false);
				start_Hash.put("talendLogs_LOGS", System.currentTimeMillis());

				currentVirtualComponent = "talendLogs_LOGS";

				currentComponent = "talendLogs_LOGS";

				int tos_count_talendLogs_LOGS = 0;

				try {
					for (LogCatcherUtils.LogCatcherMessage lcm : talendLogs_LOGS.getMessages()) {
						row_talendLogs_LOGS.type = lcm.getType();
						row_talendLogs_LOGS.origin = (lcm.getOrigin() == null || lcm.getOrigin().length() < 1 ? null
								: lcm.getOrigin());
						row_talendLogs_LOGS.priority = lcm.getPriority();
						row_talendLogs_LOGS.message = lcm.getMessage();
						row_talendLogs_LOGS.code = lcm.getCode();

						row_talendLogs_LOGS.moment = java.util.Calendar.getInstance().getTime();

						row_talendLogs_LOGS.pid = pid;
						row_talendLogs_LOGS.root_pid = rootPid;
						row_talendLogs_LOGS.father_pid = fatherPid;

						row_talendLogs_LOGS.project = projectName;
						row_talendLogs_LOGS.job = jobName;
						row_talendLogs_LOGS.context = contextStr;

						/**
						 * [talendLogs_LOGS begin ] stop
						 */

						/**
						 * [talendLogs_LOGS main ] start
						 */

						currentVirtualComponent = "talendLogs_LOGS";

						currentComponent = "talendLogs_LOGS";

						tos_count_talendLogs_LOGS++;

						/**
						 * [talendLogs_LOGS main ] stop
						 */

						/**
						 * [talendLogs_LOGS process_data_begin ] start
						 */

						currentVirtualComponent = "talendLogs_LOGS";

						currentComponent = "talendLogs_LOGS";

						/**
						 * [talendLogs_LOGS process_data_begin ] stop
						 */

						/**
						 * [talendLogs_DB main ] start
						 */

						currentVirtualComponent = "talendLogs_DB";

						currentComponent = "talendLogs_DB";

						whetherReject_talendLogs_DB = false;
						if (row_talendLogs_LOGS.moment != null) {
							pstmt_talendLogs_DB.setTimestamp(1,
									new java.sql.Timestamp(row_talendLogs_LOGS.moment.getTime()));
						} else {
							pstmt_talendLogs_DB.setNull(1, java.sql.Types.DATE);
						}

						if (row_talendLogs_LOGS.pid == null) {
							pstmt_talendLogs_DB.setNull(2, java.sql.Types.VARCHAR);
						} else {
							pstmt_talendLogs_DB.setString(2, row_talendLogs_LOGS.pid);
						}

						if (row_talendLogs_LOGS.root_pid == null) {
							pstmt_talendLogs_DB.setNull(3, java.sql.Types.VARCHAR);
						} else {
							pstmt_talendLogs_DB.setString(3, row_talendLogs_LOGS.root_pid);
						}

						if (row_talendLogs_LOGS.father_pid == null) {
							pstmt_talendLogs_DB.setNull(4, java.sql.Types.VARCHAR);
						} else {
							pstmt_talendLogs_DB.setString(4, row_talendLogs_LOGS.father_pid);
						}

						if (row_talendLogs_LOGS.project == null) {
							pstmt_talendLogs_DB.setNull(5, java.sql.Types.VARCHAR);
						} else {
							pstmt_talendLogs_DB.setString(5, row_talendLogs_LOGS.project);
						}

						if (row_talendLogs_LOGS.job == null) {
							pstmt_talendLogs_DB.setNull(6, java.sql.Types.VARCHAR);
						} else {
							pstmt_talendLogs_DB.setString(6, row_talendLogs_LOGS.job);
						}

						if (row_talendLogs_LOGS.context == null) {
							pstmt_talendLogs_DB.setNull(7, java.sql.Types.VARCHAR);
						} else {
							pstmt_talendLogs_DB.setString(7, row_talendLogs_LOGS.context);
						}

						if (row_talendLogs_LOGS.priority == null) {
							pstmt_talendLogs_DB.setNull(8, java.sql.Types.INTEGER);
						} else {
							pstmt_talendLogs_DB.setInt(8, row_talendLogs_LOGS.priority);
						}

						if (row_talendLogs_LOGS.type == null) {
							pstmt_talendLogs_DB.setNull(9, java.sql.Types.VARCHAR);
						} else {
							pstmt_talendLogs_DB.setString(9, row_talendLogs_LOGS.type);
						}

						if (row_talendLogs_LOGS.origin == null) {
							pstmt_talendLogs_DB.setNull(10, java.sql.Types.VARCHAR);
						} else {
							pstmt_talendLogs_DB.setString(10, row_talendLogs_LOGS.origin);
						}

						if (row_talendLogs_LOGS.message == null) {
							pstmt_talendLogs_DB.setNull(11, java.sql.Types.VARCHAR);
						} else {
							pstmt_talendLogs_DB.setString(11, row_talendLogs_LOGS.message);
						}

						if (row_talendLogs_LOGS.code == null) {
							pstmt_talendLogs_DB.setNull(12, java.sql.Types.INTEGER);
						} else {
							pstmt_talendLogs_DB.setInt(12, row_talendLogs_LOGS.code);
						}

						pstmt_talendLogs_DB.addBatch();
						nb_line_talendLogs_DB++;

						batchSizeCounter_talendLogs_DB++;

						////////// batch execute by batch size///////
						class LimitBytesHelper_talendLogs_DB {
							public int limitBytePart1(int counter, java.sql.PreparedStatement pstmt_talendLogs_DB)
									throws Exception {
								try {

									for (int countEach_talendLogs_DB : pstmt_talendLogs_DB.executeBatch()) {
										if (countEach_talendLogs_DB == -2 || countEach_talendLogs_DB == -3) {
											break;
										}
										counter += countEach_talendLogs_DB;
									}

								} catch (java.sql.BatchUpdateException e) {

									int countSum_talendLogs_DB = 0;
									for (int countEach_talendLogs_DB : e.getUpdateCounts()) {
										counter += (countEach_talendLogs_DB < 0 ? 0 : countEach_talendLogs_DB);
									}

									System.err.println(e.getMessage());

								}
								return counter;
							}

							public int limitBytePart2(int counter, java.sql.PreparedStatement pstmt_talendLogs_DB)
									throws Exception {
								try {

									for (int countEach_talendLogs_DB : pstmt_talendLogs_DB.executeBatch()) {
										if (countEach_talendLogs_DB == -2 || countEach_talendLogs_DB == -3) {
											break;
										}
										counter += countEach_talendLogs_DB;
									}

								} catch (java.sql.BatchUpdateException e) {

									for (int countEach_talendLogs_DB : e.getUpdateCounts()) {
										counter += (countEach_talendLogs_DB < 0 ? 0 : countEach_talendLogs_DB);
									}

									System.err.println(e.getMessage());

								}
								return counter;
							}
						}
						if ((batchSize_talendLogs_DB > 0)
								&& (batchSize_talendLogs_DB <= batchSizeCounter_talendLogs_DB)) {

							insertedCount_talendLogs_DB = new LimitBytesHelper_talendLogs_DB()
									.limitBytePart1(insertedCount_talendLogs_DB, pstmt_talendLogs_DB);

							batchSizeCounter_talendLogs_DB = 0;
						}

						//////////// commit every////////////

						tos_count_talendLogs_DB++;

						/**
						 * [talendLogs_DB main ] stop
						 */

						/**
						 * [talendLogs_DB process_data_begin ] start
						 */

						currentVirtualComponent = "talendLogs_DB";

						currentComponent = "talendLogs_DB";

						/**
						 * [talendLogs_DB process_data_begin ] stop
						 */

						/**
						 * [talendLogs_DB process_data_end ] start
						 */

						currentVirtualComponent = "talendLogs_DB";

						currentComponent = "talendLogs_DB";

						/**
						 * [talendLogs_DB process_data_end ] stop
						 */

						/**
						 * [talendLogs_LOGS process_data_end ] start
						 */

						currentVirtualComponent = "talendLogs_LOGS";

						currentComponent = "talendLogs_LOGS";

						/**
						 * [talendLogs_LOGS process_data_end ] stop
						 */

						/**
						 * [talendLogs_LOGS end ] start
						 */

						currentVirtualComponent = "talendLogs_LOGS";

						currentComponent = "talendLogs_LOGS";

					}
				} catch (Exception e_talendLogs_LOGS) {
					logIgnoredError(String.format(
							"talendLogs_LOGS - tLogCatcher failed to process log message(s) due to internal error: %s",
							e_talendLogs_LOGS), e_talendLogs_LOGS);
				}

				ok_Hash.put("talendLogs_LOGS", true);
				end_Hash.put("talendLogs_LOGS", System.currentTimeMillis());

				/**
				 * [talendLogs_LOGS end ] stop
				 */

				/**
				 * [talendLogs_DB end ] start
				 */

				currentVirtualComponent = "talendLogs_DB";

				currentComponent = "talendLogs_DB";

				try {
					int countSum_talendLogs_DB = 0;
					if (pstmt_talendLogs_DB != null && batchSizeCounter_talendLogs_DB > 0) {

						for (int countEach_talendLogs_DB : pstmt_talendLogs_DB.executeBatch()) {
							if (countEach_talendLogs_DB == -2 || countEach_talendLogs_DB == -3) {
								break;
							}
							countSum_talendLogs_DB += countEach_talendLogs_DB;
						}

					}

					insertedCount_talendLogs_DB += countSum_talendLogs_DB;

				} catch (java.sql.BatchUpdateException e) {

					int countSum_talendLogs_DB = 0;
					for (int countEach_talendLogs_DB : e.getUpdateCounts()) {
						countSum_talendLogs_DB += (countEach_talendLogs_DB < 0 ? 0 : countEach_talendLogs_DB);
					}

					insertedCount_talendLogs_DB += countSum_talendLogs_DB;

					System.err.println(e.getMessage());

				}
				if (pstmt_talendLogs_DB != null) {

					SharedDBPreparedStatement.releasePreparedStatement(keyPsmt_talendLogs_DB);

				}
				resourceMap.put("statementClosed_talendLogs_DB", true);

				nb_line_deleted_talendLogs_DB = nb_line_deleted_talendLogs_DB + deletedCount_talendLogs_DB;
				nb_line_update_talendLogs_DB = nb_line_update_talendLogs_DB + updatedCount_talendLogs_DB;
				nb_line_inserted_talendLogs_DB = nb_line_inserted_talendLogs_DB + insertedCount_talendLogs_DB;
				nb_line_rejected_talendLogs_DB = nb_line_rejected_talendLogs_DB + rejectedCount_talendLogs_DB;

				globalMap.put("talendLogs_DB_NB_LINE", nb_line_talendLogs_DB);
				globalMap.put("talendLogs_DB_NB_LINE_UPDATED", nb_line_update_talendLogs_DB);
				globalMap.put("talendLogs_DB_NB_LINE_INSERTED", nb_line_inserted_talendLogs_DB);
				globalMap.put("talendLogs_DB_NB_LINE_DELETED", nb_line_deleted_talendLogs_DB);
				globalMap.put("talendLogs_DB_NB_LINE_REJECTED", nb_line_rejected_talendLogs_DB);

				ok_Hash.put("talendLogs_DB", true);
				end_Hash.put("talendLogs_DB", System.currentTimeMillis());

				/**
				 * [talendLogs_DB end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:talendLogs_LOGS:sub_ok_talendLogs_connectionStatsLogs_Commit", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			connectionStatsLogs_CommitProcess(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [talendLogs_LOGS finally ] start
				 */

				currentVirtualComponent = "talendLogs_LOGS";

				currentComponent = "talendLogs_LOGS";

				/**
				 * [talendLogs_LOGS finally ] stop
				 */

				/**
				 * [talendLogs_DB finally ] start
				 */

				currentVirtualComponent = "talendLogs_DB";

				currentComponent = "talendLogs_DB";

				if (resourceMap.get("statementClosed_talendLogs_DB") == null) {
					java.sql.PreparedStatement pstmtToClose_talendLogs_DB = null;
					if ((pstmtToClose_talendLogs_DB = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_talendLogs_DB")) != null) {
						pstmtToClose_talendLogs_DB.close();
					}
				}

				/**
				 * [talendLogs_DB finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("talendLogs_LOGS_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final MASTERFILE_EXTRACT_PRODUCTS_2 MASTERFILE_EXTRACT_PRODUCTS_2Class = new MASTERFILE_EXTRACT_PRODUCTS_2();

		int exitCode = MASTERFILE_EXTRACT_PRODUCTS_2Class.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = MASTERFILE_EXTRACT_PRODUCTS_2.class.getClassLoader().getResourceAsStream(
					"dev/masterfile_extract_products_2_0_11/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = MASTERFILE_EXTRACT_PRODUCTS_2.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
					context.setContextType("ErrorHeader", "id_String");
					context.ErrorHeader = (String) context.getProperty("ErrorHeader");
					context.setContextType("hasErrorHeader", "id_Boolean");
					try {
						context.hasErrorHeader = routines.system.ParserUtils
								.parseTo_Boolean(context.getProperty("hasErrorHeader"));
					} catch (NumberFormatException e) {
						System.err.println(String.format("Null value will be used for context parameter %s: %s",
								"hasErrorHeader", e.getMessage()));
						context.hasErrorHeader = null;
					}
					context.setContextType("dateValidation", "id_String");
					context.dateValidation = (String) context.getProperty("dateValidation");
					context.setContextType("timeValidation", "id_String");
					context.timeValidation = (String) context.getProperty("timeValidation");
					context.setContextType("ReferentielPath", "id_String");
					context.ReferentielPath = (String) context.getProperty("ReferentielPath");
					context.setContextType("IntegrationExcelPath", "id_String");
					context.IntegrationExcelPath = (String) context.getProperty("IntegrationExcelPath");
					context.setContextType("ExcelFileName", "id_String");
					context.ExcelFileName = (String) context.getProperty("ExcelFileName");
					context.setContextType("LogPath", "id_String");
					context.LogPath = (String) context.getProperty("LogPath");
					context.setContextType("isNike", "id_Boolean");
					try {
						context.isNike = routines.system.ParserUtils.parseTo_Boolean(context.getProperty("isNike"));
					} catch (NumberFormatException e) {
						System.err.println(String.format("Null value will be used for context parameter %s: %s",
								"isNike", e.getMessage()));
						context.isNike = null;
					}
					context.setContextType("ExtractPath", "id_String");
					context.ExtractPath = (String) context.getProperty("ExtractPath");
					context.setContextType("ExtractPathHBE", "id_String");
					context.ExtractPathHBE = (String) context.getProperty("ExtractPathHBE");
					context.setContextType("ExtractPathOTHER", "id_String");
					context.ExtractPathOTHER = (String) context.getProperty("ExtractPathOTHER");
					context.setContextType("excelSheetName", "id_String");
					context.excelSheetName = (String) context.getProperty("excelSheetName");
					context.setContextType("errorFile", "id_String");
					context.errorFile = (String) context.getProperty("errorFile");
					context.setContextType("CreationDate", "id_String");
					context.CreationDate = (String) context.getProperty("CreationDate");
					context.setContextType("SQLSERVER_Server", "id_String");
					context.SQLSERVER_Server = (String) context.getProperty("SQLSERVER_Server");
					context.setContextType("SQLSERVER_Password", "id_Password");
					String pwd_SQLSERVER_Password_value = context.getProperty("SQLSERVER_Password");
					context.SQLSERVER_Password = null;
					if (pwd_SQLSERVER_Password_value != null) {
						if (context_param.containsKey("SQLSERVER_Password")) {// no need to decrypt if it come from
																				// program argument or parent job
																				// runtime
							context.SQLSERVER_Password = pwd_SQLSERVER_Password_value;
						} else if (!pwd_SQLSERVER_Password_value.isEmpty()) {
							try {
								context.SQLSERVER_Password = routines.system.PasswordEncryptUtil
										.decryptPassword(pwd_SQLSERVER_Password_value);
								context.put("SQLSERVER_Password", context.SQLSERVER_Password);
							} catch (java.lang.RuntimeException e) {
								// do nothing
							}
						}
					}
					context.setContextType("SQLSERVER_AdditionalParams", "id_String");
					context.SQLSERVER_AdditionalParams = (String) context.getProperty("SQLSERVER_AdditionalParams");
					context.setContextType("SQLSERVER_Database", "id_String");
					context.SQLSERVER_Database = (String) context.getProperty("SQLSERVER_Database");
					context.setContextType("SQLSERVER_Port", "id_String");
					context.SQLSERVER_Port = (String) context.getProperty("SQLSERVER_Port");
					context.setContextType("SQLSERVER_Schema", "id_String");
					context.SQLSERVER_Schema = (String) context.getProperty("SQLSERVER_Schema");
					context.setContextType("SQLSERVER_Login", "id_String");
					context.SQLSERVER_Login = (String) context.getProperty("SQLSERVER_Login");
					context.setContextType("SQLSERVER_LOG_Schema", "id_String");
					context.SQLSERVER_LOG_Schema = (String) context.getProperty("SQLSERVER_LOG_Schema");
					context.setContextType("SQLSERVER_LOG_Server", "id_String");
					context.SQLSERVER_LOG_Server = (String) context.getProperty("SQLSERVER_LOG_Server");
					context.setContextType("SQLSERVER_LOG_AdditionalParams", "id_String");
					context.SQLSERVER_LOG_AdditionalParams = (String) context
							.getProperty("SQLSERVER_LOG_AdditionalParams");
					context.setContextType("SQLSERVER_LOG_Login", "id_String");
					context.SQLSERVER_LOG_Login = (String) context.getProperty("SQLSERVER_LOG_Login");
					context.setContextType("SQLSERVER_LOG_Port", "id_String");
					context.SQLSERVER_LOG_Port = (String) context.getProperty("SQLSERVER_LOG_Port");
					context.setContextType("SQLSERVER_LOG_Database", "id_String");
					context.SQLSERVER_LOG_Database = (String) context.getProperty("SQLSERVER_LOG_Database");
					context.setContextType("SQLSERVER_LOG_Password", "id_Password");
					String pwd_SQLSERVER_LOG_Password_value = context.getProperty("SQLSERVER_LOG_Password");
					context.SQLSERVER_LOG_Password = null;
					if (pwd_SQLSERVER_LOG_Password_value != null) {
						if (context_param.containsKey("SQLSERVER_LOG_Password")) {// no need to decrypt if it come from
																					// program argument or parent job
																					// runtime
							context.SQLSERVER_LOG_Password = pwd_SQLSERVER_LOG_Password_value;
						} else if (!pwd_SQLSERVER_LOG_Password_value.isEmpty()) {
							try {
								context.SQLSERVER_LOG_Password = routines.system.PasswordEncryptUtil
										.decryptPassword(pwd_SQLSERVER_LOG_Password_value);
								context.put("SQLSERVER_LOG_Password", context.SQLSERVER_LOG_Password);
							} catch (java.lang.RuntimeException e) {
								// do nothing
							}
						}
					}
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("ErrorHeader")) {
				context.ErrorHeader = (String) parentContextMap.get("ErrorHeader");
			}
			if (parentContextMap.containsKey("hasErrorHeader")) {
				context.hasErrorHeader = (Boolean) parentContextMap.get("hasErrorHeader");
			}
			if (parentContextMap.containsKey("dateValidation")) {
				context.dateValidation = (String) parentContextMap.get("dateValidation");
			}
			if (parentContextMap.containsKey("timeValidation")) {
				context.timeValidation = (String) parentContextMap.get("timeValidation");
			}
			if (parentContextMap.containsKey("ReferentielPath")) {
				context.ReferentielPath = (String) parentContextMap.get("ReferentielPath");
			}
			if (parentContextMap.containsKey("IntegrationExcelPath")) {
				context.IntegrationExcelPath = (String) parentContextMap.get("IntegrationExcelPath");
			}
			if (parentContextMap.containsKey("ExcelFileName")) {
				context.ExcelFileName = (String) parentContextMap.get("ExcelFileName");
			}
			if (parentContextMap.containsKey("LogPath")) {
				context.LogPath = (String) parentContextMap.get("LogPath");
			}
			if (parentContextMap.containsKey("isNike")) {
				context.isNike = (Boolean) parentContextMap.get("isNike");
			}
			if (parentContextMap.containsKey("ExtractPath")) {
				context.ExtractPath = (String) parentContextMap.get("ExtractPath");
			}
			if (parentContextMap.containsKey("ExtractPathHBE")) {
				context.ExtractPathHBE = (String) parentContextMap.get("ExtractPathHBE");
			}
			if (parentContextMap.containsKey("ExtractPathOTHER")) {
				context.ExtractPathOTHER = (String) parentContextMap.get("ExtractPathOTHER");
			}
			if (parentContextMap.containsKey("excelSheetName")) {
				context.excelSheetName = (String) parentContextMap.get("excelSheetName");
			}
			if (parentContextMap.containsKey("errorFile")) {
				context.errorFile = (String) parentContextMap.get("errorFile");
			}
			if (parentContextMap.containsKey("CreationDate")) {
				context.CreationDate = (String) parentContextMap.get("CreationDate");
			}
			if (parentContextMap.containsKey("SQLSERVER_Server")) {
				context.SQLSERVER_Server = (String) parentContextMap.get("SQLSERVER_Server");
			}
			if (parentContextMap.containsKey("SQLSERVER_Password")) {
				context.SQLSERVER_Password = (java.lang.String) parentContextMap.get("SQLSERVER_Password");
			}
			if (parentContextMap.containsKey("SQLSERVER_AdditionalParams")) {
				context.SQLSERVER_AdditionalParams = (String) parentContextMap.get("SQLSERVER_AdditionalParams");
			}
			if (parentContextMap.containsKey("SQLSERVER_Database")) {
				context.SQLSERVER_Database = (String) parentContextMap.get("SQLSERVER_Database");
			}
			if (parentContextMap.containsKey("SQLSERVER_Port")) {
				context.SQLSERVER_Port = (String) parentContextMap.get("SQLSERVER_Port");
			}
			if (parentContextMap.containsKey("SQLSERVER_Schema")) {
				context.SQLSERVER_Schema = (String) parentContextMap.get("SQLSERVER_Schema");
			}
			if (parentContextMap.containsKey("SQLSERVER_Login")) {
				context.SQLSERVER_Login = (String) parentContextMap.get("SQLSERVER_Login");
			}
			if (parentContextMap.containsKey("SQLSERVER_LOG_Schema")) {
				context.SQLSERVER_LOG_Schema = (String) parentContextMap.get("SQLSERVER_LOG_Schema");
			}
			if (parentContextMap.containsKey("SQLSERVER_LOG_Server")) {
				context.SQLSERVER_LOG_Server = (String) parentContextMap.get("SQLSERVER_LOG_Server");
			}
			if (parentContextMap.containsKey("SQLSERVER_LOG_AdditionalParams")) {
				context.SQLSERVER_LOG_AdditionalParams = (String) parentContextMap
						.get("SQLSERVER_LOG_AdditionalParams");
			}
			if (parentContextMap.containsKey("SQLSERVER_LOG_Login")) {
				context.SQLSERVER_LOG_Login = (String) parentContextMap.get("SQLSERVER_LOG_Login");
			}
			if (parentContextMap.containsKey("SQLSERVER_LOG_Port")) {
				context.SQLSERVER_LOG_Port = (String) parentContextMap.get("SQLSERVER_LOG_Port");
			}
			if (parentContextMap.containsKey("SQLSERVER_LOG_Database")) {
				context.SQLSERVER_LOG_Database = (String) parentContextMap.get("SQLSERVER_LOG_Database");
			}
			if (parentContextMap.containsKey("SQLSERVER_LOG_Password")) {
				context.SQLSERVER_LOG_Password = (java.lang.String) parentContextMap.get("SQLSERVER_LOG_Password");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		parametersToEncrypt.add("SQLSERVER_Password");
		parametersToEncrypt.add("SQLSERVER_LOG_Password");
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		try {
			errorCode = null;
			preStaLogConProcess(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_preStaLogCon) {
			globalMap.put("preStaLogCon_SUBPROCESS_STATE", -1);

			e_preStaLogCon.printStackTrace();

		}
		try {
			errorCode = null;
			tPrejob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPrejob_1) {
			globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

			e_tPrejob_1.printStackTrace();

		}

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tDBInput_6Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_6) {
			globalMap.put("tDBInput_6_SUBPROCESS_STATE", -1);

			e_tDBInput_6.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		try {
			errorCode = null;
			tPostjob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPostjob_1) {
			globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

			e_tPostjob_1.printStackTrace();

		}

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : MASTERFILE_EXTRACT_PRODUCTS_2");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeSqlDbConnections();

	}

	private void closeSqlDbConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_connectionStatsLogs");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_connectionStatsLogs", globalMap.get("conn_connectionStatsLogs"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 691320 characters generated by Talend Open Studio for Data Integration on the
 * 29 décembre 2023 11:22:02 GMT
 ************************************************************************************************/