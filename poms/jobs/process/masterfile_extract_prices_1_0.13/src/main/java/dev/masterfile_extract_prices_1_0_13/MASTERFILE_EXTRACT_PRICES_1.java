// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package dev.masterfile_extract_prices_1_0_13;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJava_1
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: MASTERFILE_EXTRACT_PRICES_1 Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.3.1.20191031_1204-M3
 * @status DEV
 */
public class MASTERFILE_EXTRACT_PRICES_1 implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(ErrorHeader != null){
				
					this.setProperty("ErrorHeader", ErrorHeader.toString());
				
			}
			
			if(hasErrorHeader != null){
				
					this.setProperty("hasErrorHeader", hasErrorHeader.toString());
				
			}
			
			if(dateValidation != null){
				
					this.setProperty("dateValidation", dateValidation.toString());
				
			}
			
			if(timeValidation != null){
				
					this.setProperty("timeValidation", timeValidation.toString());
				
			}
			
			if(ReferentielPath != null){
				
					this.setProperty("ReferentielPath", ReferentielPath.toString());
				
			}
			
			if(IntegrationExcelPath != null){
				
					this.setProperty("IntegrationExcelPath", IntegrationExcelPath.toString());
				
			}
			
			if(ExcelFileName != null){
				
					this.setProperty("ExcelFileName", ExcelFileName.toString());
				
			}
			
			if(LogPath != null){
				
					this.setProperty("LogPath", LogPath.toString());
				
			}
			
			if(isNike != null){
				
					this.setProperty("isNike", isNike.toString());
				
			}
			
			if(ExtractPath != null){
				
					this.setProperty("ExtractPath", ExtractPath.toString());
				
			}
			
			if(ExtractPathPrice != null){
				
					this.setProperty("ExtractPathPrice", ExtractPathPrice.toString());
				
			}
			
			if(excelSheetName != null){
				
					this.setProperty("excelSheetName", excelSheetName.toString());
				
			}
			
			if(errorFile != null){
				
					this.setProperty("errorFile", errorFile.toString());
				
			}
			
			if(CreationDate != null){
				
					this.setProperty("CreationDate", CreationDate.toString());
				
			}
			
			if(SQLSERVER_Server != null){
				
					this.setProperty("SQLSERVER_Server", SQLSERVER_Server.toString());
				
			}
			
			if(SQLSERVER_Password != null){
				
					this.setProperty("SQLSERVER_Password", SQLSERVER_Password.toString());
				
			}
			
			if(SQLSERVER_AdditionalParams != null){
				
					this.setProperty("SQLSERVER_AdditionalParams", SQLSERVER_AdditionalParams.toString());
				
			}
			
			if(SQLSERVER_Database != null){
				
					this.setProperty("SQLSERVER_Database", SQLSERVER_Database.toString());
				
			}
			
			if(SQLSERVER_Port != null){
				
					this.setProperty("SQLSERVER_Port", SQLSERVER_Port.toString());
				
			}
			
			if(SQLSERVER_Schema != null){
				
					this.setProperty("SQLSERVER_Schema", SQLSERVER_Schema.toString());
				
			}
			
			if(SQLSERVER_Login != null){
				
					this.setProperty("SQLSERVER_Login", SQLSERVER_Login.toString());
				
			}
			
			if(SQLSERVER_LOG_Schema != null){
				
					this.setProperty("SQLSERVER_LOG_Schema", SQLSERVER_LOG_Schema.toString());
				
			}
			
			if(SQLSERVER_LOG_Server != null){
				
					this.setProperty("SQLSERVER_LOG_Server", SQLSERVER_LOG_Server.toString());
				
			}
			
			if(SQLSERVER_LOG_AdditionalParams != null){
				
					this.setProperty("SQLSERVER_LOG_AdditionalParams", SQLSERVER_LOG_AdditionalParams.toString());
				
			}
			
			if(SQLSERVER_LOG_Login != null){
				
					this.setProperty("SQLSERVER_LOG_Login", SQLSERVER_LOG_Login.toString());
				
			}
			
			if(SQLSERVER_LOG_Port != null){
				
					this.setProperty("SQLSERVER_LOG_Port", SQLSERVER_LOG_Port.toString());
				
			}
			
			if(SQLSERVER_LOG_Database != null){
				
					this.setProperty("SQLSERVER_LOG_Database", SQLSERVER_LOG_Database.toString());
				
			}
			
			if(SQLSERVER_LOG_Password != null){
				
					this.setProperty("SQLSERVER_LOG_Password", SQLSERVER_LOG_Password.toString());
				
			}
			
		}

public String ErrorHeader;
public String getErrorHeader(){
	return this.ErrorHeader;
}
public Boolean hasErrorHeader;
public Boolean getHasErrorHeader(){
	return this.hasErrorHeader;
}
public String dateValidation;
public String getDateValidation(){
	return this.dateValidation;
}
public String timeValidation;
public String getTimeValidation(){
	return this.timeValidation;
}
public String ReferentielPath;
public String getReferentielPath(){
	return this.ReferentielPath;
}
public String IntegrationExcelPath;
public String getIntegrationExcelPath(){
	return this.IntegrationExcelPath;
}
public String ExcelFileName;
public String getExcelFileName(){
	return this.ExcelFileName;
}
public String LogPath;
public String getLogPath(){
	return this.LogPath;
}
public Boolean isNike;
public Boolean getIsNike(){
	return this.isNike;
}
public String ExtractPath;
public String getExtractPath(){
	return this.ExtractPath;
}
public String ExtractPathPrice;
public String getExtractPathPrice(){
	return this.ExtractPathPrice;
}
public String excelSheetName;
public String getExcelSheetName(){
	return this.excelSheetName;
}
public String errorFile;
public String getErrorFile(){
	return this.errorFile;
}
public String CreationDate;
public String getCreationDate(){
	return this.CreationDate;
}
public String SQLSERVER_Server;
public String getSQLSERVER_Server(){
	return this.SQLSERVER_Server;
}
public java.lang.String SQLSERVER_Password;
public java.lang.String getSQLSERVER_Password(){
	return this.SQLSERVER_Password;
}
public String SQLSERVER_AdditionalParams;
public String getSQLSERVER_AdditionalParams(){
	return this.SQLSERVER_AdditionalParams;
}
public String SQLSERVER_Database;
public String getSQLSERVER_Database(){
	return this.SQLSERVER_Database;
}
public String SQLSERVER_Port;
public String getSQLSERVER_Port(){
	return this.SQLSERVER_Port;
}
public String SQLSERVER_Schema;
public String getSQLSERVER_Schema(){
	return this.SQLSERVER_Schema;
}
public String SQLSERVER_Login;
public String getSQLSERVER_Login(){
	return this.SQLSERVER_Login;
}
public String SQLSERVER_LOG_Schema;
public String getSQLSERVER_LOG_Schema(){
	return this.SQLSERVER_LOG_Schema;
}
public String SQLSERVER_LOG_Server;
public String getSQLSERVER_LOG_Server(){
	return this.SQLSERVER_LOG_Server;
}
public String SQLSERVER_LOG_AdditionalParams;
public String getSQLSERVER_LOG_AdditionalParams(){
	return this.SQLSERVER_LOG_AdditionalParams;
}
public String SQLSERVER_LOG_Login;
public String getSQLSERVER_LOG_Login(){
	return this.SQLSERVER_LOG_Login;
}
public String SQLSERVER_LOG_Port;
public String getSQLSERVER_LOG_Port(){
	return this.SQLSERVER_LOG_Port;
}
public String SQLSERVER_LOG_Database;
public String getSQLSERVER_LOG_Database(){
	return this.SQLSERVER_LOG_Database;
}
public java.lang.String SQLSERVER_LOG_Password;
public java.lang.String getSQLSERVER_LOG_Password(){
	return this.SQLSERVER_LOG_Password;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.13";
	private final String jobName = "MASTERFILE_EXTRACT_PRICES_1";
	private final String projectName = "DEV";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	


	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	LogCatcherUtils talendLogs_LOGS = new LogCatcherUtils();

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				MASTERFILE_EXTRACT_PRICES_1.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(MASTERFILE_EXTRACT_PRICES_1.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
				talendLogs_LOGS.addMessage("Java Exception", currentComponent, 6, e.getClass().getName() + ":" + e.getMessage(), 1);
				talendLogs_LOGSProcess(globalMap);
			}
			} catch (TalendException e) {
				// do nothing
			
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void preStaLogCon_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					preStaLogCon_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSetGlobalVar_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSetGlobalVar_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileExist_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileExist_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFlowToIterate_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSleep_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSleep_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSleep_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSleep_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSleep_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileExist_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileExist_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileDelete_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileDelete_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUnite_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_22_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_19_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_20_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_21_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_22_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_20_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_21_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_19_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_23_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_20_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_24_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_21_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_25_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_22_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_26_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_23_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_27_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_24_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_28_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_25_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_29_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_26_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_30_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_27_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_31_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_28_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_19_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_32_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_29_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_20_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_33_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_30_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_21_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_34_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_31_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_22_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWarn_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tWarn_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_copyOfcopyOfsortie_fashion_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAggregateRow_1_AGGOUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tAggregateRow_1_AGGIN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tAggregateRow_1_AGGIN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void connectionStatsLogs_Commit_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					connectionStatsLogs_Commit_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void connectionStatsLogs_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					connectionStatsLogs_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void talendLogs_LOGS_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							talendLogs_DB_error(exception, errorComponent, globalMap);
						
						}
					
			public void talendLogs_DB_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					talendLogs_LOGS_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void preStaLogCon_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSetGlobalVar_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileExist_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSleep_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileExist_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileDelete_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_9_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWarn_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void connectionStatsLogs_Commit_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void connectionStatsLogs_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void talendLogs_LOGS_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	





public void preStaLogConProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("preStaLogCon_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [preStaLogCon begin ] start
	 */

	

	
		
		ok_Hash.put("preStaLogCon", false);
		start_Hash.put("preStaLogCon", System.currentTimeMillis());
		
	
	currentComponent="preStaLogCon";

	
		int tos_count_preStaLogCon = 0;
		

 



/**
 * [preStaLogCon begin ] stop
 */
	
	/**
	 * [preStaLogCon main ] start
	 */

	

	
	
	currentComponent="preStaLogCon";

	

 


	tos_count_preStaLogCon++;

/**
 * [preStaLogCon main ] stop
 */
	
	/**
	 * [preStaLogCon process_data_begin ] start
	 */

	

	
	
	currentComponent="preStaLogCon";

	

 



/**
 * [preStaLogCon process_data_begin ] stop
 */
	
	/**
	 * [preStaLogCon process_data_end ] start
	 */

	

	
	
	currentComponent="preStaLogCon";

	

 



/**
 * [preStaLogCon process_data_end ] stop
 */
	
	/**
	 * [preStaLogCon end ] start
	 */

	

	
	
	currentComponent="preStaLogCon";

	

 

ok_Hash.put("preStaLogCon", true);
end_Hash.put("preStaLogCon", System.currentTimeMillis());

				connectionStatsLogsProcess(globalMap);



/**
 * [preStaLogCon end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [preStaLogCon finally ] start
	 */

	

	
	
	currentComponent="preStaLogCon";

	

 



/**
 * [preStaLogCon finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("preStaLogCon_SUBPROCESS_STATE", 1);
	}
	

public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";

	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				tJava_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	

public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";

	
		int tos_count_tJava_1 = 0;
		


System.out.println("SUB JOB EXTRACT PRICE 1");
System.out.println(context.ExcelFileName);
System.out.println(context.CreationDate);
System.out.println("******************* SHEMA *****************");
System.out.println(context.SQLSERVER_LOG_Schema);
System.out.println("******************* SHEMA *****************");
 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_begin ] stop
 */
	
	/**
	 * [tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_end ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());

				tSetGlobalVar_1Process(globalMap);



/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	

public void tSetGlobalVar_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSetGlobalVar_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tSetGlobalVar_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tSetGlobalVar_1", false);
		start_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());
		
	
	currentComponent="tSetGlobalVar_1";

	
		int tos_count_tSetGlobalVar_1 = 0;
		

 



/**
 * [tSetGlobalVar_1 begin ] stop
 */
	
	/**
	 * [tSetGlobalVar_1 main ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

globalMap.put("dateError",  TalendDate.formatDate("yyyy-MM-ddHHmmss", new Date()) );
globalMap.put("SalesJournalNumber",  TalendDate.formatDate("yyyyMMddHHmmss", new Date()) );
globalMap.put("CurrentDate",  TalendDate.formatDate("yyyyMMdd", new Date()) );

 


	tos_count_tSetGlobalVar_1++;

/**
 * [tSetGlobalVar_1 main ] stop
 */
	
	/**
	 * [tSetGlobalVar_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

 



/**
 * [tSetGlobalVar_1 process_data_begin ] stop
 */
	
	/**
	 * [tSetGlobalVar_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

 



/**
 * [tSetGlobalVar_1 process_data_end ] stop
 */
	
	/**
	 * [tSetGlobalVar_1 end ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

 

ok_Hash.put("tSetGlobalVar_1", true);
end_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());




/**
 * [tSetGlobalVar_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSetGlobalVar_1 finally ] start
	 */

	

	
	
	currentComponent="tSetGlobalVar_1";

	

 



/**
 * [tSetGlobalVar_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSetGlobalVar_1_SUBPROCESS_STATE", 1);
	}
	

public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";

	
		int tos_count_tPostjob_1 = 0;
		

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				tFileExist_1Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	

public void tFileExist_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileExist_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileExist_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileExist_1", false);
		start_Hash.put("tFileExist_1", System.currentTimeMillis());
		
	
	currentComponent="tFileExist_1";

	
		int tos_count_tFileExist_1 = 0;
		

 



/**
 * [tFileExist_1 begin ] stop
 */
	
	/**
	 * [tFileExist_1 main ] start
	 */

	

	
	
	currentComponent="tFileExist_1";

	



java.io.File file_tFileExist_1 = new java.io.File(context.ExtractPathPrice + "/Open sales price journal lines.csv");
if (!file_tFileExist_1.exists()) {
    globalMap.put("tFileExist_1_EXISTS",false);
}else{
	globalMap.put("tFileExist_1_EXISTS",true);
}

globalMap.put("tFileExist_1_FILENAME",context.ExtractPathPrice + "/Open sales price journal lines.csv");


 


	tos_count_tFileExist_1++;

/**
 * [tFileExist_1 main ] stop
 */
	
	/**
	 * [tFileExist_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileExist_1";

	

 



/**
 * [tFileExist_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileExist_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileExist_1";

	

 



/**
 * [tFileExist_1 process_data_end ] stop
 */
	
	/**
	 * [tFileExist_1 end ] start
	 */

	

	
	
	currentComponent="tFileExist_1";

	

 

ok_Hash.put("tFileExist_1", true);
end_Hash.put("tFileExist_1", System.currentTimeMillis());

   			if (((Boolean)globalMap.get("tFileExist_1_EXISTS"))) {
   				
    			tFileInputDelimited_1Process(globalMap);
   			}

			



/**
 * [tFileExist_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileExist_1 finally ] start
	 */

	

	
	
	currentComponent="tFileExist_1";

	

 



/**
 * [tFileExist_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileExist_1_SUBPROCESS_STATE", 1);
	}
	


public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String GROUPCODE;

				public String getGROUPCODE () {
					return this.GROUPCODE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.GROUPCODE = readString(dis);
					
					this.PRICECURRENCYCODE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.GROUPCODE,dos);
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("GROUPCODE="+GROUPCODE);
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtAggregateRow_1 implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_1> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String GROUPCODE;

				public String getGROUPCODE () {
					return this.GROUPCODE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.GROUPCODE = readString(dis);
					
					this.PRICECURRENCYCODE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.GROUPCODE,dos);
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("GROUPCODE="+GROUPCODE);
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtAggregateRow_1 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class outStruct implements routines.system.IPersistableRow<outStruct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String PRICE;

				public String getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String COUNTRY;

				public String getCOUNTRY () {
					return this.COUNTRY;
				}
				
			    public String GROUPCODE;

				public String getGROUPCODE () {
					return this.GROUPCODE;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.PRICE = readString(dis);
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.COUNTRY = readString(dis);
					
					this.GROUPCODE = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.PRICE,dos);
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.COUNTRY,dos);
					
					// String
				
						writeString(this.GROUPCODE,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRICE="+PRICE);
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",SEASON="+SEASON);
		sb.append(",COUNTRY="+COUNTRY);
		sb.append(",GROUPCODE="+GROUPCODE);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(outStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public String PRICE;

				public String getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String COUNTRY;

				public String getCOUNTRY () {
					return this.COUNTRY;
				}
				
			    public String GROUPCODE;

				public String getGROUPCODE () {
					return this.GROUPCODE;
				}
				
			    public String FromDate;

				public String getFromDate () {
					return this.FromDate;
				}
				
			    public String ToDate;

				public String getToDate () {
					return this.ToDate;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.ITEMNUMBER = readString(dis);
					
					this.PRICE = readString(dis);
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.COUNTRY = readString(dis);
					
					this.GROUPCODE = readString(dis);
					
					this.FromDate = readString(dis);
					
					this.ToDate = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// String
				
						writeString(this.PRICE,dos);
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.COUNTRY,dos);
					
					// String
				
						writeString(this.GROUPCODE,dos);
					
					// String
				
						writeString(this.FromDate,dos);
					
					// String
				
						writeString(this.ToDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+PRICE);
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",SEASON="+SEASON);
		sb.append(",COUNTRY="+COUNTRY);
		sb.append(",GROUPCODE="+GROUPCODE);
		sb.append(",FromDate="+FromDate);
		sb.append(",ToDate="+ToDate);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row5Struct row5 = new row5Struct();
outStruct out = new outStruct();
row6Struct row6 = new row6Struct();





	
	/**
	 * [tAggregateRow_1_AGGOUT begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_1_AGGOUT", false);
		start_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	
		int tos_count_tAggregateRow_1_AGGOUT = 0;
		

// ------------ Seems it is not used

java.util.Map hashAggreg_tAggregateRow_1 = new java.util.HashMap(); 

// ------------
	class AggOperationStruct_tAggregateRow_1 { // G_OutBegin_AggR_100

		private static final int DEFAULT_HASHCODE = 1;
	    private static final int PRIME = 31;
	    private int hashCode = DEFAULT_HASHCODE;
	    public boolean hashCodeDirty = true;

    				String PRICECURRENCYCODE;
    				String GROUPCODE;
        
	    @Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;
		
							result = prime * result + ((this.PRICECURRENCYCODE == null) ? 0 : this.PRICECURRENCYCODE.hashCode());
							
							result = prime * result + ((this.GROUPCODE == null) ? 0 : this.GROUPCODE.hashCode());
							
	    		this.hashCode = result;
	    		this.hashCodeDirty = false;		
			}
			return this.hashCode;
		}
		
		@Override
		public boolean equals(Object obj) {
			if (this == obj) return true;
			if (obj == null) return false;
			if (getClass() != obj.getClass()) return false;
			final AggOperationStruct_tAggregateRow_1 other = (AggOperationStruct_tAggregateRow_1) obj;
			
							if (this.PRICECURRENCYCODE == null) {
								if (other.PRICECURRENCYCODE != null) 
									return false;
							} else if (!this.PRICECURRENCYCODE.equals(other.PRICECURRENCYCODE)) 
								return false;
						
							if (this.GROUPCODE == null) {
								if (other.GROUPCODE != null) 
									return false;
							} else if (!this.GROUPCODE.equals(other.GROUPCODE)) 
								return false;
						
			
			return true;
		}
  
        
	} // G_OutBegin_AggR_100

	AggOperationStruct_tAggregateRow_1 operation_result_tAggregateRow_1 = null;
	AggOperationStruct_tAggregateRow_1 operation_finder_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();
	java.util.Map<AggOperationStruct_tAggregateRow_1,AggOperationStruct_tAggregateRow_1> hash_tAggregateRow_1 = new java.util.HashMap<AggOperationStruct_tAggregateRow_1,AggOperationStruct_tAggregateRow_1>();
	

 



/**
 * [tAggregateRow_1_AGGOUT begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";

	
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
outStruct out_tmp = new outStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_1", false);
		start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_1";

	
		int tos_count_tFileInputDelimited_1 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				int limit_tFileInputDelimited_1 = -1;
				try{
					
						Object filename_tFileInputDelimited_1 = context.ExtractPathPrice + "/Open sales price journal lines.csv";
						if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
			if(footer_value_tFileInputDelimited_1 >0 || random_value_tFileInputDelimited_1 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(context.ExtractPathPrice + "/Open sales price journal lines.csv", "ISO-8859-15",";","\n",true,0,0,
									limit_tFileInputDelimited_1
								,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_1!=null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();
						
			    						row5 = null;			
												
									boolean whetherReject_tFileInputDelimited_1 = false;
									row5 = new row5Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_1 = 0;
				
					columnIndexWithD_tFileInputDelimited_1 = 0;
					
							row5.ITEMNUMBER = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 1;
					
							row5.PRICE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 2;
					
							row5.PRICECURRENCYCODE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 3;
					
							row5.PRICECUSTOMERGROUPCODE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 4;
					
							row5.PRODUCTCOLORID = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 5;
					
							row5.PRODUCTSIZEID = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 6;
					
							row5.PRODUCTSTYLEID = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 7;
					
							row5.SEASON = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 8;
					
							row5.COUNTRY = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 9;
					
							row5.GROUPCODE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 10;
					
							row5.FromDate = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 11;
					
							row5.ToDate = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
				
										
										if(rowstate_tFileInputDelimited_1.getException()!=null) {
											throw rowstate_tFileInputDelimited_1.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_1 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row5 = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_1 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 


	tos_count_tFileInputDelimited_1++;

/**
 * [tFileInputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_begin ] stop
 */
// Start of branch "row5"
if(row5 != null) { 



	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_3 = false;
		  boolean mainRowRejected_tMap_3 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

out = null;


// # Output table : 'out'
// # Filter conditions 
if( 

!Relational.ISNULL(row5.ITEMNUMBER) && !row5.ITEMNUMBER.equals("I")

 ) {
out_tmp.PRICE = row5.PRICE ;
out_tmp.PRICECURRENCYCODE = row5.PRICECURRENCYCODE ;
out_tmp.PRICECUSTOMERGROUPCODE = row5.PRICECUSTOMERGROUPCODE ;
out_tmp.PRODUCTCOLORID = row5.PRODUCTCOLORID ;
out_tmp.PRODUCTSIZEID = row5.PRODUCTSIZEID ;
out_tmp.PRODUCTSTYLEID = row5.PRODUCTSTYLEID ;
out_tmp.SEASON = row5.SEASON ;
out_tmp.COUNTRY = row5.COUNTRY ;
out_tmp.GROUPCODE = row5.GROUPCODE ;
out_tmp.ITEMNUMBER = row5.ITEMNUMBER ;
out = out_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "out"
if(out != null) { 



	
	/**
	 * [tAggregateRow_1_AGGOUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	
	
operation_finder_tAggregateRow_1.PRICECURRENCYCODE = out.PRICECURRENCYCODE;
			operation_finder_tAggregateRow_1.GROUPCODE = out.GROUPCODE;
			

	operation_finder_tAggregateRow_1.hashCodeDirty = true;
	
	operation_result_tAggregateRow_1 = hash_tAggregateRow_1.get(operation_finder_tAggregateRow_1);

	

	if(operation_result_tAggregateRow_1 == null) { // G_OutMain_AggR_001

		operation_result_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();

		operation_result_tAggregateRow_1.PRICECURRENCYCODE = operation_finder_tAggregateRow_1.PRICECURRENCYCODE;
				operation_result_tAggregateRow_1.GROUPCODE = operation_finder_tAggregateRow_1.GROUPCODE;
				
		
		

		hash_tAggregateRow_1.put(operation_result_tAggregateRow_1, operation_result_tAggregateRow_1);
	
	} // G_OutMain_AggR_001


	


 


	tos_count_tAggregateRow_1_AGGOUT++;

/**
 * [tAggregateRow_1_AGGOUT main ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGOUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

 



/**
 * [tAggregateRow_1_AGGOUT process_data_begin ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGOUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

 



/**
 * [tAggregateRow_1_AGGOUT process_data_end ] stop
 */

} // End of branch "out"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_end ] stop
 */

} // End of branch "row5"




	
	/**
	 * [tFileInputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	



            }
            }finally{
                if(!((Object)(context.ExtractPathPrice + "/Open sales price journal lines.csv") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_1!=null){
                		fid_tFileInputDelimited_1.close();
                	}
                }
                if(fid_tFileInputDelimited_1!=null){
                	globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_1", true);
end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());




/**
 * [tFileInputDelimited_1 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGOUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

 

ok_Hash.put("tAggregateRow_1_AGGOUT", true);
end_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());




/**
 * [tAggregateRow_1_AGGOUT end ] stop
 */


	
	/**
	 * [tHashOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_1", false);
		start_Hash.put("tHashOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_1";

	
		int tos_count_tHashOutput_1 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row6Struct> tHashFile_tHashOutput_1 = null;
		String hashKey_tHashOutput_1 = "tHashFile_MASTERFILE_EXTRACT_PRICES_1_" + pid + "_tHashOutput_1";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_1)){
				mf_tHashOutput_1.getResourceMap().put(hashKey_tHashOutput_1, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row6Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_FIRST));
				tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			}
        int nb_line_tHashOutput_1 = 0;
 



/**
 * [tHashOutput_1 begin ] stop
 */



	
	/**
	 * [tAggregateRow_1_AGGIN begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_1_AGGIN", false);
		start_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	
		int tos_count_tAggregateRow_1_AGGIN = 0;
		

java.util.Collection<AggOperationStruct_tAggregateRow_1> values_tAggregateRow_1 = hash_tAggregateRow_1.values();

globalMap.put("tAggregateRow_1_NB_LINE", values_tAggregateRow_1.size());

for(AggOperationStruct_tAggregateRow_1 aggregated_row_tAggregateRow_1 : values_tAggregateRow_1) { // G_AggR_600



 



/**
 * [tAggregateRow_1_AGGIN begin ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGIN main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

            				    row6.GROUPCODE = aggregated_row_tAggregateRow_1.GROUPCODE;
            				    
            				    row6.PRICECURRENCYCODE = aggregated_row_tAggregateRow_1.PRICECURRENCYCODE;
            				    

 


	tos_count_tAggregateRow_1_AGGIN++;

/**
 * [tAggregateRow_1_AGGIN main ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGIN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

 



/**
 * [tAggregateRow_1_AGGIN process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_1 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";

	



    
		row6Struct oneRow_tHashOutput_1 = new row6Struct();
				
					oneRow_tHashOutput_1.GROUPCODE = row6.GROUPCODE;
					oneRow_tHashOutput_1.PRICECURRENCYCODE = row6.PRICECURRENCYCODE;
		
        tHashFile_tHashOutput_1.put(oneRow_tHashOutput_1);
        nb_line_tHashOutput_1 ++;
 


	tos_count_tHashOutput_1++;

/**
 * [tHashOutput_1 main ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";

	

 



/**
 * [tHashOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";

	

 



/**
 * [tHashOutput_1 process_data_end ] stop
 */



	
	/**
	 * [tAggregateRow_1_AGGIN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

 



/**
 * [tAggregateRow_1_AGGIN process_data_end ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGIN end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

} // G_AggR_600

 

ok_Hash.put("tAggregateRow_1_AGGIN", true);
end_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());




/**
 * [tAggregateRow_1_AGGIN end ] stop
 */

	
	/**
	 * [tHashOutput_1 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";

	
globalMap.put("tHashOutput_1_NB_LINE", nb_line_tHashOutput_1);
 

ok_Hash.put("tHashOutput_1", true);
end_Hash.put("tHashOutput_1", System.currentTimeMillis());




/**
 * [tHashOutput_1 end ] stop
 */












				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
							tHashInput_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
				throw error;
			}finally{
				
							//free memory for "tAggregateRow_1_AGGIN"
							globalMap.remove("tAggregateRow_1");
						
				try{
					
	
	/**
	 * [tFileInputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGOUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

 



/**
 * [tAggregateRow_1_AGGOUT finally ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGIN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

 



/**
 * [tAggregateRow_1_AGGIN finally ] stop
 */

	
	/**
	 * [tHashOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";

	

 



/**
 * [tHashOutput_1 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}
	


public static class copyOfout_dataStruct implements routines.system.IPersistableRow<copyOfout_dataStruct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String COLUMN;

				public String getCOLUMN () {
					return this.COLUMN;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.COLUMN = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.COLUMN,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("COLUMN="+COLUMN);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfout_dataStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5_0Struct implements routines.system.IPersistableRow<row5_0Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		

		

        }

		
			finally {}
		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
        }

			finally {}
		

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5_0Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String GROUPCODE;

				public String getGROUPCODE () {
					return this.GROUPCODE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.GROUPCODE == null) ? 0 : this.GROUPCODE.hashCode());
					
						result = prime * result + ((this.PRICECURRENCYCODE == null) ? 0 : this.PRICECURRENCYCODE.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row7Struct other = (row7Struct) obj;
		
						if (this.GROUPCODE == null) {
							if (other.GROUPCODE != null)
								return false;
						
						} else if (!this.GROUPCODE.equals(other.GROUPCODE))
						
							return false;
					
						if (this.PRICECURRENCYCODE == null) {
							if (other.PRICECURRENCYCODE != null)
								return false;
						
						} else if (!this.PRICECURRENCYCODE.equals(other.PRICECURRENCYCODE))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row7Struct other) {

		other.GROUPCODE = this.GROUPCODE;
	            other.PRICECURRENCYCODE = this.PRICECURRENCYCODE;
	            
	}

	public void copyKeysDataTo(row7Struct other) {

		other.GROUPCODE = this.GROUPCODE;
	            	other.PRICECURRENCYCODE = this.PRICECURRENCYCODE;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.GROUPCODE = readString(dis);
					
					this.PRICECURRENCYCODE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.GROUPCODE,dos);
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("GROUPCODE="+GROUPCODE);
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.GROUPCODE, other.GROUPCODE);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.PRICECURRENCYCODE, other.PRICECURRENCYCODE);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tHashInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row7Struct row7 = new row7Struct();
row5_0Struct row5_0 = new row5_0Struct();
copyOfout_dataStruct copyOfout_data = new copyOfout_dataStruct();




	
	/**
	 * [tFlowToIterate_1 begin ] start
	 */

				
			int NB_ITERATE_tSleep_1 = 0; //for statistics
			

	
		
		ok_Hash.put("tFlowToIterate_1", false);
		start_Hash.put("tFlowToIterate_1", System.currentTimeMillis());
		
	
	currentComponent="tFlowToIterate_1";

	
		int tos_count_tFlowToIterate_1 = 0;
		

int nb_line_tFlowToIterate_1 = 0;
int counter_tFlowToIterate_1 = 0;

 



/**
 * [tFlowToIterate_1 begin ] stop
 */



	
	/**
	 * [tHashInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_1", false);
		start_Hash.put("tHashInput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_1";

	
		int tos_count_tHashInput_1 = 0;
		


int nb_line_tHashInput_1 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row6Struct> tHashFile_tHashInput_1 = mf_tHashInput_1.getAdvancedMemoryHashFile("tHashFile_MASTERFILE_EXTRACT_PRICES_1_" + pid +"_tHashOutput_1");
if(tHashFile_tHashInput_1==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row6Struct> iterator_tHashInput_1 = tHashFile_tHashInput_1.iterator();
while (iterator_tHashInput_1.hasNext()) {
    row6Struct next_tHashInput_1 = iterator_tHashInput_1.next();

	row7.GROUPCODE = next_tHashInput_1.GROUPCODE;
	row7.PRICECURRENCYCODE = next_tHashInput_1.PRICECURRENCYCODE;
 



/**
 * [tHashInput_1 begin ] stop
 */
	
	/**
	 * [tHashInput_1 main ] start
	 */

	

	
	
	currentComponent="tHashInput_1";

	

 


	tos_count_tHashInput_1++;

/**
 * [tHashInput_1 main ] stop
 */
	
	/**
	 * [tHashInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_1";

	

 



/**
 * [tHashInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tFlowToIterate_1 main ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";

	


    	            
            globalMap.put("row7.GROUPCODE", row7.GROUPCODE);
    	            
            globalMap.put("row7.PRICECURRENCYCODE", row7.PRICECURRENCYCODE);
    	
 
	   nb_line_tFlowToIterate_1++;  
       counter_tFlowToIterate_1++;
       globalMap.put("tFlowToIterate_1_CURRENT_ITERATION", counter_tFlowToIterate_1);
 


	tos_count_tFlowToIterate_1++;

/**
 * [tFlowToIterate_1 main ] stop
 */
	
	/**
	 * [tFlowToIterate_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";

	

 



/**
 * [tFlowToIterate_1 process_data_begin ] stop
 */
	NB_ITERATE_tSleep_1++;
	
	



	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";

	
		int tos_count_tFileOutputDelimited_1 = 0;
		

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File(context.ExtractPathPrice +"PriceImport_" + ((String)globalMap.get("row7.GROUPCODE"))+"_"+((String)globalMap.get("row7.PRICECURRENCYCODE"))+ ((String)globalMap.get("SalesJournalNumber")) + ".csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
    if(filetFileOutputDelimited_1.exists()){
            throw new RuntimeException("The particular file \""+filetFileOutputDelimited_1.getAbsoluteFile() +
            "\" already exist. If you want to overwrite the file, please uncheck the" + 
            " \"Throw an error if the file already exist\" option in Advanced settings.");
        }
            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 = 0;
            int currentRow_tFileOutputDelimited_1 = 0;

            final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:ROWSEPARATOR */"\r\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_1 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
                        if(fileToDelete_tFileOutputDelimited_1.exists()) {
                            fileToDelete_tFileOutputDelimited_1.delete();
                        }
                        outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, false),"ISO-8859-15"));


        resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";

	
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfout_dataStruct copyOfout_data_tmp = new copyOfout_dataStruct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tSleep_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tSleep_1", false);
		start_Hash.put("tSleep_1", System.currentTimeMillis());
		
	
	currentComponent="tSleep_1";

	
		int tos_count_tSleep_1 = 0;
		

 



/**
 * [tSleep_1 begin ] stop
 */
	
	/**
	 * [tSleep_1 main ] start
	 */

	

	
	
	currentComponent="tSleep_1";

	

    Thread.sleep((1)*1000);

 


	tos_count_tSleep_1++;

/**
 * [tSleep_1 main ] stop
 */
	
	/**
	 * [tSleep_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSleep_1";

	

 



/**
 * [tSleep_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_4 = false;
		  boolean mainRowRejected_tMap_4 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

copyOfout_data = null;


// # Output table : 'copyOfout_data'
copyOfout_data_tmp.COLUMN = "ENT;SalJ;" + row7.GROUPCODE + "-" + row7.PRICECURRENCYCODE + "-" + ((String)globalMap.get("CurrentDate")) ;
copyOfout_data = copyOfout_data_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "copyOfout_data"
if(copyOfout_data != null) { 



	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	


                    StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
                            if(copyOfout_data.COLUMN != null) {
                        sb_tFileOutputDelimited_1.append(
                            copyOfout_data.COLUMN
                        );
                            }
                    sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);


                    nb_line_tFileOutputDelimited_1++;
                    resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

                        outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());




 


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_end ] stop
 */

} // End of branch "copyOfout_data"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_end ] stop
 */



	
	/**
	 * [tSleep_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tSleep_1";

	

 



/**
 * [tSleep_1 process_data_end ] stop
 */
	
	/**
	 * [tSleep_1 end ] start
	 */

	

	
	
	currentComponent="tSleep_1";

	

 

ok_Hash.put("tSleep_1", true);
end_Hash.put("tSleep_1", System.currentTimeMillis());




/**
 * [tSleep_1 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	



		
			
					if(outtFileOutputDelimited_1!=null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
				
				globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

				tFileInputDelimited_2Process(globalMap);



/**
 * [tFileOutputDelimited_1 end ] stop
 */










	
	/**
	 * [tFlowToIterate_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";

	

 



/**
 * [tFlowToIterate_1 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";

	

 



/**
 * [tHashInput_1 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_1 end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";

	
    

		
			nb_line_tHashInput_1++;
		}	
    		
    		mf_tHashInput_1.clearCache("tHashFile_MASTERFILE_EXTRACT_PRICES_1_" + pid +"_tHashOutput_1");
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_MASTERFILE_EXTRACT_PRICES_1_" + pid +"_tHashOutput_1");
	


	globalMap.put("tHashInput_1_NB_LINE", nb_line_tHashInput_1);       

 

ok_Hash.put("tHashInput_1", true);
end_Hash.put("tHashInput_1", System.currentTimeMillis());




/**
 * [tHashInput_1 end ] stop
 */

	
	/**
	 * [tFlowToIterate_1 end ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";

	

globalMap.put("tFlowToIterate_1_NB_LINE",nb_line_tFlowToIterate_1);
 

ok_Hash.put("tFlowToIterate_1", true);
end_Hash.put("tFlowToIterate_1", System.currentTimeMillis());

				tFileExist_2Process(globalMap);



/**
 * [tFlowToIterate_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_1";

	

 



/**
 * [tHashInput_1 finally ] stop
 */

	
	/**
	 * [tFlowToIterate_1 finally ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";

	

 



/**
 * [tFlowToIterate_1 finally ] stop
 */

	
	/**
	 * [tSleep_1 finally ] start
	 */

	

	
	
	currentComponent="tSleep_1";

	

 



/**
 * [tSleep_1 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_1");
						if(outtFileOutputDelimited_1!=null) {
							outtFileOutputDelimited_1.flush();
							outtFileOutputDelimited_1.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class out_dataStruct implements routines.system.IPersistableRow<out_dataStruct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String COLUMN;

				public String getCOLUMN () {
					return this.COLUMN;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.COLUMN = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.COLUMN,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("COLUMN="+COLUMN);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out_dataStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public String PRICE;

				public String getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String COUNTRY;

				public String getCOUNTRY () {
					return this.COUNTRY;
				}
				
			    public String GROUPCODE;

				public String getGROUPCODE () {
					return this.GROUPCODE;
				}
				
			    public String FromDate;

				public String getFromDate () {
					return this.FromDate;
				}
				
			    public String ToDate;

				public String getToDate () {
					return this.ToDate;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.ITEMNUMBER = readString(dis);
					
					this.PRICE = readString(dis);
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.COUNTRY = readString(dis);
					
					this.GROUPCODE = readString(dis);
					
					this.FromDate = readString(dis);
					
					this.ToDate = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// String
				
						writeString(this.PRICE,dos);
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.COUNTRY,dos);
					
					// String
				
						writeString(this.GROUPCODE,dos);
					
					// String
				
						writeString(this.FromDate,dos);
					
					// String
				
						writeString(this.ToDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+PRICE);
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",SEASON="+SEASON);
		sb.append(",COUNTRY="+COUNTRY);
		sb.append(",GROUPCODE="+GROUPCODE);
		sb.append(",FromDate="+FromDate);
		sb.append(",ToDate="+ToDate);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row8Struct row8 = new row8Struct();
out_dataStruct out_data = new out_dataStruct();





	
	/**
	 * [tFileOutputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_2", false);
		start_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_2";

	
		int tos_count_tFileOutputDelimited_2 = 0;
		

String fileName_tFileOutputDelimited_2 = "";
    fileName_tFileOutputDelimited_2 = (new java.io.File(context.ExtractPathPrice +"PriceImport_" + ((String)globalMap.get("row7.GROUPCODE"))+"_"+((String)globalMap.get("row7.PRICECURRENCYCODE"))+ ((String)globalMap.get("SalesJournalNumber")) + ".csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_2 = null;
    String extension_tFileOutputDelimited_2 = null;
    String directory_tFileOutputDelimited_2 = null;
    if((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        }
        directory_tFileOutputDelimited_2 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_2 = true;
    java.io.File filetFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
    globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
        if(filetFileOutputDelimited_2.exists()){
            isFileGenerated_tFileOutputDelimited_2 = false;
        }
            int nb_line_tFileOutputDelimited_2 = 0;
            int splitedFileNo_tFileOutputDelimited_2 = 0;
            int currentRow_tFileOutputDelimited_2 = 0;

            final String OUT_DELIM_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:ROWSEPARATOR */"\r\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_2 != null && directory_tFileOutputDelimited_2.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_2 = new java.io.File(directory_tFileOutputDelimited_2);
                        if(!dir_tFileOutputDelimited_2.exists()) {
                            dir_tFileOutputDelimited_2.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_2 = null;

                        outtFileOutputDelimited_2 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_2, true),"ISO-8859-15"));


        resourceMap.put("out_tFileOutputDelimited_2", outtFileOutputDelimited_2);
resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

 



/**
 * [tFileOutputDelimited_2 begin ] stop
 */



	
	/**
	 * [tMap_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_5", false);
		start_Hash.put("tMap_5", System.currentTimeMillis());
		
	
	currentComponent="tMap_5";

	
		int tos_count_tMap_5 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_5__Struct  {
}
Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
out_dataStruct out_data_tmp = new out_dataStruct();
// ###############################

        
        



        









 



/**
 * [tMap_5 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_2", false);
		start_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_2";

	
		int tos_count_tFileInputDelimited_2 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_2 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_2 = null;
				int limit_tFileInputDelimited_2 = -1;
				try{
					
						Object filename_tFileInputDelimited_2 = context.ExtractPathPrice + "/Open sales price journal lines.csv";
						if(filename_tFileInputDelimited_2 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_2 = 0, random_value_tFileInputDelimited_2 = -1;
			if(footer_value_tFileInputDelimited_2 >0 || random_value_tFileInputDelimited_2 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_2 = new org.talend.fileprocess.FileInputDelimited(context.ExtractPathPrice + "/Open sales price journal lines.csv", "ISO-8859-15",";","\n",true,0,0,
									limit_tFileInputDelimited_2
								,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_2!=null && fid_tFileInputDelimited_2.nextRecord()) {
						rowstate_tFileInputDelimited_2.reset();
						
			    						row8 = null;			
												
									boolean whetherReject_tFileInputDelimited_2 = false;
									row8 = new row8Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_2 = 0;
				
					columnIndexWithD_tFileInputDelimited_2 = 0;
					
							row8.ITEMNUMBER = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 1;
					
							row8.PRICE = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 2;
					
							row8.PRICECURRENCYCODE = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 3;
					
							row8.PRICECUSTOMERGROUPCODE = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 4;
					
							row8.PRODUCTCOLORID = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 5;
					
							row8.PRODUCTSIZEID = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 6;
					
							row8.PRODUCTSTYLEID = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 7;
					
							row8.SEASON = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 8;
					
							row8.COUNTRY = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 9;
					
							row8.GROUPCODE = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 10;
					
							row8.FromDate = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 11;
					
							row8.ToDate = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
				
										
										if(rowstate_tFileInputDelimited_2.getException()!=null) {
											throw rowstate_tFileInputDelimited_2.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_2 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row8 = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_2 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 


	tos_count_tFileInputDelimited_2++;

/**
 * [tFileInputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 process_data_begin ] stop
 */
// Start of branch "row8"
if(row8 != null) { 



	
	/**
	 * [tMap_5 main ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_5 = false;
		  boolean mainRowRejected_tMap_5 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
        // ###############################
        // # Output tables

out_data = null;


// # Output table : 'out_data'
// # Filter conditions 
if( 

row8.GROUPCODE.equals(((String)globalMap.get("row7.GROUPCODE"))) &&
row8.PRICECURRENCYCODE.equals(((String)globalMap.get("row7.PRICECURRENCYCODE")))

 ) {
out_data_tmp.COLUMN = "LIG;SalJ;Price (Sales);Group;" + row8.GROUPCODE + ";Table;" + row8.ITEMNUMBER + ";" + row8.PRODUCTCOLORID + ";" + row8.PRODUCTSTYLEID + ";" + row8.PRODUCTSIZEID + ";" + row8.PRICE + ";" + row8.PRICECURRENCYCODE + ";" + row8.FromDate + ";" + row8.ToDate + ";PCE;No;;;;;" ;
out_data = out_data_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_5 = false;










 


	tos_count_tMap_5++;

/**
 * [tMap_5 main ] stop
 */
	
	/**
	 * [tMap_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_begin ] stop
 */
// Start of branch "out_data"
if(out_data != null) { 



	
	/**
	 * [tFileOutputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	


                    StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
                            if(out_data.COLUMN != null) {
                        sb_tFileOutputDelimited_2.append(
                            out_data.COLUMN
                        );
                            }
                    sb_tFileOutputDelimited_2.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);


                    nb_line_tFileOutputDelimited_2++;
                    resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

                        outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2.toString());




 


	tos_count_tFileOutputDelimited_2++;

/**
 * [tFileOutputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	

 



/**
 * [tFileOutputDelimited_2 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	

 



/**
 * [tFileOutputDelimited_2 process_data_end ] stop
 */

} // End of branch "out_data"




	
	/**
	 * [tMap_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_end ] stop
 */

} // End of branch "row8"




	
	/**
	 * [tFileInputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	



            }
            }finally{
                if(!((Object)(context.ExtractPathPrice + "/Open sales price journal lines.csv") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_2!=null){
                		fid_tFileInputDelimited_2.close();
                	}
                }
                if(fid_tFileInputDelimited_2!=null){
                	globalMap.put("tFileInputDelimited_2_NB_LINE", fid_tFileInputDelimited_2.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_2", true);
end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());




/**
 * [tFileInputDelimited_2 end ] stop
 */

	
	/**
	 * [tMap_5 end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





 

ok_Hash.put("tMap_5", true);
end_Hash.put("tMap_5", System.currentTimeMillis());




/**
 * [tMap_5 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	



		
			
					if(outtFileOutputDelimited_2!=null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}
				
				globalMap.put("tFileOutputDelimited_2_NB_LINE",nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_2", true);
	

 

ok_Hash.put("tFileOutputDelimited_2", true);
end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());

				tSleep_2Process(globalMap);



/**
 * [tFileOutputDelimited_2 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 finally ] stop
 */

	
	/**
	 * [tMap_5 finally ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	


		if(resourceMap.get("finish_tFileOutputDelimited_2") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_2");
						if(outtFileOutputDelimited_2!=null) {
							outtFileOutputDelimited_2.flush();
							outtFileOutputDelimited_2.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_2 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}
	


public static class copyOfcopyOfout_dataStruct implements routines.system.IPersistableRow<copyOfcopyOfout_dataStruct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String COLUMN;

				public String getCOLUMN () {
					return this.COLUMN;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.COLUMN = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.COLUMN,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("COLUMN="+COLUMN);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfout_dataStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row6_0Struct implements routines.system.IPersistableRow<row6_0Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		

		

        }

		
			finally {}
		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
        }

			finally {}
		

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6_0Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tSleep_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSleep_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row6_0Struct row6_0 = new row6_0Struct();
copyOfcopyOfout_dataStruct copyOfcopyOfout_data = new copyOfcopyOfout_dataStruct();





	
	/**
	 * [tFileOutputDelimited_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_3", false);
		start_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_3";

	
		int tos_count_tFileOutputDelimited_3 = 0;
		

String fileName_tFileOutputDelimited_3 = "";
    fileName_tFileOutputDelimited_3 = (new java.io.File(context.ExtractPathPrice +"PriceImport_" + ((String)globalMap.get("row7.GROUPCODE"))+"_"+((String)globalMap.get("row7.PRICECURRENCYCODE"))+ ((String)globalMap.get("SalesJournalNumber")) + ".csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_3 = null;
    String extension_tFileOutputDelimited_3 = null;
    String directory_tFileOutputDelimited_3 = null;
    if((fileName_tFileOutputDelimited_3.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_3.lastIndexOf(".") < fileName_tFileOutputDelimited_3.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
            extension_tFileOutputDelimited_3 = "";
        } else {
            fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0, fileName_tFileOutputDelimited_3.lastIndexOf("."));
            extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(fileName_tFileOutputDelimited_3.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0, fileName_tFileOutputDelimited_3.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_3.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0, fileName_tFileOutputDelimited_3.lastIndexOf("."));
            extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(fileName_tFileOutputDelimited_3.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
            extension_tFileOutputDelimited_3 = "";
        }
        directory_tFileOutputDelimited_3 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_3 = true;
    java.io.File filetFileOutputDelimited_3 = new java.io.File(fileName_tFileOutputDelimited_3);
    globalMap.put("tFileOutputDelimited_3_FILE_NAME",fileName_tFileOutputDelimited_3);
        if(filetFileOutputDelimited_3.exists()){
            isFileGenerated_tFileOutputDelimited_3 = false;
        }
            int nb_line_tFileOutputDelimited_3 = 0;
            int splitedFileNo_tFileOutputDelimited_3 = 0;
            int currentRow_tFileOutputDelimited_3 = 0;

            final String OUT_DELIM_tFileOutputDelimited_3 = /** Start field tFileOutputDelimited_3:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_3:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_3 = /** Start field tFileOutputDelimited_3:ROWSEPARATOR */""/** End field tFileOutputDelimited_3:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_3 != null && directory_tFileOutputDelimited_3.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_3 = new java.io.File(directory_tFileOutputDelimited_3);
                        if(!dir_tFileOutputDelimited_3.exists()) {
                            dir_tFileOutputDelimited_3.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_3 = null;

                        outtFileOutputDelimited_3 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_3, true),"ISO-8859-15"));


        resourceMap.put("out_tFileOutputDelimited_3", outtFileOutputDelimited_3);
resourceMap.put("nb_line_tFileOutputDelimited_3", nb_line_tFileOutputDelimited_3);

 



/**
 * [tFileOutputDelimited_3 begin ] stop
 */



	
	/**
	 * [tMap_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_6", false);
		start_Hash.put("tMap_6", System.currentTimeMillis());
		
	
	currentComponent="tMap_6";

	
		int tos_count_tMap_6 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_6__Struct  {
}
Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfcopyOfout_dataStruct copyOfcopyOfout_data_tmp = new copyOfcopyOfout_dataStruct();
// ###############################

        
        



        









 



/**
 * [tMap_6 begin ] stop
 */



	
	/**
	 * [tSleep_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tSleep_2", false);
		start_Hash.put("tSleep_2", System.currentTimeMillis());
		
	
	currentComponent="tSleep_2";

	
		int tos_count_tSleep_2 = 0;
		

 



/**
 * [tSleep_2 begin ] stop
 */
	
	/**
	 * [tSleep_2 main ] start
	 */

	

	
	
	currentComponent="tSleep_2";

	

    Thread.sleep((1)*1000);

 


	tos_count_tSleep_2++;

/**
 * [tSleep_2 main ] stop
 */
	
	/**
	 * [tSleep_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSleep_2";

	

 



/**
 * [tSleep_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_6 main ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_6 = false;
		  boolean mainRowRejected_tMap_6 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
        // ###############################
        // # Output tables

copyOfcopyOfout_data = null;


// # Output table : 'copyOfcopyOfout_data'
copyOfcopyOfout_data_tmp.COLUMN = "VAL;SalJ;Oui" ;
copyOfcopyOfout_data = copyOfcopyOfout_data_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_6 = false;










 


	tos_count_tMap_6++;

/**
 * [tMap_6 main ] stop
 */
	
	/**
	 * [tMap_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 process_data_begin ] stop
 */
// Start of branch "copyOfcopyOfout_data"
if(copyOfcopyOfout_data != null) { 



	
	/**
	 * [tFileOutputDelimited_3 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";

	


                    StringBuilder sb_tFileOutputDelimited_3 = new StringBuilder();
                            if(copyOfcopyOfout_data.COLUMN != null) {
                        sb_tFileOutputDelimited_3.append(
                            copyOfcopyOfout_data.COLUMN
                        );
                            }
                    sb_tFileOutputDelimited_3.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_3);


                    nb_line_tFileOutputDelimited_3++;
                    resourceMap.put("nb_line_tFileOutputDelimited_3", nb_line_tFileOutputDelimited_3);

                        outtFileOutputDelimited_3.write(sb_tFileOutputDelimited_3.toString());




 


	tos_count_tFileOutputDelimited_3++;

/**
 * [tFileOutputDelimited_3 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";

	

 



/**
 * [tFileOutputDelimited_3 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";

	

 



/**
 * [tFileOutputDelimited_3 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfout_data"




	
	/**
	 * [tMap_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 process_data_end ] stop
 */



	
	/**
	 * [tSleep_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tSleep_2";

	

 



/**
 * [tSleep_2 process_data_end ] stop
 */
	
	/**
	 * [tSleep_2 end ] start
	 */

	

	
	
	currentComponent="tSleep_2";

	

 

ok_Hash.put("tSleep_2", true);
end_Hash.put("tSleep_2", System.currentTimeMillis());




/**
 * [tSleep_2 end ] stop
 */

	
	/**
	 * [tMap_6 end ] start
	 */

	

	
	
	currentComponent="tMap_6";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





 

ok_Hash.put("tMap_6", true);
end_Hash.put("tMap_6", System.currentTimeMillis());




/**
 * [tMap_6 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_3 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";

	



		
			
					if(outtFileOutputDelimited_3!=null) {
						outtFileOutputDelimited_3.flush();
						outtFileOutputDelimited_3.close();
					}
				
				globalMap.put("tFileOutputDelimited_3_NB_LINE",nb_line_tFileOutputDelimited_3);
				globalMap.put("tFileOutputDelimited_3_FILE_NAME",fileName_tFileOutputDelimited_3);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_3", true);
	

 

ok_Hash.put("tFileOutputDelimited_3", true);
end_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_3 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSleep_2 finally ] start
	 */

	

	
	
	currentComponent="tSleep_2";

	

 



/**
 * [tSleep_2 finally ] stop
 */

	
	/**
	 * [tMap_6 finally ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_3 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";

	


		if(resourceMap.get("finish_tFileOutputDelimited_3") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_3 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_3");
						if(outtFileOutputDelimited_3!=null) {
							outtFileOutputDelimited_3.flush();
							outtFileOutputDelimited_3.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_3 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSleep_2_SUBPROCESS_STATE", 1);
	}
	

public void tFileExist_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileExist_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileExist_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileExist_2", false);
		start_Hash.put("tFileExist_2", System.currentTimeMillis());
		
	
	currentComponent="tFileExist_2";

	
		int tos_count_tFileExist_2 = 0;
		

 



/**
 * [tFileExist_2 begin ] stop
 */
	
	/**
	 * [tFileExist_2 main ] start
	 */

	

	
	
	currentComponent="tFileExist_2";

	



java.io.File file_tFileExist_2 = new java.io.File(context.ExtractPathPrice + "/Open sales price journal lines.csv");
if (!file_tFileExist_2.exists()) {
    globalMap.put("tFileExist_2_EXISTS",false);
}else{
	globalMap.put("tFileExist_2_EXISTS",true);
}

globalMap.put("tFileExist_2_FILENAME",context.ExtractPathPrice + "/Open sales price journal lines.csv");


 


	tos_count_tFileExist_2++;

/**
 * [tFileExist_2 main ] stop
 */
	
	/**
	 * [tFileExist_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileExist_2";

	

 



/**
 * [tFileExist_2 process_data_begin ] stop
 */
	
	/**
	 * [tFileExist_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileExist_2";

	

 



/**
 * [tFileExist_2 process_data_end ] stop
 */
	
	/**
	 * [tFileExist_2 end ] start
	 */

	

	
	
	currentComponent="tFileExist_2";

	

 

ok_Hash.put("tFileExist_2", true);
end_Hash.put("tFileExist_2", System.currentTimeMillis());

   			if (((Boolean)globalMap.get("tFileExist_2_EXISTS"))) {
   				
    			tFileDelete_1Process(globalMap);
   			}

			



/**
 * [tFileExist_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileExist_2 finally ] start
	 */

	

	
	
	currentComponent="tFileExist_2";

	

 



/**
 * [tFileExist_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileExist_2_SUBPROCESS_STATE", 1);
	}
	

public void tFileDelete_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileDelete_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tFileDelete_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileDelete_1", false);
		start_Hash.put("tFileDelete_1", System.currentTimeMillis());
		
	
	currentComponent="tFileDelete_1";

	
		int tos_count_tFileDelete_1 = 0;
		

 



/**
 * [tFileDelete_1 begin ] stop
 */
	
	/**
	 * [tFileDelete_1 main ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";

	

 

class DeleteFoldertFileDelete_1{
	 /**
     * delete all the sub-files in 'file'
     * 
     * @param file
     */
	public boolean delete(java.io.File file) {
        java.io.File[] files = file.listFiles();
        for (int i = 0; i < files.length; i++) {
            if (files[i].isFile()) {
                files[i].delete();
            } else if (files[i].isDirectory()) {
                if (!files[i].delete()) {
                    delete(files[i]);
                }
            }
        }
        deleteDirectory(file);
        return file.delete();
    }

    /**
     * delete all the sub-folders in 'file'
     * 
     * @param file
     */
    private void deleteDirectory(java.io.File file) {
        java.io.File[] filed = file.listFiles();
        for (int i = 0; i < filed.length; i++) {
        	if(filed[i].isDirectory()) {
            	deleteDirectory(filed[i]);
            }
            filed[i].delete();
        }
    }

}
    java.io.File file_tFileDelete_1=new java.io.File(context.ExtractPathPrice + "/Open sales price journal lines.csv");
    if(file_tFileDelete_1.exists()&& file_tFileDelete_1.isFile()){
    	if(file_tFileDelete_1.delete()){
    		globalMap.put("tFileDelete_1_CURRENT_STATUS", "File deleted.");
		}else{
			globalMap.put("tFileDelete_1_CURRENT_STATUS", "No file deleted.");
				throw new RuntimeException("File " + file_tFileDelete_1.getAbsolutePath() + " can not be deleted.");
		}
	}else{
		globalMap.put("tFileDelete_1_CURRENT_STATUS", "File does not exist or is invalid.");
			throw new RuntimeException("File " + file_tFileDelete_1.getAbsolutePath() + " does not exist or is invalid or is not a file.");
	}
	globalMap.put("tFileDelete_1_DELETE_PATH",context.ExtractPathPrice + "/Open sales price journal lines.csv");
    
     
 

 


	tos_count_tFileDelete_1++;

/**
 * [tFileDelete_1 main ] stop
 */
	
	/**
	 * [tFileDelete_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";

	

 



/**
 * [tFileDelete_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileDelete_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";

	

 



/**
 * [tFileDelete_1 process_data_end ] stop
 */
	
	/**
	 * [tFileDelete_1 end ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";

	

 

ok_Hash.put("tFileDelete_1", true);
end_Hash.put("tFileDelete_1", System.currentTimeMillis());




/**
 * [tFileDelete_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileDelete_1 finally ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";

	

 



/**
 * [tFileDelete_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileDelete_1_SUBPROCESS_STATE", 1);
	}
	


public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public BigDecimal PRICE;

				public BigDecimal getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String COUNTRY;

				public String getCOUNTRY () {
					return this.COUNTRY;
				}
				
			    public String GROUPCODE;

				public String getGROUPCODE () {
					return this.GROUPCODE;
				}
				
			    public String FromDate;

				public String getFromDate () {
					return this.FromDate;
				}
				
			    public String ToDate;

				public String getToDate () {
					return this.ToDate;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.ITEMNUMBER = readString(dis);
					
						this.PRICE = (BigDecimal) dis.readObject();
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.COUNTRY = readString(dis);
					
					this.GROUPCODE = readString(dis);
					
					this.FromDate = readString(dis);
					
					this.ToDate = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRICE);
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.COUNTRY,dos);
					
					// String
				
						writeString(this.GROUPCODE,dos);
					
					// String
				
						writeString(this.FromDate,dos);
					
					// String
				
						writeString(this.ToDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",SEASON="+SEASON);
		sb.append(",COUNTRY="+COUNTRY);
		sb.append(",GROUPCODE="+GROUPCODE);
		sb.append(",FromDate="+FromDate);
		sb.append(",ToDate="+ToDate);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_add_linenumberStruct implements routines.system.IPersistableRow<sortie_add_linenumberStruct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public BigDecimal PRICE;

				public BigDecimal getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String COUNTRY;

				public String getCOUNTRY () {
					return this.COUNTRY;
				}
				
			    public String GROUPCODE;

				public String getGROUPCODE () {
					return this.GROUPCODE;
				}
				
			    public String FromDate;

				public String getFromDate () {
					return this.FromDate;
				}
				
			    public String ToDate;

				public String getToDate () {
					return this.ToDate;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.ITEMNUMBER = readString(dis);
					
						this.PRICE = (BigDecimal) dis.readObject();
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.COUNTRY = readString(dis);
					
					this.GROUPCODE = readString(dis);
					
					this.FromDate = readString(dis);
					
					this.ToDate = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRICE);
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.COUNTRY,dos);
					
					// String
				
						writeString(this.GROUPCODE,dos);
					
					// String
				
						writeString(this.FromDate,dos);
					
					// String
				
						writeString(this.ToDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",SEASON="+SEASON);
		sb.append(",COUNTRY="+COUNTRY);
		sb.append(",GROUPCODE="+GROUPCODE);
		sb.append(",FromDate="+FromDate);
		sb.append(",ToDate="+ToDate);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_add_linenumberStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_mapStruct implements routines.system.IPersistableRow<sortie_mapStruct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String COUNTRY;

				public String getCOUNTRY () {
					return this.COUNTRY;
				}
				
			    public String FromDate;

				public String getFromDate () {
					return this.FromDate;
				}
				
			    public String ToDate;

				public String getToDate () {
					return this.ToDate;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.COUNTRY = readString(dis);
					
					this.FromDate = readString(dis);
					
					this.ToDate = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.COUNTRY,dos);
					
					// String
				
						writeString(this.FromDate,dos);
					
					// String
				
						writeString(this.ToDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",SEASON="+SEASON);
		sb.append(",COUNTRY="+COUNTRY);
		sb.append(",FromDate="+FromDate);
		sb.append(",ToDate="+ToDate);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_mapStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row41Struct implements routines.system.IPersistableRow<row41Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String COUNTRY;

				public String getCOUNTRY () {
					return this.COUNTRY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.COUNTRY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.COUNTRY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
		sb.append(",SEASON="+SEASON);
		sb.append(",COUNTRY="+COUNTRY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row41Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String COUNTRY;

				public String getCOUNTRY () {
					return this.COUNTRY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.COUNTRY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.COUNTRY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
		sb.append(",SEASON="+SEASON);
		sb.append(",COUNTRY="+COUNTRY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row11Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row39Struct implements routines.system.IPersistableRow<row39Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String COUNTRY;

				public String getCOUNTRY () {
					return this.COUNTRY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.COUNTRY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.COUNTRY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
		sb.append(",SEASON="+SEASON);
		sb.append(",COUNTRY="+COUNTRY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row39Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tHashInput_9Struct implements routines.system.IPersistableRow<after_tHashInput_9Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String COUNTRY;

				public String getCOUNTRY () {
					return this.COUNTRY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.COUNTRY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.COUNTRY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
		sb.append(",SEASON="+SEASON);
		sb.append(",COUNTRY="+COUNTRY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tHashInput_9Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row40Struct implements routines.system.IPersistableRow<row40Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String COUNTRY;

				public String getCOUNTRY () {
					return this.COUNTRY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.COUNTRY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.COUNTRY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
		sb.append(",SEASON="+SEASON);
		sb.append(",COUNTRY="+COUNTRY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row40Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row51Struct implements routines.system.IPersistableRow<row51Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String COUNTRY;

				public String getCOUNTRY () {
					return this.COUNTRY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.COUNTRY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.COUNTRY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
		sb.append(",SEASON="+SEASON);
		sb.append(",COUNTRY="+COUNTRY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row51Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row52Struct implements routines.system.IPersistableRow<row52Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String COUNTRY;

				public String getCOUNTRY () {
					return this.COUNTRY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.COUNTRY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.COUNTRY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
		sb.append(",SEASON="+SEASON);
		sb.append(",COUNTRY="+COUNTRY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row52Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row53Struct implements routines.system.IPersistableRow<row53Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String COUNTRY;

				public String getCOUNTRY () {
					return this.COUNTRY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.COUNTRY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.COUNTRY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
		sb.append(",SEASON="+SEASON);
		sb.append(",COUNTRY="+COUNTRY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row53Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row54Struct implements routines.system.IPersistableRow<row54Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String COUNTRY;

				public String getCOUNTRY () {
					return this.COUNTRY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.COUNTRY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.COUNTRY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
		sb.append(",SEASON="+SEASON);
		sb.append(",COUNTRY="+COUNTRY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row54Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row59Struct implements routines.system.IPersistableRow<row59Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String COUNTRY;

				public String getCOUNTRY () {
					return this.COUNTRY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.COUNTRY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.COUNTRY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
		sb.append(",SEASON="+SEASON);
		sb.append(",COUNTRY="+COUNTRY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row59Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row60Struct implements routines.system.IPersistableRow<row60Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String COUNTRY;

				public String getCOUNTRY () {
					return this.COUNTRY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.COUNTRY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.COUNTRY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
		sb.append(",SEASON="+SEASON);
		sb.append(",COUNTRY="+COUNTRY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row60Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class Merge1Struct implements routines.system.IPersistableRow<Merge1Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String COUNTRY;

				public String getCOUNTRY () {
					return this.COUNTRY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.COUNTRY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.COUNTRY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
		sb.append(",SEASON="+SEASON);
		sb.append(",COUNTRY="+COUNTRY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Merge1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row66Struct implements routines.system.IPersistableRow<row66Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String COUNTRY;

				public String getCOUNTRY () {
					return this.COUNTRY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.COUNTRY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.COUNTRY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
		sb.append(",SEASON="+SEASON);
		sb.append(",COUNTRY="+COUNTRY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row66Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row71Struct implements routines.system.IPersistableRow<row71Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String COUNTRY;

				public String getCOUNTRY () {
					return this.COUNTRY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.COUNTRY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.COUNTRY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
		sb.append(",SEASON="+SEASON);
		sb.append(",COUNTRY="+COUNTRY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row71Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row72Struct implements routines.system.IPersistableRow<row72Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String COUNTRY;

				public String getCOUNTRY () {
					return this.COUNTRY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.COUNTRY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.COUNTRY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
		sb.append(",SEASON="+SEASON);
		sb.append(",COUNTRY="+COUNTRY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row72Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row77Struct implements routines.system.IPersistableRow<row77Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String COUNTRY;

				public String getCOUNTRY () {
					return this.COUNTRY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.COUNTRY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.COUNTRY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
		sb.append(",SEASON="+SEASON);
		sb.append(",COUNTRY="+COUNTRY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row77Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row78Struct implements routines.system.IPersistableRow<row78Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String COUNTRY;

				public String getCOUNTRY () {
					return this.COUNTRY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.COUNTRY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.COUNTRY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
		sb.append(",SEASON="+SEASON);
		sb.append(",COUNTRY="+COUNTRY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row78Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tHashInput_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_4Process(globalMap);
		tDBInput_1Process(globalMap);
		tDBInput_3Process(globalMap);

		row39Struct row39 = new row39Struct();

		row40Struct row40 = new row40Struct();

		row51Struct row51 = new row51Struct();

		row52Struct row52 = new row52Struct();

		row53Struct row53 = new row53Struct();

		row54Struct row54 = new row54Struct();

		row59Struct row59 = new row59Struct();

		row60Struct row60 = new row60Struct();

		Merge1Struct Merge1 = new Merge1Struct();

		row66Struct row66 = new row66Struct();

		row71Struct row71 = new row71Struct();

		row72Struct row72 = new row72Struct();

		row77Struct row77 = new row77Struct();

		row78Struct row78 = new row78Struct();

			row11Struct row11 = new row11Struct();
row41Struct row41 = new row41Struct();
sortie_mapStruct sortie_map = new sortie_mapStruct();
sortie_add_linenumberStruct sortie_add_linenumber = new sortie_add_linenumberStruct();
row10Struct row10 = new row10Struct();








	
	/**
	 * [tFileOutputDelimited_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_4", false);
		start_Hash.put("tFileOutputDelimited_4", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_4";

	
		int tos_count_tFileOutputDelimited_4 = 0;
		

String fileName_tFileOutputDelimited_4 = "";
    fileName_tFileOutputDelimited_4 = (new java.io.File(context.ExtractPathPrice + "Open sales price journal lines.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_4 = null;
    String extension_tFileOutputDelimited_4 = null;
    String directory_tFileOutputDelimited_4 = null;
    if((fileName_tFileOutputDelimited_4.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_4.lastIndexOf(".") < fileName_tFileOutputDelimited_4.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
            extension_tFileOutputDelimited_4 = "";
        } else {
            fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0, fileName_tFileOutputDelimited_4.lastIndexOf("."));
            extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(fileName_tFileOutputDelimited_4.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0, fileName_tFileOutputDelimited_4.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_4.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0, fileName_tFileOutputDelimited_4.lastIndexOf("."));
            extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(fileName_tFileOutputDelimited_4.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
            extension_tFileOutputDelimited_4 = "";
        }
        directory_tFileOutputDelimited_4 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_4 = true;
    java.io.File filetFileOutputDelimited_4 = new java.io.File(fileName_tFileOutputDelimited_4);
    globalMap.put("tFileOutputDelimited_4_FILE_NAME",fileName_tFileOutputDelimited_4);
            int nb_line_tFileOutputDelimited_4 = 0;
            int splitedFileNo_tFileOutputDelimited_4 = 0;
            int currentRow_tFileOutputDelimited_4 = 0;

            final String OUT_DELIM_tFileOutputDelimited_4 = /** Start field tFileOutputDelimited_4:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_4:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_4 = /** Start field tFileOutputDelimited_4:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_4:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_4 != null && directory_tFileOutputDelimited_4.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_4 = new java.io.File(directory_tFileOutputDelimited_4);
                        if(!dir_tFileOutputDelimited_4.exists()) {
                            dir_tFileOutputDelimited_4.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_4 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_4 = new java.io.File(fileName_tFileOutputDelimited_4);
                        if(fileToDelete_tFileOutputDelimited_4.exists()) {
                            fileToDelete_tFileOutputDelimited_4.delete();
                        }
                        outtFileOutputDelimited_4 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_4, false),"ISO-8859-15"));


        resourceMap.put("out_tFileOutputDelimited_4", outtFileOutputDelimited_4);
resourceMap.put("nb_line_tFileOutputDelimited_4", nb_line_tFileOutputDelimited_4);

 



/**
 * [tFileOutputDelimited_4 begin ] stop
 */



	
	/**
	 * [tUniqRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_2", false);
		start_Hash.put("tUniqRow_2", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_2";

	
		int tos_count_tUniqRow_2 = 0;
		

	
		class KeyStruct_tUniqRow_2 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String ITEMNUMBER;
					String PRICECURRENCYCODE;
					String PRICECUSTOMERGROUPCODE;
					String PRODUCTCOLORID;
					String PRODUCTSIZEID;
					String PRODUCTSTYLEID;
					String SEASON;
					String GROUPCODE;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.ITEMNUMBER == null) ? 0 : this.ITEMNUMBER.hashCode());
								
								result = prime * result + ((this.PRICECURRENCYCODE == null) ? 0 : this.PRICECURRENCYCODE.hashCode());
								
								result = prime * result + ((this.PRICECUSTOMERGROUPCODE == null) ? 0 : this.PRICECUSTOMERGROUPCODE.hashCode());
								
								result = prime * result + ((this.PRODUCTCOLORID == null) ? 0 : this.PRODUCTCOLORID.hashCode());
								
								result = prime * result + ((this.PRODUCTSIZEID == null) ? 0 : this.PRODUCTSIZEID.hashCode());
								
								result = prime * result + ((this.PRODUCTSTYLEID == null) ? 0 : this.PRODUCTSTYLEID.hashCode());
								
								result = prime * result + ((this.SEASON == null) ? 0 : this.SEASON.hashCode());
								
								result = prime * result + ((this.GROUPCODE == null) ? 0 : this.GROUPCODE.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_2 other = (KeyStruct_tUniqRow_2) obj;
				
									if (this.ITEMNUMBER == null) {
										if (other.ITEMNUMBER != null) 
											return false;
								
									} else if (!this.ITEMNUMBER.equals(other.ITEMNUMBER))
								 
										return false;
								
									if (this.PRICECURRENCYCODE == null) {
										if (other.PRICECURRENCYCODE != null) 
											return false;
								
									} else if (!this.PRICECURRENCYCODE.equals(other.PRICECURRENCYCODE))
								 
										return false;
								
									if (this.PRICECUSTOMERGROUPCODE == null) {
										if (other.PRICECUSTOMERGROUPCODE != null) 
											return false;
								
									} else if (!this.PRICECUSTOMERGROUPCODE.equals(other.PRICECUSTOMERGROUPCODE))
								 
										return false;
								
									if (this.PRODUCTCOLORID == null) {
										if (other.PRODUCTCOLORID != null) 
											return false;
								
									} else if (!this.PRODUCTCOLORID.equals(other.PRODUCTCOLORID))
								 
										return false;
								
									if (this.PRODUCTSIZEID == null) {
										if (other.PRODUCTSIZEID != null) 
											return false;
								
									} else if (!this.PRODUCTSIZEID.equals(other.PRODUCTSIZEID))
								 
										return false;
								
									if (this.PRODUCTSTYLEID == null) {
										if (other.PRODUCTSTYLEID != null) 
											return false;
								
									} else if (!this.PRODUCTSTYLEID.equals(other.PRODUCTSTYLEID))
								 
										return false;
								
									if (this.SEASON == null) {
										if (other.SEASON != null) 
											return false;
								
									} else if (!this.SEASON.equals(other.SEASON))
								 
										return false;
								
									if (this.GROUPCODE == null) {
										if (other.GROUPCODE != null) 
											return false;
								
									} else if (!this.GROUPCODE.equals(other.GROUPCODE))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_2 = 0;
int nb_duplicates_tUniqRow_2 = 0;
KeyStruct_tUniqRow_2 finder_tUniqRow_2 = new KeyStruct_tUniqRow_2();
java.util.Set<KeyStruct_tUniqRow_2> keystUniqRow_2 = new java.util.HashSet<KeyStruct_tUniqRow_2>(); 

 



/**
 * [tUniqRow_2 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) 
					globalMap.get( "tHash_Lookup_row4" ))
					;					
					
	

row4Struct row4HashKey = new row4Struct();
row4Struct row4Default = new row4Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
sortie_add_linenumberStruct sortie_add_linenumber_tmp = new sortie_add_linenumberStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tMap_22 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_22", false);
		start_Hash.put("tMap_22", System.currentTimeMillis());
		
	
	currentComponent="tMap_22";

	
		int tos_count_tMap_22 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct> tHash_Lookup_row9 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct>) 
					globalMap.get( "tHash_Lookup_row9" ))
					;					
					
	

row9Struct row9HashKey = new row9Struct();
row9Struct row9Default = new row9Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_22__Struct  {
}
Var__tMap_22__Struct Var__tMap_22 = new Var__tMap_22__Struct();
// ###############################

// ###############################
// # Outputs initialization
sortie_mapStruct sortie_map_tmp = new sortie_mapStruct();
// ###############################

        
        



        









 



/**
 * [tMap_22 begin ] stop
 */



	
	/**
	 * [tMap_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_8", false);
		start_Hash.put("tMap_8", System.currentTimeMillis());
		
	
	currentComponent="tMap_8";

	
		int tos_count_tMap_8 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct> tHash_Lookup_row12 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct>) 
					globalMap.get( "tHash_Lookup_row12" ))
					;					
					
	

row12Struct row12HashKey = new row12Struct();
row12Struct row12Default = new row12Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_8__Struct  {
}
Var__tMap_8__Struct Var__tMap_8 = new Var__tMap_8__Struct();
// ###############################

// ###############################
// # Outputs initialization
row41Struct row41_tmp = new row41Struct();
// ###############################

        
        



        









 



/**
 * [tMap_8 begin ] stop
 */



	
	/**
	 * [tUnite_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tUnite_2", false);
		start_Hash.put("tUnite_2", System.currentTimeMillis());
		
	
	currentComponent="tUnite_2";

	
		int tos_count_tUnite_2 = 0;
		

int nb_line_tUnite_2 = 0;

 



/**
 * [tUnite_2 begin ] stop
 */
	
	/**
	 * [tHashInput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_9", false);
		start_Hash.put("tHashInput_9", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_9";

	
		int tos_count_tHashInput_9 = 0;
		


int nb_line_tHashInput_9 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_9=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row37Struct> tHashFile_tHashInput_9 = mf_tHashInput_9.getAdvancedMemoryHashFile("tHashFile_MASTERFILE_EXTRACT_PRICES_1_" + pid +"_tHashOutput_9");
if(tHashFile_tHashInput_9==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row37Struct> iterator_tHashInput_9 = tHashFile_tHashInput_9.iterator();
while (iterator_tHashInput_9.hasNext()) {
    row37Struct next_tHashInput_9 = iterator_tHashInput_9.next();

	row39.TRADEAGREEMENTJOURNALNUMBER = next_tHashInput_9.TRADEAGREEMENTJOURNALNUMBER;
	row39.ITEMNUMBER = next_tHashInput_9.ITEMNUMBER;
	row39.PRICE = next_tHashInput_9.PRICE;
	row39.PRICECURRENCYCODE = next_tHashInput_9.PRICECURRENCYCODE;
	row39.PRICECUSTOMERGROUPCODE = next_tHashInput_9.PRICECUSTOMERGROUPCODE;
	row39.PRODUCTCOLORID = next_tHashInput_9.PRODUCTCOLORID;
	row39.PRODUCTSIZEID = next_tHashInput_9.PRODUCTSIZEID;
	row39.PRODUCTSTYLEID = next_tHashInput_9.PRODUCTSTYLEID;
	row39.QUANTITYUNITSYMBOL = next_tHashInput_9.QUANTITYUNITSYMBOL;
	row39.SEASON = next_tHashInput_9.SEASON;
	row39.COUNTRY = next_tHashInput_9.COUNTRY;
 



/**
 * [tHashInput_9 begin ] stop
 */
	
	/**
	 * [tHashInput_9 main ] start
	 */

	

	
	
	currentComponent="tHashInput_9";

	

 


	tos_count_tHashInput_9++;

/**
 * [tHashInput_9 main ] stop
 */
	
	/**
	 * [tHashInput_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_9";

	

 



/**
 * [tHashInput_9 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_2 main ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	
//////////
 

// for output
			row11 = new row11Struct();
								
			row11.TRADEAGREEMENTJOURNALNUMBER = row39.TRADEAGREEMENTJOURNALNUMBER;								
			row11.ITEMNUMBER = row39.ITEMNUMBER;								
			row11.PRICE = row39.PRICE;								
			row11.PRICECURRENCYCODE = row39.PRICECURRENCYCODE;								
			row11.PRICECUSTOMERGROUPCODE = row39.PRICECUSTOMERGROUPCODE;								
			row11.PRODUCTCOLORID = row39.PRODUCTCOLORID;								
			row11.PRODUCTSIZEID = row39.PRODUCTSIZEID;								
			row11.PRODUCTSTYLEID = row39.PRODUCTSTYLEID;								
			row11.QUANTITYUNITSYMBOL = row39.QUANTITYUNITSYMBOL;								
			row11.SEASON = row39.SEASON;								
			row11.COUNTRY = row39.COUNTRY;			

			nb_line_tUnite_2++;

//////////
 


	tos_count_tUnite_2++;

/**
 * [tUnite_2 main ] stop
 */
	
	/**
	 * [tUnite_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	

 



/**
 * [tUnite_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_8 main ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_8 = false;
		  boolean mainRowRejected_tMap_8 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row12" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow12 = false;
       		  	    	
       		  	    	
 							row12Struct row12ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_8) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_8 = false;
								
                        		    		row12HashKey.itemnumber = row11.ITEMNUMBER ;
                        		    		
                        		    		row12HashKey.productcolorid = row11.PRODUCTCOLORID ;
                        		    		
                        		    		row12HashKey.productsizeid = row11.PRODUCTSIZEID ;
                        		    		
                        		    		row12HashKey.productstyleid = row11.PRODUCTSTYLEID ;
                        		    		

								
		                        	row12HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row12.lookup( row12HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row12.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_8 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row12 != null && tHash_Lookup_row12.getCount(row12HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row12' and it contains more one result from keys :  row12.itemnumber = '" + row12HashKey.itemnumber + "', row12.productcolorid = '" + row12HashKey.productcolorid + "', row12.productsizeid = '" + row12HashKey.productsizeid + "', row12.productstyleid = '" + row12HashKey.productstyleid + "'");
								} // G 071
							

							row12Struct row12 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row12Struct fromLookup_row12 = null;
							row12 = row12Default;
										 
							
								 
							
							
								if (tHash_Lookup_row12 !=null && tHash_Lookup_row12.hasNext()) { // G 099
								
							
								
								fromLookup_row12 = tHash_Lookup_row12.next();

							
							
								} // G 099
							
							

							if(fromLookup_row12 != null) {
								row12 = fromLookup_row12;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_8__Struct Var = Var__tMap_8;// ###############################
        // ###############################
        // # Output tables

row41 = null;

if(!rejectedInnerJoin_tMap_8 ) {

// # Output table : 'row41'
row41_tmp.TRADEAGREEMENTJOURNALNUMBER = row11.TRADEAGREEMENTJOURNALNUMBER ;
row41_tmp.ITEMNUMBER = row11.ITEMNUMBER ;
row41_tmp.PRICE = row11.PRICE ;
row41_tmp.PRICECURRENCYCODE = row11.PRICECURRENCYCODE ;
row41_tmp.PRICECUSTOMERGROUPCODE = row11.PRICECUSTOMERGROUPCODE ;
row41_tmp.PRODUCTCOLORID = row11.PRODUCTCOLORID ;
row41_tmp.PRODUCTSIZEID = row11.PRODUCTSIZEID ;
row41_tmp.PRODUCTSTYLEID = row11.PRODUCTSTYLEID ;
row41_tmp.QUANTITYUNITSYMBOL = row11.QUANTITYUNITSYMBOL ;
row41_tmp.SEASON = row11.SEASON ;
row41_tmp.COUNTRY = row11.COUNTRY ;
row41 = row41_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_8 = false;










 


	tos_count_tMap_8++;

/**
 * [tMap_8 main ] stop
 */
	
	/**
	 * [tMap_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_begin ] stop
 */
// Start of branch "row41"
if(row41 != null) { 



	
	/**
	 * [tMap_22 main ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_22 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_22 = false;
		  boolean mainRowRejected_tMap_22 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row9" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow9 = false;
       		  	    	
       		  	    	
 							row9Struct row9ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_22) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_22 = false;
								
                        		    		row9HashKey.SEASONCODE = row41.SEASON ;
                        		    		

								
		                        	row9HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row9.lookup( row9HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row9 != null && tHash_Lookup_row9.getCount(row9HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row9' and it contains more one result from keys :  row9.SEASONCODE = '" + row9HashKey.SEASONCODE + "'");
								} // G 071
							

							row9Struct row9 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row9Struct fromLookup_row9 = null;
							row9 = row9Default;
										 
							
								 
							
							
								if (tHash_Lookup_row9 !=null && tHash_Lookup_row9.hasNext()) { // G 099
								
							
								
								fromLookup_row9 = tHash_Lookup_row9.next();

							
							
								} // G 099
							
							

							if(fromLookup_row9 != null) {
								row9 = fromLookup_row9;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_22__Struct Var = Var__tMap_22;// ###############################
        // ###############################
        // # Output tables

sortie_map = null;


// # Output table : 'sortie_map'
sortie_map_tmp.ITEMNUMBER = row41.ITEMNUMBER ;
sortie_map_tmp.PRICE = row41.PRICE ;
sortie_map_tmp.PRICECURRENCYCODE = row41.PRICECURRENCYCODE ;
sortie_map_tmp.PRICECUSTOMERGROUPCODE = row41.PRICECUSTOMERGROUPCODE ;
sortie_map_tmp.PRODUCTCOLORID = row41.PRODUCTCOLORID ;
sortie_map_tmp.PRODUCTSIZEID = row41.PRODUCTSIZEID ;
sortie_map_tmp.PRODUCTSTYLEID = row41.PRODUCTSTYLEID ;
sortie_map_tmp.SEASON = row41.SEASON ;
sortie_map_tmp.COUNTRY = row41.COUNTRY ;
sortie_map_tmp.FromDate = row9.FromDate ;
sortie_map_tmp.ToDate = row9.ToDate ;
sortie_map = sortie_map_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_22 = false;










 


	tos_count_tMap_22++;

/**
 * [tMap_22 main ] stop
 */
	
	/**
	 * [tMap_22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

 



/**
 * [tMap_22 process_data_begin ] stop
 */
// Start of branch "sortie_map"
if(sortie_map != null) { 



	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row4" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow4 = false;
       		  	    	
       		  	    	
 							row4Struct row4ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		row4HashKey.SPLPRICETYPE = sortie_map.PRICECUSTOMERGROUPCODE ;
                        		    		
                        		    		row4HashKey.SPLSEASONCODE = sortie_map.SEASON ;
                        		    		
                        		    		row4HashKey.SPLCOUNTRYREGIONID = sortie_map.COUNTRY ;
                        		    		

								
		                        	row4HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row4.lookup( row4HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row4 != null && tHash_Lookup_row4.getCount(row4HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row4' and it contains more one result from keys :  row4.SPLPRICETYPE = '" + row4HashKey.SPLPRICETYPE + "', row4.SPLSEASONCODE = '" + row4HashKey.SPLSEASONCODE + "', row4.SPLCOUNTRYREGIONID = '" + row4HashKey.SPLCOUNTRYREGIONID + "'");
								} // G 071
							

							row4Struct row4 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row4Struct fromLookup_row4 = null;
							row4 = row4Default;
										 
							
								 
							
							
								if (tHash_Lookup_row4 !=null && tHash_Lookup_row4.hasNext()) { // G 099
								
							
								
								fromLookup_row4 = tHash_Lookup_row4.next();

							
							
								} // G 099
							
							

							if(fromLookup_row4 != null) {
								row4 = fromLookup_row4;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

sortie_add_linenumber = null;


// # Output table : 'sortie_add_linenumber'
sortie_add_linenumber_tmp.ITEMNUMBER = sortie_map.ITEMNUMBER ;
sortie_add_linenumber_tmp.PRICE = BigDecimal.valueOf(sortie_map.PRICE ).setScale(2,BigDecimal.ROUND_HALF_UP) ;
sortie_add_linenumber_tmp.PRICECURRENCYCODE = sortie_map.PRICECURRENCYCODE ;
sortie_add_linenumber_tmp.PRICECUSTOMERGROUPCODE = sortie_map.PRICECUSTOMERGROUPCODE ;
sortie_add_linenumber_tmp.PRODUCTCOLORID = sortie_map.PRODUCTCOLORID ;
sortie_add_linenumber_tmp.PRODUCTSIZEID = sortie_map.PRODUCTSIZEID ;
sortie_add_linenumber_tmp.PRODUCTSTYLEID = sortie_map.PRODUCTSTYLEID ;
sortie_add_linenumber_tmp.SEASON = sortie_map.SEASON ;
sortie_add_linenumber_tmp.COUNTRY = sortie_map.COUNTRY ;
sortie_add_linenumber_tmp.GROUPCODE = row4.GROUPCODE ;
sortie_add_linenumber_tmp.FromDate = sortie_map.FromDate ;
sortie_add_linenumber_tmp.ToDate = sortie_map.ToDate ;
sortie_add_linenumber = sortie_add_linenumber_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "sortie_add_linenumber"
if(sortie_add_linenumber != null) { 



	
	/**
	 * [tUniqRow_2 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	
row10 = null;			
if(sortie_add_linenumber.ITEMNUMBER == null){
	finder_tUniqRow_2.ITEMNUMBER = null;
}else{
	finder_tUniqRow_2.ITEMNUMBER = sortie_add_linenumber.ITEMNUMBER.toLowerCase();
}
if(sortie_add_linenumber.PRICECURRENCYCODE == null){
	finder_tUniqRow_2.PRICECURRENCYCODE = null;
}else{
	finder_tUniqRow_2.PRICECURRENCYCODE = sortie_add_linenumber.PRICECURRENCYCODE.toLowerCase();
}
if(sortie_add_linenumber.PRICECUSTOMERGROUPCODE == null){
	finder_tUniqRow_2.PRICECUSTOMERGROUPCODE = null;
}else{
	finder_tUniqRow_2.PRICECUSTOMERGROUPCODE = sortie_add_linenumber.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTCOLORID == null){
	finder_tUniqRow_2.PRODUCTCOLORID = null;
}else{
	finder_tUniqRow_2.PRODUCTCOLORID = sortie_add_linenumber.PRODUCTCOLORID.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTSIZEID == null){
	finder_tUniqRow_2.PRODUCTSIZEID = null;
}else{
	finder_tUniqRow_2.PRODUCTSIZEID = sortie_add_linenumber.PRODUCTSIZEID.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTSTYLEID == null){
	finder_tUniqRow_2.PRODUCTSTYLEID = null;
}else{
	finder_tUniqRow_2.PRODUCTSTYLEID = sortie_add_linenumber.PRODUCTSTYLEID.toLowerCase();
}
if(sortie_add_linenumber.SEASON == null){
	finder_tUniqRow_2.SEASON = null;
}else{
	finder_tUniqRow_2.SEASON = sortie_add_linenumber.SEASON.toLowerCase();
}
if(sortie_add_linenumber.GROUPCODE == null){
	finder_tUniqRow_2.GROUPCODE = null;
}else{
	finder_tUniqRow_2.GROUPCODE = sortie_add_linenumber.GROUPCODE.toLowerCase();
}	
finder_tUniqRow_2.hashCodeDirty = true;
if (!keystUniqRow_2.contains(finder_tUniqRow_2)) {
		KeyStruct_tUniqRow_2 new_tUniqRow_2 = new KeyStruct_tUniqRow_2();

		
if(sortie_add_linenumber.ITEMNUMBER == null){
	new_tUniqRow_2.ITEMNUMBER = null;
}else{
	new_tUniqRow_2.ITEMNUMBER = sortie_add_linenumber.ITEMNUMBER.toLowerCase();
}
if(sortie_add_linenumber.PRICECURRENCYCODE == null){
	new_tUniqRow_2.PRICECURRENCYCODE = null;
}else{
	new_tUniqRow_2.PRICECURRENCYCODE = sortie_add_linenumber.PRICECURRENCYCODE.toLowerCase();
}
if(sortie_add_linenumber.PRICECUSTOMERGROUPCODE == null){
	new_tUniqRow_2.PRICECUSTOMERGROUPCODE = null;
}else{
	new_tUniqRow_2.PRICECUSTOMERGROUPCODE = sortie_add_linenumber.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTCOLORID == null){
	new_tUniqRow_2.PRODUCTCOLORID = null;
}else{
	new_tUniqRow_2.PRODUCTCOLORID = sortie_add_linenumber.PRODUCTCOLORID.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTSIZEID == null){
	new_tUniqRow_2.PRODUCTSIZEID = null;
}else{
	new_tUniqRow_2.PRODUCTSIZEID = sortie_add_linenumber.PRODUCTSIZEID.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTSTYLEID == null){
	new_tUniqRow_2.PRODUCTSTYLEID = null;
}else{
	new_tUniqRow_2.PRODUCTSTYLEID = sortie_add_linenumber.PRODUCTSTYLEID.toLowerCase();
}
if(sortie_add_linenumber.SEASON == null){
	new_tUniqRow_2.SEASON = null;
}else{
	new_tUniqRow_2.SEASON = sortie_add_linenumber.SEASON.toLowerCase();
}
if(sortie_add_linenumber.GROUPCODE == null){
	new_tUniqRow_2.GROUPCODE = null;
}else{
	new_tUniqRow_2.GROUPCODE = sortie_add_linenumber.GROUPCODE.toLowerCase();
}
		
		keystUniqRow_2.add(new_tUniqRow_2);if(row10 == null){ 
	
	row10 = new row10Struct();
}row10.ITEMNUMBER = sortie_add_linenumber.ITEMNUMBER;			row10.PRICE = sortie_add_linenumber.PRICE;			row10.PRICECURRENCYCODE = sortie_add_linenumber.PRICECURRENCYCODE;			row10.PRICECUSTOMERGROUPCODE = sortie_add_linenumber.PRICECUSTOMERGROUPCODE;			row10.PRODUCTCOLORID = sortie_add_linenumber.PRODUCTCOLORID;			row10.PRODUCTSIZEID = sortie_add_linenumber.PRODUCTSIZEID;			row10.PRODUCTSTYLEID = sortie_add_linenumber.PRODUCTSTYLEID;			row10.SEASON = sortie_add_linenumber.SEASON;			row10.COUNTRY = sortie_add_linenumber.COUNTRY;			row10.GROUPCODE = sortie_add_linenumber.GROUPCODE;			row10.FromDate = sortie_add_linenumber.FromDate;			row10.ToDate = sortie_add_linenumber.ToDate;					
		nb_uniques_tUniqRow_2++;
	} else {
	  nb_duplicates_tUniqRow_2++;
	}

 


	tos_count_tUniqRow_2++;

/**
 * [tUniqRow_2 main ] stop
 */
	
	/**
	 * [tUniqRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

 



/**
 * [tUniqRow_2 process_data_begin ] stop
 */
// Start of branch "row10"
if(row10 != null) { 



	
	/**
	 * [tFileOutputDelimited_4 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	


                    StringBuilder sb_tFileOutputDelimited_4 = new StringBuilder();
                            if(row10.ITEMNUMBER != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.ITEMNUMBER
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRICE != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRICE.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRICECURRENCYCODE != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRICECURRENCYCODE
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRICECUSTOMERGROUPCODE != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRICECUSTOMERGROUPCODE
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRODUCTCOLORID != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRODUCTCOLORID
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRODUCTSIZEID != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRODUCTSIZEID
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRODUCTSTYLEID != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRODUCTSTYLEID
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.SEASON != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.SEASON
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.COUNTRY != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.COUNTRY
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.GROUPCODE != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.GROUPCODE
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.FromDate != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.FromDate
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.ToDate != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.ToDate
                        );
                            }
                    sb_tFileOutputDelimited_4.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_4);


                    nb_line_tFileOutputDelimited_4++;
                    resourceMap.put("nb_line_tFileOutputDelimited_4", nb_line_tFileOutputDelimited_4);

                        outtFileOutputDelimited_4.write(sb_tFileOutputDelimited_4.toString());




 


	tos_count_tFileOutputDelimited_4++;

/**
 * [tFileOutputDelimited_4 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	

 



/**
 * [tFileOutputDelimited_4 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	

 



/**
 * [tFileOutputDelimited_4 process_data_end ] stop
 */

} // End of branch "row10"




	
	/**
	 * [tUniqRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

 



/**
 * [tUniqRow_2 process_data_end ] stop
 */

} // End of branch "sortie_add_linenumber"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */

} // End of branch "sortie_map"




	
	/**
	 * [tMap_22 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

 



/**
 * [tMap_22 process_data_end ] stop
 */

} // End of branch "row41"




	
	/**
	 * [tMap_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_end ] stop
 */



	
	/**
	 * [tUnite_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	

 



/**
 * [tUnite_2 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_9";

	

 



/**
 * [tHashInput_9 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_9 end ] start
	 */

	

	
	
	currentComponent="tHashInput_9";

	
    

		
			nb_line_tHashInput_9++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_MASTERFILE_EXTRACT_PRICES_1_" + pid +"_tHashOutput_9");
	


	globalMap.put("tHashInput_9_NB_LINE", nb_line_tHashInput_9);       

 

ok_Hash.put("tHashInput_9", true);
end_Hash.put("tHashInput_9", System.currentTimeMillis());




/**
 * [tHashInput_9 end ] stop
 */
	
	/**
	 * [tHashInput_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_10", false);
		start_Hash.put("tHashInput_10", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_10";

	
		int tos_count_tHashInput_10 = 0;
		


int nb_line_tHashInput_10 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_10=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row38Struct> tHashFile_tHashInput_10 = mf_tHashInput_10.getAdvancedMemoryHashFile("tHashFile_MASTERFILE_EXTRACT_PRICES_1_" + pid +"_tHashOutput_10");
if(tHashFile_tHashInput_10==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row38Struct> iterator_tHashInput_10 = tHashFile_tHashInput_10.iterator();
while (iterator_tHashInput_10.hasNext()) {
    row38Struct next_tHashInput_10 = iterator_tHashInput_10.next();

	row40.TRADEAGREEMENTJOURNALNUMBER = next_tHashInput_10.TRADEAGREEMENTJOURNALNUMBER;
	row40.ITEMNUMBER = next_tHashInput_10.ITEMNUMBER;
	row40.PRICE = next_tHashInput_10.PRICE;
	row40.PRICECURRENCYCODE = next_tHashInput_10.PRICECURRENCYCODE;
	row40.PRICECUSTOMERGROUPCODE = next_tHashInput_10.PRICECUSTOMERGROUPCODE;
	row40.PRODUCTCOLORID = next_tHashInput_10.PRODUCTCOLORID;
	row40.PRODUCTSIZEID = next_tHashInput_10.PRODUCTSIZEID;
	row40.PRODUCTSTYLEID = next_tHashInput_10.PRODUCTSTYLEID;
	row40.QUANTITYUNITSYMBOL = next_tHashInput_10.QUANTITYUNITSYMBOL;
	row40.SEASON = next_tHashInput_10.SEASON;
	row40.COUNTRY = next_tHashInput_10.COUNTRY;
 



/**
 * [tHashInput_10 begin ] stop
 */
	
	/**
	 * [tHashInput_10 main ] start
	 */

	

	
	
	currentComponent="tHashInput_10";

	

 


	tos_count_tHashInput_10++;

/**
 * [tHashInput_10 main ] stop
 */
	
	/**
	 * [tHashInput_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_10";

	

 



/**
 * [tHashInput_10 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_2 main ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	
//////////
 

// for output
			row11 = new row11Struct();
								
			row11.TRADEAGREEMENTJOURNALNUMBER = row40.TRADEAGREEMENTJOURNALNUMBER;								
			row11.ITEMNUMBER = row40.ITEMNUMBER;								
			row11.PRICE = row40.PRICE;								
			row11.PRICECURRENCYCODE = row40.PRICECURRENCYCODE;								
			row11.PRICECUSTOMERGROUPCODE = row40.PRICECUSTOMERGROUPCODE;								
			row11.PRODUCTCOLORID = row40.PRODUCTCOLORID;								
			row11.PRODUCTSIZEID = row40.PRODUCTSIZEID;								
			row11.PRODUCTSTYLEID = row40.PRODUCTSTYLEID;								
			row11.QUANTITYUNITSYMBOL = row40.QUANTITYUNITSYMBOL;								
			row11.SEASON = row40.SEASON;								
			row11.COUNTRY = row40.COUNTRY;			

			nb_line_tUnite_2++;

//////////
 


	tos_count_tUnite_2++;

/**
 * [tUnite_2 main ] stop
 */
	
	/**
	 * [tUnite_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	

 



/**
 * [tUnite_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_8 main ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_8 = false;
		  boolean mainRowRejected_tMap_8 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row12" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow12 = false;
       		  	    	
       		  	    	
 							row12Struct row12ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_8) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_8 = false;
								
                        		    		row12HashKey.itemnumber = row11.ITEMNUMBER ;
                        		    		
                        		    		row12HashKey.productcolorid = row11.PRODUCTCOLORID ;
                        		    		
                        		    		row12HashKey.productsizeid = row11.PRODUCTSIZEID ;
                        		    		
                        		    		row12HashKey.productstyleid = row11.PRODUCTSTYLEID ;
                        		    		

								
		                        	row12HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row12.lookup( row12HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row12.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_8 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row12 != null && tHash_Lookup_row12.getCount(row12HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row12' and it contains more one result from keys :  row12.itemnumber = '" + row12HashKey.itemnumber + "', row12.productcolorid = '" + row12HashKey.productcolorid + "', row12.productsizeid = '" + row12HashKey.productsizeid + "', row12.productstyleid = '" + row12HashKey.productstyleid + "'");
								} // G 071
							

							row12Struct row12 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row12Struct fromLookup_row12 = null;
							row12 = row12Default;
										 
							
								 
							
							
								if (tHash_Lookup_row12 !=null && tHash_Lookup_row12.hasNext()) { // G 099
								
							
								
								fromLookup_row12 = tHash_Lookup_row12.next();

							
							
								} // G 099
							
							

							if(fromLookup_row12 != null) {
								row12 = fromLookup_row12;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_8__Struct Var = Var__tMap_8;// ###############################
        // ###############################
        // # Output tables

row41 = null;

if(!rejectedInnerJoin_tMap_8 ) {

// # Output table : 'row41'
row41_tmp.TRADEAGREEMENTJOURNALNUMBER = row11.TRADEAGREEMENTJOURNALNUMBER ;
row41_tmp.ITEMNUMBER = row11.ITEMNUMBER ;
row41_tmp.PRICE = row11.PRICE ;
row41_tmp.PRICECURRENCYCODE = row11.PRICECURRENCYCODE ;
row41_tmp.PRICECUSTOMERGROUPCODE = row11.PRICECUSTOMERGROUPCODE ;
row41_tmp.PRODUCTCOLORID = row11.PRODUCTCOLORID ;
row41_tmp.PRODUCTSIZEID = row11.PRODUCTSIZEID ;
row41_tmp.PRODUCTSTYLEID = row11.PRODUCTSTYLEID ;
row41_tmp.QUANTITYUNITSYMBOL = row11.QUANTITYUNITSYMBOL ;
row41_tmp.SEASON = row11.SEASON ;
row41_tmp.COUNTRY = row11.COUNTRY ;
row41 = row41_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_8 = false;










 


	tos_count_tMap_8++;

/**
 * [tMap_8 main ] stop
 */
	
	/**
	 * [tMap_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_begin ] stop
 */
// Start of branch "row41"
if(row41 != null) { 



	
	/**
	 * [tMap_22 main ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_22 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_22 = false;
		  boolean mainRowRejected_tMap_22 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row9" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow9 = false;
       		  	    	
       		  	    	
 							row9Struct row9ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_22) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_22 = false;
								
                        		    		row9HashKey.SEASONCODE = row41.SEASON ;
                        		    		

								
		                        	row9HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row9.lookup( row9HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row9 != null && tHash_Lookup_row9.getCount(row9HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row9' and it contains more one result from keys :  row9.SEASONCODE = '" + row9HashKey.SEASONCODE + "'");
								} // G 071
							

							row9Struct row9 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row9Struct fromLookup_row9 = null;
							row9 = row9Default;
										 
							
								 
							
							
								if (tHash_Lookup_row9 !=null && tHash_Lookup_row9.hasNext()) { // G 099
								
							
								
								fromLookup_row9 = tHash_Lookup_row9.next();

							
							
								} // G 099
							
							

							if(fromLookup_row9 != null) {
								row9 = fromLookup_row9;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_22__Struct Var = Var__tMap_22;// ###############################
        // ###############################
        // # Output tables

sortie_map = null;


// # Output table : 'sortie_map'
sortie_map_tmp.ITEMNUMBER = row41.ITEMNUMBER ;
sortie_map_tmp.PRICE = row41.PRICE ;
sortie_map_tmp.PRICECURRENCYCODE = row41.PRICECURRENCYCODE ;
sortie_map_tmp.PRICECUSTOMERGROUPCODE = row41.PRICECUSTOMERGROUPCODE ;
sortie_map_tmp.PRODUCTCOLORID = row41.PRODUCTCOLORID ;
sortie_map_tmp.PRODUCTSIZEID = row41.PRODUCTSIZEID ;
sortie_map_tmp.PRODUCTSTYLEID = row41.PRODUCTSTYLEID ;
sortie_map_tmp.SEASON = row41.SEASON ;
sortie_map_tmp.COUNTRY = row41.COUNTRY ;
sortie_map_tmp.FromDate = row9.FromDate ;
sortie_map_tmp.ToDate = row9.ToDate ;
sortie_map = sortie_map_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_22 = false;










 


	tos_count_tMap_22++;

/**
 * [tMap_22 main ] stop
 */
	
	/**
	 * [tMap_22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

 



/**
 * [tMap_22 process_data_begin ] stop
 */
// Start of branch "sortie_map"
if(sortie_map != null) { 



	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row4" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow4 = false;
       		  	    	
       		  	    	
 							row4Struct row4ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		row4HashKey.SPLPRICETYPE = sortie_map.PRICECUSTOMERGROUPCODE ;
                        		    		
                        		    		row4HashKey.SPLSEASONCODE = sortie_map.SEASON ;
                        		    		
                        		    		row4HashKey.SPLCOUNTRYREGIONID = sortie_map.COUNTRY ;
                        		    		

								
		                        	row4HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row4.lookup( row4HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row4 != null && tHash_Lookup_row4.getCount(row4HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row4' and it contains more one result from keys :  row4.SPLPRICETYPE = '" + row4HashKey.SPLPRICETYPE + "', row4.SPLSEASONCODE = '" + row4HashKey.SPLSEASONCODE + "', row4.SPLCOUNTRYREGIONID = '" + row4HashKey.SPLCOUNTRYREGIONID + "'");
								} // G 071
							

							row4Struct row4 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row4Struct fromLookup_row4 = null;
							row4 = row4Default;
										 
							
								 
							
							
								if (tHash_Lookup_row4 !=null && tHash_Lookup_row4.hasNext()) { // G 099
								
							
								
								fromLookup_row4 = tHash_Lookup_row4.next();

							
							
								} // G 099
							
							

							if(fromLookup_row4 != null) {
								row4 = fromLookup_row4;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

sortie_add_linenumber = null;


// # Output table : 'sortie_add_linenumber'
sortie_add_linenumber_tmp.ITEMNUMBER = sortie_map.ITEMNUMBER ;
sortie_add_linenumber_tmp.PRICE = BigDecimal.valueOf(sortie_map.PRICE ).setScale(2,BigDecimal.ROUND_HALF_UP) ;
sortie_add_linenumber_tmp.PRICECURRENCYCODE = sortie_map.PRICECURRENCYCODE ;
sortie_add_linenumber_tmp.PRICECUSTOMERGROUPCODE = sortie_map.PRICECUSTOMERGROUPCODE ;
sortie_add_linenumber_tmp.PRODUCTCOLORID = sortie_map.PRODUCTCOLORID ;
sortie_add_linenumber_tmp.PRODUCTSIZEID = sortie_map.PRODUCTSIZEID ;
sortie_add_linenumber_tmp.PRODUCTSTYLEID = sortie_map.PRODUCTSTYLEID ;
sortie_add_linenumber_tmp.SEASON = sortie_map.SEASON ;
sortie_add_linenumber_tmp.COUNTRY = sortie_map.COUNTRY ;
sortie_add_linenumber_tmp.GROUPCODE = row4.GROUPCODE ;
sortie_add_linenumber_tmp.FromDate = sortie_map.FromDate ;
sortie_add_linenumber_tmp.ToDate = sortie_map.ToDate ;
sortie_add_linenumber = sortie_add_linenumber_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "sortie_add_linenumber"
if(sortie_add_linenumber != null) { 



	
	/**
	 * [tUniqRow_2 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	
row10 = null;			
if(sortie_add_linenumber.ITEMNUMBER == null){
	finder_tUniqRow_2.ITEMNUMBER = null;
}else{
	finder_tUniqRow_2.ITEMNUMBER = sortie_add_linenumber.ITEMNUMBER.toLowerCase();
}
if(sortie_add_linenumber.PRICECURRENCYCODE == null){
	finder_tUniqRow_2.PRICECURRENCYCODE = null;
}else{
	finder_tUniqRow_2.PRICECURRENCYCODE = sortie_add_linenumber.PRICECURRENCYCODE.toLowerCase();
}
if(sortie_add_linenumber.PRICECUSTOMERGROUPCODE == null){
	finder_tUniqRow_2.PRICECUSTOMERGROUPCODE = null;
}else{
	finder_tUniqRow_2.PRICECUSTOMERGROUPCODE = sortie_add_linenumber.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTCOLORID == null){
	finder_tUniqRow_2.PRODUCTCOLORID = null;
}else{
	finder_tUniqRow_2.PRODUCTCOLORID = sortie_add_linenumber.PRODUCTCOLORID.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTSIZEID == null){
	finder_tUniqRow_2.PRODUCTSIZEID = null;
}else{
	finder_tUniqRow_2.PRODUCTSIZEID = sortie_add_linenumber.PRODUCTSIZEID.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTSTYLEID == null){
	finder_tUniqRow_2.PRODUCTSTYLEID = null;
}else{
	finder_tUniqRow_2.PRODUCTSTYLEID = sortie_add_linenumber.PRODUCTSTYLEID.toLowerCase();
}
if(sortie_add_linenumber.SEASON == null){
	finder_tUniqRow_2.SEASON = null;
}else{
	finder_tUniqRow_2.SEASON = sortie_add_linenumber.SEASON.toLowerCase();
}
if(sortie_add_linenumber.GROUPCODE == null){
	finder_tUniqRow_2.GROUPCODE = null;
}else{
	finder_tUniqRow_2.GROUPCODE = sortie_add_linenumber.GROUPCODE.toLowerCase();
}	
finder_tUniqRow_2.hashCodeDirty = true;
if (!keystUniqRow_2.contains(finder_tUniqRow_2)) {
		KeyStruct_tUniqRow_2 new_tUniqRow_2 = new KeyStruct_tUniqRow_2();

		
if(sortie_add_linenumber.ITEMNUMBER == null){
	new_tUniqRow_2.ITEMNUMBER = null;
}else{
	new_tUniqRow_2.ITEMNUMBER = sortie_add_linenumber.ITEMNUMBER.toLowerCase();
}
if(sortie_add_linenumber.PRICECURRENCYCODE == null){
	new_tUniqRow_2.PRICECURRENCYCODE = null;
}else{
	new_tUniqRow_2.PRICECURRENCYCODE = sortie_add_linenumber.PRICECURRENCYCODE.toLowerCase();
}
if(sortie_add_linenumber.PRICECUSTOMERGROUPCODE == null){
	new_tUniqRow_2.PRICECUSTOMERGROUPCODE = null;
}else{
	new_tUniqRow_2.PRICECUSTOMERGROUPCODE = sortie_add_linenumber.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTCOLORID == null){
	new_tUniqRow_2.PRODUCTCOLORID = null;
}else{
	new_tUniqRow_2.PRODUCTCOLORID = sortie_add_linenumber.PRODUCTCOLORID.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTSIZEID == null){
	new_tUniqRow_2.PRODUCTSIZEID = null;
}else{
	new_tUniqRow_2.PRODUCTSIZEID = sortie_add_linenumber.PRODUCTSIZEID.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTSTYLEID == null){
	new_tUniqRow_2.PRODUCTSTYLEID = null;
}else{
	new_tUniqRow_2.PRODUCTSTYLEID = sortie_add_linenumber.PRODUCTSTYLEID.toLowerCase();
}
if(sortie_add_linenumber.SEASON == null){
	new_tUniqRow_2.SEASON = null;
}else{
	new_tUniqRow_2.SEASON = sortie_add_linenumber.SEASON.toLowerCase();
}
if(sortie_add_linenumber.GROUPCODE == null){
	new_tUniqRow_2.GROUPCODE = null;
}else{
	new_tUniqRow_2.GROUPCODE = sortie_add_linenumber.GROUPCODE.toLowerCase();
}
		
		keystUniqRow_2.add(new_tUniqRow_2);if(row10 == null){ 
	
	row10 = new row10Struct();
}row10.ITEMNUMBER = sortie_add_linenumber.ITEMNUMBER;			row10.PRICE = sortie_add_linenumber.PRICE;			row10.PRICECURRENCYCODE = sortie_add_linenumber.PRICECURRENCYCODE;			row10.PRICECUSTOMERGROUPCODE = sortie_add_linenumber.PRICECUSTOMERGROUPCODE;			row10.PRODUCTCOLORID = sortie_add_linenumber.PRODUCTCOLORID;			row10.PRODUCTSIZEID = sortie_add_linenumber.PRODUCTSIZEID;			row10.PRODUCTSTYLEID = sortie_add_linenumber.PRODUCTSTYLEID;			row10.SEASON = sortie_add_linenumber.SEASON;			row10.COUNTRY = sortie_add_linenumber.COUNTRY;			row10.GROUPCODE = sortie_add_linenumber.GROUPCODE;			row10.FromDate = sortie_add_linenumber.FromDate;			row10.ToDate = sortie_add_linenumber.ToDate;					
		nb_uniques_tUniqRow_2++;
	} else {
	  nb_duplicates_tUniqRow_2++;
	}

 


	tos_count_tUniqRow_2++;

/**
 * [tUniqRow_2 main ] stop
 */
	
	/**
	 * [tUniqRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

 



/**
 * [tUniqRow_2 process_data_begin ] stop
 */
// Start of branch "row10"
if(row10 != null) { 



	
	/**
	 * [tFileOutputDelimited_4 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	


                    StringBuilder sb_tFileOutputDelimited_4 = new StringBuilder();
                            if(row10.ITEMNUMBER != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.ITEMNUMBER
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRICE != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRICE.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRICECURRENCYCODE != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRICECURRENCYCODE
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRICECUSTOMERGROUPCODE != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRICECUSTOMERGROUPCODE
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRODUCTCOLORID != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRODUCTCOLORID
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRODUCTSIZEID != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRODUCTSIZEID
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRODUCTSTYLEID != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRODUCTSTYLEID
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.SEASON != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.SEASON
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.COUNTRY != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.COUNTRY
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.GROUPCODE != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.GROUPCODE
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.FromDate != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.FromDate
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.ToDate != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.ToDate
                        );
                            }
                    sb_tFileOutputDelimited_4.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_4);


                    nb_line_tFileOutputDelimited_4++;
                    resourceMap.put("nb_line_tFileOutputDelimited_4", nb_line_tFileOutputDelimited_4);

                        outtFileOutputDelimited_4.write(sb_tFileOutputDelimited_4.toString());




 


	tos_count_tFileOutputDelimited_4++;

/**
 * [tFileOutputDelimited_4 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	

 



/**
 * [tFileOutputDelimited_4 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	

 



/**
 * [tFileOutputDelimited_4 process_data_end ] stop
 */

} // End of branch "row10"




	
	/**
	 * [tUniqRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

 



/**
 * [tUniqRow_2 process_data_end ] stop
 */

} // End of branch "sortie_add_linenumber"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */

} // End of branch "sortie_map"




	
	/**
	 * [tMap_22 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

 



/**
 * [tMap_22 process_data_end ] stop
 */

} // End of branch "row41"




	
	/**
	 * [tMap_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_end ] stop
 */



	
	/**
	 * [tUnite_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	

 



/**
 * [tUnite_2 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_10";

	

 



/**
 * [tHashInput_10 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_10 end ] start
	 */

	

	
	
	currentComponent="tHashInput_10";

	
    

		
			nb_line_tHashInput_10++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_MASTERFILE_EXTRACT_PRICES_1_" + pid +"_tHashOutput_10");
	


	globalMap.put("tHashInput_10_NB_LINE", nb_line_tHashInput_10);       

 

ok_Hash.put("tHashInput_10", true);
end_Hash.put("tHashInput_10", System.currentTimeMillis());




/**
 * [tHashInput_10 end ] stop
 */
	
	/**
	 * [tHashInput_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_11", false);
		start_Hash.put("tHashInput_11", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_11";

	
		int tos_count_tHashInput_11 = 0;
		


int nb_line_tHashInput_11 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_11=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row44Struct> tHashFile_tHashInput_11 = mf_tHashInput_11.getAdvancedMemoryHashFile("tHashFile_MASTERFILE_EXTRACT_PRICES_1_" + pid +"_tHashOutput_11");
if(tHashFile_tHashInput_11==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row44Struct> iterator_tHashInput_11 = tHashFile_tHashInput_11.iterator();
while (iterator_tHashInput_11.hasNext()) {
    row44Struct next_tHashInput_11 = iterator_tHashInput_11.next();

	row51.TRADEAGREEMENTJOURNALNUMBER = next_tHashInput_11.TRADEAGREEMENTJOURNALNUMBER;
	row51.ITEMNUMBER = next_tHashInput_11.ITEMNUMBER;
	row51.PRICE = next_tHashInput_11.PRICE;
	row51.PRICECURRENCYCODE = next_tHashInput_11.PRICECURRENCYCODE;
	row51.PRICECUSTOMERGROUPCODE = next_tHashInput_11.PRICECUSTOMERGROUPCODE;
	row51.PRODUCTCOLORID = next_tHashInput_11.PRODUCTCOLORID;
	row51.PRODUCTSIZEID = next_tHashInput_11.PRODUCTSIZEID;
	row51.PRODUCTSTYLEID = next_tHashInput_11.PRODUCTSTYLEID;
	row51.QUANTITYUNITSYMBOL = next_tHashInput_11.QUANTITYUNITSYMBOL;
	row51.SEASON = next_tHashInput_11.SEASON;
	row51.COUNTRY = next_tHashInput_11.COUNTRY;
 



/**
 * [tHashInput_11 begin ] stop
 */
	
	/**
	 * [tHashInput_11 main ] start
	 */

	

	
	
	currentComponent="tHashInput_11";

	

 


	tos_count_tHashInput_11++;

/**
 * [tHashInput_11 main ] stop
 */
	
	/**
	 * [tHashInput_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_11";

	

 



/**
 * [tHashInput_11 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_2 main ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	
//////////
 

// for output
			row11 = new row11Struct();
								
			row11.TRADEAGREEMENTJOURNALNUMBER = row51.TRADEAGREEMENTJOURNALNUMBER;								
			row11.ITEMNUMBER = row51.ITEMNUMBER;								
			row11.PRICE = row51.PRICE;								
			row11.PRICECURRENCYCODE = row51.PRICECURRENCYCODE;								
			row11.PRICECUSTOMERGROUPCODE = row51.PRICECUSTOMERGROUPCODE;								
			row11.PRODUCTCOLORID = row51.PRODUCTCOLORID;								
			row11.PRODUCTSIZEID = row51.PRODUCTSIZEID;								
			row11.PRODUCTSTYLEID = row51.PRODUCTSTYLEID;								
			row11.QUANTITYUNITSYMBOL = row51.QUANTITYUNITSYMBOL;								
			row11.SEASON = row51.SEASON;								
			row11.COUNTRY = row51.COUNTRY;			

			nb_line_tUnite_2++;

//////////
 


	tos_count_tUnite_2++;

/**
 * [tUnite_2 main ] stop
 */
	
	/**
	 * [tUnite_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	

 



/**
 * [tUnite_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_8 main ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_8 = false;
		  boolean mainRowRejected_tMap_8 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row12" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow12 = false;
       		  	    	
       		  	    	
 							row12Struct row12ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_8) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_8 = false;
								
                        		    		row12HashKey.itemnumber = row11.ITEMNUMBER ;
                        		    		
                        		    		row12HashKey.productcolorid = row11.PRODUCTCOLORID ;
                        		    		
                        		    		row12HashKey.productsizeid = row11.PRODUCTSIZEID ;
                        		    		
                        		    		row12HashKey.productstyleid = row11.PRODUCTSTYLEID ;
                        		    		

								
		                        	row12HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row12.lookup( row12HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row12.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_8 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row12 != null && tHash_Lookup_row12.getCount(row12HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row12' and it contains more one result from keys :  row12.itemnumber = '" + row12HashKey.itemnumber + "', row12.productcolorid = '" + row12HashKey.productcolorid + "', row12.productsizeid = '" + row12HashKey.productsizeid + "', row12.productstyleid = '" + row12HashKey.productstyleid + "'");
								} // G 071
							

							row12Struct row12 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row12Struct fromLookup_row12 = null;
							row12 = row12Default;
										 
							
								 
							
							
								if (tHash_Lookup_row12 !=null && tHash_Lookup_row12.hasNext()) { // G 099
								
							
								
								fromLookup_row12 = tHash_Lookup_row12.next();

							
							
								} // G 099
							
							

							if(fromLookup_row12 != null) {
								row12 = fromLookup_row12;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_8__Struct Var = Var__tMap_8;// ###############################
        // ###############################
        // # Output tables

row41 = null;

if(!rejectedInnerJoin_tMap_8 ) {

// # Output table : 'row41'
row41_tmp.TRADEAGREEMENTJOURNALNUMBER = row11.TRADEAGREEMENTJOURNALNUMBER ;
row41_tmp.ITEMNUMBER = row11.ITEMNUMBER ;
row41_tmp.PRICE = row11.PRICE ;
row41_tmp.PRICECURRENCYCODE = row11.PRICECURRENCYCODE ;
row41_tmp.PRICECUSTOMERGROUPCODE = row11.PRICECUSTOMERGROUPCODE ;
row41_tmp.PRODUCTCOLORID = row11.PRODUCTCOLORID ;
row41_tmp.PRODUCTSIZEID = row11.PRODUCTSIZEID ;
row41_tmp.PRODUCTSTYLEID = row11.PRODUCTSTYLEID ;
row41_tmp.QUANTITYUNITSYMBOL = row11.QUANTITYUNITSYMBOL ;
row41_tmp.SEASON = row11.SEASON ;
row41_tmp.COUNTRY = row11.COUNTRY ;
row41 = row41_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_8 = false;










 


	tos_count_tMap_8++;

/**
 * [tMap_8 main ] stop
 */
	
	/**
	 * [tMap_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_begin ] stop
 */
// Start of branch "row41"
if(row41 != null) { 



	
	/**
	 * [tMap_22 main ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_22 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_22 = false;
		  boolean mainRowRejected_tMap_22 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row9" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow9 = false;
       		  	    	
       		  	    	
 							row9Struct row9ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_22) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_22 = false;
								
                        		    		row9HashKey.SEASONCODE = row41.SEASON ;
                        		    		

								
		                        	row9HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row9.lookup( row9HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row9 != null && tHash_Lookup_row9.getCount(row9HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row9' and it contains more one result from keys :  row9.SEASONCODE = '" + row9HashKey.SEASONCODE + "'");
								} // G 071
							

							row9Struct row9 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row9Struct fromLookup_row9 = null;
							row9 = row9Default;
										 
							
								 
							
							
								if (tHash_Lookup_row9 !=null && tHash_Lookup_row9.hasNext()) { // G 099
								
							
								
								fromLookup_row9 = tHash_Lookup_row9.next();

							
							
								} // G 099
							
							

							if(fromLookup_row9 != null) {
								row9 = fromLookup_row9;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_22__Struct Var = Var__tMap_22;// ###############################
        // ###############################
        // # Output tables

sortie_map = null;


// # Output table : 'sortie_map'
sortie_map_tmp.ITEMNUMBER = row41.ITEMNUMBER ;
sortie_map_tmp.PRICE = row41.PRICE ;
sortie_map_tmp.PRICECURRENCYCODE = row41.PRICECURRENCYCODE ;
sortie_map_tmp.PRICECUSTOMERGROUPCODE = row41.PRICECUSTOMERGROUPCODE ;
sortie_map_tmp.PRODUCTCOLORID = row41.PRODUCTCOLORID ;
sortie_map_tmp.PRODUCTSIZEID = row41.PRODUCTSIZEID ;
sortie_map_tmp.PRODUCTSTYLEID = row41.PRODUCTSTYLEID ;
sortie_map_tmp.SEASON = row41.SEASON ;
sortie_map_tmp.COUNTRY = row41.COUNTRY ;
sortie_map_tmp.FromDate = row9.FromDate ;
sortie_map_tmp.ToDate = row9.ToDate ;
sortie_map = sortie_map_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_22 = false;










 


	tos_count_tMap_22++;

/**
 * [tMap_22 main ] stop
 */
	
	/**
	 * [tMap_22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

 



/**
 * [tMap_22 process_data_begin ] stop
 */
// Start of branch "sortie_map"
if(sortie_map != null) { 



	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row4" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow4 = false;
       		  	    	
       		  	    	
 							row4Struct row4ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		row4HashKey.SPLPRICETYPE = sortie_map.PRICECUSTOMERGROUPCODE ;
                        		    		
                        		    		row4HashKey.SPLSEASONCODE = sortie_map.SEASON ;
                        		    		
                        		    		row4HashKey.SPLCOUNTRYREGIONID = sortie_map.COUNTRY ;
                        		    		

								
		                        	row4HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row4.lookup( row4HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row4 != null && tHash_Lookup_row4.getCount(row4HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row4' and it contains more one result from keys :  row4.SPLPRICETYPE = '" + row4HashKey.SPLPRICETYPE + "', row4.SPLSEASONCODE = '" + row4HashKey.SPLSEASONCODE + "', row4.SPLCOUNTRYREGIONID = '" + row4HashKey.SPLCOUNTRYREGIONID + "'");
								} // G 071
							

							row4Struct row4 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row4Struct fromLookup_row4 = null;
							row4 = row4Default;
										 
							
								 
							
							
								if (tHash_Lookup_row4 !=null && tHash_Lookup_row4.hasNext()) { // G 099
								
							
								
								fromLookup_row4 = tHash_Lookup_row4.next();

							
							
								} // G 099
							
							

							if(fromLookup_row4 != null) {
								row4 = fromLookup_row4;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

sortie_add_linenumber = null;


// # Output table : 'sortie_add_linenumber'
sortie_add_linenumber_tmp.ITEMNUMBER = sortie_map.ITEMNUMBER ;
sortie_add_linenumber_tmp.PRICE = BigDecimal.valueOf(sortie_map.PRICE ).setScale(2,BigDecimal.ROUND_HALF_UP) ;
sortie_add_linenumber_tmp.PRICECURRENCYCODE = sortie_map.PRICECURRENCYCODE ;
sortie_add_linenumber_tmp.PRICECUSTOMERGROUPCODE = sortie_map.PRICECUSTOMERGROUPCODE ;
sortie_add_linenumber_tmp.PRODUCTCOLORID = sortie_map.PRODUCTCOLORID ;
sortie_add_linenumber_tmp.PRODUCTSIZEID = sortie_map.PRODUCTSIZEID ;
sortie_add_linenumber_tmp.PRODUCTSTYLEID = sortie_map.PRODUCTSTYLEID ;
sortie_add_linenumber_tmp.SEASON = sortie_map.SEASON ;
sortie_add_linenumber_tmp.COUNTRY = sortie_map.COUNTRY ;
sortie_add_linenumber_tmp.GROUPCODE = row4.GROUPCODE ;
sortie_add_linenumber_tmp.FromDate = sortie_map.FromDate ;
sortie_add_linenumber_tmp.ToDate = sortie_map.ToDate ;
sortie_add_linenumber = sortie_add_linenumber_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "sortie_add_linenumber"
if(sortie_add_linenumber != null) { 



	
	/**
	 * [tUniqRow_2 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	
row10 = null;			
if(sortie_add_linenumber.ITEMNUMBER == null){
	finder_tUniqRow_2.ITEMNUMBER = null;
}else{
	finder_tUniqRow_2.ITEMNUMBER = sortie_add_linenumber.ITEMNUMBER.toLowerCase();
}
if(sortie_add_linenumber.PRICECURRENCYCODE == null){
	finder_tUniqRow_2.PRICECURRENCYCODE = null;
}else{
	finder_tUniqRow_2.PRICECURRENCYCODE = sortie_add_linenumber.PRICECURRENCYCODE.toLowerCase();
}
if(sortie_add_linenumber.PRICECUSTOMERGROUPCODE == null){
	finder_tUniqRow_2.PRICECUSTOMERGROUPCODE = null;
}else{
	finder_tUniqRow_2.PRICECUSTOMERGROUPCODE = sortie_add_linenumber.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTCOLORID == null){
	finder_tUniqRow_2.PRODUCTCOLORID = null;
}else{
	finder_tUniqRow_2.PRODUCTCOLORID = sortie_add_linenumber.PRODUCTCOLORID.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTSIZEID == null){
	finder_tUniqRow_2.PRODUCTSIZEID = null;
}else{
	finder_tUniqRow_2.PRODUCTSIZEID = sortie_add_linenumber.PRODUCTSIZEID.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTSTYLEID == null){
	finder_tUniqRow_2.PRODUCTSTYLEID = null;
}else{
	finder_tUniqRow_2.PRODUCTSTYLEID = sortie_add_linenumber.PRODUCTSTYLEID.toLowerCase();
}
if(sortie_add_linenumber.SEASON == null){
	finder_tUniqRow_2.SEASON = null;
}else{
	finder_tUniqRow_2.SEASON = sortie_add_linenumber.SEASON.toLowerCase();
}
if(sortie_add_linenumber.GROUPCODE == null){
	finder_tUniqRow_2.GROUPCODE = null;
}else{
	finder_tUniqRow_2.GROUPCODE = sortie_add_linenumber.GROUPCODE.toLowerCase();
}	
finder_tUniqRow_2.hashCodeDirty = true;
if (!keystUniqRow_2.contains(finder_tUniqRow_2)) {
		KeyStruct_tUniqRow_2 new_tUniqRow_2 = new KeyStruct_tUniqRow_2();

		
if(sortie_add_linenumber.ITEMNUMBER == null){
	new_tUniqRow_2.ITEMNUMBER = null;
}else{
	new_tUniqRow_2.ITEMNUMBER = sortie_add_linenumber.ITEMNUMBER.toLowerCase();
}
if(sortie_add_linenumber.PRICECURRENCYCODE == null){
	new_tUniqRow_2.PRICECURRENCYCODE = null;
}else{
	new_tUniqRow_2.PRICECURRENCYCODE = sortie_add_linenumber.PRICECURRENCYCODE.toLowerCase();
}
if(sortie_add_linenumber.PRICECUSTOMERGROUPCODE == null){
	new_tUniqRow_2.PRICECUSTOMERGROUPCODE = null;
}else{
	new_tUniqRow_2.PRICECUSTOMERGROUPCODE = sortie_add_linenumber.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTCOLORID == null){
	new_tUniqRow_2.PRODUCTCOLORID = null;
}else{
	new_tUniqRow_2.PRODUCTCOLORID = sortie_add_linenumber.PRODUCTCOLORID.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTSIZEID == null){
	new_tUniqRow_2.PRODUCTSIZEID = null;
}else{
	new_tUniqRow_2.PRODUCTSIZEID = sortie_add_linenumber.PRODUCTSIZEID.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTSTYLEID == null){
	new_tUniqRow_2.PRODUCTSTYLEID = null;
}else{
	new_tUniqRow_2.PRODUCTSTYLEID = sortie_add_linenumber.PRODUCTSTYLEID.toLowerCase();
}
if(sortie_add_linenumber.SEASON == null){
	new_tUniqRow_2.SEASON = null;
}else{
	new_tUniqRow_2.SEASON = sortie_add_linenumber.SEASON.toLowerCase();
}
if(sortie_add_linenumber.GROUPCODE == null){
	new_tUniqRow_2.GROUPCODE = null;
}else{
	new_tUniqRow_2.GROUPCODE = sortie_add_linenumber.GROUPCODE.toLowerCase();
}
		
		keystUniqRow_2.add(new_tUniqRow_2);if(row10 == null){ 
	
	row10 = new row10Struct();
}row10.ITEMNUMBER = sortie_add_linenumber.ITEMNUMBER;			row10.PRICE = sortie_add_linenumber.PRICE;			row10.PRICECURRENCYCODE = sortie_add_linenumber.PRICECURRENCYCODE;			row10.PRICECUSTOMERGROUPCODE = sortie_add_linenumber.PRICECUSTOMERGROUPCODE;			row10.PRODUCTCOLORID = sortie_add_linenumber.PRODUCTCOLORID;			row10.PRODUCTSIZEID = sortie_add_linenumber.PRODUCTSIZEID;			row10.PRODUCTSTYLEID = sortie_add_linenumber.PRODUCTSTYLEID;			row10.SEASON = sortie_add_linenumber.SEASON;			row10.COUNTRY = sortie_add_linenumber.COUNTRY;			row10.GROUPCODE = sortie_add_linenumber.GROUPCODE;			row10.FromDate = sortie_add_linenumber.FromDate;			row10.ToDate = sortie_add_linenumber.ToDate;					
		nb_uniques_tUniqRow_2++;
	} else {
	  nb_duplicates_tUniqRow_2++;
	}

 


	tos_count_tUniqRow_2++;

/**
 * [tUniqRow_2 main ] stop
 */
	
	/**
	 * [tUniqRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

 



/**
 * [tUniqRow_2 process_data_begin ] stop
 */
// Start of branch "row10"
if(row10 != null) { 



	
	/**
	 * [tFileOutputDelimited_4 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	


                    StringBuilder sb_tFileOutputDelimited_4 = new StringBuilder();
                            if(row10.ITEMNUMBER != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.ITEMNUMBER
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRICE != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRICE.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRICECURRENCYCODE != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRICECURRENCYCODE
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRICECUSTOMERGROUPCODE != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRICECUSTOMERGROUPCODE
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRODUCTCOLORID != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRODUCTCOLORID
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRODUCTSIZEID != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRODUCTSIZEID
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRODUCTSTYLEID != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRODUCTSTYLEID
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.SEASON != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.SEASON
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.COUNTRY != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.COUNTRY
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.GROUPCODE != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.GROUPCODE
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.FromDate != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.FromDate
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.ToDate != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.ToDate
                        );
                            }
                    sb_tFileOutputDelimited_4.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_4);


                    nb_line_tFileOutputDelimited_4++;
                    resourceMap.put("nb_line_tFileOutputDelimited_4", nb_line_tFileOutputDelimited_4);

                        outtFileOutputDelimited_4.write(sb_tFileOutputDelimited_4.toString());




 


	tos_count_tFileOutputDelimited_4++;

/**
 * [tFileOutputDelimited_4 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	

 



/**
 * [tFileOutputDelimited_4 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	

 



/**
 * [tFileOutputDelimited_4 process_data_end ] stop
 */

} // End of branch "row10"




	
	/**
	 * [tUniqRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

 



/**
 * [tUniqRow_2 process_data_end ] stop
 */

} // End of branch "sortie_add_linenumber"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */

} // End of branch "sortie_map"




	
	/**
	 * [tMap_22 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

 



/**
 * [tMap_22 process_data_end ] stop
 */

} // End of branch "row41"




	
	/**
	 * [tMap_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_end ] stop
 */



	
	/**
	 * [tUnite_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	

 



/**
 * [tUnite_2 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_11";

	

 



/**
 * [tHashInput_11 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_11 end ] start
	 */

	

	
	
	currentComponent="tHashInput_11";

	
    

		
			nb_line_tHashInput_11++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_MASTERFILE_EXTRACT_PRICES_1_" + pid +"_tHashOutput_11");
	


	globalMap.put("tHashInput_11_NB_LINE", nb_line_tHashInput_11);       

 

ok_Hash.put("tHashInput_11", true);
end_Hash.put("tHashInput_11", System.currentTimeMillis());




/**
 * [tHashInput_11 end ] stop
 */
	
	/**
	 * [tHashInput_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_12", false);
		start_Hash.put("tHashInput_12", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_12";

	
		int tos_count_tHashInput_12 = 0;
		


int nb_line_tHashInput_12 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_12=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row46Struct> tHashFile_tHashInput_12 = mf_tHashInput_12.getAdvancedMemoryHashFile("tHashFile_MASTERFILE_EXTRACT_PRICES_1_" + pid +"_tHashOutput_12");
if(tHashFile_tHashInput_12==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row46Struct> iterator_tHashInput_12 = tHashFile_tHashInput_12.iterator();
while (iterator_tHashInput_12.hasNext()) {
    row46Struct next_tHashInput_12 = iterator_tHashInput_12.next();

	row52.TRADEAGREEMENTJOURNALNUMBER = next_tHashInput_12.TRADEAGREEMENTJOURNALNUMBER;
	row52.ITEMNUMBER = next_tHashInput_12.ITEMNUMBER;
	row52.PRICE = next_tHashInput_12.PRICE;
	row52.PRICECURRENCYCODE = next_tHashInput_12.PRICECURRENCYCODE;
	row52.PRICECUSTOMERGROUPCODE = next_tHashInput_12.PRICECUSTOMERGROUPCODE;
	row52.PRODUCTCOLORID = next_tHashInput_12.PRODUCTCOLORID;
	row52.PRODUCTSIZEID = next_tHashInput_12.PRODUCTSIZEID;
	row52.PRODUCTSTYLEID = next_tHashInput_12.PRODUCTSTYLEID;
	row52.QUANTITYUNITSYMBOL = next_tHashInput_12.QUANTITYUNITSYMBOL;
	row52.SEASON = next_tHashInput_12.SEASON;
	row52.COUNTRY = next_tHashInput_12.COUNTRY;
 



/**
 * [tHashInput_12 begin ] stop
 */
	
	/**
	 * [tHashInput_12 main ] start
	 */

	

	
	
	currentComponent="tHashInput_12";

	

 


	tos_count_tHashInput_12++;

/**
 * [tHashInput_12 main ] stop
 */
	
	/**
	 * [tHashInput_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_12";

	

 



/**
 * [tHashInput_12 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_2 main ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	
//////////
 

// for output
			row11 = new row11Struct();
								
			row11.TRADEAGREEMENTJOURNALNUMBER = row52.TRADEAGREEMENTJOURNALNUMBER;								
			row11.ITEMNUMBER = row52.ITEMNUMBER;								
			row11.PRICE = row52.PRICE;								
			row11.PRICECURRENCYCODE = row52.PRICECURRENCYCODE;								
			row11.PRICECUSTOMERGROUPCODE = row52.PRICECUSTOMERGROUPCODE;								
			row11.PRODUCTCOLORID = row52.PRODUCTCOLORID;								
			row11.PRODUCTSIZEID = row52.PRODUCTSIZEID;								
			row11.PRODUCTSTYLEID = row52.PRODUCTSTYLEID;								
			row11.QUANTITYUNITSYMBOL = row52.QUANTITYUNITSYMBOL;								
			row11.SEASON = row52.SEASON;								
			row11.COUNTRY = row52.COUNTRY;			

			nb_line_tUnite_2++;

//////////
 


	tos_count_tUnite_2++;

/**
 * [tUnite_2 main ] stop
 */
	
	/**
	 * [tUnite_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	

 



/**
 * [tUnite_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_8 main ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_8 = false;
		  boolean mainRowRejected_tMap_8 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row12" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow12 = false;
       		  	    	
       		  	    	
 							row12Struct row12ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_8) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_8 = false;
								
                        		    		row12HashKey.itemnumber = row11.ITEMNUMBER ;
                        		    		
                        		    		row12HashKey.productcolorid = row11.PRODUCTCOLORID ;
                        		    		
                        		    		row12HashKey.productsizeid = row11.PRODUCTSIZEID ;
                        		    		
                        		    		row12HashKey.productstyleid = row11.PRODUCTSTYLEID ;
                        		    		

								
		                        	row12HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row12.lookup( row12HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row12.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_8 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row12 != null && tHash_Lookup_row12.getCount(row12HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row12' and it contains more one result from keys :  row12.itemnumber = '" + row12HashKey.itemnumber + "', row12.productcolorid = '" + row12HashKey.productcolorid + "', row12.productsizeid = '" + row12HashKey.productsizeid + "', row12.productstyleid = '" + row12HashKey.productstyleid + "'");
								} // G 071
							

							row12Struct row12 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row12Struct fromLookup_row12 = null;
							row12 = row12Default;
										 
							
								 
							
							
								if (tHash_Lookup_row12 !=null && tHash_Lookup_row12.hasNext()) { // G 099
								
							
								
								fromLookup_row12 = tHash_Lookup_row12.next();

							
							
								} // G 099
							
							

							if(fromLookup_row12 != null) {
								row12 = fromLookup_row12;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_8__Struct Var = Var__tMap_8;// ###############################
        // ###############################
        // # Output tables

row41 = null;

if(!rejectedInnerJoin_tMap_8 ) {

// # Output table : 'row41'
row41_tmp.TRADEAGREEMENTJOURNALNUMBER = row11.TRADEAGREEMENTJOURNALNUMBER ;
row41_tmp.ITEMNUMBER = row11.ITEMNUMBER ;
row41_tmp.PRICE = row11.PRICE ;
row41_tmp.PRICECURRENCYCODE = row11.PRICECURRENCYCODE ;
row41_tmp.PRICECUSTOMERGROUPCODE = row11.PRICECUSTOMERGROUPCODE ;
row41_tmp.PRODUCTCOLORID = row11.PRODUCTCOLORID ;
row41_tmp.PRODUCTSIZEID = row11.PRODUCTSIZEID ;
row41_tmp.PRODUCTSTYLEID = row11.PRODUCTSTYLEID ;
row41_tmp.QUANTITYUNITSYMBOL = row11.QUANTITYUNITSYMBOL ;
row41_tmp.SEASON = row11.SEASON ;
row41_tmp.COUNTRY = row11.COUNTRY ;
row41 = row41_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_8 = false;










 


	tos_count_tMap_8++;

/**
 * [tMap_8 main ] stop
 */
	
	/**
	 * [tMap_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_begin ] stop
 */
// Start of branch "row41"
if(row41 != null) { 



	
	/**
	 * [tMap_22 main ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_22 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_22 = false;
		  boolean mainRowRejected_tMap_22 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row9" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow9 = false;
       		  	    	
       		  	    	
 							row9Struct row9ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_22) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_22 = false;
								
                        		    		row9HashKey.SEASONCODE = row41.SEASON ;
                        		    		

								
		                        	row9HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row9.lookup( row9HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row9 != null && tHash_Lookup_row9.getCount(row9HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row9' and it contains more one result from keys :  row9.SEASONCODE = '" + row9HashKey.SEASONCODE + "'");
								} // G 071
							

							row9Struct row9 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row9Struct fromLookup_row9 = null;
							row9 = row9Default;
										 
							
								 
							
							
								if (tHash_Lookup_row9 !=null && tHash_Lookup_row9.hasNext()) { // G 099
								
							
								
								fromLookup_row9 = tHash_Lookup_row9.next();

							
							
								} // G 099
							
							

							if(fromLookup_row9 != null) {
								row9 = fromLookup_row9;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_22__Struct Var = Var__tMap_22;// ###############################
        // ###############################
        // # Output tables

sortie_map = null;


// # Output table : 'sortie_map'
sortie_map_tmp.ITEMNUMBER = row41.ITEMNUMBER ;
sortie_map_tmp.PRICE = row41.PRICE ;
sortie_map_tmp.PRICECURRENCYCODE = row41.PRICECURRENCYCODE ;
sortie_map_tmp.PRICECUSTOMERGROUPCODE = row41.PRICECUSTOMERGROUPCODE ;
sortie_map_tmp.PRODUCTCOLORID = row41.PRODUCTCOLORID ;
sortie_map_tmp.PRODUCTSIZEID = row41.PRODUCTSIZEID ;
sortie_map_tmp.PRODUCTSTYLEID = row41.PRODUCTSTYLEID ;
sortie_map_tmp.SEASON = row41.SEASON ;
sortie_map_tmp.COUNTRY = row41.COUNTRY ;
sortie_map_tmp.FromDate = row9.FromDate ;
sortie_map_tmp.ToDate = row9.ToDate ;
sortie_map = sortie_map_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_22 = false;










 


	tos_count_tMap_22++;

/**
 * [tMap_22 main ] stop
 */
	
	/**
	 * [tMap_22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

 



/**
 * [tMap_22 process_data_begin ] stop
 */
// Start of branch "sortie_map"
if(sortie_map != null) { 



	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row4" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow4 = false;
       		  	    	
       		  	    	
 							row4Struct row4ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		row4HashKey.SPLPRICETYPE = sortie_map.PRICECUSTOMERGROUPCODE ;
                        		    		
                        		    		row4HashKey.SPLSEASONCODE = sortie_map.SEASON ;
                        		    		
                        		    		row4HashKey.SPLCOUNTRYREGIONID = sortie_map.COUNTRY ;
                        		    		

								
		                        	row4HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row4.lookup( row4HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row4 != null && tHash_Lookup_row4.getCount(row4HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row4' and it contains more one result from keys :  row4.SPLPRICETYPE = '" + row4HashKey.SPLPRICETYPE + "', row4.SPLSEASONCODE = '" + row4HashKey.SPLSEASONCODE + "', row4.SPLCOUNTRYREGIONID = '" + row4HashKey.SPLCOUNTRYREGIONID + "'");
								} // G 071
							

							row4Struct row4 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row4Struct fromLookup_row4 = null;
							row4 = row4Default;
										 
							
								 
							
							
								if (tHash_Lookup_row4 !=null && tHash_Lookup_row4.hasNext()) { // G 099
								
							
								
								fromLookup_row4 = tHash_Lookup_row4.next();

							
							
								} // G 099
							
							

							if(fromLookup_row4 != null) {
								row4 = fromLookup_row4;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

sortie_add_linenumber = null;


// # Output table : 'sortie_add_linenumber'
sortie_add_linenumber_tmp.ITEMNUMBER = sortie_map.ITEMNUMBER ;
sortie_add_linenumber_tmp.PRICE = BigDecimal.valueOf(sortie_map.PRICE ).setScale(2,BigDecimal.ROUND_HALF_UP) ;
sortie_add_linenumber_tmp.PRICECURRENCYCODE = sortie_map.PRICECURRENCYCODE ;
sortie_add_linenumber_tmp.PRICECUSTOMERGROUPCODE = sortie_map.PRICECUSTOMERGROUPCODE ;
sortie_add_linenumber_tmp.PRODUCTCOLORID = sortie_map.PRODUCTCOLORID ;
sortie_add_linenumber_tmp.PRODUCTSIZEID = sortie_map.PRODUCTSIZEID ;
sortie_add_linenumber_tmp.PRODUCTSTYLEID = sortie_map.PRODUCTSTYLEID ;
sortie_add_linenumber_tmp.SEASON = sortie_map.SEASON ;
sortie_add_linenumber_tmp.COUNTRY = sortie_map.COUNTRY ;
sortie_add_linenumber_tmp.GROUPCODE = row4.GROUPCODE ;
sortie_add_linenumber_tmp.FromDate = sortie_map.FromDate ;
sortie_add_linenumber_tmp.ToDate = sortie_map.ToDate ;
sortie_add_linenumber = sortie_add_linenumber_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "sortie_add_linenumber"
if(sortie_add_linenumber != null) { 



	
	/**
	 * [tUniqRow_2 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	
row10 = null;			
if(sortie_add_linenumber.ITEMNUMBER == null){
	finder_tUniqRow_2.ITEMNUMBER = null;
}else{
	finder_tUniqRow_2.ITEMNUMBER = sortie_add_linenumber.ITEMNUMBER.toLowerCase();
}
if(sortie_add_linenumber.PRICECURRENCYCODE == null){
	finder_tUniqRow_2.PRICECURRENCYCODE = null;
}else{
	finder_tUniqRow_2.PRICECURRENCYCODE = sortie_add_linenumber.PRICECURRENCYCODE.toLowerCase();
}
if(sortie_add_linenumber.PRICECUSTOMERGROUPCODE == null){
	finder_tUniqRow_2.PRICECUSTOMERGROUPCODE = null;
}else{
	finder_tUniqRow_2.PRICECUSTOMERGROUPCODE = sortie_add_linenumber.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTCOLORID == null){
	finder_tUniqRow_2.PRODUCTCOLORID = null;
}else{
	finder_tUniqRow_2.PRODUCTCOLORID = sortie_add_linenumber.PRODUCTCOLORID.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTSIZEID == null){
	finder_tUniqRow_2.PRODUCTSIZEID = null;
}else{
	finder_tUniqRow_2.PRODUCTSIZEID = sortie_add_linenumber.PRODUCTSIZEID.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTSTYLEID == null){
	finder_tUniqRow_2.PRODUCTSTYLEID = null;
}else{
	finder_tUniqRow_2.PRODUCTSTYLEID = sortie_add_linenumber.PRODUCTSTYLEID.toLowerCase();
}
if(sortie_add_linenumber.SEASON == null){
	finder_tUniqRow_2.SEASON = null;
}else{
	finder_tUniqRow_2.SEASON = sortie_add_linenumber.SEASON.toLowerCase();
}
if(sortie_add_linenumber.GROUPCODE == null){
	finder_tUniqRow_2.GROUPCODE = null;
}else{
	finder_tUniqRow_2.GROUPCODE = sortie_add_linenumber.GROUPCODE.toLowerCase();
}	
finder_tUniqRow_2.hashCodeDirty = true;
if (!keystUniqRow_2.contains(finder_tUniqRow_2)) {
		KeyStruct_tUniqRow_2 new_tUniqRow_2 = new KeyStruct_tUniqRow_2();

		
if(sortie_add_linenumber.ITEMNUMBER == null){
	new_tUniqRow_2.ITEMNUMBER = null;
}else{
	new_tUniqRow_2.ITEMNUMBER = sortie_add_linenumber.ITEMNUMBER.toLowerCase();
}
if(sortie_add_linenumber.PRICECURRENCYCODE == null){
	new_tUniqRow_2.PRICECURRENCYCODE = null;
}else{
	new_tUniqRow_2.PRICECURRENCYCODE = sortie_add_linenumber.PRICECURRENCYCODE.toLowerCase();
}
if(sortie_add_linenumber.PRICECUSTOMERGROUPCODE == null){
	new_tUniqRow_2.PRICECUSTOMERGROUPCODE = null;
}else{
	new_tUniqRow_2.PRICECUSTOMERGROUPCODE = sortie_add_linenumber.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTCOLORID == null){
	new_tUniqRow_2.PRODUCTCOLORID = null;
}else{
	new_tUniqRow_2.PRODUCTCOLORID = sortie_add_linenumber.PRODUCTCOLORID.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTSIZEID == null){
	new_tUniqRow_2.PRODUCTSIZEID = null;
}else{
	new_tUniqRow_2.PRODUCTSIZEID = sortie_add_linenumber.PRODUCTSIZEID.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTSTYLEID == null){
	new_tUniqRow_2.PRODUCTSTYLEID = null;
}else{
	new_tUniqRow_2.PRODUCTSTYLEID = sortie_add_linenumber.PRODUCTSTYLEID.toLowerCase();
}
if(sortie_add_linenumber.SEASON == null){
	new_tUniqRow_2.SEASON = null;
}else{
	new_tUniqRow_2.SEASON = sortie_add_linenumber.SEASON.toLowerCase();
}
if(sortie_add_linenumber.GROUPCODE == null){
	new_tUniqRow_2.GROUPCODE = null;
}else{
	new_tUniqRow_2.GROUPCODE = sortie_add_linenumber.GROUPCODE.toLowerCase();
}
		
		keystUniqRow_2.add(new_tUniqRow_2);if(row10 == null){ 
	
	row10 = new row10Struct();
}row10.ITEMNUMBER = sortie_add_linenumber.ITEMNUMBER;			row10.PRICE = sortie_add_linenumber.PRICE;			row10.PRICECURRENCYCODE = sortie_add_linenumber.PRICECURRENCYCODE;			row10.PRICECUSTOMERGROUPCODE = sortie_add_linenumber.PRICECUSTOMERGROUPCODE;			row10.PRODUCTCOLORID = sortie_add_linenumber.PRODUCTCOLORID;			row10.PRODUCTSIZEID = sortie_add_linenumber.PRODUCTSIZEID;			row10.PRODUCTSTYLEID = sortie_add_linenumber.PRODUCTSTYLEID;			row10.SEASON = sortie_add_linenumber.SEASON;			row10.COUNTRY = sortie_add_linenumber.COUNTRY;			row10.GROUPCODE = sortie_add_linenumber.GROUPCODE;			row10.FromDate = sortie_add_linenumber.FromDate;			row10.ToDate = sortie_add_linenumber.ToDate;					
		nb_uniques_tUniqRow_2++;
	} else {
	  nb_duplicates_tUniqRow_2++;
	}

 


	tos_count_tUniqRow_2++;

/**
 * [tUniqRow_2 main ] stop
 */
	
	/**
	 * [tUniqRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

 



/**
 * [tUniqRow_2 process_data_begin ] stop
 */
// Start of branch "row10"
if(row10 != null) { 



	
	/**
	 * [tFileOutputDelimited_4 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	


                    StringBuilder sb_tFileOutputDelimited_4 = new StringBuilder();
                            if(row10.ITEMNUMBER != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.ITEMNUMBER
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRICE != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRICE.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRICECURRENCYCODE != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRICECURRENCYCODE
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRICECUSTOMERGROUPCODE != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRICECUSTOMERGROUPCODE
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRODUCTCOLORID != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRODUCTCOLORID
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRODUCTSIZEID != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRODUCTSIZEID
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRODUCTSTYLEID != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRODUCTSTYLEID
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.SEASON != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.SEASON
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.COUNTRY != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.COUNTRY
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.GROUPCODE != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.GROUPCODE
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.FromDate != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.FromDate
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.ToDate != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.ToDate
                        );
                            }
                    sb_tFileOutputDelimited_4.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_4);


                    nb_line_tFileOutputDelimited_4++;
                    resourceMap.put("nb_line_tFileOutputDelimited_4", nb_line_tFileOutputDelimited_4);

                        outtFileOutputDelimited_4.write(sb_tFileOutputDelimited_4.toString());




 


	tos_count_tFileOutputDelimited_4++;

/**
 * [tFileOutputDelimited_4 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	

 



/**
 * [tFileOutputDelimited_4 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	

 



/**
 * [tFileOutputDelimited_4 process_data_end ] stop
 */

} // End of branch "row10"




	
	/**
	 * [tUniqRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

 



/**
 * [tUniqRow_2 process_data_end ] stop
 */

} // End of branch "sortie_add_linenumber"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */

} // End of branch "sortie_map"




	
	/**
	 * [tMap_22 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

 



/**
 * [tMap_22 process_data_end ] stop
 */

} // End of branch "row41"




	
	/**
	 * [tMap_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_end ] stop
 */



	
	/**
	 * [tUnite_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	

 



/**
 * [tUnite_2 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_12";

	

 



/**
 * [tHashInput_12 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_12 end ] start
	 */

	

	
	
	currentComponent="tHashInput_12";

	
    

		
			nb_line_tHashInput_12++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_MASTERFILE_EXTRACT_PRICES_1_" + pid +"_tHashOutput_12");
	


	globalMap.put("tHashInput_12_NB_LINE", nb_line_tHashInput_12);       

 

ok_Hash.put("tHashInput_12", true);
end_Hash.put("tHashInput_12", System.currentTimeMillis());




/**
 * [tHashInput_12 end ] stop
 */
	
	/**
	 * [tHashInput_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_13", false);
		start_Hash.put("tHashInput_13", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_13";

	
		int tos_count_tHashInput_13 = 0;
		


int nb_line_tHashInput_13 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_13=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row48Struct> tHashFile_tHashInput_13 = mf_tHashInput_13.getAdvancedMemoryHashFile("tHashFile_MASTERFILE_EXTRACT_PRICES_1_" + pid +"_tHashOutput_13");
if(tHashFile_tHashInput_13==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row48Struct> iterator_tHashInput_13 = tHashFile_tHashInput_13.iterator();
while (iterator_tHashInput_13.hasNext()) {
    row48Struct next_tHashInput_13 = iterator_tHashInput_13.next();

	row53.TRADEAGREEMENTJOURNALNUMBER = next_tHashInput_13.TRADEAGREEMENTJOURNALNUMBER;
	row53.ITEMNUMBER = next_tHashInput_13.ITEMNUMBER;
	row53.PRICE = next_tHashInput_13.PRICE;
	row53.PRICECURRENCYCODE = next_tHashInput_13.PRICECURRENCYCODE;
	row53.PRICECUSTOMERGROUPCODE = next_tHashInput_13.PRICECUSTOMERGROUPCODE;
	row53.PRODUCTCOLORID = next_tHashInput_13.PRODUCTCOLORID;
	row53.PRODUCTSIZEID = next_tHashInput_13.PRODUCTSIZEID;
	row53.PRODUCTSTYLEID = next_tHashInput_13.PRODUCTSTYLEID;
	row53.QUANTITYUNITSYMBOL = next_tHashInput_13.QUANTITYUNITSYMBOL;
	row53.SEASON = next_tHashInput_13.SEASON;
	row53.COUNTRY = next_tHashInput_13.COUNTRY;
 



/**
 * [tHashInput_13 begin ] stop
 */
	
	/**
	 * [tHashInput_13 main ] start
	 */

	

	
	
	currentComponent="tHashInput_13";

	

 


	tos_count_tHashInput_13++;

/**
 * [tHashInput_13 main ] stop
 */
	
	/**
	 * [tHashInput_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_13";

	

 



/**
 * [tHashInput_13 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_2 main ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	
//////////
 

// for output
			row11 = new row11Struct();
								
			row11.TRADEAGREEMENTJOURNALNUMBER = row53.TRADEAGREEMENTJOURNALNUMBER;								
			row11.ITEMNUMBER = row53.ITEMNUMBER;								
			row11.PRICE = row53.PRICE;								
			row11.PRICECURRENCYCODE = row53.PRICECURRENCYCODE;								
			row11.PRICECUSTOMERGROUPCODE = row53.PRICECUSTOMERGROUPCODE;								
			row11.PRODUCTCOLORID = row53.PRODUCTCOLORID;								
			row11.PRODUCTSIZEID = row53.PRODUCTSIZEID;								
			row11.PRODUCTSTYLEID = row53.PRODUCTSTYLEID;								
			row11.QUANTITYUNITSYMBOL = row53.QUANTITYUNITSYMBOL;								
			row11.SEASON = row53.SEASON;								
			row11.COUNTRY = row53.COUNTRY;			

			nb_line_tUnite_2++;

//////////
 


	tos_count_tUnite_2++;

/**
 * [tUnite_2 main ] stop
 */
	
	/**
	 * [tUnite_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	

 



/**
 * [tUnite_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_8 main ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_8 = false;
		  boolean mainRowRejected_tMap_8 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row12" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow12 = false;
       		  	    	
       		  	    	
 							row12Struct row12ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_8) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_8 = false;
								
                        		    		row12HashKey.itemnumber = row11.ITEMNUMBER ;
                        		    		
                        		    		row12HashKey.productcolorid = row11.PRODUCTCOLORID ;
                        		    		
                        		    		row12HashKey.productsizeid = row11.PRODUCTSIZEID ;
                        		    		
                        		    		row12HashKey.productstyleid = row11.PRODUCTSTYLEID ;
                        		    		

								
		                        	row12HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row12.lookup( row12HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row12.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_8 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row12 != null && tHash_Lookup_row12.getCount(row12HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row12' and it contains more one result from keys :  row12.itemnumber = '" + row12HashKey.itemnumber + "', row12.productcolorid = '" + row12HashKey.productcolorid + "', row12.productsizeid = '" + row12HashKey.productsizeid + "', row12.productstyleid = '" + row12HashKey.productstyleid + "'");
								} // G 071
							

							row12Struct row12 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row12Struct fromLookup_row12 = null;
							row12 = row12Default;
										 
							
								 
							
							
								if (tHash_Lookup_row12 !=null && tHash_Lookup_row12.hasNext()) { // G 099
								
							
								
								fromLookup_row12 = tHash_Lookup_row12.next();

							
							
								} // G 099
							
							

							if(fromLookup_row12 != null) {
								row12 = fromLookup_row12;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_8__Struct Var = Var__tMap_8;// ###############################
        // ###############################
        // # Output tables

row41 = null;

if(!rejectedInnerJoin_tMap_8 ) {

// # Output table : 'row41'
row41_tmp.TRADEAGREEMENTJOURNALNUMBER = row11.TRADEAGREEMENTJOURNALNUMBER ;
row41_tmp.ITEMNUMBER = row11.ITEMNUMBER ;
row41_tmp.PRICE = row11.PRICE ;
row41_tmp.PRICECURRENCYCODE = row11.PRICECURRENCYCODE ;
row41_tmp.PRICECUSTOMERGROUPCODE = row11.PRICECUSTOMERGROUPCODE ;
row41_tmp.PRODUCTCOLORID = row11.PRODUCTCOLORID ;
row41_tmp.PRODUCTSIZEID = row11.PRODUCTSIZEID ;
row41_tmp.PRODUCTSTYLEID = row11.PRODUCTSTYLEID ;
row41_tmp.QUANTITYUNITSYMBOL = row11.QUANTITYUNITSYMBOL ;
row41_tmp.SEASON = row11.SEASON ;
row41_tmp.COUNTRY = row11.COUNTRY ;
row41 = row41_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_8 = false;










 


	tos_count_tMap_8++;

/**
 * [tMap_8 main ] stop
 */
	
	/**
	 * [tMap_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_begin ] stop
 */
// Start of branch "row41"
if(row41 != null) { 



	
	/**
	 * [tMap_22 main ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_22 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_22 = false;
		  boolean mainRowRejected_tMap_22 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row9" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow9 = false;
       		  	    	
       		  	    	
 							row9Struct row9ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_22) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_22 = false;
								
                        		    		row9HashKey.SEASONCODE = row41.SEASON ;
                        		    		

								
		                        	row9HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row9.lookup( row9HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row9 != null && tHash_Lookup_row9.getCount(row9HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row9' and it contains more one result from keys :  row9.SEASONCODE = '" + row9HashKey.SEASONCODE + "'");
								} // G 071
							

							row9Struct row9 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row9Struct fromLookup_row9 = null;
							row9 = row9Default;
										 
							
								 
							
							
								if (tHash_Lookup_row9 !=null && tHash_Lookup_row9.hasNext()) { // G 099
								
							
								
								fromLookup_row9 = tHash_Lookup_row9.next();

							
							
								} // G 099
							
							

							if(fromLookup_row9 != null) {
								row9 = fromLookup_row9;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_22__Struct Var = Var__tMap_22;// ###############################
        // ###############################
        // # Output tables

sortie_map = null;


// # Output table : 'sortie_map'
sortie_map_tmp.ITEMNUMBER = row41.ITEMNUMBER ;
sortie_map_tmp.PRICE = row41.PRICE ;
sortie_map_tmp.PRICECURRENCYCODE = row41.PRICECURRENCYCODE ;
sortie_map_tmp.PRICECUSTOMERGROUPCODE = row41.PRICECUSTOMERGROUPCODE ;
sortie_map_tmp.PRODUCTCOLORID = row41.PRODUCTCOLORID ;
sortie_map_tmp.PRODUCTSIZEID = row41.PRODUCTSIZEID ;
sortie_map_tmp.PRODUCTSTYLEID = row41.PRODUCTSTYLEID ;
sortie_map_tmp.SEASON = row41.SEASON ;
sortie_map_tmp.COUNTRY = row41.COUNTRY ;
sortie_map_tmp.FromDate = row9.FromDate ;
sortie_map_tmp.ToDate = row9.ToDate ;
sortie_map = sortie_map_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_22 = false;










 


	tos_count_tMap_22++;

/**
 * [tMap_22 main ] stop
 */
	
	/**
	 * [tMap_22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

 



/**
 * [tMap_22 process_data_begin ] stop
 */
// Start of branch "sortie_map"
if(sortie_map != null) { 



	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row4" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow4 = false;
       		  	    	
       		  	    	
 							row4Struct row4ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		row4HashKey.SPLPRICETYPE = sortie_map.PRICECUSTOMERGROUPCODE ;
                        		    		
                        		    		row4HashKey.SPLSEASONCODE = sortie_map.SEASON ;
                        		    		
                        		    		row4HashKey.SPLCOUNTRYREGIONID = sortie_map.COUNTRY ;
                        		    		

								
		                        	row4HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row4.lookup( row4HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row4 != null && tHash_Lookup_row4.getCount(row4HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row4' and it contains more one result from keys :  row4.SPLPRICETYPE = '" + row4HashKey.SPLPRICETYPE + "', row4.SPLSEASONCODE = '" + row4HashKey.SPLSEASONCODE + "', row4.SPLCOUNTRYREGIONID = '" + row4HashKey.SPLCOUNTRYREGIONID + "'");
								} // G 071
							

							row4Struct row4 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row4Struct fromLookup_row4 = null;
							row4 = row4Default;
										 
							
								 
							
							
								if (tHash_Lookup_row4 !=null && tHash_Lookup_row4.hasNext()) { // G 099
								
							
								
								fromLookup_row4 = tHash_Lookup_row4.next();

							
							
								} // G 099
							
							

							if(fromLookup_row4 != null) {
								row4 = fromLookup_row4;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

sortie_add_linenumber = null;


// # Output table : 'sortie_add_linenumber'
sortie_add_linenumber_tmp.ITEMNUMBER = sortie_map.ITEMNUMBER ;
sortie_add_linenumber_tmp.PRICE = BigDecimal.valueOf(sortie_map.PRICE ).setScale(2,BigDecimal.ROUND_HALF_UP) ;
sortie_add_linenumber_tmp.PRICECURRENCYCODE = sortie_map.PRICECURRENCYCODE ;
sortie_add_linenumber_tmp.PRICECUSTOMERGROUPCODE = sortie_map.PRICECUSTOMERGROUPCODE ;
sortie_add_linenumber_tmp.PRODUCTCOLORID = sortie_map.PRODUCTCOLORID ;
sortie_add_linenumber_tmp.PRODUCTSIZEID = sortie_map.PRODUCTSIZEID ;
sortie_add_linenumber_tmp.PRODUCTSTYLEID = sortie_map.PRODUCTSTYLEID ;
sortie_add_linenumber_tmp.SEASON = sortie_map.SEASON ;
sortie_add_linenumber_tmp.COUNTRY = sortie_map.COUNTRY ;
sortie_add_linenumber_tmp.GROUPCODE = row4.GROUPCODE ;
sortie_add_linenumber_tmp.FromDate = sortie_map.FromDate ;
sortie_add_linenumber_tmp.ToDate = sortie_map.ToDate ;
sortie_add_linenumber = sortie_add_linenumber_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "sortie_add_linenumber"
if(sortie_add_linenumber != null) { 



	
	/**
	 * [tUniqRow_2 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	
row10 = null;			
if(sortie_add_linenumber.ITEMNUMBER == null){
	finder_tUniqRow_2.ITEMNUMBER = null;
}else{
	finder_tUniqRow_2.ITEMNUMBER = sortie_add_linenumber.ITEMNUMBER.toLowerCase();
}
if(sortie_add_linenumber.PRICECURRENCYCODE == null){
	finder_tUniqRow_2.PRICECURRENCYCODE = null;
}else{
	finder_tUniqRow_2.PRICECURRENCYCODE = sortie_add_linenumber.PRICECURRENCYCODE.toLowerCase();
}
if(sortie_add_linenumber.PRICECUSTOMERGROUPCODE == null){
	finder_tUniqRow_2.PRICECUSTOMERGROUPCODE = null;
}else{
	finder_tUniqRow_2.PRICECUSTOMERGROUPCODE = sortie_add_linenumber.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTCOLORID == null){
	finder_tUniqRow_2.PRODUCTCOLORID = null;
}else{
	finder_tUniqRow_2.PRODUCTCOLORID = sortie_add_linenumber.PRODUCTCOLORID.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTSIZEID == null){
	finder_tUniqRow_2.PRODUCTSIZEID = null;
}else{
	finder_tUniqRow_2.PRODUCTSIZEID = sortie_add_linenumber.PRODUCTSIZEID.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTSTYLEID == null){
	finder_tUniqRow_2.PRODUCTSTYLEID = null;
}else{
	finder_tUniqRow_2.PRODUCTSTYLEID = sortie_add_linenumber.PRODUCTSTYLEID.toLowerCase();
}
if(sortie_add_linenumber.SEASON == null){
	finder_tUniqRow_2.SEASON = null;
}else{
	finder_tUniqRow_2.SEASON = sortie_add_linenumber.SEASON.toLowerCase();
}
if(sortie_add_linenumber.GROUPCODE == null){
	finder_tUniqRow_2.GROUPCODE = null;
}else{
	finder_tUniqRow_2.GROUPCODE = sortie_add_linenumber.GROUPCODE.toLowerCase();
}	
finder_tUniqRow_2.hashCodeDirty = true;
if (!keystUniqRow_2.contains(finder_tUniqRow_2)) {
		KeyStruct_tUniqRow_2 new_tUniqRow_2 = new KeyStruct_tUniqRow_2();

		
if(sortie_add_linenumber.ITEMNUMBER == null){
	new_tUniqRow_2.ITEMNUMBER = null;
}else{
	new_tUniqRow_2.ITEMNUMBER = sortie_add_linenumber.ITEMNUMBER.toLowerCase();
}
if(sortie_add_linenumber.PRICECURRENCYCODE == null){
	new_tUniqRow_2.PRICECURRENCYCODE = null;
}else{
	new_tUniqRow_2.PRICECURRENCYCODE = sortie_add_linenumber.PRICECURRENCYCODE.toLowerCase();
}
if(sortie_add_linenumber.PRICECUSTOMERGROUPCODE == null){
	new_tUniqRow_2.PRICECUSTOMERGROUPCODE = null;
}else{
	new_tUniqRow_2.PRICECUSTOMERGROUPCODE = sortie_add_linenumber.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTCOLORID == null){
	new_tUniqRow_2.PRODUCTCOLORID = null;
}else{
	new_tUniqRow_2.PRODUCTCOLORID = sortie_add_linenumber.PRODUCTCOLORID.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTSIZEID == null){
	new_tUniqRow_2.PRODUCTSIZEID = null;
}else{
	new_tUniqRow_2.PRODUCTSIZEID = sortie_add_linenumber.PRODUCTSIZEID.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTSTYLEID == null){
	new_tUniqRow_2.PRODUCTSTYLEID = null;
}else{
	new_tUniqRow_2.PRODUCTSTYLEID = sortie_add_linenumber.PRODUCTSTYLEID.toLowerCase();
}
if(sortie_add_linenumber.SEASON == null){
	new_tUniqRow_2.SEASON = null;
}else{
	new_tUniqRow_2.SEASON = sortie_add_linenumber.SEASON.toLowerCase();
}
if(sortie_add_linenumber.GROUPCODE == null){
	new_tUniqRow_2.GROUPCODE = null;
}else{
	new_tUniqRow_2.GROUPCODE = sortie_add_linenumber.GROUPCODE.toLowerCase();
}
		
		keystUniqRow_2.add(new_tUniqRow_2);if(row10 == null){ 
	
	row10 = new row10Struct();
}row10.ITEMNUMBER = sortie_add_linenumber.ITEMNUMBER;			row10.PRICE = sortie_add_linenumber.PRICE;			row10.PRICECURRENCYCODE = sortie_add_linenumber.PRICECURRENCYCODE;			row10.PRICECUSTOMERGROUPCODE = sortie_add_linenumber.PRICECUSTOMERGROUPCODE;			row10.PRODUCTCOLORID = sortie_add_linenumber.PRODUCTCOLORID;			row10.PRODUCTSIZEID = sortie_add_linenumber.PRODUCTSIZEID;			row10.PRODUCTSTYLEID = sortie_add_linenumber.PRODUCTSTYLEID;			row10.SEASON = sortie_add_linenumber.SEASON;			row10.COUNTRY = sortie_add_linenumber.COUNTRY;			row10.GROUPCODE = sortie_add_linenumber.GROUPCODE;			row10.FromDate = sortie_add_linenumber.FromDate;			row10.ToDate = sortie_add_linenumber.ToDate;					
		nb_uniques_tUniqRow_2++;
	} else {
	  nb_duplicates_tUniqRow_2++;
	}

 


	tos_count_tUniqRow_2++;

/**
 * [tUniqRow_2 main ] stop
 */
	
	/**
	 * [tUniqRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

 



/**
 * [tUniqRow_2 process_data_begin ] stop
 */
// Start of branch "row10"
if(row10 != null) { 



	
	/**
	 * [tFileOutputDelimited_4 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	


                    StringBuilder sb_tFileOutputDelimited_4 = new StringBuilder();
                            if(row10.ITEMNUMBER != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.ITEMNUMBER
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRICE != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRICE.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRICECURRENCYCODE != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRICECURRENCYCODE
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRICECUSTOMERGROUPCODE != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRICECUSTOMERGROUPCODE
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRODUCTCOLORID != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRODUCTCOLORID
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRODUCTSIZEID != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRODUCTSIZEID
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRODUCTSTYLEID != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRODUCTSTYLEID
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.SEASON != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.SEASON
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.COUNTRY != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.COUNTRY
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.GROUPCODE != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.GROUPCODE
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.FromDate != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.FromDate
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.ToDate != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.ToDate
                        );
                            }
                    sb_tFileOutputDelimited_4.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_4);


                    nb_line_tFileOutputDelimited_4++;
                    resourceMap.put("nb_line_tFileOutputDelimited_4", nb_line_tFileOutputDelimited_4);

                        outtFileOutputDelimited_4.write(sb_tFileOutputDelimited_4.toString());




 


	tos_count_tFileOutputDelimited_4++;

/**
 * [tFileOutputDelimited_4 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	

 



/**
 * [tFileOutputDelimited_4 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	

 



/**
 * [tFileOutputDelimited_4 process_data_end ] stop
 */

} // End of branch "row10"




	
	/**
	 * [tUniqRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

 



/**
 * [tUniqRow_2 process_data_end ] stop
 */

} // End of branch "sortie_add_linenumber"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */

} // End of branch "sortie_map"




	
	/**
	 * [tMap_22 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

 



/**
 * [tMap_22 process_data_end ] stop
 */

} // End of branch "row41"




	
	/**
	 * [tMap_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_end ] stop
 */



	
	/**
	 * [tUnite_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	

 



/**
 * [tUnite_2 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_13";

	

 



/**
 * [tHashInput_13 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_13 end ] start
	 */

	

	
	
	currentComponent="tHashInput_13";

	
    

		
			nb_line_tHashInput_13++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_MASTERFILE_EXTRACT_PRICES_1_" + pid +"_tHashOutput_13");
	


	globalMap.put("tHashInput_13_NB_LINE", nb_line_tHashInput_13);       

 

ok_Hash.put("tHashInput_13", true);
end_Hash.put("tHashInput_13", System.currentTimeMillis());




/**
 * [tHashInput_13 end ] stop
 */
	
	/**
	 * [tHashInput_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_14", false);
		start_Hash.put("tHashInput_14", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_14";

	
		int tos_count_tHashInput_14 = 0;
		


int nb_line_tHashInput_14 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_14=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row50Struct> tHashFile_tHashInput_14 = mf_tHashInput_14.getAdvancedMemoryHashFile("tHashFile_MASTERFILE_EXTRACT_PRICES_1_" + pid +"_tHashOutput_14");
if(tHashFile_tHashInput_14==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row50Struct> iterator_tHashInput_14 = tHashFile_tHashInput_14.iterator();
while (iterator_tHashInput_14.hasNext()) {
    row50Struct next_tHashInput_14 = iterator_tHashInput_14.next();

	row54.TRADEAGREEMENTJOURNALNUMBER = next_tHashInput_14.TRADEAGREEMENTJOURNALNUMBER;
	row54.ITEMNUMBER = next_tHashInput_14.ITEMNUMBER;
	row54.PRICE = next_tHashInput_14.PRICE;
	row54.PRICECURRENCYCODE = next_tHashInput_14.PRICECURRENCYCODE;
	row54.PRICECUSTOMERGROUPCODE = next_tHashInput_14.PRICECUSTOMERGROUPCODE;
	row54.PRODUCTCOLORID = next_tHashInput_14.PRODUCTCOLORID;
	row54.PRODUCTSIZEID = next_tHashInput_14.PRODUCTSIZEID;
	row54.PRODUCTSTYLEID = next_tHashInput_14.PRODUCTSTYLEID;
	row54.QUANTITYUNITSYMBOL = next_tHashInput_14.QUANTITYUNITSYMBOL;
	row54.SEASON = next_tHashInput_14.SEASON;
	row54.COUNTRY = next_tHashInput_14.COUNTRY;
 



/**
 * [tHashInput_14 begin ] stop
 */
	
	/**
	 * [tHashInput_14 main ] start
	 */

	

	
	
	currentComponent="tHashInput_14";

	

 


	tos_count_tHashInput_14++;

/**
 * [tHashInput_14 main ] stop
 */
	
	/**
	 * [tHashInput_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_14";

	

 



/**
 * [tHashInput_14 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_2 main ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	
//////////
 

// for output
			row11 = new row11Struct();
								
			row11.TRADEAGREEMENTJOURNALNUMBER = row54.TRADEAGREEMENTJOURNALNUMBER;								
			row11.ITEMNUMBER = row54.ITEMNUMBER;								
			row11.PRICE = row54.PRICE;								
			row11.PRICECURRENCYCODE = row54.PRICECURRENCYCODE;								
			row11.PRICECUSTOMERGROUPCODE = row54.PRICECUSTOMERGROUPCODE;								
			row11.PRODUCTCOLORID = row54.PRODUCTCOLORID;								
			row11.PRODUCTSIZEID = row54.PRODUCTSIZEID;								
			row11.PRODUCTSTYLEID = row54.PRODUCTSTYLEID;								
			row11.QUANTITYUNITSYMBOL = row54.QUANTITYUNITSYMBOL;								
			row11.SEASON = row54.SEASON;								
			row11.COUNTRY = row54.COUNTRY;			

			nb_line_tUnite_2++;

//////////
 


	tos_count_tUnite_2++;

/**
 * [tUnite_2 main ] stop
 */
	
	/**
	 * [tUnite_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	

 



/**
 * [tUnite_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_8 main ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_8 = false;
		  boolean mainRowRejected_tMap_8 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row12" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow12 = false;
       		  	    	
       		  	    	
 							row12Struct row12ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_8) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_8 = false;
								
                        		    		row12HashKey.itemnumber = row11.ITEMNUMBER ;
                        		    		
                        		    		row12HashKey.productcolorid = row11.PRODUCTCOLORID ;
                        		    		
                        		    		row12HashKey.productsizeid = row11.PRODUCTSIZEID ;
                        		    		
                        		    		row12HashKey.productstyleid = row11.PRODUCTSTYLEID ;
                        		    		

								
		                        	row12HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row12.lookup( row12HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row12.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_8 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row12 != null && tHash_Lookup_row12.getCount(row12HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row12' and it contains more one result from keys :  row12.itemnumber = '" + row12HashKey.itemnumber + "', row12.productcolorid = '" + row12HashKey.productcolorid + "', row12.productsizeid = '" + row12HashKey.productsizeid + "', row12.productstyleid = '" + row12HashKey.productstyleid + "'");
								} // G 071
							

							row12Struct row12 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row12Struct fromLookup_row12 = null;
							row12 = row12Default;
										 
							
								 
							
							
								if (tHash_Lookup_row12 !=null && tHash_Lookup_row12.hasNext()) { // G 099
								
							
								
								fromLookup_row12 = tHash_Lookup_row12.next();

							
							
								} // G 099
							
							

							if(fromLookup_row12 != null) {
								row12 = fromLookup_row12;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_8__Struct Var = Var__tMap_8;// ###############################
        // ###############################
        // # Output tables

row41 = null;

if(!rejectedInnerJoin_tMap_8 ) {

// # Output table : 'row41'
row41_tmp.TRADEAGREEMENTJOURNALNUMBER = row11.TRADEAGREEMENTJOURNALNUMBER ;
row41_tmp.ITEMNUMBER = row11.ITEMNUMBER ;
row41_tmp.PRICE = row11.PRICE ;
row41_tmp.PRICECURRENCYCODE = row11.PRICECURRENCYCODE ;
row41_tmp.PRICECUSTOMERGROUPCODE = row11.PRICECUSTOMERGROUPCODE ;
row41_tmp.PRODUCTCOLORID = row11.PRODUCTCOLORID ;
row41_tmp.PRODUCTSIZEID = row11.PRODUCTSIZEID ;
row41_tmp.PRODUCTSTYLEID = row11.PRODUCTSTYLEID ;
row41_tmp.QUANTITYUNITSYMBOL = row11.QUANTITYUNITSYMBOL ;
row41_tmp.SEASON = row11.SEASON ;
row41_tmp.COUNTRY = row11.COUNTRY ;
row41 = row41_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_8 = false;










 


	tos_count_tMap_8++;

/**
 * [tMap_8 main ] stop
 */
	
	/**
	 * [tMap_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_begin ] stop
 */
// Start of branch "row41"
if(row41 != null) { 



	
	/**
	 * [tMap_22 main ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_22 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_22 = false;
		  boolean mainRowRejected_tMap_22 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row9" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow9 = false;
       		  	    	
       		  	    	
 							row9Struct row9ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_22) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_22 = false;
								
                        		    		row9HashKey.SEASONCODE = row41.SEASON ;
                        		    		

								
		                        	row9HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row9.lookup( row9HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row9 != null && tHash_Lookup_row9.getCount(row9HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row9' and it contains more one result from keys :  row9.SEASONCODE = '" + row9HashKey.SEASONCODE + "'");
								} // G 071
							

							row9Struct row9 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row9Struct fromLookup_row9 = null;
							row9 = row9Default;
										 
							
								 
							
							
								if (tHash_Lookup_row9 !=null && tHash_Lookup_row9.hasNext()) { // G 099
								
							
								
								fromLookup_row9 = tHash_Lookup_row9.next();

							
							
								} // G 099
							
							

							if(fromLookup_row9 != null) {
								row9 = fromLookup_row9;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_22__Struct Var = Var__tMap_22;// ###############################
        // ###############################
        // # Output tables

sortie_map = null;


// # Output table : 'sortie_map'
sortie_map_tmp.ITEMNUMBER = row41.ITEMNUMBER ;
sortie_map_tmp.PRICE = row41.PRICE ;
sortie_map_tmp.PRICECURRENCYCODE = row41.PRICECURRENCYCODE ;
sortie_map_tmp.PRICECUSTOMERGROUPCODE = row41.PRICECUSTOMERGROUPCODE ;
sortie_map_tmp.PRODUCTCOLORID = row41.PRODUCTCOLORID ;
sortie_map_tmp.PRODUCTSIZEID = row41.PRODUCTSIZEID ;
sortie_map_tmp.PRODUCTSTYLEID = row41.PRODUCTSTYLEID ;
sortie_map_tmp.SEASON = row41.SEASON ;
sortie_map_tmp.COUNTRY = row41.COUNTRY ;
sortie_map_tmp.FromDate = row9.FromDate ;
sortie_map_tmp.ToDate = row9.ToDate ;
sortie_map = sortie_map_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_22 = false;










 


	tos_count_tMap_22++;

/**
 * [tMap_22 main ] stop
 */
	
	/**
	 * [tMap_22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

 



/**
 * [tMap_22 process_data_begin ] stop
 */
// Start of branch "sortie_map"
if(sortie_map != null) { 



	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row4" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow4 = false;
       		  	    	
       		  	    	
 							row4Struct row4ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		row4HashKey.SPLPRICETYPE = sortie_map.PRICECUSTOMERGROUPCODE ;
                        		    		
                        		    		row4HashKey.SPLSEASONCODE = sortie_map.SEASON ;
                        		    		
                        		    		row4HashKey.SPLCOUNTRYREGIONID = sortie_map.COUNTRY ;
                        		    		

								
		                        	row4HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row4.lookup( row4HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row4 != null && tHash_Lookup_row4.getCount(row4HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row4' and it contains more one result from keys :  row4.SPLPRICETYPE = '" + row4HashKey.SPLPRICETYPE + "', row4.SPLSEASONCODE = '" + row4HashKey.SPLSEASONCODE + "', row4.SPLCOUNTRYREGIONID = '" + row4HashKey.SPLCOUNTRYREGIONID + "'");
								} // G 071
							

							row4Struct row4 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row4Struct fromLookup_row4 = null;
							row4 = row4Default;
										 
							
								 
							
							
								if (tHash_Lookup_row4 !=null && tHash_Lookup_row4.hasNext()) { // G 099
								
							
								
								fromLookup_row4 = tHash_Lookup_row4.next();

							
							
								} // G 099
							
							

							if(fromLookup_row4 != null) {
								row4 = fromLookup_row4;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

sortie_add_linenumber = null;


// # Output table : 'sortie_add_linenumber'
sortie_add_linenumber_tmp.ITEMNUMBER = sortie_map.ITEMNUMBER ;
sortie_add_linenumber_tmp.PRICE = BigDecimal.valueOf(sortie_map.PRICE ).setScale(2,BigDecimal.ROUND_HALF_UP) ;
sortie_add_linenumber_tmp.PRICECURRENCYCODE = sortie_map.PRICECURRENCYCODE ;
sortie_add_linenumber_tmp.PRICECUSTOMERGROUPCODE = sortie_map.PRICECUSTOMERGROUPCODE ;
sortie_add_linenumber_tmp.PRODUCTCOLORID = sortie_map.PRODUCTCOLORID ;
sortie_add_linenumber_tmp.PRODUCTSIZEID = sortie_map.PRODUCTSIZEID ;
sortie_add_linenumber_tmp.PRODUCTSTYLEID = sortie_map.PRODUCTSTYLEID ;
sortie_add_linenumber_tmp.SEASON = sortie_map.SEASON ;
sortie_add_linenumber_tmp.COUNTRY = sortie_map.COUNTRY ;
sortie_add_linenumber_tmp.GROUPCODE = row4.GROUPCODE ;
sortie_add_linenumber_tmp.FromDate = sortie_map.FromDate ;
sortie_add_linenumber_tmp.ToDate = sortie_map.ToDate ;
sortie_add_linenumber = sortie_add_linenumber_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "sortie_add_linenumber"
if(sortie_add_linenumber != null) { 



	
	/**
	 * [tUniqRow_2 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	
row10 = null;			
if(sortie_add_linenumber.ITEMNUMBER == null){
	finder_tUniqRow_2.ITEMNUMBER = null;
}else{
	finder_tUniqRow_2.ITEMNUMBER = sortie_add_linenumber.ITEMNUMBER.toLowerCase();
}
if(sortie_add_linenumber.PRICECURRENCYCODE == null){
	finder_tUniqRow_2.PRICECURRENCYCODE = null;
}else{
	finder_tUniqRow_2.PRICECURRENCYCODE = sortie_add_linenumber.PRICECURRENCYCODE.toLowerCase();
}
if(sortie_add_linenumber.PRICECUSTOMERGROUPCODE == null){
	finder_tUniqRow_2.PRICECUSTOMERGROUPCODE = null;
}else{
	finder_tUniqRow_2.PRICECUSTOMERGROUPCODE = sortie_add_linenumber.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTCOLORID == null){
	finder_tUniqRow_2.PRODUCTCOLORID = null;
}else{
	finder_tUniqRow_2.PRODUCTCOLORID = sortie_add_linenumber.PRODUCTCOLORID.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTSIZEID == null){
	finder_tUniqRow_2.PRODUCTSIZEID = null;
}else{
	finder_tUniqRow_2.PRODUCTSIZEID = sortie_add_linenumber.PRODUCTSIZEID.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTSTYLEID == null){
	finder_tUniqRow_2.PRODUCTSTYLEID = null;
}else{
	finder_tUniqRow_2.PRODUCTSTYLEID = sortie_add_linenumber.PRODUCTSTYLEID.toLowerCase();
}
if(sortie_add_linenumber.SEASON == null){
	finder_tUniqRow_2.SEASON = null;
}else{
	finder_tUniqRow_2.SEASON = sortie_add_linenumber.SEASON.toLowerCase();
}
if(sortie_add_linenumber.GROUPCODE == null){
	finder_tUniqRow_2.GROUPCODE = null;
}else{
	finder_tUniqRow_2.GROUPCODE = sortie_add_linenumber.GROUPCODE.toLowerCase();
}	
finder_tUniqRow_2.hashCodeDirty = true;
if (!keystUniqRow_2.contains(finder_tUniqRow_2)) {
		KeyStruct_tUniqRow_2 new_tUniqRow_2 = new KeyStruct_tUniqRow_2();

		
if(sortie_add_linenumber.ITEMNUMBER == null){
	new_tUniqRow_2.ITEMNUMBER = null;
}else{
	new_tUniqRow_2.ITEMNUMBER = sortie_add_linenumber.ITEMNUMBER.toLowerCase();
}
if(sortie_add_linenumber.PRICECURRENCYCODE == null){
	new_tUniqRow_2.PRICECURRENCYCODE = null;
}else{
	new_tUniqRow_2.PRICECURRENCYCODE = sortie_add_linenumber.PRICECURRENCYCODE.toLowerCase();
}
if(sortie_add_linenumber.PRICECUSTOMERGROUPCODE == null){
	new_tUniqRow_2.PRICECUSTOMERGROUPCODE = null;
}else{
	new_tUniqRow_2.PRICECUSTOMERGROUPCODE = sortie_add_linenumber.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTCOLORID == null){
	new_tUniqRow_2.PRODUCTCOLORID = null;
}else{
	new_tUniqRow_2.PRODUCTCOLORID = sortie_add_linenumber.PRODUCTCOLORID.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTSIZEID == null){
	new_tUniqRow_2.PRODUCTSIZEID = null;
}else{
	new_tUniqRow_2.PRODUCTSIZEID = sortie_add_linenumber.PRODUCTSIZEID.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTSTYLEID == null){
	new_tUniqRow_2.PRODUCTSTYLEID = null;
}else{
	new_tUniqRow_2.PRODUCTSTYLEID = sortie_add_linenumber.PRODUCTSTYLEID.toLowerCase();
}
if(sortie_add_linenumber.SEASON == null){
	new_tUniqRow_2.SEASON = null;
}else{
	new_tUniqRow_2.SEASON = sortie_add_linenumber.SEASON.toLowerCase();
}
if(sortie_add_linenumber.GROUPCODE == null){
	new_tUniqRow_2.GROUPCODE = null;
}else{
	new_tUniqRow_2.GROUPCODE = sortie_add_linenumber.GROUPCODE.toLowerCase();
}
		
		keystUniqRow_2.add(new_tUniqRow_2);if(row10 == null){ 
	
	row10 = new row10Struct();
}row10.ITEMNUMBER = sortie_add_linenumber.ITEMNUMBER;			row10.PRICE = sortie_add_linenumber.PRICE;			row10.PRICECURRENCYCODE = sortie_add_linenumber.PRICECURRENCYCODE;			row10.PRICECUSTOMERGROUPCODE = sortie_add_linenumber.PRICECUSTOMERGROUPCODE;			row10.PRODUCTCOLORID = sortie_add_linenumber.PRODUCTCOLORID;			row10.PRODUCTSIZEID = sortie_add_linenumber.PRODUCTSIZEID;			row10.PRODUCTSTYLEID = sortie_add_linenumber.PRODUCTSTYLEID;			row10.SEASON = sortie_add_linenumber.SEASON;			row10.COUNTRY = sortie_add_linenumber.COUNTRY;			row10.GROUPCODE = sortie_add_linenumber.GROUPCODE;			row10.FromDate = sortie_add_linenumber.FromDate;			row10.ToDate = sortie_add_linenumber.ToDate;					
		nb_uniques_tUniqRow_2++;
	} else {
	  nb_duplicates_tUniqRow_2++;
	}

 


	tos_count_tUniqRow_2++;

/**
 * [tUniqRow_2 main ] stop
 */
	
	/**
	 * [tUniqRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

 



/**
 * [tUniqRow_2 process_data_begin ] stop
 */
// Start of branch "row10"
if(row10 != null) { 



	
	/**
	 * [tFileOutputDelimited_4 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	


                    StringBuilder sb_tFileOutputDelimited_4 = new StringBuilder();
                            if(row10.ITEMNUMBER != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.ITEMNUMBER
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRICE != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRICE.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRICECURRENCYCODE != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRICECURRENCYCODE
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRICECUSTOMERGROUPCODE != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRICECUSTOMERGROUPCODE
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRODUCTCOLORID != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRODUCTCOLORID
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRODUCTSIZEID != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRODUCTSIZEID
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRODUCTSTYLEID != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRODUCTSTYLEID
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.SEASON != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.SEASON
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.COUNTRY != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.COUNTRY
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.GROUPCODE != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.GROUPCODE
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.FromDate != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.FromDate
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.ToDate != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.ToDate
                        );
                            }
                    sb_tFileOutputDelimited_4.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_4);


                    nb_line_tFileOutputDelimited_4++;
                    resourceMap.put("nb_line_tFileOutputDelimited_4", nb_line_tFileOutputDelimited_4);

                        outtFileOutputDelimited_4.write(sb_tFileOutputDelimited_4.toString());




 


	tos_count_tFileOutputDelimited_4++;

/**
 * [tFileOutputDelimited_4 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	

 



/**
 * [tFileOutputDelimited_4 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	

 



/**
 * [tFileOutputDelimited_4 process_data_end ] stop
 */

} // End of branch "row10"




	
	/**
	 * [tUniqRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

 



/**
 * [tUniqRow_2 process_data_end ] stop
 */

} // End of branch "sortie_add_linenumber"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */

} // End of branch "sortie_map"




	
	/**
	 * [tMap_22 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

 



/**
 * [tMap_22 process_data_end ] stop
 */

} // End of branch "row41"




	
	/**
	 * [tMap_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_end ] stop
 */



	
	/**
	 * [tUnite_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	

 



/**
 * [tUnite_2 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_14";

	

 



/**
 * [tHashInput_14 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_14 end ] start
	 */

	

	
	
	currentComponent="tHashInput_14";

	
    

		
			nb_line_tHashInput_14++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_MASTERFILE_EXTRACT_PRICES_1_" + pid +"_tHashOutput_14");
	


	globalMap.put("tHashInput_14_NB_LINE", nb_line_tHashInput_14);       

 

ok_Hash.put("tHashInput_14", true);
end_Hash.put("tHashInput_14", System.currentTimeMillis());




/**
 * [tHashInput_14 end ] stop
 */
	
	/**
	 * [tHashInput_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_15", false);
		start_Hash.put("tHashInput_15", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_15";

	
		int tos_count_tHashInput_15 = 0;
		


int nb_line_tHashInput_15 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_15=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row56Struct> tHashFile_tHashInput_15 = mf_tHashInput_15.getAdvancedMemoryHashFile("tHashFile_MASTERFILE_EXTRACT_PRICES_1_" + pid +"_tHashOutput_15");
if(tHashFile_tHashInput_15==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row56Struct> iterator_tHashInput_15 = tHashFile_tHashInput_15.iterator();
while (iterator_tHashInput_15.hasNext()) {
    row56Struct next_tHashInput_15 = iterator_tHashInput_15.next();

	row59.TRADEAGREEMENTJOURNALNUMBER = next_tHashInput_15.TRADEAGREEMENTJOURNALNUMBER;
	row59.ITEMNUMBER = next_tHashInput_15.ITEMNUMBER;
	row59.PRICE = next_tHashInput_15.PRICE;
	row59.PRICECURRENCYCODE = next_tHashInput_15.PRICECURRENCYCODE;
	row59.PRICECUSTOMERGROUPCODE = next_tHashInput_15.PRICECUSTOMERGROUPCODE;
	row59.PRODUCTCOLORID = next_tHashInput_15.PRODUCTCOLORID;
	row59.PRODUCTSIZEID = next_tHashInput_15.PRODUCTSIZEID;
	row59.PRODUCTSTYLEID = next_tHashInput_15.PRODUCTSTYLEID;
	row59.QUANTITYUNITSYMBOL = next_tHashInput_15.QUANTITYUNITSYMBOL;
	row59.SEASON = next_tHashInput_15.SEASON;
	row59.COUNTRY = next_tHashInput_15.COUNTRY;
 



/**
 * [tHashInput_15 begin ] stop
 */
	
	/**
	 * [tHashInput_15 main ] start
	 */

	

	
	
	currentComponent="tHashInput_15";

	

 


	tos_count_tHashInput_15++;

/**
 * [tHashInput_15 main ] stop
 */
	
	/**
	 * [tHashInput_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_15";

	

 



/**
 * [tHashInput_15 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_2 main ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	
//////////
 

// for output
			row11 = new row11Struct();
								
			row11.TRADEAGREEMENTJOURNALNUMBER = row59.TRADEAGREEMENTJOURNALNUMBER;								
			row11.ITEMNUMBER = row59.ITEMNUMBER;								
			row11.PRICE = row59.PRICE;								
			row11.PRICECURRENCYCODE = row59.PRICECURRENCYCODE;								
			row11.PRICECUSTOMERGROUPCODE = row59.PRICECUSTOMERGROUPCODE;								
			row11.PRODUCTCOLORID = row59.PRODUCTCOLORID;								
			row11.PRODUCTSIZEID = row59.PRODUCTSIZEID;								
			row11.PRODUCTSTYLEID = row59.PRODUCTSTYLEID;								
			row11.QUANTITYUNITSYMBOL = row59.QUANTITYUNITSYMBOL;								
			row11.SEASON = row59.SEASON;								
			row11.COUNTRY = row59.COUNTRY;			

			nb_line_tUnite_2++;

//////////
 


	tos_count_tUnite_2++;

/**
 * [tUnite_2 main ] stop
 */
	
	/**
	 * [tUnite_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	

 



/**
 * [tUnite_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_8 main ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_8 = false;
		  boolean mainRowRejected_tMap_8 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row12" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow12 = false;
       		  	    	
       		  	    	
 							row12Struct row12ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_8) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_8 = false;
								
                        		    		row12HashKey.itemnumber = row11.ITEMNUMBER ;
                        		    		
                        		    		row12HashKey.productcolorid = row11.PRODUCTCOLORID ;
                        		    		
                        		    		row12HashKey.productsizeid = row11.PRODUCTSIZEID ;
                        		    		
                        		    		row12HashKey.productstyleid = row11.PRODUCTSTYLEID ;
                        		    		

								
		                        	row12HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row12.lookup( row12HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row12.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_8 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row12 != null && tHash_Lookup_row12.getCount(row12HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row12' and it contains more one result from keys :  row12.itemnumber = '" + row12HashKey.itemnumber + "', row12.productcolorid = '" + row12HashKey.productcolorid + "', row12.productsizeid = '" + row12HashKey.productsizeid + "', row12.productstyleid = '" + row12HashKey.productstyleid + "'");
								} // G 071
							

							row12Struct row12 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row12Struct fromLookup_row12 = null;
							row12 = row12Default;
										 
							
								 
							
							
								if (tHash_Lookup_row12 !=null && tHash_Lookup_row12.hasNext()) { // G 099
								
							
								
								fromLookup_row12 = tHash_Lookup_row12.next();

							
							
								} // G 099
							
							

							if(fromLookup_row12 != null) {
								row12 = fromLookup_row12;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_8__Struct Var = Var__tMap_8;// ###############################
        // ###############################
        // # Output tables

row41 = null;

if(!rejectedInnerJoin_tMap_8 ) {

// # Output table : 'row41'
row41_tmp.TRADEAGREEMENTJOURNALNUMBER = row11.TRADEAGREEMENTJOURNALNUMBER ;
row41_tmp.ITEMNUMBER = row11.ITEMNUMBER ;
row41_tmp.PRICE = row11.PRICE ;
row41_tmp.PRICECURRENCYCODE = row11.PRICECURRENCYCODE ;
row41_tmp.PRICECUSTOMERGROUPCODE = row11.PRICECUSTOMERGROUPCODE ;
row41_tmp.PRODUCTCOLORID = row11.PRODUCTCOLORID ;
row41_tmp.PRODUCTSIZEID = row11.PRODUCTSIZEID ;
row41_tmp.PRODUCTSTYLEID = row11.PRODUCTSTYLEID ;
row41_tmp.QUANTITYUNITSYMBOL = row11.QUANTITYUNITSYMBOL ;
row41_tmp.SEASON = row11.SEASON ;
row41_tmp.COUNTRY = row11.COUNTRY ;
row41 = row41_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_8 = false;










 


	tos_count_tMap_8++;

/**
 * [tMap_8 main ] stop
 */
	
	/**
	 * [tMap_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_begin ] stop
 */
// Start of branch "row41"
if(row41 != null) { 



	
	/**
	 * [tMap_22 main ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_22 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_22 = false;
		  boolean mainRowRejected_tMap_22 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row9" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow9 = false;
       		  	    	
       		  	    	
 							row9Struct row9ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_22) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_22 = false;
								
                        		    		row9HashKey.SEASONCODE = row41.SEASON ;
                        		    		

								
		                        	row9HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row9.lookup( row9HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row9 != null && tHash_Lookup_row9.getCount(row9HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row9' and it contains more one result from keys :  row9.SEASONCODE = '" + row9HashKey.SEASONCODE + "'");
								} // G 071
							

							row9Struct row9 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row9Struct fromLookup_row9 = null;
							row9 = row9Default;
										 
							
								 
							
							
								if (tHash_Lookup_row9 !=null && tHash_Lookup_row9.hasNext()) { // G 099
								
							
								
								fromLookup_row9 = tHash_Lookup_row9.next();

							
							
								} // G 099
							
							

							if(fromLookup_row9 != null) {
								row9 = fromLookup_row9;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_22__Struct Var = Var__tMap_22;// ###############################
        // ###############################
        // # Output tables

sortie_map = null;


// # Output table : 'sortie_map'
sortie_map_tmp.ITEMNUMBER = row41.ITEMNUMBER ;
sortie_map_tmp.PRICE = row41.PRICE ;
sortie_map_tmp.PRICECURRENCYCODE = row41.PRICECURRENCYCODE ;
sortie_map_tmp.PRICECUSTOMERGROUPCODE = row41.PRICECUSTOMERGROUPCODE ;
sortie_map_tmp.PRODUCTCOLORID = row41.PRODUCTCOLORID ;
sortie_map_tmp.PRODUCTSIZEID = row41.PRODUCTSIZEID ;
sortie_map_tmp.PRODUCTSTYLEID = row41.PRODUCTSTYLEID ;
sortie_map_tmp.SEASON = row41.SEASON ;
sortie_map_tmp.COUNTRY = row41.COUNTRY ;
sortie_map_tmp.FromDate = row9.FromDate ;
sortie_map_tmp.ToDate = row9.ToDate ;
sortie_map = sortie_map_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_22 = false;










 


	tos_count_tMap_22++;

/**
 * [tMap_22 main ] stop
 */
	
	/**
	 * [tMap_22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

 



/**
 * [tMap_22 process_data_begin ] stop
 */
// Start of branch "sortie_map"
if(sortie_map != null) { 



	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row4" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow4 = false;
       		  	    	
       		  	    	
 							row4Struct row4ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		row4HashKey.SPLPRICETYPE = sortie_map.PRICECUSTOMERGROUPCODE ;
                        		    		
                        		    		row4HashKey.SPLSEASONCODE = sortie_map.SEASON ;
                        		    		
                        		    		row4HashKey.SPLCOUNTRYREGIONID = sortie_map.COUNTRY ;
                        		    		

								
		                        	row4HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row4.lookup( row4HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row4 != null && tHash_Lookup_row4.getCount(row4HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row4' and it contains more one result from keys :  row4.SPLPRICETYPE = '" + row4HashKey.SPLPRICETYPE + "', row4.SPLSEASONCODE = '" + row4HashKey.SPLSEASONCODE + "', row4.SPLCOUNTRYREGIONID = '" + row4HashKey.SPLCOUNTRYREGIONID + "'");
								} // G 071
							

							row4Struct row4 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row4Struct fromLookup_row4 = null;
							row4 = row4Default;
										 
							
								 
							
							
								if (tHash_Lookup_row4 !=null && tHash_Lookup_row4.hasNext()) { // G 099
								
							
								
								fromLookup_row4 = tHash_Lookup_row4.next();

							
							
								} // G 099
							
							

							if(fromLookup_row4 != null) {
								row4 = fromLookup_row4;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

sortie_add_linenumber = null;


// # Output table : 'sortie_add_linenumber'
sortie_add_linenumber_tmp.ITEMNUMBER = sortie_map.ITEMNUMBER ;
sortie_add_linenumber_tmp.PRICE = BigDecimal.valueOf(sortie_map.PRICE ).setScale(2,BigDecimal.ROUND_HALF_UP) ;
sortie_add_linenumber_tmp.PRICECURRENCYCODE = sortie_map.PRICECURRENCYCODE ;
sortie_add_linenumber_tmp.PRICECUSTOMERGROUPCODE = sortie_map.PRICECUSTOMERGROUPCODE ;
sortie_add_linenumber_tmp.PRODUCTCOLORID = sortie_map.PRODUCTCOLORID ;
sortie_add_linenumber_tmp.PRODUCTSIZEID = sortie_map.PRODUCTSIZEID ;
sortie_add_linenumber_tmp.PRODUCTSTYLEID = sortie_map.PRODUCTSTYLEID ;
sortie_add_linenumber_tmp.SEASON = sortie_map.SEASON ;
sortie_add_linenumber_tmp.COUNTRY = sortie_map.COUNTRY ;
sortie_add_linenumber_tmp.GROUPCODE = row4.GROUPCODE ;
sortie_add_linenumber_tmp.FromDate = sortie_map.FromDate ;
sortie_add_linenumber_tmp.ToDate = sortie_map.ToDate ;
sortie_add_linenumber = sortie_add_linenumber_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "sortie_add_linenumber"
if(sortie_add_linenumber != null) { 



	
	/**
	 * [tUniqRow_2 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	
row10 = null;			
if(sortie_add_linenumber.ITEMNUMBER == null){
	finder_tUniqRow_2.ITEMNUMBER = null;
}else{
	finder_tUniqRow_2.ITEMNUMBER = sortie_add_linenumber.ITEMNUMBER.toLowerCase();
}
if(sortie_add_linenumber.PRICECURRENCYCODE == null){
	finder_tUniqRow_2.PRICECURRENCYCODE = null;
}else{
	finder_tUniqRow_2.PRICECURRENCYCODE = sortie_add_linenumber.PRICECURRENCYCODE.toLowerCase();
}
if(sortie_add_linenumber.PRICECUSTOMERGROUPCODE == null){
	finder_tUniqRow_2.PRICECUSTOMERGROUPCODE = null;
}else{
	finder_tUniqRow_2.PRICECUSTOMERGROUPCODE = sortie_add_linenumber.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTCOLORID == null){
	finder_tUniqRow_2.PRODUCTCOLORID = null;
}else{
	finder_tUniqRow_2.PRODUCTCOLORID = sortie_add_linenumber.PRODUCTCOLORID.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTSIZEID == null){
	finder_tUniqRow_2.PRODUCTSIZEID = null;
}else{
	finder_tUniqRow_2.PRODUCTSIZEID = sortie_add_linenumber.PRODUCTSIZEID.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTSTYLEID == null){
	finder_tUniqRow_2.PRODUCTSTYLEID = null;
}else{
	finder_tUniqRow_2.PRODUCTSTYLEID = sortie_add_linenumber.PRODUCTSTYLEID.toLowerCase();
}
if(sortie_add_linenumber.SEASON == null){
	finder_tUniqRow_2.SEASON = null;
}else{
	finder_tUniqRow_2.SEASON = sortie_add_linenumber.SEASON.toLowerCase();
}
if(sortie_add_linenumber.GROUPCODE == null){
	finder_tUniqRow_2.GROUPCODE = null;
}else{
	finder_tUniqRow_2.GROUPCODE = sortie_add_linenumber.GROUPCODE.toLowerCase();
}	
finder_tUniqRow_2.hashCodeDirty = true;
if (!keystUniqRow_2.contains(finder_tUniqRow_2)) {
		KeyStruct_tUniqRow_2 new_tUniqRow_2 = new KeyStruct_tUniqRow_2();

		
if(sortie_add_linenumber.ITEMNUMBER == null){
	new_tUniqRow_2.ITEMNUMBER = null;
}else{
	new_tUniqRow_2.ITEMNUMBER = sortie_add_linenumber.ITEMNUMBER.toLowerCase();
}
if(sortie_add_linenumber.PRICECURRENCYCODE == null){
	new_tUniqRow_2.PRICECURRENCYCODE = null;
}else{
	new_tUniqRow_2.PRICECURRENCYCODE = sortie_add_linenumber.PRICECURRENCYCODE.toLowerCase();
}
if(sortie_add_linenumber.PRICECUSTOMERGROUPCODE == null){
	new_tUniqRow_2.PRICECUSTOMERGROUPCODE = null;
}else{
	new_tUniqRow_2.PRICECUSTOMERGROUPCODE = sortie_add_linenumber.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTCOLORID == null){
	new_tUniqRow_2.PRODUCTCOLORID = null;
}else{
	new_tUniqRow_2.PRODUCTCOLORID = sortie_add_linenumber.PRODUCTCOLORID.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTSIZEID == null){
	new_tUniqRow_2.PRODUCTSIZEID = null;
}else{
	new_tUniqRow_2.PRODUCTSIZEID = sortie_add_linenumber.PRODUCTSIZEID.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTSTYLEID == null){
	new_tUniqRow_2.PRODUCTSTYLEID = null;
}else{
	new_tUniqRow_2.PRODUCTSTYLEID = sortie_add_linenumber.PRODUCTSTYLEID.toLowerCase();
}
if(sortie_add_linenumber.SEASON == null){
	new_tUniqRow_2.SEASON = null;
}else{
	new_tUniqRow_2.SEASON = sortie_add_linenumber.SEASON.toLowerCase();
}
if(sortie_add_linenumber.GROUPCODE == null){
	new_tUniqRow_2.GROUPCODE = null;
}else{
	new_tUniqRow_2.GROUPCODE = sortie_add_linenumber.GROUPCODE.toLowerCase();
}
		
		keystUniqRow_2.add(new_tUniqRow_2);if(row10 == null){ 
	
	row10 = new row10Struct();
}row10.ITEMNUMBER = sortie_add_linenumber.ITEMNUMBER;			row10.PRICE = sortie_add_linenumber.PRICE;			row10.PRICECURRENCYCODE = sortie_add_linenumber.PRICECURRENCYCODE;			row10.PRICECUSTOMERGROUPCODE = sortie_add_linenumber.PRICECUSTOMERGROUPCODE;			row10.PRODUCTCOLORID = sortie_add_linenumber.PRODUCTCOLORID;			row10.PRODUCTSIZEID = sortie_add_linenumber.PRODUCTSIZEID;			row10.PRODUCTSTYLEID = sortie_add_linenumber.PRODUCTSTYLEID;			row10.SEASON = sortie_add_linenumber.SEASON;			row10.COUNTRY = sortie_add_linenumber.COUNTRY;			row10.GROUPCODE = sortie_add_linenumber.GROUPCODE;			row10.FromDate = sortie_add_linenumber.FromDate;			row10.ToDate = sortie_add_linenumber.ToDate;					
		nb_uniques_tUniqRow_2++;
	} else {
	  nb_duplicates_tUniqRow_2++;
	}

 


	tos_count_tUniqRow_2++;

/**
 * [tUniqRow_2 main ] stop
 */
	
	/**
	 * [tUniqRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

 



/**
 * [tUniqRow_2 process_data_begin ] stop
 */
// Start of branch "row10"
if(row10 != null) { 



	
	/**
	 * [tFileOutputDelimited_4 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	


                    StringBuilder sb_tFileOutputDelimited_4 = new StringBuilder();
                            if(row10.ITEMNUMBER != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.ITEMNUMBER
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRICE != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRICE.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRICECURRENCYCODE != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRICECURRENCYCODE
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRICECUSTOMERGROUPCODE != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRICECUSTOMERGROUPCODE
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRODUCTCOLORID != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRODUCTCOLORID
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRODUCTSIZEID != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRODUCTSIZEID
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRODUCTSTYLEID != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRODUCTSTYLEID
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.SEASON != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.SEASON
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.COUNTRY != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.COUNTRY
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.GROUPCODE != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.GROUPCODE
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.FromDate != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.FromDate
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.ToDate != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.ToDate
                        );
                            }
                    sb_tFileOutputDelimited_4.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_4);


                    nb_line_tFileOutputDelimited_4++;
                    resourceMap.put("nb_line_tFileOutputDelimited_4", nb_line_tFileOutputDelimited_4);

                        outtFileOutputDelimited_4.write(sb_tFileOutputDelimited_4.toString());




 


	tos_count_tFileOutputDelimited_4++;

/**
 * [tFileOutputDelimited_4 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	

 



/**
 * [tFileOutputDelimited_4 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	

 



/**
 * [tFileOutputDelimited_4 process_data_end ] stop
 */

} // End of branch "row10"




	
	/**
	 * [tUniqRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

 



/**
 * [tUniqRow_2 process_data_end ] stop
 */

} // End of branch "sortie_add_linenumber"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */

} // End of branch "sortie_map"




	
	/**
	 * [tMap_22 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

 



/**
 * [tMap_22 process_data_end ] stop
 */

} // End of branch "row41"




	
	/**
	 * [tMap_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_end ] stop
 */



	
	/**
	 * [tUnite_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	

 



/**
 * [tUnite_2 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_15";

	

 



/**
 * [tHashInput_15 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_15 end ] start
	 */

	

	
	
	currentComponent="tHashInput_15";

	
    

		
			nb_line_tHashInput_15++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_MASTERFILE_EXTRACT_PRICES_1_" + pid +"_tHashOutput_15");
	


	globalMap.put("tHashInput_15_NB_LINE", nb_line_tHashInput_15);       

 

ok_Hash.put("tHashInput_15", true);
end_Hash.put("tHashInput_15", System.currentTimeMillis());




/**
 * [tHashInput_15 end ] stop
 */
	
	/**
	 * [tHashInput_16 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_16", false);
		start_Hash.put("tHashInput_16", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_16";

	
		int tos_count_tHashInput_16 = 0;
		


int nb_line_tHashInput_16 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_16=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row58Struct> tHashFile_tHashInput_16 = mf_tHashInput_16.getAdvancedMemoryHashFile("tHashFile_MASTERFILE_EXTRACT_PRICES_1_" + pid +"_tHashOutput_16");
if(tHashFile_tHashInput_16==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row58Struct> iterator_tHashInput_16 = tHashFile_tHashInput_16.iterator();
while (iterator_tHashInput_16.hasNext()) {
    row58Struct next_tHashInput_16 = iterator_tHashInput_16.next();

	row60.TRADEAGREEMENTJOURNALNUMBER = next_tHashInput_16.TRADEAGREEMENTJOURNALNUMBER;
	row60.ITEMNUMBER = next_tHashInput_16.ITEMNUMBER;
	row60.PRICE = next_tHashInput_16.PRICE;
	row60.PRICECURRENCYCODE = next_tHashInput_16.PRICECURRENCYCODE;
	row60.PRICECUSTOMERGROUPCODE = next_tHashInput_16.PRICECUSTOMERGROUPCODE;
	row60.PRODUCTCOLORID = next_tHashInput_16.PRODUCTCOLORID;
	row60.PRODUCTSIZEID = next_tHashInput_16.PRODUCTSIZEID;
	row60.PRODUCTSTYLEID = next_tHashInput_16.PRODUCTSTYLEID;
	row60.QUANTITYUNITSYMBOL = next_tHashInput_16.QUANTITYUNITSYMBOL;
	row60.SEASON = next_tHashInput_16.SEASON;
	row60.COUNTRY = next_tHashInput_16.COUNTRY;
 



/**
 * [tHashInput_16 begin ] stop
 */
	
	/**
	 * [tHashInput_16 main ] start
	 */

	

	
	
	currentComponent="tHashInput_16";

	

 


	tos_count_tHashInput_16++;

/**
 * [tHashInput_16 main ] stop
 */
	
	/**
	 * [tHashInput_16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_16";

	

 



/**
 * [tHashInput_16 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_2 main ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	
//////////
 

// for output
			row11 = new row11Struct();
								
			row11.TRADEAGREEMENTJOURNALNUMBER = row60.TRADEAGREEMENTJOURNALNUMBER;								
			row11.ITEMNUMBER = row60.ITEMNUMBER;								
			row11.PRICE = row60.PRICE;								
			row11.PRICECURRENCYCODE = row60.PRICECURRENCYCODE;								
			row11.PRICECUSTOMERGROUPCODE = row60.PRICECUSTOMERGROUPCODE;								
			row11.PRODUCTCOLORID = row60.PRODUCTCOLORID;								
			row11.PRODUCTSIZEID = row60.PRODUCTSIZEID;								
			row11.PRODUCTSTYLEID = row60.PRODUCTSTYLEID;								
			row11.QUANTITYUNITSYMBOL = row60.QUANTITYUNITSYMBOL;								
			row11.SEASON = row60.SEASON;								
			row11.COUNTRY = row60.COUNTRY;			

			nb_line_tUnite_2++;

//////////
 


	tos_count_tUnite_2++;

/**
 * [tUnite_2 main ] stop
 */
	
	/**
	 * [tUnite_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	

 



/**
 * [tUnite_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_8 main ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_8 = false;
		  boolean mainRowRejected_tMap_8 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row12" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow12 = false;
       		  	    	
       		  	    	
 							row12Struct row12ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_8) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_8 = false;
								
                        		    		row12HashKey.itemnumber = row11.ITEMNUMBER ;
                        		    		
                        		    		row12HashKey.productcolorid = row11.PRODUCTCOLORID ;
                        		    		
                        		    		row12HashKey.productsizeid = row11.PRODUCTSIZEID ;
                        		    		
                        		    		row12HashKey.productstyleid = row11.PRODUCTSTYLEID ;
                        		    		

								
		                        	row12HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row12.lookup( row12HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row12.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_8 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row12 != null && tHash_Lookup_row12.getCount(row12HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row12' and it contains more one result from keys :  row12.itemnumber = '" + row12HashKey.itemnumber + "', row12.productcolorid = '" + row12HashKey.productcolorid + "', row12.productsizeid = '" + row12HashKey.productsizeid + "', row12.productstyleid = '" + row12HashKey.productstyleid + "'");
								} // G 071
							

							row12Struct row12 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row12Struct fromLookup_row12 = null;
							row12 = row12Default;
										 
							
								 
							
							
								if (tHash_Lookup_row12 !=null && tHash_Lookup_row12.hasNext()) { // G 099
								
							
								
								fromLookup_row12 = tHash_Lookup_row12.next();

							
							
								} // G 099
							
							

							if(fromLookup_row12 != null) {
								row12 = fromLookup_row12;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_8__Struct Var = Var__tMap_8;// ###############################
        // ###############################
        // # Output tables

row41 = null;

if(!rejectedInnerJoin_tMap_8 ) {

// # Output table : 'row41'
row41_tmp.TRADEAGREEMENTJOURNALNUMBER = row11.TRADEAGREEMENTJOURNALNUMBER ;
row41_tmp.ITEMNUMBER = row11.ITEMNUMBER ;
row41_tmp.PRICE = row11.PRICE ;
row41_tmp.PRICECURRENCYCODE = row11.PRICECURRENCYCODE ;
row41_tmp.PRICECUSTOMERGROUPCODE = row11.PRICECUSTOMERGROUPCODE ;
row41_tmp.PRODUCTCOLORID = row11.PRODUCTCOLORID ;
row41_tmp.PRODUCTSIZEID = row11.PRODUCTSIZEID ;
row41_tmp.PRODUCTSTYLEID = row11.PRODUCTSTYLEID ;
row41_tmp.QUANTITYUNITSYMBOL = row11.QUANTITYUNITSYMBOL ;
row41_tmp.SEASON = row11.SEASON ;
row41_tmp.COUNTRY = row11.COUNTRY ;
row41 = row41_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_8 = false;










 


	tos_count_tMap_8++;

/**
 * [tMap_8 main ] stop
 */
	
	/**
	 * [tMap_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_begin ] stop
 */
// Start of branch "row41"
if(row41 != null) { 



	
	/**
	 * [tMap_22 main ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_22 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_22 = false;
		  boolean mainRowRejected_tMap_22 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row9" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow9 = false;
       		  	    	
       		  	    	
 							row9Struct row9ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_22) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_22 = false;
								
                        		    		row9HashKey.SEASONCODE = row41.SEASON ;
                        		    		

								
		                        	row9HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row9.lookup( row9HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row9 != null && tHash_Lookup_row9.getCount(row9HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row9' and it contains more one result from keys :  row9.SEASONCODE = '" + row9HashKey.SEASONCODE + "'");
								} // G 071
							

							row9Struct row9 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row9Struct fromLookup_row9 = null;
							row9 = row9Default;
										 
							
								 
							
							
								if (tHash_Lookup_row9 !=null && tHash_Lookup_row9.hasNext()) { // G 099
								
							
								
								fromLookup_row9 = tHash_Lookup_row9.next();

							
							
								} // G 099
							
							

							if(fromLookup_row9 != null) {
								row9 = fromLookup_row9;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_22__Struct Var = Var__tMap_22;// ###############################
        // ###############################
        // # Output tables

sortie_map = null;


// # Output table : 'sortie_map'
sortie_map_tmp.ITEMNUMBER = row41.ITEMNUMBER ;
sortie_map_tmp.PRICE = row41.PRICE ;
sortie_map_tmp.PRICECURRENCYCODE = row41.PRICECURRENCYCODE ;
sortie_map_tmp.PRICECUSTOMERGROUPCODE = row41.PRICECUSTOMERGROUPCODE ;
sortie_map_tmp.PRODUCTCOLORID = row41.PRODUCTCOLORID ;
sortie_map_tmp.PRODUCTSIZEID = row41.PRODUCTSIZEID ;
sortie_map_tmp.PRODUCTSTYLEID = row41.PRODUCTSTYLEID ;
sortie_map_tmp.SEASON = row41.SEASON ;
sortie_map_tmp.COUNTRY = row41.COUNTRY ;
sortie_map_tmp.FromDate = row9.FromDate ;
sortie_map_tmp.ToDate = row9.ToDate ;
sortie_map = sortie_map_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_22 = false;










 


	tos_count_tMap_22++;

/**
 * [tMap_22 main ] stop
 */
	
	/**
	 * [tMap_22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

 



/**
 * [tMap_22 process_data_begin ] stop
 */
// Start of branch "sortie_map"
if(sortie_map != null) { 



	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row4" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow4 = false;
       		  	    	
       		  	    	
 							row4Struct row4ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		row4HashKey.SPLPRICETYPE = sortie_map.PRICECUSTOMERGROUPCODE ;
                        		    		
                        		    		row4HashKey.SPLSEASONCODE = sortie_map.SEASON ;
                        		    		
                        		    		row4HashKey.SPLCOUNTRYREGIONID = sortie_map.COUNTRY ;
                        		    		

								
		                        	row4HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row4.lookup( row4HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row4 != null && tHash_Lookup_row4.getCount(row4HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row4' and it contains more one result from keys :  row4.SPLPRICETYPE = '" + row4HashKey.SPLPRICETYPE + "', row4.SPLSEASONCODE = '" + row4HashKey.SPLSEASONCODE + "', row4.SPLCOUNTRYREGIONID = '" + row4HashKey.SPLCOUNTRYREGIONID + "'");
								} // G 071
							

							row4Struct row4 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row4Struct fromLookup_row4 = null;
							row4 = row4Default;
										 
							
								 
							
							
								if (tHash_Lookup_row4 !=null && tHash_Lookup_row4.hasNext()) { // G 099
								
							
								
								fromLookup_row4 = tHash_Lookup_row4.next();

							
							
								} // G 099
							
							

							if(fromLookup_row4 != null) {
								row4 = fromLookup_row4;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

sortie_add_linenumber = null;


// # Output table : 'sortie_add_linenumber'
sortie_add_linenumber_tmp.ITEMNUMBER = sortie_map.ITEMNUMBER ;
sortie_add_linenumber_tmp.PRICE = BigDecimal.valueOf(sortie_map.PRICE ).setScale(2,BigDecimal.ROUND_HALF_UP) ;
sortie_add_linenumber_tmp.PRICECURRENCYCODE = sortie_map.PRICECURRENCYCODE ;
sortie_add_linenumber_tmp.PRICECUSTOMERGROUPCODE = sortie_map.PRICECUSTOMERGROUPCODE ;
sortie_add_linenumber_tmp.PRODUCTCOLORID = sortie_map.PRODUCTCOLORID ;
sortie_add_linenumber_tmp.PRODUCTSIZEID = sortie_map.PRODUCTSIZEID ;
sortie_add_linenumber_tmp.PRODUCTSTYLEID = sortie_map.PRODUCTSTYLEID ;
sortie_add_linenumber_tmp.SEASON = sortie_map.SEASON ;
sortie_add_linenumber_tmp.COUNTRY = sortie_map.COUNTRY ;
sortie_add_linenumber_tmp.GROUPCODE = row4.GROUPCODE ;
sortie_add_linenumber_tmp.FromDate = sortie_map.FromDate ;
sortie_add_linenumber_tmp.ToDate = sortie_map.ToDate ;
sortie_add_linenumber = sortie_add_linenumber_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "sortie_add_linenumber"
if(sortie_add_linenumber != null) { 



	
	/**
	 * [tUniqRow_2 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	
row10 = null;			
if(sortie_add_linenumber.ITEMNUMBER == null){
	finder_tUniqRow_2.ITEMNUMBER = null;
}else{
	finder_tUniqRow_2.ITEMNUMBER = sortie_add_linenumber.ITEMNUMBER.toLowerCase();
}
if(sortie_add_linenumber.PRICECURRENCYCODE == null){
	finder_tUniqRow_2.PRICECURRENCYCODE = null;
}else{
	finder_tUniqRow_2.PRICECURRENCYCODE = sortie_add_linenumber.PRICECURRENCYCODE.toLowerCase();
}
if(sortie_add_linenumber.PRICECUSTOMERGROUPCODE == null){
	finder_tUniqRow_2.PRICECUSTOMERGROUPCODE = null;
}else{
	finder_tUniqRow_2.PRICECUSTOMERGROUPCODE = sortie_add_linenumber.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTCOLORID == null){
	finder_tUniqRow_2.PRODUCTCOLORID = null;
}else{
	finder_tUniqRow_2.PRODUCTCOLORID = sortie_add_linenumber.PRODUCTCOLORID.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTSIZEID == null){
	finder_tUniqRow_2.PRODUCTSIZEID = null;
}else{
	finder_tUniqRow_2.PRODUCTSIZEID = sortie_add_linenumber.PRODUCTSIZEID.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTSTYLEID == null){
	finder_tUniqRow_2.PRODUCTSTYLEID = null;
}else{
	finder_tUniqRow_2.PRODUCTSTYLEID = sortie_add_linenumber.PRODUCTSTYLEID.toLowerCase();
}
if(sortie_add_linenumber.SEASON == null){
	finder_tUniqRow_2.SEASON = null;
}else{
	finder_tUniqRow_2.SEASON = sortie_add_linenumber.SEASON.toLowerCase();
}
if(sortie_add_linenumber.GROUPCODE == null){
	finder_tUniqRow_2.GROUPCODE = null;
}else{
	finder_tUniqRow_2.GROUPCODE = sortie_add_linenumber.GROUPCODE.toLowerCase();
}	
finder_tUniqRow_2.hashCodeDirty = true;
if (!keystUniqRow_2.contains(finder_tUniqRow_2)) {
		KeyStruct_tUniqRow_2 new_tUniqRow_2 = new KeyStruct_tUniqRow_2();

		
if(sortie_add_linenumber.ITEMNUMBER == null){
	new_tUniqRow_2.ITEMNUMBER = null;
}else{
	new_tUniqRow_2.ITEMNUMBER = sortie_add_linenumber.ITEMNUMBER.toLowerCase();
}
if(sortie_add_linenumber.PRICECURRENCYCODE == null){
	new_tUniqRow_2.PRICECURRENCYCODE = null;
}else{
	new_tUniqRow_2.PRICECURRENCYCODE = sortie_add_linenumber.PRICECURRENCYCODE.toLowerCase();
}
if(sortie_add_linenumber.PRICECUSTOMERGROUPCODE == null){
	new_tUniqRow_2.PRICECUSTOMERGROUPCODE = null;
}else{
	new_tUniqRow_2.PRICECUSTOMERGROUPCODE = sortie_add_linenumber.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTCOLORID == null){
	new_tUniqRow_2.PRODUCTCOLORID = null;
}else{
	new_tUniqRow_2.PRODUCTCOLORID = sortie_add_linenumber.PRODUCTCOLORID.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTSIZEID == null){
	new_tUniqRow_2.PRODUCTSIZEID = null;
}else{
	new_tUniqRow_2.PRODUCTSIZEID = sortie_add_linenumber.PRODUCTSIZEID.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTSTYLEID == null){
	new_tUniqRow_2.PRODUCTSTYLEID = null;
}else{
	new_tUniqRow_2.PRODUCTSTYLEID = sortie_add_linenumber.PRODUCTSTYLEID.toLowerCase();
}
if(sortie_add_linenumber.SEASON == null){
	new_tUniqRow_2.SEASON = null;
}else{
	new_tUniqRow_2.SEASON = sortie_add_linenumber.SEASON.toLowerCase();
}
if(sortie_add_linenumber.GROUPCODE == null){
	new_tUniqRow_2.GROUPCODE = null;
}else{
	new_tUniqRow_2.GROUPCODE = sortie_add_linenumber.GROUPCODE.toLowerCase();
}
		
		keystUniqRow_2.add(new_tUniqRow_2);if(row10 == null){ 
	
	row10 = new row10Struct();
}row10.ITEMNUMBER = sortie_add_linenumber.ITEMNUMBER;			row10.PRICE = sortie_add_linenumber.PRICE;			row10.PRICECURRENCYCODE = sortie_add_linenumber.PRICECURRENCYCODE;			row10.PRICECUSTOMERGROUPCODE = sortie_add_linenumber.PRICECUSTOMERGROUPCODE;			row10.PRODUCTCOLORID = sortie_add_linenumber.PRODUCTCOLORID;			row10.PRODUCTSIZEID = sortie_add_linenumber.PRODUCTSIZEID;			row10.PRODUCTSTYLEID = sortie_add_linenumber.PRODUCTSTYLEID;			row10.SEASON = sortie_add_linenumber.SEASON;			row10.COUNTRY = sortie_add_linenumber.COUNTRY;			row10.GROUPCODE = sortie_add_linenumber.GROUPCODE;			row10.FromDate = sortie_add_linenumber.FromDate;			row10.ToDate = sortie_add_linenumber.ToDate;					
		nb_uniques_tUniqRow_2++;
	} else {
	  nb_duplicates_tUniqRow_2++;
	}

 


	tos_count_tUniqRow_2++;

/**
 * [tUniqRow_2 main ] stop
 */
	
	/**
	 * [tUniqRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

 



/**
 * [tUniqRow_2 process_data_begin ] stop
 */
// Start of branch "row10"
if(row10 != null) { 



	
	/**
	 * [tFileOutputDelimited_4 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	


                    StringBuilder sb_tFileOutputDelimited_4 = new StringBuilder();
                            if(row10.ITEMNUMBER != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.ITEMNUMBER
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRICE != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRICE.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRICECURRENCYCODE != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRICECURRENCYCODE
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRICECUSTOMERGROUPCODE != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRICECUSTOMERGROUPCODE
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRODUCTCOLORID != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRODUCTCOLORID
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRODUCTSIZEID != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRODUCTSIZEID
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRODUCTSTYLEID != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRODUCTSTYLEID
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.SEASON != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.SEASON
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.COUNTRY != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.COUNTRY
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.GROUPCODE != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.GROUPCODE
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.FromDate != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.FromDate
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.ToDate != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.ToDate
                        );
                            }
                    sb_tFileOutputDelimited_4.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_4);


                    nb_line_tFileOutputDelimited_4++;
                    resourceMap.put("nb_line_tFileOutputDelimited_4", nb_line_tFileOutputDelimited_4);

                        outtFileOutputDelimited_4.write(sb_tFileOutputDelimited_4.toString());




 


	tos_count_tFileOutputDelimited_4++;

/**
 * [tFileOutputDelimited_4 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	

 



/**
 * [tFileOutputDelimited_4 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	

 



/**
 * [tFileOutputDelimited_4 process_data_end ] stop
 */

} // End of branch "row10"




	
	/**
	 * [tUniqRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

 



/**
 * [tUniqRow_2 process_data_end ] stop
 */

} // End of branch "sortie_add_linenumber"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */

} // End of branch "sortie_map"




	
	/**
	 * [tMap_22 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

 



/**
 * [tMap_22 process_data_end ] stop
 */

} // End of branch "row41"




	
	/**
	 * [tMap_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_end ] stop
 */



	
	/**
	 * [tUnite_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	

 



/**
 * [tUnite_2 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_16 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_16";

	

 



/**
 * [tHashInput_16 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_16 end ] start
	 */

	

	
	
	currentComponent="tHashInput_16";

	
    

		
			nb_line_tHashInput_16++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_MASTERFILE_EXTRACT_PRICES_1_" + pid +"_tHashOutput_16");
	


	globalMap.put("tHashInput_16_NB_LINE", nb_line_tHashInput_16);       

 

ok_Hash.put("tHashInput_16", true);
end_Hash.put("tHashInput_16", System.currentTimeMillis());




/**
 * [tHashInput_16 end ] stop
 */
	
	/**
	 * [tHashInput_17 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_17", false);
		start_Hash.put("tHashInput_17", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_17";

	
		int tos_count_tHashInput_17 = 0;
		


int nb_line_tHashInput_17 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_17=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row62Struct> tHashFile_tHashInput_17 = mf_tHashInput_17.getAdvancedMemoryHashFile("tHashFile_MASTERFILE_EXTRACT_PRICES_1_" + pid +"_tHashOutput_17");
if(tHashFile_tHashInput_17==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row62Struct> iterator_tHashInput_17 = tHashFile_tHashInput_17.iterator();
while (iterator_tHashInput_17.hasNext()) {
    row62Struct next_tHashInput_17 = iterator_tHashInput_17.next();

	Merge1.TRADEAGREEMENTJOURNALNUMBER = next_tHashInput_17.TRADEAGREEMENTJOURNALNUMBER;
	Merge1.ITEMNUMBER = next_tHashInput_17.ITEMNUMBER;
	Merge1.PRICE = next_tHashInput_17.PRICE;
	Merge1.PRICECURRENCYCODE = next_tHashInput_17.PRICECURRENCYCODE;
	Merge1.PRICECUSTOMERGROUPCODE = next_tHashInput_17.PRICECUSTOMERGROUPCODE;
	Merge1.PRODUCTCOLORID = next_tHashInput_17.PRODUCTCOLORID;
	Merge1.PRODUCTSIZEID = next_tHashInput_17.PRODUCTSIZEID;
	Merge1.PRODUCTSTYLEID = next_tHashInput_17.PRODUCTSTYLEID;
	Merge1.QUANTITYUNITSYMBOL = next_tHashInput_17.QUANTITYUNITSYMBOL;
	Merge1.SEASON = next_tHashInput_17.SEASON;
	Merge1.COUNTRY = next_tHashInput_17.COUNTRY;
 



/**
 * [tHashInput_17 begin ] stop
 */
	
	/**
	 * [tHashInput_17 main ] start
	 */

	

	
	
	currentComponent="tHashInput_17";

	

 


	tos_count_tHashInput_17++;

/**
 * [tHashInput_17 main ] stop
 */
	
	/**
	 * [tHashInput_17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_17";

	

 



/**
 * [tHashInput_17 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_2 main ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	
//////////
 

// for output
			row11 = new row11Struct();
								
			row11.TRADEAGREEMENTJOURNALNUMBER = Merge1.TRADEAGREEMENTJOURNALNUMBER;								
			row11.ITEMNUMBER = Merge1.ITEMNUMBER;								
			row11.PRICE = Merge1.PRICE;								
			row11.PRICECURRENCYCODE = Merge1.PRICECURRENCYCODE;								
			row11.PRICECUSTOMERGROUPCODE = Merge1.PRICECUSTOMERGROUPCODE;								
			row11.PRODUCTCOLORID = Merge1.PRODUCTCOLORID;								
			row11.PRODUCTSIZEID = Merge1.PRODUCTSIZEID;								
			row11.PRODUCTSTYLEID = Merge1.PRODUCTSTYLEID;								
			row11.QUANTITYUNITSYMBOL = Merge1.QUANTITYUNITSYMBOL;								
			row11.SEASON = Merge1.SEASON;								
			row11.COUNTRY = Merge1.COUNTRY;			

			nb_line_tUnite_2++;

//////////
 


	tos_count_tUnite_2++;

/**
 * [tUnite_2 main ] stop
 */
	
	/**
	 * [tUnite_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	

 



/**
 * [tUnite_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_8 main ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_8 = false;
		  boolean mainRowRejected_tMap_8 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row12" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow12 = false;
       		  	    	
       		  	    	
 							row12Struct row12ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_8) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_8 = false;
								
                        		    		row12HashKey.itemnumber = row11.ITEMNUMBER ;
                        		    		
                        		    		row12HashKey.productcolorid = row11.PRODUCTCOLORID ;
                        		    		
                        		    		row12HashKey.productsizeid = row11.PRODUCTSIZEID ;
                        		    		
                        		    		row12HashKey.productstyleid = row11.PRODUCTSTYLEID ;
                        		    		

								
		                        	row12HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row12.lookup( row12HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row12.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_8 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row12 != null && tHash_Lookup_row12.getCount(row12HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row12' and it contains more one result from keys :  row12.itemnumber = '" + row12HashKey.itemnumber + "', row12.productcolorid = '" + row12HashKey.productcolorid + "', row12.productsizeid = '" + row12HashKey.productsizeid + "', row12.productstyleid = '" + row12HashKey.productstyleid + "'");
								} // G 071
							

							row12Struct row12 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row12Struct fromLookup_row12 = null;
							row12 = row12Default;
										 
							
								 
							
							
								if (tHash_Lookup_row12 !=null && tHash_Lookup_row12.hasNext()) { // G 099
								
							
								
								fromLookup_row12 = tHash_Lookup_row12.next();

							
							
								} // G 099
							
							

							if(fromLookup_row12 != null) {
								row12 = fromLookup_row12;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_8__Struct Var = Var__tMap_8;// ###############################
        // ###############################
        // # Output tables

row41 = null;

if(!rejectedInnerJoin_tMap_8 ) {

// # Output table : 'row41'
row41_tmp.TRADEAGREEMENTJOURNALNUMBER = row11.TRADEAGREEMENTJOURNALNUMBER ;
row41_tmp.ITEMNUMBER = row11.ITEMNUMBER ;
row41_tmp.PRICE = row11.PRICE ;
row41_tmp.PRICECURRENCYCODE = row11.PRICECURRENCYCODE ;
row41_tmp.PRICECUSTOMERGROUPCODE = row11.PRICECUSTOMERGROUPCODE ;
row41_tmp.PRODUCTCOLORID = row11.PRODUCTCOLORID ;
row41_tmp.PRODUCTSIZEID = row11.PRODUCTSIZEID ;
row41_tmp.PRODUCTSTYLEID = row11.PRODUCTSTYLEID ;
row41_tmp.QUANTITYUNITSYMBOL = row11.QUANTITYUNITSYMBOL ;
row41_tmp.SEASON = row11.SEASON ;
row41_tmp.COUNTRY = row11.COUNTRY ;
row41 = row41_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_8 = false;










 


	tos_count_tMap_8++;

/**
 * [tMap_8 main ] stop
 */
	
	/**
	 * [tMap_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_begin ] stop
 */
// Start of branch "row41"
if(row41 != null) { 



	
	/**
	 * [tMap_22 main ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_22 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_22 = false;
		  boolean mainRowRejected_tMap_22 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row9" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow9 = false;
       		  	    	
       		  	    	
 							row9Struct row9ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_22) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_22 = false;
								
                        		    		row9HashKey.SEASONCODE = row41.SEASON ;
                        		    		

								
		                        	row9HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row9.lookup( row9HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row9 != null && tHash_Lookup_row9.getCount(row9HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row9' and it contains more one result from keys :  row9.SEASONCODE = '" + row9HashKey.SEASONCODE + "'");
								} // G 071
							

							row9Struct row9 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row9Struct fromLookup_row9 = null;
							row9 = row9Default;
										 
							
								 
							
							
								if (tHash_Lookup_row9 !=null && tHash_Lookup_row9.hasNext()) { // G 099
								
							
								
								fromLookup_row9 = tHash_Lookup_row9.next();

							
							
								} // G 099
							
							

							if(fromLookup_row9 != null) {
								row9 = fromLookup_row9;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_22__Struct Var = Var__tMap_22;// ###############################
        // ###############################
        // # Output tables

sortie_map = null;


// # Output table : 'sortie_map'
sortie_map_tmp.ITEMNUMBER = row41.ITEMNUMBER ;
sortie_map_tmp.PRICE = row41.PRICE ;
sortie_map_tmp.PRICECURRENCYCODE = row41.PRICECURRENCYCODE ;
sortie_map_tmp.PRICECUSTOMERGROUPCODE = row41.PRICECUSTOMERGROUPCODE ;
sortie_map_tmp.PRODUCTCOLORID = row41.PRODUCTCOLORID ;
sortie_map_tmp.PRODUCTSIZEID = row41.PRODUCTSIZEID ;
sortie_map_tmp.PRODUCTSTYLEID = row41.PRODUCTSTYLEID ;
sortie_map_tmp.SEASON = row41.SEASON ;
sortie_map_tmp.COUNTRY = row41.COUNTRY ;
sortie_map_tmp.FromDate = row9.FromDate ;
sortie_map_tmp.ToDate = row9.ToDate ;
sortie_map = sortie_map_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_22 = false;










 


	tos_count_tMap_22++;

/**
 * [tMap_22 main ] stop
 */
	
	/**
	 * [tMap_22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

 



/**
 * [tMap_22 process_data_begin ] stop
 */
// Start of branch "sortie_map"
if(sortie_map != null) { 



	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row4" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow4 = false;
       		  	    	
       		  	    	
 							row4Struct row4ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		row4HashKey.SPLPRICETYPE = sortie_map.PRICECUSTOMERGROUPCODE ;
                        		    		
                        		    		row4HashKey.SPLSEASONCODE = sortie_map.SEASON ;
                        		    		
                        		    		row4HashKey.SPLCOUNTRYREGIONID = sortie_map.COUNTRY ;
                        		    		

								
		                        	row4HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row4.lookup( row4HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row4 != null && tHash_Lookup_row4.getCount(row4HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row4' and it contains more one result from keys :  row4.SPLPRICETYPE = '" + row4HashKey.SPLPRICETYPE + "', row4.SPLSEASONCODE = '" + row4HashKey.SPLSEASONCODE + "', row4.SPLCOUNTRYREGIONID = '" + row4HashKey.SPLCOUNTRYREGIONID + "'");
								} // G 071
							

							row4Struct row4 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row4Struct fromLookup_row4 = null;
							row4 = row4Default;
										 
							
								 
							
							
								if (tHash_Lookup_row4 !=null && tHash_Lookup_row4.hasNext()) { // G 099
								
							
								
								fromLookup_row4 = tHash_Lookup_row4.next();

							
							
								} // G 099
							
							

							if(fromLookup_row4 != null) {
								row4 = fromLookup_row4;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

sortie_add_linenumber = null;


// # Output table : 'sortie_add_linenumber'
sortie_add_linenumber_tmp.ITEMNUMBER = sortie_map.ITEMNUMBER ;
sortie_add_linenumber_tmp.PRICE = BigDecimal.valueOf(sortie_map.PRICE ).setScale(2,BigDecimal.ROUND_HALF_UP) ;
sortie_add_linenumber_tmp.PRICECURRENCYCODE = sortie_map.PRICECURRENCYCODE ;
sortie_add_linenumber_tmp.PRICECUSTOMERGROUPCODE = sortie_map.PRICECUSTOMERGROUPCODE ;
sortie_add_linenumber_tmp.PRODUCTCOLORID = sortie_map.PRODUCTCOLORID ;
sortie_add_linenumber_tmp.PRODUCTSIZEID = sortie_map.PRODUCTSIZEID ;
sortie_add_linenumber_tmp.PRODUCTSTYLEID = sortie_map.PRODUCTSTYLEID ;
sortie_add_linenumber_tmp.SEASON = sortie_map.SEASON ;
sortie_add_linenumber_tmp.COUNTRY = sortie_map.COUNTRY ;
sortie_add_linenumber_tmp.GROUPCODE = row4.GROUPCODE ;
sortie_add_linenumber_tmp.FromDate = sortie_map.FromDate ;
sortie_add_linenumber_tmp.ToDate = sortie_map.ToDate ;
sortie_add_linenumber = sortie_add_linenumber_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "sortie_add_linenumber"
if(sortie_add_linenumber != null) { 



	
	/**
	 * [tUniqRow_2 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	
row10 = null;			
if(sortie_add_linenumber.ITEMNUMBER == null){
	finder_tUniqRow_2.ITEMNUMBER = null;
}else{
	finder_tUniqRow_2.ITEMNUMBER = sortie_add_linenumber.ITEMNUMBER.toLowerCase();
}
if(sortie_add_linenumber.PRICECURRENCYCODE == null){
	finder_tUniqRow_2.PRICECURRENCYCODE = null;
}else{
	finder_tUniqRow_2.PRICECURRENCYCODE = sortie_add_linenumber.PRICECURRENCYCODE.toLowerCase();
}
if(sortie_add_linenumber.PRICECUSTOMERGROUPCODE == null){
	finder_tUniqRow_2.PRICECUSTOMERGROUPCODE = null;
}else{
	finder_tUniqRow_2.PRICECUSTOMERGROUPCODE = sortie_add_linenumber.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTCOLORID == null){
	finder_tUniqRow_2.PRODUCTCOLORID = null;
}else{
	finder_tUniqRow_2.PRODUCTCOLORID = sortie_add_linenumber.PRODUCTCOLORID.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTSIZEID == null){
	finder_tUniqRow_2.PRODUCTSIZEID = null;
}else{
	finder_tUniqRow_2.PRODUCTSIZEID = sortie_add_linenumber.PRODUCTSIZEID.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTSTYLEID == null){
	finder_tUniqRow_2.PRODUCTSTYLEID = null;
}else{
	finder_tUniqRow_2.PRODUCTSTYLEID = sortie_add_linenumber.PRODUCTSTYLEID.toLowerCase();
}
if(sortie_add_linenumber.SEASON == null){
	finder_tUniqRow_2.SEASON = null;
}else{
	finder_tUniqRow_2.SEASON = sortie_add_linenumber.SEASON.toLowerCase();
}
if(sortie_add_linenumber.GROUPCODE == null){
	finder_tUniqRow_2.GROUPCODE = null;
}else{
	finder_tUniqRow_2.GROUPCODE = sortie_add_linenumber.GROUPCODE.toLowerCase();
}	
finder_tUniqRow_2.hashCodeDirty = true;
if (!keystUniqRow_2.contains(finder_tUniqRow_2)) {
		KeyStruct_tUniqRow_2 new_tUniqRow_2 = new KeyStruct_tUniqRow_2();

		
if(sortie_add_linenumber.ITEMNUMBER == null){
	new_tUniqRow_2.ITEMNUMBER = null;
}else{
	new_tUniqRow_2.ITEMNUMBER = sortie_add_linenumber.ITEMNUMBER.toLowerCase();
}
if(sortie_add_linenumber.PRICECURRENCYCODE == null){
	new_tUniqRow_2.PRICECURRENCYCODE = null;
}else{
	new_tUniqRow_2.PRICECURRENCYCODE = sortie_add_linenumber.PRICECURRENCYCODE.toLowerCase();
}
if(sortie_add_linenumber.PRICECUSTOMERGROUPCODE == null){
	new_tUniqRow_2.PRICECUSTOMERGROUPCODE = null;
}else{
	new_tUniqRow_2.PRICECUSTOMERGROUPCODE = sortie_add_linenumber.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTCOLORID == null){
	new_tUniqRow_2.PRODUCTCOLORID = null;
}else{
	new_tUniqRow_2.PRODUCTCOLORID = sortie_add_linenumber.PRODUCTCOLORID.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTSIZEID == null){
	new_tUniqRow_2.PRODUCTSIZEID = null;
}else{
	new_tUniqRow_2.PRODUCTSIZEID = sortie_add_linenumber.PRODUCTSIZEID.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTSTYLEID == null){
	new_tUniqRow_2.PRODUCTSTYLEID = null;
}else{
	new_tUniqRow_2.PRODUCTSTYLEID = sortie_add_linenumber.PRODUCTSTYLEID.toLowerCase();
}
if(sortie_add_linenumber.SEASON == null){
	new_tUniqRow_2.SEASON = null;
}else{
	new_tUniqRow_2.SEASON = sortie_add_linenumber.SEASON.toLowerCase();
}
if(sortie_add_linenumber.GROUPCODE == null){
	new_tUniqRow_2.GROUPCODE = null;
}else{
	new_tUniqRow_2.GROUPCODE = sortie_add_linenumber.GROUPCODE.toLowerCase();
}
		
		keystUniqRow_2.add(new_tUniqRow_2);if(row10 == null){ 
	
	row10 = new row10Struct();
}row10.ITEMNUMBER = sortie_add_linenumber.ITEMNUMBER;			row10.PRICE = sortie_add_linenumber.PRICE;			row10.PRICECURRENCYCODE = sortie_add_linenumber.PRICECURRENCYCODE;			row10.PRICECUSTOMERGROUPCODE = sortie_add_linenumber.PRICECUSTOMERGROUPCODE;			row10.PRODUCTCOLORID = sortie_add_linenumber.PRODUCTCOLORID;			row10.PRODUCTSIZEID = sortie_add_linenumber.PRODUCTSIZEID;			row10.PRODUCTSTYLEID = sortie_add_linenumber.PRODUCTSTYLEID;			row10.SEASON = sortie_add_linenumber.SEASON;			row10.COUNTRY = sortie_add_linenumber.COUNTRY;			row10.GROUPCODE = sortie_add_linenumber.GROUPCODE;			row10.FromDate = sortie_add_linenumber.FromDate;			row10.ToDate = sortie_add_linenumber.ToDate;					
		nb_uniques_tUniqRow_2++;
	} else {
	  nb_duplicates_tUniqRow_2++;
	}

 


	tos_count_tUniqRow_2++;

/**
 * [tUniqRow_2 main ] stop
 */
	
	/**
	 * [tUniqRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

 



/**
 * [tUniqRow_2 process_data_begin ] stop
 */
// Start of branch "row10"
if(row10 != null) { 



	
	/**
	 * [tFileOutputDelimited_4 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	


                    StringBuilder sb_tFileOutputDelimited_4 = new StringBuilder();
                            if(row10.ITEMNUMBER != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.ITEMNUMBER
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRICE != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRICE.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRICECURRENCYCODE != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRICECURRENCYCODE
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRICECUSTOMERGROUPCODE != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRICECUSTOMERGROUPCODE
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRODUCTCOLORID != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRODUCTCOLORID
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRODUCTSIZEID != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRODUCTSIZEID
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRODUCTSTYLEID != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRODUCTSTYLEID
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.SEASON != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.SEASON
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.COUNTRY != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.COUNTRY
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.GROUPCODE != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.GROUPCODE
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.FromDate != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.FromDate
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.ToDate != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.ToDate
                        );
                            }
                    sb_tFileOutputDelimited_4.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_4);


                    nb_line_tFileOutputDelimited_4++;
                    resourceMap.put("nb_line_tFileOutputDelimited_4", nb_line_tFileOutputDelimited_4);

                        outtFileOutputDelimited_4.write(sb_tFileOutputDelimited_4.toString());




 


	tos_count_tFileOutputDelimited_4++;

/**
 * [tFileOutputDelimited_4 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	

 



/**
 * [tFileOutputDelimited_4 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	

 



/**
 * [tFileOutputDelimited_4 process_data_end ] stop
 */

} // End of branch "row10"




	
	/**
	 * [tUniqRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

 



/**
 * [tUniqRow_2 process_data_end ] stop
 */

} // End of branch "sortie_add_linenumber"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */

} // End of branch "sortie_map"




	
	/**
	 * [tMap_22 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

 



/**
 * [tMap_22 process_data_end ] stop
 */

} // End of branch "row41"




	
	/**
	 * [tMap_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_end ] stop
 */



	
	/**
	 * [tUnite_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	

 



/**
 * [tUnite_2 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_17 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_17";

	

 



/**
 * [tHashInput_17 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_17 end ] start
	 */

	

	
	
	currentComponent="tHashInput_17";

	
    

		
			nb_line_tHashInput_17++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_MASTERFILE_EXTRACT_PRICES_1_" + pid +"_tHashOutput_17");
	


	globalMap.put("tHashInput_17_NB_LINE", nb_line_tHashInput_17);       

 

ok_Hash.put("tHashInput_17", true);
end_Hash.put("tHashInput_17", System.currentTimeMillis());




/**
 * [tHashInput_17 end ] stop
 */
	
	/**
	 * [tHashInput_18 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_18", false);
		start_Hash.put("tHashInput_18", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_18";

	
		int tos_count_tHashInput_18 = 0;
		


int nb_line_tHashInput_18 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_18=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row63Struct> tHashFile_tHashInput_18 = mf_tHashInput_18.getAdvancedMemoryHashFile("tHashFile_MASTERFILE_EXTRACT_PRICES_1_" + pid +"_tHashOutput_18");
if(tHashFile_tHashInput_18==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row63Struct> iterator_tHashInput_18 = tHashFile_tHashInput_18.iterator();
while (iterator_tHashInput_18.hasNext()) {
    row63Struct next_tHashInput_18 = iterator_tHashInput_18.next();

	row66.TRADEAGREEMENTJOURNALNUMBER = next_tHashInput_18.TRADEAGREEMENTJOURNALNUMBER;
	row66.ITEMNUMBER = next_tHashInput_18.ITEMNUMBER;
	row66.PRICE = next_tHashInput_18.PRICE;
	row66.PRICECURRENCYCODE = next_tHashInput_18.PRICECURRENCYCODE;
	row66.PRICECUSTOMERGROUPCODE = next_tHashInput_18.PRICECUSTOMERGROUPCODE;
	row66.PRODUCTCOLORID = next_tHashInput_18.PRODUCTCOLORID;
	row66.PRODUCTSIZEID = next_tHashInput_18.PRODUCTSIZEID;
	row66.PRODUCTSTYLEID = next_tHashInput_18.PRODUCTSTYLEID;
	row66.QUANTITYUNITSYMBOL = next_tHashInput_18.QUANTITYUNITSYMBOL;
	row66.SEASON = next_tHashInput_18.SEASON;
	row66.COUNTRY = next_tHashInput_18.COUNTRY;
 



/**
 * [tHashInput_18 begin ] stop
 */
	
	/**
	 * [tHashInput_18 main ] start
	 */

	

	
	
	currentComponent="tHashInput_18";

	

 


	tos_count_tHashInput_18++;

/**
 * [tHashInput_18 main ] stop
 */
	
	/**
	 * [tHashInput_18 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_18";

	

 



/**
 * [tHashInput_18 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_2 main ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	
//////////
 

// for output
			row11 = new row11Struct();
								
			row11.TRADEAGREEMENTJOURNALNUMBER = row66.TRADEAGREEMENTJOURNALNUMBER;								
			row11.ITEMNUMBER = row66.ITEMNUMBER;								
			row11.PRICE = row66.PRICE;								
			row11.PRICECURRENCYCODE = row66.PRICECURRENCYCODE;								
			row11.PRICECUSTOMERGROUPCODE = row66.PRICECUSTOMERGROUPCODE;								
			row11.PRODUCTCOLORID = row66.PRODUCTCOLORID;								
			row11.PRODUCTSIZEID = row66.PRODUCTSIZEID;								
			row11.PRODUCTSTYLEID = row66.PRODUCTSTYLEID;								
			row11.QUANTITYUNITSYMBOL = row66.QUANTITYUNITSYMBOL;								
			row11.SEASON = row66.SEASON;								
			row11.COUNTRY = row66.COUNTRY;			

			nb_line_tUnite_2++;

//////////
 


	tos_count_tUnite_2++;

/**
 * [tUnite_2 main ] stop
 */
	
	/**
	 * [tUnite_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	

 



/**
 * [tUnite_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_8 main ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_8 = false;
		  boolean mainRowRejected_tMap_8 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row12" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow12 = false;
       		  	    	
       		  	    	
 							row12Struct row12ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_8) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_8 = false;
								
                        		    		row12HashKey.itemnumber = row11.ITEMNUMBER ;
                        		    		
                        		    		row12HashKey.productcolorid = row11.PRODUCTCOLORID ;
                        		    		
                        		    		row12HashKey.productsizeid = row11.PRODUCTSIZEID ;
                        		    		
                        		    		row12HashKey.productstyleid = row11.PRODUCTSTYLEID ;
                        		    		

								
		                        	row12HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row12.lookup( row12HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row12.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_8 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row12 != null && tHash_Lookup_row12.getCount(row12HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row12' and it contains more one result from keys :  row12.itemnumber = '" + row12HashKey.itemnumber + "', row12.productcolorid = '" + row12HashKey.productcolorid + "', row12.productsizeid = '" + row12HashKey.productsizeid + "', row12.productstyleid = '" + row12HashKey.productstyleid + "'");
								} // G 071
							

							row12Struct row12 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row12Struct fromLookup_row12 = null;
							row12 = row12Default;
										 
							
								 
							
							
								if (tHash_Lookup_row12 !=null && tHash_Lookup_row12.hasNext()) { // G 099
								
							
								
								fromLookup_row12 = tHash_Lookup_row12.next();

							
							
								} // G 099
							
							

							if(fromLookup_row12 != null) {
								row12 = fromLookup_row12;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_8__Struct Var = Var__tMap_8;// ###############################
        // ###############################
        // # Output tables

row41 = null;

if(!rejectedInnerJoin_tMap_8 ) {

// # Output table : 'row41'
row41_tmp.TRADEAGREEMENTJOURNALNUMBER = row11.TRADEAGREEMENTJOURNALNUMBER ;
row41_tmp.ITEMNUMBER = row11.ITEMNUMBER ;
row41_tmp.PRICE = row11.PRICE ;
row41_tmp.PRICECURRENCYCODE = row11.PRICECURRENCYCODE ;
row41_tmp.PRICECUSTOMERGROUPCODE = row11.PRICECUSTOMERGROUPCODE ;
row41_tmp.PRODUCTCOLORID = row11.PRODUCTCOLORID ;
row41_tmp.PRODUCTSIZEID = row11.PRODUCTSIZEID ;
row41_tmp.PRODUCTSTYLEID = row11.PRODUCTSTYLEID ;
row41_tmp.QUANTITYUNITSYMBOL = row11.QUANTITYUNITSYMBOL ;
row41_tmp.SEASON = row11.SEASON ;
row41_tmp.COUNTRY = row11.COUNTRY ;
row41 = row41_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_8 = false;










 


	tos_count_tMap_8++;

/**
 * [tMap_8 main ] stop
 */
	
	/**
	 * [tMap_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_begin ] stop
 */
// Start of branch "row41"
if(row41 != null) { 



	
	/**
	 * [tMap_22 main ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_22 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_22 = false;
		  boolean mainRowRejected_tMap_22 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row9" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow9 = false;
       		  	    	
       		  	    	
 							row9Struct row9ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_22) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_22 = false;
								
                        		    		row9HashKey.SEASONCODE = row41.SEASON ;
                        		    		

								
		                        	row9HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row9.lookup( row9HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row9 != null && tHash_Lookup_row9.getCount(row9HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row9' and it contains more one result from keys :  row9.SEASONCODE = '" + row9HashKey.SEASONCODE + "'");
								} // G 071
							

							row9Struct row9 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row9Struct fromLookup_row9 = null;
							row9 = row9Default;
										 
							
								 
							
							
								if (tHash_Lookup_row9 !=null && tHash_Lookup_row9.hasNext()) { // G 099
								
							
								
								fromLookup_row9 = tHash_Lookup_row9.next();

							
							
								} // G 099
							
							

							if(fromLookup_row9 != null) {
								row9 = fromLookup_row9;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_22__Struct Var = Var__tMap_22;// ###############################
        // ###############################
        // # Output tables

sortie_map = null;


// # Output table : 'sortie_map'
sortie_map_tmp.ITEMNUMBER = row41.ITEMNUMBER ;
sortie_map_tmp.PRICE = row41.PRICE ;
sortie_map_tmp.PRICECURRENCYCODE = row41.PRICECURRENCYCODE ;
sortie_map_tmp.PRICECUSTOMERGROUPCODE = row41.PRICECUSTOMERGROUPCODE ;
sortie_map_tmp.PRODUCTCOLORID = row41.PRODUCTCOLORID ;
sortie_map_tmp.PRODUCTSIZEID = row41.PRODUCTSIZEID ;
sortie_map_tmp.PRODUCTSTYLEID = row41.PRODUCTSTYLEID ;
sortie_map_tmp.SEASON = row41.SEASON ;
sortie_map_tmp.COUNTRY = row41.COUNTRY ;
sortie_map_tmp.FromDate = row9.FromDate ;
sortie_map_tmp.ToDate = row9.ToDate ;
sortie_map = sortie_map_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_22 = false;










 


	tos_count_tMap_22++;

/**
 * [tMap_22 main ] stop
 */
	
	/**
	 * [tMap_22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

 



/**
 * [tMap_22 process_data_begin ] stop
 */
// Start of branch "sortie_map"
if(sortie_map != null) { 



	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row4" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow4 = false;
       		  	    	
       		  	    	
 							row4Struct row4ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		row4HashKey.SPLPRICETYPE = sortie_map.PRICECUSTOMERGROUPCODE ;
                        		    		
                        		    		row4HashKey.SPLSEASONCODE = sortie_map.SEASON ;
                        		    		
                        		    		row4HashKey.SPLCOUNTRYREGIONID = sortie_map.COUNTRY ;
                        		    		

								
		                        	row4HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row4.lookup( row4HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row4 != null && tHash_Lookup_row4.getCount(row4HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row4' and it contains more one result from keys :  row4.SPLPRICETYPE = '" + row4HashKey.SPLPRICETYPE + "', row4.SPLSEASONCODE = '" + row4HashKey.SPLSEASONCODE + "', row4.SPLCOUNTRYREGIONID = '" + row4HashKey.SPLCOUNTRYREGIONID + "'");
								} // G 071
							

							row4Struct row4 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row4Struct fromLookup_row4 = null;
							row4 = row4Default;
										 
							
								 
							
							
								if (tHash_Lookup_row4 !=null && tHash_Lookup_row4.hasNext()) { // G 099
								
							
								
								fromLookup_row4 = tHash_Lookup_row4.next();

							
							
								} // G 099
							
							

							if(fromLookup_row4 != null) {
								row4 = fromLookup_row4;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

sortie_add_linenumber = null;


// # Output table : 'sortie_add_linenumber'
sortie_add_linenumber_tmp.ITEMNUMBER = sortie_map.ITEMNUMBER ;
sortie_add_linenumber_tmp.PRICE = BigDecimal.valueOf(sortie_map.PRICE ).setScale(2,BigDecimal.ROUND_HALF_UP) ;
sortie_add_linenumber_tmp.PRICECURRENCYCODE = sortie_map.PRICECURRENCYCODE ;
sortie_add_linenumber_tmp.PRICECUSTOMERGROUPCODE = sortie_map.PRICECUSTOMERGROUPCODE ;
sortie_add_linenumber_tmp.PRODUCTCOLORID = sortie_map.PRODUCTCOLORID ;
sortie_add_linenumber_tmp.PRODUCTSIZEID = sortie_map.PRODUCTSIZEID ;
sortie_add_linenumber_tmp.PRODUCTSTYLEID = sortie_map.PRODUCTSTYLEID ;
sortie_add_linenumber_tmp.SEASON = sortie_map.SEASON ;
sortie_add_linenumber_tmp.COUNTRY = sortie_map.COUNTRY ;
sortie_add_linenumber_tmp.GROUPCODE = row4.GROUPCODE ;
sortie_add_linenumber_tmp.FromDate = sortie_map.FromDate ;
sortie_add_linenumber_tmp.ToDate = sortie_map.ToDate ;
sortie_add_linenumber = sortie_add_linenumber_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "sortie_add_linenumber"
if(sortie_add_linenumber != null) { 



	
	/**
	 * [tUniqRow_2 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	
row10 = null;			
if(sortie_add_linenumber.ITEMNUMBER == null){
	finder_tUniqRow_2.ITEMNUMBER = null;
}else{
	finder_tUniqRow_2.ITEMNUMBER = sortie_add_linenumber.ITEMNUMBER.toLowerCase();
}
if(sortie_add_linenumber.PRICECURRENCYCODE == null){
	finder_tUniqRow_2.PRICECURRENCYCODE = null;
}else{
	finder_tUniqRow_2.PRICECURRENCYCODE = sortie_add_linenumber.PRICECURRENCYCODE.toLowerCase();
}
if(sortie_add_linenumber.PRICECUSTOMERGROUPCODE == null){
	finder_tUniqRow_2.PRICECUSTOMERGROUPCODE = null;
}else{
	finder_tUniqRow_2.PRICECUSTOMERGROUPCODE = sortie_add_linenumber.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTCOLORID == null){
	finder_tUniqRow_2.PRODUCTCOLORID = null;
}else{
	finder_tUniqRow_2.PRODUCTCOLORID = sortie_add_linenumber.PRODUCTCOLORID.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTSIZEID == null){
	finder_tUniqRow_2.PRODUCTSIZEID = null;
}else{
	finder_tUniqRow_2.PRODUCTSIZEID = sortie_add_linenumber.PRODUCTSIZEID.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTSTYLEID == null){
	finder_tUniqRow_2.PRODUCTSTYLEID = null;
}else{
	finder_tUniqRow_2.PRODUCTSTYLEID = sortie_add_linenumber.PRODUCTSTYLEID.toLowerCase();
}
if(sortie_add_linenumber.SEASON == null){
	finder_tUniqRow_2.SEASON = null;
}else{
	finder_tUniqRow_2.SEASON = sortie_add_linenumber.SEASON.toLowerCase();
}
if(sortie_add_linenumber.GROUPCODE == null){
	finder_tUniqRow_2.GROUPCODE = null;
}else{
	finder_tUniqRow_2.GROUPCODE = sortie_add_linenumber.GROUPCODE.toLowerCase();
}	
finder_tUniqRow_2.hashCodeDirty = true;
if (!keystUniqRow_2.contains(finder_tUniqRow_2)) {
		KeyStruct_tUniqRow_2 new_tUniqRow_2 = new KeyStruct_tUniqRow_2();

		
if(sortie_add_linenumber.ITEMNUMBER == null){
	new_tUniqRow_2.ITEMNUMBER = null;
}else{
	new_tUniqRow_2.ITEMNUMBER = sortie_add_linenumber.ITEMNUMBER.toLowerCase();
}
if(sortie_add_linenumber.PRICECURRENCYCODE == null){
	new_tUniqRow_2.PRICECURRENCYCODE = null;
}else{
	new_tUniqRow_2.PRICECURRENCYCODE = sortie_add_linenumber.PRICECURRENCYCODE.toLowerCase();
}
if(sortie_add_linenumber.PRICECUSTOMERGROUPCODE == null){
	new_tUniqRow_2.PRICECUSTOMERGROUPCODE = null;
}else{
	new_tUniqRow_2.PRICECUSTOMERGROUPCODE = sortie_add_linenumber.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTCOLORID == null){
	new_tUniqRow_2.PRODUCTCOLORID = null;
}else{
	new_tUniqRow_2.PRODUCTCOLORID = sortie_add_linenumber.PRODUCTCOLORID.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTSIZEID == null){
	new_tUniqRow_2.PRODUCTSIZEID = null;
}else{
	new_tUniqRow_2.PRODUCTSIZEID = sortie_add_linenumber.PRODUCTSIZEID.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTSTYLEID == null){
	new_tUniqRow_2.PRODUCTSTYLEID = null;
}else{
	new_tUniqRow_2.PRODUCTSTYLEID = sortie_add_linenumber.PRODUCTSTYLEID.toLowerCase();
}
if(sortie_add_linenumber.SEASON == null){
	new_tUniqRow_2.SEASON = null;
}else{
	new_tUniqRow_2.SEASON = sortie_add_linenumber.SEASON.toLowerCase();
}
if(sortie_add_linenumber.GROUPCODE == null){
	new_tUniqRow_2.GROUPCODE = null;
}else{
	new_tUniqRow_2.GROUPCODE = sortie_add_linenumber.GROUPCODE.toLowerCase();
}
		
		keystUniqRow_2.add(new_tUniqRow_2);if(row10 == null){ 
	
	row10 = new row10Struct();
}row10.ITEMNUMBER = sortie_add_linenumber.ITEMNUMBER;			row10.PRICE = sortie_add_linenumber.PRICE;			row10.PRICECURRENCYCODE = sortie_add_linenumber.PRICECURRENCYCODE;			row10.PRICECUSTOMERGROUPCODE = sortie_add_linenumber.PRICECUSTOMERGROUPCODE;			row10.PRODUCTCOLORID = sortie_add_linenumber.PRODUCTCOLORID;			row10.PRODUCTSIZEID = sortie_add_linenumber.PRODUCTSIZEID;			row10.PRODUCTSTYLEID = sortie_add_linenumber.PRODUCTSTYLEID;			row10.SEASON = sortie_add_linenumber.SEASON;			row10.COUNTRY = sortie_add_linenumber.COUNTRY;			row10.GROUPCODE = sortie_add_linenumber.GROUPCODE;			row10.FromDate = sortie_add_linenumber.FromDate;			row10.ToDate = sortie_add_linenumber.ToDate;					
		nb_uniques_tUniqRow_2++;
	} else {
	  nb_duplicates_tUniqRow_2++;
	}

 


	tos_count_tUniqRow_2++;

/**
 * [tUniqRow_2 main ] stop
 */
	
	/**
	 * [tUniqRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

 



/**
 * [tUniqRow_2 process_data_begin ] stop
 */
// Start of branch "row10"
if(row10 != null) { 



	
	/**
	 * [tFileOutputDelimited_4 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	


                    StringBuilder sb_tFileOutputDelimited_4 = new StringBuilder();
                            if(row10.ITEMNUMBER != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.ITEMNUMBER
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRICE != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRICE.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRICECURRENCYCODE != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRICECURRENCYCODE
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRICECUSTOMERGROUPCODE != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRICECUSTOMERGROUPCODE
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRODUCTCOLORID != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRODUCTCOLORID
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRODUCTSIZEID != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRODUCTSIZEID
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRODUCTSTYLEID != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRODUCTSTYLEID
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.SEASON != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.SEASON
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.COUNTRY != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.COUNTRY
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.GROUPCODE != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.GROUPCODE
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.FromDate != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.FromDate
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.ToDate != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.ToDate
                        );
                            }
                    sb_tFileOutputDelimited_4.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_4);


                    nb_line_tFileOutputDelimited_4++;
                    resourceMap.put("nb_line_tFileOutputDelimited_4", nb_line_tFileOutputDelimited_4);

                        outtFileOutputDelimited_4.write(sb_tFileOutputDelimited_4.toString());




 


	tos_count_tFileOutputDelimited_4++;

/**
 * [tFileOutputDelimited_4 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	

 



/**
 * [tFileOutputDelimited_4 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	

 



/**
 * [tFileOutputDelimited_4 process_data_end ] stop
 */

} // End of branch "row10"




	
	/**
	 * [tUniqRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

 



/**
 * [tUniqRow_2 process_data_end ] stop
 */

} // End of branch "sortie_add_linenumber"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */

} // End of branch "sortie_map"




	
	/**
	 * [tMap_22 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

 



/**
 * [tMap_22 process_data_end ] stop
 */

} // End of branch "row41"




	
	/**
	 * [tMap_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_end ] stop
 */



	
	/**
	 * [tUnite_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	

 



/**
 * [tUnite_2 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_18 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_18";

	

 



/**
 * [tHashInput_18 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_18 end ] start
	 */

	

	
	
	currentComponent="tHashInput_18";

	
    

		
			nb_line_tHashInput_18++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_MASTERFILE_EXTRACT_PRICES_1_" + pid +"_tHashOutput_18");
	


	globalMap.put("tHashInput_18_NB_LINE", nb_line_tHashInput_18);       

 

ok_Hash.put("tHashInput_18", true);
end_Hash.put("tHashInput_18", System.currentTimeMillis());




/**
 * [tHashInput_18 end ] stop
 */
	
	/**
	 * [tHashInput_19 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_19", false);
		start_Hash.put("tHashInput_19", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_19";

	
		int tos_count_tHashInput_19 = 0;
		


int nb_line_tHashInput_19 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_19=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row67Struct> tHashFile_tHashInput_19 = mf_tHashInput_19.getAdvancedMemoryHashFile("tHashFile_MASTERFILE_EXTRACT_PRICES_1_" + pid +"_tHashOutput_19");
if(tHashFile_tHashInput_19==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row67Struct> iterator_tHashInput_19 = tHashFile_tHashInput_19.iterator();
while (iterator_tHashInput_19.hasNext()) {
    row67Struct next_tHashInput_19 = iterator_tHashInput_19.next();

	row71.TRADEAGREEMENTJOURNALNUMBER = next_tHashInput_19.TRADEAGREEMENTJOURNALNUMBER;
	row71.ITEMNUMBER = next_tHashInput_19.ITEMNUMBER;
	row71.PRICE = next_tHashInput_19.PRICE;
	row71.PRICECURRENCYCODE = next_tHashInput_19.PRICECURRENCYCODE;
	row71.PRICECUSTOMERGROUPCODE = next_tHashInput_19.PRICECUSTOMERGROUPCODE;
	row71.PRODUCTCOLORID = next_tHashInput_19.PRODUCTCOLORID;
	row71.PRODUCTSIZEID = next_tHashInput_19.PRODUCTSIZEID;
	row71.PRODUCTSTYLEID = next_tHashInput_19.PRODUCTSTYLEID;
	row71.QUANTITYUNITSYMBOL = next_tHashInput_19.QUANTITYUNITSYMBOL;
	row71.SEASON = next_tHashInput_19.SEASON;
	row71.COUNTRY = next_tHashInput_19.COUNTRY;
 



/**
 * [tHashInput_19 begin ] stop
 */
	
	/**
	 * [tHashInput_19 main ] start
	 */

	

	
	
	currentComponent="tHashInput_19";

	

 


	tos_count_tHashInput_19++;

/**
 * [tHashInput_19 main ] stop
 */
	
	/**
	 * [tHashInput_19 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_19";

	

 



/**
 * [tHashInput_19 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_2 main ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	
//////////
 

// for output
			row11 = new row11Struct();
								
			row11.TRADEAGREEMENTJOURNALNUMBER = row71.TRADEAGREEMENTJOURNALNUMBER;								
			row11.ITEMNUMBER = row71.ITEMNUMBER;								
			row11.PRICE = row71.PRICE;								
			row11.PRICECURRENCYCODE = row71.PRICECURRENCYCODE;								
			row11.PRICECUSTOMERGROUPCODE = row71.PRICECUSTOMERGROUPCODE;								
			row11.PRODUCTCOLORID = row71.PRODUCTCOLORID;								
			row11.PRODUCTSIZEID = row71.PRODUCTSIZEID;								
			row11.PRODUCTSTYLEID = row71.PRODUCTSTYLEID;								
			row11.QUANTITYUNITSYMBOL = row71.QUANTITYUNITSYMBOL;								
			row11.SEASON = row71.SEASON;								
			row11.COUNTRY = row71.COUNTRY;			

			nb_line_tUnite_2++;

//////////
 


	tos_count_tUnite_2++;

/**
 * [tUnite_2 main ] stop
 */
	
	/**
	 * [tUnite_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	

 



/**
 * [tUnite_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_8 main ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_8 = false;
		  boolean mainRowRejected_tMap_8 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row12" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow12 = false;
       		  	    	
       		  	    	
 							row12Struct row12ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_8) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_8 = false;
								
                        		    		row12HashKey.itemnumber = row11.ITEMNUMBER ;
                        		    		
                        		    		row12HashKey.productcolorid = row11.PRODUCTCOLORID ;
                        		    		
                        		    		row12HashKey.productsizeid = row11.PRODUCTSIZEID ;
                        		    		
                        		    		row12HashKey.productstyleid = row11.PRODUCTSTYLEID ;
                        		    		

								
		                        	row12HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row12.lookup( row12HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row12.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_8 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row12 != null && tHash_Lookup_row12.getCount(row12HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row12' and it contains more one result from keys :  row12.itemnumber = '" + row12HashKey.itemnumber + "', row12.productcolorid = '" + row12HashKey.productcolorid + "', row12.productsizeid = '" + row12HashKey.productsizeid + "', row12.productstyleid = '" + row12HashKey.productstyleid + "'");
								} // G 071
							

							row12Struct row12 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row12Struct fromLookup_row12 = null;
							row12 = row12Default;
										 
							
								 
							
							
								if (tHash_Lookup_row12 !=null && tHash_Lookup_row12.hasNext()) { // G 099
								
							
								
								fromLookup_row12 = tHash_Lookup_row12.next();

							
							
								} // G 099
							
							

							if(fromLookup_row12 != null) {
								row12 = fromLookup_row12;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_8__Struct Var = Var__tMap_8;// ###############################
        // ###############################
        // # Output tables

row41 = null;

if(!rejectedInnerJoin_tMap_8 ) {

// # Output table : 'row41'
row41_tmp.TRADEAGREEMENTJOURNALNUMBER = row11.TRADEAGREEMENTJOURNALNUMBER ;
row41_tmp.ITEMNUMBER = row11.ITEMNUMBER ;
row41_tmp.PRICE = row11.PRICE ;
row41_tmp.PRICECURRENCYCODE = row11.PRICECURRENCYCODE ;
row41_tmp.PRICECUSTOMERGROUPCODE = row11.PRICECUSTOMERGROUPCODE ;
row41_tmp.PRODUCTCOLORID = row11.PRODUCTCOLORID ;
row41_tmp.PRODUCTSIZEID = row11.PRODUCTSIZEID ;
row41_tmp.PRODUCTSTYLEID = row11.PRODUCTSTYLEID ;
row41_tmp.QUANTITYUNITSYMBOL = row11.QUANTITYUNITSYMBOL ;
row41_tmp.SEASON = row11.SEASON ;
row41_tmp.COUNTRY = row11.COUNTRY ;
row41 = row41_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_8 = false;










 


	tos_count_tMap_8++;

/**
 * [tMap_8 main ] stop
 */
	
	/**
	 * [tMap_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_begin ] stop
 */
// Start of branch "row41"
if(row41 != null) { 



	
	/**
	 * [tMap_22 main ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_22 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_22 = false;
		  boolean mainRowRejected_tMap_22 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row9" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow9 = false;
       		  	    	
       		  	    	
 							row9Struct row9ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_22) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_22 = false;
								
                        		    		row9HashKey.SEASONCODE = row41.SEASON ;
                        		    		

								
		                        	row9HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row9.lookup( row9HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row9 != null && tHash_Lookup_row9.getCount(row9HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row9' and it contains more one result from keys :  row9.SEASONCODE = '" + row9HashKey.SEASONCODE + "'");
								} // G 071
							

							row9Struct row9 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row9Struct fromLookup_row9 = null;
							row9 = row9Default;
										 
							
								 
							
							
								if (tHash_Lookup_row9 !=null && tHash_Lookup_row9.hasNext()) { // G 099
								
							
								
								fromLookup_row9 = tHash_Lookup_row9.next();

							
							
								} // G 099
							
							

							if(fromLookup_row9 != null) {
								row9 = fromLookup_row9;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_22__Struct Var = Var__tMap_22;// ###############################
        // ###############################
        // # Output tables

sortie_map = null;


// # Output table : 'sortie_map'
sortie_map_tmp.ITEMNUMBER = row41.ITEMNUMBER ;
sortie_map_tmp.PRICE = row41.PRICE ;
sortie_map_tmp.PRICECURRENCYCODE = row41.PRICECURRENCYCODE ;
sortie_map_tmp.PRICECUSTOMERGROUPCODE = row41.PRICECUSTOMERGROUPCODE ;
sortie_map_tmp.PRODUCTCOLORID = row41.PRODUCTCOLORID ;
sortie_map_tmp.PRODUCTSIZEID = row41.PRODUCTSIZEID ;
sortie_map_tmp.PRODUCTSTYLEID = row41.PRODUCTSTYLEID ;
sortie_map_tmp.SEASON = row41.SEASON ;
sortie_map_tmp.COUNTRY = row41.COUNTRY ;
sortie_map_tmp.FromDate = row9.FromDate ;
sortie_map_tmp.ToDate = row9.ToDate ;
sortie_map = sortie_map_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_22 = false;










 


	tos_count_tMap_22++;

/**
 * [tMap_22 main ] stop
 */
	
	/**
	 * [tMap_22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

 



/**
 * [tMap_22 process_data_begin ] stop
 */
// Start of branch "sortie_map"
if(sortie_map != null) { 



	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row4" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow4 = false;
       		  	    	
       		  	    	
 							row4Struct row4ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		row4HashKey.SPLPRICETYPE = sortie_map.PRICECUSTOMERGROUPCODE ;
                        		    		
                        		    		row4HashKey.SPLSEASONCODE = sortie_map.SEASON ;
                        		    		
                        		    		row4HashKey.SPLCOUNTRYREGIONID = sortie_map.COUNTRY ;
                        		    		

								
		                        	row4HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row4.lookup( row4HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row4 != null && tHash_Lookup_row4.getCount(row4HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row4' and it contains more one result from keys :  row4.SPLPRICETYPE = '" + row4HashKey.SPLPRICETYPE + "', row4.SPLSEASONCODE = '" + row4HashKey.SPLSEASONCODE + "', row4.SPLCOUNTRYREGIONID = '" + row4HashKey.SPLCOUNTRYREGIONID + "'");
								} // G 071
							

							row4Struct row4 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row4Struct fromLookup_row4 = null;
							row4 = row4Default;
										 
							
								 
							
							
								if (tHash_Lookup_row4 !=null && tHash_Lookup_row4.hasNext()) { // G 099
								
							
								
								fromLookup_row4 = tHash_Lookup_row4.next();

							
							
								} // G 099
							
							

							if(fromLookup_row4 != null) {
								row4 = fromLookup_row4;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

sortie_add_linenumber = null;


// # Output table : 'sortie_add_linenumber'
sortie_add_linenumber_tmp.ITEMNUMBER = sortie_map.ITEMNUMBER ;
sortie_add_linenumber_tmp.PRICE = BigDecimal.valueOf(sortie_map.PRICE ).setScale(2,BigDecimal.ROUND_HALF_UP) ;
sortie_add_linenumber_tmp.PRICECURRENCYCODE = sortie_map.PRICECURRENCYCODE ;
sortie_add_linenumber_tmp.PRICECUSTOMERGROUPCODE = sortie_map.PRICECUSTOMERGROUPCODE ;
sortie_add_linenumber_tmp.PRODUCTCOLORID = sortie_map.PRODUCTCOLORID ;
sortie_add_linenumber_tmp.PRODUCTSIZEID = sortie_map.PRODUCTSIZEID ;
sortie_add_linenumber_tmp.PRODUCTSTYLEID = sortie_map.PRODUCTSTYLEID ;
sortie_add_linenumber_tmp.SEASON = sortie_map.SEASON ;
sortie_add_linenumber_tmp.COUNTRY = sortie_map.COUNTRY ;
sortie_add_linenumber_tmp.GROUPCODE = row4.GROUPCODE ;
sortie_add_linenumber_tmp.FromDate = sortie_map.FromDate ;
sortie_add_linenumber_tmp.ToDate = sortie_map.ToDate ;
sortie_add_linenumber = sortie_add_linenumber_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "sortie_add_linenumber"
if(sortie_add_linenumber != null) { 



	
	/**
	 * [tUniqRow_2 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	
row10 = null;			
if(sortie_add_linenumber.ITEMNUMBER == null){
	finder_tUniqRow_2.ITEMNUMBER = null;
}else{
	finder_tUniqRow_2.ITEMNUMBER = sortie_add_linenumber.ITEMNUMBER.toLowerCase();
}
if(sortie_add_linenumber.PRICECURRENCYCODE == null){
	finder_tUniqRow_2.PRICECURRENCYCODE = null;
}else{
	finder_tUniqRow_2.PRICECURRENCYCODE = sortie_add_linenumber.PRICECURRENCYCODE.toLowerCase();
}
if(sortie_add_linenumber.PRICECUSTOMERGROUPCODE == null){
	finder_tUniqRow_2.PRICECUSTOMERGROUPCODE = null;
}else{
	finder_tUniqRow_2.PRICECUSTOMERGROUPCODE = sortie_add_linenumber.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTCOLORID == null){
	finder_tUniqRow_2.PRODUCTCOLORID = null;
}else{
	finder_tUniqRow_2.PRODUCTCOLORID = sortie_add_linenumber.PRODUCTCOLORID.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTSIZEID == null){
	finder_tUniqRow_2.PRODUCTSIZEID = null;
}else{
	finder_tUniqRow_2.PRODUCTSIZEID = sortie_add_linenumber.PRODUCTSIZEID.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTSTYLEID == null){
	finder_tUniqRow_2.PRODUCTSTYLEID = null;
}else{
	finder_tUniqRow_2.PRODUCTSTYLEID = sortie_add_linenumber.PRODUCTSTYLEID.toLowerCase();
}
if(sortie_add_linenumber.SEASON == null){
	finder_tUniqRow_2.SEASON = null;
}else{
	finder_tUniqRow_2.SEASON = sortie_add_linenumber.SEASON.toLowerCase();
}
if(sortie_add_linenumber.GROUPCODE == null){
	finder_tUniqRow_2.GROUPCODE = null;
}else{
	finder_tUniqRow_2.GROUPCODE = sortie_add_linenumber.GROUPCODE.toLowerCase();
}	
finder_tUniqRow_2.hashCodeDirty = true;
if (!keystUniqRow_2.contains(finder_tUniqRow_2)) {
		KeyStruct_tUniqRow_2 new_tUniqRow_2 = new KeyStruct_tUniqRow_2();

		
if(sortie_add_linenumber.ITEMNUMBER == null){
	new_tUniqRow_2.ITEMNUMBER = null;
}else{
	new_tUniqRow_2.ITEMNUMBER = sortie_add_linenumber.ITEMNUMBER.toLowerCase();
}
if(sortie_add_linenumber.PRICECURRENCYCODE == null){
	new_tUniqRow_2.PRICECURRENCYCODE = null;
}else{
	new_tUniqRow_2.PRICECURRENCYCODE = sortie_add_linenumber.PRICECURRENCYCODE.toLowerCase();
}
if(sortie_add_linenumber.PRICECUSTOMERGROUPCODE == null){
	new_tUniqRow_2.PRICECUSTOMERGROUPCODE = null;
}else{
	new_tUniqRow_2.PRICECUSTOMERGROUPCODE = sortie_add_linenumber.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTCOLORID == null){
	new_tUniqRow_2.PRODUCTCOLORID = null;
}else{
	new_tUniqRow_2.PRODUCTCOLORID = sortie_add_linenumber.PRODUCTCOLORID.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTSIZEID == null){
	new_tUniqRow_2.PRODUCTSIZEID = null;
}else{
	new_tUniqRow_2.PRODUCTSIZEID = sortie_add_linenumber.PRODUCTSIZEID.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTSTYLEID == null){
	new_tUniqRow_2.PRODUCTSTYLEID = null;
}else{
	new_tUniqRow_2.PRODUCTSTYLEID = sortie_add_linenumber.PRODUCTSTYLEID.toLowerCase();
}
if(sortie_add_linenumber.SEASON == null){
	new_tUniqRow_2.SEASON = null;
}else{
	new_tUniqRow_2.SEASON = sortie_add_linenumber.SEASON.toLowerCase();
}
if(sortie_add_linenumber.GROUPCODE == null){
	new_tUniqRow_2.GROUPCODE = null;
}else{
	new_tUniqRow_2.GROUPCODE = sortie_add_linenumber.GROUPCODE.toLowerCase();
}
		
		keystUniqRow_2.add(new_tUniqRow_2);if(row10 == null){ 
	
	row10 = new row10Struct();
}row10.ITEMNUMBER = sortie_add_linenumber.ITEMNUMBER;			row10.PRICE = sortie_add_linenumber.PRICE;			row10.PRICECURRENCYCODE = sortie_add_linenumber.PRICECURRENCYCODE;			row10.PRICECUSTOMERGROUPCODE = sortie_add_linenumber.PRICECUSTOMERGROUPCODE;			row10.PRODUCTCOLORID = sortie_add_linenumber.PRODUCTCOLORID;			row10.PRODUCTSIZEID = sortie_add_linenumber.PRODUCTSIZEID;			row10.PRODUCTSTYLEID = sortie_add_linenumber.PRODUCTSTYLEID;			row10.SEASON = sortie_add_linenumber.SEASON;			row10.COUNTRY = sortie_add_linenumber.COUNTRY;			row10.GROUPCODE = sortie_add_linenumber.GROUPCODE;			row10.FromDate = sortie_add_linenumber.FromDate;			row10.ToDate = sortie_add_linenumber.ToDate;					
		nb_uniques_tUniqRow_2++;
	} else {
	  nb_duplicates_tUniqRow_2++;
	}

 


	tos_count_tUniqRow_2++;

/**
 * [tUniqRow_2 main ] stop
 */
	
	/**
	 * [tUniqRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

 



/**
 * [tUniqRow_2 process_data_begin ] stop
 */
// Start of branch "row10"
if(row10 != null) { 



	
	/**
	 * [tFileOutputDelimited_4 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	


                    StringBuilder sb_tFileOutputDelimited_4 = new StringBuilder();
                            if(row10.ITEMNUMBER != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.ITEMNUMBER
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRICE != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRICE.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRICECURRENCYCODE != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRICECURRENCYCODE
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRICECUSTOMERGROUPCODE != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRICECUSTOMERGROUPCODE
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRODUCTCOLORID != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRODUCTCOLORID
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRODUCTSIZEID != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRODUCTSIZEID
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRODUCTSTYLEID != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRODUCTSTYLEID
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.SEASON != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.SEASON
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.COUNTRY != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.COUNTRY
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.GROUPCODE != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.GROUPCODE
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.FromDate != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.FromDate
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.ToDate != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.ToDate
                        );
                            }
                    sb_tFileOutputDelimited_4.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_4);


                    nb_line_tFileOutputDelimited_4++;
                    resourceMap.put("nb_line_tFileOutputDelimited_4", nb_line_tFileOutputDelimited_4);

                        outtFileOutputDelimited_4.write(sb_tFileOutputDelimited_4.toString());




 


	tos_count_tFileOutputDelimited_4++;

/**
 * [tFileOutputDelimited_4 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	

 



/**
 * [tFileOutputDelimited_4 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	

 



/**
 * [tFileOutputDelimited_4 process_data_end ] stop
 */

} // End of branch "row10"




	
	/**
	 * [tUniqRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

 



/**
 * [tUniqRow_2 process_data_end ] stop
 */

} // End of branch "sortie_add_linenumber"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */

} // End of branch "sortie_map"




	
	/**
	 * [tMap_22 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

 



/**
 * [tMap_22 process_data_end ] stop
 */

} // End of branch "row41"




	
	/**
	 * [tMap_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_end ] stop
 */



	
	/**
	 * [tUnite_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	

 



/**
 * [tUnite_2 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_19 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_19";

	

 



/**
 * [tHashInput_19 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_19 end ] start
	 */

	

	
	
	currentComponent="tHashInput_19";

	
    

		
			nb_line_tHashInput_19++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_MASTERFILE_EXTRACT_PRICES_1_" + pid +"_tHashOutput_19");
	


	globalMap.put("tHashInput_19_NB_LINE", nb_line_tHashInput_19);       

 

ok_Hash.put("tHashInput_19", true);
end_Hash.put("tHashInput_19", System.currentTimeMillis());




/**
 * [tHashInput_19 end ] stop
 */
	
	/**
	 * [tHashInput_20 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_20", false);
		start_Hash.put("tHashInput_20", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_20";

	
		int tos_count_tHashInput_20 = 0;
		


int nb_line_tHashInput_20 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_20=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<Main1Struct> tHashFile_tHashInput_20 = mf_tHashInput_20.getAdvancedMemoryHashFile("tHashFile_MASTERFILE_EXTRACT_PRICES_1_" + pid +"_tHashOutput_20");
if(tHashFile_tHashInput_20==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<Main1Struct> iterator_tHashInput_20 = tHashFile_tHashInput_20.iterator();
while (iterator_tHashInput_20.hasNext()) {
    Main1Struct next_tHashInput_20 = iterator_tHashInput_20.next();

	row72.TRADEAGREEMENTJOURNALNUMBER = next_tHashInput_20.TRADEAGREEMENTJOURNALNUMBER;
	row72.ITEMNUMBER = next_tHashInput_20.ITEMNUMBER;
	row72.PRICE = next_tHashInput_20.PRICE;
	row72.PRICECURRENCYCODE = next_tHashInput_20.PRICECURRENCYCODE;
	row72.PRICECUSTOMERGROUPCODE = next_tHashInput_20.PRICECUSTOMERGROUPCODE;
	row72.PRODUCTCOLORID = next_tHashInput_20.PRODUCTCOLORID;
	row72.PRODUCTSIZEID = next_tHashInput_20.PRODUCTSIZEID;
	row72.PRODUCTSTYLEID = next_tHashInput_20.PRODUCTSTYLEID;
	row72.QUANTITYUNITSYMBOL = next_tHashInput_20.QUANTITYUNITSYMBOL;
	row72.SEASON = next_tHashInput_20.SEASON;
	row72.COUNTRY = next_tHashInput_20.COUNTRY;
 



/**
 * [tHashInput_20 begin ] stop
 */
	
	/**
	 * [tHashInput_20 main ] start
	 */

	

	
	
	currentComponent="tHashInput_20";

	

 


	tos_count_tHashInput_20++;

/**
 * [tHashInput_20 main ] stop
 */
	
	/**
	 * [tHashInput_20 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_20";

	

 



/**
 * [tHashInput_20 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_2 main ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	
//////////
 

// for output
			row11 = new row11Struct();
								
			row11.TRADEAGREEMENTJOURNALNUMBER = row72.TRADEAGREEMENTJOURNALNUMBER;								
			row11.ITEMNUMBER = row72.ITEMNUMBER;								
			row11.PRICE = row72.PRICE;								
			row11.PRICECURRENCYCODE = row72.PRICECURRENCYCODE;								
			row11.PRICECUSTOMERGROUPCODE = row72.PRICECUSTOMERGROUPCODE;								
			row11.PRODUCTCOLORID = row72.PRODUCTCOLORID;								
			row11.PRODUCTSIZEID = row72.PRODUCTSIZEID;								
			row11.PRODUCTSTYLEID = row72.PRODUCTSTYLEID;								
			row11.QUANTITYUNITSYMBOL = row72.QUANTITYUNITSYMBOL;								
			row11.SEASON = row72.SEASON;								
			row11.COUNTRY = row72.COUNTRY;			

			nb_line_tUnite_2++;

//////////
 


	tos_count_tUnite_2++;

/**
 * [tUnite_2 main ] stop
 */
	
	/**
	 * [tUnite_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	

 



/**
 * [tUnite_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_8 main ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_8 = false;
		  boolean mainRowRejected_tMap_8 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row12" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow12 = false;
       		  	    	
       		  	    	
 							row12Struct row12ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_8) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_8 = false;
								
                        		    		row12HashKey.itemnumber = row11.ITEMNUMBER ;
                        		    		
                        		    		row12HashKey.productcolorid = row11.PRODUCTCOLORID ;
                        		    		
                        		    		row12HashKey.productsizeid = row11.PRODUCTSIZEID ;
                        		    		
                        		    		row12HashKey.productstyleid = row11.PRODUCTSTYLEID ;
                        		    		

								
		                        	row12HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row12.lookup( row12HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row12.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_8 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row12 != null && tHash_Lookup_row12.getCount(row12HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row12' and it contains more one result from keys :  row12.itemnumber = '" + row12HashKey.itemnumber + "', row12.productcolorid = '" + row12HashKey.productcolorid + "', row12.productsizeid = '" + row12HashKey.productsizeid + "', row12.productstyleid = '" + row12HashKey.productstyleid + "'");
								} // G 071
							

							row12Struct row12 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row12Struct fromLookup_row12 = null;
							row12 = row12Default;
										 
							
								 
							
							
								if (tHash_Lookup_row12 !=null && tHash_Lookup_row12.hasNext()) { // G 099
								
							
								
								fromLookup_row12 = tHash_Lookup_row12.next();

							
							
								} // G 099
							
							

							if(fromLookup_row12 != null) {
								row12 = fromLookup_row12;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_8__Struct Var = Var__tMap_8;// ###############################
        // ###############################
        // # Output tables

row41 = null;

if(!rejectedInnerJoin_tMap_8 ) {

// # Output table : 'row41'
row41_tmp.TRADEAGREEMENTJOURNALNUMBER = row11.TRADEAGREEMENTJOURNALNUMBER ;
row41_tmp.ITEMNUMBER = row11.ITEMNUMBER ;
row41_tmp.PRICE = row11.PRICE ;
row41_tmp.PRICECURRENCYCODE = row11.PRICECURRENCYCODE ;
row41_tmp.PRICECUSTOMERGROUPCODE = row11.PRICECUSTOMERGROUPCODE ;
row41_tmp.PRODUCTCOLORID = row11.PRODUCTCOLORID ;
row41_tmp.PRODUCTSIZEID = row11.PRODUCTSIZEID ;
row41_tmp.PRODUCTSTYLEID = row11.PRODUCTSTYLEID ;
row41_tmp.QUANTITYUNITSYMBOL = row11.QUANTITYUNITSYMBOL ;
row41_tmp.SEASON = row11.SEASON ;
row41_tmp.COUNTRY = row11.COUNTRY ;
row41 = row41_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_8 = false;










 


	tos_count_tMap_8++;

/**
 * [tMap_8 main ] stop
 */
	
	/**
	 * [tMap_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_begin ] stop
 */
// Start of branch "row41"
if(row41 != null) { 



	
	/**
	 * [tMap_22 main ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_22 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_22 = false;
		  boolean mainRowRejected_tMap_22 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row9" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow9 = false;
       		  	    	
       		  	    	
 							row9Struct row9ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_22) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_22 = false;
								
                        		    		row9HashKey.SEASONCODE = row41.SEASON ;
                        		    		

								
		                        	row9HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row9.lookup( row9HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row9 != null && tHash_Lookup_row9.getCount(row9HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row9' and it contains more one result from keys :  row9.SEASONCODE = '" + row9HashKey.SEASONCODE + "'");
								} // G 071
							

							row9Struct row9 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row9Struct fromLookup_row9 = null;
							row9 = row9Default;
										 
							
								 
							
							
								if (tHash_Lookup_row9 !=null && tHash_Lookup_row9.hasNext()) { // G 099
								
							
								
								fromLookup_row9 = tHash_Lookup_row9.next();

							
							
								} // G 099
							
							

							if(fromLookup_row9 != null) {
								row9 = fromLookup_row9;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_22__Struct Var = Var__tMap_22;// ###############################
        // ###############################
        // # Output tables

sortie_map = null;


// # Output table : 'sortie_map'
sortie_map_tmp.ITEMNUMBER = row41.ITEMNUMBER ;
sortie_map_tmp.PRICE = row41.PRICE ;
sortie_map_tmp.PRICECURRENCYCODE = row41.PRICECURRENCYCODE ;
sortie_map_tmp.PRICECUSTOMERGROUPCODE = row41.PRICECUSTOMERGROUPCODE ;
sortie_map_tmp.PRODUCTCOLORID = row41.PRODUCTCOLORID ;
sortie_map_tmp.PRODUCTSIZEID = row41.PRODUCTSIZEID ;
sortie_map_tmp.PRODUCTSTYLEID = row41.PRODUCTSTYLEID ;
sortie_map_tmp.SEASON = row41.SEASON ;
sortie_map_tmp.COUNTRY = row41.COUNTRY ;
sortie_map_tmp.FromDate = row9.FromDate ;
sortie_map_tmp.ToDate = row9.ToDate ;
sortie_map = sortie_map_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_22 = false;










 


	tos_count_tMap_22++;

/**
 * [tMap_22 main ] stop
 */
	
	/**
	 * [tMap_22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

 



/**
 * [tMap_22 process_data_begin ] stop
 */
// Start of branch "sortie_map"
if(sortie_map != null) { 



	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row4" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow4 = false;
       		  	    	
       		  	    	
 							row4Struct row4ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		row4HashKey.SPLPRICETYPE = sortie_map.PRICECUSTOMERGROUPCODE ;
                        		    		
                        		    		row4HashKey.SPLSEASONCODE = sortie_map.SEASON ;
                        		    		
                        		    		row4HashKey.SPLCOUNTRYREGIONID = sortie_map.COUNTRY ;
                        		    		

								
		                        	row4HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row4.lookup( row4HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row4 != null && tHash_Lookup_row4.getCount(row4HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row4' and it contains more one result from keys :  row4.SPLPRICETYPE = '" + row4HashKey.SPLPRICETYPE + "', row4.SPLSEASONCODE = '" + row4HashKey.SPLSEASONCODE + "', row4.SPLCOUNTRYREGIONID = '" + row4HashKey.SPLCOUNTRYREGIONID + "'");
								} // G 071
							

							row4Struct row4 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row4Struct fromLookup_row4 = null;
							row4 = row4Default;
										 
							
								 
							
							
								if (tHash_Lookup_row4 !=null && tHash_Lookup_row4.hasNext()) { // G 099
								
							
								
								fromLookup_row4 = tHash_Lookup_row4.next();

							
							
								} // G 099
							
							

							if(fromLookup_row4 != null) {
								row4 = fromLookup_row4;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

sortie_add_linenumber = null;


// # Output table : 'sortie_add_linenumber'
sortie_add_linenumber_tmp.ITEMNUMBER = sortie_map.ITEMNUMBER ;
sortie_add_linenumber_tmp.PRICE = BigDecimal.valueOf(sortie_map.PRICE ).setScale(2,BigDecimal.ROUND_HALF_UP) ;
sortie_add_linenumber_tmp.PRICECURRENCYCODE = sortie_map.PRICECURRENCYCODE ;
sortie_add_linenumber_tmp.PRICECUSTOMERGROUPCODE = sortie_map.PRICECUSTOMERGROUPCODE ;
sortie_add_linenumber_tmp.PRODUCTCOLORID = sortie_map.PRODUCTCOLORID ;
sortie_add_linenumber_tmp.PRODUCTSIZEID = sortie_map.PRODUCTSIZEID ;
sortie_add_linenumber_tmp.PRODUCTSTYLEID = sortie_map.PRODUCTSTYLEID ;
sortie_add_linenumber_tmp.SEASON = sortie_map.SEASON ;
sortie_add_linenumber_tmp.COUNTRY = sortie_map.COUNTRY ;
sortie_add_linenumber_tmp.GROUPCODE = row4.GROUPCODE ;
sortie_add_linenumber_tmp.FromDate = sortie_map.FromDate ;
sortie_add_linenumber_tmp.ToDate = sortie_map.ToDate ;
sortie_add_linenumber = sortie_add_linenumber_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "sortie_add_linenumber"
if(sortie_add_linenumber != null) { 



	
	/**
	 * [tUniqRow_2 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	
row10 = null;			
if(sortie_add_linenumber.ITEMNUMBER == null){
	finder_tUniqRow_2.ITEMNUMBER = null;
}else{
	finder_tUniqRow_2.ITEMNUMBER = sortie_add_linenumber.ITEMNUMBER.toLowerCase();
}
if(sortie_add_linenumber.PRICECURRENCYCODE == null){
	finder_tUniqRow_2.PRICECURRENCYCODE = null;
}else{
	finder_tUniqRow_2.PRICECURRENCYCODE = sortie_add_linenumber.PRICECURRENCYCODE.toLowerCase();
}
if(sortie_add_linenumber.PRICECUSTOMERGROUPCODE == null){
	finder_tUniqRow_2.PRICECUSTOMERGROUPCODE = null;
}else{
	finder_tUniqRow_2.PRICECUSTOMERGROUPCODE = sortie_add_linenumber.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTCOLORID == null){
	finder_tUniqRow_2.PRODUCTCOLORID = null;
}else{
	finder_tUniqRow_2.PRODUCTCOLORID = sortie_add_linenumber.PRODUCTCOLORID.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTSIZEID == null){
	finder_tUniqRow_2.PRODUCTSIZEID = null;
}else{
	finder_tUniqRow_2.PRODUCTSIZEID = sortie_add_linenumber.PRODUCTSIZEID.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTSTYLEID == null){
	finder_tUniqRow_2.PRODUCTSTYLEID = null;
}else{
	finder_tUniqRow_2.PRODUCTSTYLEID = sortie_add_linenumber.PRODUCTSTYLEID.toLowerCase();
}
if(sortie_add_linenumber.SEASON == null){
	finder_tUniqRow_2.SEASON = null;
}else{
	finder_tUniqRow_2.SEASON = sortie_add_linenumber.SEASON.toLowerCase();
}
if(sortie_add_linenumber.GROUPCODE == null){
	finder_tUniqRow_2.GROUPCODE = null;
}else{
	finder_tUniqRow_2.GROUPCODE = sortie_add_linenumber.GROUPCODE.toLowerCase();
}	
finder_tUniqRow_2.hashCodeDirty = true;
if (!keystUniqRow_2.contains(finder_tUniqRow_2)) {
		KeyStruct_tUniqRow_2 new_tUniqRow_2 = new KeyStruct_tUniqRow_2();

		
if(sortie_add_linenumber.ITEMNUMBER == null){
	new_tUniqRow_2.ITEMNUMBER = null;
}else{
	new_tUniqRow_2.ITEMNUMBER = sortie_add_linenumber.ITEMNUMBER.toLowerCase();
}
if(sortie_add_linenumber.PRICECURRENCYCODE == null){
	new_tUniqRow_2.PRICECURRENCYCODE = null;
}else{
	new_tUniqRow_2.PRICECURRENCYCODE = sortie_add_linenumber.PRICECURRENCYCODE.toLowerCase();
}
if(sortie_add_linenumber.PRICECUSTOMERGROUPCODE == null){
	new_tUniqRow_2.PRICECUSTOMERGROUPCODE = null;
}else{
	new_tUniqRow_2.PRICECUSTOMERGROUPCODE = sortie_add_linenumber.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTCOLORID == null){
	new_tUniqRow_2.PRODUCTCOLORID = null;
}else{
	new_tUniqRow_2.PRODUCTCOLORID = sortie_add_linenumber.PRODUCTCOLORID.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTSIZEID == null){
	new_tUniqRow_2.PRODUCTSIZEID = null;
}else{
	new_tUniqRow_2.PRODUCTSIZEID = sortie_add_linenumber.PRODUCTSIZEID.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTSTYLEID == null){
	new_tUniqRow_2.PRODUCTSTYLEID = null;
}else{
	new_tUniqRow_2.PRODUCTSTYLEID = sortie_add_linenumber.PRODUCTSTYLEID.toLowerCase();
}
if(sortie_add_linenumber.SEASON == null){
	new_tUniqRow_2.SEASON = null;
}else{
	new_tUniqRow_2.SEASON = sortie_add_linenumber.SEASON.toLowerCase();
}
if(sortie_add_linenumber.GROUPCODE == null){
	new_tUniqRow_2.GROUPCODE = null;
}else{
	new_tUniqRow_2.GROUPCODE = sortie_add_linenumber.GROUPCODE.toLowerCase();
}
		
		keystUniqRow_2.add(new_tUniqRow_2);if(row10 == null){ 
	
	row10 = new row10Struct();
}row10.ITEMNUMBER = sortie_add_linenumber.ITEMNUMBER;			row10.PRICE = sortie_add_linenumber.PRICE;			row10.PRICECURRENCYCODE = sortie_add_linenumber.PRICECURRENCYCODE;			row10.PRICECUSTOMERGROUPCODE = sortie_add_linenumber.PRICECUSTOMERGROUPCODE;			row10.PRODUCTCOLORID = sortie_add_linenumber.PRODUCTCOLORID;			row10.PRODUCTSIZEID = sortie_add_linenumber.PRODUCTSIZEID;			row10.PRODUCTSTYLEID = sortie_add_linenumber.PRODUCTSTYLEID;			row10.SEASON = sortie_add_linenumber.SEASON;			row10.COUNTRY = sortie_add_linenumber.COUNTRY;			row10.GROUPCODE = sortie_add_linenumber.GROUPCODE;			row10.FromDate = sortie_add_linenumber.FromDate;			row10.ToDate = sortie_add_linenumber.ToDate;					
		nb_uniques_tUniqRow_2++;
	} else {
	  nb_duplicates_tUniqRow_2++;
	}

 


	tos_count_tUniqRow_2++;

/**
 * [tUniqRow_2 main ] stop
 */
	
	/**
	 * [tUniqRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

 



/**
 * [tUniqRow_2 process_data_begin ] stop
 */
// Start of branch "row10"
if(row10 != null) { 



	
	/**
	 * [tFileOutputDelimited_4 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	


                    StringBuilder sb_tFileOutputDelimited_4 = new StringBuilder();
                            if(row10.ITEMNUMBER != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.ITEMNUMBER
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRICE != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRICE.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRICECURRENCYCODE != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRICECURRENCYCODE
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRICECUSTOMERGROUPCODE != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRICECUSTOMERGROUPCODE
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRODUCTCOLORID != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRODUCTCOLORID
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRODUCTSIZEID != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRODUCTSIZEID
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRODUCTSTYLEID != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRODUCTSTYLEID
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.SEASON != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.SEASON
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.COUNTRY != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.COUNTRY
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.GROUPCODE != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.GROUPCODE
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.FromDate != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.FromDate
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.ToDate != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.ToDate
                        );
                            }
                    sb_tFileOutputDelimited_4.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_4);


                    nb_line_tFileOutputDelimited_4++;
                    resourceMap.put("nb_line_tFileOutputDelimited_4", nb_line_tFileOutputDelimited_4);

                        outtFileOutputDelimited_4.write(sb_tFileOutputDelimited_4.toString());




 


	tos_count_tFileOutputDelimited_4++;

/**
 * [tFileOutputDelimited_4 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	

 



/**
 * [tFileOutputDelimited_4 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	

 



/**
 * [tFileOutputDelimited_4 process_data_end ] stop
 */

} // End of branch "row10"




	
	/**
	 * [tUniqRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

 



/**
 * [tUniqRow_2 process_data_end ] stop
 */

} // End of branch "sortie_add_linenumber"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */

} // End of branch "sortie_map"




	
	/**
	 * [tMap_22 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

 



/**
 * [tMap_22 process_data_end ] stop
 */

} // End of branch "row41"




	
	/**
	 * [tMap_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_end ] stop
 */



	
	/**
	 * [tUnite_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	

 



/**
 * [tUnite_2 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_20 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_20";

	

 



/**
 * [tHashInput_20 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_20 end ] start
	 */

	

	
	
	currentComponent="tHashInput_20";

	
    

		
			nb_line_tHashInput_20++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_MASTERFILE_EXTRACT_PRICES_1_" + pid +"_tHashOutput_20");
	


	globalMap.put("tHashInput_20_NB_LINE", nb_line_tHashInput_20);       

 

ok_Hash.put("tHashInput_20", true);
end_Hash.put("tHashInput_20", System.currentTimeMillis());




/**
 * [tHashInput_20 end ] stop
 */
	
	/**
	 * [tHashInput_21 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_21", false);
		start_Hash.put("tHashInput_21", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_21";

	
		int tos_count_tHashInput_21 = 0;
		


int nb_line_tHashInput_21 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_21=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row74Struct> tHashFile_tHashInput_21 = mf_tHashInput_21.getAdvancedMemoryHashFile("tHashFile_MASTERFILE_EXTRACT_PRICES_1_" + pid +"_tHashOutput_21");
if(tHashFile_tHashInput_21==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row74Struct> iterator_tHashInput_21 = tHashFile_tHashInput_21.iterator();
while (iterator_tHashInput_21.hasNext()) {
    row74Struct next_tHashInput_21 = iterator_tHashInput_21.next();

	row77.TRADEAGREEMENTJOURNALNUMBER = next_tHashInput_21.TRADEAGREEMENTJOURNALNUMBER;
	row77.ITEMNUMBER = next_tHashInput_21.ITEMNUMBER;
	row77.PRICE = next_tHashInput_21.PRICE;
	row77.PRICECURRENCYCODE = next_tHashInput_21.PRICECURRENCYCODE;
	row77.PRICECUSTOMERGROUPCODE = next_tHashInput_21.PRICECUSTOMERGROUPCODE;
	row77.PRODUCTCOLORID = next_tHashInput_21.PRODUCTCOLORID;
	row77.PRODUCTSIZEID = next_tHashInput_21.PRODUCTSIZEID;
	row77.PRODUCTSTYLEID = next_tHashInput_21.PRODUCTSTYLEID;
	row77.QUANTITYUNITSYMBOL = next_tHashInput_21.QUANTITYUNITSYMBOL;
	row77.SEASON = next_tHashInput_21.SEASON;
	row77.COUNTRY = next_tHashInput_21.COUNTRY;
 



/**
 * [tHashInput_21 begin ] stop
 */
	
	/**
	 * [tHashInput_21 main ] start
	 */

	

	
	
	currentComponent="tHashInput_21";

	

 


	tos_count_tHashInput_21++;

/**
 * [tHashInput_21 main ] stop
 */
	
	/**
	 * [tHashInput_21 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_21";

	

 



/**
 * [tHashInput_21 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_2 main ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	
//////////
 

// for output
			row11 = new row11Struct();
								
			row11.TRADEAGREEMENTJOURNALNUMBER = row77.TRADEAGREEMENTJOURNALNUMBER;								
			row11.ITEMNUMBER = row77.ITEMNUMBER;								
			row11.PRICE = row77.PRICE;								
			row11.PRICECURRENCYCODE = row77.PRICECURRENCYCODE;								
			row11.PRICECUSTOMERGROUPCODE = row77.PRICECUSTOMERGROUPCODE;								
			row11.PRODUCTCOLORID = row77.PRODUCTCOLORID;								
			row11.PRODUCTSIZEID = row77.PRODUCTSIZEID;								
			row11.PRODUCTSTYLEID = row77.PRODUCTSTYLEID;								
			row11.QUANTITYUNITSYMBOL = row77.QUANTITYUNITSYMBOL;								
			row11.SEASON = row77.SEASON;								
			row11.COUNTRY = row77.COUNTRY;			

			nb_line_tUnite_2++;

//////////
 


	tos_count_tUnite_2++;

/**
 * [tUnite_2 main ] stop
 */
	
	/**
	 * [tUnite_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	

 



/**
 * [tUnite_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_8 main ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_8 = false;
		  boolean mainRowRejected_tMap_8 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row12" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow12 = false;
       		  	    	
       		  	    	
 							row12Struct row12ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_8) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_8 = false;
								
                        		    		row12HashKey.itemnumber = row11.ITEMNUMBER ;
                        		    		
                        		    		row12HashKey.productcolorid = row11.PRODUCTCOLORID ;
                        		    		
                        		    		row12HashKey.productsizeid = row11.PRODUCTSIZEID ;
                        		    		
                        		    		row12HashKey.productstyleid = row11.PRODUCTSTYLEID ;
                        		    		

								
		                        	row12HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row12.lookup( row12HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row12.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_8 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row12 != null && tHash_Lookup_row12.getCount(row12HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row12' and it contains more one result from keys :  row12.itemnumber = '" + row12HashKey.itemnumber + "', row12.productcolorid = '" + row12HashKey.productcolorid + "', row12.productsizeid = '" + row12HashKey.productsizeid + "', row12.productstyleid = '" + row12HashKey.productstyleid + "'");
								} // G 071
							

							row12Struct row12 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row12Struct fromLookup_row12 = null;
							row12 = row12Default;
										 
							
								 
							
							
								if (tHash_Lookup_row12 !=null && tHash_Lookup_row12.hasNext()) { // G 099
								
							
								
								fromLookup_row12 = tHash_Lookup_row12.next();

							
							
								} // G 099
							
							

							if(fromLookup_row12 != null) {
								row12 = fromLookup_row12;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_8__Struct Var = Var__tMap_8;// ###############################
        // ###############################
        // # Output tables

row41 = null;

if(!rejectedInnerJoin_tMap_8 ) {

// # Output table : 'row41'
row41_tmp.TRADEAGREEMENTJOURNALNUMBER = row11.TRADEAGREEMENTJOURNALNUMBER ;
row41_tmp.ITEMNUMBER = row11.ITEMNUMBER ;
row41_tmp.PRICE = row11.PRICE ;
row41_tmp.PRICECURRENCYCODE = row11.PRICECURRENCYCODE ;
row41_tmp.PRICECUSTOMERGROUPCODE = row11.PRICECUSTOMERGROUPCODE ;
row41_tmp.PRODUCTCOLORID = row11.PRODUCTCOLORID ;
row41_tmp.PRODUCTSIZEID = row11.PRODUCTSIZEID ;
row41_tmp.PRODUCTSTYLEID = row11.PRODUCTSTYLEID ;
row41_tmp.QUANTITYUNITSYMBOL = row11.QUANTITYUNITSYMBOL ;
row41_tmp.SEASON = row11.SEASON ;
row41_tmp.COUNTRY = row11.COUNTRY ;
row41 = row41_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_8 = false;










 


	tos_count_tMap_8++;

/**
 * [tMap_8 main ] stop
 */
	
	/**
	 * [tMap_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_begin ] stop
 */
// Start of branch "row41"
if(row41 != null) { 



	
	/**
	 * [tMap_22 main ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_22 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_22 = false;
		  boolean mainRowRejected_tMap_22 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row9" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow9 = false;
       		  	    	
       		  	    	
 							row9Struct row9ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_22) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_22 = false;
								
                        		    		row9HashKey.SEASONCODE = row41.SEASON ;
                        		    		

								
		                        	row9HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row9.lookup( row9HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row9 != null && tHash_Lookup_row9.getCount(row9HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row9' and it contains more one result from keys :  row9.SEASONCODE = '" + row9HashKey.SEASONCODE + "'");
								} // G 071
							

							row9Struct row9 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row9Struct fromLookup_row9 = null;
							row9 = row9Default;
										 
							
								 
							
							
								if (tHash_Lookup_row9 !=null && tHash_Lookup_row9.hasNext()) { // G 099
								
							
								
								fromLookup_row9 = tHash_Lookup_row9.next();

							
							
								} // G 099
							
							

							if(fromLookup_row9 != null) {
								row9 = fromLookup_row9;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_22__Struct Var = Var__tMap_22;// ###############################
        // ###############################
        // # Output tables

sortie_map = null;


// # Output table : 'sortie_map'
sortie_map_tmp.ITEMNUMBER = row41.ITEMNUMBER ;
sortie_map_tmp.PRICE = row41.PRICE ;
sortie_map_tmp.PRICECURRENCYCODE = row41.PRICECURRENCYCODE ;
sortie_map_tmp.PRICECUSTOMERGROUPCODE = row41.PRICECUSTOMERGROUPCODE ;
sortie_map_tmp.PRODUCTCOLORID = row41.PRODUCTCOLORID ;
sortie_map_tmp.PRODUCTSIZEID = row41.PRODUCTSIZEID ;
sortie_map_tmp.PRODUCTSTYLEID = row41.PRODUCTSTYLEID ;
sortie_map_tmp.SEASON = row41.SEASON ;
sortie_map_tmp.COUNTRY = row41.COUNTRY ;
sortie_map_tmp.FromDate = row9.FromDate ;
sortie_map_tmp.ToDate = row9.ToDate ;
sortie_map = sortie_map_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_22 = false;










 


	tos_count_tMap_22++;

/**
 * [tMap_22 main ] stop
 */
	
	/**
	 * [tMap_22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

 



/**
 * [tMap_22 process_data_begin ] stop
 */
// Start of branch "sortie_map"
if(sortie_map != null) { 



	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row4" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow4 = false;
       		  	    	
       		  	    	
 							row4Struct row4ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		row4HashKey.SPLPRICETYPE = sortie_map.PRICECUSTOMERGROUPCODE ;
                        		    		
                        		    		row4HashKey.SPLSEASONCODE = sortie_map.SEASON ;
                        		    		
                        		    		row4HashKey.SPLCOUNTRYREGIONID = sortie_map.COUNTRY ;
                        		    		

								
		                        	row4HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row4.lookup( row4HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row4 != null && tHash_Lookup_row4.getCount(row4HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row4' and it contains more one result from keys :  row4.SPLPRICETYPE = '" + row4HashKey.SPLPRICETYPE + "', row4.SPLSEASONCODE = '" + row4HashKey.SPLSEASONCODE + "', row4.SPLCOUNTRYREGIONID = '" + row4HashKey.SPLCOUNTRYREGIONID + "'");
								} // G 071
							

							row4Struct row4 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row4Struct fromLookup_row4 = null;
							row4 = row4Default;
										 
							
								 
							
							
								if (tHash_Lookup_row4 !=null && tHash_Lookup_row4.hasNext()) { // G 099
								
							
								
								fromLookup_row4 = tHash_Lookup_row4.next();

							
							
								} // G 099
							
							

							if(fromLookup_row4 != null) {
								row4 = fromLookup_row4;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

sortie_add_linenumber = null;


// # Output table : 'sortie_add_linenumber'
sortie_add_linenumber_tmp.ITEMNUMBER = sortie_map.ITEMNUMBER ;
sortie_add_linenumber_tmp.PRICE = BigDecimal.valueOf(sortie_map.PRICE ).setScale(2,BigDecimal.ROUND_HALF_UP) ;
sortie_add_linenumber_tmp.PRICECURRENCYCODE = sortie_map.PRICECURRENCYCODE ;
sortie_add_linenumber_tmp.PRICECUSTOMERGROUPCODE = sortie_map.PRICECUSTOMERGROUPCODE ;
sortie_add_linenumber_tmp.PRODUCTCOLORID = sortie_map.PRODUCTCOLORID ;
sortie_add_linenumber_tmp.PRODUCTSIZEID = sortie_map.PRODUCTSIZEID ;
sortie_add_linenumber_tmp.PRODUCTSTYLEID = sortie_map.PRODUCTSTYLEID ;
sortie_add_linenumber_tmp.SEASON = sortie_map.SEASON ;
sortie_add_linenumber_tmp.COUNTRY = sortie_map.COUNTRY ;
sortie_add_linenumber_tmp.GROUPCODE = row4.GROUPCODE ;
sortie_add_linenumber_tmp.FromDate = sortie_map.FromDate ;
sortie_add_linenumber_tmp.ToDate = sortie_map.ToDate ;
sortie_add_linenumber = sortie_add_linenumber_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "sortie_add_linenumber"
if(sortie_add_linenumber != null) { 



	
	/**
	 * [tUniqRow_2 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	
row10 = null;			
if(sortie_add_linenumber.ITEMNUMBER == null){
	finder_tUniqRow_2.ITEMNUMBER = null;
}else{
	finder_tUniqRow_2.ITEMNUMBER = sortie_add_linenumber.ITEMNUMBER.toLowerCase();
}
if(sortie_add_linenumber.PRICECURRENCYCODE == null){
	finder_tUniqRow_2.PRICECURRENCYCODE = null;
}else{
	finder_tUniqRow_2.PRICECURRENCYCODE = sortie_add_linenumber.PRICECURRENCYCODE.toLowerCase();
}
if(sortie_add_linenumber.PRICECUSTOMERGROUPCODE == null){
	finder_tUniqRow_2.PRICECUSTOMERGROUPCODE = null;
}else{
	finder_tUniqRow_2.PRICECUSTOMERGROUPCODE = sortie_add_linenumber.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTCOLORID == null){
	finder_tUniqRow_2.PRODUCTCOLORID = null;
}else{
	finder_tUniqRow_2.PRODUCTCOLORID = sortie_add_linenumber.PRODUCTCOLORID.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTSIZEID == null){
	finder_tUniqRow_2.PRODUCTSIZEID = null;
}else{
	finder_tUniqRow_2.PRODUCTSIZEID = sortie_add_linenumber.PRODUCTSIZEID.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTSTYLEID == null){
	finder_tUniqRow_2.PRODUCTSTYLEID = null;
}else{
	finder_tUniqRow_2.PRODUCTSTYLEID = sortie_add_linenumber.PRODUCTSTYLEID.toLowerCase();
}
if(sortie_add_linenumber.SEASON == null){
	finder_tUniqRow_2.SEASON = null;
}else{
	finder_tUniqRow_2.SEASON = sortie_add_linenumber.SEASON.toLowerCase();
}
if(sortie_add_linenumber.GROUPCODE == null){
	finder_tUniqRow_2.GROUPCODE = null;
}else{
	finder_tUniqRow_2.GROUPCODE = sortie_add_linenumber.GROUPCODE.toLowerCase();
}	
finder_tUniqRow_2.hashCodeDirty = true;
if (!keystUniqRow_2.contains(finder_tUniqRow_2)) {
		KeyStruct_tUniqRow_2 new_tUniqRow_2 = new KeyStruct_tUniqRow_2();

		
if(sortie_add_linenumber.ITEMNUMBER == null){
	new_tUniqRow_2.ITEMNUMBER = null;
}else{
	new_tUniqRow_2.ITEMNUMBER = sortie_add_linenumber.ITEMNUMBER.toLowerCase();
}
if(sortie_add_linenumber.PRICECURRENCYCODE == null){
	new_tUniqRow_2.PRICECURRENCYCODE = null;
}else{
	new_tUniqRow_2.PRICECURRENCYCODE = sortie_add_linenumber.PRICECURRENCYCODE.toLowerCase();
}
if(sortie_add_linenumber.PRICECUSTOMERGROUPCODE == null){
	new_tUniqRow_2.PRICECUSTOMERGROUPCODE = null;
}else{
	new_tUniqRow_2.PRICECUSTOMERGROUPCODE = sortie_add_linenumber.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTCOLORID == null){
	new_tUniqRow_2.PRODUCTCOLORID = null;
}else{
	new_tUniqRow_2.PRODUCTCOLORID = sortie_add_linenumber.PRODUCTCOLORID.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTSIZEID == null){
	new_tUniqRow_2.PRODUCTSIZEID = null;
}else{
	new_tUniqRow_2.PRODUCTSIZEID = sortie_add_linenumber.PRODUCTSIZEID.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTSTYLEID == null){
	new_tUniqRow_2.PRODUCTSTYLEID = null;
}else{
	new_tUniqRow_2.PRODUCTSTYLEID = sortie_add_linenumber.PRODUCTSTYLEID.toLowerCase();
}
if(sortie_add_linenumber.SEASON == null){
	new_tUniqRow_2.SEASON = null;
}else{
	new_tUniqRow_2.SEASON = sortie_add_linenumber.SEASON.toLowerCase();
}
if(sortie_add_linenumber.GROUPCODE == null){
	new_tUniqRow_2.GROUPCODE = null;
}else{
	new_tUniqRow_2.GROUPCODE = sortie_add_linenumber.GROUPCODE.toLowerCase();
}
		
		keystUniqRow_2.add(new_tUniqRow_2);if(row10 == null){ 
	
	row10 = new row10Struct();
}row10.ITEMNUMBER = sortie_add_linenumber.ITEMNUMBER;			row10.PRICE = sortie_add_linenumber.PRICE;			row10.PRICECURRENCYCODE = sortie_add_linenumber.PRICECURRENCYCODE;			row10.PRICECUSTOMERGROUPCODE = sortie_add_linenumber.PRICECUSTOMERGROUPCODE;			row10.PRODUCTCOLORID = sortie_add_linenumber.PRODUCTCOLORID;			row10.PRODUCTSIZEID = sortie_add_linenumber.PRODUCTSIZEID;			row10.PRODUCTSTYLEID = sortie_add_linenumber.PRODUCTSTYLEID;			row10.SEASON = sortie_add_linenumber.SEASON;			row10.COUNTRY = sortie_add_linenumber.COUNTRY;			row10.GROUPCODE = sortie_add_linenumber.GROUPCODE;			row10.FromDate = sortie_add_linenumber.FromDate;			row10.ToDate = sortie_add_linenumber.ToDate;					
		nb_uniques_tUniqRow_2++;
	} else {
	  nb_duplicates_tUniqRow_2++;
	}

 


	tos_count_tUniqRow_2++;

/**
 * [tUniqRow_2 main ] stop
 */
	
	/**
	 * [tUniqRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

 



/**
 * [tUniqRow_2 process_data_begin ] stop
 */
// Start of branch "row10"
if(row10 != null) { 



	
	/**
	 * [tFileOutputDelimited_4 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	


                    StringBuilder sb_tFileOutputDelimited_4 = new StringBuilder();
                            if(row10.ITEMNUMBER != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.ITEMNUMBER
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRICE != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRICE.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRICECURRENCYCODE != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRICECURRENCYCODE
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRICECUSTOMERGROUPCODE != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRICECUSTOMERGROUPCODE
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRODUCTCOLORID != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRODUCTCOLORID
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRODUCTSIZEID != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRODUCTSIZEID
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRODUCTSTYLEID != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRODUCTSTYLEID
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.SEASON != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.SEASON
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.COUNTRY != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.COUNTRY
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.GROUPCODE != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.GROUPCODE
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.FromDate != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.FromDate
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.ToDate != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.ToDate
                        );
                            }
                    sb_tFileOutputDelimited_4.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_4);


                    nb_line_tFileOutputDelimited_4++;
                    resourceMap.put("nb_line_tFileOutputDelimited_4", nb_line_tFileOutputDelimited_4);

                        outtFileOutputDelimited_4.write(sb_tFileOutputDelimited_4.toString());




 


	tos_count_tFileOutputDelimited_4++;

/**
 * [tFileOutputDelimited_4 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	

 



/**
 * [tFileOutputDelimited_4 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	

 



/**
 * [tFileOutputDelimited_4 process_data_end ] stop
 */

} // End of branch "row10"




	
	/**
	 * [tUniqRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

 



/**
 * [tUniqRow_2 process_data_end ] stop
 */

} // End of branch "sortie_add_linenumber"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */

} // End of branch "sortie_map"




	
	/**
	 * [tMap_22 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

 



/**
 * [tMap_22 process_data_end ] stop
 */

} // End of branch "row41"




	
	/**
	 * [tMap_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_end ] stop
 */



	
	/**
	 * [tUnite_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	

 



/**
 * [tUnite_2 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_21 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_21";

	

 



/**
 * [tHashInput_21 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_21 end ] start
	 */

	

	
	
	currentComponent="tHashInput_21";

	
    

		
			nb_line_tHashInput_21++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_MASTERFILE_EXTRACT_PRICES_1_" + pid +"_tHashOutput_21");
	


	globalMap.put("tHashInput_21_NB_LINE", nb_line_tHashInput_21);       

 

ok_Hash.put("tHashInput_21", true);
end_Hash.put("tHashInput_21", System.currentTimeMillis());




/**
 * [tHashInput_21 end ] stop
 */
	
	/**
	 * [tHashInput_22 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_22", false);
		start_Hash.put("tHashInput_22", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_22";

	
		int tos_count_tHashInput_22 = 0;
		


int nb_line_tHashInput_22 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_22=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row76Struct> tHashFile_tHashInput_22 = mf_tHashInput_22.getAdvancedMemoryHashFile("tHashFile_MASTERFILE_EXTRACT_PRICES_1_" + pid +"_tHashOutput_22");
if(tHashFile_tHashInput_22==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row76Struct> iterator_tHashInput_22 = tHashFile_tHashInput_22.iterator();
while (iterator_tHashInput_22.hasNext()) {
    row76Struct next_tHashInput_22 = iterator_tHashInput_22.next();

	row78.TRADEAGREEMENTJOURNALNUMBER = next_tHashInput_22.TRADEAGREEMENTJOURNALNUMBER;
	row78.ITEMNUMBER = next_tHashInput_22.ITEMNUMBER;
	row78.PRICE = next_tHashInput_22.PRICE;
	row78.PRICECURRENCYCODE = next_tHashInput_22.PRICECURRENCYCODE;
	row78.PRICECUSTOMERGROUPCODE = next_tHashInput_22.PRICECUSTOMERGROUPCODE;
	row78.PRODUCTCOLORID = next_tHashInput_22.PRODUCTCOLORID;
	row78.PRODUCTSIZEID = next_tHashInput_22.PRODUCTSIZEID;
	row78.PRODUCTSTYLEID = next_tHashInput_22.PRODUCTSTYLEID;
	row78.QUANTITYUNITSYMBOL = next_tHashInput_22.QUANTITYUNITSYMBOL;
	row78.SEASON = next_tHashInput_22.SEASON;
	row78.COUNTRY = next_tHashInput_22.COUNTRY;
 



/**
 * [tHashInput_22 begin ] stop
 */
	
	/**
	 * [tHashInput_22 main ] start
	 */

	

	
	
	currentComponent="tHashInput_22";

	

 


	tos_count_tHashInput_22++;

/**
 * [tHashInput_22 main ] stop
 */
	
	/**
	 * [tHashInput_22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_22";

	

 



/**
 * [tHashInput_22 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_2 main ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	
//////////
 

// for output
			row11 = new row11Struct();
								
			row11.TRADEAGREEMENTJOURNALNUMBER = row78.TRADEAGREEMENTJOURNALNUMBER;								
			row11.ITEMNUMBER = row78.ITEMNUMBER;								
			row11.PRICE = row78.PRICE;								
			row11.PRICECURRENCYCODE = row78.PRICECURRENCYCODE;								
			row11.PRICECUSTOMERGROUPCODE = row78.PRICECUSTOMERGROUPCODE;								
			row11.PRODUCTCOLORID = row78.PRODUCTCOLORID;								
			row11.PRODUCTSIZEID = row78.PRODUCTSIZEID;								
			row11.PRODUCTSTYLEID = row78.PRODUCTSTYLEID;								
			row11.QUANTITYUNITSYMBOL = row78.QUANTITYUNITSYMBOL;								
			row11.SEASON = row78.SEASON;								
			row11.COUNTRY = row78.COUNTRY;			

			nb_line_tUnite_2++;

//////////
 


	tos_count_tUnite_2++;

/**
 * [tUnite_2 main ] stop
 */
	
	/**
	 * [tUnite_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	

 



/**
 * [tUnite_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_8 main ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_8 = false;
		  boolean mainRowRejected_tMap_8 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row12" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow12 = false;
       		  	    	
       		  	    	
 							row12Struct row12ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_8) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_8 = false;
								
                        		    		row12HashKey.itemnumber = row11.ITEMNUMBER ;
                        		    		
                        		    		row12HashKey.productcolorid = row11.PRODUCTCOLORID ;
                        		    		
                        		    		row12HashKey.productsizeid = row11.PRODUCTSIZEID ;
                        		    		
                        		    		row12HashKey.productstyleid = row11.PRODUCTSTYLEID ;
                        		    		

								
		                        	row12HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row12.lookup( row12HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row12.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_8 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row12 != null && tHash_Lookup_row12.getCount(row12HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row12' and it contains more one result from keys :  row12.itemnumber = '" + row12HashKey.itemnumber + "', row12.productcolorid = '" + row12HashKey.productcolorid + "', row12.productsizeid = '" + row12HashKey.productsizeid + "', row12.productstyleid = '" + row12HashKey.productstyleid + "'");
								} // G 071
							

							row12Struct row12 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row12Struct fromLookup_row12 = null;
							row12 = row12Default;
										 
							
								 
							
							
								if (tHash_Lookup_row12 !=null && tHash_Lookup_row12.hasNext()) { // G 099
								
							
								
								fromLookup_row12 = tHash_Lookup_row12.next();

							
							
								} // G 099
							
							

							if(fromLookup_row12 != null) {
								row12 = fromLookup_row12;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_8__Struct Var = Var__tMap_8;// ###############################
        // ###############################
        // # Output tables

row41 = null;

if(!rejectedInnerJoin_tMap_8 ) {

// # Output table : 'row41'
row41_tmp.TRADEAGREEMENTJOURNALNUMBER = row11.TRADEAGREEMENTJOURNALNUMBER ;
row41_tmp.ITEMNUMBER = row11.ITEMNUMBER ;
row41_tmp.PRICE = row11.PRICE ;
row41_tmp.PRICECURRENCYCODE = row11.PRICECURRENCYCODE ;
row41_tmp.PRICECUSTOMERGROUPCODE = row11.PRICECUSTOMERGROUPCODE ;
row41_tmp.PRODUCTCOLORID = row11.PRODUCTCOLORID ;
row41_tmp.PRODUCTSIZEID = row11.PRODUCTSIZEID ;
row41_tmp.PRODUCTSTYLEID = row11.PRODUCTSTYLEID ;
row41_tmp.QUANTITYUNITSYMBOL = row11.QUANTITYUNITSYMBOL ;
row41_tmp.SEASON = row11.SEASON ;
row41_tmp.COUNTRY = row11.COUNTRY ;
row41 = row41_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_8 = false;










 


	tos_count_tMap_8++;

/**
 * [tMap_8 main ] stop
 */
	
	/**
	 * [tMap_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_begin ] stop
 */
// Start of branch "row41"
if(row41 != null) { 



	
	/**
	 * [tMap_22 main ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_22 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_22 = false;
		  boolean mainRowRejected_tMap_22 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row9" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow9 = false;
       		  	    	
       		  	    	
 							row9Struct row9ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_22) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_22 = false;
								
                        		    		row9HashKey.SEASONCODE = row41.SEASON ;
                        		    		

								
		                        	row9HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row9.lookup( row9HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row9 != null && tHash_Lookup_row9.getCount(row9HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row9' and it contains more one result from keys :  row9.SEASONCODE = '" + row9HashKey.SEASONCODE + "'");
								} // G 071
							

							row9Struct row9 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row9Struct fromLookup_row9 = null;
							row9 = row9Default;
										 
							
								 
							
							
								if (tHash_Lookup_row9 !=null && tHash_Lookup_row9.hasNext()) { // G 099
								
							
								
								fromLookup_row9 = tHash_Lookup_row9.next();

							
							
								} // G 099
							
							

							if(fromLookup_row9 != null) {
								row9 = fromLookup_row9;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_22__Struct Var = Var__tMap_22;// ###############################
        // ###############################
        // # Output tables

sortie_map = null;


// # Output table : 'sortie_map'
sortie_map_tmp.ITEMNUMBER = row41.ITEMNUMBER ;
sortie_map_tmp.PRICE = row41.PRICE ;
sortie_map_tmp.PRICECURRENCYCODE = row41.PRICECURRENCYCODE ;
sortie_map_tmp.PRICECUSTOMERGROUPCODE = row41.PRICECUSTOMERGROUPCODE ;
sortie_map_tmp.PRODUCTCOLORID = row41.PRODUCTCOLORID ;
sortie_map_tmp.PRODUCTSIZEID = row41.PRODUCTSIZEID ;
sortie_map_tmp.PRODUCTSTYLEID = row41.PRODUCTSTYLEID ;
sortie_map_tmp.SEASON = row41.SEASON ;
sortie_map_tmp.COUNTRY = row41.COUNTRY ;
sortie_map_tmp.FromDate = row9.FromDate ;
sortie_map_tmp.ToDate = row9.ToDate ;
sortie_map = sortie_map_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_22 = false;










 


	tos_count_tMap_22++;

/**
 * [tMap_22 main ] stop
 */
	
	/**
	 * [tMap_22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

 



/**
 * [tMap_22 process_data_begin ] stop
 */
// Start of branch "sortie_map"
if(sortie_map != null) { 



	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row4" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow4 = false;
       		  	    	
       		  	    	
 							row4Struct row4ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		row4HashKey.SPLPRICETYPE = sortie_map.PRICECUSTOMERGROUPCODE ;
                        		    		
                        		    		row4HashKey.SPLSEASONCODE = sortie_map.SEASON ;
                        		    		
                        		    		row4HashKey.SPLCOUNTRYREGIONID = sortie_map.COUNTRY ;
                        		    		

								
		                        	row4HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row4.lookup( row4HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row4 != null && tHash_Lookup_row4.getCount(row4HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row4' and it contains more one result from keys :  row4.SPLPRICETYPE = '" + row4HashKey.SPLPRICETYPE + "', row4.SPLSEASONCODE = '" + row4HashKey.SPLSEASONCODE + "', row4.SPLCOUNTRYREGIONID = '" + row4HashKey.SPLCOUNTRYREGIONID + "'");
								} // G 071
							

							row4Struct row4 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row4Struct fromLookup_row4 = null;
							row4 = row4Default;
										 
							
								 
							
							
								if (tHash_Lookup_row4 !=null && tHash_Lookup_row4.hasNext()) { // G 099
								
							
								
								fromLookup_row4 = tHash_Lookup_row4.next();

							
							
								} // G 099
							
							

							if(fromLookup_row4 != null) {
								row4 = fromLookup_row4;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

sortie_add_linenumber = null;


// # Output table : 'sortie_add_linenumber'
sortie_add_linenumber_tmp.ITEMNUMBER = sortie_map.ITEMNUMBER ;
sortie_add_linenumber_tmp.PRICE = BigDecimal.valueOf(sortie_map.PRICE ).setScale(2,BigDecimal.ROUND_HALF_UP) ;
sortie_add_linenumber_tmp.PRICECURRENCYCODE = sortie_map.PRICECURRENCYCODE ;
sortie_add_linenumber_tmp.PRICECUSTOMERGROUPCODE = sortie_map.PRICECUSTOMERGROUPCODE ;
sortie_add_linenumber_tmp.PRODUCTCOLORID = sortie_map.PRODUCTCOLORID ;
sortie_add_linenumber_tmp.PRODUCTSIZEID = sortie_map.PRODUCTSIZEID ;
sortie_add_linenumber_tmp.PRODUCTSTYLEID = sortie_map.PRODUCTSTYLEID ;
sortie_add_linenumber_tmp.SEASON = sortie_map.SEASON ;
sortie_add_linenumber_tmp.COUNTRY = sortie_map.COUNTRY ;
sortie_add_linenumber_tmp.GROUPCODE = row4.GROUPCODE ;
sortie_add_linenumber_tmp.FromDate = sortie_map.FromDate ;
sortie_add_linenumber_tmp.ToDate = sortie_map.ToDate ;
sortie_add_linenumber = sortie_add_linenumber_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "sortie_add_linenumber"
if(sortie_add_linenumber != null) { 



	
	/**
	 * [tUniqRow_2 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	
row10 = null;			
if(sortie_add_linenumber.ITEMNUMBER == null){
	finder_tUniqRow_2.ITEMNUMBER = null;
}else{
	finder_tUniqRow_2.ITEMNUMBER = sortie_add_linenumber.ITEMNUMBER.toLowerCase();
}
if(sortie_add_linenumber.PRICECURRENCYCODE == null){
	finder_tUniqRow_2.PRICECURRENCYCODE = null;
}else{
	finder_tUniqRow_2.PRICECURRENCYCODE = sortie_add_linenumber.PRICECURRENCYCODE.toLowerCase();
}
if(sortie_add_linenumber.PRICECUSTOMERGROUPCODE == null){
	finder_tUniqRow_2.PRICECUSTOMERGROUPCODE = null;
}else{
	finder_tUniqRow_2.PRICECUSTOMERGROUPCODE = sortie_add_linenumber.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTCOLORID == null){
	finder_tUniqRow_2.PRODUCTCOLORID = null;
}else{
	finder_tUniqRow_2.PRODUCTCOLORID = sortie_add_linenumber.PRODUCTCOLORID.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTSIZEID == null){
	finder_tUniqRow_2.PRODUCTSIZEID = null;
}else{
	finder_tUniqRow_2.PRODUCTSIZEID = sortie_add_linenumber.PRODUCTSIZEID.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTSTYLEID == null){
	finder_tUniqRow_2.PRODUCTSTYLEID = null;
}else{
	finder_tUniqRow_2.PRODUCTSTYLEID = sortie_add_linenumber.PRODUCTSTYLEID.toLowerCase();
}
if(sortie_add_linenumber.SEASON == null){
	finder_tUniqRow_2.SEASON = null;
}else{
	finder_tUniqRow_2.SEASON = sortie_add_linenumber.SEASON.toLowerCase();
}
if(sortie_add_linenumber.GROUPCODE == null){
	finder_tUniqRow_2.GROUPCODE = null;
}else{
	finder_tUniqRow_2.GROUPCODE = sortie_add_linenumber.GROUPCODE.toLowerCase();
}	
finder_tUniqRow_2.hashCodeDirty = true;
if (!keystUniqRow_2.contains(finder_tUniqRow_2)) {
		KeyStruct_tUniqRow_2 new_tUniqRow_2 = new KeyStruct_tUniqRow_2();

		
if(sortie_add_linenumber.ITEMNUMBER == null){
	new_tUniqRow_2.ITEMNUMBER = null;
}else{
	new_tUniqRow_2.ITEMNUMBER = sortie_add_linenumber.ITEMNUMBER.toLowerCase();
}
if(sortie_add_linenumber.PRICECURRENCYCODE == null){
	new_tUniqRow_2.PRICECURRENCYCODE = null;
}else{
	new_tUniqRow_2.PRICECURRENCYCODE = sortie_add_linenumber.PRICECURRENCYCODE.toLowerCase();
}
if(sortie_add_linenumber.PRICECUSTOMERGROUPCODE == null){
	new_tUniqRow_2.PRICECUSTOMERGROUPCODE = null;
}else{
	new_tUniqRow_2.PRICECUSTOMERGROUPCODE = sortie_add_linenumber.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTCOLORID == null){
	new_tUniqRow_2.PRODUCTCOLORID = null;
}else{
	new_tUniqRow_2.PRODUCTCOLORID = sortie_add_linenumber.PRODUCTCOLORID.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTSIZEID == null){
	new_tUniqRow_2.PRODUCTSIZEID = null;
}else{
	new_tUniqRow_2.PRODUCTSIZEID = sortie_add_linenumber.PRODUCTSIZEID.toLowerCase();
}
if(sortie_add_linenumber.PRODUCTSTYLEID == null){
	new_tUniqRow_2.PRODUCTSTYLEID = null;
}else{
	new_tUniqRow_2.PRODUCTSTYLEID = sortie_add_linenumber.PRODUCTSTYLEID.toLowerCase();
}
if(sortie_add_linenumber.SEASON == null){
	new_tUniqRow_2.SEASON = null;
}else{
	new_tUniqRow_2.SEASON = sortie_add_linenumber.SEASON.toLowerCase();
}
if(sortie_add_linenumber.GROUPCODE == null){
	new_tUniqRow_2.GROUPCODE = null;
}else{
	new_tUniqRow_2.GROUPCODE = sortie_add_linenumber.GROUPCODE.toLowerCase();
}
		
		keystUniqRow_2.add(new_tUniqRow_2);if(row10 == null){ 
	
	row10 = new row10Struct();
}row10.ITEMNUMBER = sortie_add_linenumber.ITEMNUMBER;			row10.PRICE = sortie_add_linenumber.PRICE;			row10.PRICECURRENCYCODE = sortie_add_linenumber.PRICECURRENCYCODE;			row10.PRICECUSTOMERGROUPCODE = sortie_add_linenumber.PRICECUSTOMERGROUPCODE;			row10.PRODUCTCOLORID = sortie_add_linenumber.PRODUCTCOLORID;			row10.PRODUCTSIZEID = sortie_add_linenumber.PRODUCTSIZEID;			row10.PRODUCTSTYLEID = sortie_add_linenumber.PRODUCTSTYLEID;			row10.SEASON = sortie_add_linenumber.SEASON;			row10.COUNTRY = sortie_add_linenumber.COUNTRY;			row10.GROUPCODE = sortie_add_linenumber.GROUPCODE;			row10.FromDate = sortie_add_linenumber.FromDate;			row10.ToDate = sortie_add_linenumber.ToDate;					
		nb_uniques_tUniqRow_2++;
	} else {
	  nb_duplicates_tUniqRow_2++;
	}

 


	tos_count_tUniqRow_2++;

/**
 * [tUniqRow_2 main ] stop
 */
	
	/**
	 * [tUniqRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

 



/**
 * [tUniqRow_2 process_data_begin ] stop
 */
// Start of branch "row10"
if(row10 != null) { 



	
	/**
	 * [tFileOutputDelimited_4 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	


                    StringBuilder sb_tFileOutputDelimited_4 = new StringBuilder();
                            if(row10.ITEMNUMBER != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.ITEMNUMBER
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRICE != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRICE.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRICECURRENCYCODE != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRICECURRENCYCODE
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRICECUSTOMERGROUPCODE != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRICECUSTOMERGROUPCODE
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRODUCTCOLORID != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRODUCTCOLORID
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRODUCTSIZEID != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRODUCTSIZEID
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.PRODUCTSTYLEID != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.PRODUCTSTYLEID
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.SEASON != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.SEASON
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.COUNTRY != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.COUNTRY
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.GROUPCODE != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.GROUPCODE
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.FromDate != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.FromDate
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(row10.ToDate != null) {
                        sb_tFileOutputDelimited_4.append(
                            row10.ToDate
                        );
                            }
                    sb_tFileOutputDelimited_4.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_4);


                    nb_line_tFileOutputDelimited_4++;
                    resourceMap.put("nb_line_tFileOutputDelimited_4", nb_line_tFileOutputDelimited_4);

                        outtFileOutputDelimited_4.write(sb_tFileOutputDelimited_4.toString());




 


	tos_count_tFileOutputDelimited_4++;

/**
 * [tFileOutputDelimited_4 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	

 



/**
 * [tFileOutputDelimited_4 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	

 



/**
 * [tFileOutputDelimited_4 process_data_end ] stop
 */

} // End of branch "row10"




	
	/**
	 * [tUniqRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

 



/**
 * [tUniqRow_2 process_data_end ] stop
 */

} // End of branch "sortie_add_linenumber"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */

} // End of branch "sortie_map"




	
	/**
	 * [tMap_22 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

 



/**
 * [tMap_22 process_data_end ] stop
 */

} // End of branch "row41"




	
	/**
	 * [tMap_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_end ] stop
 */



	
	/**
	 * [tUnite_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	

 



/**
 * [tUnite_2 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_22 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_22";

	

 



/**
 * [tHashInput_22 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_22 end ] start
	 */

	

	
	
	currentComponent="tHashInput_22";

	
    

		
			nb_line_tHashInput_22++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_MASTERFILE_EXTRACT_PRICES_1_" + pid +"_tHashOutput_22");
	


	globalMap.put("tHashInput_22_NB_LINE", nb_line_tHashInput_22);       

 

ok_Hash.put("tHashInput_22", true);
end_Hash.put("tHashInput_22", System.currentTimeMillis());




/**
 * [tHashInput_22 end ] stop
 */
	
	/**
	 * [tUnite_2 end ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	

globalMap.put("tUnite_2_NB_LINE", nb_line_tUnite_2);
 

ok_Hash.put("tUnite_2", true);
end_Hash.put("tUnite_2", System.currentTimeMillis());




/**
 * [tUnite_2 end ] stop
 */

	
	/**
	 * [tMap_8 end ] start
	 */

	

	
	
	currentComponent="tMap_8";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row12 != null) {
						tHash_Lookup_row12.endGet();
					}
					globalMap.remove( "tHash_Lookup_row12" );

					
					
				
// ###############################      





 

ok_Hash.put("tMap_8", true);
end_Hash.put("tMap_8", System.currentTimeMillis());




/**
 * [tMap_8 end ] stop
 */

	
	/**
	 * [tMap_22 end ] start
	 */

	

	
	
	currentComponent="tMap_22";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row9 != null) {
						tHash_Lookup_row9.endGet();
					}
					globalMap.remove( "tHash_Lookup_row9" );

					
					
				
// ###############################      





 

ok_Hash.put("tMap_22", true);
end_Hash.put("tMap_22", System.currentTimeMillis());




/**
 * [tMap_22 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row4 != null) {
						tHash_Lookup_row4.endGet();
					}
					globalMap.remove( "tHash_Lookup_row4" );

					
					
				
// ###############################      





 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tUniqRow_2 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

globalMap.put("tUniqRow_2_NB_UNIQUES",nb_uniques_tUniqRow_2);
globalMap.put("tUniqRow_2_NB_DUPLICATES",nb_duplicates_tUniqRow_2);

 

ok_Hash.put("tUniqRow_2", true);
end_Hash.put("tUniqRow_2", System.currentTimeMillis());




/**
 * [tUniqRow_2 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_4 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	



		
			
					if(outtFileOutputDelimited_4!=null) {
						outtFileOutputDelimited_4.flush();
						outtFileOutputDelimited_4.close();
					}
				
				globalMap.put("tFileOutputDelimited_4_NB_LINE",nb_line_tFileOutputDelimited_4);
				globalMap.put("tFileOutputDelimited_4_FILE_NAME",fileName_tFileOutputDelimited_4);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_4", true);
	

 

ok_Hash.put("tFileOutputDelimited_4", true);
end_Hash.put("tFileOutputDelimited_4", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_4 end ] stop
 */















				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row4"); 
				     			
					     			//free memory for "tMap_22"
					     			globalMap.remove("tHash_Lookup_row9"); 
				     			
					     			//free memory for "tMap_8"
					     			globalMap.remove("tHash_Lookup_row12"); 
				     			
				try{
					
	
	/**
	 * [tHashInput_9 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_9";

	

 



/**
 * [tHashInput_9 finally ] stop
 */
	
	/**
	 * [tHashInput_10 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_10";

	

 



/**
 * [tHashInput_10 finally ] stop
 */
	
	/**
	 * [tHashInput_11 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_11";

	

 



/**
 * [tHashInput_11 finally ] stop
 */
	
	/**
	 * [tHashInput_12 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_12";

	

 



/**
 * [tHashInput_12 finally ] stop
 */
	
	/**
	 * [tHashInput_13 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_13";

	

 



/**
 * [tHashInput_13 finally ] stop
 */
	
	/**
	 * [tHashInput_14 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_14";

	

 



/**
 * [tHashInput_14 finally ] stop
 */
	
	/**
	 * [tHashInput_15 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_15";

	

 



/**
 * [tHashInput_15 finally ] stop
 */
	
	/**
	 * [tHashInput_16 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_16";

	

 



/**
 * [tHashInput_16 finally ] stop
 */
	
	/**
	 * [tHashInput_17 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_17";

	

 



/**
 * [tHashInput_17 finally ] stop
 */
	
	/**
	 * [tHashInput_18 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_18";

	

 



/**
 * [tHashInput_18 finally ] stop
 */
	
	/**
	 * [tHashInput_19 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_19";

	

 



/**
 * [tHashInput_19 finally ] stop
 */
	
	/**
	 * [tHashInput_20 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_20";

	

 



/**
 * [tHashInput_20 finally ] stop
 */
	
	/**
	 * [tHashInput_21 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_21";

	

 



/**
 * [tHashInput_21 finally ] stop
 */
	
	/**
	 * [tHashInput_22 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_22";

	

 



/**
 * [tHashInput_22 finally ] stop
 */
	
	/**
	 * [tUnite_2 finally ] start
	 */

	

	
	
	currentComponent="tUnite_2";

	

 



/**
 * [tUnite_2 finally ] stop
 */

	
	/**
	 * [tMap_8 finally ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 finally ] stop
 */

	
	/**
	 * [tMap_22 finally ] start
	 */

	

	
	
	currentComponent="tMap_22";

	

 



/**
 * [tMap_22 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tUniqRow_2 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

 



/**
 * [tUniqRow_2 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_4 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	


		if(resourceMap.get("finish_tFileOutputDelimited_4") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_4 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_4");
						if(outtFileOutputDelimited_4!=null) {
							outtFileOutputDelimited_4.flush();
							outtFileOutputDelimited_4.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_4 finally ] stop
 */















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_9_SUBPROCESS_STATE", 1);
	}
	


public static class row12Struct implements routines.system.IPersistableComparableLookupRow<row12Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String itemnumber;

				public String getItemnumber () {
					return this.itemnumber;
				}
				
			    public String productcolorid;

				public String getProductcolorid () {
					return this.productcolorid;
				}
				
			    public String productsizeid;

				public String getProductsizeid () {
					return this.productsizeid;
				}
				
			    public String productstyleid;

				public String getProductstyleid () {
					return this.productstyleid;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.itemnumber == null) ? 0 : this.itemnumber.hashCode());
					
						result = prime * result + ((this.productcolorid == null) ? 0 : this.productcolorid.hashCode());
					
						result = prime * result + ((this.productsizeid == null) ? 0 : this.productsizeid.hashCode());
					
						result = prime * result + ((this.productstyleid == null) ? 0 : this.productstyleid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row12Struct other = (row12Struct) obj;
		
						if (this.itemnumber == null) {
							if (other.itemnumber != null)
								return false;
						
						} else if (!this.itemnumber.equals(other.itemnumber))
						
							return false;
					
						if (this.productcolorid == null) {
							if (other.productcolorid != null)
								return false;
						
						} else if (!this.productcolorid.equals(other.productcolorid))
						
							return false;
					
						if (this.productsizeid == null) {
							if (other.productsizeid != null)
								return false;
						
						} else if (!this.productsizeid.equals(other.productsizeid))
						
							return false;
					
						if (this.productstyleid == null) {
							if (other.productstyleid != null)
								return false;
						
						} else if (!this.productstyleid.equals(other.productstyleid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row12Struct other) {

		other.itemnumber = this.itemnumber;
	            other.productcolorid = this.productcolorid;
	            other.productsizeid = this.productsizeid;
	            other.productstyleid = this.productstyleid;
	            
	}

	public void copyKeysDataTo(row12Struct other) {

		other.itemnumber = this.itemnumber;
	            	other.productcolorid = this.productcolorid;
	            	other.productsizeid = this.productsizeid;
	            	other.productstyleid = this.productstyleid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.itemnumber = readString(dis);
					
					this.productcolorid = readString(dis);
					
					this.productsizeid = readString(dis);
					
					this.productstyleid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.itemnumber,dos);
					
					// String
				
						writeString(this.productcolorid,dos);
					
					// String
				
						writeString(this.productsizeid,dos);
					
					// String
				
						writeString(this.productstyleid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		

		

        }

		
        	finally {}

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
        	}
        	finally {}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("itemnumber="+itemnumber);
		sb.append(",productcolorid="+productcolorid);
		sb.append(",productsizeid="+productsizeid);
		sb.append(",productstyleid="+productstyleid);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row12Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.itemnumber, other.itemnumber);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.productcolorid, other.productcolorid);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.productsizeid, other.productsizeid);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.productstyleid, other.productstyleid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row12Struct row12 = new row12Struct();




	
	/**
	 * [tAdvancedHash_row12 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row12", false);
		start_Hash.put("tAdvancedHash_row12", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row12";

	
		int tos_count_tAdvancedHash_row12 = 0;
		

			   		// connection name:row12
			   		// source node:tDBInput_4 - inputs:(after_tHashInput_9) outputs:(row12,row12) | target node:tAdvancedHash_row12 - inputs:(row12) outputs:()
			   		// linked node: tMap_8 - inputs:(row11,row12) outputs:(row41)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row12 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct> tHash_Lookup_row12 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row12Struct>getLookup(matchingModeEnum_row12);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row12", tHash_Lookup_row12);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row12 begin ] stop
 */



	
	/**
	 * [tDBInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_4", false);
		start_Hash.put("tDBInput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_4";

	
		int tos_count_tDBInput_4 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_4 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_4 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_4  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_4, talendToDBArray_tDBInput_4); 
		    int nb_line_tDBInput_4 = 0;
		    java.sql.Connection conn_tDBInput_4 = null;
				String driverClass_tDBInput_4 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
			    java.lang.Class jdbcclazz_tDBInput_4 = java.lang.Class.forName(driverClass_tDBInput_4);
					String dbUser_tDBInput_4 = context.SQLSERVER_Login;
					
					
					
	final String decryptedPassword_tDBInput_4 = context.SQLSERVER_Password; 
					
					String dbPwd_tDBInput_4 = decryptedPassword_tDBInput_4;
				
		    String port_tDBInput_4 = context.SQLSERVER_Port;
		    String dbname_tDBInput_4 = context.SQLSERVER_Database ;		    
		    String url_tDBInput_4 = "jdbc:sqlserver://" + context.SQLSERVER_Server ;
		    if (!"".equals(port_tDBInput_4)) {
		    	url_tDBInput_4 += ":" + context.SQLSERVER_Port;
		    }
		    if (!"".equals(dbname_tDBInput_4)) {		    
		    	url_tDBInput_4 += ";databaseName=" + context.SQLSERVER_Database; 
		    }
		    url_tDBInput_4 += ";appName=" + projectName + ";" + context.SQLSERVER_AdditionalParams;
		    String dbschema_tDBInput_4 = context.SQLSERVER_Schema;
				
				conn_tDBInput_4 = java.sql.DriverManager.getConnection(url_tDBInput_4,dbUser_tDBInput_4,dbPwd_tDBInput_4);
		        
		    
			java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();

		    String dbquery_tDBInput_4 = "\nselect itemnumber,productcolorid,productsizeid, productstyleid from  [data].[D365_ReleasedProductVariantsV2]\n";
			

            	globalMap.put("tDBInput_4_QUERY",dbquery_tDBInput_4);
		    java.sql.ResultSet rs_tDBInput_4 = null;

		    try {
		    	rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
		    	int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

		    String tmpContent_tDBInput_4 = null;
		    
		    
		    while (rs_tDBInput_4.next()) {
		        nb_line_tDBInput_4++;
		        
							if(colQtyInRs_tDBInput_4 < 1) {
								row12.itemnumber = null;
							} else {
	                         		
           		tmpContent_tDBInput_4 = rs_tDBInput_4.getString(1);
            if(tmpContent_tDBInput_4 != null) {
            	if (talendToDBList_tDBInput_4 .contains(rsmd_tDBInput_4.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		row12.itemnumber = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
            	} else {
                	row12.itemnumber = tmpContent_tDBInput_4;
                }
            } else {
                row12.itemnumber = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 2) {
								row12.productcolorid = null;
							} else {
	                         		
           		tmpContent_tDBInput_4 = rs_tDBInput_4.getString(2);
            if(tmpContent_tDBInput_4 != null) {
            	if (talendToDBList_tDBInput_4 .contains(rsmd_tDBInput_4.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		row12.productcolorid = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
            	} else {
                	row12.productcolorid = tmpContent_tDBInput_4;
                }
            } else {
                row12.productcolorid = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 3) {
								row12.productsizeid = null;
							} else {
	                         		
           		tmpContent_tDBInput_4 = rs_tDBInput_4.getString(3);
            if(tmpContent_tDBInput_4 != null) {
            	if (talendToDBList_tDBInput_4 .contains(rsmd_tDBInput_4.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
            		row12.productsizeid = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
            	} else {
                	row12.productsizeid = tmpContent_tDBInput_4;
                }
            } else {
                row12.productsizeid = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 4) {
								row12.productstyleid = null;
							} else {
	                         		
           		tmpContent_tDBInput_4 = rs_tDBInput_4.getString(4);
            if(tmpContent_tDBInput_4 != null) {
            	if (talendToDBList_tDBInput_4 .contains(rsmd_tDBInput_4.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
            		row12.productstyleid = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
            	} else {
                	row12.productstyleid = tmpContent_tDBInput_4;
                }
            } else {
                row12.productstyleid = null;
            }
		                    }
					





 



/**
 * [tDBInput_4 begin ] stop
 */
	
	/**
	 * [tDBInput_4 main ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 


	tos_count_tDBInput_4++;

/**
 * [tDBInput_4 main ] stop
 */
	
	/**
	 * [tDBInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row12 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row12";

	


			   
			   

					row12Struct row12_HashRow = new row12Struct();
		   	   	   
				
				row12_HashRow.itemnumber = row12.itemnumber;
				
				row12_HashRow.productcolorid = row12.productcolorid;
				
				row12_HashRow.productsizeid = row12.productsizeid;
				
				row12_HashRow.productstyleid = row12.productstyleid;
				
			tHash_Lookup_row12.put(row12_HashRow);
			
            




 


	tos_count_tAdvancedHash_row12++;

/**
 * [tAdvancedHash_row12 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row12";

	

 



/**
 * [tAdvancedHash_row12 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row12 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row12";

	

 



/**
 * [tAdvancedHash_row12 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_4 end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

	}
}finally{
	if (rs_tDBInput_4 != null) {
		rs_tDBInput_4.close();
	}
	if (stmt_tDBInput_4 != null) {
		stmt_tDBInput_4.close();
	}
		if(conn_tDBInput_4 != null && !conn_tDBInput_4.isClosed()) {
			
			conn_tDBInput_4.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_4_NB_LINE",nb_line_tDBInput_4);

 

ok_Hash.put("tDBInput_4", true);
end_Hash.put("tDBInput_4", System.currentTimeMillis());




/**
 * [tDBInput_4 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row12 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row12";

	

tHash_Lookup_row12.endPut();

 

ok_Hash.put("tAdvancedHash_row12", true);
end_Hash.put("tAdvancedHash_row12", System.currentTimeMillis());




/**
 * [tAdvancedHash_row12 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row12 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row12";

	

 



/**
 * [tAdvancedHash_row12 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class row4Struct implements routines.system.IPersistableComparableLookupRow<row4Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String SPLPRICETYPE;

				public String getSPLPRICETYPE () {
					return this.SPLPRICETYPE;
				}
				
			    public String SPLSEASONCODE;

				public String getSPLSEASONCODE () {
					return this.SPLSEASONCODE;
				}
				
			    public String SPLCOUNTRYREGIONID;

				public String getSPLCOUNTRYREGIONID () {
					return this.SPLCOUNTRYREGIONID;
				}
				
			    public String GROUPCODE;

				public String getGROUPCODE () {
					return this.GROUPCODE;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.SPLPRICETYPE == null) ? 0 : this.SPLPRICETYPE.hashCode());
					
						result = prime * result + ((this.SPLSEASONCODE == null) ? 0 : this.SPLSEASONCODE.hashCode());
					
						result = prime * result + ((this.SPLCOUNTRYREGIONID == null) ? 0 : this.SPLCOUNTRYREGIONID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row4Struct other = (row4Struct) obj;
		
						if (this.SPLPRICETYPE == null) {
							if (other.SPLPRICETYPE != null)
								return false;
						
						} else if (!this.SPLPRICETYPE.equals(other.SPLPRICETYPE))
						
							return false;
					
						if (this.SPLSEASONCODE == null) {
							if (other.SPLSEASONCODE != null)
								return false;
						
						} else if (!this.SPLSEASONCODE.equals(other.SPLSEASONCODE))
						
							return false;
					
						if (this.SPLCOUNTRYREGIONID == null) {
							if (other.SPLCOUNTRYREGIONID != null)
								return false;
						
						} else if (!this.SPLCOUNTRYREGIONID.equals(other.SPLCOUNTRYREGIONID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row4Struct other) {

		other.SPLPRICETYPE = this.SPLPRICETYPE;
	            other.SPLSEASONCODE = this.SPLSEASONCODE;
	            other.SPLCOUNTRYREGIONID = this.SPLCOUNTRYREGIONID;
	            other.GROUPCODE = this.GROUPCODE;
	            
	}

	public void copyKeysDataTo(row4Struct other) {

		other.SPLPRICETYPE = this.SPLPRICETYPE;
	            	other.SPLSEASONCODE = this.SPLSEASONCODE;
	            	other.SPLCOUNTRYREGIONID = this.SPLCOUNTRYREGIONID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.SPLPRICETYPE = readString(dis);
					
					this.SPLSEASONCODE = readString(dis);
					
					this.SPLCOUNTRYREGIONID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SPLPRICETYPE,dos);
					
					// String
				
						writeString(this.SPLSEASONCODE,dos);
					
					// String
				
						writeString(this.SPLCOUNTRYREGIONID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.GROUPCODE = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.GROUPCODE, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SPLPRICETYPE="+SPLPRICETYPE);
		sb.append(",SPLSEASONCODE="+SPLSEASONCODE);
		sb.append(",SPLCOUNTRYREGIONID="+SPLCOUNTRYREGIONID);
		sb.append(",GROUPCODE="+GROUPCODE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SPLPRICETYPE, other.SPLPRICETYPE);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.SPLSEASONCODE, other.SPLSEASONCODE);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.SPLCOUNTRYREGIONID, other.SPLCOUNTRYREGIONID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();




	
	/**
	 * [tAdvancedHash_row4 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row4", false);
		start_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row4";

	
		int tos_count_tAdvancedHash_row4 = 0;
		

			   		// connection name:row4
			   		// source node:tDBInput_1 - inputs:(after_tHashInput_9) outputs:(row4,row4) | target node:tAdvancedHash_row4 - inputs:(row4) outputs:()
			   		// linked node: tMap_2 - inputs:(sortie_map,row4) outputs:(sortie_add_linenumber)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row4 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row4Struct>getLookup(matchingModeEnum_row4);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row4", tHash_Lookup_row4);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row4 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_1 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_1 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_1  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_1, talendToDBArray_tDBInput_1); 
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
			    java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
					String dbUser_tDBInput_1 = context.SQLSERVER_Login;
					
					
					
	final String decryptedPassword_tDBInput_1 = context.SQLSERVER_Password; 
					
					String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;
				
		    String port_tDBInput_1 = context.SQLSERVER_Port;
		    String dbname_tDBInput_1 = context.SQLSERVER_Database ;		    
		    String url_tDBInput_1 = "jdbc:sqlserver://" + context.SQLSERVER_Server ;
		    if (!"".equals(port_tDBInput_1)) {
		    	url_tDBInput_1 += ":" + context.SQLSERVER_Port;
		    }
		    if (!"".equals(dbname_tDBInput_1)) {		    
		    	url_tDBInput_1 += ";databaseName=" + context.SQLSERVER_Database; 
		    }
		    url_tDBInput_1 += ";appName=" + projectName + ";" + context.SQLSERVER_AdditionalParams;
		    String dbschema_tDBInput_1 = context.SQLSERVER_Schema;
				
				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1,dbUser_tDBInput_1,dbPwd_tDBInput_1);
		        
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "select SPLPRICETYPE, SPLSEASONCODE,isnull(SPLCOUNTRYREGIONID,'') as SPLCOUNTRYREGIONID, GROUPCODE from data.D365_PriceC"
+"ustomerGroups";
			

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row4.SPLPRICETYPE = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(1);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		row4.SPLPRICETYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row4.SPLPRICETYPE = tmpContent_tDBInput_1;
                }
            } else {
                row4.SPLPRICETYPE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								row4.SPLSEASONCODE = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(2);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		row4.SPLSEASONCODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row4.SPLSEASONCODE = tmpContent_tDBInput_1;
                }
            } else {
                row4.SPLSEASONCODE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								row4.SPLCOUNTRYREGIONID = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(3);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
            		row4.SPLCOUNTRYREGIONID = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row4.SPLCOUNTRYREGIONID = tmpContent_tDBInput_1;
                }
            } else {
                row4.SPLCOUNTRYREGIONID = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								row4.GROUPCODE = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(4);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
            		row4.GROUPCODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row4.GROUPCODE = tmpContent_tDBInput_1;
                }
            } else {
                row4.GROUPCODE = null;
            }
		                    }
					





 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row4 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	


			   
			   

					row4Struct row4_HashRow = new row4Struct();
		   	   	   
				
				row4_HashRow.SPLPRICETYPE = row4.SPLPRICETYPE;
				
				row4_HashRow.SPLSEASONCODE = row4.SPLSEASONCODE;
				
				row4_HashRow.SPLCOUNTRYREGIONID = row4.SPLCOUNTRYREGIONID;
				
				row4_HashRow.GROUPCODE = row4.GROUPCODE;
				
			tHash_Lookup_row4.put(row4_HashRow);
			
            




 


	tos_count_tAdvancedHash_row4++;

/**
 * [tAdvancedHash_row4 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	

 



/**
 * [tAdvancedHash_row4 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row4 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	

 



/**
 * [tAdvancedHash_row4 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
		if(conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {
			
			conn_tDBInput_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);

 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row4 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	

tHash_Lookup_row4.endPut();

 

ok_Hash.put("tAdvancedHash_row4", true);
end_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());




/**
 * [tAdvancedHash_row4 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row4 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	

 



/**
 * [tAdvancedHash_row4 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row9Struct implements routines.system.IPersistableComparableLookupRow<row9Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String SEASONCODE;

				public String getSEASONCODE () {
					return this.SEASONCODE;
				}
				
			    public String FromDate;

				public String getFromDate () {
					return this.FromDate;
				}
				
			    public String ToDate;

				public String getToDate () {
					return this.ToDate;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.SEASONCODE == null) ? 0 : this.SEASONCODE.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row9Struct other = (row9Struct) obj;
		
						if (this.SEASONCODE == null) {
							if (other.SEASONCODE != null)
								return false;
						
						} else if (!this.SEASONCODE.equals(other.SEASONCODE))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row9Struct other) {

		other.SEASONCODE = this.SEASONCODE;
	            other.FromDate = this.FromDate;
	            other.ToDate = this.ToDate;
	            
	}

	public void copyKeysDataTo(row9Struct other) {

		other.SEASONCODE = this.SEASONCODE;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.SEASONCODE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SEASONCODE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.FromDate = readString(dis,ois);
					
						this.ToDate = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.FromDate, dos, oos);
					
						writeString(this.ToDate, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SEASONCODE="+SEASONCODE);
		sb.append(",FromDate="+FromDate);
		sb.append(",ToDate="+ToDate);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SEASONCODE, other.SEASONCODE);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row9Struct row9 = new row9Struct();




	
	/**
	 * [tAdvancedHash_row9 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row9", false);
		start_Hash.put("tAdvancedHash_row9", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row9";

	
		int tos_count_tAdvancedHash_row9 = 0;
		

			   		// connection name:row9
			   		// source node:tDBInput_3 - inputs:(after_tHashInput_9) outputs:(row9,row9) | target node:tAdvancedHash_row9 - inputs:(row9) outputs:()
			   		// linked node: tMap_22 - inputs:(row41,row9) outputs:(sortie_map)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row9 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct> tHash_Lookup_row9 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row9Struct>getLookup(matchingModeEnum_row9);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row9", tHash_Lookup_row9);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row9 begin ] stop
 */



	
	/**
	 * [tDBInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_3", false);
		start_Hash.put("tDBInput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_3";

	
		int tos_count_tDBInput_3 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_3 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_3 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_3  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_3, talendToDBArray_tDBInput_3); 
		    int nb_line_tDBInput_3 = 0;
		    java.sql.Connection conn_tDBInput_3 = null;
				String driverClass_tDBInput_3 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
			    java.lang.Class jdbcclazz_tDBInput_3 = java.lang.Class.forName(driverClass_tDBInput_3);
					String dbUser_tDBInput_3 = context.SQLSERVER_Login;
					
					
					
	final String decryptedPassword_tDBInput_3 = context.SQLSERVER_Password; 
					
					String dbPwd_tDBInput_3 = decryptedPassword_tDBInput_3;
				
		    String port_tDBInput_3 = context.SQLSERVER_Port;
		    String dbname_tDBInput_3 = context.SQLSERVER_Database ;		    
		    String url_tDBInput_3 = "jdbc:sqlserver://" + context.SQLSERVER_Server ;
		    if (!"".equals(port_tDBInput_3)) {
		    	url_tDBInput_3 += ":" + context.SQLSERVER_Port;
		    }
		    if (!"".equals(dbname_tDBInput_3)) {		    
		    	url_tDBInput_3 += ";databaseName=" + context.SQLSERVER_Database; 
		    }
		    url_tDBInput_3 += ";appName=" + projectName + ";" + context.SQLSERVER_AdditionalParams;
		    String dbschema_tDBInput_3 = context.SQLSERVER_Schema;
				
				conn_tDBInput_3 = java.sql.DriverManager.getConnection(url_tDBInput_3,dbUser_tDBInput_3,dbPwd_tDBInput_3);
		        
		    
			java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

		    String dbquery_tDBInput_3 = "\nselect SEASONCODE, \n		RIGHT( '0' +cast(DAY(getdate()) as varchar),2) + RIGHT( '0' + cast(MONTH(getdate()) as varchar"
+"),2) + cast(YEAR(getdate()) as varchar) as FromDate\n	, ''  as ToDate\n from \n data.D365_K3FashionRetailSeasons\n";
			

            	globalMap.put("tDBInput_3_QUERY",dbquery_tDBInput_3);
		    java.sql.ResultSet rs_tDBInput_3 = null;

		    try {
		    	rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
		    	int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

		    String tmpContent_tDBInput_3 = null;
		    
		    
		    while (rs_tDBInput_3.next()) {
		        nb_line_tDBInput_3++;
		        
							if(colQtyInRs_tDBInput_3 < 1) {
								row9.SEASONCODE = null;
							} else {
	                         		
           		tmpContent_tDBInput_3 = rs_tDBInput_3.getString(1);
            if(tmpContent_tDBInput_3 != null) {
            	if (talendToDBList_tDBInput_3 .contains(rsmd_tDBInput_3.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		row9.SEASONCODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
            	} else {
                	row9.SEASONCODE = tmpContent_tDBInput_3;
                }
            } else {
                row9.SEASONCODE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 2) {
								row9.FromDate = null;
							} else {
	                         		
           		tmpContent_tDBInput_3 = rs_tDBInput_3.getString(2);
            if(tmpContent_tDBInput_3 != null) {
            	if (talendToDBList_tDBInput_3 .contains(rsmd_tDBInput_3.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		row9.FromDate = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
            	} else {
                	row9.FromDate = tmpContent_tDBInput_3;
                }
            } else {
                row9.FromDate = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 3) {
								row9.ToDate = null;
							} else {
	                         		
           		tmpContent_tDBInput_3 = rs_tDBInput_3.getString(3);
            if(tmpContent_tDBInput_3 != null) {
            	if (talendToDBList_tDBInput_3 .contains(rsmd_tDBInput_3.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
            		row9.ToDate = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
            	} else {
                	row9.ToDate = tmpContent_tDBInput_3;
                }
            } else {
                row9.ToDate = null;
            }
		                    }
					





 



/**
 * [tDBInput_3 begin ] stop
 */
	
	/**
	 * [tDBInput_3 main ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 


	tos_count_tDBInput_3++;

/**
 * [tDBInput_3 main ] stop
 */
	
	/**
	 * [tDBInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row9 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";

	


			   
			   

					row9Struct row9_HashRow = new row9Struct();
		   	   	   
				
				row9_HashRow.SEASONCODE = row9.SEASONCODE;
				
				row9_HashRow.FromDate = row9.FromDate;
				
				row9_HashRow.ToDate = row9.ToDate;
				
			tHash_Lookup_row9.put(row9_HashRow);
			
            




 


	tos_count_tAdvancedHash_row9++;

/**
 * [tAdvancedHash_row9 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";

	

 



/**
 * [tAdvancedHash_row9 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row9 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";

	

 



/**
 * [tAdvancedHash_row9 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_3 end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

	}
}finally{
	if (rs_tDBInput_3 != null) {
		rs_tDBInput_3.close();
	}
	if (stmt_tDBInput_3 != null) {
		stmt_tDBInput_3.close();
	}
		if(conn_tDBInput_3 != null && !conn_tDBInput_3.isClosed()) {
			
			conn_tDBInput_3.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_3_NB_LINE",nb_line_tDBInput_3);

 

ok_Hash.put("tDBInput_3", true);
end_Hash.put("tDBInput_3", System.currentTimeMillis());




/**
 * [tDBInput_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row9 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";

	

tHash_Lookup_row9.endPut();

 

ok_Hash.put("tAdvancedHash_row9", true);
end_Hash.put("tAdvancedHash_row9", System.currentTimeMillis());




/**
 * [tAdvancedHash_row9 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row9 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";

	

 



/**
 * [tAdvancedHash_row9 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class row76Struct implements routines.system.IPersistableRow<row76Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String COUNTRY;

				public String getCOUNTRY () {
					return this.COUNTRY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.COUNTRY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.COUNTRY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
		sb.append(",SEASON="+SEASON);
		sb.append(",COUNTRY="+COUNTRY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row76Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row75Struct implements routines.system.IPersistableRow<row75Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String COUNTRY;

				public String getCOUNTRY () {
					return this.COUNTRY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.COUNTRY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.COUNTRY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
		sb.append(",SEASON="+SEASON);
		sb.append(",COUNTRY="+COUNTRY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row75Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0Struct implements routines.system.IPersistableRow<copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String COUNTRY;

				public String getCOUNTRY () {
					return this.COUNTRY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.COUNTRY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.COUNTRY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
		sb.append(",SEASON="+SEASON);
		sb.append(",COUNTRY="+COUNTRY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row74Struct implements routines.system.IPersistableRow<row74Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String COUNTRY;

				public String getCOUNTRY () {
					return this.COUNTRY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.COUNTRY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.COUNTRY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
		sb.append(",SEASON="+SEASON);
		sb.append(",COUNTRY="+COUNTRY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row74Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row73Struct implements routines.system.IPersistableRow<row73Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String COUNTRY;

				public String getCOUNTRY () {
					return this.COUNTRY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.COUNTRY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.COUNTRY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
		sb.append(",SEASON="+SEASON);
		sb.append(",COUNTRY="+COUNTRY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row73Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0Struct implements routines.system.IPersistableRow<copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String COUNTRY;

				public String getCOUNTRY () {
					return this.COUNTRY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.COUNTRY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.COUNTRY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
		sb.append(",SEASON="+SEASON);
		sb.append(",COUNTRY="+COUNTRY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_full_EUR_FIN_WSPStruct implements routines.system.IPersistableRow<sortie_full_EUR_FIN_WSPStruct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				
			    public String LABELD365;

				public String getLABELD365 () {
					return this.LABELD365;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
					this.LABELD365 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
					// String
				
						writeString(this.LABELD365,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
		sb.append(",LABELD365="+LABELD365);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_full_EUR_FIN_WSPStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class Main1Struct implements routines.system.IPersistableRow<Main1Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String COUNTRY;

				public String getCOUNTRY () {
					return this.COUNTRY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.COUNTRY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.COUNTRY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
		sb.append(",SEASON="+SEASON);
		sb.append(",COUNTRY="+COUNTRY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Main1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row69Struct implements routines.system.IPersistableRow<row69Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String COUNTRY;

				public String getCOUNTRY () {
					return this.COUNTRY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.COUNTRY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.COUNTRY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
		sb.append(",SEASON="+SEASON);
		sb.append(",COUNTRY="+COUNTRY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row69Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0Struct implements routines.system.IPersistableRow<copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String COUNTRY;

				public String getCOUNTRY () {
					return this.COUNTRY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.COUNTRY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.COUNTRY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
		sb.append(",SEASON="+SEASON);
		sb.append(",COUNTRY="+COUNTRY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_full_SEK_RRPStruct implements routines.system.IPersistableRow<sortie_full_SEK_RRPStruct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				
			    public String LABELD365;

				public String getLABELD365 () {
					return this.LABELD365;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
					this.LABELD365 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
					// String
				
						writeString(this.LABELD365,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
		sb.append(",LABELD365="+LABELD365);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_full_SEK_RRPStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row67Struct implements routines.system.IPersistableRow<row67Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String COUNTRY;

				public String getCOUNTRY () {
					return this.COUNTRY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.COUNTRY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.COUNTRY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
		sb.append(",SEASON="+SEASON);
		sb.append(",COUNTRY="+COUNTRY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row67Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row68Struct implements routines.system.IPersistableRow<row68Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String COUNTRY;

				public String getCOUNTRY () {
					return this.COUNTRY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.COUNTRY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.COUNTRY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
		sb.append(",SEASON="+SEASON);
		sb.append(",COUNTRY="+COUNTRY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row68Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0Struct implements routines.system.IPersistableRow<copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String COUNTRY;

				public String getCOUNTRY () {
					return this.COUNTRY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.COUNTRY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.COUNTRY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
		sb.append(",SEASON="+SEASON);
		sb.append(",COUNTRY="+COUNTRY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_full_SEK_WSPStruct implements routines.system.IPersistableRow<sortie_full_SEK_WSPStruct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				
			    public String LABELD365;

				public String getLABELD365 () {
					return this.LABELD365;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
					this.LABELD365 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
					// String
				
						writeString(this.LABELD365,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
		sb.append(",LABELD365="+LABELD365);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_full_SEK_WSPStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row63Struct implements routines.system.IPersistableRow<row63Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String COUNTRY;

				public String getCOUNTRY () {
					return this.COUNTRY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.COUNTRY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.COUNTRY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
		sb.append(",SEASON="+SEASON);
		sb.append(",COUNTRY="+COUNTRY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row63Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row64Struct implements routines.system.IPersistableRow<row64Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String COUNTRY;

				public String getCOUNTRY () {
					return this.COUNTRY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.COUNTRY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.COUNTRY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
		sb.append(",SEASON="+SEASON);
		sb.append(",COUNTRY="+COUNTRY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row64Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0Struct implements routines.system.IPersistableRow<copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String COUNTRY;

				public String getCOUNTRY () {
					return this.COUNTRY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.COUNTRY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.COUNTRY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
		sb.append(",SEASON="+SEASON);
		sb.append(",COUNTRY="+COUNTRY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_full_DKK_WSPStruct implements routines.system.IPersistableRow<sortie_full_DKK_WSPStruct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				
			    public String LABELD365;

				public String getLABELD365 () {
					return this.LABELD365;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
					this.LABELD365 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
					// String
				
						writeString(this.LABELD365,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
		sb.append(",LABELD365="+LABELD365);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_full_DKK_WSPStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row62Struct implements routines.system.IPersistableRow<row62Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String COUNTRY;

				public String getCOUNTRY () {
					return this.COUNTRY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.COUNTRY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.COUNTRY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
		sb.append(",SEASON="+SEASON);
		sb.append(",COUNTRY="+COUNTRY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row62Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row61Struct implements routines.system.IPersistableRow<row61Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String COUNTRY;

				public String getCOUNTRY () {
					return this.COUNTRY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.COUNTRY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.COUNTRY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
		sb.append(",SEASON="+SEASON);
		sb.append(",COUNTRY="+COUNTRY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row61Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0Struct implements routines.system.IPersistableRow<copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String COUNTRY;

				public String getCOUNTRY () {
					return this.COUNTRY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.COUNTRY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.COUNTRY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
		sb.append(",SEASON="+SEASON);
		sb.append(",COUNTRY="+COUNTRY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_full_DKK_RRPStruct implements routines.system.IPersistableRow<sortie_full_DKK_RRPStruct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				
			    public String LABELD365;

				public String getLABELD365 () {
					return this.LABELD365;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
					this.LABELD365 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
					// String
				
						writeString(this.LABELD365,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
		sb.append(",LABELD365="+LABELD365);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_full_DKK_RRPStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row58Struct implements routines.system.IPersistableRow<row58Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String COUNTRY;

				public String getCOUNTRY () {
					return this.COUNTRY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.COUNTRY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.COUNTRY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
		sb.append(",SEASON="+SEASON);
		sb.append(",COUNTRY="+COUNTRY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row58Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row57Struct implements routines.system.IPersistableRow<row57Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String COUNTRY;

				public String getCOUNTRY () {
					return this.COUNTRY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.COUNTRY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.COUNTRY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
		sb.append(",SEASON="+SEASON);
		sb.append(",COUNTRY="+COUNTRY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row57Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0Struct implements routines.system.IPersistableRow<copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String COUNTRY;

				public String getCOUNTRY () {
					return this.COUNTRY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.COUNTRY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.COUNTRY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
		sb.append(",SEASON="+SEASON);
		sb.append(",COUNTRY="+COUNTRY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_full_nok_rrpStruct implements routines.system.IPersistableRow<sortie_full_nok_rrpStruct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				
			    public String LABELD365;

				public String getLABELD365 () {
					return this.LABELD365;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
					this.LABELD365 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
					// String
				
						writeString(this.LABELD365,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
		sb.append(",LABELD365="+LABELD365);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_full_nok_rrpStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row56Struct implements routines.system.IPersistableRow<row56Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String COUNTRY;

				public String getCOUNTRY () {
					return this.COUNTRY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.COUNTRY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.COUNTRY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
		sb.append(",SEASON="+SEASON);
		sb.append(",COUNTRY="+COUNTRY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row56Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row55Struct implements routines.system.IPersistableRow<row55Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String COUNTRY;

				public String getCOUNTRY () {
					return this.COUNTRY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.COUNTRY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.COUNTRY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
		sb.append(",SEASON="+SEASON);
		sb.append(",COUNTRY="+COUNTRY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row55Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0Struct implements routines.system.IPersistableRow<copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String COUNTRY;

				public String getCOUNTRY () {
					return this.COUNTRY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.COUNTRY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.COUNTRY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
		sb.append(",SEASON="+SEASON);
		sb.append(",COUNTRY="+COUNTRY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_full_NOK_WSPStruct implements routines.system.IPersistableRow<sortie_full_NOK_WSPStruct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				
			    public String LABELD365;

				public String getLABELD365 () {
					return this.LABELD365;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
					this.LABELD365 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
					// String
				
						writeString(this.LABELD365,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
		sb.append(",LABELD365="+LABELD365);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_full_NOK_WSPStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row50Struct implements routines.system.IPersistableRow<row50Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String COUNTRY;

				public String getCOUNTRY () {
					return this.COUNTRY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.COUNTRY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.COUNTRY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
		sb.append(",SEASON="+SEASON);
		sb.append(",COUNTRY="+COUNTRY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row50Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row49Struct implements routines.system.IPersistableRow<row49Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String COUNTRY;

				public String getCOUNTRY () {
					return this.COUNTRY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.COUNTRY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.COUNTRY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
		sb.append(",SEASON="+SEASON);
		sb.append(",COUNTRY="+COUNTRY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row49Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0Struct implements routines.system.IPersistableRow<copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String COUNTRY;

				public String getCOUNTRY () {
					return this.COUNTRY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.COUNTRY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.COUNTRY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
		sb.append(",SEASON="+SEASON);
		sb.append(",COUNTRY="+COUNTRY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_full_chr_rrpStruct implements routines.system.IPersistableRow<sortie_full_chr_rrpStruct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				
			    public String LABELD365;

				public String getLABELD365 () {
					return this.LABELD365;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
					this.LABELD365 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
					// String
				
						writeString(this.LABELD365,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
		sb.append(",LABELD365="+LABELD365);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_full_chr_rrpStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row48Struct implements routines.system.IPersistableRow<row48Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String COUNTRY;

				public String getCOUNTRY () {
					return this.COUNTRY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.COUNTRY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.COUNTRY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
		sb.append(",SEASON="+SEASON);
		sb.append(",COUNTRY="+COUNTRY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row48Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row47Struct implements routines.system.IPersistableRow<row47Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String COUNTRY;

				public String getCOUNTRY () {
					return this.COUNTRY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.COUNTRY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.COUNTRY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
		sb.append(",SEASON="+SEASON);
		sb.append(",COUNTRY="+COUNTRY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row47Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfcopyOfsortie_EUR_WSP_0Struct implements routines.system.IPersistableRow<copyOfcopyOfcopyOfsortie_EUR_WSP_0Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String COUNTRY;

				public String getCOUNTRY () {
					return this.COUNTRY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.COUNTRY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.COUNTRY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
		sb.append(",SEASON="+SEASON);
		sb.append(",COUNTRY="+COUNTRY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfcopyOfsortie_EUR_WSP_0Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_full_CHF_WSPStruct implements routines.system.IPersistableRow<sortie_full_CHF_WSPStruct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				
			    public String LABELD365;

				public String getLABELD365 () {
					return this.LABELD365;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
					this.LABELD365 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
					// String
				
						writeString(this.LABELD365,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
		sb.append(",LABELD365="+LABELD365);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_full_CHF_WSPStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row46Struct implements routines.system.IPersistableRow<row46Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String COUNTRY;

				public String getCOUNTRY () {
					return this.COUNTRY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.COUNTRY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.COUNTRY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
		sb.append(",SEASON="+SEASON);
		sb.append(",COUNTRY="+COUNTRY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row46Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row45Struct implements routines.system.IPersistableRow<row45Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String COUNTRY;

				public String getCOUNTRY () {
					return this.COUNTRY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.COUNTRY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.COUNTRY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
		sb.append(",SEASON="+SEASON);
		sb.append(",COUNTRY="+COUNTRY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row45Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfsortie_EUR_WSP_0Struct implements routines.system.IPersistableRow<copyOfcopyOfsortie_EUR_WSP_0Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String COUNTRY;

				public String getCOUNTRY () {
					return this.COUNTRY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.COUNTRY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.COUNTRY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
		sb.append(",SEASON="+SEASON);
		sb.append(",COUNTRY="+COUNTRY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfsortie_EUR_WSP_0Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_full_GBP_RRPStruct implements routines.system.IPersistableRow<sortie_full_GBP_RRPStruct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				
			    public String LABELD365;

				public String getLABELD365 () {
					return this.LABELD365;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
					this.LABELD365 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
					// String
				
						writeString(this.LABELD365,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
		sb.append(",LABELD365="+LABELD365);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_full_GBP_RRPStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row44Struct implements routines.system.IPersistableRow<row44Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String COUNTRY;

				public String getCOUNTRY () {
					return this.COUNTRY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.COUNTRY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.COUNTRY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
		sb.append(",SEASON="+SEASON);
		sb.append(",COUNTRY="+COUNTRY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row44Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row43Struct implements routines.system.IPersistableRow<row43Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String COUNTRY;

				public String getCOUNTRY () {
					return this.COUNTRY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.COUNTRY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.COUNTRY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
		sb.append(",SEASON="+SEASON);
		sb.append(",COUNTRY="+COUNTRY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row43Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfsortie_EUR_WSP_0Struct implements routines.system.IPersistableRow<copyOfsortie_EUR_WSP_0Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String COUNTRY;

				public String getCOUNTRY () {
					return this.COUNTRY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.COUNTRY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.COUNTRY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
		sb.append(",SEASON="+SEASON);
		sb.append(",COUNTRY="+COUNTRY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfsortie_EUR_WSP_0Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_full_gbp_wspStruct implements routines.system.IPersistableRow<sortie_full_gbp_wspStruct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				
			    public String LABELD365;

				public String getLABELD365 () {
					return this.LABELD365;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
					this.LABELD365 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
					// String
				
						writeString(this.LABELD365,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
		sb.append(",LABELD365="+LABELD365);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_full_gbp_wspStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row38Struct implements routines.system.IPersistableRow<row38Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String COUNTRY;

				public String getCOUNTRY () {
					return this.COUNTRY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.COUNTRY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.COUNTRY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
		sb.append(",SEASON="+SEASON);
		sb.append(",COUNTRY="+COUNTRY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row38Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row36Struct implements routines.system.IPersistableRow<row36Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String COUNTRY;

				public String getCOUNTRY () {
					return this.COUNTRY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.COUNTRY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.COUNTRY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
		sb.append(",SEASON="+SEASON);
		sb.append(",COUNTRY="+COUNTRY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row36Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfsortie_EUR_WSPStruct implements routines.system.IPersistableRow<copyOfsortie_EUR_WSPStruct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String COUNTRY;

				public String getCOUNTRY () {
					return this.COUNTRY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.COUNTRY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.COUNTRY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
		sb.append(",SEASON="+SEASON);
		sb.append(",COUNTRY="+COUNTRY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfsortie_EUR_WSPStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_full_rrp_eurStruct implements routines.system.IPersistableRow<sortie_full_rrp_eurStruct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				
			    public String LABELD365;

				public String getLABELD365 () {
					return this.LABELD365;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
					this.LABELD365 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
					// String
				
						writeString(this.LABELD365,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
		sb.append(",LABELD365="+LABELD365);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_full_rrp_eurStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row37Struct implements routines.system.IPersistableRow<row37Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String COUNTRY;

				public String getCOUNTRY () {
					return this.COUNTRY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.COUNTRY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.COUNTRY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
		sb.append(",SEASON="+SEASON);
		sb.append(",COUNTRY="+COUNTRY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row37Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row35Struct implements routines.system.IPersistableRow<row35Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String COUNTRY;

				public String getCOUNTRY () {
					return this.COUNTRY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.COUNTRY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.COUNTRY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
		sb.append(",SEASON="+SEASON);
		sb.append(",COUNTRY="+COUNTRY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row35Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_EUR_WSPStruct implements routines.system.IPersistableRow<sortie_EUR_WSPStruct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String TRADEAGREEMENTJOURNALNUMBER;

				public String getTRADEAGREEMENTJOURNALNUMBER () {
					return this.TRADEAGREEMENTJOURNALNUMBER;
				}
				
			    public String ITEMNUMBER;

				public String getITEMNUMBER () {
					return this.ITEMNUMBER;
				}
				
			    public Double PRICE;

				public Double getPRICE () {
					return this.PRICE;
				}
				
			    public String PRICECURRENCYCODE;

				public String getPRICECURRENCYCODE () {
					return this.PRICECURRENCYCODE;
				}
				
			    public String PRICECUSTOMERGROUPCODE;

				public String getPRICECUSTOMERGROUPCODE () {
					return this.PRICECUSTOMERGROUPCODE;
				}
				
			    public String PRODUCTCOLORID;

				public String getPRODUCTCOLORID () {
					return this.PRODUCTCOLORID;
				}
				
			    public String PRODUCTSIZEID;

				public String getPRODUCTSIZEID () {
					return this.PRODUCTSIZEID;
				}
				
			    public String PRODUCTSTYLEID;

				public String getPRODUCTSTYLEID () {
					return this.PRODUCTSTYLEID;
				}
				
			    public String QUANTITYUNITSYMBOL;

				public String getQUANTITYUNITSYMBOL () {
					return this.QUANTITYUNITSYMBOL;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String COUNTRY;

				public String getCOUNTRY () {
					return this.COUNTRY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.TRADEAGREEMENTJOURNALNUMBER = readString(dis);
					
					this.ITEMNUMBER = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRICE = null;
           				} else {
           			    	this.PRICE = dis.readDouble();
           				}
					
					this.PRICECURRENCYCODE = readString(dis);
					
					this.PRICECUSTOMERGROUPCODE = readString(dis);
					
					this.PRODUCTCOLORID = readString(dis);
					
					this.PRODUCTSIZEID = readString(dis);
					
					this.PRODUCTSTYLEID = readString(dis);
					
					this.QUANTITYUNITSYMBOL = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.COUNTRY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.TRADEAGREEMENTJOURNALNUMBER,dos);
					
					// String
				
						writeString(this.ITEMNUMBER,dos);
					
					// Double
				
						if(this.PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRICE);
		            	}
					
					// String
				
						writeString(this.PRICECURRENCYCODE,dos);
					
					// String
				
						writeString(this.PRICECUSTOMERGROUPCODE,dos);
					
					// String
				
						writeString(this.PRODUCTCOLORID,dos);
					
					// String
				
						writeString(this.PRODUCTSIZEID,dos);
					
					// String
				
						writeString(this.PRODUCTSTYLEID,dos);
					
					// String
				
						writeString(this.QUANTITYUNITSYMBOL,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.COUNTRY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TRADEAGREEMENTJOURNALNUMBER="+TRADEAGREEMENTJOURNALNUMBER);
		sb.append(",ITEMNUMBER="+ITEMNUMBER);
		sb.append(",PRICE="+String.valueOf(PRICE));
		sb.append(",PRICECURRENCYCODE="+PRICECURRENCYCODE);
		sb.append(",PRICECUSTOMERGROUPCODE="+PRICECUSTOMERGROUPCODE);
		sb.append(",PRODUCTCOLORID="+PRODUCTCOLORID);
		sb.append(",PRODUCTSIZEID="+PRODUCTSIZEID);
		sb.append(",PRODUCTSTYLEID="+PRODUCTSTYLEID);
		sb.append(",QUANTITYUNITSYMBOL="+QUANTITYUNITSYMBOL);
		sb.append(",SEASON="+SEASON);
		sb.append(",COUNTRY="+COUNTRY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_EUR_WSPStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_full_eur_wspStruct implements routines.system.IPersistableRow<sortie_full_eur_wspStruct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				
			    public String LABELD365;

				public String getLABELD365 () {
					return this.LABELD365;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
					this.LABELD365 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
					// String
				
						writeString(this.LABELD365,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
		sb.append(",LABELD365="+LABELD365);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_full_eur_wspStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_ExcelStruct implements routines.system.IPersistableRow<sortie_ExcelStruct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				
			    public String EAN;

				public String getEAN () {
					return this.EAN;
				}
				
			    public String PRODUCT_CHANNEL;

				public String getPRODUCT_CHANNEL () {
					return this.PRODUCT_CHANNEL;
				}
				
			    public String SUSTAINABILITY;

				public String getSUSTAINABILITY () {
					return this.SUSTAINABILITY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
					this.EAN = readString(dis);
					
					this.PRODUCT_CHANNEL = readString(dis);
					
					this.SUSTAINABILITY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
					// String
				
						writeString(this.EAN,dos);
					
					// String
				
						writeString(this.PRODUCT_CHANNEL,dos);
					
					// String
				
						writeString(this.SUSTAINABILITY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
		sb.append(",EAN="+EAN);
		sb.append(",PRODUCT_CHANNEL="+PRODUCT_CHANNEL);
		sb.append(",SUSTAINABILITY="+SUSTAINABILITY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_ExcelStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class sortie_Excel1Struct implements routines.system.IPersistableRow<sortie_Excel1Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String SIZE_RATIO_SPLIT;

				public String getSIZE_RATIO_SPLIT () {
					return this.SIZE_RATIO_SPLIT;
				}
				
			    public String REC_SIZE_SPLIT;

				public String getREC_SIZE_SPLIT () {
					return this.REC_SIZE_SPLIT;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String ATTRIBUTE;

				public String getATTRIBUTE () {
					return this.ATTRIBUTE;
				}
				
			    public String UNITS;

				public String getUNITS () {
					return this.UNITS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String SMU_TYPE;

				public String getSMU_TYPE () {
					return this.SMU_TYPE;
				}
				
			    public String EAN;

				public String getEAN () {
					return this.EAN;
				}
				
			    public String PRODUCT_CHANNEL;

				public String getPRODUCT_CHANNEL () {
					return this.PRODUCT_CHANNEL;
				}
				
			    public String SUSTAINABILITY;

				public String getSUSTAINABILITY () {
					return this.SUSTAINABILITY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.LBL = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.SIZE_RATIO_SPLIT = readString(dis);
					
					this.REC_SIZE_SPLIT = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.ATTRIBUTE = readString(dis);
					
					this.UNITS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.SMU_TYPE = readString(dis);
					
					this.EAN = readString(dis);
					
					this.PRODUCT_CHANNEL = readString(dis);
					
					this.SUSTAINABILITY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.SIZE_RATIO_SPLIT,dos);
					
					// String
				
						writeString(this.REC_SIZE_SPLIT,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.ATTRIBUTE,dos);
					
					// String
				
						writeString(this.UNITS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.SMU_TYPE,dos);
					
					// String
				
						writeString(this.EAN,dos);
					
					// String
				
						writeString(this.PRODUCT_CHANNEL,dos);
					
					// String
				
						writeString(this.SUSTAINABILITY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",FASHION="+FASHION);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",LBL="+LBL);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",SIZE_RATIO_SPLIT="+SIZE_RATIO_SPLIT);
		sb.append(",REC_SIZE_SPLIT="+REC_SIZE_SPLIT);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",ATTRIBUTE="+ATTRIBUTE);
		sb.append(",UNITS="+UNITS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",SMU_TYPE="+SMU_TYPE);
		sb.append(",EAN="+EAN);
		sb.append(",PRODUCT_CHANNEL="+PRODUCT_CHANNEL);
		sb.append(",SUSTAINABILITY="+SUSTAINABILITY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_Excel1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_CHANNEL;

				public String getPRODUCT_CHANNEL () {
					return this.PRODUCT_CHANNEL;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String EAN;

				public String getEAN () {
					return this.EAN;
				}
				
			    public String DELIVERYFLOW;

				public String getDELIVERYFLOW () {
					return this.DELIVERYFLOW;
				}
				
			    public String SUSTAINABILITY;

				public String getSUSTAINABILITY () {
					return this.SUSTAINABILITY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.LBL = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_CHANNEL = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.EAN = readString(dis);
					
					this.DELIVERYFLOW = readString(dis);
					
					this.SUSTAINABILITY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_CHANNEL,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.EAN,dos);
					
					// String
				
						writeString(this.DELIVERYFLOW,dos);
					
					// String
				
						writeString(this.SUSTAINABILITY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",LBL="+LBL);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",FASHION="+FASHION);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_CHANNEL="+PRODUCT_CHANNEL);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",EAN="+EAN);
		sb.append(",DELIVERYFLOW="+DELIVERYFLOW);
		sb.append(",SUSTAINABILITY="+SUSTAINABILITY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_5Struct implements routines.system.IPersistableRow<after_tDBInput_5Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String BRAND;

				public String getBRAND () {
					return this.BRAND;
				}
				
			    public String SEASON;

				public String getSEASON () {
					return this.SEASON;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String REF;

				public String getREF () {
					return this.REF;
				}
				
			    public String DESCRIPTION;

				public String getDESCRIPTION () {
					return this.DESCRIPTION;
				}
				
			    public String STYLE;

				public String getSTYLE () {
					return this.STYLE;
				}
				
			    public String COLOR;

				public String getCOLOR () {
					return this.COLOR;
				}
				
			    public String COLORNAME;

				public String getCOLORNAME () {
					return this.COLORNAME;
				}
				
			    public String STYLE_COLOR;

				public String getSTYLE_COLOR () {
					return this.STYLE_COLOR;
				}
				
			    public String STYLECOLORLABEL;

				public String getSTYLECOLORLABEL () {
					return this.STYLECOLORLABEL;
				}
				
			    public String LBL;

				public String getLBL () {
					return this.LBL;
				}
				
			    public String GENDER;

				public String getGENDER () {
					return this.GENDER;
				}
				
			    public String AGE_RANGE;

				public String getAGE_RANGE () {
					return this.AGE_RANGE;
				}
				
			    public String SIZE_RANGE;

				public String getSIZE_RANGE () {
					return this.SIZE_RANGE;
				}
				
			    public String SIZE;

				public String getSIZE () {
					return this.SIZE;
				}
				
			    public String US_SIZE;

				public String getUS_SIZE () {
					return this.US_SIZE;
				}
				
			    public String CM_SIZE;

				public String getCM_SIZE () {
					return this.CM_SIZE;
				}
				
			    public String FASHION;

				public String getFASHION () {
					return this.FASHION;
				}
				
			    public String PRODUCT;

				public String getPRODUCT () {
					return this.PRODUCT;
				}
				
			    public String PRODUCT_CHANNEL;

				public String getPRODUCT_CHANNEL () {
					return this.PRODUCT_CHANNEL;
				}
				
			    public String PRODUCT_STATUS;

				public String getPRODUCT_STATUS () {
					return this.PRODUCT_STATUS;
				}
				
			    public String PRODUCT_TIER;

				public String getPRODUCT_TIER () {
					return this.PRODUCT_TIER;
				}
				
			    public String ACCT_EXCLUS;

				public String getACCT_EXCLUS () {
					return this.ACCT_EXCLUS;
				}
				
			    public String EUR_RRP;

				public String getEUR_RRP () {
					return this.EUR_RRP;
				}
				
			    public String EUR_WSP;

				public String getEUR_WSP () {
					return this.EUR_WSP;
				}
				
			    public String GBP_RRP;

				public String getGBP_RRP () {
					return this.GBP_RRP;
				}
				
			    public String GBP_WSP;

				public String getGBP_WSP () {
					return this.GBP_WSP;
				}
				
			    public String CHF_RRP;

				public String getCHF_RRP () {
					return this.CHF_RRP;
				}
				
			    public String CHF_WSP;

				public String getCHF_WSP () {
					return this.CHF_WSP;
				}
				
			    public String DKK_RRP;

				public String getDKK_RRP () {
					return this.DKK_RRP;
				}
				
			    public String DKK_WSP;

				public String getDKK_WSP () {
					return this.DKK_WSP;
				}
				
			    public String NOK_RRP;

				public String getNOK_RRP () {
					return this.NOK_RRP;
				}
				
			    public String NOK_WSP;

				public String getNOK_WSP () {
					return this.NOK_WSP;
				}
				
			    public String SEK_RRP;

				public String getSEK_RRP () {
					return this.SEK_RRP;
				}
				
			    public String SEK_WSP;

				public String getSEK_WSP () {
					return this.SEK_WSP;
				}
				
			    public String EUR_FINN_RRP;

				public String getEUR_FINN_RRP () {
					return this.EUR_FINN_RRP;
				}
				
			    public String EUR_FINN_WSP;

				public String getEUR_FINN_WSP () {
					return this.EUR_FINN_WSP;
				}
				
			    public String CARTON_QTY;

				public String getCARTON_QTY () {
					return this.CARTON_QTY;
				}
				
			    public String FABRICATION;

				public String getFABRICATION () {
					return this.FABRICATION;
				}
				
			    public String COO;

				public String getCOO () {
					return this.COO;
				}
				
			    public String CUSTOM_TARIFF_CODE;

				public String getCUSTOM_TARIFF_CODE () {
					return this.CUSTOM_TARIFF_CODE;
				}
				
			    public String UPC;

				public String getUPC () {
					return this.UPC;
				}
				
			    public String EAN;

				public String getEAN () {
					return this.EAN;
				}
				
			    public String DELIVERYFLOW;

				public String getDELIVERYFLOW () {
					return this.DELIVERYFLOW;
				}
				
			    public String SUSTAINABILITY;

				public String getSUSTAINABILITY () {
					return this.SUSTAINABILITY;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.BRAND = readString(dis);
					
					this.SEASON = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.REF = readString(dis);
					
					this.DESCRIPTION = readString(dis);
					
					this.STYLE = readString(dis);
					
					this.COLOR = readString(dis);
					
					this.COLORNAME = readString(dis);
					
					this.STYLE_COLOR = readString(dis);
					
					this.STYLECOLORLABEL = readString(dis);
					
					this.LBL = readString(dis);
					
					this.GENDER = readString(dis);
					
					this.AGE_RANGE = readString(dis);
					
					this.SIZE_RANGE = readString(dis);
					
					this.SIZE = readString(dis);
					
					this.US_SIZE = readString(dis);
					
					this.CM_SIZE = readString(dis);
					
					this.FASHION = readString(dis);
					
					this.PRODUCT = readString(dis);
					
					this.PRODUCT_CHANNEL = readString(dis);
					
					this.PRODUCT_STATUS = readString(dis);
					
					this.PRODUCT_TIER = readString(dis);
					
					this.ACCT_EXCLUS = readString(dis);
					
					this.EUR_RRP = readString(dis);
					
					this.EUR_WSP = readString(dis);
					
					this.GBP_RRP = readString(dis);
					
					this.GBP_WSP = readString(dis);
					
					this.CHF_RRP = readString(dis);
					
					this.CHF_WSP = readString(dis);
					
					this.DKK_RRP = readString(dis);
					
					this.DKK_WSP = readString(dis);
					
					this.NOK_RRP = readString(dis);
					
					this.NOK_WSP = readString(dis);
					
					this.SEK_RRP = readString(dis);
					
					this.SEK_WSP = readString(dis);
					
					this.EUR_FINN_RRP = readString(dis);
					
					this.EUR_FINN_WSP = readString(dis);
					
					this.CARTON_QTY = readString(dis);
					
					this.FABRICATION = readString(dis);
					
					this.COO = readString(dis);
					
					this.CUSTOM_TARIFF_CODE = readString(dis);
					
					this.UPC = readString(dis);
					
					this.EAN = readString(dis);
					
					this.DELIVERYFLOW = readString(dis);
					
					this.SUSTAINABILITY = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.BRAND,dos);
					
					// String
				
						writeString(this.SEASON,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.REF,dos);
					
					// String
				
						writeString(this.DESCRIPTION,dos);
					
					// String
				
						writeString(this.STYLE,dos);
					
					// String
				
						writeString(this.COLOR,dos);
					
					// String
				
						writeString(this.COLORNAME,dos);
					
					// String
				
						writeString(this.STYLE_COLOR,dos);
					
					// String
				
						writeString(this.STYLECOLORLABEL,dos);
					
					// String
				
						writeString(this.LBL,dos);
					
					// String
				
						writeString(this.GENDER,dos);
					
					// String
				
						writeString(this.AGE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE_RANGE,dos);
					
					// String
				
						writeString(this.SIZE,dos);
					
					// String
				
						writeString(this.US_SIZE,dos);
					
					// String
				
						writeString(this.CM_SIZE,dos);
					
					// String
				
						writeString(this.FASHION,dos);
					
					// String
				
						writeString(this.PRODUCT,dos);
					
					// String
				
						writeString(this.PRODUCT_CHANNEL,dos);
					
					// String
				
						writeString(this.PRODUCT_STATUS,dos);
					
					// String
				
						writeString(this.PRODUCT_TIER,dos);
					
					// String
				
						writeString(this.ACCT_EXCLUS,dos);
					
					// String
				
						writeString(this.EUR_RRP,dos);
					
					// String
				
						writeString(this.EUR_WSP,dos);
					
					// String
				
						writeString(this.GBP_RRP,dos);
					
					// String
				
						writeString(this.GBP_WSP,dos);
					
					// String
				
						writeString(this.CHF_RRP,dos);
					
					// String
				
						writeString(this.CHF_WSP,dos);
					
					// String
				
						writeString(this.DKK_RRP,dos);
					
					// String
				
						writeString(this.DKK_WSP,dos);
					
					// String
				
						writeString(this.NOK_RRP,dos);
					
					// String
				
						writeString(this.NOK_WSP,dos);
					
					// String
				
						writeString(this.SEK_RRP,dos);
					
					// String
				
						writeString(this.SEK_WSP,dos);
					
					// String
				
						writeString(this.EUR_FINN_RRP,dos);
					
					// String
				
						writeString(this.EUR_FINN_WSP,dos);
					
					// String
				
						writeString(this.CARTON_QTY,dos);
					
					// String
				
						writeString(this.FABRICATION,dos);
					
					// String
				
						writeString(this.COO,dos);
					
					// String
				
						writeString(this.CUSTOM_TARIFF_CODE,dos);
					
					// String
				
						writeString(this.UPC,dos);
					
					// String
				
						writeString(this.EAN,dos);
					
					// String
				
						writeString(this.DELIVERYFLOW,dos);
					
					// String
				
						writeString(this.SUSTAINABILITY,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("BRAND="+BRAND);
		sb.append(",SEASON="+SEASON);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",REF="+REF);
		sb.append(",DESCRIPTION="+DESCRIPTION);
		sb.append(",STYLE="+STYLE);
		sb.append(",COLOR="+COLOR);
		sb.append(",COLORNAME="+COLORNAME);
		sb.append(",STYLE_COLOR="+STYLE_COLOR);
		sb.append(",STYLECOLORLABEL="+STYLECOLORLABEL);
		sb.append(",LBL="+LBL);
		sb.append(",GENDER="+GENDER);
		sb.append(",AGE_RANGE="+AGE_RANGE);
		sb.append(",SIZE_RANGE="+SIZE_RANGE);
		sb.append(",SIZE="+SIZE);
		sb.append(",US_SIZE="+US_SIZE);
		sb.append(",CM_SIZE="+CM_SIZE);
		sb.append(",FASHION="+FASHION);
		sb.append(",PRODUCT="+PRODUCT);
		sb.append(",PRODUCT_CHANNEL="+PRODUCT_CHANNEL);
		sb.append(",PRODUCT_STATUS="+PRODUCT_STATUS);
		sb.append(",PRODUCT_TIER="+PRODUCT_TIER);
		sb.append(",ACCT_EXCLUS="+ACCT_EXCLUS);
		sb.append(",EUR_RRP="+EUR_RRP);
		sb.append(",EUR_WSP="+EUR_WSP);
		sb.append(",GBP_RRP="+GBP_RRP);
		sb.append(",GBP_WSP="+GBP_WSP);
		sb.append(",CHF_RRP="+CHF_RRP);
		sb.append(",CHF_WSP="+CHF_WSP);
		sb.append(",DKK_RRP="+DKK_RRP);
		sb.append(",DKK_WSP="+DKK_WSP);
		sb.append(",NOK_RRP="+NOK_RRP);
		sb.append(",NOK_WSP="+NOK_WSP);
		sb.append(",SEK_RRP="+SEK_RRP);
		sb.append(",SEK_WSP="+SEK_WSP);
		sb.append(",EUR_FINN_RRP="+EUR_FINN_RRP);
		sb.append(",EUR_FINN_WSP="+EUR_FINN_WSP);
		sb.append(",CARTON_QTY="+CARTON_QTY);
		sb.append(",FABRICATION="+FABRICATION);
		sb.append(",COO="+COO);
		sb.append(",CUSTOM_TARIFF_CODE="+CUSTOM_TARIFF_CODE);
		sb.append(",UPC="+UPC);
		sb.append(",EAN="+EAN);
		sb.append(",DELIVERYFLOW="+DELIVERYFLOW);
		sb.append(",SUSTAINABILITY="+SUSTAINABILITY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_2Process(globalMap);

		row1Struct row1 = new row1Struct();
sortie_Excel1Struct sortie_Excel1 = new sortie_Excel1Struct();
sortie_ExcelStruct sortie_Excel = new sortie_ExcelStruct();
sortie_EUR_WSPStruct sortie_EUR_WSP = new sortie_EUR_WSPStruct();
row35Struct row35 = new row35Struct();
row37Struct row37 = new row37Struct();
sortie_full_eur_wspStruct sortie_full_eur_wsp = new sortie_full_eur_wspStruct();
copyOfsortie_EUR_WSPStruct copyOfsortie_EUR_WSP = new copyOfsortie_EUR_WSPStruct();
row36Struct row36 = new row36Struct();
row38Struct row38 = new row38Struct();
sortie_full_rrp_eurStruct sortie_full_rrp_eur = new sortie_full_rrp_eurStruct();
copyOfsortie_EUR_WSP_0Struct copyOfsortie_EUR_WSP_0 = new copyOfsortie_EUR_WSP_0Struct();
row43Struct row43 = new row43Struct();
row44Struct row44 = new row44Struct();
sortie_full_gbp_wspStruct sortie_full_gbp_wsp = new sortie_full_gbp_wspStruct();
copyOfcopyOfsortie_EUR_WSP_0Struct copyOfcopyOfsortie_EUR_WSP_0 = new copyOfcopyOfsortie_EUR_WSP_0Struct();
row45Struct row45 = new row45Struct();
row46Struct row46 = new row46Struct();
sortie_full_GBP_RRPStruct sortie_full_GBP_RRP = new sortie_full_GBP_RRPStruct();
copyOfcopyOfcopyOfsortie_EUR_WSP_0Struct copyOfcopyOfcopyOfsortie_EUR_WSP_0 = new copyOfcopyOfcopyOfsortie_EUR_WSP_0Struct();
row47Struct row47 = new row47Struct();
row48Struct row48 = new row48Struct();
sortie_full_CHF_WSPStruct sortie_full_CHF_WSP = new sortie_full_CHF_WSPStruct();
copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0Struct copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0 = new copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0Struct();
row49Struct row49 = new row49Struct();
row50Struct row50 = new row50Struct();
sortie_full_chr_rrpStruct sortie_full_chr_rrp = new sortie_full_chr_rrpStruct();
copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0Struct copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0 = new copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0Struct();
row55Struct row55 = new row55Struct();
row56Struct row56 = new row56Struct();
sortie_full_NOK_WSPStruct sortie_full_NOK_WSP = new sortie_full_NOK_WSPStruct();
copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0Struct copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0 = new copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0Struct();
row57Struct row57 = new row57Struct();
row58Struct row58 = new row58Struct();
sortie_full_nok_rrpStruct sortie_full_nok_rrp = new sortie_full_nok_rrpStruct();
copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0Struct copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0 = new copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0Struct();
row61Struct row61 = new row61Struct();
row62Struct row62 = new row62Struct();
sortie_full_DKK_RRPStruct sortie_full_DKK_RRP = new sortie_full_DKK_RRPStruct();
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0Struct copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0 = new copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0Struct();
row64Struct row64 = new row64Struct();
row63Struct row63 = new row63Struct();
sortie_full_DKK_WSPStruct sortie_full_DKK_WSP = new sortie_full_DKK_WSPStruct();
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0Struct copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0 = new copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0Struct();
row68Struct row68 = new row68Struct();
row67Struct row67 = new row67Struct();
sortie_full_SEK_WSPStruct sortie_full_SEK_WSP = new sortie_full_SEK_WSPStruct();
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0Struct copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0 = new copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0Struct();
row69Struct row69 = new row69Struct();
Main1Struct Main1 = new Main1Struct();
sortie_full_SEK_RRPStruct sortie_full_SEK_RRP = new sortie_full_SEK_RRPStruct();
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0Struct copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0 = new copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0Struct();
row73Struct row73 = new row73Struct();
row74Struct row74 = new row74Struct();
sortie_full_EUR_FIN_WSPStruct sortie_full_EUR_FIN_WSP = new sortie_full_EUR_FIN_WSPStruct();
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0Struct copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0 = new copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0Struct();
row75Struct row75 = new row75Struct();
row76Struct row76 = new row76Struct();









	
	/**
	 * [tHashOutput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_9", false);
		start_Hash.put("tHashOutput_9", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_9";

	
		int tos_count_tHashOutput_9 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_9=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row37Struct> tHashFile_tHashOutput_9 = null;
		String hashKey_tHashOutput_9 = "tHashFile_MASTERFILE_EXTRACT_PRICES_1_" + pid + "_tHashOutput_9";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_9)){
			    if(mf_tHashOutput_9.getResourceMap().get(hashKey_tHashOutput_9) == null){
	      		    mf_tHashOutput_9.getResourceMap().put(hashKey_tHashOutput_9, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row37Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_9 = mf_tHashOutput_9.getResourceMap().get(hashKey_tHashOutput_9);
			    }else{
			    	tHashFile_tHashOutput_9 = mf_tHashOutput_9.getResourceMap().get(hashKey_tHashOutput_9);
			    }
			}
        int nb_line_tHashOutput_9 = 0;
 



/**
 * [tHashOutput_9 begin ] stop
 */



	
	/**
	 * [tFilterRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_2", false);
		start_Hash.put("tFilterRow_2", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_2";

	
		int tos_count_tFilterRow_2 = 0;
		
    int nb_line_tFilterRow_2 = 0;
    int nb_line_ok_tFilterRow_2 = 0;
    int nb_line_reject_tFilterRow_2 = 0;

    class Operator_tFilterRow_2 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_2(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_2 begin ] stop
 */



	
	/**
	 * [tUniqRow_18 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_18", false);
		start_Hash.put("tUniqRow_18", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_18";

	
		int tos_count_tUniqRow_18 = 0;
		

	
		class KeyStruct_tUniqRow_18 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String TRADEAGREEMENTJOURNALNUMBER;
					String ITEMNUMBER;
					Double PRICE;
					String PRICECURRENCYCODE;
					String PRICECUSTOMERGROUPCODE;
					String PRODUCTCOLORID;
					String PRODUCTSIZEID;
					String PRODUCTSTYLEID;
					String QUANTITYUNITSYMBOL;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.TRADEAGREEMENTJOURNALNUMBER == null) ? 0 : this.TRADEAGREEMENTJOURNALNUMBER.hashCode());
								
								result = prime * result + ((this.ITEMNUMBER == null) ? 0 : this.ITEMNUMBER.hashCode());
								
								result = prime * result + ((this.PRICE == null) ? 0 : this.PRICE.hashCode());
								
								result = prime * result + ((this.PRICECURRENCYCODE == null) ? 0 : this.PRICECURRENCYCODE.hashCode());
								
								result = prime * result + ((this.PRICECUSTOMERGROUPCODE == null) ? 0 : this.PRICECUSTOMERGROUPCODE.hashCode());
								
								result = prime * result + ((this.PRODUCTCOLORID == null) ? 0 : this.PRODUCTCOLORID.hashCode());
								
								result = prime * result + ((this.PRODUCTSIZEID == null) ? 0 : this.PRODUCTSIZEID.hashCode());
								
								result = prime * result + ((this.PRODUCTSTYLEID == null) ? 0 : this.PRODUCTSTYLEID.hashCode());
								
								result = prime * result + ((this.QUANTITYUNITSYMBOL == null) ? 0 : this.QUANTITYUNITSYMBOL.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_18 other = (KeyStruct_tUniqRow_18) obj;
				
									if (this.TRADEAGREEMENTJOURNALNUMBER == null) {
										if (other.TRADEAGREEMENTJOURNALNUMBER != null) 
											return false;
								
									} else if (!this.TRADEAGREEMENTJOURNALNUMBER.equals(other.TRADEAGREEMENTJOURNALNUMBER))
								 
										return false;
								
									if (this.ITEMNUMBER == null) {
										if (other.ITEMNUMBER != null) 
											return false;
								
									} else if (!this.ITEMNUMBER.equals(other.ITEMNUMBER))
								 
										return false;
								
									if (this.PRICE == null) {
										if (other.PRICE != null) 
											return false;
								
									} else if (!this.PRICE.equals(other.PRICE))
								 
										return false;
								
									if (this.PRICECURRENCYCODE == null) {
										if (other.PRICECURRENCYCODE != null) 
											return false;
								
									} else if (!this.PRICECURRENCYCODE.equals(other.PRICECURRENCYCODE))
								 
										return false;
								
									if (this.PRICECUSTOMERGROUPCODE == null) {
										if (other.PRICECUSTOMERGROUPCODE != null) 
											return false;
								
									} else if (!this.PRICECUSTOMERGROUPCODE.equals(other.PRICECUSTOMERGROUPCODE))
								 
										return false;
								
									if (this.PRODUCTCOLORID == null) {
										if (other.PRODUCTCOLORID != null) 
											return false;
								
									} else if (!this.PRODUCTCOLORID.equals(other.PRODUCTCOLORID))
								 
										return false;
								
									if (this.PRODUCTSIZEID == null) {
										if (other.PRODUCTSIZEID != null) 
											return false;
								
									} else if (!this.PRODUCTSIZEID.equals(other.PRODUCTSIZEID))
								 
										return false;
								
									if (this.PRODUCTSTYLEID == null) {
										if (other.PRODUCTSTYLEID != null) 
											return false;
								
									} else if (!this.PRODUCTSTYLEID.equals(other.PRODUCTSTYLEID))
								 
										return false;
								
									if (this.QUANTITYUNITSYMBOL == null) {
										if (other.QUANTITYUNITSYMBOL != null) 
											return false;
								
									} else if (!this.QUANTITYUNITSYMBOL.equals(other.QUANTITYUNITSYMBOL))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_18 = 0;
int nb_duplicates_tUniqRow_18 = 0;
KeyStruct_tUniqRow_18 finder_tUniqRow_18 = new KeyStruct_tUniqRow_18();
java.util.Set<KeyStruct_tUniqRow_18> keystUniqRow_18 = new java.util.HashSet<KeyStruct_tUniqRow_18>(); 

 



/**
 * [tUniqRow_18 begin ] stop
 */







	
	/**
	 * [tHashOutput_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_10", false);
		start_Hash.put("tHashOutput_10", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_10";

	
		int tos_count_tHashOutput_10 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_10=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row38Struct> tHashFile_tHashOutput_10 = null;
		String hashKey_tHashOutput_10 = "tHashFile_MASTERFILE_EXTRACT_PRICES_1_" + pid + "_tHashOutput_10";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_10)){
			    if(mf_tHashOutput_10.getResourceMap().get(hashKey_tHashOutput_10) == null){
	      		    mf_tHashOutput_10.getResourceMap().put(hashKey_tHashOutput_10, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row38Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_10 = mf_tHashOutput_10.getResourceMap().get(hashKey_tHashOutput_10);
			    }else{
			    	tHashFile_tHashOutput_10 = mf_tHashOutput_10.getResourceMap().get(hashKey_tHashOutput_10);
			    }
			}
        int nb_line_tHashOutput_10 = 0;
 



/**
 * [tHashOutput_10 begin ] stop
 */



	
	/**
	 * [tFilterRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_3", false);
		start_Hash.put("tFilterRow_3", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_3";

	
		int tos_count_tFilterRow_3 = 0;
		
    int nb_line_tFilterRow_3 = 0;
    int nb_line_ok_tFilterRow_3 = 0;
    int nb_line_reject_tFilterRow_3 = 0;

    class Operator_tFilterRow_3 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_3(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_3 begin ] stop
 */



	
	/**
	 * [tUniqRow_19 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_19", false);
		start_Hash.put("tUniqRow_19", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_19";

	
		int tos_count_tUniqRow_19 = 0;
		

	
		class KeyStruct_tUniqRow_19 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String TRADEAGREEMENTJOURNALNUMBER;
					String ITEMNUMBER;
					Double PRICE;
					String PRICECURRENCYCODE;
					String PRICECUSTOMERGROUPCODE;
					String PRODUCTCOLORID;
					String PRODUCTSIZEID;
					String PRODUCTSTYLEID;
					String QUANTITYUNITSYMBOL;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.TRADEAGREEMENTJOURNALNUMBER == null) ? 0 : this.TRADEAGREEMENTJOURNALNUMBER.hashCode());
								
								result = prime * result + ((this.ITEMNUMBER == null) ? 0 : this.ITEMNUMBER.hashCode());
								
								result = prime * result + ((this.PRICE == null) ? 0 : this.PRICE.hashCode());
								
								result = prime * result + ((this.PRICECURRENCYCODE == null) ? 0 : this.PRICECURRENCYCODE.hashCode());
								
								result = prime * result + ((this.PRICECUSTOMERGROUPCODE == null) ? 0 : this.PRICECUSTOMERGROUPCODE.hashCode());
								
								result = prime * result + ((this.PRODUCTCOLORID == null) ? 0 : this.PRODUCTCOLORID.hashCode());
								
								result = prime * result + ((this.PRODUCTSIZEID == null) ? 0 : this.PRODUCTSIZEID.hashCode());
								
								result = prime * result + ((this.PRODUCTSTYLEID == null) ? 0 : this.PRODUCTSTYLEID.hashCode());
								
								result = prime * result + ((this.QUANTITYUNITSYMBOL == null) ? 0 : this.QUANTITYUNITSYMBOL.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_19 other = (KeyStruct_tUniqRow_19) obj;
				
									if (this.TRADEAGREEMENTJOURNALNUMBER == null) {
										if (other.TRADEAGREEMENTJOURNALNUMBER != null) 
											return false;
								
									} else if (!this.TRADEAGREEMENTJOURNALNUMBER.equals(other.TRADEAGREEMENTJOURNALNUMBER))
								 
										return false;
								
									if (this.ITEMNUMBER == null) {
										if (other.ITEMNUMBER != null) 
											return false;
								
									} else if (!this.ITEMNUMBER.equals(other.ITEMNUMBER))
								 
										return false;
								
									if (this.PRICE == null) {
										if (other.PRICE != null) 
											return false;
								
									} else if (!this.PRICE.equals(other.PRICE))
								 
										return false;
								
									if (this.PRICECURRENCYCODE == null) {
										if (other.PRICECURRENCYCODE != null) 
											return false;
								
									} else if (!this.PRICECURRENCYCODE.equals(other.PRICECURRENCYCODE))
								 
										return false;
								
									if (this.PRICECUSTOMERGROUPCODE == null) {
										if (other.PRICECUSTOMERGROUPCODE != null) 
											return false;
								
									} else if (!this.PRICECUSTOMERGROUPCODE.equals(other.PRICECUSTOMERGROUPCODE))
								 
										return false;
								
									if (this.PRODUCTCOLORID == null) {
										if (other.PRODUCTCOLORID != null) 
											return false;
								
									} else if (!this.PRODUCTCOLORID.equals(other.PRODUCTCOLORID))
								 
										return false;
								
									if (this.PRODUCTSIZEID == null) {
										if (other.PRODUCTSIZEID != null) 
											return false;
								
									} else if (!this.PRODUCTSIZEID.equals(other.PRODUCTSIZEID))
								 
										return false;
								
									if (this.PRODUCTSTYLEID == null) {
										if (other.PRODUCTSTYLEID != null) 
											return false;
								
									} else if (!this.PRODUCTSTYLEID.equals(other.PRODUCTSTYLEID))
								 
										return false;
								
									if (this.QUANTITYUNITSYMBOL == null) {
										if (other.QUANTITYUNITSYMBOL != null) 
											return false;
								
									} else if (!this.QUANTITYUNITSYMBOL.equals(other.QUANTITYUNITSYMBOL))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_19 = 0;
int nb_duplicates_tUniqRow_19 = 0;
KeyStruct_tUniqRow_19 finder_tUniqRow_19 = new KeyStruct_tUniqRow_19();
java.util.Set<KeyStruct_tUniqRow_19> keystUniqRow_19 = new java.util.HashSet<KeyStruct_tUniqRow_19>(); 

 



/**
 * [tUniqRow_19 begin ] stop
 */







	
	/**
	 * [tHashOutput_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_11", false);
		start_Hash.put("tHashOutput_11", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_11";

	
		int tos_count_tHashOutput_11 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_11=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row44Struct> tHashFile_tHashOutput_11 = null;
		String hashKey_tHashOutput_11 = "tHashFile_MASTERFILE_EXTRACT_PRICES_1_" + pid + "_tHashOutput_11";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_11)){
			    if(mf_tHashOutput_11.getResourceMap().get(hashKey_tHashOutput_11) == null){
	      		    mf_tHashOutput_11.getResourceMap().put(hashKey_tHashOutput_11, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row44Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_11 = mf_tHashOutput_11.getResourceMap().get(hashKey_tHashOutput_11);
			    }else{
			    	tHashFile_tHashOutput_11 = mf_tHashOutput_11.getResourceMap().get(hashKey_tHashOutput_11);
			    }
			}
        int nb_line_tHashOutput_11 = 0;
 



/**
 * [tHashOutput_11 begin ] stop
 */



	
	/**
	 * [tFilterRow_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_4", false);
		start_Hash.put("tFilterRow_4", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_4";

	
		int tos_count_tFilterRow_4 = 0;
		
    int nb_line_tFilterRow_4 = 0;
    int nb_line_ok_tFilterRow_4 = 0;
    int nb_line_reject_tFilterRow_4 = 0;

    class Operator_tFilterRow_4 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_4(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_4 begin ] stop
 */



	
	/**
	 * [tUniqRow_20 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_20", false);
		start_Hash.put("tUniqRow_20", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_20";

	
		int tos_count_tUniqRow_20 = 0;
		

	
		class KeyStruct_tUniqRow_20 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String TRADEAGREEMENTJOURNALNUMBER;
					String ITEMNUMBER;
					Double PRICE;
					String PRICECURRENCYCODE;
					String PRICECUSTOMERGROUPCODE;
					String PRODUCTCOLORID;
					String PRODUCTSIZEID;
					String PRODUCTSTYLEID;
					String QUANTITYUNITSYMBOL;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.TRADEAGREEMENTJOURNALNUMBER == null) ? 0 : this.TRADEAGREEMENTJOURNALNUMBER.hashCode());
								
								result = prime * result + ((this.ITEMNUMBER == null) ? 0 : this.ITEMNUMBER.hashCode());
								
								result = prime * result + ((this.PRICE == null) ? 0 : this.PRICE.hashCode());
								
								result = prime * result + ((this.PRICECURRENCYCODE == null) ? 0 : this.PRICECURRENCYCODE.hashCode());
								
								result = prime * result + ((this.PRICECUSTOMERGROUPCODE == null) ? 0 : this.PRICECUSTOMERGROUPCODE.hashCode());
								
								result = prime * result + ((this.PRODUCTCOLORID == null) ? 0 : this.PRODUCTCOLORID.hashCode());
								
								result = prime * result + ((this.PRODUCTSIZEID == null) ? 0 : this.PRODUCTSIZEID.hashCode());
								
								result = prime * result + ((this.PRODUCTSTYLEID == null) ? 0 : this.PRODUCTSTYLEID.hashCode());
								
								result = prime * result + ((this.QUANTITYUNITSYMBOL == null) ? 0 : this.QUANTITYUNITSYMBOL.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_20 other = (KeyStruct_tUniqRow_20) obj;
				
									if (this.TRADEAGREEMENTJOURNALNUMBER == null) {
										if (other.TRADEAGREEMENTJOURNALNUMBER != null) 
											return false;
								
									} else if (!this.TRADEAGREEMENTJOURNALNUMBER.equals(other.TRADEAGREEMENTJOURNALNUMBER))
								 
										return false;
								
									if (this.ITEMNUMBER == null) {
										if (other.ITEMNUMBER != null) 
											return false;
								
									} else if (!this.ITEMNUMBER.equals(other.ITEMNUMBER))
								 
										return false;
								
									if (this.PRICE == null) {
										if (other.PRICE != null) 
											return false;
								
									} else if (!this.PRICE.equals(other.PRICE))
								 
										return false;
								
									if (this.PRICECURRENCYCODE == null) {
										if (other.PRICECURRENCYCODE != null) 
											return false;
								
									} else if (!this.PRICECURRENCYCODE.equals(other.PRICECURRENCYCODE))
								 
										return false;
								
									if (this.PRICECUSTOMERGROUPCODE == null) {
										if (other.PRICECUSTOMERGROUPCODE != null) 
											return false;
								
									} else if (!this.PRICECUSTOMERGROUPCODE.equals(other.PRICECUSTOMERGROUPCODE))
								 
										return false;
								
									if (this.PRODUCTCOLORID == null) {
										if (other.PRODUCTCOLORID != null) 
											return false;
								
									} else if (!this.PRODUCTCOLORID.equals(other.PRODUCTCOLORID))
								 
										return false;
								
									if (this.PRODUCTSIZEID == null) {
										if (other.PRODUCTSIZEID != null) 
											return false;
								
									} else if (!this.PRODUCTSIZEID.equals(other.PRODUCTSIZEID))
								 
										return false;
								
									if (this.PRODUCTSTYLEID == null) {
										if (other.PRODUCTSTYLEID != null) 
											return false;
								
									} else if (!this.PRODUCTSTYLEID.equals(other.PRODUCTSTYLEID))
								 
										return false;
								
									if (this.QUANTITYUNITSYMBOL == null) {
										if (other.QUANTITYUNITSYMBOL != null) 
											return false;
								
									} else if (!this.QUANTITYUNITSYMBOL.equals(other.QUANTITYUNITSYMBOL))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_20 = 0;
int nb_duplicates_tUniqRow_20 = 0;
KeyStruct_tUniqRow_20 finder_tUniqRow_20 = new KeyStruct_tUniqRow_20();
java.util.Set<KeyStruct_tUniqRow_20> keystUniqRow_20 = new java.util.HashSet<KeyStruct_tUniqRow_20>(); 

 



/**
 * [tUniqRow_20 begin ] stop
 */







	
	/**
	 * [tHashOutput_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_12", false);
		start_Hash.put("tHashOutput_12", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_12";

	
		int tos_count_tHashOutput_12 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_12=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row46Struct> tHashFile_tHashOutput_12 = null;
		String hashKey_tHashOutput_12 = "tHashFile_MASTERFILE_EXTRACT_PRICES_1_" + pid + "_tHashOutput_12";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_12)){
			    if(mf_tHashOutput_12.getResourceMap().get(hashKey_tHashOutput_12) == null){
	      		    mf_tHashOutput_12.getResourceMap().put(hashKey_tHashOutput_12, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row46Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_12 = mf_tHashOutput_12.getResourceMap().get(hashKey_tHashOutput_12);
			    }else{
			    	tHashFile_tHashOutput_12 = mf_tHashOutput_12.getResourceMap().get(hashKey_tHashOutput_12);
			    }
			}
        int nb_line_tHashOutput_12 = 0;
 



/**
 * [tHashOutput_12 begin ] stop
 */



	
	/**
	 * [tFilterRow_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_5", false);
		start_Hash.put("tFilterRow_5", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_5";

	
		int tos_count_tFilterRow_5 = 0;
		
    int nb_line_tFilterRow_5 = 0;
    int nb_line_ok_tFilterRow_5 = 0;
    int nb_line_reject_tFilterRow_5 = 0;

    class Operator_tFilterRow_5 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_5(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_5 begin ] stop
 */



	
	/**
	 * [tUniqRow_21 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_21", false);
		start_Hash.put("tUniqRow_21", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_21";

	
		int tos_count_tUniqRow_21 = 0;
		

	
		class KeyStruct_tUniqRow_21 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String TRADEAGREEMENTJOURNALNUMBER;
					String ITEMNUMBER;
					Double PRICE;
					String PRICECURRENCYCODE;
					String PRICECUSTOMERGROUPCODE;
					String PRODUCTCOLORID;
					String PRODUCTSIZEID;
					String PRODUCTSTYLEID;
					String QUANTITYUNITSYMBOL;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.TRADEAGREEMENTJOURNALNUMBER == null) ? 0 : this.TRADEAGREEMENTJOURNALNUMBER.hashCode());
								
								result = prime * result + ((this.ITEMNUMBER == null) ? 0 : this.ITEMNUMBER.hashCode());
								
								result = prime * result + ((this.PRICE == null) ? 0 : this.PRICE.hashCode());
								
								result = prime * result + ((this.PRICECURRENCYCODE == null) ? 0 : this.PRICECURRENCYCODE.hashCode());
								
								result = prime * result + ((this.PRICECUSTOMERGROUPCODE == null) ? 0 : this.PRICECUSTOMERGROUPCODE.hashCode());
								
								result = prime * result + ((this.PRODUCTCOLORID == null) ? 0 : this.PRODUCTCOLORID.hashCode());
								
								result = prime * result + ((this.PRODUCTSIZEID == null) ? 0 : this.PRODUCTSIZEID.hashCode());
								
								result = prime * result + ((this.PRODUCTSTYLEID == null) ? 0 : this.PRODUCTSTYLEID.hashCode());
								
								result = prime * result + ((this.QUANTITYUNITSYMBOL == null) ? 0 : this.QUANTITYUNITSYMBOL.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_21 other = (KeyStruct_tUniqRow_21) obj;
				
									if (this.TRADEAGREEMENTJOURNALNUMBER == null) {
										if (other.TRADEAGREEMENTJOURNALNUMBER != null) 
											return false;
								
									} else if (!this.TRADEAGREEMENTJOURNALNUMBER.equals(other.TRADEAGREEMENTJOURNALNUMBER))
								 
										return false;
								
									if (this.ITEMNUMBER == null) {
										if (other.ITEMNUMBER != null) 
											return false;
								
									} else if (!this.ITEMNUMBER.equals(other.ITEMNUMBER))
								 
										return false;
								
									if (this.PRICE == null) {
										if (other.PRICE != null) 
											return false;
								
									} else if (!this.PRICE.equals(other.PRICE))
								 
										return false;
								
									if (this.PRICECURRENCYCODE == null) {
										if (other.PRICECURRENCYCODE != null) 
											return false;
								
									} else if (!this.PRICECURRENCYCODE.equals(other.PRICECURRENCYCODE))
								 
										return false;
								
									if (this.PRICECUSTOMERGROUPCODE == null) {
										if (other.PRICECUSTOMERGROUPCODE != null) 
											return false;
								
									} else if (!this.PRICECUSTOMERGROUPCODE.equals(other.PRICECUSTOMERGROUPCODE))
								 
										return false;
								
									if (this.PRODUCTCOLORID == null) {
										if (other.PRODUCTCOLORID != null) 
											return false;
								
									} else if (!this.PRODUCTCOLORID.equals(other.PRODUCTCOLORID))
								 
										return false;
								
									if (this.PRODUCTSIZEID == null) {
										if (other.PRODUCTSIZEID != null) 
											return false;
								
									} else if (!this.PRODUCTSIZEID.equals(other.PRODUCTSIZEID))
								 
										return false;
								
									if (this.PRODUCTSTYLEID == null) {
										if (other.PRODUCTSTYLEID != null) 
											return false;
								
									} else if (!this.PRODUCTSTYLEID.equals(other.PRODUCTSTYLEID))
								 
										return false;
								
									if (this.QUANTITYUNITSYMBOL == null) {
										if (other.QUANTITYUNITSYMBOL != null) 
											return false;
								
									} else if (!this.QUANTITYUNITSYMBOL.equals(other.QUANTITYUNITSYMBOL))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_21 = 0;
int nb_duplicates_tUniqRow_21 = 0;
KeyStruct_tUniqRow_21 finder_tUniqRow_21 = new KeyStruct_tUniqRow_21();
java.util.Set<KeyStruct_tUniqRow_21> keystUniqRow_21 = new java.util.HashSet<KeyStruct_tUniqRow_21>(); 

 



/**
 * [tUniqRow_21 begin ] stop
 */







	
	/**
	 * [tHashOutput_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_13", false);
		start_Hash.put("tHashOutput_13", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_13";

	
		int tos_count_tHashOutput_13 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_13=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row48Struct> tHashFile_tHashOutput_13 = null;
		String hashKey_tHashOutput_13 = "tHashFile_MASTERFILE_EXTRACT_PRICES_1_" + pid + "_tHashOutput_13";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_13)){
			    if(mf_tHashOutput_13.getResourceMap().get(hashKey_tHashOutput_13) == null){
	      		    mf_tHashOutput_13.getResourceMap().put(hashKey_tHashOutput_13, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row48Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_13 = mf_tHashOutput_13.getResourceMap().get(hashKey_tHashOutput_13);
			    }else{
			    	tHashFile_tHashOutput_13 = mf_tHashOutput_13.getResourceMap().get(hashKey_tHashOutput_13);
			    }
			}
        int nb_line_tHashOutput_13 = 0;
 



/**
 * [tHashOutput_13 begin ] stop
 */



	
	/**
	 * [tFilterRow_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_6", false);
		start_Hash.put("tFilterRow_6", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_6";

	
		int tos_count_tFilterRow_6 = 0;
		
    int nb_line_tFilterRow_6 = 0;
    int nb_line_ok_tFilterRow_6 = 0;
    int nb_line_reject_tFilterRow_6 = 0;

    class Operator_tFilterRow_6 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_6(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_6 begin ] stop
 */



	
	/**
	 * [tUniqRow_22 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_22", false);
		start_Hash.put("tUniqRow_22", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_22";

	
		int tos_count_tUniqRow_22 = 0;
		

	
		class KeyStruct_tUniqRow_22 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String TRADEAGREEMENTJOURNALNUMBER;
					String ITEMNUMBER;
					Double PRICE;
					String PRICECURRENCYCODE;
					String PRICECUSTOMERGROUPCODE;
					String PRODUCTCOLORID;
					String PRODUCTSIZEID;
					String PRODUCTSTYLEID;
					String QUANTITYUNITSYMBOL;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.TRADEAGREEMENTJOURNALNUMBER == null) ? 0 : this.TRADEAGREEMENTJOURNALNUMBER.hashCode());
								
								result = prime * result + ((this.ITEMNUMBER == null) ? 0 : this.ITEMNUMBER.hashCode());
								
								result = prime * result + ((this.PRICE == null) ? 0 : this.PRICE.hashCode());
								
								result = prime * result + ((this.PRICECURRENCYCODE == null) ? 0 : this.PRICECURRENCYCODE.hashCode());
								
								result = prime * result + ((this.PRICECUSTOMERGROUPCODE == null) ? 0 : this.PRICECUSTOMERGROUPCODE.hashCode());
								
								result = prime * result + ((this.PRODUCTCOLORID == null) ? 0 : this.PRODUCTCOLORID.hashCode());
								
								result = prime * result + ((this.PRODUCTSIZEID == null) ? 0 : this.PRODUCTSIZEID.hashCode());
								
								result = prime * result + ((this.PRODUCTSTYLEID == null) ? 0 : this.PRODUCTSTYLEID.hashCode());
								
								result = prime * result + ((this.QUANTITYUNITSYMBOL == null) ? 0 : this.QUANTITYUNITSYMBOL.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_22 other = (KeyStruct_tUniqRow_22) obj;
				
									if (this.TRADEAGREEMENTJOURNALNUMBER == null) {
										if (other.TRADEAGREEMENTJOURNALNUMBER != null) 
											return false;
								
									} else if (!this.TRADEAGREEMENTJOURNALNUMBER.equals(other.TRADEAGREEMENTJOURNALNUMBER))
								 
										return false;
								
									if (this.ITEMNUMBER == null) {
										if (other.ITEMNUMBER != null) 
											return false;
								
									} else if (!this.ITEMNUMBER.equals(other.ITEMNUMBER))
								 
										return false;
								
									if (this.PRICE == null) {
										if (other.PRICE != null) 
											return false;
								
									} else if (!this.PRICE.equals(other.PRICE))
								 
										return false;
								
									if (this.PRICECURRENCYCODE == null) {
										if (other.PRICECURRENCYCODE != null) 
											return false;
								
									} else if (!this.PRICECURRENCYCODE.equals(other.PRICECURRENCYCODE))
								 
										return false;
								
									if (this.PRICECUSTOMERGROUPCODE == null) {
										if (other.PRICECUSTOMERGROUPCODE != null) 
											return false;
								
									} else if (!this.PRICECUSTOMERGROUPCODE.equals(other.PRICECUSTOMERGROUPCODE))
								 
										return false;
								
									if (this.PRODUCTCOLORID == null) {
										if (other.PRODUCTCOLORID != null) 
											return false;
								
									} else if (!this.PRODUCTCOLORID.equals(other.PRODUCTCOLORID))
								 
										return false;
								
									if (this.PRODUCTSIZEID == null) {
										if (other.PRODUCTSIZEID != null) 
											return false;
								
									} else if (!this.PRODUCTSIZEID.equals(other.PRODUCTSIZEID))
								 
										return false;
								
									if (this.PRODUCTSTYLEID == null) {
										if (other.PRODUCTSTYLEID != null) 
											return false;
								
									} else if (!this.PRODUCTSTYLEID.equals(other.PRODUCTSTYLEID))
								 
										return false;
								
									if (this.QUANTITYUNITSYMBOL == null) {
										if (other.QUANTITYUNITSYMBOL != null) 
											return false;
								
									} else if (!this.QUANTITYUNITSYMBOL.equals(other.QUANTITYUNITSYMBOL))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_22 = 0;
int nb_duplicates_tUniqRow_22 = 0;
KeyStruct_tUniqRow_22 finder_tUniqRow_22 = new KeyStruct_tUniqRow_22();
java.util.Set<KeyStruct_tUniqRow_22> keystUniqRow_22 = new java.util.HashSet<KeyStruct_tUniqRow_22>(); 

 



/**
 * [tUniqRow_22 begin ] stop
 */







	
	/**
	 * [tHashOutput_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_14", false);
		start_Hash.put("tHashOutput_14", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_14";

	
		int tos_count_tHashOutput_14 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_14=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row50Struct> tHashFile_tHashOutput_14 = null;
		String hashKey_tHashOutput_14 = "tHashFile_MASTERFILE_EXTRACT_PRICES_1_" + pid + "_tHashOutput_14";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_14)){
			    if(mf_tHashOutput_14.getResourceMap().get(hashKey_tHashOutput_14) == null){
	      		    mf_tHashOutput_14.getResourceMap().put(hashKey_tHashOutput_14, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row50Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_14 = mf_tHashOutput_14.getResourceMap().get(hashKey_tHashOutput_14);
			    }else{
			    	tHashFile_tHashOutput_14 = mf_tHashOutput_14.getResourceMap().get(hashKey_tHashOutput_14);
			    }
			}
        int nb_line_tHashOutput_14 = 0;
 



/**
 * [tHashOutput_14 begin ] stop
 */



	
	/**
	 * [tFilterRow_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_7", false);
		start_Hash.put("tFilterRow_7", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_7";

	
		int tos_count_tFilterRow_7 = 0;
		
    int nb_line_tFilterRow_7 = 0;
    int nb_line_ok_tFilterRow_7 = 0;
    int nb_line_reject_tFilterRow_7 = 0;

    class Operator_tFilterRow_7 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_7(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_7 begin ] stop
 */



	
	/**
	 * [tUniqRow_23 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_23", false);
		start_Hash.put("tUniqRow_23", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_23";

	
		int tos_count_tUniqRow_23 = 0;
		

	
		class KeyStruct_tUniqRow_23 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String TRADEAGREEMENTJOURNALNUMBER;
					String ITEMNUMBER;
					Double PRICE;
					String PRICECURRENCYCODE;
					String PRICECUSTOMERGROUPCODE;
					String PRODUCTCOLORID;
					String PRODUCTSIZEID;
					String PRODUCTSTYLEID;
					String QUANTITYUNITSYMBOL;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.TRADEAGREEMENTJOURNALNUMBER == null) ? 0 : this.TRADEAGREEMENTJOURNALNUMBER.hashCode());
								
								result = prime * result + ((this.ITEMNUMBER == null) ? 0 : this.ITEMNUMBER.hashCode());
								
								result = prime * result + ((this.PRICE == null) ? 0 : this.PRICE.hashCode());
								
								result = prime * result + ((this.PRICECURRENCYCODE == null) ? 0 : this.PRICECURRENCYCODE.hashCode());
								
								result = prime * result + ((this.PRICECUSTOMERGROUPCODE == null) ? 0 : this.PRICECUSTOMERGROUPCODE.hashCode());
								
								result = prime * result + ((this.PRODUCTCOLORID == null) ? 0 : this.PRODUCTCOLORID.hashCode());
								
								result = prime * result + ((this.PRODUCTSIZEID == null) ? 0 : this.PRODUCTSIZEID.hashCode());
								
								result = prime * result + ((this.PRODUCTSTYLEID == null) ? 0 : this.PRODUCTSTYLEID.hashCode());
								
								result = prime * result + ((this.QUANTITYUNITSYMBOL == null) ? 0 : this.QUANTITYUNITSYMBOL.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_23 other = (KeyStruct_tUniqRow_23) obj;
				
									if (this.TRADEAGREEMENTJOURNALNUMBER == null) {
										if (other.TRADEAGREEMENTJOURNALNUMBER != null) 
											return false;
								
									} else if (!this.TRADEAGREEMENTJOURNALNUMBER.equals(other.TRADEAGREEMENTJOURNALNUMBER))
								 
										return false;
								
									if (this.ITEMNUMBER == null) {
										if (other.ITEMNUMBER != null) 
											return false;
								
									} else if (!this.ITEMNUMBER.equals(other.ITEMNUMBER))
								 
										return false;
								
									if (this.PRICE == null) {
										if (other.PRICE != null) 
											return false;
								
									} else if (!this.PRICE.equals(other.PRICE))
								 
										return false;
								
									if (this.PRICECURRENCYCODE == null) {
										if (other.PRICECURRENCYCODE != null) 
											return false;
								
									} else if (!this.PRICECURRENCYCODE.equals(other.PRICECURRENCYCODE))
								 
										return false;
								
									if (this.PRICECUSTOMERGROUPCODE == null) {
										if (other.PRICECUSTOMERGROUPCODE != null) 
											return false;
								
									} else if (!this.PRICECUSTOMERGROUPCODE.equals(other.PRICECUSTOMERGROUPCODE))
								 
										return false;
								
									if (this.PRODUCTCOLORID == null) {
										if (other.PRODUCTCOLORID != null) 
											return false;
								
									} else if (!this.PRODUCTCOLORID.equals(other.PRODUCTCOLORID))
								 
										return false;
								
									if (this.PRODUCTSIZEID == null) {
										if (other.PRODUCTSIZEID != null) 
											return false;
								
									} else if (!this.PRODUCTSIZEID.equals(other.PRODUCTSIZEID))
								 
										return false;
								
									if (this.PRODUCTSTYLEID == null) {
										if (other.PRODUCTSTYLEID != null) 
											return false;
								
									} else if (!this.PRODUCTSTYLEID.equals(other.PRODUCTSTYLEID))
								 
										return false;
								
									if (this.QUANTITYUNITSYMBOL == null) {
										if (other.QUANTITYUNITSYMBOL != null) 
											return false;
								
									} else if (!this.QUANTITYUNITSYMBOL.equals(other.QUANTITYUNITSYMBOL))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_23 = 0;
int nb_duplicates_tUniqRow_23 = 0;
KeyStruct_tUniqRow_23 finder_tUniqRow_23 = new KeyStruct_tUniqRow_23();
java.util.Set<KeyStruct_tUniqRow_23> keystUniqRow_23 = new java.util.HashSet<KeyStruct_tUniqRow_23>(); 

 



/**
 * [tUniqRow_23 begin ] stop
 */







	
	/**
	 * [tHashOutput_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_15", false);
		start_Hash.put("tHashOutput_15", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_15";

	
		int tos_count_tHashOutput_15 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_15=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row56Struct> tHashFile_tHashOutput_15 = null;
		String hashKey_tHashOutput_15 = "tHashFile_MASTERFILE_EXTRACT_PRICES_1_" + pid + "_tHashOutput_15";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_15)){
			    if(mf_tHashOutput_15.getResourceMap().get(hashKey_tHashOutput_15) == null){
	      		    mf_tHashOutput_15.getResourceMap().put(hashKey_tHashOutput_15, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row56Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_15 = mf_tHashOutput_15.getResourceMap().get(hashKey_tHashOutput_15);
			    }else{
			    	tHashFile_tHashOutput_15 = mf_tHashOutput_15.getResourceMap().get(hashKey_tHashOutput_15);
			    }
			}
        int nb_line_tHashOutput_15 = 0;
 



/**
 * [tHashOutput_15 begin ] stop
 */



	
	/**
	 * [tFilterRow_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_8", false);
		start_Hash.put("tFilterRow_8", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_8";

	
		int tos_count_tFilterRow_8 = 0;
		
    int nb_line_tFilterRow_8 = 0;
    int nb_line_ok_tFilterRow_8 = 0;
    int nb_line_reject_tFilterRow_8 = 0;

    class Operator_tFilterRow_8 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_8(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_8 begin ] stop
 */



	
	/**
	 * [tUniqRow_24 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_24", false);
		start_Hash.put("tUniqRow_24", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_24";

	
		int tos_count_tUniqRow_24 = 0;
		

	
		class KeyStruct_tUniqRow_24 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String TRADEAGREEMENTJOURNALNUMBER;
					String ITEMNUMBER;
					Double PRICE;
					String PRICECURRENCYCODE;
					String PRICECUSTOMERGROUPCODE;
					String PRODUCTCOLORID;
					String PRODUCTSIZEID;
					String PRODUCTSTYLEID;
					String QUANTITYUNITSYMBOL;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.TRADEAGREEMENTJOURNALNUMBER == null) ? 0 : this.TRADEAGREEMENTJOURNALNUMBER.hashCode());
								
								result = prime * result + ((this.ITEMNUMBER == null) ? 0 : this.ITEMNUMBER.hashCode());
								
								result = prime * result + ((this.PRICE == null) ? 0 : this.PRICE.hashCode());
								
								result = prime * result + ((this.PRICECURRENCYCODE == null) ? 0 : this.PRICECURRENCYCODE.hashCode());
								
								result = prime * result + ((this.PRICECUSTOMERGROUPCODE == null) ? 0 : this.PRICECUSTOMERGROUPCODE.hashCode());
								
								result = prime * result + ((this.PRODUCTCOLORID == null) ? 0 : this.PRODUCTCOLORID.hashCode());
								
								result = prime * result + ((this.PRODUCTSIZEID == null) ? 0 : this.PRODUCTSIZEID.hashCode());
								
								result = prime * result + ((this.PRODUCTSTYLEID == null) ? 0 : this.PRODUCTSTYLEID.hashCode());
								
								result = prime * result + ((this.QUANTITYUNITSYMBOL == null) ? 0 : this.QUANTITYUNITSYMBOL.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_24 other = (KeyStruct_tUniqRow_24) obj;
				
									if (this.TRADEAGREEMENTJOURNALNUMBER == null) {
										if (other.TRADEAGREEMENTJOURNALNUMBER != null) 
											return false;
								
									} else if (!this.TRADEAGREEMENTJOURNALNUMBER.equals(other.TRADEAGREEMENTJOURNALNUMBER))
								 
										return false;
								
									if (this.ITEMNUMBER == null) {
										if (other.ITEMNUMBER != null) 
											return false;
								
									} else if (!this.ITEMNUMBER.equals(other.ITEMNUMBER))
								 
										return false;
								
									if (this.PRICE == null) {
										if (other.PRICE != null) 
											return false;
								
									} else if (!this.PRICE.equals(other.PRICE))
								 
										return false;
								
									if (this.PRICECURRENCYCODE == null) {
										if (other.PRICECURRENCYCODE != null) 
											return false;
								
									} else if (!this.PRICECURRENCYCODE.equals(other.PRICECURRENCYCODE))
								 
										return false;
								
									if (this.PRICECUSTOMERGROUPCODE == null) {
										if (other.PRICECUSTOMERGROUPCODE != null) 
											return false;
								
									} else if (!this.PRICECUSTOMERGROUPCODE.equals(other.PRICECUSTOMERGROUPCODE))
								 
										return false;
								
									if (this.PRODUCTCOLORID == null) {
										if (other.PRODUCTCOLORID != null) 
											return false;
								
									} else if (!this.PRODUCTCOLORID.equals(other.PRODUCTCOLORID))
								 
										return false;
								
									if (this.PRODUCTSIZEID == null) {
										if (other.PRODUCTSIZEID != null) 
											return false;
								
									} else if (!this.PRODUCTSIZEID.equals(other.PRODUCTSIZEID))
								 
										return false;
								
									if (this.PRODUCTSTYLEID == null) {
										if (other.PRODUCTSTYLEID != null) 
											return false;
								
									} else if (!this.PRODUCTSTYLEID.equals(other.PRODUCTSTYLEID))
								 
										return false;
								
									if (this.QUANTITYUNITSYMBOL == null) {
										if (other.QUANTITYUNITSYMBOL != null) 
											return false;
								
									} else if (!this.QUANTITYUNITSYMBOL.equals(other.QUANTITYUNITSYMBOL))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_24 = 0;
int nb_duplicates_tUniqRow_24 = 0;
KeyStruct_tUniqRow_24 finder_tUniqRow_24 = new KeyStruct_tUniqRow_24();
java.util.Set<KeyStruct_tUniqRow_24> keystUniqRow_24 = new java.util.HashSet<KeyStruct_tUniqRow_24>(); 

 



/**
 * [tUniqRow_24 begin ] stop
 */







	
	/**
	 * [tHashOutput_16 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_16", false);
		start_Hash.put("tHashOutput_16", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_16";

	
		int tos_count_tHashOutput_16 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_16=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row58Struct> tHashFile_tHashOutput_16 = null;
		String hashKey_tHashOutput_16 = "tHashFile_MASTERFILE_EXTRACT_PRICES_1_" + pid + "_tHashOutput_16";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_16)){
			    if(mf_tHashOutput_16.getResourceMap().get(hashKey_tHashOutput_16) == null){
	      		    mf_tHashOutput_16.getResourceMap().put(hashKey_tHashOutput_16, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row58Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_16 = mf_tHashOutput_16.getResourceMap().get(hashKey_tHashOutput_16);
			    }else{
			    	tHashFile_tHashOutput_16 = mf_tHashOutput_16.getResourceMap().get(hashKey_tHashOutput_16);
			    }
			}
        int nb_line_tHashOutput_16 = 0;
 



/**
 * [tHashOutput_16 begin ] stop
 */



	
	/**
	 * [tFilterRow_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_9", false);
		start_Hash.put("tFilterRow_9", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_9";

	
		int tos_count_tFilterRow_9 = 0;
		
    int nb_line_tFilterRow_9 = 0;
    int nb_line_ok_tFilterRow_9 = 0;
    int nb_line_reject_tFilterRow_9 = 0;

    class Operator_tFilterRow_9 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_9(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_9 begin ] stop
 */



	
	/**
	 * [tUniqRow_25 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_25", false);
		start_Hash.put("tUniqRow_25", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_25";

	
		int tos_count_tUniqRow_25 = 0;
		

	
		class KeyStruct_tUniqRow_25 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String TRADEAGREEMENTJOURNALNUMBER;
					String ITEMNUMBER;
					Double PRICE;
					String PRICECURRENCYCODE;
					String PRICECUSTOMERGROUPCODE;
					String PRODUCTCOLORID;
					String PRODUCTSIZEID;
					String PRODUCTSTYLEID;
					String QUANTITYUNITSYMBOL;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.TRADEAGREEMENTJOURNALNUMBER == null) ? 0 : this.TRADEAGREEMENTJOURNALNUMBER.hashCode());
								
								result = prime * result + ((this.ITEMNUMBER == null) ? 0 : this.ITEMNUMBER.hashCode());
								
								result = prime * result + ((this.PRICE == null) ? 0 : this.PRICE.hashCode());
								
								result = prime * result + ((this.PRICECURRENCYCODE == null) ? 0 : this.PRICECURRENCYCODE.hashCode());
								
								result = prime * result + ((this.PRICECUSTOMERGROUPCODE == null) ? 0 : this.PRICECUSTOMERGROUPCODE.hashCode());
								
								result = prime * result + ((this.PRODUCTCOLORID == null) ? 0 : this.PRODUCTCOLORID.hashCode());
								
								result = prime * result + ((this.PRODUCTSIZEID == null) ? 0 : this.PRODUCTSIZEID.hashCode());
								
								result = prime * result + ((this.PRODUCTSTYLEID == null) ? 0 : this.PRODUCTSTYLEID.hashCode());
								
								result = prime * result + ((this.QUANTITYUNITSYMBOL == null) ? 0 : this.QUANTITYUNITSYMBOL.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_25 other = (KeyStruct_tUniqRow_25) obj;
				
									if (this.TRADEAGREEMENTJOURNALNUMBER == null) {
										if (other.TRADEAGREEMENTJOURNALNUMBER != null) 
											return false;
								
									} else if (!this.TRADEAGREEMENTJOURNALNUMBER.equals(other.TRADEAGREEMENTJOURNALNUMBER))
								 
										return false;
								
									if (this.ITEMNUMBER == null) {
										if (other.ITEMNUMBER != null) 
											return false;
								
									} else if (!this.ITEMNUMBER.equals(other.ITEMNUMBER))
								 
										return false;
								
									if (this.PRICE == null) {
										if (other.PRICE != null) 
											return false;
								
									} else if (!this.PRICE.equals(other.PRICE))
								 
										return false;
								
									if (this.PRICECURRENCYCODE == null) {
										if (other.PRICECURRENCYCODE != null) 
											return false;
								
									} else if (!this.PRICECURRENCYCODE.equals(other.PRICECURRENCYCODE))
								 
										return false;
								
									if (this.PRICECUSTOMERGROUPCODE == null) {
										if (other.PRICECUSTOMERGROUPCODE != null) 
											return false;
								
									} else if (!this.PRICECUSTOMERGROUPCODE.equals(other.PRICECUSTOMERGROUPCODE))
								 
										return false;
								
									if (this.PRODUCTCOLORID == null) {
										if (other.PRODUCTCOLORID != null) 
											return false;
								
									} else if (!this.PRODUCTCOLORID.equals(other.PRODUCTCOLORID))
								 
										return false;
								
									if (this.PRODUCTSIZEID == null) {
										if (other.PRODUCTSIZEID != null) 
											return false;
								
									} else if (!this.PRODUCTSIZEID.equals(other.PRODUCTSIZEID))
								 
										return false;
								
									if (this.PRODUCTSTYLEID == null) {
										if (other.PRODUCTSTYLEID != null) 
											return false;
								
									} else if (!this.PRODUCTSTYLEID.equals(other.PRODUCTSTYLEID))
								 
										return false;
								
									if (this.QUANTITYUNITSYMBOL == null) {
										if (other.QUANTITYUNITSYMBOL != null) 
											return false;
								
									} else if (!this.QUANTITYUNITSYMBOL.equals(other.QUANTITYUNITSYMBOL))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_25 = 0;
int nb_duplicates_tUniqRow_25 = 0;
KeyStruct_tUniqRow_25 finder_tUniqRow_25 = new KeyStruct_tUniqRow_25();
java.util.Set<KeyStruct_tUniqRow_25> keystUniqRow_25 = new java.util.HashSet<KeyStruct_tUniqRow_25>(); 

 



/**
 * [tUniqRow_25 begin ] stop
 */







	
	/**
	 * [tHashOutput_17 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_17", false);
		start_Hash.put("tHashOutput_17", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_17";

	
		int tos_count_tHashOutput_17 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_17=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row62Struct> tHashFile_tHashOutput_17 = null;
		String hashKey_tHashOutput_17 = "tHashFile_MASTERFILE_EXTRACT_PRICES_1_" + pid + "_tHashOutput_17";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_17)){
			    if(mf_tHashOutput_17.getResourceMap().get(hashKey_tHashOutput_17) == null){
	      		    mf_tHashOutput_17.getResourceMap().put(hashKey_tHashOutput_17, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row62Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_17 = mf_tHashOutput_17.getResourceMap().get(hashKey_tHashOutput_17);
			    }else{
			    	tHashFile_tHashOutput_17 = mf_tHashOutput_17.getResourceMap().get(hashKey_tHashOutput_17);
			    }
			}
        int nb_line_tHashOutput_17 = 0;
 



/**
 * [tHashOutput_17 begin ] stop
 */



	
	/**
	 * [tFilterRow_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_10", false);
		start_Hash.put("tFilterRow_10", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_10";

	
		int tos_count_tFilterRow_10 = 0;
		
    int nb_line_tFilterRow_10 = 0;
    int nb_line_ok_tFilterRow_10 = 0;
    int nb_line_reject_tFilterRow_10 = 0;

    class Operator_tFilterRow_10 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_10(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_10 begin ] stop
 */



	
	/**
	 * [tUniqRow_26 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_26", false);
		start_Hash.put("tUniqRow_26", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_26";

	
		int tos_count_tUniqRow_26 = 0;
		

	
		class KeyStruct_tUniqRow_26 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String TRADEAGREEMENTJOURNALNUMBER;
					String ITEMNUMBER;
					Double PRICE;
					String PRICECURRENCYCODE;
					String PRICECUSTOMERGROUPCODE;
					String PRODUCTCOLORID;
					String PRODUCTSIZEID;
					String PRODUCTSTYLEID;
					String QUANTITYUNITSYMBOL;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.TRADEAGREEMENTJOURNALNUMBER == null) ? 0 : this.TRADEAGREEMENTJOURNALNUMBER.hashCode());
								
								result = prime * result + ((this.ITEMNUMBER == null) ? 0 : this.ITEMNUMBER.hashCode());
								
								result = prime * result + ((this.PRICE == null) ? 0 : this.PRICE.hashCode());
								
								result = prime * result + ((this.PRICECURRENCYCODE == null) ? 0 : this.PRICECURRENCYCODE.hashCode());
								
								result = prime * result + ((this.PRICECUSTOMERGROUPCODE == null) ? 0 : this.PRICECUSTOMERGROUPCODE.hashCode());
								
								result = prime * result + ((this.PRODUCTCOLORID == null) ? 0 : this.PRODUCTCOLORID.hashCode());
								
								result = prime * result + ((this.PRODUCTSIZEID == null) ? 0 : this.PRODUCTSIZEID.hashCode());
								
								result = prime * result + ((this.PRODUCTSTYLEID == null) ? 0 : this.PRODUCTSTYLEID.hashCode());
								
								result = prime * result + ((this.QUANTITYUNITSYMBOL == null) ? 0 : this.QUANTITYUNITSYMBOL.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_26 other = (KeyStruct_tUniqRow_26) obj;
				
									if (this.TRADEAGREEMENTJOURNALNUMBER == null) {
										if (other.TRADEAGREEMENTJOURNALNUMBER != null) 
											return false;
								
									} else if (!this.TRADEAGREEMENTJOURNALNUMBER.equals(other.TRADEAGREEMENTJOURNALNUMBER))
								 
										return false;
								
									if (this.ITEMNUMBER == null) {
										if (other.ITEMNUMBER != null) 
											return false;
								
									} else if (!this.ITEMNUMBER.equals(other.ITEMNUMBER))
								 
										return false;
								
									if (this.PRICE == null) {
										if (other.PRICE != null) 
											return false;
								
									} else if (!this.PRICE.equals(other.PRICE))
								 
										return false;
								
									if (this.PRICECURRENCYCODE == null) {
										if (other.PRICECURRENCYCODE != null) 
											return false;
								
									} else if (!this.PRICECURRENCYCODE.equals(other.PRICECURRENCYCODE))
								 
										return false;
								
									if (this.PRICECUSTOMERGROUPCODE == null) {
										if (other.PRICECUSTOMERGROUPCODE != null) 
											return false;
								
									} else if (!this.PRICECUSTOMERGROUPCODE.equals(other.PRICECUSTOMERGROUPCODE))
								 
										return false;
								
									if (this.PRODUCTCOLORID == null) {
										if (other.PRODUCTCOLORID != null) 
											return false;
								
									} else if (!this.PRODUCTCOLORID.equals(other.PRODUCTCOLORID))
								 
										return false;
								
									if (this.PRODUCTSIZEID == null) {
										if (other.PRODUCTSIZEID != null) 
											return false;
								
									} else if (!this.PRODUCTSIZEID.equals(other.PRODUCTSIZEID))
								 
										return false;
								
									if (this.PRODUCTSTYLEID == null) {
										if (other.PRODUCTSTYLEID != null) 
											return false;
								
									} else if (!this.PRODUCTSTYLEID.equals(other.PRODUCTSTYLEID))
								 
										return false;
								
									if (this.QUANTITYUNITSYMBOL == null) {
										if (other.QUANTITYUNITSYMBOL != null) 
											return false;
								
									} else if (!this.QUANTITYUNITSYMBOL.equals(other.QUANTITYUNITSYMBOL))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_26 = 0;
int nb_duplicates_tUniqRow_26 = 0;
KeyStruct_tUniqRow_26 finder_tUniqRow_26 = new KeyStruct_tUniqRow_26();
java.util.Set<KeyStruct_tUniqRow_26> keystUniqRow_26 = new java.util.HashSet<KeyStruct_tUniqRow_26>(); 

 



/**
 * [tUniqRow_26 begin ] stop
 */







	
	/**
	 * [tHashOutput_18 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_18", false);
		start_Hash.put("tHashOutput_18", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_18";

	
		int tos_count_tHashOutput_18 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_18=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row63Struct> tHashFile_tHashOutput_18 = null;
		String hashKey_tHashOutput_18 = "tHashFile_MASTERFILE_EXTRACT_PRICES_1_" + pid + "_tHashOutput_18";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_18)){
			    if(mf_tHashOutput_18.getResourceMap().get(hashKey_tHashOutput_18) == null){
	      		    mf_tHashOutput_18.getResourceMap().put(hashKey_tHashOutput_18, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row63Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_18 = mf_tHashOutput_18.getResourceMap().get(hashKey_tHashOutput_18);
			    }else{
			    	tHashFile_tHashOutput_18 = mf_tHashOutput_18.getResourceMap().get(hashKey_tHashOutput_18);
			    }
			}
        int nb_line_tHashOutput_18 = 0;
 



/**
 * [tHashOutput_18 begin ] stop
 */



	
	/**
	 * [tFilterRow_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_11", false);
		start_Hash.put("tFilterRow_11", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_11";

	
		int tos_count_tFilterRow_11 = 0;
		
    int nb_line_tFilterRow_11 = 0;
    int nb_line_ok_tFilterRow_11 = 0;
    int nb_line_reject_tFilterRow_11 = 0;

    class Operator_tFilterRow_11 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_11(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_11 begin ] stop
 */



	
	/**
	 * [tUniqRow_27 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_27", false);
		start_Hash.put("tUniqRow_27", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_27";

	
		int tos_count_tUniqRow_27 = 0;
		

	
		class KeyStruct_tUniqRow_27 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String TRADEAGREEMENTJOURNALNUMBER;
					String ITEMNUMBER;
					Double PRICE;
					String PRICECURRENCYCODE;
					String PRICECUSTOMERGROUPCODE;
					String PRODUCTCOLORID;
					String PRODUCTSIZEID;
					String PRODUCTSTYLEID;
					String QUANTITYUNITSYMBOL;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.TRADEAGREEMENTJOURNALNUMBER == null) ? 0 : this.TRADEAGREEMENTJOURNALNUMBER.hashCode());
								
								result = prime * result + ((this.ITEMNUMBER == null) ? 0 : this.ITEMNUMBER.hashCode());
								
								result = prime * result + ((this.PRICE == null) ? 0 : this.PRICE.hashCode());
								
								result = prime * result + ((this.PRICECURRENCYCODE == null) ? 0 : this.PRICECURRENCYCODE.hashCode());
								
								result = prime * result + ((this.PRICECUSTOMERGROUPCODE == null) ? 0 : this.PRICECUSTOMERGROUPCODE.hashCode());
								
								result = prime * result + ((this.PRODUCTCOLORID == null) ? 0 : this.PRODUCTCOLORID.hashCode());
								
								result = prime * result + ((this.PRODUCTSIZEID == null) ? 0 : this.PRODUCTSIZEID.hashCode());
								
								result = prime * result + ((this.PRODUCTSTYLEID == null) ? 0 : this.PRODUCTSTYLEID.hashCode());
								
								result = prime * result + ((this.QUANTITYUNITSYMBOL == null) ? 0 : this.QUANTITYUNITSYMBOL.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_27 other = (KeyStruct_tUniqRow_27) obj;
				
									if (this.TRADEAGREEMENTJOURNALNUMBER == null) {
										if (other.TRADEAGREEMENTJOURNALNUMBER != null) 
											return false;
								
									} else if (!this.TRADEAGREEMENTJOURNALNUMBER.equals(other.TRADEAGREEMENTJOURNALNUMBER))
								 
										return false;
								
									if (this.ITEMNUMBER == null) {
										if (other.ITEMNUMBER != null) 
											return false;
								
									} else if (!this.ITEMNUMBER.equals(other.ITEMNUMBER))
								 
										return false;
								
									if (this.PRICE == null) {
										if (other.PRICE != null) 
											return false;
								
									} else if (!this.PRICE.equals(other.PRICE))
								 
										return false;
								
									if (this.PRICECURRENCYCODE == null) {
										if (other.PRICECURRENCYCODE != null) 
											return false;
								
									} else if (!this.PRICECURRENCYCODE.equals(other.PRICECURRENCYCODE))
								 
										return false;
								
									if (this.PRICECUSTOMERGROUPCODE == null) {
										if (other.PRICECUSTOMERGROUPCODE != null) 
											return false;
								
									} else if (!this.PRICECUSTOMERGROUPCODE.equals(other.PRICECUSTOMERGROUPCODE))
								 
										return false;
								
									if (this.PRODUCTCOLORID == null) {
										if (other.PRODUCTCOLORID != null) 
											return false;
								
									} else if (!this.PRODUCTCOLORID.equals(other.PRODUCTCOLORID))
								 
										return false;
								
									if (this.PRODUCTSIZEID == null) {
										if (other.PRODUCTSIZEID != null) 
											return false;
								
									} else if (!this.PRODUCTSIZEID.equals(other.PRODUCTSIZEID))
								 
										return false;
								
									if (this.PRODUCTSTYLEID == null) {
										if (other.PRODUCTSTYLEID != null) 
											return false;
								
									} else if (!this.PRODUCTSTYLEID.equals(other.PRODUCTSTYLEID))
								 
										return false;
								
									if (this.QUANTITYUNITSYMBOL == null) {
										if (other.QUANTITYUNITSYMBOL != null) 
											return false;
								
									} else if (!this.QUANTITYUNITSYMBOL.equals(other.QUANTITYUNITSYMBOL))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_27 = 0;
int nb_duplicates_tUniqRow_27 = 0;
KeyStruct_tUniqRow_27 finder_tUniqRow_27 = new KeyStruct_tUniqRow_27();
java.util.Set<KeyStruct_tUniqRow_27> keystUniqRow_27 = new java.util.HashSet<KeyStruct_tUniqRow_27>(); 

 



/**
 * [tUniqRow_27 begin ] stop
 */







	
	/**
	 * [tHashOutput_19 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_19", false);
		start_Hash.put("tHashOutput_19", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_19";

	
		int tos_count_tHashOutput_19 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_19=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row67Struct> tHashFile_tHashOutput_19 = null;
		String hashKey_tHashOutput_19 = "tHashFile_MASTERFILE_EXTRACT_PRICES_1_" + pid + "_tHashOutput_19";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_19)){
			    if(mf_tHashOutput_19.getResourceMap().get(hashKey_tHashOutput_19) == null){
	      		    mf_tHashOutput_19.getResourceMap().put(hashKey_tHashOutput_19, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row67Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_19 = mf_tHashOutput_19.getResourceMap().get(hashKey_tHashOutput_19);
			    }else{
			    	tHashFile_tHashOutput_19 = mf_tHashOutput_19.getResourceMap().get(hashKey_tHashOutput_19);
			    }
			}
        int nb_line_tHashOutput_19 = 0;
 



/**
 * [tHashOutput_19 begin ] stop
 */



	
	/**
	 * [tFilterRow_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_12", false);
		start_Hash.put("tFilterRow_12", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_12";

	
		int tos_count_tFilterRow_12 = 0;
		
    int nb_line_tFilterRow_12 = 0;
    int nb_line_ok_tFilterRow_12 = 0;
    int nb_line_reject_tFilterRow_12 = 0;

    class Operator_tFilterRow_12 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_12(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_12 begin ] stop
 */



	
	/**
	 * [tUniqRow_28 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_28", false);
		start_Hash.put("tUniqRow_28", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_28";

	
		int tos_count_tUniqRow_28 = 0;
		

	
		class KeyStruct_tUniqRow_28 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String TRADEAGREEMENTJOURNALNUMBER;
					String ITEMNUMBER;
					Double PRICE;
					String PRICECURRENCYCODE;
					String PRICECUSTOMERGROUPCODE;
					String PRODUCTCOLORID;
					String PRODUCTSIZEID;
					String PRODUCTSTYLEID;
					String QUANTITYUNITSYMBOL;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.TRADEAGREEMENTJOURNALNUMBER == null) ? 0 : this.TRADEAGREEMENTJOURNALNUMBER.hashCode());
								
								result = prime * result + ((this.ITEMNUMBER == null) ? 0 : this.ITEMNUMBER.hashCode());
								
								result = prime * result + ((this.PRICE == null) ? 0 : this.PRICE.hashCode());
								
								result = prime * result + ((this.PRICECURRENCYCODE == null) ? 0 : this.PRICECURRENCYCODE.hashCode());
								
								result = prime * result + ((this.PRICECUSTOMERGROUPCODE == null) ? 0 : this.PRICECUSTOMERGROUPCODE.hashCode());
								
								result = prime * result + ((this.PRODUCTCOLORID == null) ? 0 : this.PRODUCTCOLORID.hashCode());
								
								result = prime * result + ((this.PRODUCTSIZEID == null) ? 0 : this.PRODUCTSIZEID.hashCode());
								
								result = prime * result + ((this.PRODUCTSTYLEID == null) ? 0 : this.PRODUCTSTYLEID.hashCode());
								
								result = prime * result + ((this.QUANTITYUNITSYMBOL == null) ? 0 : this.QUANTITYUNITSYMBOL.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_28 other = (KeyStruct_tUniqRow_28) obj;
				
									if (this.TRADEAGREEMENTJOURNALNUMBER == null) {
										if (other.TRADEAGREEMENTJOURNALNUMBER != null) 
											return false;
								
									} else if (!this.TRADEAGREEMENTJOURNALNUMBER.equals(other.TRADEAGREEMENTJOURNALNUMBER))
								 
										return false;
								
									if (this.ITEMNUMBER == null) {
										if (other.ITEMNUMBER != null) 
											return false;
								
									} else if (!this.ITEMNUMBER.equals(other.ITEMNUMBER))
								 
										return false;
								
									if (this.PRICE == null) {
										if (other.PRICE != null) 
											return false;
								
									} else if (!this.PRICE.equals(other.PRICE))
								 
										return false;
								
									if (this.PRICECURRENCYCODE == null) {
										if (other.PRICECURRENCYCODE != null) 
											return false;
								
									} else if (!this.PRICECURRENCYCODE.equals(other.PRICECURRENCYCODE))
								 
										return false;
								
									if (this.PRICECUSTOMERGROUPCODE == null) {
										if (other.PRICECUSTOMERGROUPCODE != null) 
											return false;
								
									} else if (!this.PRICECUSTOMERGROUPCODE.equals(other.PRICECUSTOMERGROUPCODE))
								 
										return false;
								
									if (this.PRODUCTCOLORID == null) {
										if (other.PRODUCTCOLORID != null) 
											return false;
								
									} else if (!this.PRODUCTCOLORID.equals(other.PRODUCTCOLORID))
								 
										return false;
								
									if (this.PRODUCTSIZEID == null) {
										if (other.PRODUCTSIZEID != null) 
											return false;
								
									} else if (!this.PRODUCTSIZEID.equals(other.PRODUCTSIZEID))
								 
										return false;
								
									if (this.PRODUCTSTYLEID == null) {
										if (other.PRODUCTSTYLEID != null) 
											return false;
								
									} else if (!this.PRODUCTSTYLEID.equals(other.PRODUCTSTYLEID))
								 
										return false;
								
									if (this.QUANTITYUNITSYMBOL == null) {
										if (other.QUANTITYUNITSYMBOL != null) 
											return false;
								
									} else if (!this.QUANTITYUNITSYMBOL.equals(other.QUANTITYUNITSYMBOL))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_28 = 0;
int nb_duplicates_tUniqRow_28 = 0;
KeyStruct_tUniqRow_28 finder_tUniqRow_28 = new KeyStruct_tUniqRow_28();
java.util.Set<KeyStruct_tUniqRow_28> keystUniqRow_28 = new java.util.HashSet<KeyStruct_tUniqRow_28>(); 

 



/**
 * [tUniqRow_28 begin ] stop
 */







	
	/**
	 * [tHashOutput_20 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_20", false);
		start_Hash.put("tHashOutput_20", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_20";

	
		int tos_count_tHashOutput_20 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_20=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<Main1Struct> tHashFile_tHashOutput_20 = null;
		String hashKey_tHashOutput_20 = "tHashFile_MASTERFILE_EXTRACT_PRICES_1_" + pid + "_tHashOutput_20";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_20)){
			    if(mf_tHashOutput_20.getResourceMap().get(hashKey_tHashOutput_20) == null){
	      		    mf_tHashOutput_20.getResourceMap().put(hashKey_tHashOutput_20, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<Main1Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_20 = mf_tHashOutput_20.getResourceMap().get(hashKey_tHashOutput_20);
			    }else{
			    	tHashFile_tHashOutput_20 = mf_tHashOutput_20.getResourceMap().get(hashKey_tHashOutput_20);
			    }
			}
        int nb_line_tHashOutput_20 = 0;
 



/**
 * [tHashOutput_20 begin ] stop
 */



	
	/**
	 * [tFilterRow_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_13", false);
		start_Hash.put("tFilterRow_13", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_13";

	
		int tos_count_tFilterRow_13 = 0;
		
    int nb_line_tFilterRow_13 = 0;
    int nb_line_ok_tFilterRow_13 = 0;
    int nb_line_reject_tFilterRow_13 = 0;

    class Operator_tFilterRow_13 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_13(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_13 begin ] stop
 */



	
	/**
	 * [tUniqRow_29 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_29", false);
		start_Hash.put("tUniqRow_29", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_29";

	
		int tos_count_tUniqRow_29 = 0;
		

	
		class KeyStruct_tUniqRow_29 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String TRADEAGREEMENTJOURNALNUMBER;
					String ITEMNUMBER;
					Double PRICE;
					String PRICECURRENCYCODE;
					String PRICECUSTOMERGROUPCODE;
					String PRODUCTCOLORID;
					String PRODUCTSIZEID;
					String PRODUCTSTYLEID;
					String QUANTITYUNITSYMBOL;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.TRADEAGREEMENTJOURNALNUMBER == null) ? 0 : this.TRADEAGREEMENTJOURNALNUMBER.hashCode());
								
								result = prime * result + ((this.ITEMNUMBER == null) ? 0 : this.ITEMNUMBER.hashCode());
								
								result = prime * result + ((this.PRICE == null) ? 0 : this.PRICE.hashCode());
								
								result = prime * result + ((this.PRICECURRENCYCODE == null) ? 0 : this.PRICECURRENCYCODE.hashCode());
								
								result = prime * result + ((this.PRICECUSTOMERGROUPCODE == null) ? 0 : this.PRICECUSTOMERGROUPCODE.hashCode());
								
								result = prime * result + ((this.PRODUCTCOLORID == null) ? 0 : this.PRODUCTCOLORID.hashCode());
								
								result = prime * result + ((this.PRODUCTSIZEID == null) ? 0 : this.PRODUCTSIZEID.hashCode());
								
								result = prime * result + ((this.PRODUCTSTYLEID == null) ? 0 : this.PRODUCTSTYLEID.hashCode());
								
								result = prime * result + ((this.QUANTITYUNITSYMBOL == null) ? 0 : this.QUANTITYUNITSYMBOL.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_29 other = (KeyStruct_tUniqRow_29) obj;
				
									if (this.TRADEAGREEMENTJOURNALNUMBER == null) {
										if (other.TRADEAGREEMENTJOURNALNUMBER != null) 
											return false;
								
									} else if (!this.TRADEAGREEMENTJOURNALNUMBER.equals(other.TRADEAGREEMENTJOURNALNUMBER))
								 
										return false;
								
									if (this.ITEMNUMBER == null) {
										if (other.ITEMNUMBER != null) 
											return false;
								
									} else if (!this.ITEMNUMBER.equals(other.ITEMNUMBER))
								 
										return false;
								
									if (this.PRICE == null) {
										if (other.PRICE != null) 
											return false;
								
									} else if (!this.PRICE.equals(other.PRICE))
								 
										return false;
								
									if (this.PRICECURRENCYCODE == null) {
										if (other.PRICECURRENCYCODE != null) 
											return false;
								
									} else if (!this.PRICECURRENCYCODE.equals(other.PRICECURRENCYCODE))
								 
										return false;
								
									if (this.PRICECUSTOMERGROUPCODE == null) {
										if (other.PRICECUSTOMERGROUPCODE != null) 
											return false;
								
									} else if (!this.PRICECUSTOMERGROUPCODE.equals(other.PRICECUSTOMERGROUPCODE))
								 
										return false;
								
									if (this.PRODUCTCOLORID == null) {
										if (other.PRODUCTCOLORID != null) 
											return false;
								
									} else if (!this.PRODUCTCOLORID.equals(other.PRODUCTCOLORID))
								 
										return false;
								
									if (this.PRODUCTSIZEID == null) {
										if (other.PRODUCTSIZEID != null) 
											return false;
								
									} else if (!this.PRODUCTSIZEID.equals(other.PRODUCTSIZEID))
								 
										return false;
								
									if (this.PRODUCTSTYLEID == null) {
										if (other.PRODUCTSTYLEID != null) 
											return false;
								
									} else if (!this.PRODUCTSTYLEID.equals(other.PRODUCTSTYLEID))
								 
										return false;
								
									if (this.QUANTITYUNITSYMBOL == null) {
										if (other.QUANTITYUNITSYMBOL != null) 
											return false;
								
									} else if (!this.QUANTITYUNITSYMBOL.equals(other.QUANTITYUNITSYMBOL))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_29 = 0;
int nb_duplicates_tUniqRow_29 = 0;
KeyStruct_tUniqRow_29 finder_tUniqRow_29 = new KeyStruct_tUniqRow_29();
java.util.Set<KeyStruct_tUniqRow_29> keystUniqRow_29 = new java.util.HashSet<KeyStruct_tUniqRow_29>(); 

 



/**
 * [tUniqRow_29 begin ] stop
 */







	
	/**
	 * [tHashOutput_21 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_21", false);
		start_Hash.put("tHashOutput_21", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_21";

	
		int tos_count_tHashOutput_21 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_21=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row74Struct> tHashFile_tHashOutput_21 = null;
		String hashKey_tHashOutput_21 = "tHashFile_MASTERFILE_EXTRACT_PRICES_1_" + pid + "_tHashOutput_21";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_21)){
			    if(mf_tHashOutput_21.getResourceMap().get(hashKey_tHashOutput_21) == null){
	      		    mf_tHashOutput_21.getResourceMap().put(hashKey_tHashOutput_21, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row74Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_21 = mf_tHashOutput_21.getResourceMap().get(hashKey_tHashOutput_21);
			    }else{
			    	tHashFile_tHashOutput_21 = mf_tHashOutput_21.getResourceMap().get(hashKey_tHashOutput_21);
			    }
			}
        int nb_line_tHashOutput_21 = 0;
 



/**
 * [tHashOutput_21 begin ] stop
 */



	
	/**
	 * [tFilterRow_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_14", false);
		start_Hash.put("tFilterRow_14", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_14";

	
		int tos_count_tFilterRow_14 = 0;
		
    int nb_line_tFilterRow_14 = 0;
    int nb_line_ok_tFilterRow_14 = 0;
    int nb_line_reject_tFilterRow_14 = 0;

    class Operator_tFilterRow_14 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_14(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_14 begin ] stop
 */



	
	/**
	 * [tUniqRow_30 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_30", false);
		start_Hash.put("tUniqRow_30", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_30";

	
		int tos_count_tUniqRow_30 = 0;
		

	
		class KeyStruct_tUniqRow_30 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String TRADEAGREEMENTJOURNALNUMBER;
					String ITEMNUMBER;
					Double PRICE;
					String PRICECURRENCYCODE;
					String PRICECUSTOMERGROUPCODE;
					String PRODUCTCOLORID;
					String PRODUCTSIZEID;
					String PRODUCTSTYLEID;
					String QUANTITYUNITSYMBOL;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.TRADEAGREEMENTJOURNALNUMBER == null) ? 0 : this.TRADEAGREEMENTJOURNALNUMBER.hashCode());
								
								result = prime * result + ((this.ITEMNUMBER == null) ? 0 : this.ITEMNUMBER.hashCode());
								
								result = prime * result + ((this.PRICE == null) ? 0 : this.PRICE.hashCode());
								
								result = prime * result + ((this.PRICECURRENCYCODE == null) ? 0 : this.PRICECURRENCYCODE.hashCode());
								
								result = prime * result + ((this.PRICECUSTOMERGROUPCODE == null) ? 0 : this.PRICECUSTOMERGROUPCODE.hashCode());
								
								result = prime * result + ((this.PRODUCTCOLORID == null) ? 0 : this.PRODUCTCOLORID.hashCode());
								
								result = prime * result + ((this.PRODUCTSIZEID == null) ? 0 : this.PRODUCTSIZEID.hashCode());
								
								result = prime * result + ((this.PRODUCTSTYLEID == null) ? 0 : this.PRODUCTSTYLEID.hashCode());
								
								result = prime * result + ((this.QUANTITYUNITSYMBOL == null) ? 0 : this.QUANTITYUNITSYMBOL.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_30 other = (KeyStruct_tUniqRow_30) obj;
				
									if (this.TRADEAGREEMENTJOURNALNUMBER == null) {
										if (other.TRADEAGREEMENTJOURNALNUMBER != null) 
											return false;
								
									} else if (!this.TRADEAGREEMENTJOURNALNUMBER.equals(other.TRADEAGREEMENTJOURNALNUMBER))
								 
										return false;
								
									if (this.ITEMNUMBER == null) {
										if (other.ITEMNUMBER != null) 
											return false;
								
									} else if (!this.ITEMNUMBER.equals(other.ITEMNUMBER))
								 
										return false;
								
									if (this.PRICE == null) {
										if (other.PRICE != null) 
											return false;
								
									} else if (!this.PRICE.equals(other.PRICE))
								 
										return false;
								
									if (this.PRICECURRENCYCODE == null) {
										if (other.PRICECURRENCYCODE != null) 
											return false;
								
									} else if (!this.PRICECURRENCYCODE.equals(other.PRICECURRENCYCODE))
								 
										return false;
								
									if (this.PRICECUSTOMERGROUPCODE == null) {
										if (other.PRICECUSTOMERGROUPCODE != null) 
											return false;
								
									} else if (!this.PRICECUSTOMERGROUPCODE.equals(other.PRICECUSTOMERGROUPCODE))
								 
										return false;
								
									if (this.PRODUCTCOLORID == null) {
										if (other.PRODUCTCOLORID != null) 
											return false;
								
									} else if (!this.PRODUCTCOLORID.equals(other.PRODUCTCOLORID))
								 
										return false;
								
									if (this.PRODUCTSIZEID == null) {
										if (other.PRODUCTSIZEID != null) 
											return false;
								
									} else if (!this.PRODUCTSIZEID.equals(other.PRODUCTSIZEID))
								 
										return false;
								
									if (this.PRODUCTSTYLEID == null) {
										if (other.PRODUCTSTYLEID != null) 
											return false;
								
									} else if (!this.PRODUCTSTYLEID.equals(other.PRODUCTSTYLEID))
								 
										return false;
								
									if (this.QUANTITYUNITSYMBOL == null) {
										if (other.QUANTITYUNITSYMBOL != null) 
											return false;
								
									} else if (!this.QUANTITYUNITSYMBOL.equals(other.QUANTITYUNITSYMBOL))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_30 = 0;
int nb_duplicates_tUniqRow_30 = 0;
KeyStruct_tUniqRow_30 finder_tUniqRow_30 = new KeyStruct_tUniqRow_30();
java.util.Set<KeyStruct_tUniqRow_30> keystUniqRow_30 = new java.util.HashSet<KeyStruct_tUniqRow_30>(); 

 



/**
 * [tUniqRow_30 begin ] stop
 */







	
	/**
	 * [tHashOutput_22 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_22", false);
		start_Hash.put("tHashOutput_22", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_22";

	
		int tos_count_tHashOutput_22 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_22=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row76Struct> tHashFile_tHashOutput_22 = null;
		String hashKey_tHashOutput_22 = "tHashFile_MASTERFILE_EXTRACT_PRICES_1_" + pid + "_tHashOutput_22";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_22)){
			    if(mf_tHashOutput_22.getResourceMap().get(hashKey_tHashOutput_22) == null){
	      		    mf_tHashOutput_22.getResourceMap().put(hashKey_tHashOutput_22, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row76Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_22 = mf_tHashOutput_22.getResourceMap().get(hashKey_tHashOutput_22);
			    }else{
			    	tHashFile_tHashOutput_22 = mf_tHashOutput_22.getResourceMap().get(hashKey_tHashOutput_22);
			    }
			}
        int nb_line_tHashOutput_22 = 0;
 



/**
 * [tHashOutput_22 begin ] stop
 */



	
	/**
	 * [tFilterRow_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_15", false);
		start_Hash.put("tFilterRow_15", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_15";

	
		int tos_count_tFilterRow_15 = 0;
		
    int nb_line_tFilterRow_15 = 0;
    int nb_line_ok_tFilterRow_15 = 0;
    int nb_line_reject_tFilterRow_15 = 0;

    class Operator_tFilterRow_15 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_15(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_15 begin ] stop
 */



	
	/**
	 * [tUniqRow_31 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_31", false);
		start_Hash.put("tUniqRow_31", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_31";

	
		int tos_count_tUniqRow_31 = 0;
		

	
		class KeyStruct_tUniqRow_31 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String TRADEAGREEMENTJOURNALNUMBER;
					String ITEMNUMBER;
					Double PRICE;
					String PRICECURRENCYCODE;
					String PRICECUSTOMERGROUPCODE;
					String PRODUCTCOLORID;
					String PRODUCTSIZEID;
					String PRODUCTSTYLEID;
					String QUANTITYUNITSYMBOL;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.TRADEAGREEMENTJOURNALNUMBER == null) ? 0 : this.TRADEAGREEMENTJOURNALNUMBER.hashCode());
								
								result = prime * result + ((this.ITEMNUMBER == null) ? 0 : this.ITEMNUMBER.hashCode());
								
								result = prime * result + ((this.PRICE == null) ? 0 : this.PRICE.hashCode());
								
								result = prime * result + ((this.PRICECURRENCYCODE == null) ? 0 : this.PRICECURRENCYCODE.hashCode());
								
								result = prime * result + ((this.PRICECUSTOMERGROUPCODE == null) ? 0 : this.PRICECUSTOMERGROUPCODE.hashCode());
								
								result = prime * result + ((this.PRODUCTCOLORID == null) ? 0 : this.PRODUCTCOLORID.hashCode());
								
								result = prime * result + ((this.PRODUCTSIZEID == null) ? 0 : this.PRODUCTSIZEID.hashCode());
								
								result = prime * result + ((this.PRODUCTSTYLEID == null) ? 0 : this.PRODUCTSTYLEID.hashCode());
								
								result = prime * result + ((this.QUANTITYUNITSYMBOL == null) ? 0 : this.QUANTITYUNITSYMBOL.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_31 other = (KeyStruct_tUniqRow_31) obj;
				
									if (this.TRADEAGREEMENTJOURNALNUMBER == null) {
										if (other.TRADEAGREEMENTJOURNALNUMBER != null) 
											return false;
								
									} else if (!this.TRADEAGREEMENTJOURNALNUMBER.equals(other.TRADEAGREEMENTJOURNALNUMBER))
								 
										return false;
								
									if (this.ITEMNUMBER == null) {
										if (other.ITEMNUMBER != null) 
											return false;
								
									} else if (!this.ITEMNUMBER.equals(other.ITEMNUMBER))
								 
										return false;
								
									if (this.PRICE == null) {
										if (other.PRICE != null) 
											return false;
								
									} else if (!this.PRICE.equals(other.PRICE))
								 
										return false;
								
									if (this.PRICECURRENCYCODE == null) {
										if (other.PRICECURRENCYCODE != null) 
											return false;
								
									} else if (!this.PRICECURRENCYCODE.equals(other.PRICECURRENCYCODE))
								 
										return false;
								
									if (this.PRICECUSTOMERGROUPCODE == null) {
										if (other.PRICECUSTOMERGROUPCODE != null) 
											return false;
								
									} else if (!this.PRICECUSTOMERGROUPCODE.equals(other.PRICECUSTOMERGROUPCODE))
								 
										return false;
								
									if (this.PRODUCTCOLORID == null) {
										if (other.PRODUCTCOLORID != null) 
											return false;
								
									} else if (!this.PRODUCTCOLORID.equals(other.PRODUCTCOLORID))
								 
										return false;
								
									if (this.PRODUCTSIZEID == null) {
										if (other.PRODUCTSIZEID != null) 
											return false;
								
									} else if (!this.PRODUCTSIZEID.equals(other.PRODUCTSIZEID))
								 
										return false;
								
									if (this.PRODUCTSTYLEID == null) {
										if (other.PRODUCTSTYLEID != null) 
											return false;
								
									} else if (!this.PRODUCTSTYLEID.equals(other.PRODUCTSTYLEID))
								 
										return false;
								
									if (this.QUANTITYUNITSYMBOL == null) {
										if (other.QUANTITYUNITSYMBOL != null) 
											return false;
								
									} else if (!this.QUANTITYUNITSYMBOL.equals(other.QUANTITYUNITSYMBOL))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_31 = 0;
int nb_duplicates_tUniqRow_31 = 0;
KeyStruct_tUniqRow_31 finder_tUniqRow_31 = new KeyStruct_tUniqRow_31();
java.util.Set<KeyStruct_tUniqRow_31> keystUniqRow_31 = new java.util.HashSet<KeyStruct_tUniqRow_31>(); 

 



/**
 * [tUniqRow_31 begin ] stop
 */



	
	/**
	 * [tMap_34 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_34", false);
		start_Hash.put("tMap_34", System.currentTimeMillis());
		
	
	currentComponent="tMap_34";

	
		int tos_count_tMap_34 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_34__Struct  {
}
Var__tMap_34__Struct Var__tMap_34 = new Var__tMap_34__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0Struct copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0_tmp = new copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0Struct();
// ###############################

        
        



        









 



/**
 * [tMap_34 begin ] stop
 */



	
	/**
	 * [tMap_33 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_33", false);
		start_Hash.put("tMap_33", System.currentTimeMillis());
		
	
	currentComponent="tMap_33";

	
		int tos_count_tMap_33 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_33__Struct  {
}
Var__tMap_33__Struct Var__tMap_33 = new Var__tMap_33__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0Struct copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0_tmp = new copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0Struct();
sortie_full_EUR_FIN_WSPStruct sortie_full_EUR_FIN_WSP_tmp = new sortie_full_EUR_FIN_WSPStruct();
// ###############################

        
        



        









 



/**
 * [tMap_33 begin ] stop
 */



	
	/**
	 * [tMap_32 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_32", false);
		start_Hash.put("tMap_32", System.currentTimeMillis());
		
	
	currentComponent="tMap_32";

	
		int tos_count_tMap_32 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_32__Struct  {
}
Var__tMap_32__Struct Var__tMap_32 = new Var__tMap_32__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0Struct copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_tmp = new copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0Struct();
sortie_full_SEK_RRPStruct sortie_full_SEK_RRP_tmp = new sortie_full_SEK_RRPStruct();
// ###############################

        
        



        









 



/**
 * [tMap_32 begin ] stop
 */



	
	/**
	 * [tMap_31 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_31", false);
		start_Hash.put("tMap_31", System.currentTimeMillis());
		
	
	currentComponent="tMap_31";

	
		int tos_count_tMap_31 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_31__Struct  {
}
Var__tMap_31__Struct Var__tMap_31 = new Var__tMap_31__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0Struct copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_tmp = new copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0Struct();
sortie_full_SEK_WSPStruct sortie_full_SEK_WSP_tmp = new sortie_full_SEK_WSPStruct();
// ###############################

        
        



        









 



/**
 * [tMap_31 begin ] stop
 */



	
	/**
	 * [tMap_30 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_30", false);
		start_Hash.put("tMap_30", System.currentTimeMillis());
		
	
	currentComponent="tMap_30";

	
		int tos_count_tMap_30 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_30__Struct  {
}
Var__tMap_30__Struct Var__tMap_30 = new Var__tMap_30__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0Struct copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_tmp = new copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0Struct();
sortie_full_DKK_WSPStruct sortie_full_DKK_WSP_tmp = new sortie_full_DKK_WSPStruct();
// ###############################

        
        



        









 



/**
 * [tMap_30 begin ] stop
 */



	
	/**
	 * [tMap_29 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_29", false);
		start_Hash.put("tMap_29", System.currentTimeMillis());
		
	
	currentComponent="tMap_29";

	
		int tos_count_tMap_29 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_29__Struct  {
}
Var__tMap_29__Struct Var__tMap_29 = new Var__tMap_29__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0Struct copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_tmp = new copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0Struct();
sortie_full_DKK_RRPStruct sortie_full_DKK_RRP_tmp = new sortie_full_DKK_RRPStruct();
// ###############################

        
        



        









 



/**
 * [tMap_29 begin ] stop
 */



	
	/**
	 * [tMap_28 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_28", false);
		start_Hash.put("tMap_28", System.currentTimeMillis());
		
	
	currentComponent="tMap_28";

	
		int tos_count_tMap_28 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_28__Struct  {
}
Var__tMap_28__Struct Var__tMap_28 = new Var__tMap_28__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0Struct copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_tmp = new copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0Struct();
sortie_full_nok_rrpStruct sortie_full_nok_rrp_tmp = new sortie_full_nok_rrpStruct();
// ###############################

        
        



        









 



/**
 * [tMap_28 begin ] stop
 */



	
	/**
	 * [tMap_27 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_27", false);
		start_Hash.put("tMap_27", System.currentTimeMillis());
		
	
	currentComponent="tMap_27";

	
		int tos_count_tMap_27 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_27__Struct  {
}
Var__tMap_27__Struct Var__tMap_27 = new Var__tMap_27__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0Struct copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_tmp = new copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0Struct();
sortie_full_NOK_WSPStruct sortie_full_NOK_WSP_tmp = new sortie_full_NOK_WSPStruct();
// ###############################

        
        



        









 



/**
 * [tMap_27 begin ] stop
 */



	
	/**
	 * [tMap_26 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_26", false);
		start_Hash.put("tMap_26", System.currentTimeMillis());
		
	
	currentComponent="tMap_26";

	
		int tos_count_tMap_26 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_26__Struct  {
}
Var__tMap_26__Struct Var__tMap_26 = new Var__tMap_26__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0Struct copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_tmp = new copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0Struct();
sortie_full_chr_rrpStruct sortie_full_chr_rrp_tmp = new sortie_full_chr_rrpStruct();
// ###############################

        
        



        









 



/**
 * [tMap_26 begin ] stop
 */



	
	/**
	 * [tMap_25 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_25", false);
		start_Hash.put("tMap_25", System.currentTimeMillis());
		
	
	currentComponent="tMap_25";

	
		int tos_count_tMap_25 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_25__Struct  {
}
Var__tMap_25__Struct Var__tMap_25 = new Var__tMap_25__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfcopyOfcopyOfsortie_EUR_WSP_0Struct copyOfcopyOfcopyOfsortie_EUR_WSP_0_tmp = new copyOfcopyOfcopyOfsortie_EUR_WSP_0Struct();
sortie_full_CHF_WSPStruct sortie_full_CHF_WSP_tmp = new sortie_full_CHF_WSPStruct();
// ###############################

        
        



        









 



/**
 * [tMap_25 begin ] stop
 */



	
	/**
	 * [tMap_24 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_24", false);
		start_Hash.put("tMap_24", System.currentTimeMillis());
		
	
	currentComponent="tMap_24";

	
		int tos_count_tMap_24 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_24__Struct  {
}
Var__tMap_24__Struct Var__tMap_24 = new Var__tMap_24__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfcopyOfsortie_EUR_WSP_0Struct copyOfcopyOfsortie_EUR_WSP_0_tmp = new copyOfcopyOfsortie_EUR_WSP_0Struct();
sortie_full_GBP_RRPStruct sortie_full_GBP_RRP_tmp = new sortie_full_GBP_RRPStruct();
// ###############################

        
        



        









 



/**
 * [tMap_24 begin ] stop
 */



	
	/**
	 * [tMap_23 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_23", false);
		start_Hash.put("tMap_23", System.currentTimeMillis());
		
	
	currentComponent="tMap_23";

	
		int tos_count_tMap_23 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_23__Struct  {
}
Var__tMap_23__Struct Var__tMap_23 = new Var__tMap_23__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfsortie_EUR_WSP_0Struct copyOfsortie_EUR_WSP_0_tmp = new copyOfsortie_EUR_WSP_0Struct();
sortie_full_gbp_wspStruct sortie_full_gbp_wsp_tmp = new sortie_full_gbp_wspStruct();
// ###############################

        
        



        









 



/**
 * [tMap_23 begin ] stop
 */



	
	/**
	 * [tMap_21 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_21", false);
		start_Hash.put("tMap_21", System.currentTimeMillis());
		
	
	currentComponent="tMap_21";

	
		int tos_count_tMap_21 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_21__Struct  {
}
Var__tMap_21__Struct Var__tMap_21 = new Var__tMap_21__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfsortie_EUR_WSPStruct copyOfsortie_EUR_WSP_tmp = new copyOfsortie_EUR_WSPStruct();
sortie_full_rrp_eurStruct sortie_full_rrp_eur_tmp = new sortie_full_rrp_eurStruct();
// ###############################

        
        



        









 



/**
 * [tMap_21 begin ] stop
 */



	
	/**
	 * [tMap_20 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_20", false);
		start_Hash.put("tMap_20", System.currentTimeMillis());
		
	
	currentComponent="tMap_20";

	
		int tos_count_tMap_20 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<copyOfcopyOfsortie_fashionStruct> tHash_Lookup_copyOfcopyOfsortie_fashion = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<copyOfcopyOfsortie_fashionStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<copyOfcopyOfsortie_fashionStruct>) 
					globalMap.get( "tHash_Lookup_copyOfcopyOfsortie_fashion" ))
					;					
					
	

copyOfcopyOfsortie_fashionStruct copyOfcopyOfsortie_fashionHashKey = new copyOfcopyOfsortie_fashionStruct();
copyOfcopyOfsortie_fashionStruct copyOfcopyOfsortie_fashionDefault = new copyOfcopyOfsortie_fashionStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_20__Struct  {
}
Var__tMap_20__Struct Var__tMap_20 = new Var__tMap_20__Struct();
// ###############################

// ###############################
// # Outputs initialization
sortie_EUR_WSPStruct sortie_EUR_WSP_tmp = new sortie_EUR_WSPStruct();
sortie_full_eur_wspStruct sortie_full_eur_wsp_tmp = new sortie_full_eur_wspStruct();
// ###############################

        
        



        









 



/**
 * [tMap_20 begin ] stop
 */



	
	/**
	 * [tFilterRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_1", false);
		start_Hash.put("tFilterRow_1", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_1";

	
		int tos_count_tFilterRow_1 = 0;
		
    int nb_line_tFilterRow_1 = 0;
    int nb_line_ok_tFilterRow_1 = 0;
    int nb_line_reject_tFilterRow_1 = 0;

    class Operator_tFilterRow_1 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_1(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
sortie_Excel1Struct sortie_Excel1_tmp = new sortie_Excel1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tDBInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_5", false);
		start_Hash.put("tDBInput_5", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_5";

	
		int tos_count_tDBInput_5 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_5 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_5 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_5  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_5, talendToDBArray_tDBInput_5); 
		    int nb_line_tDBInput_5 = 0;
		    java.sql.Connection conn_tDBInput_5 = null;
				String driverClass_tDBInput_5 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
			    java.lang.Class jdbcclazz_tDBInput_5 = java.lang.Class.forName(driverClass_tDBInput_5);
					String dbUser_tDBInput_5 = context.SQLSERVER_Login;
					
					
					
	final String decryptedPassword_tDBInput_5 = context.SQLSERVER_Password; 
					
					String dbPwd_tDBInput_5 = decryptedPassword_tDBInput_5;
				
		    String port_tDBInput_5 = context.SQLSERVER_Port;
		    String dbname_tDBInput_5 = context.SQLSERVER_Database ;		    
		    String url_tDBInput_5 = "jdbc:sqlserver://" + context.SQLSERVER_Server ;
		    if (!"".equals(port_tDBInput_5)) {
		    	url_tDBInput_5 += ":" + context.SQLSERVER_Port;
		    }
		    if (!"".equals(dbname_tDBInput_5)) {		    
		    	url_tDBInput_5 += ";databaseName=" + context.SQLSERVER_Database; 
		    }
		    url_tDBInput_5 += ";appName=" + projectName + ";" + context.SQLSERVER_AdditionalParams;
		    String dbschema_tDBInput_5 = context.SQLSERVER_Schema;
				
				conn_tDBInput_5 = java.sql.DriverManager.getConnection(url_tDBInput_5,dbUser_tDBInput_5,dbPwd_tDBInput_5);
		        
		    
			java.sql.Statement stmt_tDBInput_5 = conn_tDBInput_5.createStatement();

		    String dbquery_tDBInput_5 = "select [BRAND]\n      ,[SEASON]\n      ,[CATEGORY]\n      ,[REF]\n      ,[DESCRIPTION]\n      ,[STYLE]\n      ,[COLOR]"
+"\n      ,[COLORNAME]\n      ,[STYLE_COLOR]\n      ,[STYLECOLORLABEL]\n      ,[LBL]\n      ,[GENDER]\n      ,[AGE_RANGE]\n"
+"      ,[SIZE_RANGE]\n      ,[SIZE]\n      ,[US_SIZE]\n      ,[CM_SIZE]\n      ,[FASHION]\n      ,[PRODUCT]\n      ,[PROD"
+"UCT_CHANNEL]\n      ,[PRODUCT_STATUS]\n      ,[PRODUCT_TIER]\n      ,[ACCT_EXCLUS]\n      ,[EUR_RRP]\n      ,[EUR_WSP]\n"
+"      ,[GBP_RRP]\n      ,[GBP_WSP]\n      ,[CHF_RRP]\n      ,[CHF_WSP]\n      ,[DKK_RRP]\n      ,[DKK_WSP]\n      ,[NOK_"
+"RRP]\n      ,[NOK_WSP]\n      ,[SEK_RRP]\n      ,[SEK_WSP]\n      ,[EUR_FINN_RRP]\n      ,[EUR_FINN_WSP]\n      ,[CARTON"
+"_QTY]\n      ,[FABRICATION]\n      ,[COO]\n      ,[CUSTOM_TARIFF_CODE]\n      ,[UPC]\n      ,[EAN]\n      ,[DELIVERYFLOW"
+"]\n      ,[SUSTAINABILITY]  from  [masterfile].[Products] where priceExtractDate is null and  fileName = " + "'" + context.ExcelFileName + "'" +
" and CreationDate = " + "'" + context.CreationDate + "'"
;
			

            	globalMap.put("tDBInput_5_QUERY",dbquery_tDBInput_5);
		    java.sql.ResultSet rs_tDBInput_5 = null;

		    try {
		    	rs_tDBInput_5 = stmt_tDBInput_5.executeQuery(dbquery_tDBInput_5);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_5 = rs_tDBInput_5.getMetaData();
		    	int colQtyInRs_tDBInput_5 = rsmd_tDBInput_5.getColumnCount();

		    String tmpContent_tDBInput_5 = null;
		    
		    
		    while (rs_tDBInput_5.next()) {
		        nb_line_tDBInput_5++;
		        
							if(colQtyInRs_tDBInput_5 < 1) {
								row1.BRAND = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(1);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.BRAND = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.BRAND = tmpContent_tDBInput_5;
                }
            } else {
                row1.BRAND = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 2) {
								row1.SEASON = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(2);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.SEASON = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.SEASON = tmpContent_tDBInput_5;
                }
            } else {
                row1.SEASON = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 3) {
								row1.CATEGORY = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(3);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.CATEGORY = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.CATEGORY = tmpContent_tDBInput_5;
                }
            } else {
                row1.CATEGORY = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 4) {
								row1.REF = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(4);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.REF = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.REF = tmpContent_tDBInput_5;
                }
            } else {
                row1.REF = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 5) {
								row1.DESCRIPTION = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(5);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(5).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.DESCRIPTION = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.DESCRIPTION = tmpContent_tDBInput_5;
                }
            } else {
                row1.DESCRIPTION = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 6) {
								row1.STYLE = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(6);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(6).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.STYLE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.STYLE = tmpContent_tDBInput_5;
                }
            } else {
                row1.STYLE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 7) {
								row1.COLOR = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(7);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(7).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.COLOR = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.COLOR = tmpContent_tDBInput_5;
                }
            } else {
                row1.COLOR = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 8) {
								row1.COLORNAME = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(8);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(8).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.COLORNAME = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.COLORNAME = tmpContent_tDBInput_5;
                }
            } else {
                row1.COLORNAME = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 9) {
								row1.STYLE_COLOR = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(9);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(9).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.STYLE_COLOR = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.STYLE_COLOR = tmpContent_tDBInput_5;
                }
            } else {
                row1.STYLE_COLOR = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 10) {
								row1.STYLECOLORLABEL = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(10);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(10).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.STYLECOLORLABEL = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.STYLECOLORLABEL = tmpContent_tDBInput_5;
                }
            } else {
                row1.STYLECOLORLABEL = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 11) {
								row1.LBL = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(11);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(11).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.LBL = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.LBL = tmpContent_tDBInput_5;
                }
            } else {
                row1.LBL = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 12) {
								row1.GENDER = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(12);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(12).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.GENDER = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.GENDER = tmpContent_tDBInput_5;
                }
            } else {
                row1.GENDER = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 13) {
								row1.AGE_RANGE = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(13);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(13).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.AGE_RANGE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.AGE_RANGE = tmpContent_tDBInput_5;
                }
            } else {
                row1.AGE_RANGE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 14) {
								row1.SIZE_RANGE = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(14);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(14).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.SIZE_RANGE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.SIZE_RANGE = tmpContent_tDBInput_5;
                }
            } else {
                row1.SIZE_RANGE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 15) {
								row1.SIZE = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(15);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(15).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.SIZE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.SIZE = tmpContent_tDBInput_5;
                }
            } else {
                row1.SIZE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 16) {
								row1.US_SIZE = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(16);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(16).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.US_SIZE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.US_SIZE = tmpContent_tDBInput_5;
                }
            } else {
                row1.US_SIZE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 17) {
								row1.CM_SIZE = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(17);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(17).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.CM_SIZE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.CM_SIZE = tmpContent_tDBInput_5;
                }
            } else {
                row1.CM_SIZE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 18) {
								row1.FASHION = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(18);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(18).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.FASHION = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.FASHION = tmpContent_tDBInput_5;
                }
            } else {
                row1.FASHION = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 19) {
								row1.PRODUCT = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(19);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(19).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.PRODUCT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.PRODUCT = tmpContent_tDBInput_5;
                }
            } else {
                row1.PRODUCT = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 20) {
								row1.PRODUCT_CHANNEL = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(20);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(20).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.PRODUCT_CHANNEL = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.PRODUCT_CHANNEL = tmpContent_tDBInput_5;
                }
            } else {
                row1.PRODUCT_CHANNEL = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 21) {
								row1.PRODUCT_STATUS = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(21);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(21).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.PRODUCT_STATUS = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.PRODUCT_STATUS = tmpContent_tDBInput_5;
                }
            } else {
                row1.PRODUCT_STATUS = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 22) {
								row1.PRODUCT_TIER = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(22);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(22).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.PRODUCT_TIER = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.PRODUCT_TIER = tmpContent_tDBInput_5;
                }
            } else {
                row1.PRODUCT_TIER = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 23) {
								row1.ACCT_EXCLUS = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(23);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(23).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.ACCT_EXCLUS = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.ACCT_EXCLUS = tmpContent_tDBInput_5;
                }
            } else {
                row1.ACCT_EXCLUS = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 24) {
								row1.EUR_RRP = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(24);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(24).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.EUR_RRP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.EUR_RRP = tmpContent_tDBInput_5;
                }
            } else {
                row1.EUR_RRP = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 25) {
								row1.EUR_WSP = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(25);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(25).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.EUR_WSP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.EUR_WSP = tmpContent_tDBInput_5;
                }
            } else {
                row1.EUR_WSP = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 26) {
								row1.GBP_RRP = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(26);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(26).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.GBP_RRP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.GBP_RRP = tmpContent_tDBInput_5;
                }
            } else {
                row1.GBP_RRP = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 27) {
								row1.GBP_WSP = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(27);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(27).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.GBP_WSP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.GBP_WSP = tmpContent_tDBInput_5;
                }
            } else {
                row1.GBP_WSP = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 28) {
								row1.CHF_RRP = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(28);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(28).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.CHF_RRP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.CHF_RRP = tmpContent_tDBInput_5;
                }
            } else {
                row1.CHF_RRP = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 29) {
								row1.CHF_WSP = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(29);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(29).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.CHF_WSP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.CHF_WSP = tmpContent_tDBInput_5;
                }
            } else {
                row1.CHF_WSP = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 30) {
								row1.DKK_RRP = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(30);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(30).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.DKK_RRP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.DKK_RRP = tmpContent_tDBInput_5;
                }
            } else {
                row1.DKK_RRP = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 31) {
								row1.DKK_WSP = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(31);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(31).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.DKK_WSP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.DKK_WSP = tmpContent_tDBInput_5;
                }
            } else {
                row1.DKK_WSP = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 32) {
								row1.NOK_RRP = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(32);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(32).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.NOK_RRP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.NOK_RRP = tmpContent_tDBInput_5;
                }
            } else {
                row1.NOK_RRP = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 33) {
								row1.NOK_WSP = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(33);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(33).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.NOK_WSP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.NOK_WSP = tmpContent_tDBInput_5;
                }
            } else {
                row1.NOK_WSP = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 34) {
								row1.SEK_RRP = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(34);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(34).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.SEK_RRP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.SEK_RRP = tmpContent_tDBInput_5;
                }
            } else {
                row1.SEK_RRP = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 35) {
								row1.SEK_WSP = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(35);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(35).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.SEK_WSP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.SEK_WSP = tmpContent_tDBInput_5;
                }
            } else {
                row1.SEK_WSP = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 36) {
								row1.EUR_FINN_RRP = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(36);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(36).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.EUR_FINN_RRP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.EUR_FINN_RRP = tmpContent_tDBInput_5;
                }
            } else {
                row1.EUR_FINN_RRP = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 37) {
								row1.EUR_FINN_WSP = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(37);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(37).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.EUR_FINN_WSP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.EUR_FINN_WSP = tmpContent_tDBInput_5;
                }
            } else {
                row1.EUR_FINN_WSP = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 38) {
								row1.CARTON_QTY = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(38);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(38).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.CARTON_QTY = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.CARTON_QTY = tmpContent_tDBInput_5;
                }
            } else {
                row1.CARTON_QTY = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 39) {
								row1.FABRICATION = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(39);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(39).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.FABRICATION = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.FABRICATION = tmpContent_tDBInput_5;
                }
            } else {
                row1.FABRICATION = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 40) {
								row1.COO = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(40);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(40).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.COO = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.COO = tmpContent_tDBInput_5;
                }
            } else {
                row1.COO = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 41) {
								row1.CUSTOM_TARIFF_CODE = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(41);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(41).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.CUSTOM_TARIFF_CODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.CUSTOM_TARIFF_CODE = tmpContent_tDBInput_5;
                }
            } else {
                row1.CUSTOM_TARIFF_CODE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 42) {
								row1.UPC = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(42);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(42).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.UPC = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.UPC = tmpContent_tDBInput_5;
                }
            } else {
                row1.UPC = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 43) {
								row1.EAN = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(43);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(43).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.EAN = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.EAN = tmpContent_tDBInput_5;
                }
            } else {
                row1.EAN = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 44) {
								row1.DELIVERYFLOW = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(44);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(44).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.DELIVERYFLOW = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.DELIVERYFLOW = tmpContent_tDBInput_5;
                }
            } else {
                row1.DELIVERYFLOW = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 45) {
								row1.SUSTAINABILITY = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(45);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(45).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.SUSTAINABILITY = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row1.SUSTAINABILITY = tmpContent_tDBInput_5;
                }
            } else {
                row1.SUSTAINABILITY = null;
            }
		                    }
					





 



/**
 * [tDBInput_5 begin ] stop
 */
	
	/**
	 * [tDBInput_5 main ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 


	tos_count_tDBInput_5++;

/**
 * [tDBInput_5 main ] stop
 */
	
	/**
	 * [tDBInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

sortie_Excel1 = null;


// # Output table : 'sortie_Excel1'
sortie_Excel1_tmp.BRAND = row1.BRAND ;
sortie_Excel1_tmp.SEASON = row1.SEASON ;
sortie_Excel1_tmp.CATEGORY = row1.CATEGORY ;
sortie_Excel1_tmp.REF = row1.REF ;
sortie_Excel1_tmp.DESCRIPTION = row1.DESCRIPTION ;
sortie_Excel1_tmp.STYLE = row1.STYLE ;
sortie_Excel1_tmp.COLOR = row1.COLOR ;
sortie_Excel1_tmp.FASHION = row1.FASHION ;
sortie_Excel1_tmp.STYLECOLORLABEL = row1.STYLECOLORLABEL ;
sortie_Excel1_tmp.COLORNAME = row1.COLORNAME ;
sortie_Excel1_tmp.LBL = row1.LBL ;
sortie_Excel1_tmp.STYLE_COLOR = row1.STYLE_COLOR ;
sortie_Excel1_tmp.GENDER = row1.GENDER ;
sortie_Excel1_tmp.AGE_RANGE = row1.AGE_RANGE ;
sortie_Excel1_tmp.SIZE_RANGE = row1.SIZE_RANGE ;
sortie_Excel1_tmp.SIZE = row1.SIZE ;
sortie_Excel1_tmp.US_SIZE = row1.US_SIZE ;
sortie_Excel1_tmp.CM_SIZE = row1.CM_SIZE ;
sortie_Excel1_tmp.PRODUCT = row1.PRODUCT ;
sortie_Excel1_tmp.PRODUCT_STATUS = row1.PRODUCT_STATUS ;
sortie_Excel1_tmp.PRODUCT_TIER = row1.PRODUCT_TIER ;
sortie_Excel1_tmp.ACCT_EXCLUS = row1.ACCT_EXCLUS ;
sortie_Excel1_tmp.SIZE_RATIO_SPLIT = "";
sortie_Excel1_tmp.REC_SIZE_SPLIT = "";
sortie_Excel1_tmp.CARTON_QTY = row1.CARTON_QTY ;
sortie_Excel1_tmp.ATTRIBUTE = "";
sortie_Excel1_tmp.UNITS = "";
sortie_Excel1_tmp.EUR_RRP = row1.EUR_RRP ;
sortie_Excel1_tmp.EUR_WSP = row1.EUR_WSP ;
sortie_Excel1_tmp.GBP_RRP = row1.GBP_RRP ;
sortie_Excel1_tmp.GBP_WSP = row1.GBP_WSP ;
sortie_Excel1_tmp.CHF_RRP = row1.CHF_RRP ;
sortie_Excel1_tmp.CHF_WSP = row1.CHF_WSP ;
sortie_Excel1_tmp.NOK_RRP = row1.NOK_RRP ;
sortie_Excel1_tmp.NOK_WSP = row1.NOK_WSP ;
sortie_Excel1_tmp.DKK_RRP = row1.DKK_RRP ;
sortie_Excel1_tmp.DKK_WSP = row1.DKK_WSP ;
sortie_Excel1_tmp.SEK_RRP = row1.SEK_RRP ;
sortie_Excel1_tmp.SEK_WSP = row1.SEK_WSP ;
sortie_Excel1_tmp.EUR_FINN_RRP = row1.EUR_FINN_RRP ;
sortie_Excel1_tmp.EUR_FINN_WSP = row1.EUR_FINN_WSP ;
sortie_Excel1_tmp.FABRICATION = row1.FABRICATION ;
sortie_Excel1_tmp.COO = row1.COO ;
sortie_Excel1_tmp.CUSTOM_TARIFF_CODE = row1.CUSTOM_TARIFF_CODE ;
sortie_Excel1_tmp.UPC = row1.UPC ;
sortie_Excel1_tmp.SMU_TYPE = "";
sortie_Excel1_tmp.EAN = row1.EAN ;
sortie_Excel1_tmp.PRODUCT_CHANNEL = row1.PRODUCT_CHANNEL ;
sortie_Excel1_tmp.SUSTAINABILITY = row1.SUSTAINABILITY ;
sortie_Excel1 = sortie_Excel1_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "sortie_Excel1"
if(sortie_Excel1 != null) { 



	
	/**
	 * [tFilterRow_1 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

          sortie_Excel = null;
    Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1("&&");
            ope_tFilterRow_1.matches((sortie_Excel1.STYLE == null? false : sortie_Excel1.STYLE.compareTo("") != 0)
                           , "STYLE.compareTo(\"\") != 0 failed");
    
    if (ope_tFilterRow_1.getMatchFlag()) {
              if(sortie_Excel == null){ 
                sortie_Excel = new sortie_ExcelStruct();
              }
               sortie_Excel.BRAND = sortie_Excel1.BRAND;
               sortie_Excel.SEASON = sortie_Excel1.SEASON;
               sortie_Excel.CATEGORY = sortie_Excel1.CATEGORY;
               sortie_Excel.REF = sortie_Excel1.REF;
               sortie_Excel.DESCRIPTION = sortie_Excel1.DESCRIPTION;
               sortie_Excel.STYLE = sortie_Excel1.STYLE;
               sortie_Excel.COLOR = sortie_Excel1.COLOR;
               sortie_Excel.FASHION = sortie_Excel1.FASHION;
               sortie_Excel.STYLECOLORLABEL = sortie_Excel1.STYLECOLORLABEL;
               sortie_Excel.COLORNAME = sortie_Excel1.COLORNAME;
               sortie_Excel.LBL = sortie_Excel1.LBL;
               sortie_Excel.STYLE_COLOR = sortie_Excel1.STYLE_COLOR;
               sortie_Excel.GENDER = sortie_Excel1.GENDER;
               sortie_Excel.AGE_RANGE = sortie_Excel1.AGE_RANGE;
               sortie_Excel.SIZE_RANGE = sortie_Excel1.SIZE_RANGE;
               sortie_Excel.SIZE = sortie_Excel1.SIZE;
               sortie_Excel.US_SIZE = sortie_Excel1.US_SIZE;
               sortie_Excel.CM_SIZE = sortie_Excel1.CM_SIZE;
               sortie_Excel.PRODUCT = sortie_Excel1.PRODUCT;
               sortie_Excel.PRODUCT_STATUS = sortie_Excel1.PRODUCT_STATUS;
               sortie_Excel.PRODUCT_TIER = sortie_Excel1.PRODUCT_TIER;
               sortie_Excel.ACCT_EXCLUS = sortie_Excel1.ACCT_EXCLUS;
               sortie_Excel.SIZE_RATIO_SPLIT = sortie_Excel1.SIZE_RATIO_SPLIT;
               sortie_Excel.REC_SIZE_SPLIT = sortie_Excel1.REC_SIZE_SPLIT;
               sortie_Excel.CARTON_QTY = sortie_Excel1.CARTON_QTY;
               sortie_Excel.ATTRIBUTE = sortie_Excel1.ATTRIBUTE;
               sortie_Excel.UNITS = sortie_Excel1.UNITS;
               sortie_Excel.EUR_RRP = sortie_Excel1.EUR_RRP;
               sortie_Excel.EUR_WSP = sortie_Excel1.EUR_WSP;
               sortie_Excel.GBP_RRP = sortie_Excel1.GBP_RRP;
               sortie_Excel.GBP_WSP = sortie_Excel1.GBP_WSP;
               sortie_Excel.CHF_RRP = sortie_Excel1.CHF_RRP;
               sortie_Excel.CHF_WSP = sortie_Excel1.CHF_WSP;
               sortie_Excel.NOK_RRP = sortie_Excel1.NOK_RRP;
               sortie_Excel.NOK_WSP = sortie_Excel1.NOK_WSP;
               sortie_Excel.DKK_RRP = sortie_Excel1.DKK_RRP;
               sortie_Excel.DKK_WSP = sortie_Excel1.DKK_WSP;
               sortie_Excel.SEK_RRP = sortie_Excel1.SEK_RRP;
               sortie_Excel.SEK_WSP = sortie_Excel1.SEK_WSP;
               sortie_Excel.EUR_FINN_RRP = sortie_Excel1.EUR_FINN_RRP;
               sortie_Excel.EUR_FINN_WSP = sortie_Excel1.EUR_FINN_WSP;
               sortie_Excel.FABRICATION = sortie_Excel1.FABRICATION;
               sortie_Excel.COO = sortie_Excel1.COO;
               sortie_Excel.CUSTOM_TARIFF_CODE = sortie_Excel1.CUSTOM_TARIFF_CODE;
               sortie_Excel.UPC = sortie_Excel1.UPC;
               sortie_Excel.SMU_TYPE = sortie_Excel1.SMU_TYPE;
               sortie_Excel.EAN = sortie_Excel1.EAN;
               sortie_Excel.PRODUCT_CHANNEL = sortie_Excel1.PRODUCT_CHANNEL;
               sortie_Excel.SUSTAINABILITY = sortie_Excel1.SUSTAINABILITY;    
      nb_line_ok_tFilterRow_1++;
    } else {
      nb_line_reject_tFilterRow_1++;
    }

nb_line_tFilterRow_1++;

 


	tos_count_tFilterRow_1++;

/**
 * [tFilterRow_1 main ] stop
 */
	
	/**
	 * [tFilterRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

 



/**
 * [tFilterRow_1 process_data_begin ] stop
 */
// Start of branch "sortie_Excel"
if(sortie_Excel != null) { 



	
	/**
	 * [tMap_20 main ] start
	 */

	

	
	
	currentComponent="tMap_20";

	

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_20 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_20 = false;
		  boolean mainRowRejected_tMap_20 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "copyOfcopyOfsortie_fashion" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopcopyOfcopyOfsortie_fashion = false;
       		  	    	
       		  	    	
 							copyOfcopyOfsortie_fashionStruct copyOfcopyOfsortie_fashionObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_20) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_20 = false;
								
                        		    		copyOfcopyOfsortie_fashionHashKey.CODE = StringHandling.DOWNCASE(sortie_Excel.LBL   )  ;
                        		    		

								
		                        	copyOfcopyOfsortie_fashionHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_copyOfcopyOfsortie_fashion.lookup( copyOfcopyOfsortie_fashionHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_copyOfcopyOfsortie_fashion != null && tHash_Lookup_copyOfcopyOfsortie_fashion.getCount(copyOfcopyOfsortie_fashionHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'copyOfcopyOfsortie_fashion' and it contains more one result from keys :  copyOfcopyOfsortie_fashion.CODE = '" + copyOfcopyOfsortie_fashionHashKey.CODE + "'");
								} // G 071
							

							copyOfcopyOfsortie_fashionStruct copyOfcopyOfsortie_fashion = null;
                    		  	 
							   
                    		  	 
	       		  	    	copyOfcopyOfsortie_fashionStruct fromLookup_copyOfcopyOfsortie_fashion = null;
							copyOfcopyOfsortie_fashion = copyOfcopyOfsortie_fashionDefault;
										 
							
								 
							
							
								if (tHash_Lookup_copyOfcopyOfsortie_fashion !=null && tHash_Lookup_copyOfcopyOfsortie_fashion.hasNext()) { // G 099
								
							
								
								fromLookup_copyOfcopyOfsortie_fashion = tHash_Lookup_copyOfcopyOfsortie_fashion.next();

							
							
								} // G 099
							
							

							if(fromLookup_copyOfcopyOfsortie_fashion != null) {
								copyOfcopyOfsortie_fashion = fromLookup_copyOfcopyOfsortie_fashion;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_20__Struct Var = Var__tMap_20;// ###############################
        // ###############################
        // # Output tables

sortie_EUR_WSP = null;
sortie_full_eur_wsp = null;


// # Output table : 'sortie_EUR_WSP'
sortie_EUR_WSP_tmp.TRADEAGREEMENTJOURNALNUMBER = "HBE1-" + globalMap.get("SalesJournalNumber");
sortie_EUR_WSP_tmp.ITEMNUMBER = sortie_Excel.STYLE ;
sortie_EUR_WSP_tmp.PRICE = sortie_Excel.EUR_WSP == null ? 0 : Mathematical.REAL(sortie_Excel.EUR_WSP .replaceAll(",", ".") ) ;
sortie_EUR_WSP_tmp.PRICECURRENCYCODE = "EUR";
sortie_EUR_WSP_tmp.PRICECUSTOMERGROUPCODE = "WSP";
sortie_EUR_WSP_tmp.PRODUCTCOLORID = sortie_Excel.COLOR ;
sortie_EUR_WSP_tmp.PRODUCTSIZEID = sortie_Excel.SIZE ;
sortie_EUR_WSP_tmp.PRODUCTSTYLEID = copyOfcopyOfsortie_fashion.LABEL ;
sortie_EUR_WSP_tmp.QUANTITYUNITSYMBOL = "PCE";
sortie_EUR_WSP_tmp.SEASON = sortie_Excel.SEASON ;
sortie_EUR_WSP_tmp.COUNTRY = "";
sortie_EUR_WSP = sortie_EUR_WSP_tmp;

// # Output table : 'sortie_full_eur_wsp'
sortie_full_eur_wsp_tmp.BRAND = sortie_Excel.BRAND ;
sortie_full_eur_wsp_tmp.SEASON = sortie_Excel.SEASON ;
sortie_full_eur_wsp_tmp.CATEGORY = sortie_Excel.CATEGORY ;
sortie_full_eur_wsp_tmp.REF = sortie_Excel.REF ;
sortie_full_eur_wsp_tmp.DESCRIPTION = sortie_Excel.DESCRIPTION ;
sortie_full_eur_wsp_tmp.STYLE = sortie_Excel.STYLE ;
sortie_full_eur_wsp_tmp.COLOR = sortie_Excel.COLOR ;
sortie_full_eur_wsp_tmp.FASHION = sortie_Excel.FASHION ;
sortie_full_eur_wsp_tmp.STYLECOLORLABEL = sortie_Excel.STYLECOLORLABEL ;
sortie_full_eur_wsp_tmp.COLORNAME = sortie_Excel.COLORNAME ;
sortie_full_eur_wsp_tmp.LBL = sortie_Excel.LBL ;
sortie_full_eur_wsp_tmp.STYLE_COLOR = sortie_Excel.STYLE_COLOR ;
sortie_full_eur_wsp_tmp.GENDER = sortie_Excel.GENDER ;
sortie_full_eur_wsp_tmp.AGE_RANGE = sortie_Excel.AGE_RANGE ;
sortie_full_eur_wsp_tmp.SIZE_RANGE = sortie_Excel.SIZE_RANGE ;
sortie_full_eur_wsp_tmp.SIZE = sortie_Excel.SIZE ;
sortie_full_eur_wsp_tmp.US_SIZE = sortie_Excel.US_SIZE ;
sortie_full_eur_wsp_tmp.CM_SIZE = sortie_Excel.CM_SIZE ;
sortie_full_eur_wsp_tmp.PRODUCT = sortie_Excel.PRODUCT ;
sortie_full_eur_wsp_tmp.PRODUCT_STATUS = sortie_Excel.PRODUCT_STATUS ;
sortie_full_eur_wsp_tmp.PRODUCT_TIER = sortie_Excel.PRODUCT_TIER ;
sortie_full_eur_wsp_tmp.ACCT_EXCLUS = sortie_Excel.ACCT_EXCLUS ;
sortie_full_eur_wsp_tmp.SIZE_RATIO_SPLIT = sortie_Excel.SIZE_RATIO_SPLIT ;
sortie_full_eur_wsp_tmp.REC_SIZE_SPLIT = sortie_Excel.REC_SIZE_SPLIT ;
sortie_full_eur_wsp_tmp.CARTON_QTY = sortie_Excel.CARTON_QTY ;
sortie_full_eur_wsp_tmp.ATTRIBUTE = sortie_Excel.ATTRIBUTE ;
sortie_full_eur_wsp_tmp.UNITS = sortie_Excel.UNITS ;
sortie_full_eur_wsp_tmp.EUR_RRP = sortie_Excel.EUR_RRP ;
sortie_full_eur_wsp_tmp.EUR_WSP = sortie_Excel.EUR_WSP ;
sortie_full_eur_wsp_tmp.GBP_RRP = sortie_Excel.GBP_RRP ;
sortie_full_eur_wsp_tmp.GBP_WSP = sortie_Excel.GBP_WSP ;
sortie_full_eur_wsp_tmp.CHF_RRP = sortie_Excel.CHF_RRP ;
sortie_full_eur_wsp_tmp.CHF_WSP = sortie_Excel.CHF_WSP ;
sortie_full_eur_wsp_tmp.NOK_RRP = sortie_Excel.NOK_RRP ;
sortie_full_eur_wsp_tmp.NOK_WSP = sortie_Excel.NOK_WSP ;
sortie_full_eur_wsp_tmp.DKK_RRP = sortie_Excel.DKK_RRP ;
sortie_full_eur_wsp_tmp.DKK_WSP = sortie_Excel.DKK_WSP ;
sortie_full_eur_wsp_tmp.SEK_RRP = sortie_Excel.SEK_RRP ;
sortie_full_eur_wsp_tmp.SEK_WSP = sortie_Excel.SEK_WSP ;
sortie_full_eur_wsp_tmp.EUR_FINN_RRP = sortie_Excel.EUR_FINN_RRP ;
sortie_full_eur_wsp_tmp.EUR_FINN_WSP = sortie_Excel.EUR_FINN_WSP ;
sortie_full_eur_wsp_tmp.FABRICATION = sortie_Excel.FABRICATION ;
sortie_full_eur_wsp_tmp.COO = sortie_Excel.COO ;
sortie_full_eur_wsp_tmp.CUSTOM_TARIFF_CODE = sortie_Excel.CUSTOM_TARIFF_CODE ;
sortie_full_eur_wsp_tmp.UPC = sortie_Excel.UPC ;
sortie_full_eur_wsp_tmp.SMU_TYPE = sortie_Excel.SMU_TYPE ;
sortie_full_eur_wsp_tmp.LABELD365 = copyOfcopyOfsortie_fashion.LABEL ;
sortie_full_eur_wsp = sortie_full_eur_wsp_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_20 = false;










 


	tos_count_tMap_20++;

/**
 * [tMap_20 main ] stop
 */
	
	/**
	 * [tMap_20 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_20";

	

 



/**
 * [tMap_20 process_data_begin ] stop
 */
// Start of branch "sortie_EUR_WSP"
if(sortie_EUR_WSP != null) { 



	
	/**
	 * [tUniqRow_18 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_18";

	
row35 = null;			
if(sortie_EUR_WSP.TRADEAGREEMENTJOURNALNUMBER == null){
	finder_tUniqRow_18.TRADEAGREEMENTJOURNALNUMBER = null;
}else{
	finder_tUniqRow_18.TRADEAGREEMENTJOURNALNUMBER = sortie_EUR_WSP.TRADEAGREEMENTJOURNALNUMBER.toLowerCase();
}
if(sortie_EUR_WSP.ITEMNUMBER == null){
	finder_tUniqRow_18.ITEMNUMBER = null;
}else{
	finder_tUniqRow_18.ITEMNUMBER = sortie_EUR_WSP.ITEMNUMBER.toLowerCase();
}
finder_tUniqRow_18.PRICE = sortie_EUR_WSP.PRICE;
if(sortie_EUR_WSP.PRICECURRENCYCODE == null){
	finder_tUniqRow_18.PRICECURRENCYCODE = null;
}else{
	finder_tUniqRow_18.PRICECURRENCYCODE = sortie_EUR_WSP.PRICECURRENCYCODE.toLowerCase();
}
if(sortie_EUR_WSP.PRICECUSTOMERGROUPCODE == null){
	finder_tUniqRow_18.PRICECUSTOMERGROUPCODE = null;
}else{
	finder_tUniqRow_18.PRICECUSTOMERGROUPCODE = sortie_EUR_WSP.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(sortie_EUR_WSP.PRODUCTCOLORID == null){
	finder_tUniqRow_18.PRODUCTCOLORID = null;
}else{
	finder_tUniqRow_18.PRODUCTCOLORID = sortie_EUR_WSP.PRODUCTCOLORID.toLowerCase();
}
if(sortie_EUR_WSP.PRODUCTSIZEID == null){
	finder_tUniqRow_18.PRODUCTSIZEID = null;
}else{
	finder_tUniqRow_18.PRODUCTSIZEID = sortie_EUR_WSP.PRODUCTSIZEID.toLowerCase();
}
if(sortie_EUR_WSP.PRODUCTSTYLEID == null){
	finder_tUniqRow_18.PRODUCTSTYLEID = null;
}else{
	finder_tUniqRow_18.PRODUCTSTYLEID = sortie_EUR_WSP.PRODUCTSTYLEID.toLowerCase();
}
if(sortie_EUR_WSP.QUANTITYUNITSYMBOL == null){
	finder_tUniqRow_18.QUANTITYUNITSYMBOL = null;
}else{
	finder_tUniqRow_18.QUANTITYUNITSYMBOL = sortie_EUR_WSP.QUANTITYUNITSYMBOL.toLowerCase();
}	
finder_tUniqRow_18.hashCodeDirty = true;
if (!keystUniqRow_18.contains(finder_tUniqRow_18)) {
		KeyStruct_tUniqRow_18 new_tUniqRow_18 = new KeyStruct_tUniqRow_18();

		
if(sortie_EUR_WSP.TRADEAGREEMENTJOURNALNUMBER == null){
	new_tUniqRow_18.TRADEAGREEMENTJOURNALNUMBER = null;
}else{
	new_tUniqRow_18.TRADEAGREEMENTJOURNALNUMBER = sortie_EUR_WSP.TRADEAGREEMENTJOURNALNUMBER.toLowerCase();
}
if(sortie_EUR_WSP.ITEMNUMBER == null){
	new_tUniqRow_18.ITEMNUMBER = null;
}else{
	new_tUniqRow_18.ITEMNUMBER = sortie_EUR_WSP.ITEMNUMBER.toLowerCase();
}
new_tUniqRow_18.PRICE = sortie_EUR_WSP.PRICE;
if(sortie_EUR_WSP.PRICECURRENCYCODE == null){
	new_tUniqRow_18.PRICECURRENCYCODE = null;
}else{
	new_tUniqRow_18.PRICECURRENCYCODE = sortie_EUR_WSP.PRICECURRENCYCODE.toLowerCase();
}
if(sortie_EUR_WSP.PRICECUSTOMERGROUPCODE == null){
	new_tUniqRow_18.PRICECUSTOMERGROUPCODE = null;
}else{
	new_tUniqRow_18.PRICECUSTOMERGROUPCODE = sortie_EUR_WSP.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(sortie_EUR_WSP.PRODUCTCOLORID == null){
	new_tUniqRow_18.PRODUCTCOLORID = null;
}else{
	new_tUniqRow_18.PRODUCTCOLORID = sortie_EUR_WSP.PRODUCTCOLORID.toLowerCase();
}
if(sortie_EUR_WSP.PRODUCTSIZEID == null){
	new_tUniqRow_18.PRODUCTSIZEID = null;
}else{
	new_tUniqRow_18.PRODUCTSIZEID = sortie_EUR_WSP.PRODUCTSIZEID.toLowerCase();
}
if(sortie_EUR_WSP.PRODUCTSTYLEID == null){
	new_tUniqRow_18.PRODUCTSTYLEID = null;
}else{
	new_tUniqRow_18.PRODUCTSTYLEID = sortie_EUR_WSP.PRODUCTSTYLEID.toLowerCase();
}
if(sortie_EUR_WSP.QUANTITYUNITSYMBOL == null){
	new_tUniqRow_18.QUANTITYUNITSYMBOL = null;
}else{
	new_tUniqRow_18.QUANTITYUNITSYMBOL = sortie_EUR_WSP.QUANTITYUNITSYMBOL.toLowerCase();
}
		
		keystUniqRow_18.add(new_tUniqRow_18);if(row35 == null){ 
	
	row35 = new row35Struct();
}row35.TRADEAGREEMENTJOURNALNUMBER = sortie_EUR_WSP.TRADEAGREEMENTJOURNALNUMBER;			row35.ITEMNUMBER = sortie_EUR_WSP.ITEMNUMBER;			row35.PRICE = sortie_EUR_WSP.PRICE;			row35.PRICECURRENCYCODE = sortie_EUR_WSP.PRICECURRENCYCODE;			row35.PRICECUSTOMERGROUPCODE = sortie_EUR_WSP.PRICECUSTOMERGROUPCODE;			row35.PRODUCTCOLORID = sortie_EUR_WSP.PRODUCTCOLORID;			row35.PRODUCTSIZEID = sortie_EUR_WSP.PRODUCTSIZEID;			row35.PRODUCTSTYLEID = sortie_EUR_WSP.PRODUCTSTYLEID;			row35.QUANTITYUNITSYMBOL = sortie_EUR_WSP.QUANTITYUNITSYMBOL;			row35.SEASON = sortie_EUR_WSP.SEASON;			row35.COUNTRY = sortie_EUR_WSP.COUNTRY;					
		nb_uniques_tUniqRow_18++;
	} else {
	  nb_duplicates_tUniqRow_18++;
	}

 


	tos_count_tUniqRow_18++;

/**
 * [tUniqRow_18 main ] stop
 */
	
	/**
	 * [tUniqRow_18 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_18";

	

 



/**
 * [tUniqRow_18 process_data_begin ] stop
 */
// Start of branch "row35"
if(row35 != null) { 



	
	/**
	 * [tFilterRow_2 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";

	

          row37 = null;
    Operator_tFilterRow_2 ope_tFilterRow_2 = new Operator_tFilterRow_2("||");
            ope_tFilterRow_2.matches((row35.PRICE == null? false : row35.PRICE.compareTo(ParserUtils.parseTo_Double(String.valueOf(0))) > 0)
                           , "PRICE.compareTo(0) > 0 failed");
		 	
            ope_tFilterRow_2.matches((row35.PRODUCTSTYLEID == null? false : row35.PRODUCTSTYLEID.compareTo("SMS") == 0)
                           , "PRODUCTSTYLEID.compareTo(\"SMS\") == 0 failed");
    
    if (ope_tFilterRow_2.getMatchFlag()) {
              if(row37 == null){ 
                row37 = new row37Struct();
              }
               row37.TRADEAGREEMENTJOURNALNUMBER = row35.TRADEAGREEMENTJOURNALNUMBER;
               row37.ITEMNUMBER = row35.ITEMNUMBER;
               row37.PRICE = row35.PRICE;
               row37.PRICECURRENCYCODE = row35.PRICECURRENCYCODE;
               row37.PRICECUSTOMERGROUPCODE = row35.PRICECUSTOMERGROUPCODE;
               row37.PRODUCTCOLORID = row35.PRODUCTCOLORID;
               row37.PRODUCTSIZEID = row35.PRODUCTSIZEID;
               row37.PRODUCTSTYLEID = row35.PRODUCTSTYLEID;
               row37.QUANTITYUNITSYMBOL = row35.QUANTITYUNITSYMBOL;
               row37.SEASON = row35.SEASON;
               row37.COUNTRY = row35.COUNTRY;    
      nb_line_ok_tFilterRow_2++;
    } else {
      nb_line_reject_tFilterRow_2++;
    }

nb_line_tFilterRow_2++;

 


	tos_count_tFilterRow_2++;

/**
 * [tFilterRow_2 main ] stop
 */
	
	/**
	 * [tFilterRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";

	

 



/**
 * [tFilterRow_2 process_data_begin ] stop
 */
// Start of branch "row37"
if(row37 != null) { 



	
	/**
	 * [tHashOutput_9 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_9";

	



    
		row37Struct oneRow_tHashOutput_9 = new row37Struct();
				
					oneRow_tHashOutput_9.TRADEAGREEMENTJOURNALNUMBER = row37.TRADEAGREEMENTJOURNALNUMBER;
					oneRow_tHashOutput_9.ITEMNUMBER = row37.ITEMNUMBER;
					oneRow_tHashOutput_9.PRICE = row37.PRICE;
					oneRow_tHashOutput_9.PRICECURRENCYCODE = row37.PRICECURRENCYCODE;
					oneRow_tHashOutput_9.PRICECUSTOMERGROUPCODE = row37.PRICECUSTOMERGROUPCODE;
					oneRow_tHashOutput_9.PRODUCTCOLORID = row37.PRODUCTCOLORID;
					oneRow_tHashOutput_9.PRODUCTSIZEID = row37.PRODUCTSIZEID;
					oneRow_tHashOutput_9.PRODUCTSTYLEID = row37.PRODUCTSTYLEID;
					oneRow_tHashOutput_9.QUANTITYUNITSYMBOL = row37.QUANTITYUNITSYMBOL;
					oneRow_tHashOutput_9.SEASON = row37.SEASON;
					oneRow_tHashOutput_9.COUNTRY = row37.COUNTRY;
		
        tHashFile_tHashOutput_9.put(oneRow_tHashOutput_9);
        nb_line_tHashOutput_9 ++;
 


	tos_count_tHashOutput_9++;

/**
 * [tHashOutput_9 main ] stop
 */
	
	/**
	 * [tHashOutput_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_9";

	

 



/**
 * [tHashOutput_9 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_9";

	

 



/**
 * [tHashOutput_9 process_data_end ] stop
 */

} // End of branch "row37"




	
	/**
	 * [tFilterRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";

	

 



/**
 * [tFilterRow_2 process_data_end ] stop
 */

} // End of branch "row35"




	
	/**
	 * [tUniqRow_18 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_18";

	

 



/**
 * [tUniqRow_18 process_data_end ] stop
 */

} // End of branch "sortie_EUR_WSP"




// Start of branch "sortie_full_eur_wsp"
if(sortie_full_eur_wsp != null) { 



	
	/**
	 * [tMap_21 main ] start
	 */

	

	
	
	currentComponent="tMap_21";

	

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_21 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_21 = false;
		  boolean mainRowRejected_tMap_21 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_21__Struct Var = Var__tMap_21;// ###############################
        // ###############################
        // # Output tables

copyOfsortie_EUR_WSP = null;
sortie_full_rrp_eur = null;


// # Output table : 'copyOfsortie_EUR_WSP'
copyOfsortie_EUR_WSP_tmp.TRADEAGREEMENTJOURNALNUMBER = "HBE1-" + globalMap.get("SalesJournalNumber");
copyOfsortie_EUR_WSP_tmp.ITEMNUMBER = sortie_full_eur_wsp.STYLE ;
copyOfsortie_EUR_WSP_tmp.PRICE = sortie_full_eur_wsp.EUR_RRP == null ? 0 : Mathematical.REAL(sortie_full_eur_wsp.EUR_RRP.replaceAll(",", ".") ) ;
copyOfsortie_EUR_WSP_tmp.PRICECURRENCYCODE = "EUR";
copyOfsortie_EUR_WSP_tmp.PRICECUSTOMERGROUPCODE = "RRP";
copyOfsortie_EUR_WSP_tmp.PRODUCTCOLORID = sortie_full_eur_wsp.COLOR ;
copyOfsortie_EUR_WSP_tmp.PRODUCTSIZEID = sortie_full_eur_wsp.SIZE ;
copyOfsortie_EUR_WSP_tmp.PRODUCTSTYLEID = sortie_full_eur_wsp.LABELD365 ;
copyOfsortie_EUR_WSP_tmp.QUANTITYUNITSYMBOL = "PCE";
copyOfsortie_EUR_WSP_tmp.SEASON = sortie_full_eur_wsp.SEASON ;
copyOfsortie_EUR_WSP_tmp.COUNTRY = "";
copyOfsortie_EUR_WSP = copyOfsortie_EUR_WSP_tmp;

// # Output table : 'sortie_full_rrp_eur'
sortie_full_rrp_eur_tmp.BRAND = sortie_full_eur_wsp.BRAND ;
sortie_full_rrp_eur_tmp.SEASON = sortie_full_eur_wsp.SEASON ;
sortie_full_rrp_eur_tmp.CATEGORY = sortie_full_eur_wsp.CATEGORY ;
sortie_full_rrp_eur_tmp.REF = sortie_full_eur_wsp.REF ;
sortie_full_rrp_eur_tmp.DESCRIPTION = sortie_full_eur_wsp.DESCRIPTION ;
sortie_full_rrp_eur_tmp.STYLE = sortie_full_eur_wsp.STYLE ;
sortie_full_rrp_eur_tmp.COLOR = sortie_full_eur_wsp.COLOR ;
sortie_full_rrp_eur_tmp.FASHION = sortie_full_eur_wsp.FASHION ;
sortie_full_rrp_eur_tmp.STYLECOLORLABEL = sortie_full_eur_wsp.STYLECOLORLABEL ;
sortie_full_rrp_eur_tmp.COLORNAME = sortie_full_eur_wsp.COLORNAME ;
sortie_full_rrp_eur_tmp.LBL = sortie_full_eur_wsp.LBL ;
sortie_full_rrp_eur_tmp.STYLE_COLOR = sortie_full_eur_wsp.STYLE_COLOR ;
sortie_full_rrp_eur_tmp.GENDER = sortie_full_eur_wsp.GENDER ;
sortie_full_rrp_eur_tmp.AGE_RANGE = sortie_full_eur_wsp.AGE_RANGE ;
sortie_full_rrp_eur_tmp.SIZE_RANGE = sortie_full_eur_wsp.SIZE_RANGE ;
sortie_full_rrp_eur_tmp.SIZE = sortie_full_eur_wsp.SIZE ;
sortie_full_rrp_eur_tmp.US_SIZE = sortie_full_eur_wsp.US_SIZE ;
sortie_full_rrp_eur_tmp.CM_SIZE = sortie_full_eur_wsp.CM_SIZE ;
sortie_full_rrp_eur_tmp.PRODUCT = sortie_full_eur_wsp.PRODUCT ;
sortie_full_rrp_eur_tmp.PRODUCT_STATUS = sortie_full_eur_wsp.PRODUCT_STATUS ;
sortie_full_rrp_eur_tmp.PRODUCT_TIER = sortie_full_eur_wsp.PRODUCT_TIER ;
sortie_full_rrp_eur_tmp.ACCT_EXCLUS = sortie_full_eur_wsp.ACCT_EXCLUS ;
sortie_full_rrp_eur_tmp.SIZE_RATIO_SPLIT = sortie_full_eur_wsp.SIZE_RATIO_SPLIT ;
sortie_full_rrp_eur_tmp.REC_SIZE_SPLIT = sortie_full_eur_wsp.REC_SIZE_SPLIT ;
sortie_full_rrp_eur_tmp.CARTON_QTY = sortie_full_eur_wsp.CARTON_QTY ;
sortie_full_rrp_eur_tmp.ATTRIBUTE = sortie_full_eur_wsp.ATTRIBUTE ;
sortie_full_rrp_eur_tmp.UNITS = sortie_full_eur_wsp.UNITS ;
sortie_full_rrp_eur_tmp.EUR_RRP = sortie_full_eur_wsp.EUR_RRP ;
sortie_full_rrp_eur_tmp.EUR_WSP = sortie_full_eur_wsp.EUR_WSP ;
sortie_full_rrp_eur_tmp.GBP_RRP = sortie_full_eur_wsp.GBP_RRP ;
sortie_full_rrp_eur_tmp.GBP_WSP = sortie_full_eur_wsp.GBP_WSP ;
sortie_full_rrp_eur_tmp.CHF_RRP = sortie_full_eur_wsp.CHF_RRP ;
sortie_full_rrp_eur_tmp.CHF_WSP = sortie_full_eur_wsp.CHF_WSP ;
sortie_full_rrp_eur_tmp.NOK_RRP = sortie_full_eur_wsp.NOK_RRP ;
sortie_full_rrp_eur_tmp.NOK_WSP = sortie_full_eur_wsp.NOK_WSP ;
sortie_full_rrp_eur_tmp.DKK_RRP = sortie_full_eur_wsp.DKK_RRP ;
sortie_full_rrp_eur_tmp.DKK_WSP = sortie_full_eur_wsp.DKK_WSP ;
sortie_full_rrp_eur_tmp.SEK_RRP = sortie_full_eur_wsp.SEK_RRP ;
sortie_full_rrp_eur_tmp.SEK_WSP = sortie_full_eur_wsp.SEK_WSP ;
sortie_full_rrp_eur_tmp.EUR_FINN_RRP = sortie_full_eur_wsp.EUR_FINN_RRP ;
sortie_full_rrp_eur_tmp.EUR_FINN_WSP = sortie_full_eur_wsp.EUR_FINN_WSP ;
sortie_full_rrp_eur_tmp.FABRICATION = sortie_full_eur_wsp.FABRICATION ;
sortie_full_rrp_eur_tmp.COO = sortie_full_eur_wsp.COO ;
sortie_full_rrp_eur_tmp.CUSTOM_TARIFF_CODE = sortie_full_eur_wsp.CUSTOM_TARIFF_CODE ;
sortie_full_rrp_eur_tmp.UPC = sortie_full_eur_wsp.UPC ;
sortie_full_rrp_eur_tmp.SMU_TYPE = sortie_full_eur_wsp.SMU_TYPE ;
sortie_full_rrp_eur_tmp.LABELD365 = sortie_full_eur_wsp.LABELD365 ;
sortie_full_rrp_eur = sortie_full_rrp_eur_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_21 = false;










 


	tos_count_tMap_21++;

/**
 * [tMap_21 main ] stop
 */
	
	/**
	 * [tMap_21 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_21";

	

 



/**
 * [tMap_21 process_data_begin ] stop
 */
// Start of branch "copyOfsortie_EUR_WSP"
if(copyOfsortie_EUR_WSP != null) { 



	
	/**
	 * [tUniqRow_19 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_19";

	
row36 = null;			
if(copyOfsortie_EUR_WSP.TRADEAGREEMENTJOURNALNUMBER == null){
	finder_tUniqRow_19.TRADEAGREEMENTJOURNALNUMBER = null;
}else{
	finder_tUniqRow_19.TRADEAGREEMENTJOURNALNUMBER = copyOfsortie_EUR_WSP.TRADEAGREEMENTJOURNALNUMBER.toLowerCase();
}
if(copyOfsortie_EUR_WSP.ITEMNUMBER == null){
	finder_tUniqRow_19.ITEMNUMBER = null;
}else{
	finder_tUniqRow_19.ITEMNUMBER = copyOfsortie_EUR_WSP.ITEMNUMBER.toLowerCase();
}
finder_tUniqRow_19.PRICE = copyOfsortie_EUR_WSP.PRICE;
if(copyOfsortie_EUR_WSP.PRICECURRENCYCODE == null){
	finder_tUniqRow_19.PRICECURRENCYCODE = null;
}else{
	finder_tUniqRow_19.PRICECURRENCYCODE = copyOfsortie_EUR_WSP.PRICECURRENCYCODE.toLowerCase();
}
if(copyOfsortie_EUR_WSP.PRICECUSTOMERGROUPCODE == null){
	finder_tUniqRow_19.PRICECUSTOMERGROUPCODE = null;
}else{
	finder_tUniqRow_19.PRICECUSTOMERGROUPCODE = copyOfsortie_EUR_WSP.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(copyOfsortie_EUR_WSP.PRODUCTCOLORID == null){
	finder_tUniqRow_19.PRODUCTCOLORID = null;
}else{
	finder_tUniqRow_19.PRODUCTCOLORID = copyOfsortie_EUR_WSP.PRODUCTCOLORID.toLowerCase();
}
if(copyOfsortie_EUR_WSP.PRODUCTSIZEID == null){
	finder_tUniqRow_19.PRODUCTSIZEID = null;
}else{
	finder_tUniqRow_19.PRODUCTSIZEID = copyOfsortie_EUR_WSP.PRODUCTSIZEID.toLowerCase();
}
if(copyOfsortie_EUR_WSP.PRODUCTSTYLEID == null){
	finder_tUniqRow_19.PRODUCTSTYLEID = null;
}else{
	finder_tUniqRow_19.PRODUCTSTYLEID = copyOfsortie_EUR_WSP.PRODUCTSTYLEID.toLowerCase();
}
if(copyOfsortie_EUR_WSP.QUANTITYUNITSYMBOL == null){
	finder_tUniqRow_19.QUANTITYUNITSYMBOL = null;
}else{
	finder_tUniqRow_19.QUANTITYUNITSYMBOL = copyOfsortie_EUR_WSP.QUANTITYUNITSYMBOL.toLowerCase();
}	
finder_tUniqRow_19.hashCodeDirty = true;
if (!keystUniqRow_19.contains(finder_tUniqRow_19)) {
		KeyStruct_tUniqRow_19 new_tUniqRow_19 = new KeyStruct_tUniqRow_19();

		
if(copyOfsortie_EUR_WSP.TRADEAGREEMENTJOURNALNUMBER == null){
	new_tUniqRow_19.TRADEAGREEMENTJOURNALNUMBER = null;
}else{
	new_tUniqRow_19.TRADEAGREEMENTJOURNALNUMBER = copyOfsortie_EUR_WSP.TRADEAGREEMENTJOURNALNUMBER.toLowerCase();
}
if(copyOfsortie_EUR_WSP.ITEMNUMBER == null){
	new_tUniqRow_19.ITEMNUMBER = null;
}else{
	new_tUniqRow_19.ITEMNUMBER = copyOfsortie_EUR_WSP.ITEMNUMBER.toLowerCase();
}
new_tUniqRow_19.PRICE = copyOfsortie_EUR_WSP.PRICE;
if(copyOfsortie_EUR_WSP.PRICECURRENCYCODE == null){
	new_tUniqRow_19.PRICECURRENCYCODE = null;
}else{
	new_tUniqRow_19.PRICECURRENCYCODE = copyOfsortie_EUR_WSP.PRICECURRENCYCODE.toLowerCase();
}
if(copyOfsortie_EUR_WSP.PRICECUSTOMERGROUPCODE == null){
	new_tUniqRow_19.PRICECUSTOMERGROUPCODE = null;
}else{
	new_tUniqRow_19.PRICECUSTOMERGROUPCODE = copyOfsortie_EUR_WSP.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(copyOfsortie_EUR_WSP.PRODUCTCOLORID == null){
	new_tUniqRow_19.PRODUCTCOLORID = null;
}else{
	new_tUniqRow_19.PRODUCTCOLORID = copyOfsortie_EUR_WSP.PRODUCTCOLORID.toLowerCase();
}
if(copyOfsortie_EUR_WSP.PRODUCTSIZEID == null){
	new_tUniqRow_19.PRODUCTSIZEID = null;
}else{
	new_tUniqRow_19.PRODUCTSIZEID = copyOfsortie_EUR_WSP.PRODUCTSIZEID.toLowerCase();
}
if(copyOfsortie_EUR_WSP.PRODUCTSTYLEID == null){
	new_tUniqRow_19.PRODUCTSTYLEID = null;
}else{
	new_tUniqRow_19.PRODUCTSTYLEID = copyOfsortie_EUR_WSP.PRODUCTSTYLEID.toLowerCase();
}
if(copyOfsortie_EUR_WSP.QUANTITYUNITSYMBOL == null){
	new_tUniqRow_19.QUANTITYUNITSYMBOL = null;
}else{
	new_tUniqRow_19.QUANTITYUNITSYMBOL = copyOfsortie_EUR_WSP.QUANTITYUNITSYMBOL.toLowerCase();
}
		
		keystUniqRow_19.add(new_tUniqRow_19);if(row36 == null){ 
	
	row36 = new row36Struct();
}row36.TRADEAGREEMENTJOURNALNUMBER = copyOfsortie_EUR_WSP.TRADEAGREEMENTJOURNALNUMBER;			row36.ITEMNUMBER = copyOfsortie_EUR_WSP.ITEMNUMBER;			row36.PRICE = copyOfsortie_EUR_WSP.PRICE;			row36.PRICECURRENCYCODE = copyOfsortie_EUR_WSP.PRICECURRENCYCODE;			row36.PRICECUSTOMERGROUPCODE = copyOfsortie_EUR_WSP.PRICECUSTOMERGROUPCODE;			row36.PRODUCTCOLORID = copyOfsortie_EUR_WSP.PRODUCTCOLORID;			row36.PRODUCTSIZEID = copyOfsortie_EUR_WSP.PRODUCTSIZEID;			row36.PRODUCTSTYLEID = copyOfsortie_EUR_WSP.PRODUCTSTYLEID;			row36.QUANTITYUNITSYMBOL = copyOfsortie_EUR_WSP.QUANTITYUNITSYMBOL;			row36.SEASON = copyOfsortie_EUR_WSP.SEASON;			row36.COUNTRY = copyOfsortie_EUR_WSP.COUNTRY;					
		nb_uniques_tUniqRow_19++;
	} else {
	  nb_duplicates_tUniqRow_19++;
	}

 


	tos_count_tUniqRow_19++;

/**
 * [tUniqRow_19 main ] stop
 */
	
	/**
	 * [tUniqRow_19 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_19";

	

 



/**
 * [tUniqRow_19 process_data_begin ] stop
 */
// Start of branch "row36"
if(row36 != null) { 



	
	/**
	 * [tFilterRow_3 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_3";

	

          row38 = null;
    Operator_tFilterRow_3 ope_tFilterRow_3 = new Operator_tFilterRow_3("||");
            ope_tFilterRow_3.matches((row36.PRICE == null? false : row36.PRICE.compareTo(ParserUtils.parseTo_Double(String.valueOf(0))) > 0)
                           , "PRICE.compareTo(0) > 0 failed");
		 	
            ope_tFilterRow_3.matches((row36.PRODUCTSTYLEID == null? false : row36.PRODUCTSTYLEID.compareTo("SMS") == 0)
                           , "PRODUCTSTYLEID.compareTo(\"SMS\") == 0 failed");
    
    if (ope_tFilterRow_3.getMatchFlag()) {
              if(row38 == null){ 
                row38 = new row38Struct();
              }
               row38.TRADEAGREEMENTJOURNALNUMBER = row36.TRADEAGREEMENTJOURNALNUMBER;
               row38.ITEMNUMBER = row36.ITEMNUMBER;
               row38.PRICE = row36.PRICE;
               row38.PRICECURRENCYCODE = row36.PRICECURRENCYCODE;
               row38.PRICECUSTOMERGROUPCODE = row36.PRICECUSTOMERGROUPCODE;
               row38.PRODUCTCOLORID = row36.PRODUCTCOLORID;
               row38.PRODUCTSIZEID = row36.PRODUCTSIZEID;
               row38.PRODUCTSTYLEID = row36.PRODUCTSTYLEID;
               row38.QUANTITYUNITSYMBOL = row36.QUANTITYUNITSYMBOL;
               row38.SEASON = row36.SEASON;
               row38.COUNTRY = row36.COUNTRY;    
      nb_line_ok_tFilterRow_3++;
    } else {
      nb_line_reject_tFilterRow_3++;
    }

nb_line_tFilterRow_3++;

 


	tos_count_tFilterRow_3++;

/**
 * [tFilterRow_3 main ] stop
 */
	
	/**
	 * [tFilterRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_3";

	

 



/**
 * [tFilterRow_3 process_data_begin ] stop
 */
// Start of branch "row38"
if(row38 != null) { 



	
	/**
	 * [tHashOutput_10 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_10";

	



    
		row38Struct oneRow_tHashOutput_10 = new row38Struct();
				
					oneRow_tHashOutput_10.TRADEAGREEMENTJOURNALNUMBER = row38.TRADEAGREEMENTJOURNALNUMBER;
					oneRow_tHashOutput_10.ITEMNUMBER = row38.ITEMNUMBER;
					oneRow_tHashOutput_10.PRICE = row38.PRICE;
					oneRow_tHashOutput_10.PRICECURRENCYCODE = row38.PRICECURRENCYCODE;
					oneRow_tHashOutput_10.PRICECUSTOMERGROUPCODE = row38.PRICECUSTOMERGROUPCODE;
					oneRow_tHashOutput_10.PRODUCTCOLORID = row38.PRODUCTCOLORID;
					oneRow_tHashOutput_10.PRODUCTSIZEID = row38.PRODUCTSIZEID;
					oneRow_tHashOutput_10.PRODUCTSTYLEID = row38.PRODUCTSTYLEID;
					oneRow_tHashOutput_10.QUANTITYUNITSYMBOL = row38.QUANTITYUNITSYMBOL;
					oneRow_tHashOutput_10.SEASON = row38.SEASON;
					oneRow_tHashOutput_10.COUNTRY = row38.COUNTRY;
		
        tHashFile_tHashOutput_10.put(oneRow_tHashOutput_10);
        nb_line_tHashOutput_10 ++;
 


	tos_count_tHashOutput_10++;

/**
 * [tHashOutput_10 main ] stop
 */
	
	/**
	 * [tHashOutput_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_10";

	

 



/**
 * [tHashOutput_10 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_10";

	

 



/**
 * [tHashOutput_10 process_data_end ] stop
 */

} // End of branch "row38"




	
	/**
	 * [tFilterRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_3";

	

 



/**
 * [tFilterRow_3 process_data_end ] stop
 */

} // End of branch "row36"




	
	/**
	 * [tUniqRow_19 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_19";

	

 



/**
 * [tUniqRow_19 process_data_end ] stop
 */

} // End of branch "copyOfsortie_EUR_WSP"




// Start of branch "sortie_full_rrp_eur"
if(sortie_full_rrp_eur != null) { 



	
	/**
	 * [tMap_23 main ] start
	 */

	

	
	
	currentComponent="tMap_23";

	

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_23 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_23 = false;
		  boolean mainRowRejected_tMap_23 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_23__Struct Var = Var__tMap_23;// ###############################
        // ###############################
        // # Output tables

copyOfsortie_EUR_WSP_0 = null;
sortie_full_gbp_wsp = null;


// # Output table : 'copyOfsortie_EUR_WSP_0'
copyOfsortie_EUR_WSP_0_tmp.TRADEAGREEMENTJOURNALNUMBER = "HBE1-" + globalMap.get("SalesJournalNumber");
copyOfsortie_EUR_WSP_0_tmp.ITEMNUMBER = sortie_full_rrp_eur.STYLE ;
copyOfsortie_EUR_WSP_0_tmp.PRICE = sortie_full_rrp_eur.GBP_WSP == null ? 0 : Mathematical.REAL(sortie_full_rrp_eur.GBP_WSP .replaceAll(",", ".") ) ;
copyOfsortie_EUR_WSP_0_tmp.PRICECURRENCYCODE = "GBP";
copyOfsortie_EUR_WSP_0_tmp.PRICECUSTOMERGROUPCODE = "WSP";
copyOfsortie_EUR_WSP_0_tmp.PRODUCTCOLORID = sortie_full_rrp_eur.COLOR ;
copyOfsortie_EUR_WSP_0_tmp.PRODUCTSIZEID = sortie_full_rrp_eur.SIZE ;
copyOfsortie_EUR_WSP_0_tmp.PRODUCTSTYLEID = sortie_full_rrp_eur.LABELD365 ;
copyOfsortie_EUR_WSP_0_tmp.QUANTITYUNITSYMBOL = "PCE";
copyOfsortie_EUR_WSP_0_tmp.SEASON = sortie_full_rrp_eur.SEASON ;
copyOfsortie_EUR_WSP_0_tmp.COUNTRY = "";
copyOfsortie_EUR_WSP_0 = copyOfsortie_EUR_WSP_0_tmp;

// # Output table : 'sortie_full_gbp_wsp'
sortie_full_gbp_wsp_tmp.BRAND = sortie_full_rrp_eur.BRAND ;
sortie_full_gbp_wsp_tmp.SEASON = sortie_full_rrp_eur.SEASON ;
sortie_full_gbp_wsp_tmp.CATEGORY = sortie_full_rrp_eur.CATEGORY ;
sortie_full_gbp_wsp_tmp.REF = sortie_full_rrp_eur.REF ;
sortie_full_gbp_wsp_tmp.DESCRIPTION = sortie_full_rrp_eur.DESCRIPTION ;
sortie_full_gbp_wsp_tmp.STYLE = sortie_full_rrp_eur.STYLE ;
sortie_full_gbp_wsp_tmp.COLOR = sortie_full_rrp_eur.COLOR ;
sortie_full_gbp_wsp_tmp.FASHION = sortie_full_rrp_eur.FASHION ;
sortie_full_gbp_wsp_tmp.STYLECOLORLABEL = sortie_full_rrp_eur.STYLECOLORLABEL ;
sortie_full_gbp_wsp_tmp.COLORNAME = sortie_full_rrp_eur.COLORNAME ;
sortie_full_gbp_wsp_tmp.LBL = sortie_full_rrp_eur.LBL ;
sortie_full_gbp_wsp_tmp.STYLE_COLOR = sortie_full_rrp_eur.STYLE_COLOR ;
sortie_full_gbp_wsp_tmp.GENDER = sortie_full_rrp_eur.GENDER ;
sortie_full_gbp_wsp_tmp.AGE_RANGE = sortie_full_rrp_eur.AGE_RANGE ;
sortie_full_gbp_wsp_tmp.SIZE_RANGE = sortie_full_rrp_eur.SIZE_RANGE ;
sortie_full_gbp_wsp_tmp.SIZE = sortie_full_rrp_eur.SIZE ;
sortie_full_gbp_wsp_tmp.US_SIZE = sortie_full_rrp_eur.US_SIZE ;
sortie_full_gbp_wsp_tmp.CM_SIZE = sortie_full_rrp_eur.CM_SIZE ;
sortie_full_gbp_wsp_tmp.PRODUCT = sortie_full_rrp_eur.PRODUCT ;
sortie_full_gbp_wsp_tmp.PRODUCT_STATUS = sortie_full_rrp_eur.PRODUCT_STATUS ;
sortie_full_gbp_wsp_tmp.PRODUCT_TIER = sortie_full_rrp_eur.PRODUCT_TIER ;
sortie_full_gbp_wsp_tmp.ACCT_EXCLUS = sortie_full_rrp_eur.ACCT_EXCLUS ;
sortie_full_gbp_wsp_tmp.SIZE_RATIO_SPLIT = sortie_full_rrp_eur.SIZE_RATIO_SPLIT ;
sortie_full_gbp_wsp_tmp.REC_SIZE_SPLIT = sortie_full_rrp_eur.REC_SIZE_SPLIT ;
sortie_full_gbp_wsp_tmp.CARTON_QTY = sortie_full_rrp_eur.CARTON_QTY ;
sortie_full_gbp_wsp_tmp.ATTRIBUTE = sortie_full_rrp_eur.ATTRIBUTE ;
sortie_full_gbp_wsp_tmp.UNITS = sortie_full_rrp_eur.UNITS ;
sortie_full_gbp_wsp_tmp.EUR_RRP = sortie_full_rrp_eur.EUR_RRP ;
sortie_full_gbp_wsp_tmp.EUR_WSP = sortie_full_rrp_eur.EUR_WSP ;
sortie_full_gbp_wsp_tmp.GBP_RRP = sortie_full_rrp_eur.GBP_RRP ;
sortie_full_gbp_wsp_tmp.GBP_WSP = sortie_full_rrp_eur.GBP_WSP ;
sortie_full_gbp_wsp_tmp.CHF_RRP = sortie_full_rrp_eur.CHF_RRP ;
sortie_full_gbp_wsp_tmp.CHF_WSP = sortie_full_rrp_eur.CHF_WSP ;
sortie_full_gbp_wsp_tmp.NOK_RRP = sortie_full_rrp_eur.NOK_RRP ;
sortie_full_gbp_wsp_tmp.NOK_WSP = sortie_full_rrp_eur.NOK_WSP ;
sortie_full_gbp_wsp_tmp.DKK_RRP = sortie_full_rrp_eur.DKK_RRP ;
sortie_full_gbp_wsp_tmp.DKK_WSP = sortie_full_rrp_eur.DKK_WSP ;
sortie_full_gbp_wsp_tmp.SEK_RRP = sortie_full_rrp_eur.SEK_RRP ;
sortie_full_gbp_wsp_tmp.SEK_WSP = sortie_full_rrp_eur.SEK_WSP ;
sortie_full_gbp_wsp_tmp.EUR_FINN_RRP = sortie_full_rrp_eur.EUR_FINN_RRP ;
sortie_full_gbp_wsp_tmp.EUR_FINN_WSP = sortie_full_rrp_eur.EUR_FINN_WSP ;
sortie_full_gbp_wsp_tmp.FABRICATION = sortie_full_rrp_eur.FABRICATION ;
sortie_full_gbp_wsp_tmp.COO = sortie_full_rrp_eur.COO ;
sortie_full_gbp_wsp_tmp.CUSTOM_TARIFF_CODE = sortie_full_rrp_eur.CUSTOM_TARIFF_CODE ;
sortie_full_gbp_wsp_tmp.UPC = sortie_full_rrp_eur.UPC ;
sortie_full_gbp_wsp_tmp.SMU_TYPE = sortie_full_rrp_eur.SMU_TYPE ;
sortie_full_gbp_wsp_tmp.LABELD365 = sortie_full_rrp_eur.LABELD365 ;
sortie_full_gbp_wsp = sortie_full_gbp_wsp_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_23 = false;










 


	tos_count_tMap_23++;

/**
 * [tMap_23 main ] stop
 */
	
	/**
	 * [tMap_23 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_23";

	

 



/**
 * [tMap_23 process_data_begin ] stop
 */
// Start of branch "copyOfsortie_EUR_WSP_0"
if(copyOfsortie_EUR_WSP_0 != null) { 



	
	/**
	 * [tUniqRow_20 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_20";

	
row43 = null;			
if(copyOfsortie_EUR_WSP_0.TRADEAGREEMENTJOURNALNUMBER == null){
	finder_tUniqRow_20.TRADEAGREEMENTJOURNALNUMBER = null;
}else{
	finder_tUniqRow_20.TRADEAGREEMENTJOURNALNUMBER = copyOfsortie_EUR_WSP_0.TRADEAGREEMENTJOURNALNUMBER.toLowerCase();
}
if(copyOfsortie_EUR_WSP_0.ITEMNUMBER == null){
	finder_tUniqRow_20.ITEMNUMBER = null;
}else{
	finder_tUniqRow_20.ITEMNUMBER = copyOfsortie_EUR_WSP_0.ITEMNUMBER.toLowerCase();
}
finder_tUniqRow_20.PRICE = copyOfsortie_EUR_WSP_0.PRICE;
if(copyOfsortie_EUR_WSP_0.PRICECURRENCYCODE == null){
	finder_tUniqRow_20.PRICECURRENCYCODE = null;
}else{
	finder_tUniqRow_20.PRICECURRENCYCODE = copyOfsortie_EUR_WSP_0.PRICECURRENCYCODE.toLowerCase();
}
if(copyOfsortie_EUR_WSP_0.PRICECUSTOMERGROUPCODE == null){
	finder_tUniqRow_20.PRICECUSTOMERGROUPCODE = null;
}else{
	finder_tUniqRow_20.PRICECUSTOMERGROUPCODE = copyOfsortie_EUR_WSP_0.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(copyOfsortie_EUR_WSP_0.PRODUCTCOLORID == null){
	finder_tUniqRow_20.PRODUCTCOLORID = null;
}else{
	finder_tUniqRow_20.PRODUCTCOLORID = copyOfsortie_EUR_WSP_0.PRODUCTCOLORID.toLowerCase();
}
if(copyOfsortie_EUR_WSP_0.PRODUCTSIZEID == null){
	finder_tUniqRow_20.PRODUCTSIZEID = null;
}else{
	finder_tUniqRow_20.PRODUCTSIZEID = copyOfsortie_EUR_WSP_0.PRODUCTSIZEID.toLowerCase();
}
if(copyOfsortie_EUR_WSP_0.PRODUCTSTYLEID == null){
	finder_tUniqRow_20.PRODUCTSTYLEID = null;
}else{
	finder_tUniqRow_20.PRODUCTSTYLEID = copyOfsortie_EUR_WSP_0.PRODUCTSTYLEID.toLowerCase();
}
if(copyOfsortie_EUR_WSP_0.QUANTITYUNITSYMBOL == null){
	finder_tUniqRow_20.QUANTITYUNITSYMBOL = null;
}else{
	finder_tUniqRow_20.QUANTITYUNITSYMBOL = copyOfsortie_EUR_WSP_0.QUANTITYUNITSYMBOL.toLowerCase();
}	
finder_tUniqRow_20.hashCodeDirty = true;
if (!keystUniqRow_20.contains(finder_tUniqRow_20)) {
		KeyStruct_tUniqRow_20 new_tUniqRow_20 = new KeyStruct_tUniqRow_20();

		
if(copyOfsortie_EUR_WSP_0.TRADEAGREEMENTJOURNALNUMBER == null){
	new_tUniqRow_20.TRADEAGREEMENTJOURNALNUMBER = null;
}else{
	new_tUniqRow_20.TRADEAGREEMENTJOURNALNUMBER = copyOfsortie_EUR_WSP_0.TRADEAGREEMENTJOURNALNUMBER.toLowerCase();
}
if(copyOfsortie_EUR_WSP_0.ITEMNUMBER == null){
	new_tUniqRow_20.ITEMNUMBER = null;
}else{
	new_tUniqRow_20.ITEMNUMBER = copyOfsortie_EUR_WSP_0.ITEMNUMBER.toLowerCase();
}
new_tUniqRow_20.PRICE = copyOfsortie_EUR_WSP_0.PRICE;
if(copyOfsortie_EUR_WSP_0.PRICECURRENCYCODE == null){
	new_tUniqRow_20.PRICECURRENCYCODE = null;
}else{
	new_tUniqRow_20.PRICECURRENCYCODE = copyOfsortie_EUR_WSP_0.PRICECURRENCYCODE.toLowerCase();
}
if(copyOfsortie_EUR_WSP_0.PRICECUSTOMERGROUPCODE == null){
	new_tUniqRow_20.PRICECUSTOMERGROUPCODE = null;
}else{
	new_tUniqRow_20.PRICECUSTOMERGROUPCODE = copyOfsortie_EUR_WSP_0.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(copyOfsortie_EUR_WSP_0.PRODUCTCOLORID == null){
	new_tUniqRow_20.PRODUCTCOLORID = null;
}else{
	new_tUniqRow_20.PRODUCTCOLORID = copyOfsortie_EUR_WSP_0.PRODUCTCOLORID.toLowerCase();
}
if(copyOfsortie_EUR_WSP_0.PRODUCTSIZEID == null){
	new_tUniqRow_20.PRODUCTSIZEID = null;
}else{
	new_tUniqRow_20.PRODUCTSIZEID = copyOfsortie_EUR_WSP_0.PRODUCTSIZEID.toLowerCase();
}
if(copyOfsortie_EUR_WSP_0.PRODUCTSTYLEID == null){
	new_tUniqRow_20.PRODUCTSTYLEID = null;
}else{
	new_tUniqRow_20.PRODUCTSTYLEID = copyOfsortie_EUR_WSP_0.PRODUCTSTYLEID.toLowerCase();
}
if(copyOfsortie_EUR_WSP_0.QUANTITYUNITSYMBOL == null){
	new_tUniqRow_20.QUANTITYUNITSYMBOL = null;
}else{
	new_tUniqRow_20.QUANTITYUNITSYMBOL = copyOfsortie_EUR_WSP_0.QUANTITYUNITSYMBOL.toLowerCase();
}
		
		keystUniqRow_20.add(new_tUniqRow_20);if(row43 == null){ 
	
	row43 = new row43Struct();
}row43.TRADEAGREEMENTJOURNALNUMBER = copyOfsortie_EUR_WSP_0.TRADEAGREEMENTJOURNALNUMBER;			row43.ITEMNUMBER = copyOfsortie_EUR_WSP_0.ITEMNUMBER;			row43.PRICE = copyOfsortie_EUR_WSP_0.PRICE;			row43.PRICECURRENCYCODE = copyOfsortie_EUR_WSP_0.PRICECURRENCYCODE;			row43.PRICECUSTOMERGROUPCODE = copyOfsortie_EUR_WSP_0.PRICECUSTOMERGROUPCODE;			row43.PRODUCTCOLORID = copyOfsortie_EUR_WSP_0.PRODUCTCOLORID;			row43.PRODUCTSIZEID = copyOfsortie_EUR_WSP_0.PRODUCTSIZEID;			row43.PRODUCTSTYLEID = copyOfsortie_EUR_WSP_0.PRODUCTSTYLEID;			row43.QUANTITYUNITSYMBOL = copyOfsortie_EUR_WSP_0.QUANTITYUNITSYMBOL;			row43.SEASON = copyOfsortie_EUR_WSP_0.SEASON;			row43.COUNTRY = copyOfsortie_EUR_WSP_0.COUNTRY;					
		nb_uniques_tUniqRow_20++;
	} else {
	  nb_duplicates_tUniqRow_20++;
	}

 


	tos_count_tUniqRow_20++;

/**
 * [tUniqRow_20 main ] stop
 */
	
	/**
	 * [tUniqRow_20 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_20";

	

 



/**
 * [tUniqRow_20 process_data_begin ] stop
 */
// Start of branch "row43"
if(row43 != null) { 



	
	/**
	 * [tFilterRow_4 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_4";

	

          row44 = null;
    Operator_tFilterRow_4 ope_tFilterRow_4 = new Operator_tFilterRow_4("||");
            ope_tFilterRow_4.matches((row43.PRICE == null? false : row43.PRICE.compareTo(ParserUtils.parseTo_Double(String.valueOf(0))) > 0)
                           , "PRICE.compareTo(0) > 0 failed");
		 	
            ope_tFilterRow_4.matches((row43.PRODUCTSTYLEID == null? false : row43.PRODUCTSTYLEID.compareTo("SMS") == 0)
                           , "PRODUCTSTYLEID.compareTo(\"SMS\") == 0 failed");
    
    if (ope_tFilterRow_4.getMatchFlag()) {
              if(row44 == null){ 
                row44 = new row44Struct();
              }
               row44.TRADEAGREEMENTJOURNALNUMBER = row43.TRADEAGREEMENTJOURNALNUMBER;
               row44.ITEMNUMBER = row43.ITEMNUMBER;
               row44.PRICE = row43.PRICE;
               row44.PRICECURRENCYCODE = row43.PRICECURRENCYCODE;
               row44.PRICECUSTOMERGROUPCODE = row43.PRICECUSTOMERGROUPCODE;
               row44.PRODUCTCOLORID = row43.PRODUCTCOLORID;
               row44.PRODUCTSIZEID = row43.PRODUCTSIZEID;
               row44.PRODUCTSTYLEID = row43.PRODUCTSTYLEID;
               row44.QUANTITYUNITSYMBOL = row43.QUANTITYUNITSYMBOL;
               row44.SEASON = row43.SEASON;
               row44.COUNTRY = row43.COUNTRY;    
      nb_line_ok_tFilterRow_4++;
    } else {
      nb_line_reject_tFilterRow_4++;
    }

nb_line_tFilterRow_4++;

 


	tos_count_tFilterRow_4++;

/**
 * [tFilterRow_4 main ] stop
 */
	
	/**
	 * [tFilterRow_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_4";

	

 



/**
 * [tFilterRow_4 process_data_begin ] stop
 */
// Start of branch "row44"
if(row44 != null) { 



	
	/**
	 * [tHashOutput_11 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_11";

	



    
		row44Struct oneRow_tHashOutput_11 = new row44Struct();
				
					oneRow_tHashOutput_11.TRADEAGREEMENTJOURNALNUMBER = row44.TRADEAGREEMENTJOURNALNUMBER;
					oneRow_tHashOutput_11.ITEMNUMBER = row44.ITEMNUMBER;
					oneRow_tHashOutput_11.PRICE = row44.PRICE;
					oneRow_tHashOutput_11.PRICECURRENCYCODE = row44.PRICECURRENCYCODE;
					oneRow_tHashOutput_11.PRICECUSTOMERGROUPCODE = row44.PRICECUSTOMERGROUPCODE;
					oneRow_tHashOutput_11.PRODUCTCOLORID = row44.PRODUCTCOLORID;
					oneRow_tHashOutput_11.PRODUCTSIZEID = row44.PRODUCTSIZEID;
					oneRow_tHashOutput_11.PRODUCTSTYLEID = row44.PRODUCTSTYLEID;
					oneRow_tHashOutput_11.QUANTITYUNITSYMBOL = row44.QUANTITYUNITSYMBOL;
					oneRow_tHashOutput_11.SEASON = row44.SEASON;
					oneRow_tHashOutput_11.COUNTRY = row44.COUNTRY;
		
        tHashFile_tHashOutput_11.put(oneRow_tHashOutput_11);
        nb_line_tHashOutput_11 ++;
 


	tos_count_tHashOutput_11++;

/**
 * [tHashOutput_11 main ] stop
 */
	
	/**
	 * [tHashOutput_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_11";

	

 



/**
 * [tHashOutput_11 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_11";

	

 



/**
 * [tHashOutput_11 process_data_end ] stop
 */

} // End of branch "row44"




	
	/**
	 * [tFilterRow_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_4";

	

 



/**
 * [tFilterRow_4 process_data_end ] stop
 */

} // End of branch "row43"




	
	/**
	 * [tUniqRow_20 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_20";

	

 



/**
 * [tUniqRow_20 process_data_end ] stop
 */

} // End of branch "copyOfsortie_EUR_WSP_0"




// Start of branch "sortie_full_gbp_wsp"
if(sortie_full_gbp_wsp != null) { 



	
	/**
	 * [tMap_24 main ] start
	 */

	

	
	
	currentComponent="tMap_24";

	

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_24 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_24 = false;
		  boolean mainRowRejected_tMap_24 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_24__Struct Var = Var__tMap_24;// ###############################
        // ###############################
        // # Output tables

copyOfcopyOfsortie_EUR_WSP_0 = null;
sortie_full_GBP_RRP = null;


// # Output table : 'copyOfcopyOfsortie_EUR_WSP_0'
copyOfcopyOfsortie_EUR_WSP_0_tmp.TRADEAGREEMENTJOURNALNUMBER = "HBE1-" + globalMap.get("SalesJournalNumber");
copyOfcopyOfsortie_EUR_WSP_0_tmp.ITEMNUMBER = sortie_full_gbp_wsp.STYLE ;
copyOfcopyOfsortie_EUR_WSP_0_tmp.PRICE = sortie_full_gbp_wsp.GBP_RRP == null ? 0 : Mathematical.REAL(sortie_full_gbp_wsp.GBP_RRP .replaceAll(",", ".") ) ;
copyOfcopyOfsortie_EUR_WSP_0_tmp.PRICECURRENCYCODE = "GBP";
copyOfcopyOfsortie_EUR_WSP_0_tmp.PRICECUSTOMERGROUPCODE = "RRP";
copyOfcopyOfsortie_EUR_WSP_0_tmp.PRODUCTCOLORID = sortie_full_gbp_wsp.COLOR ;
copyOfcopyOfsortie_EUR_WSP_0_tmp.PRODUCTSIZEID = sortie_full_gbp_wsp.SIZE ;
copyOfcopyOfsortie_EUR_WSP_0_tmp.PRODUCTSTYLEID = sortie_full_gbp_wsp.LABELD365 ;
copyOfcopyOfsortie_EUR_WSP_0_tmp.QUANTITYUNITSYMBOL = "PCE";
copyOfcopyOfsortie_EUR_WSP_0_tmp.SEASON = sortie_full_gbp_wsp.SEASON ;
copyOfcopyOfsortie_EUR_WSP_0_tmp.COUNTRY = "";
copyOfcopyOfsortie_EUR_WSP_0 = copyOfcopyOfsortie_EUR_WSP_0_tmp;

// # Output table : 'sortie_full_GBP_RRP'
sortie_full_GBP_RRP_tmp.BRAND = sortie_full_gbp_wsp.BRAND ;
sortie_full_GBP_RRP_tmp.SEASON = sortie_full_gbp_wsp.SEASON ;
sortie_full_GBP_RRP_tmp.CATEGORY = sortie_full_gbp_wsp.CATEGORY ;
sortie_full_GBP_RRP_tmp.REF = sortie_full_gbp_wsp.REF ;
sortie_full_GBP_RRP_tmp.DESCRIPTION = sortie_full_gbp_wsp.DESCRIPTION ;
sortie_full_GBP_RRP_tmp.STYLE = sortie_full_gbp_wsp.STYLE ;
sortie_full_GBP_RRP_tmp.COLOR = sortie_full_gbp_wsp.COLOR ;
sortie_full_GBP_RRP_tmp.FASHION = sortie_full_gbp_wsp.FASHION ;
sortie_full_GBP_RRP_tmp.STYLECOLORLABEL = sortie_full_gbp_wsp.STYLECOLORLABEL ;
sortie_full_GBP_RRP_tmp.COLORNAME = sortie_full_gbp_wsp.COLORNAME ;
sortie_full_GBP_RRP_tmp.LBL = sortie_full_gbp_wsp.LBL ;
sortie_full_GBP_RRP_tmp.STYLE_COLOR = sortie_full_gbp_wsp.STYLE_COLOR ;
sortie_full_GBP_RRP_tmp.GENDER = sortie_full_gbp_wsp.GENDER ;
sortie_full_GBP_RRP_tmp.AGE_RANGE = sortie_full_gbp_wsp.AGE_RANGE ;
sortie_full_GBP_RRP_tmp.SIZE_RANGE = sortie_full_gbp_wsp.SIZE_RANGE ;
sortie_full_GBP_RRP_tmp.SIZE = sortie_full_gbp_wsp.SIZE ;
sortie_full_GBP_RRP_tmp.US_SIZE = sortie_full_gbp_wsp.US_SIZE ;
sortie_full_GBP_RRP_tmp.CM_SIZE = sortie_full_gbp_wsp.CM_SIZE ;
sortie_full_GBP_RRP_tmp.PRODUCT = sortie_full_gbp_wsp.PRODUCT ;
sortie_full_GBP_RRP_tmp.PRODUCT_STATUS = sortie_full_gbp_wsp.PRODUCT_STATUS ;
sortie_full_GBP_RRP_tmp.PRODUCT_TIER = sortie_full_gbp_wsp.PRODUCT_TIER ;
sortie_full_GBP_RRP_tmp.ACCT_EXCLUS = sortie_full_gbp_wsp.ACCT_EXCLUS ;
sortie_full_GBP_RRP_tmp.SIZE_RATIO_SPLIT = sortie_full_gbp_wsp.SIZE_RATIO_SPLIT ;
sortie_full_GBP_RRP_tmp.REC_SIZE_SPLIT = sortie_full_gbp_wsp.REC_SIZE_SPLIT ;
sortie_full_GBP_RRP_tmp.CARTON_QTY = sortie_full_gbp_wsp.CARTON_QTY ;
sortie_full_GBP_RRP_tmp.ATTRIBUTE = sortie_full_gbp_wsp.ATTRIBUTE ;
sortie_full_GBP_RRP_tmp.UNITS = sortie_full_gbp_wsp.UNITS ;
sortie_full_GBP_RRP_tmp.EUR_RRP = sortie_full_gbp_wsp.EUR_RRP ;
sortie_full_GBP_RRP_tmp.EUR_WSP = sortie_full_gbp_wsp.EUR_WSP ;
sortie_full_GBP_RRP_tmp.GBP_RRP = sortie_full_gbp_wsp.GBP_RRP ;
sortie_full_GBP_RRP_tmp.GBP_WSP = sortie_full_gbp_wsp.GBP_WSP ;
sortie_full_GBP_RRP_tmp.CHF_RRP = sortie_full_gbp_wsp.CHF_RRP ;
sortie_full_GBP_RRP_tmp.CHF_WSP = sortie_full_gbp_wsp.CHF_WSP ;
sortie_full_GBP_RRP_tmp.NOK_RRP = sortie_full_gbp_wsp.NOK_RRP ;
sortie_full_GBP_RRP_tmp.NOK_WSP = sortie_full_gbp_wsp.NOK_WSP ;
sortie_full_GBP_RRP_tmp.DKK_RRP = sortie_full_gbp_wsp.DKK_RRP ;
sortie_full_GBP_RRP_tmp.DKK_WSP = sortie_full_gbp_wsp.DKK_WSP ;
sortie_full_GBP_RRP_tmp.SEK_RRP = sortie_full_gbp_wsp.SEK_RRP ;
sortie_full_GBP_RRP_tmp.SEK_WSP = sortie_full_gbp_wsp.SEK_WSP ;
sortie_full_GBP_RRP_tmp.EUR_FINN_RRP = sortie_full_gbp_wsp.EUR_FINN_RRP ;
sortie_full_GBP_RRP_tmp.EUR_FINN_WSP = sortie_full_gbp_wsp.EUR_FINN_WSP ;
sortie_full_GBP_RRP_tmp.FABRICATION = sortie_full_gbp_wsp.FABRICATION ;
sortie_full_GBP_RRP_tmp.COO = sortie_full_gbp_wsp.COO ;
sortie_full_GBP_RRP_tmp.CUSTOM_TARIFF_CODE = sortie_full_gbp_wsp.CUSTOM_TARIFF_CODE ;
sortie_full_GBP_RRP_tmp.UPC = sortie_full_gbp_wsp.UPC ;
sortie_full_GBP_RRP_tmp.SMU_TYPE = sortie_full_gbp_wsp.SMU_TYPE ;
sortie_full_GBP_RRP_tmp.LABELD365 = sortie_full_gbp_wsp.LABELD365 ;
sortie_full_GBP_RRP = sortie_full_GBP_RRP_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_24 = false;










 


	tos_count_tMap_24++;

/**
 * [tMap_24 main ] stop
 */
	
	/**
	 * [tMap_24 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_24";

	

 



/**
 * [tMap_24 process_data_begin ] stop
 */
// Start of branch "copyOfcopyOfsortie_EUR_WSP_0"
if(copyOfcopyOfsortie_EUR_WSP_0 != null) { 



	
	/**
	 * [tUniqRow_21 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_21";

	
row45 = null;			
if(copyOfcopyOfsortie_EUR_WSP_0.TRADEAGREEMENTJOURNALNUMBER == null){
	finder_tUniqRow_21.TRADEAGREEMENTJOURNALNUMBER = null;
}else{
	finder_tUniqRow_21.TRADEAGREEMENTJOURNALNUMBER = copyOfcopyOfsortie_EUR_WSP_0.TRADEAGREEMENTJOURNALNUMBER.toLowerCase();
}
if(copyOfcopyOfsortie_EUR_WSP_0.ITEMNUMBER == null){
	finder_tUniqRow_21.ITEMNUMBER = null;
}else{
	finder_tUniqRow_21.ITEMNUMBER = copyOfcopyOfsortie_EUR_WSP_0.ITEMNUMBER.toLowerCase();
}
finder_tUniqRow_21.PRICE = copyOfcopyOfsortie_EUR_WSP_0.PRICE;
if(copyOfcopyOfsortie_EUR_WSP_0.PRICECURRENCYCODE == null){
	finder_tUniqRow_21.PRICECURRENCYCODE = null;
}else{
	finder_tUniqRow_21.PRICECURRENCYCODE = copyOfcopyOfsortie_EUR_WSP_0.PRICECURRENCYCODE.toLowerCase();
}
if(copyOfcopyOfsortie_EUR_WSP_0.PRICECUSTOMERGROUPCODE == null){
	finder_tUniqRow_21.PRICECUSTOMERGROUPCODE = null;
}else{
	finder_tUniqRow_21.PRICECUSTOMERGROUPCODE = copyOfcopyOfsortie_EUR_WSP_0.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(copyOfcopyOfsortie_EUR_WSP_0.PRODUCTCOLORID == null){
	finder_tUniqRow_21.PRODUCTCOLORID = null;
}else{
	finder_tUniqRow_21.PRODUCTCOLORID = copyOfcopyOfsortie_EUR_WSP_0.PRODUCTCOLORID.toLowerCase();
}
if(copyOfcopyOfsortie_EUR_WSP_0.PRODUCTSIZEID == null){
	finder_tUniqRow_21.PRODUCTSIZEID = null;
}else{
	finder_tUniqRow_21.PRODUCTSIZEID = copyOfcopyOfsortie_EUR_WSP_0.PRODUCTSIZEID.toLowerCase();
}
if(copyOfcopyOfsortie_EUR_WSP_0.PRODUCTSTYLEID == null){
	finder_tUniqRow_21.PRODUCTSTYLEID = null;
}else{
	finder_tUniqRow_21.PRODUCTSTYLEID = copyOfcopyOfsortie_EUR_WSP_0.PRODUCTSTYLEID.toLowerCase();
}
if(copyOfcopyOfsortie_EUR_WSP_0.QUANTITYUNITSYMBOL == null){
	finder_tUniqRow_21.QUANTITYUNITSYMBOL = null;
}else{
	finder_tUniqRow_21.QUANTITYUNITSYMBOL = copyOfcopyOfsortie_EUR_WSP_0.QUANTITYUNITSYMBOL.toLowerCase();
}	
finder_tUniqRow_21.hashCodeDirty = true;
if (!keystUniqRow_21.contains(finder_tUniqRow_21)) {
		KeyStruct_tUniqRow_21 new_tUniqRow_21 = new KeyStruct_tUniqRow_21();

		
if(copyOfcopyOfsortie_EUR_WSP_0.TRADEAGREEMENTJOURNALNUMBER == null){
	new_tUniqRow_21.TRADEAGREEMENTJOURNALNUMBER = null;
}else{
	new_tUniqRow_21.TRADEAGREEMENTJOURNALNUMBER = copyOfcopyOfsortie_EUR_WSP_0.TRADEAGREEMENTJOURNALNUMBER.toLowerCase();
}
if(copyOfcopyOfsortie_EUR_WSP_0.ITEMNUMBER == null){
	new_tUniqRow_21.ITEMNUMBER = null;
}else{
	new_tUniqRow_21.ITEMNUMBER = copyOfcopyOfsortie_EUR_WSP_0.ITEMNUMBER.toLowerCase();
}
new_tUniqRow_21.PRICE = copyOfcopyOfsortie_EUR_WSP_0.PRICE;
if(copyOfcopyOfsortie_EUR_WSP_0.PRICECURRENCYCODE == null){
	new_tUniqRow_21.PRICECURRENCYCODE = null;
}else{
	new_tUniqRow_21.PRICECURRENCYCODE = copyOfcopyOfsortie_EUR_WSP_0.PRICECURRENCYCODE.toLowerCase();
}
if(copyOfcopyOfsortie_EUR_WSP_0.PRICECUSTOMERGROUPCODE == null){
	new_tUniqRow_21.PRICECUSTOMERGROUPCODE = null;
}else{
	new_tUniqRow_21.PRICECUSTOMERGROUPCODE = copyOfcopyOfsortie_EUR_WSP_0.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(copyOfcopyOfsortie_EUR_WSP_0.PRODUCTCOLORID == null){
	new_tUniqRow_21.PRODUCTCOLORID = null;
}else{
	new_tUniqRow_21.PRODUCTCOLORID = copyOfcopyOfsortie_EUR_WSP_0.PRODUCTCOLORID.toLowerCase();
}
if(copyOfcopyOfsortie_EUR_WSP_0.PRODUCTSIZEID == null){
	new_tUniqRow_21.PRODUCTSIZEID = null;
}else{
	new_tUniqRow_21.PRODUCTSIZEID = copyOfcopyOfsortie_EUR_WSP_0.PRODUCTSIZEID.toLowerCase();
}
if(copyOfcopyOfsortie_EUR_WSP_0.PRODUCTSTYLEID == null){
	new_tUniqRow_21.PRODUCTSTYLEID = null;
}else{
	new_tUniqRow_21.PRODUCTSTYLEID = copyOfcopyOfsortie_EUR_WSP_0.PRODUCTSTYLEID.toLowerCase();
}
if(copyOfcopyOfsortie_EUR_WSP_0.QUANTITYUNITSYMBOL == null){
	new_tUniqRow_21.QUANTITYUNITSYMBOL = null;
}else{
	new_tUniqRow_21.QUANTITYUNITSYMBOL = copyOfcopyOfsortie_EUR_WSP_0.QUANTITYUNITSYMBOL.toLowerCase();
}
		
		keystUniqRow_21.add(new_tUniqRow_21);if(row45 == null){ 
	
	row45 = new row45Struct();
}row45.TRADEAGREEMENTJOURNALNUMBER = copyOfcopyOfsortie_EUR_WSP_0.TRADEAGREEMENTJOURNALNUMBER;			row45.ITEMNUMBER = copyOfcopyOfsortie_EUR_WSP_0.ITEMNUMBER;			row45.PRICE = copyOfcopyOfsortie_EUR_WSP_0.PRICE;			row45.PRICECURRENCYCODE = copyOfcopyOfsortie_EUR_WSP_0.PRICECURRENCYCODE;			row45.PRICECUSTOMERGROUPCODE = copyOfcopyOfsortie_EUR_WSP_0.PRICECUSTOMERGROUPCODE;			row45.PRODUCTCOLORID = copyOfcopyOfsortie_EUR_WSP_0.PRODUCTCOLORID;			row45.PRODUCTSIZEID = copyOfcopyOfsortie_EUR_WSP_0.PRODUCTSIZEID;			row45.PRODUCTSTYLEID = copyOfcopyOfsortie_EUR_WSP_0.PRODUCTSTYLEID;			row45.QUANTITYUNITSYMBOL = copyOfcopyOfsortie_EUR_WSP_0.QUANTITYUNITSYMBOL;			row45.SEASON = copyOfcopyOfsortie_EUR_WSP_0.SEASON;			row45.COUNTRY = copyOfcopyOfsortie_EUR_WSP_0.COUNTRY;					
		nb_uniques_tUniqRow_21++;
	} else {
	  nb_duplicates_tUniqRow_21++;
	}

 


	tos_count_tUniqRow_21++;

/**
 * [tUniqRow_21 main ] stop
 */
	
	/**
	 * [tUniqRow_21 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_21";

	

 



/**
 * [tUniqRow_21 process_data_begin ] stop
 */
// Start of branch "row45"
if(row45 != null) { 



	
	/**
	 * [tFilterRow_5 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_5";

	

          row46 = null;
    Operator_tFilterRow_5 ope_tFilterRow_5 = new Operator_tFilterRow_5("||");
            ope_tFilterRow_5.matches((row45.PRICE == null? false : row45.PRICE.compareTo(ParserUtils.parseTo_Double(String.valueOf(0))) > 0)
                           , "PRICE.compareTo(0) > 0 failed");
		 	
            ope_tFilterRow_5.matches((row45.PRODUCTSTYLEID == null? false : row45.PRODUCTSTYLEID.compareTo("SMS") == 0)
                           , "PRODUCTSTYLEID.compareTo(\"SMS\") == 0 failed");
    
    if (ope_tFilterRow_5.getMatchFlag()) {
              if(row46 == null){ 
                row46 = new row46Struct();
              }
               row46.TRADEAGREEMENTJOURNALNUMBER = row45.TRADEAGREEMENTJOURNALNUMBER;
               row46.ITEMNUMBER = row45.ITEMNUMBER;
               row46.PRICE = row45.PRICE;
               row46.PRICECURRENCYCODE = row45.PRICECURRENCYCODE;
               row46.PRICECUSTOMERGROUPCODE = row45.PRICECUSTOMERGROUPCODE;
               row46.PRODUCTCOLORID = row45.PRODUCTCOLORID;
               row46.PRODUCTSIZEID = row45.PRODUCTSIZEID;
               row46.PRODUCTSTYLEID = row45.PRODUCTSTYLEID;
               row46.QUANTITYUNITSYMBOL = row45.QUANTITYUNITSYMBOL;
               row46.SEASON = row45.SEASON;
               row46.COUNTRY = row45.COUNTRY;    
      nb_line_ok_tFilterRow_5++;
    } else {
      nb_line_reject_tFilterRow_5++;
    }

nb_line_tFilterRow_5++;

 


	tos_count_tFilterRow_5++;

/**
 * [tFilterRow_5 main ] stop
 */
	
	/**
	 * [tFilterRow_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_5";

	

 



/**
 * [tFilterRow_5 process_data_begin ] stop
 */
// Start of branch "row46"
if(row46 != null) { 



	
	/**
	 * [tHashOutput_12 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_12";

	



    
		row46Struct oneRow_tHashOutput_12 = new row46Struct();
				
					oneRow_tHashOutput_12.TRADEAGREEMENTJOURNALNUMBER = row46.TRADEAGREEMENTJOURNALNUMBER;
					oneRow_tHashOutput_12.ITEMNUMBER = row46.ITEMNUMBER;
					oneRow_tHashOutput_12.PRICE = row46.PRICE;
					oneRow_tHashOutput_12.PRICECURRENCYCODE = row46.PRICECURRENCYCODE;
					oneRow_tHashOutput_12.PRICECUSTOMERGROUPCODE = row46.PRICECUSTOMERGROUPCODE;
					oneRow_tHashOutput_12.PRODUCTCOLORID = row46.PRODUCTCOLORID;
					oneRow_tHashOutput_12.PRODUCTSIZEID = row46.PRODUCTSIZEID;
					oneRow_tHashOutput_12.PRODUCTSTYLEID = row46.PRODUCTSTYLEID;
					oneRow_tHashOutput_12.QUANTITYUNITSYMBOL = row46.QUANTITYUNITSYMBOL;
					oneRow_tHashOutput_12.SEASON = row46.SEASON;
					oneRow_tHashOutput_12.COUNTRY = row46.COUNTRY;
		
        tHashFile_tHashOutput_12.put(oneRow_tHashOutput_12);
        nb_line_tHashOutput_12 ++;
 


	tos_count_tHashOutput_12++;

/**
 * [tHashOutput_12 main ] stop
 */
	
	/**
	 * [tHashOutput_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_12";

	

 



/**
 * [tHashOutput_12 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_12";

	

 



/**
 * [tHashOutput_12 process_data_end ] stop
 */

} // End of branch "row46"




	
	/**
	 * [tFilterRow_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_5";

	

 



/**
 * [tFilterRow_5 process_data_end ] stop
 */

} // End of branch "row45"




	
	/**
	 * [tUniqRow_21 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_21";

	

 



/**
 * [tUniqRow_21 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfsortie_EUR_WSP_0"




// Start of branch "sortie_full_GBP_RRP"
if(sortie_full_GBP_RRP != null) { 



	
	/**
	 * [tMap_25 main ] start
	 */

	

	
	
	currentComponent="tMap_25";

	

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_25 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_25 = false;
		  boolean mainRowRejected_tMap_25 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_25__Struct Var = Var__tMap_25;// ###############################
        // ###############################
        // # Output tables

copyOfcopyOfcopyOfsortie_EUR_WSP_0 = null;
sortie_full_CHF_WSP = null;


// # Output table : 'copyOfcopyOfcopyOfsortie_EUR_WSP_0'
copyOfcopyOfcopyOfsortie_EUR_WSP_0_tmp.TRADEAGREEMENTJOURNALNUMBER = "HBE1-" + globalMap.get("SalesJournalNumber");
copyOfcopyOfcopyOfsortie_EUR_WSP_0_tmp.ITEMNUMBER = sortie_full_GBP_RRP.STYLE ;
copyOfcopyOfcopyOfsortie_EUR_WSP_0_tmp.PRICE = sortie_full_GBP_RRP.CHF_WSP == null ? 0 : Mathematical.REAL(sortie_full_GBP_RRP.CHF_WSP .replaceAll(",", ".") ) ;
copyOfcopyOfcopyOfsortie_EUR_WSP_0_tmp.PRICECURRENCYCODE = "CHF";
copyOfcopyOfcopyOfsortie_EUR_WSP_0_tmp.PRICECUSTOMERGROUPCODE = "WSP";
copyOfcopyOfcopyOfsortie_EUR_WSP_0_tmp.PRODUCTCOLORID = sortie_full_GBP_RRP.COLOR ;
copyOfcopyOfcopyOfsortie_EUR_WSP_0_tmp.PRODUCTSIZEID = sortie_full_GBP_RRP.SIZE ;
copyOfcopyOfcopyOfsortie_EUR_WSP_0_tmp.PRODUCTSTYLEID = sortie_full_GBP_RRP.LABELD365 ;
copyOfcopyOfcopyOfsortie_EUR_WSP_0_tmp.QUANTITYUNITSYMBOL = "PCE";
copyOfcopyOfcopyOfsortie_EUR_WSP_0_tmp.SEASON = sortie_full_GBP_RRP.SEASON ;
copyOfcopyOfcopyOfsortie_EUR_WSP_0_tmp.COUNTRY = "";
copyOfcopyOfcopyOfsortie_EUR_WSP_0 = copyOfcopyOfcopyOfsortie_EUR_WSP_0_tmp;

// # Output table : 'sortie_full_CHF_WSP'
sortie_full_CHF_WSP_tmp.BRAND = sortie_full_GBP_RRP.BRAND ;
sortie_full_CHF_WSP_tmp.SEASON = sortie_full_GBP_RRP.SEASON ;
sortie_full_CHF_WSP_tmp.CATEGORY = sortie_full_GBP_RRP.CATEGORY ;
sortie_full_CHF_WSP_tmp.REF = sortie_full_GBP_RRP.REF ;
sortie_full_CHF_WSP_tmp.DESCRIPTION = sortie_full_GBP_RRP.DESCRIPTION ;
sortie_full_CHF_WSP_tmp.STYLE = sortie_full_GBP_RRP.STYLE ;
sortie_full_CHF_WSP_tmp.COLOR = sortie_full_GBP_RRP.COLOR ;
sortie_full_CHF_WSP_tmp.FASHION = sortie_full_GBP_RRP.FASHION ;
sortie_full_CHF_WSP_tmp.STYLECOLORLABEL = sortie_full_GBP_RRP.STYLECOLORLABEL ;
sortie_full_CHF_WSP_tmp.COLORNAME = sortie_full_GBP_RRP.COLORNAME ;
sortie_full_CHF_WSP_tmp.LBL = sortie_full_GBP_RRP.LBL ;
sortie_full_CHF_WSP_tmp.STYLE_COLOR = sortie_full_GBP_RRP.STYLE_COLOR ;
sortie_full_CHF_WSP_tmp.GENDER = sortie_full_GBP_RRP.GENDER ;
sortie_full_CHF_WSP_tmp.AGE_RANGE = sortie_full_GBP_RRP.AGE_RANGE ;
sortie_full_CHF_WSP_tmp.SIZE_RANGE = sortie_full_GBP_RRP.SIZE_RANGE ;
sortie_full_CHF_WSP_tmp.SIZE = sortie_full_GBP_RRP.SIZE ;
sortie_full_CHF_WSP_tmp.US_SIZE = sortie_full_GBP_RRP.US_SIZE ;
sortie_full_CHF_WSP_tmp.CM_SIZE = sortie_full_GBP_RRP.CM_SIZE ;
sortie_full_CHF_WSP_tmp.PRODUCT = sortie_full_GBP_RRP.PRODUCT ;
sortie_full_CHF_WSP_tmp.PRODUCT_STATUS = sortie_full_GBP_RRP.PRODUCT_STATUS ;
sortie_full_CHF_WSP_tmp.PRODUCT_TIER = sortie_full_GBP_RRP.PRODUCT_TIER ;
sortie_full_CHF_WSP_tmp.ACCT_EXCLUS = sortie_full_GBP_RRP.ACCT_EXCLUS ;
sortie_full_CHF_WSP_tmp.SIZE_RATIO_SPLIT = sortie_full_GBP_RRP.SIZE_RATIO_SPLIT ;
sortie_full_CHF_WSP_tmp.REC_SIZE_SPLIT = sortie_full_GBP_RRP.REC_SIZE_SPLIT ;
sortie_full_CHF_WSP_tmp.CARTON_QTY = sortie_full_GBP_RRP.CARTON_QTY ;
sortie_full_CHF_WSP_tmp.ATTRIBUTE = sortie_full_GBP_RRP.ATTRIBUTE ;
sortie_full_CHF_WSP_tmp.UNITS = sortie_full_GBP_RRP.UNITS ;
sortie_full_CHF_WSP_tmp.EUR_RRP = sortie_full_GBP_RRP.EUR_RRP ;
sortie_full_CHF_WSP_tmp.EUR_WSP = sortie_full_GBP_RRP.EUR_WSP ;
sortie_full_CHF_WSP_tmp.GBP_RRP = sortie_full_GBP_RRP.GBP_RRP ;
sortie_full_CHF_WSP_tmp.GBP_WSP = sortie_full_GBP_RRP.GBP_WSP ;
sortie_full_CHF_WSP_tmp.CHF_RRP = sortie_full_GBP_RRP.CHF_RRP ;
sortie_full_CHF_WSP_tmp.CHF_WSP = sortie_full_GBP_RRP.CHF_WSP ;
sortie_full_CHF_WSP_tmp.NOK_RRP = sortie_full_GBP_RRP.NOK_RRP ;
sortie_full_CHF_WSP_tmp.NOK_WSP = sortie_full_GBP_RRP.NOK_WSP ;
sortie_full_CHF_WSP_tmp.DKK_RRP = sortie_full_GBP_RRP.DKK_RRP ;
sortie_full_CHF_WSP_tmp.DKK_WSP = sortie_full_GBP_RRP.DKK_WSP ;
sortie_full_CHF_WSP_tmp.SEK_RRP = sortie_full_GBP_RRP.SEK_RRP ;
sortie_full_CHF_WSP_tmp.SEK_WSP = sortie_full_GBP_RRP.SEK_WSP ;
sortie_full_CHF_WSP_tmp.EUR_FINN_RRP = sortie_full_GBP_RRP.EUR_FINN_RRP ;
sortie_full_CHF_WSP_tmp.EUR_FINN_WSP = sortie_full_GBP_RRP.EUR_FINN_WSP ;
sortie_full_CHF_WSP_tmp.FABRICATION = sortie_full_GBP_RRP.FABRICATION ;
sortie_full_CHF_WSP_tmp.COO = sortie_full_GBP_RRP.COO ;
sortie_full_CHF_WSP_tmp.CUSTOM_TARIFF_CODE = sortie_full_GBP_RRP.CUSTOM_TARIFF_CODE ;
sortie_full_CHF_WSP_tmp.UPC = sortie_full_GBP_RRP.UPC ;
sortie_full_CHF_WSP_tmp.SMU_TYPE = sortie_full_GBP_RRP.SMU_TYPE ;
sortie_full_CHF_WSP_tmp.LABELD365 = sortie_full_GBP_RRP.LABELD365 ;
sortie_full_CHF_WSP = sortie_full_CHF_WSP_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_25 = false;










 


	tos_count_tMap_25++;

/**
 * [tMap_25 main ] stop
 */
	
	/**
	 * [tMap_25 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_25";

	

 



/**
 * [tMap_25 process_data_begin ] stop
 */
// Start of branch "copyOfcopyOfcopyOfsortie_EUR_WSP_0"
if(copyOfcopyOfcopyOfsortie_EUR_WSP_0 != null) { 



	
	/**
	 * [tUniqRow_22 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_22";

	
row47 = null;			
if(copyOfcopyOfcopyOfsortie_EUR_WSP_0.TRADEAGREEMENTJOURNALNUMBER == null){
	finder_tUniqRow_22.TRADEAGREEMENTJOURNALNUMBER = null;
}else{
	finder_tUniqRow_22.TRADEAGREEMENTJOURNALNUMBER = copyOfcopyOfcopyOfsortie_EUR_WSP_0.TRADEAGREEMENTJOURNALNUMBER.toLowerCase();
}
if(copyOfcopyOfcopyOfsortie_EUR_WSP_0.ITEMNUMBER == null){
	finder_tUniqRow_22.ITEMNUMBER = null;
}else{
	finder_tUniqRow_22.ITEMNUMBER = copyOfcopyOfcopyOfsortie_EUR_WSP_0.ITEMNUMBER.toLowerCase();
}
finder_tUniqRow_22.PRICE = copyOfcopyOfcopyOfsortie_EUR_WSP_0.PRICE;
if(copyOfcopyOfcopyOfsortie_EUR_WSP_0.PRICECURRENCYCODE == null){
	finder_tUniqRow_22.PRICECURRENCYCODE = null;
}else{
	finder_tUniqRow_22.PRICECURRENCYCODE = copyOfcopyOfcopyOfsortie_EUR_WSP_0.PRICECURRENCYCODE.toLowerCase();
}
if(copyOfcopyOfcopyOfsortie_EUR_WSP_0.PRICECUSTOMERGROUPCODE == null){
	finder_tUniqRow_22.PRICECUSTOMERGROUPCODE = null;
}else{
	finder_tUniqRow_22.PRICECUSTOMERGROUPCODE = copyOfcopyOfcopyOfsortie_EUR_WSP_0.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(copyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTCOLORID == null){
	finder_tUniqRow_22.PRODUCTCOLORID = null;
}else{
	finder_tUniqRow_22.PRODUCTCOLORID = copyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTCOLORID.toLowerCase();
}
if(copyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTSIZEID == null){
	finder_tUniqRow_22.PRODUCTSIZEID = null;
}else{
	finder_tUniqRow_22.PRODUCTSIZEID = copyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTSIZEID.toLowerCase();
}
if(copyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTSTYLEID == null){
	finder_tUniqRow_22.PRODUCTSTYLEID = null;
}else{
	finder_tUniqRow_22.PRODUCTSTYLEID = copyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTSTYLEID.toLowerCase();
}
if(copyOfcopyOfcopyOfsortie_EUR_WSP_0.QUANTITYUNITSYMBOL == null){
	finder_tUniqRow_22.QUANTITYUNITSYMBOL = null;
}else{
	finder_tUniqRow_22.QUANTITYUNITSYMBOL = copyOfcopyOfcopyOfsortie_EUR_WSP_0.QUANTITYUNITSYMBOL.toLowerCase();
}	
finder_tUniqRow_22.hashCodeDirty = true;
if (!keystUniqRow_22.contains(finder_tUniqRow_22)) {
		KeyStruct_tUniqRow_22 new_tUniqRow_22 = new KeyStruct_tUniqRow_22();

		
if(copyOfcopyOfcopyOfsortie_EUR_WSP_0.TRADEAGREEMENTJOURNALNUMBER == null){
	new_tUniqRow_22.TRADEAGREEMENTJOURNALNUMBER = null;
}else{
	new_tUniqRow_22.TRADEAGREEMENTJOURNALNUMBER = copyOfcopyOfcopyOfsortie_EUR_WSP_0.TRADEAGREEMENTJOURNALNUMBER.toLowerCase();
}
if(copyOfcopyOfcopyOfsortie_EUR_WSP_0.ITEMNUMBER == null){
	new_tUniqRow_22.ITEMNUMBER = null;
}else{
	new_tUniqRow_22.ITEMNUMBER = copyOfcopyOfcopyOfsortie_EUR_WSP_0.ITEMNUMBER.toLowerCase();
}
new_tUniqRow_22.PRICE = copyOfcopyOfcopyOfsortie_EUR_WSP_0.PRICE;
if(copyOfcopyOfcopyOfsortie_EUR_WSP_0.PRICECURRENCYCODE == null){
	new_tUniqRow_22.PRICECURRENCYCODE = null;
}else{
	new_tUniqRow_22.PRICECURRENCYCODE = copyOfcopyOfcopyOfsortie_EUR_WSP_0.PRICECURRENCYCODE.toLowerCase();
}
if(copyOfcopyOfcopyOfsortie_EUR_WSP_0.PRICECUSTOMERGROUPCODE == null){
	new_tUniqRow_22.PRICECUSTOMERGROUPCODE = null;
}else{
	new_tUniqRow_22.PRICECUSTOMERGROUPCODE = copyOfcopyOfcopyOfsortie_EUR_WSP_0.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(copyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTCOLORID == null){
	new_tUniqRow_22.PRODUCTCOLORID = null;
}else{
	new_tUniqRow_22.PRODUCTCOLORID = copyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTCOLORID.toLowerCase();
}
if(copyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTSIZEID == null){
	new_tUniqRow_22.PRODUCTSIZEID = null;
}else{
	new_tUniqRow_22.PRODUCTSIZEID = copyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTSIZEID.toLowerCase();
}
if(copyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTSTYLEID == null){
	new_tUniqRow_22.PRODUCTSTYLEID = null;
}else{
	new_tUniqRow_22.PRODUCTSTYLEID = copyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTSTYLEID.toLowerCase();
}
if(copyOfcopyOfcopyOfsortie_EUR_WSP_0.QUANTITYUNITSYMBOL == null){
	new_tUniqRow_22.QUANTITYUNITSYMBOL = null;
}else{
	new_tUniqRow_22.QUANTITYUNITSYMBOL = copyOfcopyOfcopyOfsortie_EUR_WSP_0.QUANTITYUNITSYMBOL.toLowerCase();
}
		
		keystUniqRow_22.add(new_tUniqRow_22);if(row47 == null){ 
	
	row47 = new row47Struct();
}row47.TRADEAGREEMENTJOURNALNUMBER = copyOfcopyOfcopyOfsortie_EUR_WSP_0.TRADEAGREEMENTJOURNALNUMBER;			row47.ITEMNUMBER = copyOfcopyOfcopyOfsortie_EUR_WSP_0.ITEMNUMBER;			row47.PRICE = copyOfcopyOfcopyOfsortie_EUR_WSP_0.PRICE;			row47.PRICECURRENCYCODE = copyOfcopyOfcopyOfsortie_EUR_WSP_0.PRICECURRENCYCODE;			row47.PRICECUSTOMERGROUPCODE = copyOfcopyOfcopyOfsortie_EUR_WSP_0.PRICECUSTOMERGROUPCODE;			row47.PRODUCTCOLORID = copyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTCOLORID;			row47.PRODUCTSIZEID = copyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTSIZEID;			row47.PRODUCTSTYLEID = copyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTSTYLEID;			row47.QUANTITYUNITSYMBOL = copyOfcopyOfcopyOfsortie_EUR_WSP_0.QUANTITYUNITSYMBOL;			row47.SEASON = copyOfcopyOfcopyOfsortie_EUR_WSP_0.SEASON;			row47.COUNTRY = copyOfcopyOfcopyOfsortie_EUR_WSP_0.COUNTRY;					
		nb_uniques_tUniqRow_22++;
	} else {
	  nb_duplicates_tUniqRow_22++;
	}

 


	tos_count_tUniqRow_22++;

/**
 * [tUniqRow_22 main ] stop
 */
	
	/**
	 * [tUniqRow_22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_22";

	

 



/**
 * [tUniqRow_22 process_data_begin ] stop
 */
// Start of branch "row47"
if(row47 != null) { 



	
	/**
	 * [tFilterRow_6 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_6";

	

          row48 = null;
    Operator_tFilterRow_6 ope_tFilterRow_6 = new Operator_tFilterRow_6("||");
            ope_tFilterRow_6.matches((row47.PRICE == null? false : row47.PRICE.compareTo(ParserUtils.parseTo_Double(String.valueOf(0))) > 0)
                           , "PRICE.compareTo(0) > 0 failed");
		 	
            ope_tFilterRow_6.matches((row47.PRODUCTSTYLEID == null? false : row47.PRODUCTSTYLEID.compareTo("SMS") == 0)
                           , "PRODUCTSTYLEID.compareTo(\"SMS\") == 0 failed");
    
    if (ope_tFilterRow_6.getMatchFlag()) {
              if(row48 == null){ 
                row48 = new row48Struct();
              }
               row48.TRADEAGREEMENTJOURNALNUMBER = row47.TRADEAGREEMENTJOURNALNUMBER;
               row48.ITEMNUMBER = row47.ITEMNUMBER;
               row48.PRICE = row47.PRICE;
               row48.PRICECURRENCYCODE = row47.PRICECURRENCYCODE;
               row48.PRICECUSTOMERGROUPCODE = row47.PRICECUSTOMERGROUPCODE;
               row48.PRODUCTCOLORID = row47.PRODUCTCOLORID;
               row48.PRODUCTSIZEID = row47.PRODUCTSIZEID;
               row48.PRODUCTSTYLEID = row47.PRODUCTSTYLEID;
               row48.QUANTITYUNITSYMBOL = row47.QUANTITYUNITSYMBOL;
               row48.SEASON = row47.SEASON;
               row48.COUNTRY = row47.COUNTRY;    
      nb_line_ok_tFilterRow_6++;
    } else {
      nb_line_reject_tFilterRow_6++;
    }

nb_line_tFilterRow_6++;

 


	tos_count_tFilterRow_6++;

/**
 * [tFilterRow_6 main ] stop
 */
	
	/**
	 * [tFilterRow_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_6";

	

 



/**
 * [tFilterRow_6 process_data_begin ] stop
 */
// Start of branch "row48"
if(row48 != null) { 



	
	/**
	 * [tHashOutput_13 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_13";

	



    
		row48Struct oneRow_tHashOutput_13 = new row48Struct();
				
					oneRow_tHashOutput_13.TRADEAGREEMENTJOURNALNUMBER = row48.TRADEAGREEMENTJOURNALNUMBER;
					oneRow_tHashOutput_13.ITEMNUMBER = row48.ITEMNUMBER;
					oneRow_tHashOutput_13.PRICE = row48.PRICE;
					oneRow_tHashOutput_13.PRICECURRENCYCODE = row48.PRICECURRENCYCODE;
					oneRow_tHashOutput_13.PRICECUSTOMERGROUPCODE = row48.PRICECUSTOMERGROUPCODE;
					oneRow_tHashOutput_13.PRODUCTCOLORID = row48.PRODUCTCOLORID;
					oneRow_tHashOutput_13.PRODUCTSIZEID = row48.PRODUCTSIZEID;
					oneRow_tHashOutput_13.PRODUCTSTYLEID = row48.PRODUCTSTYLEID;
					oneRow_tHashOutput_13.QUANTITYUNITSYMBOL = row48.QUANTITYUNITSYMBOL;
					oneRow_tHashOutput_13.SEASON = row48.SEASON;
					oneRow_tHashOutput_13.COUNTRY = row48.COUNTRY;
		
        tHashFile_tHashOutput_13.put(oneRow_tHashOutput_13);
        nb_line_tHashOutput_13 ++;
 


	tos_count_tHashOutput_13++;

/**
 * [tHashOutput_13 main ] stop
 */
	
	/**
	 * [tHashOutput_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_13";

	

 



/**
 * [tHashOutput_13 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_13";

	

 



/**
 * [tHashOutput_13 process_data_end ] stop
 */

} // End of branch "row48"




	
	/**
	 * [tFilterRow_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_6";

	

 



/**
 * [tFilterRow_6 process_data_end ] stop
 */

} // End of branch "row47"




	
	/**
	 * [tUniqRow_22 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_22";

	

 



/**
 * [tUniqRow_22 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfcopyOfsortie_EUR_WSP_0"




// Start of branch "sortie_full_CHF_WSP"
if(sortie_full_CHF_WSP != null) { 



	
	/**
	 * [tMap_26 main ] start
	 */

	

	
	
	currentComponent="tMap_26";

	

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_26 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_26 = false;
		  boolean mainRowRejected_tMap_26 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_26__Struct Var = Var__tMap_26;// ###############################
        // ###############################
        // # Output tables

copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0 = null;
sortie_full_chr_rrp = null;


// # Output table : 'copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0'
copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_tmp.TRADEAGREEMENTJOURNALNUMBER = "HBE1-" + globalMap.get("SalesJournalNumber");
copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_tmp.ITEMNUMBER = sortie_full_CHF_WSP.STYLE ;
copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_tmp.PRICE = sortie_full_CHF_WSP.CHF_RRP == null ? 0 : Mathematical.REAL(sortie_full_CHF_WSP.CHF_RRP .replaceAll(",", ".") ) ;
copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_tmp.PRICECURRENCYCODE = "CHF";
copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_tmp.PRICECUSTOMERGROUPCODE = "RRP";
copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_tmp.PRODUCTCOLORID = sortie_full_CHF_WSP.COLOR ;
copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_tmp.PRODUCTSIZEID = sortie_full_CHF_WSP.SIZE ;
copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_tmp.PRODUCTSTYLEID = sortie_full_CHF_WSP.LABELD365 ;
copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_tmp.QUANTITYUNITSYMBOL = "PCE";
copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_tmp.SEASON = sortie_full_CHF_WSP.SEASON ;
copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_tmp.COUNTRY = "";
copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0 = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_tmp;

// # Output table : 'sortie_full_chr_rrp'
sortie_full_chr_rrp_tmp.BRAND = sortie_full_CHF_WSP.BRAND ;
sortie_full_chr_rrp_tmp.SEASON = sortie_full_CHF_WSP.SEASON ;
sortie_full_chr_rrp_tmp.CATEGORY = sortie_full_CHF_WSP.CATEGORY ;
sortie_full_chr_rrp_tmp.REF = sortie_full_CHF_WSP.REF ;
sortie_full_chr_rrp_tmp.DESCRIPTION = sortie_full_CHF_WSP.DESCRIPTION ;
sortie_full_chr_rrp_tmp.STYLE = sortie_full_CHF_WSP.STYLE ;
sortie_full_chr_rrp_tmp.COLOR = sortie_full_CHF_WSP.COLOR ;
sortie_full_chr_rrp_tmp.FASHION = sortie_full_CHF_WSP.FASHION ;
sortie_full_chr_rrp_tmp.STYLECOLORLABEL = sortie_full_CHF_WSP.STYLECOLORLABEL ;
sortie_full_chr_rrp_tmp.COLORNAME = sortie_full_CHF_WSP.COLORNAME ;
sortie_full_chr_rrp_tmp.LBL = sortie_full_CHF_WSP.LBL ;
sortie_full_chr_rrp_tmp.STYLE_COLOR = sortie_full_CHF_WSP.STYLE_COLOR ;
sortie_full_chr_rrp_tmp.GENDER = sortie_full_CHF_WSP.GENDER ;
sortie_full_chr_rrp_tmp.AGE_RANGE = sortie_full_CHF_WSP.AGE_RANGE ;
sortie_full_chr_rrp_tmp.SIZE_RANGE = sortie_full_CHF_WSP.SIZE_RANGE ;
sortie_full_chr_rrp_tmp.SIZE = sortie_full_CHF_WSP.SIZE ;
sortie_full_chr_rrp_tmp.US_SIZE = sortie_full_CHF_WSP.US_SIZE ;
sortie_full_chr_rrp_tmp.CM_SIZE = sortie_full_CHF_WSP.CM_SIZE ;
sortie_full_chr_rrp_tmp.PRODUCT = sortie_full_CHF_WSP.PRODUCT ;
sortie_full_chr_rrp_tmp.PRODUCT_STATUS = sortie_full_CHF_WSP.PRODUCT_STATUS ;
sortie_full_chr_rrp_tmp.PRODUCT_TIER = sortie_full_CHF_WSP.PRODUCT_TIER ;
sortie_full_chr_rrp_tmp.ACCT_EXCLUS = sortie_full_CHF_WSP.ACCT_EXCLUS ;
sortie_full_chr_rrp_tmp.SIZE_RATIO_SPLIT = sortie_full_CHF_WSP.SIZE_RATIO_SPLIT ;
sortie_full_chr_rrp_tmp.REC_SIZE_SPLIT = sortie_full_CHF_WSP.REC_SIZE_SPLIT ;
sortie_full_chr_rrp_tmp.CARTON_QTY = sortie_full_CHF_WSP.CARTON_QTY ;
sortie_full_chr_rrp_tmp.ATTRIBUTE = sortie_full_CHF_WSP.ATTRIBUTE ;
sortie_full_chr_rrp_tmp.UNITS = sortie_full_CHF_WSP.UNITS ;
sortie_full_chr_rrp_tmp.EUR_RRP = sortie_full_CHF_WSP.EUR_RRP ;
sortie_full_chr_rrp_tmp.EUR_WSP = sortie_full_CHF_WSP.EUR_WSP ;
sortie_full_chr_rrp_tmp.GBP_RRP = sortie_full_CHF_WSP.GBP_RRP ;
sortie_full_chr_rrp_tmp.GBP_WSP = sortie_full_CHF_WSP.GBP_WSP ;
sortie_full_chr_rrp_tmp.CHF_RRP = sortie_full_CHF_WSP.CHF_RRP ;
sortie_full_chr_rrp_tmp.CHF_WSP = sortie_full_CHF_WSP.CHF_WSP ;
sortie_full_chr_rrp_tmp.NOK_RRP = sortie_full_CHF_WSP.NOK_RRP ;
sortie_full_chr_rrp_tmp.NOK_WSP = sortie_full_CHF_WSP.NOK_WSP ;
sortie_full_chr_rrp_tmp.DKK_RRP = sortie_full_CHF_WSP.DKK_RRP ;
sortie_full_chr_rrp_tmp.DKK_WSP = sortie_full_CHF_WSP.DKK_WSP ;
sortie_full_chr_rrp_tmp.SEK_RRP = sortie_full_CHF_WSP.SEK_RRP ;
sortie_full_chr_rrp_tmp.SEK_WSP = sortie_full_CHF_WSP.SEK_WSP ;
sortie_full_chr_rrp_tmp.EUR_FINN_RRP = sortie_full_CHF_WSP.EUR_FINN_RRP ;
sortie_full_chr_rrp_tmp.EUR_FINN_WSP = sortie_full_CHF_WSP.EUR_FINN_WSP ;
sortie_full_chr_rrp_tmp.FABRICATION = sortie_full_CHF_WSP.FABRICATION ;
sortie_full_chr_rrp_tmp.COO = sortie_full_CHF_WSP.COO ;
sortie_full_chr_rrp_tmp.CUSTOM_TARIFF_CODE = sortie_full_CHF_WSP.CUSTOM_TARIFF_CODE ;
sortie_full_chr_rrp_tmp.UPC = sortie_full_CHF_WSP.UPC ;
sortie_full_chr_rrp_tmp.SMU_TYPE = sortie_full_CHF_WSP.SMU_TYPE ;
sortie_full_chr_rrp_tmp.LABELD365 = sortie_full_CHF_WSP.LABELD365 ;
sortie_full_chr_rrp = sortie_full_chr_rrp_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_26 = false;










 


	tos_count_tMap_26++;

/**
 * [tMap_26 main ] stop
 */
	
	/**
	 * [tMap_26 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_26";

	

 



/**
 * [tMap_26 process_data_begin ] stop
 */
// Start of branch "copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0"
if(copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0 != null) { 



	
	/**
	 * [tUniqRow_23 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_23";

	
row49 = null;			
if(copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.TRADEAGREEMENTJOURNALNUMBER == null){
	finder_tUniqRow_23.TRADEAGREEMENTJOURNALNUMBER = null;
}else{
	finder_tUniqRow_23.TRADEAGREEMENTJOURNALNUMBER = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.TRADEAGREEMENTJOURNALNUMBER.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.ITEMNUMBER == null){
	finder_tUniqRow_23.ITEMNUMBER = null;
}else{
	finder_tUniqRow_23.ITEMNUMBER = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.ITEMNUMBER.toLowerCase();
}
finder_tUniqRow_23.PRICE = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRICE;
if(copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRICECURRENCYCODE == null){
	finder_tUniqRow_23.PRICECURRENCYCODE = null;
}else{
	finder_tUniqRow_23.PRICECURRENCYCODE = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRICECURRENCYCODE.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRICECUSTOMERGROUPCODE == null){
	finder_tUniqRow_23.PRICECUSTOMERGROUPCODE = null;
}else{
	finder_tUniqRow_23.PRICECUSTOMERGROUPCODE = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTCOLORID == null){
	finder_tUniqRow_23.PRODUCTCOLORID = null;
}else{
	finder_tUniqRow_23.PRODUCTCOLORID = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTCOLORID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTSIZEID == null){
	finder_tUniqRow_23.PRODUCTSIZEID = null;
}else{
	finder_tUniqRow_23.PRODUCTSIZEID = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTSIZEID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTSTYLEID == null){
	finder_tUniqRow_23.PRODUCTSTYLEID = null;
}else{
	finder_tUniqRow_23.PRODUCTSTYLEID = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTSTYLEID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.QUANTITYUNITSYMBOL == null){
	finder_tUniqRow_23.QUANTITYUNITSYMBOL = null;
}else{
	finder_tUniqRow_23.QUANTITYUNITSYMBOL = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.QUANTITYUNITSYMBOL.toLowerCase();
}	
finder_tUniqRow_23.hashCodeDirty = true;
if (!keystUniqRow_23.contains(finder_tUniqRow_23)) {
		KeyStruct_tUniqRow_23 new_tUniqRow_23 = new KeyStruct_tUniqRow_23();

		
if(copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.TRADEAGREEMENTJOURNALNUMBER == null){
	new_tUniqRow_23.TRADEAGREEMENTJOURNALNUMBER = null;
}else{
	new_tUniqRow_23.TRADEAGREEMENTJOURNALNUMBER = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.TRADEAGREEMENTJOURNALNUMBER.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.ITEMNUMBER == null){
	new_tUniqRow_23.ITEMNUMBER = null;
}else{
	new_tUniqRow_23.ITEMNUMBER = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.ITEMNUMBER.toLowerCase();
}
new_tUniqRow_23.PRICE = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRICE;
if(copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRICECURRENCYCODE == null){
	new_tUniqRow_23.PRICECURRENCYCODE = null;
}else{
	new_tUniqRow_23.PRICECURRENCYCODE = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRICECURRENCYCODE.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRICECUSTOMERGROUPCODE == null){
	new_tUniqRow_23.PRICECUSTOMERGROUPCODE = null;
}else{
	new_tUniqRow_23.PRICECUSTOMERGROUPCODE = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTCOLORID == null){
	new_tUniqRow_23.PRODUCTCOLORID = null;
}else{
	new_tUniqRow_23.PRODUCTCOLORID = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTCOLORID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTSIZEID == null){
	new_tUniqRow_23.PRODUCTSIZEID = null;
}else{
	new_tUniqRow_23.PRODUCTSIZEID = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTSIZEID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTSTYLEID == null){
	new_tUniqRow_23.PRODUCTSTYLEID = null;
}else{
	new_tUniqRow_23.PRODUCTSTYLEID = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTSTYLEID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.QUANTITYUNITSYMBOL == null){
	new_tUniqRow_23.QUANTITYUNITSYMBOL = null;
}else{
	new_tUniqRow_23.QUANTITYUNITSYMBOL = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.QUANTITYUNITSYMBOL.toLowerCase();
}
		
		keystUniqRow_23.add(new_tUniqRow_23);if(row49 == null){ 
	
	row49 = new row49Struct();
}row49.TRADEAGREEMENTJOURNALNUMBER = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.TRADEAGREEMENTJOURNALNUMBER;			row49.ITEMNUMBER = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.ITEMNUMBER;			row49.PRICE = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRICE;			row49.PRICECURRENCYCODE = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRICECURRENCYCODE;			row49.PRICECUSTOMERGROUPCODE = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRICECUSTOMERGROUPCODE;			row49.PRODUCTCOLORID = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTCOLORID;			row49.PRODUCTSIZEID = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTSIZEID;			row49.PRODUCTSTYLEID = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTSTYLEID;			row49.QUANTITYUNITSYMBOL = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.QUANTITYUNITSYMBOL;			row49.SEASON = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.SEASON;			row49.COUNTRY = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.COUNTRY;					
		nb_uniques_tUniqRow_23++;
	} else {
	  nb_duplicates_tUniqRow_23++;
	}

 


	tos_count_tUniqRow_23++;

/**
 * [tUniqRow_23 main ] stop
 */
	
	/**
	 * [tUniqRow_23 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_23";

	

 



/**
 * [tUniqRow_23 process_data_begin ] stop
 */
// Start of branch "row49"
if(row49 != null) { 



	
	/**
	 * [tFilterRow_7 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_7";

	

          row50 = null;
    Operator_tFilterRow_7 ope_tFilterRow_7 = new Operator_tFilterRow_7("||");
            ope_tFilterRow_7.matches((row49.PRICE == null? false : row49.PRICE.compareTo(ParserUtils.parseTo_Double(String.valueOf(0))) > 0)
                           , "PRICE.compareTo(0) > 0 failed");
		 	
            ope_tFilterRow_7.matches((row49.PRODUCTSTYLEID == null? false : row49.PRODUCTSTYLEID.compareTo("SMS") == 0)
                           , "PRODUCTSTYLEID.compareTo(\"SMS\") == 0 failed");
    
    if (ope_tFilterRow_7.getMatchFlag()) {
              if(row50 == null){ 
                row50 = new row50Struct();
              }
               row50.TRADEAGREEMENTJOURNALNUMBER = row49.TRADEAGREEMENTJOURNALNUMBER;
               row50.ITEMNUMBER = row49.ITEMNUMBER;
               row50.PRICE = row49.PRICE;
               row50.PRICECURRENCYCODE = row49.PRICECURRENCYCODE;
               row50.PRICECUSTOMERGROUPCODE = row49.PRICECUSTOMERGROUPCODE;
               row50.PRODUCTCOLORID = row49.PRODUCTCOLORID;
               row50.PRODUCTSIZEID = row49.PRODUCTSIZEID;
               row50.PRODUCTSTYLEID = row49.PRODUCTSTYLEID;
               row50.QUANTITYUNITSYMBOL = row49.QUANTITYUNITSYMBOL;
               row50.SEASON = row49.SEASON;
               row50.COUNTRY = row49.COUNTRY;    
      nb_line_ok_tFilterRow_7++;
    } else {
      nb_line_reject_tFilterRow_7++;
    }

nb_line_tFilterRow_7++;

 


	tos_count_tFilterRow_7++;

/**
 * [tFilterRow_7 main ] stop
 */
	
	/**
	 * [tFilterRow_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_7";

	

 



/**
 * [tFilterRow_7 process_data_begin ] stop
 */
// Start of branch "row50"
if(row50 != null) { 



	
	/**
	 * [tHashOutput_14 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_14";

	



    
		row50Struct oneRow_tHashOutput_14 = new row50Struct();
				
					oneRow_tHashOutput_14.TRADEAGREEMENTJOURNALNUMBER = row50.TRADEAGREEMENTJOURNALNUMBER;
					oneRow_tHashOutput_14.ITEMNUMBER = row50.ITEMNUMBER;
					oneRow_tHashOutput_14.PRICE = row50.PRICE;
					oneRow_tHashOutput_14.PRICECURRENCYCODE = row50.PRICECURRENCYCODE;
					oneRow_tHashOutput_14.PRICECUSTOMERGROUPCODE = row50.PRICECUSTOMERGROUPCODE;
					oneRow_tHashOutput_14.PRODUCTCOLORID = row50.PRODUCTCOLORID;
					oneRow_tHashOutput_14.PRODUCTSIZEID = row50.PRODUCTSIZEID;
					oneRow_tHashOutput_14.PRODUCTSTYLEID = row50.PRODUCTSTYLEID;
					oneRow_tHashOutput_14.QUANTITYUNITSYMBOL = row50.QUANTITYUNITSYMBOL;
					oneRow_tHashOutput_14.SEASON = row50.SEASON;
					oneRow_tHashOutput_14.COUNTRY = row50.COUNTRY;
		
        tHashFile_tHashOutput_14.put(oneRow_tHashOutput_14);
        nb_line_tHashOutput_14 ++;
 


	tos_count_tHashOutput_14++;

/**
 * [tHashOutput_14 main ] stop
 */
	
	/**
	 * [tHashOutput_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_14";

	

 



/**
 * [tHashOutput_14 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_14";

	

 



/**
 * [tHashOutput_14 process_data_end ] stop
 */

} // End of branch "row50"




	
	/**
	 * [tFilterRow_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_7";

	

 



/**
 * [tFilterRow_7 process_data_end ] stop
 */

} // End of branch "row49"




	
	/**
	 * [tUniqRow_23 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_23";

	

 



/**
 * [tUniqRow_23 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0"




// Start of branch "sortie_full_chr_rrp"
if(sortie_full_chr_rrp != null) { 



	
	/**
	 * [tMap_27 main ] start
	 */

	

	
	
	currentComponent="tMap_27";

	

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_27 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_27 = false;
		  boolean mainRowRejected_tMap_27 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_27__Struct Var = Var__tMap_27;// ###############################
        // ###############################
        // # Output tables

copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0 = null;
sortie_full_NOK_WSP = null;


// # Output table : 'copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0'
copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_tmp.TRADEAGREEMENTJOURNALNUMBER = "HBE1-" + globalMap.get("SalesJournalNumber");
copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_tmp.ITEMNUMBER = sortie_full_chr_rrp.STYLE ;
copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_tmp.PRICE = sortie_full_chr_rrp.NOK_WSP == null ? 0 : Mathematical.REAL(sortie_full_chr_rrp.NOK_WSP .replaceAll(",", ".") ) ;
copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_tmp.PRICECURRENCYCODE = "NOK";
copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_tmp.PRICECUSTOMERGROUPCODE = "WSP";
copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_tmp.PRODUCTCOLORID = sortie_full_chr_rrp.COLOR ;
copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_tmp.PRODUCTSIZEID = sortie_full_chr_rrp.SIZE ;
copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_tmp.PRODUCTSTYLEID = sortie_full_chr_rrp.LABELD365 ;
copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_tmp.QUANTITYUNITSYMBOL = "PCE";
copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_tmp.SEASON = sortie_full_chr_rrp.SEASON ;
copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_tmp.COUNTRY = "";
copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0 = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_tmp;

// # Output table : 'sortie_full_NOK_WSP'
sortie_full_NOK_WSP_tmp.BRAND = sortie_full_chr_rrp.BRAND ;
sortie_full_NOK_WSP_tmp.SEASON = sortie_full_chr_rrp.SEASON ;
sortie_full_NOK_WSP_tmp.CATEGORY = sortie_full_chr_rrp.CATEGORY ;
sortie_full_NOK_WSP_tmp.REF = sortie_full_chr_rrp.REF ;
sortie_full_NOK_WSP_tmp.DESCRIPTION = sortie_full_chr_rrp.DESCRIPTION ;
sortie_full_NOK_WSP_tmp.STYLE = sortie_full_chr_rrp.STYLE ;
sortie_full_NOK_WSP_tmp.COLOR = sortie_full_chr_rrp.COLOR ;
sortie_full_NOK_WSP_tmp.FASHION = sortie_full_chr_rrp.FASHION ;
sortie_full_NOK_WSP_tmp.STYLECOLORLABEL = sortie_full_chr_rrp.STYLECOLORLABEL ;
sortie_full_NOK_WSP_tmp.COLORNAME = sortie_full_chr_rrp.COLORNAME ;
sortie_full_NOK_WSP_tmp.LBL = sortie_full_chr_rrp.LBL ;
sortie_full_NOK_WSP_tmp.STYLE_COLOR = sortie_full_chr_rrp.STYLE_COLOR ;
sortie_full_NOK_WSP_tmp.GENDER = sortie_full_chr_rrp.GENDER ;
sortie_full_NOK_WSP_tmp.AGE_RANGE = sortie_full_chr_rrp.AGE_RANGE ;
sortie_full_NOK_WSP_tmp.SIZE_RANGE = sortie_full_chr_rrp.SIZE_RANGE ;
sortie_full_NOK_WSP_tmp.SIZE = sortie_full_chr_rrp.SIZE ;
sortie_full_NOK_WSP_tmp.US_SIZE = sortie_full_chr_rrp.US_SIZE ;
sortie_full_NOK_WSP_tmp.CM_SIZE = sortie_full_chr_rrp.CM_SIZE ;
sortie_full_NOK_WSP_tmp.PRODUCT = sortie_full_chr_rrp.PRODUCT ;
sortie_full_NOK_WSP_tmp.PRODUCT_STATUS = sortie_full_chr_rrp.PRODUCT_STATUS ;
sortie_full_NOK_WSP_tmp.PRODUCT_TIER = sortie_full_chr_rrp.PRODUCT_TIER ;
sortie_full_NOK_WSP_tmp.ACCT_EXCLUS = sortie_full_chr_rrp.ACCT_EXCLUS ;
sortie_full_NOK_WSP_tmp.SIZE_RATIO_SPLIT = sortie_full_chr_rrp.SIZE_RATIO_SPLIT ;
sortie_full_NOK_WSP_tmp.REC_SIZE_SPLIT = sortie_full_chr_rrp.REC_SIZE_SPLIT ;
sortie_full_NOK_WSP_tmp.CARTON_QTY = sortie_full_chr_rrp.CARTON_QTY ;
sortie_full_NOK_WSP_tmp.ATTRIBUTE = sortie_full_chr_rrp.ATTRIBUTE ;
sortie_full_NOK_WSP_tmp.UNITS = sortie_full_chr_rrp.UNITS ;
sortie_full_NOK_WSP_tmp.EUR_RRP = sortie_full_chr_rrp.EUR_RRP ;
sortie_full_NOK_WSP_tmp.EUR_WSP = sortie_full_chr_rrp.EUR_WSP ;
sortie_full_NOK_WSP_tmp.GBP_RRP = sortie_full_chr_rrp.GBP_RRP ;
sortie_full_NOK_WSP_tmp.GBP_WSP = sortie_full_chr_rrp.GBP_WSP ;
sortie_full_NOK_WSP_tmp.CHF_RRP = sortie_full_chr_rrp.CHF_RRP ;
sortie_full_NOK_WSP_tmp.CHF_WSP = sortie_full_chr_rrp.CHF_WSP ;
sortie_full_NOK_WSP_tmp.NOK_RRP = sortie_full_chr_rrp.NOK_RRP ;
sortie_full_NOK_WSP_tmp.NOK_WSP = sortie_full_chr_rrp.NOK_WSP ;
sortie_full_NOK_WSP_tmp.DKK_RRP = sortie_full_chr_rrp.DKK_RRP ;
sortie_full_NOK_WSP_tmp.DKK_WSP = sortie_full_chr_rrp.DKK_WSP ;
sortie_full_NOK_WSP_tmp.SEK_RRP = sortie_full_chr_rrp.SEK_RRP ;
sortie_full_NOK_WSP_tmp.SEK_WSP = sortie_full_chr_rrp.SEK_WSP ;
sortie_full_NOK_WSP_tmp.EUR_FINN_RRP = sortie_full_chr_rrp.EUR_FINN_RRP ;
sortie_full_NOK_WSP_tmp.EUR_FINN_WSP = sortie_full_chr_rrp.EUR_FINN_WSP ;
sortie_full_NOK_WSP_tmp.FABRICATION = sortie_full_chr_rrp.FABRICATION ;
sortie_full_NOK_WSP_tmp.COO = sortie_full_chr_rrp.COO ;
sortie_full_NOK_WSP_tmp.CUSTOM_TARIFF_CODE = sortie_full_chr_rrp.CUSTOM_TARIFF_CODE ;
sortie_full_NOK_WSP_tmp.UPC = sortie_full_chr_rrp.UPC ;
sortie_full_NOK_WSP_tmp.SMU_TYPE = sortie_full_chr_rrp.SMU_TYPE ;
sortie_full_NOK_WSP_tmp.LABELD365 = sortie_full_chr_rrp.LABELD365 ;
sortie_full_NOK_WSP = sortie_full_NOK_WSP_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_27 = false;










 


	tos_count_tMap_27++;

/**
 * [tMap_27 main ] stop
 */
	
	/**
	 * [tMap_27 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_27";

	

 



/**
 * [tMap_27 process_data_begin ] stop
 */
// Start of branch "copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0"
if(copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0 != null) { 



	
	/**
	 * [tUniqRow_24 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_24";

	
row55 = null;			
if(copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.TRADEAGREEMENTJOURNALNUMBER == null){
	finder_tUniqRow_24.TRADEAGREEMENTJOURNALNUMBER = null;
}else{
	finder_tUniqRow_24.TRADEAGREEMENTJOURNALNUMBER = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.TRADEAGREEMENTJOURNALNUMBER.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.ITEMNUMBER == null){
	finder_tUniqRow_24.ITEMNUMBER = null;
}else{
	finder_tUniqRow_24.ITEMNUMBER = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.ITEMNUMBER.toLowerCase();
}
finder_tUniqRow_24.PRICE = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRICE;
if(copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRICECURRENCYCODE == null){
	finder_tUniqRow_24.PRICECURRENCYCODE = null;
}else{
	finder_tUniqRow_24.PRICECURRENCYCODE = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRICECURRENCYCODE.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRICECUSTOMERGROUPCODE == null){
	finder_tUniqRow_24.PRICECUSTOMERGROUPCODE = null;
}else{
	finder_tUniqRow_24.PRICECUSTOMERGROUPCODE = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTCOLORID == null){
	finder_tUniqRow_24.PRODUCTCOLORID = null;
}else{
	finder_tUniqRow_24.PRODUCTCOLORID = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTCOLORID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTSIZEID == null){
	finder_tUniqRow_24.PRODUCTSIZEID = null;
}else{
	finder_tUniqRow_24.PRODUCTSIZEID = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTSIZEID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTSTYLEID == null){
	finder_tUniqRow_24.PRODUCTSTYLEID = null;
}else{
	finder_tUniqRow_24.PRODUCTSTYLEID = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTSTYLEID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.QUANTITYUNITSYMBOL == null){
	finder_tUniqRow_24.QUANTITYUNITSYMBOL = null;
}else{
	finder_tUniqRow_24.QUANTITYUNITSYMBOL = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.QUANTITYUNITSYMBOL.toLowerCase();
}	
finder_tUniqRow_24.hashCodeDirty = true;
if (!keystUniqRow_24.contains(finder_tUniqRow_24)) {
		KeyStruct_tUniqRow_24 new_tUniqRow_24 = new KeyStruct_tUniqRow_24();

		
if(copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.TRADEAGREEMENTJOURNALNUMBER == null){
	new_tUniqRow_24.TRADEAGREEMENTJOURNALNUMBER = null;
}else{
	new_tUniqRow_24.TRADEAGREEMENTJOURNALNUMBER = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.TRADEAGREEMENTJOURNALNUMBER.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.ITEMNUMBER == null){
	new_tUniqRow_24.ITEMNUMBER = null;
}else{
	new_tUniqRow_24.ITEMNUMBER = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.ITEMNUMBER.toLowerCase();
}
new_tUniqRow_24.PRICE = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRICE;
if(copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRICECURRENCYCODE == null){
	new_tUniqRow_24.PRICECURRENCYCODE = null;
}else{
	new_tUniqRow_24.PRICECURRENCYCODE = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRICECURRENCYCODE.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRICECUSTOMERGROUPCODE == null){
	new_tUniqRow_24.PRICECUSTOMERGROUPCODE = null;
}else{
	new_tUniqRow_24.PRICECUSTOMERGROUPCODE = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTCOLORID == null){
	new_tUniqRow_24.PRODUCTCOLORID = null;
}else{
	new_tUniqRow_24.PRODUCTCOLORID = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTCOLORID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTSIZEID == null){
	new_tUniqRow_24.PRODUCTSIZEID = null;
}else{
	new_tUniqRow_24.PRODUCTSIZEID = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTSIZEID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTSTYLEID == null){
	new_tUniqRow_24.PRODUCTSTYLEID = null;
}else{
	new_tUniqRow_24.PRODUCTSTYLEID = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTSTYLEID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.QUANTITYUNITSYMBOL == null){
	new_tUniqRow_24.QUANTITYUNITSYMBOL = null;
}else{
	new_tUniqRow_24.QUANTITYUNITSYMBOL = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.QUANTITYUNITSYMBOL.toLowerCase();
}
		
		keystUniqRow_24.add(new_tUniqRow_24);if(row55 == null){ 
	
	row55 = new row55Struct();
}row55.TRADEAGREEMENTJOURNALNUMBER = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.TRADEAGREEMENTJOURNALNUMBER;			row55.ITEMNUMBER = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.ITEMNUMBER;			row55.PRICE = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRICE;			row55.PRICECURRENCYCODE = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRICECURRENCYCODE;			row55.PRICECUSTOMERGROUPCODE = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRICECUSTOMERGROUPCODE;			row55.PRODUCTCOLORID = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTCOLORID;			row55.PRODUCTSIZEID = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTSIZEID;			row55.PRODUCTSTYLEID = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTSTYLEID;			row55.QUANTITYUNITSYMBOL = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.QUANTITYUNITSYMBOL;			row55.SEASON = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.SEASON;			row55.COUNTRY = copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.COUNTRY;					
		nb_uniques_tUniqRow_24++;
	} else {
	  nb_duplicates_tUniqRow_24++;
	}

 


	tos_count_tUniqRow_24++;

/**
 * [tUniqRow_24 main ] stop
 */
	
	/**
	 * [tUniqRow_24 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_24";

	

 



/**
 * [tUniqRow_24 process_data_begin ] stop
 */
// Start of branch "row55"
if(row55 != null) { 



	
	/**
	 * [tFilterRow_8 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_8";

	

          row56 = null;
    Operator_tFilterRow_8 ope_tFilterRow_8 = new Operator_tFilterRow_8("||");
            ope_tFilterRow_8.matches((row55.PRICE == null? false : row55.PRICE.compareTo(ParserUtils.parseTo_Double(String.valueOf(0))) > 0)
                           , "PRICE.compareTo(0) > 0 failed");
		 	
            ope_tFilterRow_8.matches((row55.PRODUCTSTYLEID == null? false : row55.PRODUCTSTYLEID.compareTo("SMS") == 0)
                           , "PRODUCTSTYLEID.compareTo(\"SMS\") == 0 failed");
    
    if (ope_tFilterRow_8.getMatchFlag()) {
              if(row56 == null){ 
                row56 = new row56Struct();
              }
               row56.TRADEAGREEMENTJOURNALNUMBER = row55.TRADEAGREEMENTJOURNALNUMBER;
               row56.ITEMNUMBER = row55.ITEMNUMBER;
               row56.PRICE = row55.PRICE;
               row56.PRICECURRENCYCODE = row55.PRICECURRENCYCODE;
               row56.PRICECUSTOMERGROUPCODE = row55.PRICECUSTOMERGROUPCODE;
               row56.PRODUCTCOLORID = row55.PRODUCTCOLORID;
               row56.PRODUCTSIZEID = row55.PRODUCTSIZEID;
               row56.PRODUCTSTYLEID = row55.PRODUCTSTYLEID;
               row56.QUANTITYUNITSYMBOL = row55.QUANTITYUNITSYMBOL;
               row56.SEASON = row55.SEASON;
               row56.COUNTRY = row55.COUNTRY;    
      nb_line_ok_tFilterRow_8++;
    } else {
      nb_line_reject_tFilterRow_8++;
    }

nb_line_tFilterRow_8++;

 


	tos_count_tFilterRow_8++;

/**
 * [tFilterRow_8 main ] stop
 */
	
	/**
	 * [tFilterRow_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_8";

	

 



/**
 * [tFilterRow_8 process_data_begin ] stop
 */
// Start of branch "row56"
if(row56 != null) { 



	
	/**
	 * [tHashOutput_15 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_15";

	



    
		row56Struct oneRow_tHashOutput_15 = new row56Struct();
				
					oneRow_tHashOutput_15.TRADEAGREEMENTJOURNALNUMBER = row56.TRADEAGREEMENTJOURNALNUMBER;
					oneRow_tHashOutput_15.ITEMNUMBER = row56.ITEMNUMBER;
					oneRow_tHashOutput_15.PRICE = row56.PRICE;
					oneRow_tHashOutput_15.PRICECURRENCYCODE = row56.PRICECURRENCYCODE;
					oneRow_tHashOutput_15.PRICECUSTOMERGROUPCODE = row56.PRICECUSTOMERGROUPCODE;
					oneRow_tHashOutput_15.PRODUCTCOLORID = row56.PRODUCTCOLORID;
					oneRow_tHashOutput_15.PRODUCTSIZEID = row56.PRODUCTSIZEID;
					oneRow_tHashOutput_15.PRODUCTSTYLEID = row56.PRODUCTSTYLEID;
					oneRow_tHashOutput_15.QUANTITYUNITSYMBOL = row56.QUANTITYUNITSYMBOL;
					oneRow_tHashOutput_15.SEASON = row56.SEASON;
					oneRow_tHashOutput_15.COUNTRY = row56.COUNTRY;
		
        tHashFile_tHashOutput_15.put(oneRow_tHashOutput_15);
        nb_line_tHashOutput_15 ++;
 


	tos_count_tHashOutput_15++;

/**
 * [tHashOutput_15 main ] stop
 */
	
	/**
	 * [tHashOutput_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_15";

	

 



/**
 * [tHashOutput_15 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_15";

	

 



/**
 * [tHashOutput_15 process_data_end ] stop
 */

} // End of branch "row56"




	
	/**
	 * [tFilterRow_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_8";

	

 



/**
 * [tFilterRow_8 process_data_end ] stop
 */

} // End of branch "row55"




	
	/**
	 * [tUniqRow_24 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_24";

	

 



/**
 * [tUniqRow_24 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0"




// Start of branch "sortie_full_NOK_WSP"
if(sortie_full_NOK_WSP != null) { 



	
	/**
	 * [tMap_28 main ] start
	 */

	

	
	
	currentComponent="tMap_28";

	

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_28 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_28 = false;
		  boolean mainRowRejected_tMap_28 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_28__Struct Var = Var__tMap_28;// ###############################
        // ###############################
        // # Output tables

copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0 = null;
sortie_full_nok_rrp = null;


// # Output table : 'copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0'
copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_tmp.TRADEAGREEMENTJOURNALNUMBER = "HBE1-" + globalMap.get("SalesJournalNumber");
copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_tmp.ITEMNUMBER = sortie_full_NOK_WSP.STYLE ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_tmp.PRICE = sortie_full_NOK_WSP.NOK_RRP == null ? 0 : Mathematical.REAL(sortie_full_NOK_WSP.NOK_RRP .replaceAll(",", ".") ) ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_tmp.PRICECURRENCYCODE = "NOK";
copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_tmp.PRICECUSTOMERGROUPCODE = "RRP";
copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_tmp.PRODUCTCOLORID = sortie_full_NOK_WSP.COLOR ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_tmp.PRODUCTSIZEID = sortie_full_NOK_WSP.SIZE ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_tmp.PRODUCTSTYLEID = sortie_full_NOK_WSP.LABELD365 ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_tmp.QUANTITYUNITSYMBOL = "PCE";
copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_tmp.SEASON = sortie_full_NOK_WSP.SEASON ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_tmp.COUNTRY = "";
copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0 = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_tmp;

// # Output table : 'sortie_full_nok_rrp'
sortie_full_nok_rrp_tmp.BRAND = sortie_full_NOK_WSP.BRAND ;
sortie_full_nok_rrp_tmp.SEASON = sortie_full_NOK_WSP.SEASON ;
sortie_full_nok_rrp_tmp.CATEGORY = sortie_full_NOK_WSP.CATEGORY ;
sortie_full_nok_rrp_tmp.REF = sortie_full_NOK_WSP.REF ;
sortie_full_nok_rrp_tmp.DESCRIPTION = sortie_full_NOK_WSP.DESCRIPTION ;
sortie_full_nok_rrp_tmp.STYLE = sortie_full_NOK_WSP.STYLE ;
sortie_full_nok_rrp_tmp.COLOR = sortie_full_NOK_WSP.COLOR ;
sortie_full_nok_rrp_tmp.FASHION = sortie_full_NOK_WSP.FASHION ;
sortie_full_nok_rrp_tmp.STYLECOLORLABEL = sortie_full_NOK_WSP.STYLECOLORLABEL ;
sortie_full_nok_rrp_tmp.COLORNAME = sortie_full_NOK_WSP.COLORNAME ;
sortie_full_nok_rrp_tmp.LBL = sortie_full_NOK_WSP.LBL ;
sortie_full_nok_rrp_tmp.STYLE_COLOR = sortie_full_NOK_WSP.STYLE_COLOR ;
sortie_full_nok_rrp_tmp.GENDER = sortie_full_NOK_WSP.GENDER ;
sortie_full_nok_rrp_tmp.AGE_RANGE = sortie_full_NOK_WSP.AGE_RANGE ;
sortie_full_nok_rrp_tmp.SIZE_RANGE = sortie_full_NOK_WSP.SIZE_RANGE ;
sortie_full_nok_rrp_tmp.SIZE = sortie_full_NOK_WSP.SIZE ;
sortie_full_nok_rrp_tmp.US_SIZE = sortie_full_NOK_WSP.US_SIZE ;
sortie_full_nok_rrp_tmp.CM_SIZE = sortie_full_NOK_WSP.CM_SIZE ;
sortie_full_nok_rrp_tmp.PRODUCT = sortie_full_NOK_WSP.PRODUCT ;
sortie_full_nok_rrp_tmp.PRODUCT_STATUS = sortie_full_NOK_WSP.PRODUCT_STATUS ;
sortie_full_nok_rrp_tmp.PRODUCT_TIER = sortie_full_NOK_WSP.PRODUCT_TIER ;
sortie_full_nok_rrp_tmp.ACCT_EXCLUS = sortie_full_NOK_WSP.ACCT_EXCLUS ;
sortie_full_nok_rrp_tmp.SIZE_RATIO_SPLIT = sortie_full_NOK_WSP.SIZE_RATIO_SPLIT ;
sortie_full_nok_rrp_tmp.REC_SIZE_SPLIT = sortie_full_NOK_WSP.REC_SIZE_SPLIT ;
sortie_full_nok_rrp_tmp.CARTON_QTY = sortie_full_NOK_WSP.CARTON_QTY ;
sortie_full_nok_rrp_tmp.ATTRIBUTE = sortie_full_NOK_WSP.ATTRIBUTE ;
sortie_full_nok_rrp_tmp.UNITS = sortie_full_NOK_WSP.UNITS ;
sortie_full_nok_rrp_tmp.EUR_RRP = sortie_full_NOK_WSP.EUR_RRP ;
sortie_full_nok_rrp_tmp.EUR_WSP = sortie_full_NOK_WSP.EUR_WSP ;
sortie_full_nok_rrp_tmp.GBP_RRP = sortie_full_NOK_WSP.GBP_RRP ;
sortie_full_nok_rrp_tmp.GBP_WSP = sortie_full_NOK_WSP.GBP_WSP ;
sortie_full_nok_rrp_tmp.CHF_RRP = sortie_full_NOK_WSP.CHF_RRP ;
sortie_full_nok_rrp_tmp.CHF_WSP = sortie_full_NOK_WSP.CHF_WSP ;
sortie_full_nok_rrp_tmp.NOK_RRP = sortie_full_NOK_WSP.NOK_RRP ;
sortie_full_nok_rrp_tmp.NOK_WSP = sortie_full_NOK_WSP.NOK_WSP ;
sortie_full_nok_rrp_tmp.DKK_RRP = sortie_full_NOK_WSP.DKK_RRP ;
sortie_full_nok_rrp_tmp.DKK_WSP = sortie_full_NOK_WSP.DKK_WSP ;
sortie_full_nok_rrp_tmp.SEK_RRP = sortie_full_NOK_WSP.SEK_RRP ;
sortie_full_nok_rrp_tmp.SEK_WSP = sortie_full_NOK_WSP.SEK_WSP ;
sortie_full_nok_rrp_tmp.EUR_FINN_RRP = sortie_full_NOK_WSP.EUR_FINN_RRP ;
sortie_full_nok_rrp_tmp.EUR_FINN_WSP = sortie_full_NOK_WSP.EUR_FINN_WSP ;
sortie_full_nok_rrp_tmp.FABRICATION = sortie_full_NOK_WSP.FABRICATION ;
sortie_full_nok_rrp_tmp.COO = sortie_full_NOK_WSP.COO ;
sortie_full_nok_rrp_tmp.CUSTOM_TARIFF_CODE = sortie_full_NOK_WSP.CUSTOM_TARIFF_CODE ;
sortie_full_nok_rrp_tmp.UPC = sortie_full_NOK_WSP.UPC ;
sortie_full_nok_rrp_tmp.SMU_TYPE = sortie_full_NOK_WSP.SMU_TYPE ;
sortie_full_nok_rrp_tmp.LABELD365 = sortie_full_NOK_WSP.LABELD365 ;
sortie_full_nok_rrp = sortie_full_nok_rrp_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_28 = false;










 


	tos_count_tMap_28++;

/**
 * [tMap_28 main ] stop
 */
	
	/**
	 * [tMap_28 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_28";

	

 



/**
 * [tMap_28 process_data_begin ] stop
 */
// Start of branch "copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0"
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0 != null) { 



	
	/**
	 * [tUniqRow_25 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_25";

	
row57 = null;			
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.TRADEAGREEMENTJOURNALNUMBER == null){
	finder_tUniqRow_25.TRADEAGREEMENTJOURNALNUMBER = null;
}else{
	finder_tUniqRow_25.TRADEAGREEMENTJOURNALNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.TRADEAGREEMENTJOURNALNUMBER.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.ITEMNUMBER == null){
	finder_tUniqRow_25.ITEMNUMBER = null;
}else{
	finder_tUniqRow_25.ITEMNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.ITEMNUMBER.toLowerCase();
}
finder_tUniqRow_25.PRICE = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRICE;
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRICECURRENCYCODE == null){
	finder_tUniqRow_25.PRICECURRENCYCODE = null;
}else{
	finder_tUniqRow_25.PRICECURRENCYCODE = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRICECURRENCYCODE.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRICECUSTOMERGROUPCODE == null){
	finder_tUniqRow_25.PRICECUSTOMERGROUPCODE = null;
}else{
	finder_tUniqRow_25.PRICECUSTOMERGROUPCODE = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTCOLORID == null){
	finder_tUniqRow_25.PRODUCTCOLORID = null;
}else{
	finder_tUniqRow_25.PRODUCTCOLORID = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTCOLORID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTSIZEID == null){
	finder_tUniqRow_25.PRODUCTSIZEID = null;
}else{
	finder_tUniqRow_25.PRODUCTSIZEID = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTSIZEID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTSTYLEID == null){
	finder_tUniqRow_25.PRODUCTSTYLEID = null;
}else{
	finder_tUniqRow_25.PRODUCTSTYLEID = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTSTYLEID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.QUANTITYUNITSYMBOL == null){
	finder_tUniqRow_25.QUANTITYUNITSYMBOL = null;
}else{
	finder_tUniqRow_25.QUANTITYUNITSYMBOL = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.QUANTITYUNITSYMBOL.toLowerCase();
}	
finder_tUniqRow_25.hashCodeDirty = true;
if (!keystUniqRow_25.contains(finder_tUniqRow_25)) {
		KeyStruct_tUniqRow_25 new_tUniqRow_25 = new KeyStruct_tUniqRow_25();

		
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.TRADEAGREEMENTJOURNALNUMBER == null){
	new_tUniqRow_25.TRADEAGREEMENTJOURNALNUMBER = null;
}else{
	new_tUniqRow_25.TRADEAGREEMENTJOURNALNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.TRADEAGREEMENTJOURNALNUMBER.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.ITEMNUMBER == null){
	new_tUniqRow_25.ITEMNUMBER = null;
}else{
	new_tUniqRow_25.ITEMNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.ITEMNUMBER.toLowerCase();
}
new_tUniqRow_25.PRICE = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRICE;
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRICECURRENCYCODE == null){
	new_tUniqRow_25.PRICECURRENCYCODE = null;
}else{
	new_tUniqRow_25.PRICECURRENCYCODE = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRICECURRENCYCODE.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRICECUSTOMERGROUPCODE == null){
	new_tUniqRow_25.PRICECUSTOMERGROUPCODE = null;
}else{
	new_tUniqRow_25.PRICECUSTOMERGROUPCODE = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTCOLORID == null){
	new_tUniqRow_25.PRODUCTCOLORID = null;
}else{
	new_tUniqRow_25.PRODUCTCOLORID = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTCOLORID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTSIZEID == null){
	new_tUniqRow_25.PRODUCTSIZEID = null;
}else{
	new_tUniqRow_25.PRODUCTSIZEID = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTSIZEID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTSTYLEID == null){
	new_tUniqRow_25.PRODUCTSTYLEID = null;
}else{
	new_tUniqRow_25.PRODUCTSTYLEID = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTSTYLEID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.QUANTITYUNITSYMBOL == null){
	new_tUniqRow_25.QUANTITYUNITSYMBOL = null;
}else{
	new_tUniqRow_25.QUANTITYUNITSYMBOL = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.QUANTITYUNITSYMBOL.toLowerCase();
}
		
		keystUniqRow_25.add(new_tUniqRow_25);if(row57 == null){ 
	
	row57 = new row57Struct();
}row57.TRADEAGREEMENTJOURNALNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.TRADEAGREEMENTJOURNALNUMBER;			row57.ITEMNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.ITEMNUMBER;			row57.PRICE = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRICE;			row57.PRICECURRENCYCODE = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRICECURRENCYCODE;			row57.PRICECUSTOMERGROUPCODE = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRICECUSTOMERGROUPCODE;			row57.PRODUCTCOLORID = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTCOLORID;			row57.PRODUCTSIZEID = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTSIZEID;			row57.PRODUCTSTYLEID = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.PRODUCTSTYLEID;			row57.QUANTITYUNITSYMBOL = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.QUANTITYUNITSYMBOL;			row57.SEASON = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.SEASON;			row57.COUNTRY = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0.COUNTRY;					
		nb_uniques_tUniqRow_25++;
	} else {
	  nb_duplicates_tUniqRow_25++;
	}

 


	tos_count_tUniqRow_25++;

/**
 * [tUniqRow_25 main ] stop
 */
	
	/**
	 * [tUniqRow_25 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_25";

	

 



/**
 * [tUniqRow_25 process_data_begin ] stop
 */
// Start of branch "row57"
if(row57 != null) { 



	
	/**
	 * [tFilterRow_9 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_9";

	

          row58 = null;
    Operator_tFilterRow_9 ope_tFilterRow_9 = new Operator_tFilterRow_9("||");
            ope_tFilterRow_9.matches((row57.PRICE == null? false : row57.PRICE.compareTo(ParserUtils.parseTo_Double(String.valueOf(0))) > 0)
                           , "PRICE.compareTo(0) > 0 failed");
		 	
            ope_tFilterRow_9.matches((row57.PRODUCTSTYLEID == null? false : row57.PRODUCTSTYLEID.compareTo("SMS") == 0)
                           , "PRODUCTSTYLEID.compareTo(\"SMS\") == 0 failed");
    
    if (ope_tFilterRow_9.getMatchFlag()) {
              if(row58 == null){ 
                row58 = new row58Struct();
              }
               row58.TRADEAGREEMENTJOURNALNUMBER = row57.TRADEAGREEMENTJOURNALNUMBER;
               row58.ITEMNUMBER = row57.ITEMNUMBER;
               row58.PRICE = row57.PRICE;
               row58.PRICECURRENCYCODE = row57.PRICECURRENCYCODE;
               row58.PRICECUSTOMERGROUPCODE = row57.PRICECUSTOMERGROUPCODE;
               row58.PRODUCTCOLORID = row57.PRODUCTCOLORID;
               row58.PRODUCTSIZEID = row57.PRODUCTSIZEID;
               row58.PRODUCTSTYLEID = row57.PRODUCTSTYLEID;
               row58.QUANTITYUNITSYMBOL = row57.QUANTITYUNITSYMBOL;
               row58.SEASON = row57.SEASON;
               row58.COUNTRY = row57.COUNTRY;    
      nb_line_ok_tFilterRow_9++;
    } else {
      nb_line_reject_tFilterRow_9++;
    }

nb_line_tFilterRow_9++;

 


	tos_count_tFilterRow_9++;

/**
 * [tFilterRow_9 main ] stop
 */
	
	/**
	 * [tFilterRow_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_9";

	

 



/**
 * [tFilterRow_9 process_data_begin ] stop
 */
// Start of branch "row58"
if(row58 != null) { 



	
	/**
	 * [tHashOutput_16 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_16";

	



    
		row58Struct oneRow_tHashOutput_16 = new row58Struct();
				
					oneRow_tHashOutput_16.TRADEAGREEMENTJOURNALNUMBER = row58.TRADEAGREEMENTJOURNALNUMBER;
					oneRow_tHashOutput_16.ITEMNUMBER = row58.ITEMNUMBER;
					oneRow_tHashOutput_16.PRICE = row58.PRICE;
					oneRow_tHashOutput_16.PRICECURRENCYCODE = row58.PRICECURRENCYCODE;
					oneRow_tHashOutput_16.PRICECUSTOMERGROUPCODE = row58.PRICECUSTOMERGROUPCODE;
					oneRow_tHashOutput_16.PRODUCTCOLORID = row58.PRODUCTCOLORID;
					oneRow_tHashOutput_16.PRODUCTSIZEID = row58.PRODUCTSIZEID;
					oneRow_tHashOutput_16.PRODUCTSTYLEID = row58.PRODUCTSTYLEID;
					oneRow_tHashOutput_16.QUANTITYUNITSYMBOL = row58.QUANTITYUNITSYMBOL;
					oneRow_tHashOutput_16.SEASON = row58.SEASON;
					oneRow_tHashOutput_16.COUNTRY = row58.COUNTRY;
		
        tHashFile_tHashOutput_16.put(oneRow_tHashOutput_16);
        nb_line_tHashOutput_16 ++;
 


	tos_count_tHashOutput_16++;

/**
 * [tHashOutput_16 main ] stop
 */
	
	/**
	 * [tHashOutput_16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_16";

	

 



/**
 * [tHashOutput_16 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_16 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_16";

	

 



/**
 * [tHashOutput_16 process_data_end ] stop
 */

} // End of branch "row58"




	
	/**
	 * [tFilterRow_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_9";

	

 



/**
 * [tFilterRow_9 process_data_end ] stop
 */

} // End of branch "row57"




	
	/**
	 * [tUniqRow_25 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_25";

	

 



/**
 * [tUniqRow_25 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0"




// Start of branch "sortie_full_nok_rrp"
if(sortie_full_nok_rrp != null) { 



	
	/**
	 * [tMap_29 main ] start
	 */

	

	
	
	currentComponent="tMap_29";

	

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_29 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_29 = false;
		  boolean mainRowRejected_tMap_29 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_29__Struct Var = Var__tMap_29;// ###############################
        // ###############################
        // # Output tables

copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0 = null;
sortie_full_DKK_RRP = null;


// # Output table : 'copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0'
copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_tmp.TRADEAGREEMENTJOURNALNUMBER = "HBE1-" + globalMap.get("SalesJournalNumber");
copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_tmp.ITEMNUMBER = sortie_full_nok_rrp.STYLE ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_tmp.PRICE = sortie_full_nok_rrp.DKK_WSP == null ? 0 : Mathematical.REAL(sortie_full_nok_rrp.DKK_WSP .replaceAll(",", ".") ) ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_tmp.PRICECURRENCYCODE = "DKK";
copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_tmp.PRICECUSTOMERGROUPCODE = "WSP";
copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_tmp.PRODUCTCOLORID = sortie_full_nok_rrp.COLOR ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_tmp.PRODUCTSIZEID = sortie_full_nok_rrp.SIZE ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_tmp.PRODUCTSTYLEID = sortie_full_nok_rrp.LABELD365 ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_tmp.QUANTITYUNITSYMBOL = "PCE";
copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_tmp.SEASON = sortie_full_nok_rrp.SEASON ;
copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_tmp.COUNTRY = "";
copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0 = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_tmp;

// # Output table : 'sortie_full_DKK_RRP'
sortie_full_DKK_RRP_tmp.BRAND = sortie_full_nok_rrp.BRAND ;
sortie_full_DKK_RRP_tmp.SEASON = sortie_full_nok_rrp.SEASON ;
sortie_full_DKK_RRP_tmp.CATEGORY = sortie_full_nok_rrp.CATEGORY ;
sortie_full_DKK_RRP_tmp.REF = sortie_full_nok_rrp.REF ;
sortie_full_DKK_RRP_tmp.DESCRIPTION = sortie_full_nok_rrp.DESCRIPTION ;
sortie_full_DKK_RRP_tmp.STYLE = sortie_full_nok_rrp.STYLE ;
sortie_full_DKK_RRP_tmp.COLOR = sortie_full_nok_rrp.COLOR ;
sortie_full_DKK_RRP_tmp.FASHION = sortie_full_nok_rrp.FASHION ;
sortie_full_DKK_RRP_tmp.STYLECOLORLABEL = sortie_full_nok_rrp.STYLECOLORLABEL ;
sortie_full_DKK_RRP_tmp.COLORNAME = sortie_full_nok_rrp.COLORNAME ;
sortie_full_DKK_RRP_tmp.LBL = sortie_full_nok_rrp.LBL ;
sortie_full_DKK_RRP_tmp.STYLE_COLOR = sortie_full_nok_rrp.STYLE_COLOR ;
sortie_full_DKK_RRP_tmp.GENDER = sortie_full_nok_rrp.GENDER ;
sortie_full_DKK_RRP_tmp.AGE_RANGE = sortie_full_nok_rrp.AGE_RANGE ;
sortie_full_DKK_RRP_tmp.SIZE_RANGE = sortie_full_nok_rrp.SIZE_RANGE ;
sortie_full_DKK_RRP_tmp.SIZE = sortie_full_nok_rrp.SIZE ;
sortie_full_DKK_RRP_tmp.US_SIZE = sortie_full_nok_rrp.US_SIZE ;
sortie_full_DKK_RRP_tmp.CM_SIZE = sortie_full_nok_rrp.CM_SIZE ;
sortie_full_DKK_RRP_tmp.PRODUCT = sortie_full_nok_rrp.PRODUCT ;
sortie_full_DKK_RRP_tmp.PRODUCT_STATUS = sortie_full_nok_rrp.PRODUCT_STATUS ;
sortie_full_DKK_RRP_tmp.PRODUCT_TIER = sortie_full_nok_rrp.PRODUCT_TIER ;
sortie_full_DKK_RRP_tmp.ACCT_EXCLUS = sortie_full_nok_rrp.ACCT_EXCLUS ;
sortie_full_DKK_RRP_tmp.SIZE_RATIO_SPLIT = sortie_full_nok_rrp.SIZE_RATIO_SPLIT ;
sortie_full_DKK_RRP_tmp.REC_SIZE_SPLIT = sortie_full_nok_rrp.REC_SIZE_SPLIT ;
sortie_full_DKK_RRP_tmp.CARTON_QTY = sortie_full_nok_rrp.CARTON_QTY ;
sortie_full_DKK_RRP_tmp.ATTRIBUTE = sortie_full_nok_rrp.ATTRIBUTE ;
sortie_full_DKK_RRP_tmp.UNITS = sortie_full_nok_rrp.UNITS ;
sortie_full_DKK_RRP_tmp.EUR_RRP = sortie_full_nok_rrp.EUR_RRP ;
sortie_full_DKK_RRP_tmp.EUR_WSP = sortie_full_nok_rrp.EUR_WSP ;
sortie_full_DKK_RRP_tmp.GBP_RRP = sortie_full_nok_rrp.GBP_RRP ;
sortie_full_DKK_RRP_tmp.GBP_WSP = sortie_full_nok_rrp.GBP_WSP ;
sortie_full_DKK_RRP_tmp.CHF_RRP = sortie_full_nok_rrp.CHF_RRP ;
sortie_full_DKK_RRP_tmp.CHF_WSP = sortie_full_nok_rrp.CHF_WSP ;
sortie_full_DKK_RRP_tmp.NOK_RRP = sortie_full_nok_rrp.NOK_RRP ;
sortie_full_DKK_RRP_tmp.NOK_WSP = sortie_full_nok_rrp.NOK_WSP ;
sortie_full_DKK_RRP_tmp.DKK_RRP = sortie_full_nok_rrp.DKK_RRP ;
sortie_full_DKK_RRP_tmp.DKK_WSP = sortie_full_nok_rrp.DKK_WSP ;
sortie_full_DKK_RRP_tmp.SEK_RRP = sortie_full_nok_rrp.SEK_RRP ;
sortie_full_DKK_RRP_tmp.SEK_WSP = sortie_full_nok_rrp.SEK_WSP ;
sortie_full_DKK_RRP_tmp.EUR_FINN_RRP = sortie_full_nok_rrp.EUR_FINN_RRP ;
sortie_full_DKK_RRP_tmp.EUR_FINN_WSP = sortie_full_nok_rrp.EUR_FINN_WSP ;
sortie_full_DKK_RRP_tmp.FABRICATION = sortie_full_nok_rrp.FABRICATION ;
sortie_full_DKK_RRP_tmp.COO = sortie_full_nok_rrp.COO ;
sortie_full_DKK_RRP_tmp.CUSTOM_TARIFF_CODE = sortie_full_nok_rrp.CUSTOM_TARIFF_CODE ;
sortie_full_DKK_RRP_tmp.UPC = sortie_full_nok_rrp.UPC ;
sortie_full_DKK_RRP_tmp.SMU_TYPE = sortie_full_nok_rrp.SMU_TYPE ;
sortie_full_DKK_RRP_tmp.LABELD365 = sortie_full_nok_rrp.LABELD365 ;
sortie_full_DKK_RRP = sortie_full_DKK_RRP_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_29 = false;










 


	tos_count_tMap_29++;

/**
 * [tMap_29 main ] stop
 */
	
	/**
	 * [tMap_29 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_29";

	

 



/**
 * [tMap_29 process_data_begin ] stop
 */
// Start of branch "copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0"
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0 != null) { 



	
	/**
	 * [tUniqRow_26 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_26";

	
row61 = null;			
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.TRADEAGREEMENTJOURNALNUMBER == null){
	finder_tUniqRow_26.TRADEAGREEMENTJOURNALNUMBER = null;
}else{
	finder_tUniqRow_26.TRADEAGREEMENTJOURNALNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.TRADEAGREEMENTJOURNALNUMBER.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.ITEMNUMBER == null){
	finder_tUniqRow_26.ITEMNUMBER = null;
}else{
	finder_tUniqRow_26.ITEMNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.ITEMNUMBER.toLowerCase();
}
finder_tUniqRow_26.PRICE = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRICE;
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRICECURRENCYCODE == null){
	finder_tUniqRow_26.PRICECURRENCYCODE = null;
}else{
	finder_tUniqRow_26.PRICECURRENCYCODE = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRICECURRENCYCODE.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRICECUSTOMERGROUPCODE == null){
	finder_tUniqRow_26.PRICECUSTOMERGROUPCODE = null;
}else{
	finder_tUniqRow_26.PRICECUSTOMERGROUPCODE = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTCOLORID == null){
	finder_tUniqRow_26.PRODUCTCOLORID = null;
}else{
	finder_tUniqRow_26.PRODUCTCOLORID = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTCOLORID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTSIZEID == null){
	finder_tUniqRow_26.PRODUCTSIZEID = null;
}else{
	finder_tUniqRow_26.PRODUCTSIZEID = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTSIZEID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTSTYLEID == null){
	finder_tUniqRow_26.PRODUCTSTYLEID = null;
}else{
	finder_tUniqRow_26.PRODUCTSTYLEID = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTSTYLEID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.QUANTITYUNITSYMBOL == null){
	finder_tUniqRow_26.QUANTITYUNITSYMBOL = null;
}else{
	finder_tUniqRow_26.QUANTITYUNITSYMBOL = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.QUANTITYUNITSYMBOL.toLowerCase();
}	
finder_tUniqRow_26.hashCodeDirty = true;
if (!keystUniqRow_26.contains(finder_tUniqRow_26)) {
		KeyStruct_tUniqRow_26 new_tUniqRow_26 = new KeyStruct_tUniqRow_26();

		
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.TRADEAGREEMENTJOURNALNUMBER == null){
	new_tUniqRow_26.TRADEAGREEMENTJOURNALNUMBER = null;
}else{
	new_tUniqRow_26.TRADEAGREEMENTJOURNALNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.TRADEAGREEMENTJOURNALNUMBER.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.ITEMNUMBER == null){
	new_tUniqRow_26.ITEMNUMBER = null;
}else{
	new_tUniqRow_26.ITEMNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.ITEMNUMBER.toLowerCase();
}
new_tUniqRow_26.PRICE = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRICE;
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRICECURRENCYCODE == null){
	new_tUniqRow_26.PRICECURRENCYCODE = null;
}else{
	new_tUniqRow_26.PRICECURRENCYCODE = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRICECURRENCYCODE.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRICECUSTOMERGROUPCODE == null){
	new_tUniqRow_26.PRICECUSTOMERGROUPCODE = null;
}else{
	new_tUniqRow_26.PRICECUSTOMERGROUPCODE = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTCOLORID == null){
	new_tUniqRow_26.PRODUCTCOLORID = null;
}else{
	new_tUniqRow_26.PRODUCTCOLORID = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTCOLORID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTSIZEID == null){
	new_tUniqRow_26.PRODUCTSIZEID = null;
}else{
	new_tUniqRow_26.PRODUCTSIZEID = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTSIZEID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTSTYLEID == null){
	new_tUniqRow_26.PRODUCTSTYLEID = null;
}else{
	new_tUniqRow_26.PRODUCTSTYLEID = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTSTYLEID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.QUANTITYUNITSYMBOL == null){
	new_tUniqRow_26.QUANTITYUNITSYMBOL = null;
}else{
	new_tUniqRow_26.QUANTITYUNITSYMBOL = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.QUANTITYUNITSYMBOL.toLowerCase();
}
		
		keystUniqRow_26.add(new_tUniqRow_26);if(row61 == null){ 
	
	row61 = new row61Struct();
}row61.TRADEAGREEMENTJOURNALNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.TRADEAGREEMENTJOURNALNUMBER;			row61.ITEMNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.ITEMNUMBER;			row61.PRICE = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRICE;			row61.PRICECURRENCYCODE = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRICECURRENCYCODE;			row61.PRICECUSTOMERGROUPCODE = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRICECUSTOMERGROUPCODE;			row61.PRODUCTCOLORID = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTCOLORID;			row61.PRODUCTSIZEID = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTSIZEID;			row61.PRODUCTSTYLEID = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTSTYLEID;			row61.QUANTITYUNITSYMBOL = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.QUANTITYUNITSYMBOL;			row61.SEASON = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.SEASON;			row61.COUNTRY = copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.COUNTRY;					
		nb_uniques_tUniqRow_26++;
	} else {
	  nb_duplicates_tUniqRow_26++;
	}

 


	tos_count_tUniqRow_26++;

/**
 * [tUniqRow_26 main ] stop
 */
	
	/**
	 * [tUniqRow_26 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_26";

	

 



/**
 * [tUniqRow_26 process_data_begin ] stop
 */
// Start of branch "row61"
if(row61 != null) { 



	
	/**
	 * [tFilterRow_10 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_10";

	

          row62 = null;
    Operator_tFilterRow_10 ope_tFilterRow_10 = new Operator_tFilterRow_10("||");
            ope_tFilterRow_10.matches((row61.PRICE == null? false : row61.PRICE.compareTo(ParserUtils.parseTo_Double(String.valueOf(0))) > 0)
                           , "PRICE.compareTo(0) > 0 failed");
		 	
            ope_tFilterRow_10.matches((row61.PRODUCTSTYLEID == null? false : row61.PRODUCTSTYLEID.compareTo("SMS") == 0)
                           , "PRODUCTSTYLEID.compareTo(\"SMS\") == 0 failed");
    
    if (ope_tFilterRow_10.getMatchFlag()) {
              if(row62 == null){ 
                row62 = new row62Struct();
              }
               row62.TRADEAGREEMENTJOURNALNUMBER = row61.TRADEAGREEMENTJOURNALNUMBER;
               row62.ITEMNUMBER = row61.ITEMNUMBER;
               row62.PRICE = row61.PRICE;
               row62.PRICECURRENCYCODE = row61.PRICECURRENCYCODE;
               row62.PRICECUSTOMERGROUPCODE = row61.PRICECUSTOMERGROUPCODE;
               row62.PRODUCTCOLORID = row61.PRODUCTCOLORID;
               row62.PRODUCTSIZEID = row61.PRODUCTSIZEID;
               row62.PRODUCTSTYLEID = row61.PRODUCTSTYLEID;
               row62.QUANTITYUNITSYMBOL = row61.QUANTITYUNITSYMBOL;
               row62.SEASON = row61.SEASON;
               row62.COUNTRY = row61.COUNTRY;    
      nb_line_ok_tFilterRow_10++;
    } else {
      nb_line_reject_tFilterRow_10++;
    }

nb_line_tFilterRow_10++;

 


	tos_count_tFilterRow_10++;

/**
 * [tFilterRow_10 main ] stop
 */
	
	/**
	 * [tFilterRow_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_10";

	

 



/**
 * [tFilterRow_10 process_data_begin ] stop
 */
// Start of branch "row62"
if(row62 != null) { 



	
	/**
	 * [tHashOutput_17 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_17";

	



    
		row62Struct oneRow_tHashOutput_17 = new row62Struct();
				
					oneRow_tHashOutput_17.TRADEAGREEMENTJOURNALNUMBER = row62.TRADEAGREEMENTJOURNALNUMBER;
					oneRow_tHashOutput_17.ITEMNUMBER = row62.ITEMNUMBER;
					oneRow_tHashOutput_17.PRICE = row62.PRICE;
					oneRow_tHashOutput_17.PRICECURRENCYCODE = row62.PRICECURRENCYCODE;
					oneRow_tHashOutput_17.PRICECUSTOMERGROUPCODE = row62.PRICECUSTOMERGROUPCODE;
					oneRow_tHashOutput_17.PRODUCTCOLORID = row62.PRODUCTCOLORID;
					oneRow_tHashOutput_17.PRODUCTSIZEID = row62.PRODUCTSIZEID;
					oneRow_tHashOutput_17.PRODUCTSTYLEID = row62.PRODUCTSTYLEID;
					oneRow_tHashOutput_17.QUANTITYUNITSYMBOL = row62.QUANTITYUNITSYMBOL;
					oneRow_tHashOutput_17.SEASON = row62.SEASON;
					oneRow_tHashOutput_17.COUNTRY = row62.COUNTRY;
		
        tHashFile_tHashOutput_17.put(oneRow_tHashOutput_17);
        nb_line_tHashOutput_17 ++;
 


	tos_count_tHashOutput_17++;

/**
 * [tHashOutput_17 main ] stop
 */
	
	/**
	 * [tHashOutput_17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_17";

	

 



/**
 * [tHashOutput_17 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_17 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_17";

	

 



/**
 * [tHashOutput_17 process_data_end ] stop
 */

} // End of branch "row62"




	
	/**
	 * [tFilterRow_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_10";

	

 



/**
 * [tFilterRow_10 process_data_end ] stop
 */

} // End of branch "row61"




	
	/**
	 * [tUniqRow_26 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_26";

	

 



/**
 * [tUniqRow_26 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0"




// Start of branch "sortie_full_DKK_RRP"
if(sortie_full_DKK_RRP != null) { 



	
	/**
	 * [tMap_30 main ] start
	 */

	

	
	
	currentComponent="tMap_30";

	

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_30 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_30 = false;
		  boolean mainRowRejected_tMap_30 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_30__Struct Var = Var__tMap_30;// ###############################
        // ###############################
        // # Output tables

copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0 = null;
sortie_full_DKK_WSP = null;


// # Output table : 'copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0'
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_tmp.TRADEAGREEMENTJOURNALNUMBER = "HBE1-" + globalMap.get("SalesJournalNumber");
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_tmp.ITEMNUMBER = sortie_full_DKK_RRP.STYLE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_tmp.PRICE = sortie_full_DKK_RRP.DKK_RRP == null ? 0 : Mathematical.REAL(sortie_full_DKK_RRP.DKK_RRP .replaceAll(",", ".") ) ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_tmp.PRICECURRENCYCODE = "DKK";
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_tmp.PRICECUSTOMERGROUPCODE = "RRP";
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_tmp.PRODUCTCOLORID = sortie_full_DKK_RRP.COLOR ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_tmp.PRODUCTSIZEID = sortie_full_DKK_RRP.SIZE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_tmp.PRODUCTSTYLEID = sortie_full_DKK_RRP.LABELD365 ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_tmp.QUANTITYUNITSYMBOL = "PCE";
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_tmp.SEASON = sortie_full_DKK_RRP.SEASON ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_tmp.COUNTRY = "";
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0 = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_tmp;

// # Output table : 'sortie_full_DKK_WSP'
sortie_full_DKK_WSP_tmp.BRAND = sortie_full_DKK_RRP.BRAND ;
sortie_full_DKK_WSP_tmp.SEASON = sortie_full_DKK_RRP.SEASON ;
sortie_full_DKK_WSP_tmp.CATEGORY = sortie_full_DKK_RRP.CATEGORY ;
sortie_full_DKK_WSP_tmp.REF = sortie_full_DKK_RRP.REF ;
sortie_full_DKK_WSP_tmp.DESCRIPTION = sortie_full_DKK_RRP.DESCRIPTION ;
sortie_full_DKK_WSP_tmp.STYLE = sortie_full_DKK_RRP.STYLE ;
sortie_full_DKK_WSP_tmp.COLOR = sortie_full_DKK_RRP.COLOR ;
sortie_full_DKK_WSP_tmp.FASHION = sortie_full_DKK_RRP.FASHION ;
sortie_full_DKK_WSP_tmp.STYLECOLORLABEL = sortie_full_DKK_RRP.STYLECOLORLABEL ;
sortie_full_DKK_WSP_tmp.COLORNAME = sortie_full_DKK_RRP.COLORNAME ;
sortie_full_DKK_WSP_tmp.LBL = sortie_full_DKK_RRP.LBL ;
sortie_full_DKK_WSP_tmp.STYLE_COLOR = sortie_full_DKK_RRP.STYLE_COLOR ;
sortie_full_DKK_WSP_tmp.GENDER = sortie_full_DKK_RRP.GENDER ;
sortie_full_DKK_WSP_tmp.AGE_RANGE = sortie_full_DKK_RRP.AGE_RANGE ;
sortie_full_DKK_WSP_tmp.SIZE_RANGE = sortie_full_DKK_RRP.SIZE_RANGE ;
sortie_full_DKK_WSP_tmp.SIZE = sortie_full_DKK_RRP.SIZE ;
sortie_full_DKK_WSP_tmp.US_SIZE = sortie_full_DKK_RRP.US_SIZE ;
sortie_full_DKK_WSP_tmp.CM_SIZE = sortie_full_DKK_RRP.CM_SIZE ;
sortie_full_DKK_WSP_tmp.PRODUCT = sortie_full_DKK_RRP.PRODUCT ;
sortie_full_DKK_WSP_tmp.PRODUCT_STATUS = sortie_full_DKK_RRP.PRODUCT_STATUS ;
sortie_full_DKK_WSP_tmp.PRODUCT_TIER = sortie_full_DKK_RRP.PRODUCT_TIER ;
sortie_full_DKK_WSP_tmp.ACCT_EXCLUS = sortie_full_DKK_RRP.ACCT_EXCLUS ;
sortie_full_DKK_WSP_tmp.SIZE_RATIO_SPLIT = sortie_full_DKK_RRP.SIZE_RATIO_SPLIT ;
sortie_full_DKK_WSP_tmp.REC_SIZE_SPLIT = sortie_full_DKK_RRP.REC_SIZE_SPLIT ;
sortie_full_DKK_WSP_tmp.CARTON_QTY = sortie_full_DKK_RRP.CARTON_QTY ;
sortie_full_DKK_WSP_tmp.ATTRIBUTE = sortie_full_DKK_RRP.ATTRIBUTE ;
sortie_full_DKK_WSP_tmp.UNITS = sortie_full_DKK_RRP.UNITS ;
sortie_full_DKK_WSP_tmp.EUR_RRP = sortie_full_DKK_RRP.EUR_RRP ;
sortie_full_DKK_WSP_tmp.EUR_WSP = sortie_full_DKK_RRP.EUR_WSP ;
sortie_full_DKK_WSP_tmp.GBP_RRP = sortie_full_DKK_RRP.GBP_RRP ;
sortie_full_DKK_WSP_tmp.GBP_WSP = sortie_full_DKK_RRP.GBP_WSP ;
sortie_full_DKK_WSP_tmp.CHF_RRP = sortie_full_DKK_RRP.CHF_RRP ;
sortie_full_DKK_WSP_tmp.CHF_WSP = sortie_full_DKK_RRP.CHF_WSP ;
sortie_full_DKK_WSP_tmp.NOK_RRP = sortie_full_DKK_RRP.NOK_RRP ;
sortie_full_DKK_WSP_tmp.NOK_WSP = sortie_full_DKK_RRP.NOK_WSP ;
sortie_full_DKK_WSP_tmp.DKK_RRP = sortie_full_DKK_RRP.DKK_RRP ;
sortie_full_DKK_WSP_tmp.DKK_WSP = sortie_full_DKK_RRP.DKK_WSP ;
sortie_full_DKK_WSP_tmp.SEK_RRP = sortie_full_DKK_RRP.SEK_RRP ;
sortie_full_DKK_WSP_tmp.SEK_WSP = sortie_full_DKK_RRP.SEK_WSP ;
sortie_full_DKK_WSP_tmp.EUR_FINN_RRP = sortie_full_DKK_RRP.EUR_FINN_RRP ;
sortie_full_DKK_WSP_tmp.EUR_FINN_WSP = sortie_full_DKK_RRP.EUR_FINN_WSP ;
sortie_full_DKK_WSP_tmp.FABRICATION = sortie_full_DKK_RRP.FABRICATION ;
sortie_full_DKK_WSP_tmp.COO = sortie_full_DKK_RRP.COO ;
sortie_full_DKK_WSP_tmp.CUSTOM_TARIFF_CODE = sortie_full_DKK_RRP.CUSTOM_TARIFF_CODE ;
sortie_full_DKK_WSP_tmp.UPC = sortie_full_DKK_RRP.UPC ;
sortie_full_DKK_WSP_tmp.SMU_TYPE = sortie_full_DKK_RRP.SMU_TYPE ;
sortie_full_DKK_WSP_tmp.LABELD365 = sortie_full_DKK_RRP.LABELD365 ;
sortie_full_DKK_WSP = sortie_full_DKK_WSP_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_30 = false;










 


	tos_count_tMap_30++;

/**
 * [tMap_30 main ] stop
 */
	
	/**
	 * [tMap_30 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_30";

	

 



/**
 * [tMap_30 process_data_begin ] stop
 */
// Start of branch "copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0"
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0 != null) { 



	
	/**
	 * [tUniqRow_27 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_27";

	
row64 = null;			
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.TRADEAGREEMENTJOURNALNUMBER == null){
	finder_tUniqRow_27.TRADEAGREEMENTJOURNALNUMBER = null;
}else{
	finder_tUniqRow_27.TRADEAGREEMENTJOURNALNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.TRADEAGREEMENTJOURNALNUMBER.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.ITEMNUMBER == null){
	finder_tUniqRow_27.ITEMNUMBER = null;
}else{
	finder_tUniqRow_27.ITEMNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.ITEMNUMBER.toLowerCase();
}
finder_tUniqRow_27.PRICE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRICE;
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRICECURRENCYCODE == null){
	finder_tUniqRow_27.PRICECURRENCYCODE = null;
}else{
	finder_tUniqRow_27.PRICECURRENCYCODE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRICECURRENCYCODE.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRICECUSTOMERGROUPCODE == null){
	finder_tUniqRow_27.PRICECUSTOMERGROUPCODE = null;
}else{
	finder_tUniqRow_27.PRICECUSTOMERGROUPCODE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTCOLORID == null){
	finder_tUniqRow_27.PRODUCTCOLORID = null;
}else{
	finder_tUniqRow_27.PRODUCTCOLORID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTCOLORID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTSIZEID == null){
	finder_tUniqRow_27.PRODUCTSIZEID = null;
}else{
	finder_tUniqRow_27.PRODUCTSIZEID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTSIZEID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTSTYLEID == null){
	finder_tUniqRow_27.PRODUCTSTYLEID = null;
}else{
	finder_tUniqRow_27.PRODUCTSTYLEID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTSTYLEID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.QUANTITYUNITSYMBOL == null){
	finder_tUniqRow_27.QUANTITYUNITSYMBOL = null;
}else{
	finder_tUniqRow_27.QUANTITYUNITSYMBOL = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.QUANTITYUNITSYMBOL.toLowerCase();
}	
finder_tUniqRow_27.hashCodeDirty = true;
if (!keystUniqRow_27.contains(finder_tUniqRow_27)) {
		KeyStruct_tUniqRow_27 new_tUniqRow_27 = new KeyStruct_tUniqRow_27();

		
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.TRADEAGREEMENTJOURNALNUMBER == null){
	new_tUniqRow_27.TRADEAGREEMENTJOURNALNUMBER = null;
}else{
	new_tUniqRow_27.TRADEAGREEMENTJOURNALNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.TRADEAGREEMENTJOURNALNUMBER.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.ITEMNUMBER == null){
	new_tUniqRow_27.ITEMNUMBER = null;
}else{
	new_tUniqRow_27.ITEMNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.ITEMNUMBER.toLowerCase();
}
new_tUniqRow_27.PRICE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRICE;
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRICECURRENCYCODE == null){
	new_tUniqRow_27.PRICECURRENCYCODE = null;
}else{
	new_tUniqRow_27.PRICECURRENCYCODE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRICECURRENCYCODE.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRICECUSTOMERGROUPCODE == null){
	new_tUniqRow_27.PRICECUSTOMERGROUPCODE = null;
}else{
	new_tUniqRow_27.PRICECUSTOMERGROUPCODE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTCOLORID == null){
	new_tUniqRow_27.PRODUCTCOLORID = null;
}else{
	new_tUniqRow_27.PRODUCTCOLORID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTCOLORID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTSIZEID == null){
	new_tUniqRow_27.PRODUCTSIZEID = null;
}else{
	new_tUniqRow_27.PRODUCTSIZEID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTSIZEID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTSTYLEID == null){
	new_tUniqRow_27.PRODUCTSTYLEID = null;
}else{
	new_tUniqRow_27.PRODUCTSTYLEID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTSTYLEID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.QUANTITYUNITSYMBOL == null){
	new_tUniqRow_27.QUANTITYUNITSYMBOL = null;
}else{
	new_tUniqRow_27.QUANTITYUNITSYMBOL = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.QUANTITYUNITSYMBOL.toLowerCase();
}
		
		keystUniqRow_27.add(new_tUniqRow_27);if(row64 == null){ 
	
	row64 = new row64Struct();
}row64.TRADEAGREEMENTJOURNALNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.TRADEAGREEMENTJOURNALNUMBER;			row64.ITEMNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.ITEMNUMBER;			row64.PRICE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRICE;			row64.PRICECURRENCYCODE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRICECURRENCYCODE;			row64.PRICECUSTOMERGROUPCODE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRICECUSTOMERGROUPCODE;			row64.PRODUCTCOLORID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTCOLORID;			row64.PRODUCTSIZEID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTSIZEID;			row64.PRODUCTSTYLEID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.PRODUCTSTYLEID;			row64.QUANTITYUNITSYMBOL = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.QUANTITYUNITSYMBOL;			row64.SEASON = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.SEASON;			row64.COUNTRY = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0.COUNTRY;					
		nb_uniques_tUniqRow_27++;
	} else {
	  nb_duplicates_tUniqRow_27++;
	}

 


	tos_count_tUniqRow_27++;

/**
 * [tUniqRow_27 main ] stop
 */
	
	/**
	 * [tUniqRow_27 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_27";

	

 



/**
 * [tUniqRow_27 process_data_begin ] stop
 */
// Start of branch "row64"
if(row64 != null) { 



	
	/**
	 * [tFilterRow_11 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_11";

	

          row63 = null;
    Operator_tFilterRow_11 ope_tFilterRow_11 = new Operator_tFilterRow_11("||");
            ope_tFilterRow_11.matches((row64.PRICE == null? false : row64.PRICE.compareTo(ParserUtils.parseTo_Double(String.valueOf(0))) > 0)
                           , "PRICE.compareTo(0) > 0 failed");
		 	
            ope_tFilterRow_11.matches((row64.PRODUCTSTYLEID == null? false : row64.PRODUCTSTYLEID.compareTo("SMS") == 0)
                           , "PRODUCTSTYLEID.compareTo(\"SMS\") == 0 failed");
    
    if (ope_tFilterRow_11.getMatchFlag()) {
              if(row63 == null){ 
                row63 = new row63Struct();
              }
               row63.TRADEAGREEMENTJOURNALNUMBER = row64.TRADEAGREEMENTJOURNALNUMBER;
               row63.ITEMNUMBER = row64.ITEMNUMBER;
               row63.PRICE = row64.PRICE;
               row63.PRICECURRENCYCODE = row64.PRICECURRENCYCODE;
               row63.PRICECUSTOMERGROUPCODE = row64.PRICECUSTOMERGROUPCODE;
               row63.PRODUCTCOLORID = row64.PRODUCTCOLORID;
               row63.PRODUCTSIZEID = row64.PRODUCTSIZEID;
               row63.PRODUCTSTYLEID = row64.PRODUCTSTYLEID;
               row63.QUANTITYUNITSYMBOL = row64.QUANTITYUNITSYMBOL;
               row63.SEASON = row64.SEASON;
               row63.COUNTRY = row64.COUNTRY;    
      nb_line_ok_tFilterRow_11++;
    } else {
      nb_line_reject_tFilterRow_11++;
    }

nb_line_tFilterRow_11++;

 


	tos_count_tFilterRow_11++;

/**
 * [tFilterRow_11 main ] stop
 */
	
	/**
	 * [tFilterRow_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_11";

	

 



/**
 * [tFilterRow_11 process_data_begin ] stop
 */
// Start of branch "row63"
if(row63 != null) { 



	
	/**
	 * [tHashOutput_18 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_18";

	



    
		row63Struct oneRow_tHashOutput_18 = new row63Struct();
				
					oneRow_tHashOutput_18.TRADEAGREEMENTJOURNALNUMBER = row63.TRADEAGREEMENTJOURNALNUMBER;
					oneRow_tHashOutput_18.ITEMNUMBER = row63.ITEMNUMBER;
					oneRow_tHashOutput_18.PRICE = row63.PRICE;
					oneRow_tHashOutput_18.PRICECURRENCYCODE = row63.PRICECURRENCYCODE;
					oneRow_tHashOutput_18.PRICECUSTOMERGROUPCODE = row63.PRICECUSTOMERGROUPCODE;
					oneRow_tHashOutput_18.PRODUCTCOLORID = row63.PRODUCTCOLORID;
					oneRow_tHashOutput_18.PRODUCTSIZEID = row63.PRODUCTSIZEID;
					oneRow_tHashOutput_18.PRODUCTSTYLEID = row63.PRODUCTSTYLEID;
					oneRow_tHashOutput_18.QUANTITYUNITSYMBOL = row63.QUANTITYUNITSYMBOL;
					oneRow_tHashOutput_18.SEASON = row63.SEASON;
					oneRow_tHashOutput_18.COUNTRY = row63.COUNTRY;
		
        tHashFile_tHashOutput_18.put(oneRow_tHashOutput_18);
        nb_line_tHashOutput_18 ++;
 


	tos_count_tHashOutput_18++;

/**
 * [tHashOutput_18 main ] stop
 */
	
	/**
	 * [tHashOutput_18 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_18";

	

 



/**
 * [tHashOutput_18 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_18 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_18";

	

 



/**
 * [tHashOutput_18 process_data_end ] stop
 */

} // End of branch "row63"




	
	/**
	 * [tFilterRow_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_11";

	

 



/**
 * [tFilterRow_11 process_data_end ] stop
 */

} // End of branch "row64"




	
	/**
	 * [tUniqRow_27 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_27";

	

 



/**
 * [tUniqRow_27 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0"




// Start of branch "sortie_full_DKK_WSP"
if(sortie_full_DKK_WSP != null) { 



	
	/**
	 * [tMap_31 main ] start
	 */

	

	
	
	currentComponent="tMap_31";

	

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_31 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_31 = false;
		  boolean mainRowRejected_tMap_31 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_31__Struct Var = Var__tMap_31;// ###############################
        // ###############################
        // # Output tables

copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0 = null;
sortie_full_SEK_WSP = null;


// # Output table : 'copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0'
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_tmp.TRADEAGREEMENTJOURNALNUMBER = "HBE1-" + globalMap.get("SalesJournalNumber");
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_tmp.ITEMNUMBER = sortie_full_DKK_WSP.STYLE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_tmp.PRICE = sortie_full_DKK_WSP.SEK_WSP  == null ? 0 : Mathematical.REAL(sortie_full_DKK_WSP.SEK_WSP .replaceAll(",", ".") ) ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_tmp.PRICECURRENCYCODE = "SEK";
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_tmp.PRICECUSTOMERGROUPCODE = "WSP";
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_tmp.PRODUCTCOLORID = sortie_full_DKK_WSP.COLOR ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_tmp.PRODUCTSIZEID = sortie_full_DKK_WSP.SIZE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_tmp.PRODUCTSTYLEID = sortie_full_DKK_WSP.LABELD365 ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_tmp.QUANTITYUNITSYMBOL = "PCE";
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_tmp.SEASON = sortie_full_DKK_WSP.SEASON ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_tmp.COUNTRY = "";
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0 = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_tmp;

// # Output table : 'sortie_full_SEK_WSP'
sortie_full_SEK_WSP_tmp.BRAND = sortie_full_DKK_WSP.BRAND ;
sortie_full_SEK_WSP_tmp.SEASON = sortie_full_DKK_WSP.SEASON ;
sortie_full_SEK_WSP_tmp.CATEGORY = sortie_full_DKK_WSP.CATEGORY ;
sortie_full_SEK_WSP_tmp.REF = sortie_full_DKK_WSP.REF ;
sortie_full_SEK_WSP_tmp.DESCRIPTION = sortie_full_DKK_WSP.DESCRIPTION ;
sortie_full_SEK_WSP_tmp.STYLE = sortie_full_DKK_WSP.STYLE ;
sortie_full_SEK_WSP_tmp.COLOR = sortie_full_DKK_WSP.COLOR ;
sortie_full_SEK_WSP_tmp.FASHION = sortie_full_DKK_WSP.FASHION ;
sortie_full_SEK_WSP_tmp.STYLECOLORLABEL = sortie_full_DKK_WSP.STYLECOLORLABEL ;
sortie_full_SEK_WSP_tmp.COLORNAME = sortie_full_DKK_WSP.COLORNAME ;
sortie_full_SEK_WSP_tmp.LBL = sortie_full_DKK_WSP.LBL ;
sortie_full_SEK_WSP_tmp.STYLE_COLOR = sortie_full_DKK_WSP.STYLE_COLOR ;
sortie_full_SEK_WSP_tmp.GENDER = sortie_full_DKK_WSP.GENDER ;
sortie_full_SEK_WSP_tmp.AGE_RANGE = sortie_full_DKK_WSP.AGE_RANGE ;
sortie_full_SEK_WSP_tmp.SIZE_RANGE = sortie_full_DKK_WSP.SIZE_RANGE ;
sortie_full_SEK_WSP_tmp.SIZE = sortie_full_DKK_WSP.SIZE ;
sortie_full_SEK_WSP_tmp.US_SIZE = sortie_full_DKK_WSP.US_SIZE ;
sortie_full_SEK_WSP_tmp.CM_SIZE = sortie_full_DKK_WSP.CM_SIZE ;
sortie_full_SEK_WSP_tmp.PRODUCT = sortie_full_DKK_WSP.PRODUCT ;
sortie_full_SEK_WSP_tmp.PRODUCT_STATUS = sortie_full_DKK_WSP.PRODUCT_STATUS ;
sortie_full_SEK_WSP_tmp.PRODUCT_TIER = sortie_full_DKK_WSP.PRODUCT_TIER ;
sortie_full_SEK_WSP_tmp.ACCT_EXCLUS = sortie_full_DKK_WSP.ACCT_EXCLUS ;
sortie_full_SEK_WSP_tmp.SIZE_RATIO_SPLIT = sortie_full_DKK_WSP.SIZE_RATIO_SPLIT ;
sortie_full_SEK_WSP_tmp.REC_SIZE_SPLIT = sortie_full_DKK_WSP.REC_SIZE_SPLIT ;
sortie_full_SEK_WSP_tmp.CARTON_QTY = sortie_full_DKK_WSP.CARTON_QTY ;
sortie_full_SEK_WSP_tmp.ATTRIBUTE = sortie_full_DKK_WSP.ATTRIBUTE ;
sortie_full_SEK_WSP_tmp.UNITS = sortie_full_DKK_WSP.UNITS ;
sortie_full_SEK_WSP_tmp.EUR_RRP = sortie_full_DKK_WSP.EUR_RRP ;
sortie_full_SEK_WSP_tmp.EUR_WSP = sortie_full_DKK_WSP.EUR_WSP ;
sortie_full_SEK_WSP_tmp.GBP_RRP = sortie_full_DKK_WSP.GBP_RRP ;
sortie_full_SEK_WSP_tmp.GBP_WSP = sortie_full_DKK_WSP.GBP_WSP ;
sortie_full_SEK_WSP_tmp.CHF_RRP = sortie_full_DKK_WSP.CHF_RRP ;
sortie_full_SEK_WSP_tmp.CHF_WSP = sortie_full_DKK_WSP.CHF_WSP ;
sortie_full_SEK_WSP_tmp.NOK_RRP = sortie_full_DKK_WSP.NOK_RRP ;
sortie_full_SEK_WSP_tmp.NOK_WSP = sortie_full_DKK_WSP.NOK_WSP ;
sortie_full_SEK_WSP_tmp.DKK_RRP = sortie_full_DKK_WSP.DKK_RRP ;
sortie_full_SEK_WSP_tmp.DKK_WSP = sortie_full_DKK_WSP.DKK_WSP ;
sortie_full_SEK_WSP_tmp.SEK_RRP = sortie_full_DKK_WSP.SEK_RRP ;
sortie_full_SEK_WSP_tmp.SEK_WSP = sortie_full_DKK_WSP.SEK_WSP ;
sortie_full_SEK_WSP_tmp.EUR_FINN_RRP = sortie_full_DKK_WSP.EUR_FINN_RRP ;
sortie_full_SEK_WSP_tmp.EUR_FINN_WSP = sortie_full_DKK_WSP.EUR_FINN_WSP ;
sortie_full_SEK_WSP_tmp.FABRICATION = sortie_full_DKK_WSP.FABRICATION ;
sortie_full_SEK_WSP_tmp.COO = sortie_full_DKK_WSP.COO ;
sortie_full_SEK_WSP_tmp.CUSTOM_TARIFF_CODE = sortie_full_DKK_WSP.CUSTOM_TARIFF_CODE ;
sortie_full_SEK_WSP_tmp.UPC = sortie_full_DKK_WSP.UPC ;
sortie_full_SEK_WSP_tmp.SMU_TYPE = sortie_full_DKK_WSP.SMU_TYPE ;
sortie_full_SEK_WSP_tmp.LABELD365 = sortie_full_DKK_WSP.LABELD365 ;
sortie_full_SEK_WSP = sortie_full_SEK_WSP_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_31 = false;










 


	tos_count_tMap_31++;

/**
 * [tMap_31 main ] stop
 */
	
	/**
	 * [tMap_31 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_31";

	

 



/**
 * [tMap_31 process_data_begin ] stop
 */
// Start of branch "copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0"
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0 != null) { 



	
	/**
	 * [tUniqRow_28 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_28";

	
row68 = null;			
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.TRADEAGREEMENTJOURNALNUMBER == null){
	finder_tUniqRow_28.TRADEAGREEMENTJOURNALNUMBER = null;
}else{
	finder_tUniqRow_28.TRADEAGREEMENTJOURNALNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.TRADEAGREEMENTJOURNALNUMBER.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.ITEMNUMBER == null){
	finder_tUniqRow_28.ITEMNUMBER = null;
}else{
	finder_tUniqRow_28.ITEMNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.ITEMNUMBER.toLowerCase();
}
finder_tUniqRow_28.PRICE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRICE;
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRICECURRENCYCODE == null){
	finder_tUniqRow_28.PRICECURRENCYCODE = null;
}else{
	finder_tUniqRow_28.PRICECURRENCYCODE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRICECURRENCYCODE.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRICECUSTOMERGROUPCODE == null){
	finder_tUniqRow_28.PRICECUSTOMERGROUPCODE = null;
}else{
	finder_tUniqRow_28.PRICECUSTOMERGROUPCODE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRODUCTCOLORID == null){
	finder_tUniqRow_28.PRODUCTCOLORID = null;
}else{
	finder_tUniqRow_28.PRODUCTCOLORID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRODUCTCOLORID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRODUCTSIZEID == null){
	finder_tUniqRow_28.PRODUCTSIZEID = null;
}else{
	finder_tUniqRow_28.PRODUCTSIZEID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRODUCTSIZEID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRODUCTSTYLEID == null){
	finder_tUniqRow_28.PRODUCTSTYLEID = null;
}else{
	finder_tUniqRow_28.PRODUCTSTYLEID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRODUCTSTYLEID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.QUANTITYUNITSYMBOL == null){
	finder_tUniqRow_28.QUANTITYUNITSYMBOL = null;
}else{
	finder_tUniqRow_28.QUANTITYUNITSYMBOL = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.QUANTITYUNITSYMBOL.toLowerCase();
}	
finder_tUniqRow_28.hashCodeDirty = true;
if (!keystUniqRow_28.contains(finder_tUniqRow_28)) {
		KeyStruct_tUniqRow_28 new_tUniqRow_28 = new KeyStruct_tUniqRow_28();

		
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.TRADEAGREEMENTJOURNALNUMBER == null){
	new_tUniqRow_28.TRADEAGREEMENTJOURNALNUMBER = null;
}else{
	new_tUniqRow_28.TRADEAGREEMENTJOURNALNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.TRADEAGREEMENTJOURNALNUMBER.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.ITEMNUMBER == null){
	new_tUniqRow_28.ITEMNUMBER = null;
}else{
	new_tUniqRow_28.ITEMNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.ITEMNUMBER.toLowerCase();
}
new_tUniqRow_28.PRICE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRICE;
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRICECURRENCYCODE == null){
	new_tUniqRow_28.PRICECURRENCYCODE = null;
}else{
	new_tUniqRow_28.PRICECURRENCYCODE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRICECURRENCYCODE.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRICECUSTOMERGROUPCODE == null){
	new_tUniqRow_28.PRICECUSTOMERGROUPCODE = null;
}else{
	new_tUniqRow_28.PRICECUSTOMERGROUPCODE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRODUCTCOLORID == null){
	new_tUniqRow_28.PRODUCTCOLORID = null;
}else{
	new_tUniqRow_28.PRODUCTCOLORID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRODUCTCOLORID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRODUCTSIZEID == null){
	new_tUniqRow_28.PRODUCTSIZEID = null;
}else{
	new_tUniqRow_28.PRODUCTSIZEID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRODUCTSIZEID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRODUCTSTYLEID == null){
	new_tUniqRow_28.PRODUCTSTYLEID = null;
}else{
	new_tUniqRow_28.PRODUCTSTYLEID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRODUCTSTYLEID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.QUANTITYUNITSYMBOL == null){
	new_tUniqRow_28.QUANTITYUNITSYMBOL = null;
}else{
	new_tUniqRow_28.QUANTITYUNITSYMBOL = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.QUANTITYUNITSYMBOL.toLowerCase();
}
		
		keystUniqRow_28.add(new_tUniqRow_28);if(row68 == null){ 
	
	row68 = new row68Struct();
}row68.TRADEAGREEMENTJOURNALNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.TRADEAGREEMENTJOURNALNUMBER;			row68.ITEMNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.ITEMNUMBER;			row68.PRICE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRICE;			row68.PRICECURRENCYCODE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRICECURRENCYCODE;			row68.PRICECUSTOMERGROUPCODE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRICECUSTOMERGROUPCODE;			row68.PRODUCTCOLORID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRODUCTCOLORID;			row68.PRODUCTSIZEID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRODUCTSIZEID;			row68.PRODUCTSTYLEID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRODUCTSTYLEID;			row68.QUANTITYUNITSYMBOL = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.QUANTITYUNITSYMBOL;			row68.SEASON = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.SEASON;			row68.COUNTRY = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.COUNTRY;					
		nb_uniques_tUniqRow_28++;
	} else {
	  nb_duplicates_tUniqRow_28++;
	}

 


	tos_count_tUniqRow_28++;

/**
 * [tUniqRow_28 main ] stop
 */
	
	/**
	 * [tUniqRow_28 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_28";

	

 



/**
 * [tUniqRow_28 process_data_begin ] stop
 */
// Start of branch "row68"
if(row68 != null) { 



	
	/**
	 * [tFilterRow_12 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_12";

	

          row67 = null;
    Operator_tFilterRow_12 ope_tFilterRow_12 = new Operator_tFilterRow_12("||");
            ope_tFilterRow_12.matches((row68.PRICE == null? false : row68.PRICE.compareTo(ParserUtils.parseTo_Double(String.valueOf(0))) > 0)
                           , "PRICE.compareTo(0) > 0 failed");
		 	
            ope_tFilterRow_12.matches((row68.PRODUCTSTYLEID == null? false : row68.PRODUCTSTYLEID.compareTo("SMS") == 0)
                           , "PRODUCTSTYLEID.compareTo(\"SMS\") == 0 failed");
    
    if (ope_tFilterRow_12.getMatchFlag()) {
              if(row67 == null){ 
                row67 = new row67Struct();
              }
               row67.TRADEAGREEMENTJOURNALNUMBER = row68.TRADEAGREEMENTJOURNALNUMBER;
               row67.ITEMNUMBER = row68.ITEMNUMBER;
               row67.PRICE = row68.PRICE;
               row67.PRICECURRENCYCODE = row68.PRICECURRENCYCODE;
               row67.PRICECUSTOMERGROUPCODE = row68.PRICECUSTOMERGROUPCODE;
               row67.PRODUCTCOLORID = row68.PRODUCTCOLORID;
               row67.PRODUCTSIZEID = row68.PRODUCTSIZEID;
               row67.PRODUCTSTYLEID = row68.PRODUCTSTYLEID;
               row67.QUANTITYUNITSYMBOL = row68.QUANTITYUNITSYMBOL;
               row67.SEASON = row68.SEASON;
               row67.COUNTRY = row68.COUNTRY;    
      nb_line_ok_tFilterRow_12++;
    } else {
      nb_line_reject_tFilterRow_12++;
    }

nb_line_tFilterRow_12++;

 


	tos_count_tFilterRow_12++;

/**
 * [tFilterRow_12 main ] stop
 */
	
	/**
	 * [tFilterRow_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_12";

	

 



/**
 * [tFilterRow_12 process_data_begin ] stop
 */
// Start of branch "row67"
if(row67 != null) { 



	
	/**
	 * [tHashOutput_19 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_19";

	



    
		row67Struct oneRow_tHashOutput_19 = new row67Struct();
				
					oneRow_tHashOutput_19.TRADEAGREEMENTJOURNALNUMBER = row67.TRADEAGREEMENTJOURNALNUMBER;
					oneRow_tHashOutput_19.ITEMNUMBER = row67.ITEMNUMBER;
					oneRow_tHashOutput_19.PRICE = row67.PRICE;
					oneRow_tHashOutput_19.PRICECURRENCYCODE = row67.PRICECURRENCYCODE;
					oneRow_tHashOutput_19.PRICECUSTOMERGROUPCODE = row67.PRICECUSTOMERGROUPCODE;
					oneRow_tHashOutput_19.PRODUCTCOLORID = row67.PRODUCTCOLORID;
					oneRow_tHashOutput_19.PRODUCTSIZEID = row67.PRODUCTSIZEID;
					oneRow_tHashOutput_19.PRODUCTSTYLEID = row67.PRODUCTSTYLEID;
					oneRow_tHashOutput_19.QUANTITYUNITSYMBOL = row67.QUANTITYUNITSYMBOL;
					oneRow_tHashOutput_19.SEASON = row67.SEASON;
					oneRow_tHashOutput_19.COUNTRY = row67.COUNTRY;
		
        tHashFile_tHashOutput_19.put(oneRow_tHashOutput_19);
        nb_line_tHashOutput_19 ++;
 


	tos_count_tHashOutput_19++;

/**
 * [tHashOutput_19 main ] stop
 */
	
	/**
	 * [tHashOutput_19 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_19";

	

 



/**
 * [tHashOutput_19 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_19 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_19";

	

 



/**
 * [tHashOutput_19 process_data_end ] stop
 */

} // End of branch "row67"




	
	/**
	 * [tFilterRow_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_12";

	

 



/**
 * [tFilterRow_12 process_data_end ] stop
 */

} // End of branch "row68"




	
	/**
	 * [tUniqRow_28 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_28";

	

 



/**
 * [tUniqRow_28 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0"




// Start of branch "sortie_full_SEK_WSP"
if(sortie_full_SEK_WSP != null) { 



	
	/**
	 * [tMap_32 main ] start
	 */

	

	
	
	currentComponent="tMap_32";

	

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_32 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_32 = false;
		  boolean mainRowRejected_tMap_32 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_32__Struct Var = Var__tMap_32;// ###############################
        // ###############################
        // # Output tables

copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0 = null;
sortie_full_SEK_RRP = null;


// # Output table : 'copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0'
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_tmp.TRADEAGREEMENTJOURNALNUMBER = "HBE1-" + globalMap.get("SalesJournalNumber");
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_tmp.ITEMNUMBER = sortie_full_SEK_WSP.STYLE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_tmp.PRICE = sortie_full_SEK_WSP.SEK_RRP  == null ? 0 : Mathematical.REAL(sortie_full_SEK_WSP.SEK_RRP.replaceAll(",", ".") ) ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_tmp.PRICECURRENCYCODE = "SEK";
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_tmp.PRICECUSTOMERGROUPCODE = "RRP";
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_tmp.PRODUCTCOLORID = sortie_full_SEK_WSP.COLOR ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_tmp.PRODUCTSIZEID = sortie_full_SEK_WSP.SIZE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_tmp.PRODUCTSTYLEID = sortie_full_SEK_WSP.LABELD365 ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_tmp.QUANTITYUNITSYMBOL = "PCE";
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_tmp.SEASON = sortie_full_SEK_WSP.SEASON ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_tmp.COUNTRY = "";
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0 = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_tmp;

// # Output table : 'sortie_full_SEK_RRP'
sortie_full_SEK_RRP_tmp.BRAND = sortie_full_SEK_WSP.BRAND ;
sortie_full_SEK_RRP_tmp.SEASON = sortie_full_SEK_WSP.SEASON ;
sortie_full_SEK_RRP_tmp.CATEGORY = sortie_full_SEK_WSP.CATEGORY ;
sortie_full_SEK_RRP_tmp.REF = sortie_full_SEK_WSP.REF ;
sortie_full_SEK_RRP_tmp.DESCRIPTION = sortie_full_SEK_WSP.DESCRIPTION ;
sortie_full_SEK_RRP_tmp.STYLE = sortie_full_SEK_WSP.STYLE ;
sortie_full_SEK_RRP_tmp.COLOR = sortie_full_SEK_WSP.COLOR ;
sortie_full_SEK_RRP_tmp.FASHION = sortie_full_SEK_WSP.FASHION ;
sortie_full_SEK_RRP_tmp.STYLECOLORLABEL = sortie_full_SEK_WSP.STYLECOLORLABEL ;
sortie_full_SEK_RRP_tmp.COLORNAME = sortie_full_SEK_WSP.COLORNAME ;
sortie_full_SEK_RRP_tmp.LBL = sortie_full_SEK_WSP.LBL ;
sortie_full_SEK_RRP_tmp.STYLE_COLOR = sortie_full_SEK_WSP.STYLE_COLOR ;
sortie_full_SEK_RRP_tmp.GENDER = sortie_full_SEK_WSP.GENDER ;
sortie_full_SEK_RRP_tmp.AGE_RANGE = sortie_full_SEK_WSP.AGE_RANGE ;
sortie_full_SEK_RRP_tmp.SIZE_RANGE = sortie_full_SEK_WSP.SIZE_RANGE ;
sortie_full_SEK_RRP_tmp.SIZE = sortie_full_SEK_WSP.SIZE ;
sortie_full_SEK_RRP_tmp.US_SIZE = sortie_full_SEK_WSP.US_SIZE ;
sortie_full_SEK_RRP_tmp.CM_SIZE = sortie_full_SEK_WSP.CM_SIZE ;
sortie_full_SEK_RRP_tmp.PRODUCT = sortie_full_SEK_WSP.PRODUCT ;
sortie_full_SEK_RRP_tmp.PRODUCT_STATUS = sortie_full_SEK_WSP.PRODUCT_STATUS ;
sortie_full_SEK_RRP_tmp.PRODUCT_TIER = sortie_full_SEK_WSP.PRODUCT_TIER ;
sortie_full_SEK_RRP_tmp.ACCT_EXCLUS = sortie_full_SEK_WSP.ACCT_EXCLUS ;
sortie_full_SEK_RRP_tmp.SIZE_RATIO_SPLIT = sortie_full_SEK_WSP.SIZE_RATIO_SPLIT ;
sortie_full_SEK_RRP_tmp.REC_SIZE_SPLIT = sortie_full_SEK_WSP.REC_SIZE_SPLIT ;
sortie_full_SEK_RRP_tmp.CARTON_QTY = sortie_full_SEK_WSP.CARTON_QTY ;
sortie_full_SEK_RRP_tmp.ATTRIBUTE = sortie_full_SEK_WSP.ATTRIBUTE ;
sortie_full_SEK_RRP_tmp.UNITS = sortie_full_SEK_WSP.UNITS ;
sortie_full_SEK_RRP_tmp.EUR_RRP = sortie_full_SEK_WSP.EUR_RRP ;
sortie_full_SEK_RRP_tmp.EUR_WSP = sortie_full_SEK_WSP.EUR_WSP ;
sortie_full_SEK_RRP_tmp.GBP_RRP = sortie_full_SEK_WSP.GBP_RRP ;
sortie_full_SEK_RRP_tmp.GBP_WSP = sortie_full_SEK_WSP.GBP_WSP ;
sortie_full_SEK_RRP_tmp.CHF_RRP = sortie_full_SEK_WSP.CHF_RRP ;
sortie_full_SEK_RRP_tmp.CHF_WSP = sortie_full_SEK_WSP.CHF_WSP ;
sortie_full_SEK_RRP_tmp.NOK_RRP = sortie_full_SEK_WSP.NOK_RRP ;
sortie_full_SEK_RRP_tmp.NOK_WSP = sortie_full_SEK_WSP.NOK_WSP ;
sortie_full_SEK_RRP_tmp.DKK_RRP = sortie_full_SEK_WSP.DKK_RRP ;
sortie_full_SEK_RRP_tmp.DKK_WSP = sortie_full_SEK_WSP.DKK_WSP ;
sortie_full_SEK_RRP_tmp.SEK_RRP = sortie_full_SEK_WSP.SEK_RRP ;
sortie_full_SEK_RRP_tmp.SEK_WSP = sortie_full_SEK_WSP.SEK_WSP ;
sortie_full_SEK_RRP_tmp.EUR_FINN_RRP = sortie_full_SEK_WSP.EUR_FINN_RRP ;
sortie_full_SEK_RRP_tmp.EUR_FINN_WSP = sortie_full_SEK_WSP.EUR_FINN_WSP ;
sortie_full_SEK_RRP_tmp.FABRICATION = sortie_full_SEK_WSP.FABRICATION ;
sortie_full_SEK_RRP_tmp.COO = sortie_full_SEK_WSP.COO ;
sortie_full_SEK_RRP_tmp.CUSTOM_TARIFF_CODE = sortie_full_SEK_WSP.CUSTOM_TARIFF_CODE ;
sortie_full_SEK_RRP_tmp.UPC = sortie_full_SEK_WSP.UPC ;
sortie_full_SEK_RRP_tmp.SMU_TYPE = sortie_full_SEK_WSP.SMU_TYPE ;
sortie_full_SEK_RRP_tmp.LABELD365 = sortie_full_SEK_WSP.LABELD365 ;
sortie_full_SEK_RRP = sortie_full_SEK_RRP_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_32 = false;










 


	tos_count_tMap_32++;

/**
 * [tMap_32 main ] stop
 */
	
	/**
	 * [tMap_32 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_32";

	

 



/**
 * [tMap_32 process_data_begin ] stop
 */
// Start of branch "copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0"
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0 != null) { 



	
	/**
	 * [tUniqRow_29 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_29";

	
row69 = null;			
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.TRADEAGREEMENTJOURNALNUMBER == null){
	finder_tUniqRow_29.TRADEAGREEMENTJOURNALNUMBER = null;
}else{
	finder_tUniqRow_29.TRADEAGREEMENTJOURNALNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.TRADEAGREEMENTJOURNALNUMBER.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.ITEMNUMBER == null){
	finder_tUniqRow_29.ITEMNUMBER = null;
}else{
	finder_tUniqRow_29.ITEMNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.ITEMNUMBER.toLowerCase();
}
finder_tUniqRow_29.PRICE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRICE;
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRICECURRENCYCODE == null){
	finder_tUniqRow_29.PRICECURRENCYCODE = null;
}else{
	finder_tUniqRow_29.PRICECURRENCYCODE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRICECURRENCYCODE.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRICECUSTOMERGROUPCODE == null){
	finder_tUniqRow_29.PRICECUSTOMERGROUPCODE = null;
}else{
	finder_tUniqRow_29.PRICECUSTOMERGROUPCODE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRODUCTCOLORID == null){
	finder_tUniqRow_29.PRODUCTCOLORID = null;
}else{
	finder_tUniqRow_29.PRODUCTCOLORID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRODUCTCOLORID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRODUCTSIZEID == null){
	finder_tUniqRow_29.PRODUCTSIZEID = null;
}else{
	finder_tUniqRow_29.PRODUCTSIZEID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRODUCTSIZEID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRODUCTSTYLEID == null){
	finder_tUniqRow_29.PRODUCTSTYLEID = null;
}else{
	finder_tUniqRow_29.PRODUCTSTYLEID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRODUCTSTYLEID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.QUANTITYUNITSYMBOL == null){
	finder_tUniqRow_29.QUANTITYUNITSYMBOL = null;
}else{
	finder_tUniqRow_29.QUANTITYUNITSYMBOL = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.QUANTITYUNITSYMBOL.toLowerCase();
}	
finder_tUniqRow_29.hashCodeDirty = true;
if (!keystUniqRow_29.contains(finder_tUniqRow_29)) {
		KeyStruct_tUniqRow_29 new_tUniqRow_29 = new KeyStruct_tUniqRow_29();

		
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.TRADEAGREEMENTJOURNALNUMBER == null){
	new_tUniqRow_29.TRADEAGREEMENTJOURNALNUMBER = null;
}else{
	new_tUniqRow_29.TRADEAGREEMENTJOURNALNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.TRADEAGREEMENTJOURNALNUMBER.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.ITEMNUMBER == null){
	new_tUniqRow_29.ITEMNUMBER = null;
}else{
	new_tUniqRow_29.ITEMNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.ITEMNUMBER.toLowerCase();
}
new_tUniqRow_29.PRICE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRICE;
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRICECURRENCYCODE == null){
	new_tUniqRow_29.PRICECURRENCYCODE = null;
}else{
	new_tUniqRow_29.PRICECURRENCYCODE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRICECURRENCYCODE.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRICECUSTOMERGROUPCODE == null){
	new_tUniqRow_29.PRICECUSTOMERGROUPCODE = null;
}else{
	new_tUniqRow_29.PRICECUSTOMERGROUPCODE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRODUCTCOLORID == null){
	new_tUniqRow_29.PRODUCTCOLORID = null;
}else{
	new_tUniqRow_29.PRODUCTCOLORID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRODUCTCOLORID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRODUCTSIZEID == null){
	new_tUniqRow_29.PRODUCTSIZEID = null;
}else{
	new_tUniqRow_29.PRODUCTSIZEID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRODUCTSIZEID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRODUCTSTYLEID == null){
	new_tUniqRow_29.PRODUCTSTYLEID = null;
}else{
	new_tUniqRow_29.PRODUCTSTYLEID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRODUCTSTYLEID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.QUANTITYUNITSYMBOL == null){
	new_tUniqRow_29.QUANTITYUNITSYMBOL = null;
}else{
	new_tUniqRow_29.QUANTITYUNITSYMBOL = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.QUANTITYUNITSYMBOL.toLowerCase();
}
		
		keystUniqRow_29.add(new_tUniqRow_29);if(row69 == null){ 
	
	row69 = new row69Struct();
}row69.TRADEAGREEMENTJOURNALNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.TRADEAGREEMENTJOURNALNUMBER;			row69.ITEMNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.ITEMNUMBER;			row69.PRICE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRICE;			row69.PRICECURRENCYCODE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRICECURRENCYCODE;			row69.PRICECUSTOMERGROUPCODE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRICECUSTOMERGROUPCODE;			row69.PRODUCTCOLORID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRODUCTCOLORID;			row69.PRODUCTSIZEID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRODUCTSIZEID;			row69.PRODUCTSTYLEID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.PRODUCTSTYLEID;			row69.QUANTITYUNITSYMBOL = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.QUANTITYUNITSYMBOL;			row69.SEASON = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.SEASON;			row69.COUNTRY = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0.COUNTRY;					
		nb_uniques_tUniqRow_29++;
	} else {
	  nb_duplicates_tUniqRow_29++;
	}

 


	tos_count_tUniqRow_29++;

/**
 * [tUniqRow_29 main ] stop
 */
	
	/**
	 * [tUniqRow_29 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_29";

	

 



/**
 * [tUniqRow_29 process_data_begin ] stop
 */
// Start of branch "row69"
if(row69 != null) { 



	
	/**
	 * [tFilterRow_13 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_13";

	

          Main1 = null;
    Operator_tFilterRow_13 ope_tFilterRow_13 = new Operator_tFilterRow_13("||");
            ope_tFilterRow_13.matches((row69.PRICE == null? false : row69.PRICE.compareTo(ParserUtils.parseTo_Double(String.valueOf(0))) > 0)
                           , "PRICE.compareTo(0) > 0 failed");
		 	
            ope_tFilterRow_13.matches((row69.PRODUCTSTYLEID == null? false : row69.PRODUCTSTYLEID.compareTo("SMS") == 0)
                           , "PRODUCTSTYLEID.compareTo(\"SMS\") == 0 failed");
    
    if (ope_tFilterRow_13.getMatchFlag()) {
              if(Main1 == null){ 
                Main1 = new Main1Struct();
              }
               Main1.TRADEAGREEMENTJOURNALNUMBER = row69.TRADEAGREEMENTJOURNALNUMBER;
               Main1.ITEMNUMBER = row69.ITEMNUMBER;
               Main1.PRICE = row69.PRICE;
               Main1.PRICECURRENCYCODE = row69.PRICECURRENCYCODE;
               Main1.PRICECUSTOMERGROUPCODE = row69.PRICECUSTOMERGROUPCODE;
               Main1.PRODUCTCOLORID = row69.PRODUCTCOLORID;
               Main1.PRODUCTSIZEID = row69.PRODUCTSIZEID;
               Main1.PRODUCTSTYLEID = row69.PRODUCTSTYLEID;
               Main1.QUANTITYUNITSYMBOL = row69.QUANTITYUNITSYMBOL;
               Main1.SEASON = row69.SEASON;
               Main1.COUNTRY = row69.COUNTRY;    
      nb_line_ok_tFilterRow_13++;
    } else {
      nb_line_reject_tFilterRow_13++;
    }

nb_line_tFilterRow_13++;

 


	tos_count_tFilterRow_13++;

/**
 * [tFilterRow_13 main ] stop
 */
	
	/**
	 * [tFilterRow_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_13";

	

 



/**
 * [tFilterRow_13 process_data_begin ] stop
 */
// Start of branch "Main1"
if(Main1 != null) { 



	
	/**
	 * [tHashOutput_20 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_20";

	



    
		Main1Struct oneRow_tHashOutput_20 = new Main1Struct();
				
					oneRow_tHashOutput_20.TRADEAGREEMENTJOURNALNUMBER = Main1.TRADEAGREEMENTJOURNALNUMBER;
					oneRow_tHashOutput_20.ITEMNUMBER = Main1.ITEMNUMBER;
					oneRow_tHashOutput_20.PRICE = Main1.PRICE;
					oneRow_tHashOutput_20.PRICECURRENCYCODE = Main1.PRICECURRENCYCODE;
					oneRow_tHashOutput_20.PRICECUSTOMERGROUPCODE = Main1.PRICECUSTOMERGROUPCODE;
					oneRow_tHashOutput_20.PRODUCTCOLORID = Main1.PRODUCTCOLORID;
					oneRow_tHashOutput_20.PRODUCTSIZEID = Main1.PRODUCTSIZEID;
					oneRow_tHashOutput_20.PRODUCTSTYLEID = Main1.PRODUCTSTYLEID;
					oneRow_tHashOutput_20.QUANTITYUNITSYMBOL = Main1.QUANTITYUNITSYMBOL;
					oneRow_tHashOutput_20.SEASON = Main1.SEASON;
					oneRow_tHashOutput_20.COUNTRY = Main1.COUNTRY;
		
        tHashFile_tHashOutput_20.put(oneRow_tHashOutput_20);
        nb_line_tHashOutput_20 ++;
 


	tos_count_tHashOutput_20++;

/**
 * [tHashOutput_20 main ] stop
 */
	
	/**
	 * [tHashOutput_20 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_20";

	

 



/**
 * [tHashOutput_20 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_20 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_20";

	

 



/**
 * [tHashOutput_20 process_data_end ] stop
 */

} // End of branch "Main1"




	
	/**
	 * [tFilterRow_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_13";

	

 



/**
 * [tFilterRow_13 process_data_end ] stop
 */

} // End of branch "row69"




	
	/**
	 * [tUniqRow_29 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_29";

	

 



/**
 * [tUniqRow_29 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0"




// Start of branch "sortie_full_SEK_RRP"
if(sortie_full_SEK_RRP != null) { 



	
	/**
	 * [tMap_33 main ] start
	 */

	

	
	
	currentComponent="tMap_33";

	

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_33 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_33 = false;
		  boolean mainRowRejected_tMap_33 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_33__Struct Var = Var__tMap_33;// ###############################
        // ###############################
        // # Output tables

copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0 = null;
sortie_full_EUR_FIN_WSP = null;


// # Output table : 'copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0'
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0_tmp.TRADEAGREEMENTJOURNALNUMBER = "HBE1-" + globalMap.get("SalesJournalNumber");
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0_tmp.ITEMNUMBER = sortie_full_SEK_RRP.STYLE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0_tmp.PRICE = sortie_full_SEK_RRP.EUR_FINN_WSP  == null ? 0 : Mathematical.REAL( sortie_full_SEK_RRP.EUR_FINN_WSP.replaceAll(",", ".") ) ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0_tmp.PRICECURRENCYCODE = "EUR";
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0_tmp.PRICECUSTOMERGROUPCODE = "WSP";
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0_tmp.PRODUCTCOLORID = sortie_full_SEK_RRP.COLOR ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0_tmp.PRODUCTSIZEID = sortie_full_SEK_RRP.SIZE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0_tmp.PRODUCTSTYLEID = sortie_full_SEK_RRP.LABELD365 ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0_tmp.QUANTITYUNITSYMBOL = "PCE";
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0_tmp.SEASON = sortie_full_SEK_RRP.SEASON ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0_tmp.COUNTRY = "FIN";
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0 = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0_tmp;

// # Output table : 'sortie_full_EUR_FIN_WSP'
sortie_full_EUR_FIN_WSP_tmp.BRAND = sortie_full_SEK_RRP.BRAND ;
sortie_full_EUR_FIN_WSP_tmp.SEASON = sortie_full_SEK_RRP.SEASON ;
sortie_full_EUR_FIN_WSP_tmp.CATEGORY = sortie_full_SEK_RRP.CATEGORY ;
sortie_full_EUR_FIN_WSP_tmp.REF = sortie_full_SEK_RRP.REF ;
sortie_full_EUR_FIN_WSP_tmp.DESCRIPTION = sortie_full_SEK_RRP.DESCRIPTION ;
sortie_full_EUR_FIN_WSP_tmp.STYLE = sortie_full_SEK_RRP.STYLE ;
sortie_full_EUR_FIN_WSP_tmp.COLOR = sortie_full_SEK_RRP.COLOR ;
sortie_full_EUR_FIN_WSP_tmp.FASHION = sortie_full_SEK_RRP.FASHION ;
sortie_full_EUR_FIN_WSP_tmp.STYLECOLORLABEL = sortie_full_SEK_RRP.STYLECOLORLABEL ;
sortie_full_EUR_FIN_WSP_tmp.COLORNAME = sortie_full_SEK_RRP.COLORNAME ;
sortie_full_EUR_FIN_WSP_tmp.LBL = sortie_full_SEK_RRP.LBL ;
sortie_full_EUR_FIN_WSP_tmp.STYLE_COLOR = sortie_full_SEK_RRP.STYLE_COLOR ;
sortie_full_EUR_FIN_WSP_tmp.GENDER = sortie_full_SEK_RRP.GENDER ;
sortie_full_EUR_FIN_WSP_tmp.AGE_RANGE = sortie_full_SEK_RRP.AGE_RANGE ;
sortie_full_EUR_FIN_WSP_tmp.SIZE_RANGE = sortie_full_SEK_RRP.SIZE_RANGE ;
sortie_full_EUR_FIN_WSP_tmp.SIZE = sortie_full_SEK_RRP.SIZE ;
sortie_full_EUR_FIN_WSP_tmp.US_SIZE = sortie_full_SEK_RRP.US_SIZE ;
sortie_full_EUR_FIN_WSP_tmp.CM_SIZE = sortie_full_SEK_RRP.CM_SIZE ;
sortie_full_EUR_FIN_WSP_tmp.PRODUCT = sortie_full_SEK_RRP.PRODUCT ;
sortie_full_EUR_FIN_WSP_tmp.PRODUCT_STATUS = sortie_full_SEK_RRP.PRODUCT_STATUS ;
sortie_full_EUR_FIN_WSP_tmp.PRODUCT_TIER = sortie_full_SEK_RRP.PRODUCT_TIER ;
sortie_full_EUR_FIN_WSP_tmp.ACCT_EXCLUS = sortie_full_SEK_RRP.ACCT_EXCLUS ;
sortie_full_EUR_FIN_WSP_tmp.SIZE_RATIO_SPLIT = sortie_full_SEK_RRP.SIZE_RATIO_SPLIT ;
sortie_full_EUR_FIN_WSP_tmp.REC_SIZE_SPLIT = sortie_full_SEK_RRP.REC_SIZE_SPLIT ;
sortie_full_EUR_FIN_WSP_tmp.CARTON_QTY = sortie_full_SEK_RRP.CARTON_QTY ;
sortie_full_EUR_FIN_WSP_tmp.ATTRIBUTE = sortie_full_SEK_RRP.ATTRIBUTE ;
sortie_full_EUR_FIN_WSP_tmp.UNITS = sortie_full_SEK_RRP.UNITS ;
sortie_full_EUR_FIN_WSP_tmp.EUR_RRP = sortie_full_SEK_RRP.EUR_RRP ;
sortie_full_EUR_FIN_WSP_tmp.EUR_WSP = sortie_full_SEK_RRP.EUR_WSP ;
sortie_full_EUR_FIN_WSP_tmp.GBP_RRP = sortie_full_SEK_RRP.GBP_RRP ;
sortie_full_EUR_FIN_WSP_tmp.GBP_WSP = sortie_full_SEK_RRP.GBP_WSP ;
sortie_full_EUR_FIN_WSP_tmp.CHF_RRP = sortie_full_SEK_RRP.CHF_RRP ;
sortie_full_EUR_FIN_WSP_tmp.CHF_WSP = sortie_full_SEK_RRP.CHF_WSP ;
sortie_full_EUR_FIN_WSP_tmp.NOK_RRP = sortie_full_SEK_RRP.NOK_RRP ;
sortie_full_EUR_FIN_WSP_tmp.NOK_WSP = sortie_full_SEK_RRP.NOK_WSP ;
sortie_full_EUR_FIN_WSP_tmp.DKK_RRP = sortie_full_SEK_RRP.DKK_RRP ;
sortie_full_EUR_FIN_WSP_tmp.DKK_WSP = sortie_full_SEK_RRP.DKK_WSP ;
sortie_full_EUR_FIN_WSP_tmp.SEK_RRP = sortie_full_SEK_RRP.SEK_RRP ;
sortie_full_EUR_FIN_WSP_tmp.SEK_WSP = sortie_full_SEK_RRP.SEK_WSP ;
sortie_full_EUR_FIN_WSP_tmp.EUR_FINN_RRP = sortie_full_SEK_RRP.EUR_FINN_RRP ;
sortie_full_EUR_FIN_WSP_tmp.EUR_FINN_WSP = sortie_full_SEK_RRP.EUR_FINN_WSP ;
sortie_full_EUR_FIN_WSP_tmp.FABRICATION = sortie_full_SEK_RRP.FABRICATION ;
sortie_full_EUR_FIN_WSP_tmp.COO = sortie_full_SEK_RRP.COO ;
sortie_full_EUR_FIN_WSP_tmp.CUSTOM_TARIFF_CODE = sortie_full_SEK_RRP.CUSTOM_TARIFF_CODE ;
sortie_full_EUR_FIN_WSP_tmp.UPC = sortie_full_SEK_RRP.UPC ;
sortie_full_EUR_FIN_WSP_tmp.SMU_TYPE = sortie_full_SEK_RRP.SMU_TYPE ;
sortie_full_EUR_FIN_WSP_tmp.LABELD365 = sortie_full_SEK_RRP.LABELD365 ;
sortie_full_EUR_FIN_WSP = sortie_full_EUR_FIN_WSP_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_33 = false;










 


	tos_count_tMap_33++;

/**
 * [tMap_33 main ] stop
 */
	
	/**
	 * [tMap_33 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_33";

	

 



/**
 * [tMap_33 process_data_begin ] stop
 */
// Start of branch "copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0"
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0 != null) { 



	
	/**
	 * [tUniqRow_30 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_30";

	
row73 = null;			
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.TRADEAGREEMENTJOURNALNUMBER == null){
	finder_tUniqRow_30.TRADEAGREEMENTJOURNALNUMBER = null;
}else{
	finder_tUniqRow_30.TRADEAGREEMENTJOURNALNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.TRADEAGREEMENTJOURNALNUMBER.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.ITEMNUMBER == null){
	finder_tUniqRow_30.ITEMNUMBER = null;
}else{
	finder_tUniqRow_30.ITEMNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.ITEMNUMBER.toLowerCase();
}
finder_tUniqRow_30.PRICE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRICE;
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRICECURRENCYCODE == null){
	finder_tUniqRow_30.PRICECURRENCYCODE = null;
}else{
	finder_tUniqRow_30.PRICECURRENCYCODE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRICECURRENCYCODE.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRICECUSTOMERGROUPCODE == null){
	finder_tUniqRow_30.PRICECUSTOMERGROUPCODE = null;
}else{
	finder_tUniqRow_30.PRICECUSTOMERGROUPCODE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRODUCTCOLORID == null){
	finder_tUniqRow_30.PRODUCTCOLORID = null;
}else{
	finder_tUniqRow_30.PRODUCTCOLORID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRODUCTCOLORID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRODUCTSIZEID == null){
	finder_tUniqRow_30.PRODUCTSIZEID = null;
}else{
	finder_tUniqRow_30.PRODUCTSIZEID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRODUCTSIZEID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRODUCTSTYLEID == null){
	finder_tUniqRow_30.PRODUCTSTYLEID = null;
}else{
	finder_tUniqRow_30.PRODUCTSTYLEID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRODUCTSTYLEID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.QUANTITYUNITSYMBOL == null){
	finder_tUniqRow_30.QUANTITYUNITSYMBOL = null;
}else{
	finder_tUniqRow_30.QUANTITYUNITSYMBOL = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.QUANTITYUNITSYMBOL.toLowerCase();
}	
finder_tUniqRow_30.hashCodeDirty = true;
if (!keystUniqRow_30.contains(finder_tUniqRow_30)) {
		KeyStruct_tUniqRow_30 new_tUniqRow_30 = new KeyStruct_tUniqRow_30();

		
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.TRADEAGREEMENTJOURNALNUMBER == null){
	new_tUniqRow_30.TRADEAGREEMENTJOURNALNUMBER = null;
}else{
	new_tUniqRow_30.TRADEAGREEMENTJOURNALNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.TRADEAGREEMENTJOURNALNUMBER.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.ITEMNUMBER == null){
	new_tUniqRow_30.ITEMNUMBER = null;
}else{
	new_tUniqRow_30.ITEMNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.ITEMNUMBER.toLowerCase();
}
new_tUniqRow_30.PRICE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRICE;
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRICECURRENCYCODE == null){
	new_tUniqRow_30.PRICECURRENCYCODE = null;
}else{
	new_tUniqRow_30.PRICECURRENCYCODE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRICECURRENCYCODE.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRICECUSTOMERGROUPCODE == null){
	new_tUniqRow_30.PRICECUSTOMERGROUPCODE = null;
}else{
	new_tUniqRow_30.PRICECUSTOMERGROUPCODE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRODUCTCOLORID == null){
	new_tUniqRow_30.PRODUCTCOLORID = null;
}else{
	new_tUniqRow_30.PRODUCTCOLORID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRODUCTCOLORID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRODUCTSIZEID == null){
	new_tUniqRow_30.PRODUCTSIZEID = null;
}else{
	new_tUniqRow_30.PRODUCTSIZEID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRODUCTSIZEID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRODUCTSTYLEID == null){
	new_tUniqRow_30.PRODUCTSTYLEID = null;
}else{
	new_tUniqRow_30.PRODUCTSTYLEID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRODUCTSTYLEID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.QUANTITYUNITSYMBOL == null){
	new_tUniqRow_30.QUANTITYUNITSYMBOL = null;
}else{
	new_tUniqRow_30.QUANTITYUNITSYMBOL = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.QUANTITYUNITSYMBOL.toLowerCase();
}
		
		keystUniqRow_30.add(new_tUniqRow_30);if(row73 == null){ 
	
	row73 = new row73Struct();
}row73.TRADEAGREEMENTJOURNALNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.TRADEAGREEMENTJOURNALNUMBER;			row73.ITEMNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.ITEMNUMBER;			row73.PRICE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRICE;			row73.PRICECURRENCYCODE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRICECURRENCYCODE;			row73.PRICECUSTOMERGROUPCODE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRICECUSTOMERGROUPCODE;			row73.PRODUCTCOLORID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRODUCTCOLORID;			row73.PRODUCTSIZEID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRODUCTSIZEID;			row73.PRODUCTSTYLEID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRODUCTSTYLEID;			row73.QUANTITYUNITSYMBOL = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.QUANTITYUNITSYMBOL;			row73.SEASON = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.SEASON;			row73.COUNTRY = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.COUNTRY;					
		nb_uniques_tUniqRow_30++;
	} else {
	  nb_duplicates_tUniqRow_30++;
	}

 


	tos_count_tUniqRow_30++;

/**
 * [tUniqRow_30 main ] stop
 */
	
	/**
	 * [tUniqRow_30 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_30";

	

 



/**
 * [tUniqRow_30 process_data_begin ] stop
 */
// Start of branch "row73"
if(row73 != null) { 



	
	/**
	 * [tFilterRow_14 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_14";

	

          row74 = null;
    Operator_tFilterRow_14 ope_tFilterRow_14 = new Operator_tFilterRow_14("||");
            ope_tFilterRow_14.matches((row73.PRICE == null? false : row73.PRICE.compareTo(ParserUtils.parseTo_Double(String.valueOf(0))) > 0)
                           , "PRICE.compareTo(0) > 0 failed");
		 	
            ope_tFilterRow_14.matches((row73.PRODUCTSTYLEID == null? false : row73.PRODUCTSTYLEID.compareTo("SMS") == 0)
                           , "PRODUCTSTYLEID.compareTo(\"SMS\") == 0 failed");
    
    if (ope_tFilterRow_14.getMatchFlag()) {
              if(row74 == null){ 
                row74 = new row74Struct();
              }
               row74.TRADEAGREEMENTJOURNALNUMBER = row73.TRADEAGREEMENTJOURNALNUMBER;
               row74.ITEMNUMBER = row73.ITEMNUMBER;
               row74.PRICE = row73.PRICE;
               row74.PRICECURRENCYCODE = row73.PRICECURRENCYCODE;
               row74.PRICECUSTOMERGROUPCODE = row73.PRICECUSTOMERGROUPCODE;
               row74.PRODUCTCOLORID = row73.PRODUCTCOLORID;
               row74.PRODUCTSIZEID = row73.PRODUCTSIZEID;
               row74.PRODUCTSTYLEID = row73.PRODUCTSTYLEID;
               row74.QUANTITYUNITSYMBOL = row73.QUANTITYUNITSYMBOL;
               row74.SEASON = row73.SEASON;
               row74.COUNTRY = row73.COUNTRY;    
      nb_line_ok_tFilterRow_14++;
    } else {
      nb_line_reject_tFilterRow_14++;
    }

nb_line_tFilterRow_14++;

 


	tos_count_tFilterRow_14++;

/**
 * [tFilterRow_14 main ] stop
 */
	
	/**
	 * [tFilterRow_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_14";

	

 



/**
 * [tFilterRow_14 process_data_begin ] stop
 */
// Start of branch "row74"
if(row74 != null) { 



	
	/**
	 * [tHashOutput_21 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_21";

	



    
		row74Struct oneRow_tHashOutput_21 = new row74Struct();
				
					oneRow_tHashOutput_21.TRADEAGREEMENTJOURNALNUMBER = row74.TRADEAGREEMENTJOURNALNUMBER;
					oneRow_tHashOutput_21.ITEMNUMBER = row74.ITEMNUMBER;
					oneRow_tHashOutput_21.PRICE = row74.PRICE;
					oneRow_tHashOutput_21.PRICECURRENCYCODE = row74.PRICECURRENCYCODE;
					oneRow_tHashOutput_21.PRICECUSTOMERGROUPCODE = row74.PRICECUSTOMERGROUPCODE;
					oneRow_tHashOutput_21.PRODUCTCOLORID = row74.PRODUCTCOLORID;
					oneRow_tHashOutput_21.PRODUCTSIZEID = row74.PRODUCTSIZEID;
					oneRow_tHashOutput_21.PRODUCTSTYLEID = row74.PRODUCTSTYLEID;
					oneRow_tHashOutput_21.QUANTITYUNITSYMBOL = row74.QUANTITYUNITSYMBOL;
					oneRow_tHashOutput_21.SEASON = row74.SEASON;
					oneRow_tHashOutput_21.COUNTRY = row74.COUNTRY;
		
        tHashFile_tHashOutput_21.put(oneRow_tHashOutput_21);
        nb_line_tHashOutput_21 ++;
 


	tos_count_tHashOutput_21++;

/**
 * [tHashOutput_21 main ] stop
 */
	
	/**
	 * [tHashOutput_21 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_21";

	

 



/**
 * [tHashOutput_21 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_21 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_21";

	

 



/**
 * [tHashOutput_21 process_data_end ] stop
 */

} // End of branch "row74"




	
	/**
	 * [tFilterRow_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_14";

	

 



/**
 * [tFilterRow_14 process_data_end ] stop
 */

} // End of branch "row73"




	
	/**
	 * [tUniqRow_30 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_30";

	

 



/**
 * [tUniqRow_30 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0"




// Start of branch "sortie_full_EUR_FIN_WSP"
if(sortie_full_EUR_FIN_WSP != null) { 



	
	/**
	 * [tMap_34 main ] start
	 */

	

	
	
	currentComponent="tMap_34";

	

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_34 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_34 = false;
		  boolean mainRowRejected_tMap_34 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_34__Struct Var = Var__tMap_34;// ###############################
        // ###############################
        // # Output tables

copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0 = null;


// # Output table : 'copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0'
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0_tmp.TRADEAGREEMENTJOURNALNUMBER = "HBE1-" + globalMap.get("SalesJournalNumber");
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0_tmp.ITEMNUMBER = sortie_full_EUR_FIN_WSP.STYLE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0_tmp.PRICE = sortie_full_EUR_FIN_WSP.EUR_FINN_RRP  == null ? 0 : Mathematical.REAL( sortie_full_EUR_FIN_WSP.EUR_FINN_RRP.replaceAll(",", ".") ) ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0_tmp.PRICECURRENCYCODE = "EUR";
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0_tmp.PRICECUSTOMERGROUPCODE = "RRP";
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0_tmp.PRODUCTCOLORID = sortie_full_EUR_FIN_WSP.COLOR ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0_tmp.PRODUCTSIZEID = sortie_full_EUR_FIN_WSP.SIZE ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0_tmp.PRODUCTSTYLEID = sortie_full_EUR_FIN_WSP.LABELD365 ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0_tmp.QUANTITYUNITSYMBOL = "PCE";
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0_tmp.SEASON = sortie_full_EUR_FIN_WSP.SEASON ;
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0_tmp.COUNTRY = "FIN";
copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0 = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_34 = false;










 


	tos_count_tMap_34++;

/**
 * [tMap_34 main ] stop
 */
	
	/**
	 * [tMap_34 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_34";

	

 



/**
 * [tMap_34 process_data_begin ] stop
 */
// Start of branch "copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0"
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0 != null) { 



	
	/**
	 * [tUniqRow_31 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_31";

	
row75 = null;			
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.TRADEAGREEMENTJOURNALNUMBER == null){
	finder_tUniqRow_31.TRADEAGREEMENTJOURNALNUMBER = null;
}else{
	finder_tUniqRow_31.TRADEAGREEMENTJOURNALNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.TRADEAGREEMENTJOURNALNUMBER.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.ITEMNUMBER == null){
	finder_tUniqRow_31.ITEMNUMBER = null;
}else{
	finder_tUniqRow_31.ITEMNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.ITEMNUMBER.toLowerCase();
}
finder_tUniqRow_31.PRICE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRICE;
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRICECURRENCYCODE == null){
	finder_tUniqRow_31.PRICECURRENCYCODE = null;
}else{
	finder_tUniqRow_31.PRICECURRENCYCODE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRICECURRENCYCODE.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRICECUSTOMERGROUPCODE == null){
	finder_tUniqRow_31.PRICECUSTOMERGROUPCODE = null;
}else{
	finder_tUniqRow_31.PRICECUSTOMERGROUPCODE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRODUCTCOLORID == null){
	finder_tUniqRow_31.PRODUCTCOLORID = null;
}else{
	finder_tUniqRow_31.PRODUCTCOLORID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRODUCTCOLORID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRODUCTSIZEID == null){
	finder_tUniqRow_31.PRODUCTSIZEID = null;
}else{
	finder_tUniqRow_31.PRODUCTSIZEID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRODUCTSIZEID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRODUCTSTYLEID == null){
	finder_tUniqRow_31.PRODUCTSTYLEID = null;
}else{
	finder_tUniqRow_31.PRODUCTSTYLEID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRODUCTSTYLEID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.QUANTITYUNITSYMBOL == null){
	finder_tUniqRow_31.QUANTITYUNITSYMBOL = null;
}else{
	finder_tUniqRow_31.QUANTITYUNITSYMBOL = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.QUANTITYUNITSYMBOL.toLowerCase();
}	
finder_tUniqRow_31.hashCodeDirty = true;
if (!keystUniqRow_31.contains(finder_tUniqRow_31)) {
		KeyStruct_tUniqRow_31 new_tUniqRow_31 = new KeyStruct_tUniqRow_31();

		
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.TRADEAGREEMENTJOURNALNUMBER == null){
	new_tUniqRow_31.TRADEAGREEMENTJOURNALNUMBER = null;
}else{
	new_tUniqRow_31.TRADEAGREEMENTJOURNALNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.TRADEAGREEMENTJOURNALNUMBER.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.ITEMNUMBER == null){
	new_tUniqRow_31.ITEMNUMBER = null;
}else{
	new_tUniqRow_31.ITEMNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.ITEMNUMBER.toLowerCase();
}
new_tUniqRow_31.PRICE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRICE;
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRICECURRENCYCODE == null){
	new_tUniqRow_31.PRICECURRENCYCODE = null;
}else{
	new_tUniqRow_31.PRICECURRENCYCODE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRICECURRENCYCODE.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRICECUSTOMERGROUPCODE == null){
	new_tUniqRow_31.PRICECUSTOMERGROUPCODE = null;
}else{
	new_tUniqRow_31.PRICECUSTOMERGROUPCODE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRICECUSTOMERGROUPCODE.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRODUCTCOLORID == null){
	new_tUniqRow_31.PRODUCTCOLORID = null;
}else{
	new_tUniqRow_31.PRODUCTCOLORID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRODUCTCOLORID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRODUCTSIZEID == null){
	new_tUniqRow_31.PRODUCTSIZEID = null;
}else{
	new_tUniqRow_31.PRODUCTSIZEID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRODUCTSIZEID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRODUCTSTYLEID == null){
	new_tUniqRow_31.PRODUCTSTYLEID = null;
}else{
	new_tUniqRow_31.PRODUCTSTYLEID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRODUCTSTYLEID.toLowerCase();
}
if(copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.QUANTITYUNITSYMBOL == null){
	new_tUniqRow_31.QUANTITYUNITSYMBOL = null;
}else{
	new_tUniqRow_31.QUANTITYUNITSYMBOL = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.QUANTITYUNITSYMBOL.toLowerCase();
}
		
		keystUniqRow_31.add(new_tUniqRow_31);if(row75 == null){ 
	
	row75 = new row75Struct();
}row75.TRADEAGREEMENTJOURNALNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.TRADEAGREEMENTJOURNALNUMBER;			row75.ITEMNUMBER = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.ITEMNUMBER;			row75.PRICE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRICE;			row75.PRICECURRENCYCODE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRICECURRENCYCODE;			row75.PRICECUSTOMERGROUPCODE = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRICECUSTOMERGROUPCODE;			row75.PRODUCTCOLORID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRODUCTCOLORID;			row75.PRODUCTSIZEID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRODUCTSIZEID;			row75.PRODUCTSTYLEID = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.PRODUCTSTYLEID;			row75.QUANTITYUNITSYMBOL = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.QUANTITYUNITSYMBOL;			row75.SEASON = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.SEASON;			row75.COUNTRY = copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0.COUNTRY;					
		nb_uniques_tUniqRow_31++;
	} else {
	  nb_duplicates_tUniqRow_31++;
	}

 


	tos_count_tUniqRow_31++;

/**
 * [tUniqRow_31 main ] stop
 */
	
	/**
	 * [tUniqRow_31 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_31";

	

 



/**
 * [tUniqRow_31 process_data_begin ] stop
 */
// Start of branch "row75"
if(row75 != null) { 



	
	/**
	 * [tFilterRow_15 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_15";

	

          row76 = null;
    Operator_tFilterRow_15 ope_tFilterRow_15 = new Operator_tFilterRow_15("||");
            ope_tFilterRow_15.matches((row75.PRICE == null? false : row75.PRICE.compareTo(ParserUtils.parseTo_Double(String.valueOf(0))) > 0)
                           , "PRICE.compareTo(0) > 0 failed");
		 	
            ope_tFilterRow_15.matches((row75.PRODUCTSTYLEID == null? false : row75.PRODUCTSTYLEID.compareTo("SMS") == 0)
                           , "PRODUCTSTYLEID.compareTo(\"SMS\") == 0 failed");
    
    if (ope_tFilterRow_15.getMatchFlag()) {
              if(row76 == null){ 
                row76 = new row76Struct();
              }
               row76.TRADEAGREEMENTJOURNALNUMBER = row75.TRADEAGREEMENTJOURNALNUMBER;
               row76.ITEMNUMBER = row75.ITEMNUMBER;
               row76.PRICE = row75.PRICE;
               row76.PRICECURRENCYCODE = row75.PRICECURRENCYCODE;
               row76.PRICECUSTOMERGROUPCODE = row75.PRICECUSTOMERGROUPCODE;
               row76.PRODUCTCOLORID = row75.PRODUCTCOLORID;
               row76.PRODUCTSIZEID = row75.PRODUCTSIZEID;
               row76.PRODUCTSTYLEID = row75.PRODUCTSTYLEID;
               row76.QUANTITYUNITSYMBOL = row75.QUANTITYUNITSYMBOL;
               row76.SEASON = row75.SEASON;
               row76.COUNTRY = row75.COUNTRY;    
      nb_line_ok_tFilterRow_15++;
    } else {
      nb_line_reject_tFilterRow_15++;
    }

nb_line_tFilterRow_15++;

 


	tos_count_tFilterRow_15++;

/**
 * [tFilterRow_15 main ] stop
 */
	
	/**
	 * [tFilterRow_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_15";

	

 



/**
 * [tFilterRow_15 process_data_begin ] stop
 */
// Start of branch "row76"
if(row76 != null) { 



	
	/**
	 * [tHashOutput_22 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_22";

	



    
		row76Struct oneRow_tHashOutput_22 = new row76Struct();
				
					oneRow_tHashOutput_22.TRADEAGREEMENTJOURNALNUMBER = row76.TRADEAGREEMENTJOURNALNUMBER;
					oneRow_tHashOutput_22.ITEMNUMBER = row76.ITEMNUMBER;
					oneRow_tHashOutput_22.PRICE = row76.PRICE;
					oneRow_tHashOutput_22.PRICECURRENCYCODE = row76.PRICECURRENCYCODE;
					oneRow_tHashOutput_22.PRICECUSTOMERGROUPCODE = row76.PRICECUSTOMERGROUPCODE;
					oneRow_tHashOutput_22.PRODUCTCOLORID = row76.PRODUCTCOLORID;
					oneRow_tHashOutput_22.PRODUCTSIZEID = row76.PRODUCTSIZEID;
					oneRow_tHashOutput_22.PRODUCTSTYLEID = row76.PRODUCTSTYLEID;
					oneRow_tHashOutput_22.QUANTITYUNITSYMBOL = row76.QUANTITYUNITSYMBOL;
					oneRow_tHashOutput_22.SEASON = row76.SEASON;
					oneRow_tHashOutput_22.COUNTRY = row76.COUNTRY;
		
        tHashFile_tHashOutput_22.put(oneRow_tHashOutput_22);
        nb_line_tHashOutput_22 ++;
 


	tos_count_tHashOutput_22++;

/**
 * [tHashOutput_22 main ] stop
 */
	
	/**
	 * [tHashOutput_22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_22";

	

 



/**
 * [tHashOutput_22 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_22 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_22";

	

 



/**
 * [tHashOutput_22 process_data_end ] stop
 */

} // End of branch "row76"




	
	/**
	 * [tFilterRow_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_15";

	

 



/**
 * [tFilterRow_15 process_data_end ] stop
 */

} // End of branch "row75"




	
	/**
	 * [tUniqRow_31 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_31";

	

 



/**
 * [tUniqRow_31 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfcopyOfsortie_EUR_WSP_0_0_0_0"




	
	/**
	 * [tMap_34 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_34";

	

 



/**
 * [tMap_34 process_data_end ] stop
 */

} // End of branch "sortie_full_EUR_FIN_WSP"




	
	/**
	 * [tMap_33 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_33";

	

 



/**
 * [tMap_33 process_data_end ] stop
 */

} // End of branch "sortie_full_SEK_RRP"




	
	/**
	 * [tMap_32 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_32";

	

 



/**
 * [tMap_32 process_data_end ] stop
 */

} // End of branch "sortie_full_SEK_WSP"




	
	/**
	 * [tMap_31 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_31";

	

 



/**
 * [tMap_31 process_data_end ] stop
 */

} // End of branch "sortie_full_DKK_WSP"




	
	/**
	 * [tMap_30 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_30";

	

 



/**
 * [tMap_30 process_data_end ] stop
 */

} // End of branch "sortie_full_DKK_RRP"




	
	/**
	 * [tMap_29 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_29";

	

 



/**
 * [tMap_29 process_data_end ] stop
 */

} // End of branch "sortie_full_nok_rrp"




	
	/**
	 * [tMap_28 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_28";

	

 



/**
 * [tMap_28 process_data_end ] stop
 */

} // End of branch "sortie_full_NOK_WSP"




	
	/**
	 * [tMap_27 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_27";

	

 



/**
 * [tMap_27 process_data_end ] stop
 */

} // End of branch "sortie_full_chr_rrp"




	
	/**
	 * [tMap_26 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_26";

	

 



/**
 * [tMap_26 process_data_end ] stop
 */

} // End of branch "sortie_full_CHF_WSP"




	
	/**
	 * [tMap_25 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_25";

	

 



/**
 * [tMap_25 process_data_end ] stop
 */

} // End of branch "sortie_full_GBP_RRP"




	
	/**
	 * [tMap_24 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_24";

	

 



/**
 * [tMap_24 process_data_end ] stop
 */

} // End of branch "sortie_full_gbp_wsp"




	
	/**
	 * [tMap_23 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_23";

	

 



/**
 * [tMap_23 process_data_end ] stop
 */

} // End of branch "sortie_full_rrp_eur"




	
	/**
	 * [tMap_21 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_21";

	

 



/**
 * [tMap_21 process_data_end ] stop
 */

} // End of branch "sortie_full_eur_wsp"




	
	/**
	 * [tMap_20 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_20";

	

 



/**
 * [tMap_20 process_data_end ] stop
 */

} // End of branch "sortie_Excel"




	
	/**
	 * [tFilterRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

 



/**
 * [tFilterRow_1 process_data_end ] stop
 */

} // End of branch "sortie_Excel1"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_5 end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

	}
}finally{
	if (rs_tDBInput_5 != null) {
		rs_tDBInput_5.close();
	}
	if (stmt_tDBInput_5 != null) {
		stmt_tDBInput_5.close();
	}
		if(conn_tDBInput_5 != null && !conn_tDBInput_5.isClosed()) {
			
			conn_tDBInput_5.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_5_NB_LINE",nb_line_tDBInput_5);

 

ok_Hash.put("tDBInput_5", true);
end_Hash.put("tDBInput_5", System.currentTimeMillis());

				tWarn_1Process(globalMap);



/**
 * [tDBInput_5 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tFilterRow_1 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	
    globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
    globalMap.put("tFilterRow_1_NB_LINE_OK", nb_line_ok_tFilterRow_1);
    globalMap.put("tFilterRow_1_NB_LINE_REJECT", nb_line_reject_tFilterRow_1);
    

 

ok_Hash.put("tFilterRow_1", true);
end_Hash.put("tFilterRow_1", System.currentTimeMillis());




/**
 * [tFilterRow_1 end ] stop
 */

	
	/**
	 * [tMap_20 end ] start
	 */

	

	
	
	currentComponent="tMap_20";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_copyOfcopyOfsortie_fashion != null) {
						tHash_Lookup_copyOfcopyOfsortie_fashion.endGet();
					}
					globalMap.remove( "tHash_Lookup_copyOfcopyOfsortie_fashion" );

					
					
				
// ###############################      





 

ok_Hash.put("tMap_20", true);
end_Hash.put("tMap_20", System.currentTimeMillis());




/**
 * [tMap_20 end ] stop
 */

	
	/**
	 * [tUniqRow_18 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_18";

	

globalMap.put("tUniqRow_18_NB_UNIQUES",nb_uniques_tUniqRow_18);
globalMap.put("tUniqRow_18_NB_DUPLICATES",nb_duplicates_tUniqRow_18);

 

ok_Hash.put("tUniqRow_18", true);
end_Hash.put("tUniqRow_18", System.currentTimeMillis());




/**
 * [tUniqRow_18 end ] stop
 */

	
	/**
	 * [tFilterRow_2 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";

	
    globalMap.put("tFilterRow_2_NB_LINE", nb_line_tFilterRow_2);
    globalMap.put("tFilterRow_2_NB_LINE_OK", nb_line_ok_tFilterRow_2);
    globalMap.put("tFilterRow_2_NB_LINE_REJECT", nb_line_reject_tFilterRow_2);
    

 

ok_Hash.put("tFilterRow_2", true);
end_Hash.put("tFilterRow_2", System.currentTimeMillis());




/**
 * [tFilterRow_2 end ] stop
 */

	
	/**
	 * [tHashOutput_9 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_9";

	
globalMap.put("tHashOutput_9_NB_LINE", nb_line_tHashOutput_9);
 

ok_Hash.put("tHashOutput_9", true);
end_Hash.put("tHashOutput_9", System.currentTimeMillis());




/**
 * [tHashOutput_9 end ] stop
 */










	
	/**
	 * [tMap_21 end ] start
	 */

	

	
	
	currentComponent="tMap_21";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





 

ok_Hash.put("tMap_21", true);
end_Hash.put("tMap_21", System.currentTimeMillis());




/**
 * [tMap_21 end ] stop
 */

	
	/**
	 * [tUniqRow_19 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_19";

	

globalMap.put("tUniqRow_19_NB_UNIQUES",nb_uniques_tUniqRow_19);
globalMap.put("tUniqRow_19_NB_DUPLICATES",nb_duplicates_tUniqRow_19);

 

ok_Hash.put("tUniqRow_19", true);
end_Hash.put("tUniqRow_19", System.currentTimeMillis());




/**
 * [tUniqRow_19 end ] stop
 */

	
	/**
	 * [tFilterRow_3 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_3";

	
    globalMap.put("tFilterRow_3_NB_LINE", nb_line_tFilterRow_3);
    globalMap.put("tFilterRow_3_NB_LINE_OK", nb_line_ok_tFilterRow_3);
    globalMap.put("tFilterRow_3_NB_LINE_REJECT", nb_line_reject_tFilterRow_3);
    

 

ok_Hash.put("tFilterRow_3", true);
end_Hash.put("tFilterRow_3", System.currentTimeMillis());




/**
 * [tFilterRow_3 end ] stop
 */

	
	/**
	 * [tHashOutput_10 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_10";

	
globalMap.put("tHashOutput_10_NB_LINE", nb_line_tHashOutput_10);
 

ok_Hash.put("tHashOutput_10", true);
end_Hash.put("tHashOutput_10", System.currentTimeMillis());




/**
 * [tHashOutput_10 end ] stop
 */










	
	/**
	 * [tMap_23 end ] start
	 */

	

	
	
	currentComponent="tMap_23";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





 

ok_Hash.put("tMap_23", true);
end_Hash.put("tMap_23", System.currentTimeMillis());




/**
 * [tMap_23 end ] stop
 */

	
	/**
	 * [tUniqRow_20 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_20";

	

globalMap.put("tUniqRow_20_NB_UNIQUES",nb_uniques_tUniqRow_20);
globalMap.put("tUniqRow_20_NB_DUPLICATES",nb_duplicates_tUniqRow_20);

 

ok_Hash.put("tUniqRow_20", true);
end_Hash.put("tUniqRow_20", System.currentTimeMillis());




/**
 * [tUniqRow_20 end ] stop
 */

	
	/**
	 * [tFilterRow_4 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_4";

	
    globalMap.put("tFilterRow_4_NB_LINE", nb_line_tFilterRow_4);
    globalMap.put("tFilterRow_4_NB_LINE_OK", nb_line_ok_tFilterRow_4);
    globalMap.put("tFilterRow_4_NB_LINE_REJECT", nb_line_reject_tFilterRow_4);
    

 

ok_Hash.put("tFilterRow_4", true);
end_Hash.put("tFilterRow_4", System.currentTimeMillis());




/**
 * [tFilterRow_4 end ] stop
 */

	
	/**
	 * [tHashOutput_11 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_11";

	
globalMap.put("tHashOutput_11_NB_LINE", nb_line_tHashOutput_11);
 

ok_Hash.put("tHashOutput_11", true);
end_Hash.put("tHashOutput_11", System.currentTimeMillis());




/**
 * [tHashOutput_11 end ] stop
 */










	
	/**
	 * [tMap_24 end ] start
	 */

	

	
	
	currentComponent="tMap_24";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





 

ok_Hash.put("tMap_24", true);
end_Hash.put("tMap_24", System.currentTimeMillis());




/**
 * [tMap_24 end ] stop
 */

	
	/**
	 * [tUniqRow_21 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_21";

	

globalMap.put("tUniqRow_21_NB_UNIQUES",nb_uniques_tUniqRow_21);
globalMap.put("tUniqRow_21_NB_DUPLICATES",nb_duplicates_tUniqRow_21);

 

ok_Hash.put("tUniqRow_21", true);
end_Hash.put("tUniqRow_21", System.currentTimeMillis());




/**
 * [tUniqRow_21 end ] stop
 */

	
	/**
	 * [tFilterRow_5 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_5";

	
    globalMap.put("tFilterRow_5_NB_LINE", nb_line_tFilterRow_5);
    globalMap.put("tFilterRow_5_NB_LINE_OK", nb_line_ok_tFilterRow_5);
    globalMap.put("tFilterRow_5_NB_LINE_REJECT", nb_line_reject_tFilterRow_5);
    

 

ok_Hash.put("tFilterRow_5", true);
end_Hash.put("tFilterRow_5", System.currentTimeMillis());




/**
 * [tFilterRow_5 end ] stop
 */

	
	/**
	 * [tHashOutput_12 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_12";

	
globalMap.put("tHashOutput_12_NB_LINE", nb_line_tHashOutput_12);
 

ok_Hash.put("tHashOutput_12", true);
end_Hash.put("tHashOutput_12", System.currentTimeMillis());




/**
 * [tHashOutput_12 end ] stop
 */










	
	/**
	 * [tMap_25 end ] start
	 */

	

	
	
	currentComponent="tMap_25";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





 

ok_Hash.put("tMap_25", true);
end_Hash.put("tMap_25", System.currentTimeMillis());




/**
 * [tMap_25 end ] stop
 */

	
	/**
	 * [tUniqRow_22 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_22";

	

globalMap.put("tUniqRow_22_NB_UNIQUES",nb_uniques_tUniqRow_22);
globalMap.put("tUniqRow_22_NB_DUPLICATES",nb_duplicates_tUniqRow_22);

 

ok_Hash.put("tUniqRow_22", true);
end_Hash.put("tUniqRow_22", System.currentTimeMillis());




/**
 * [tUniqRow_22 end ] stop
 */

	
	/**
	 * [tFilterRow_6 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_6";

	
    globalMap.put("tFilterRow_6_NB_LINE", nb_line_tFilterRow_6);
    globalMap.put("tFilterRow_6_NB_LINE_OK", nb_line_ok_tFilterRow_6);
    globalMap.put("tFilterRow_6_NB_LINE_REJECT", nb_line_reject_tFilterRow_6);
    

 

ok_Hash.put("tFilterRow_6", true);
end_Hash.put("tFilterRow_6", System.currentTimeMillis());




/**
 * [tFilterRow_6 end ] stop
 */

	
	/**
	 * [tHashOutput_13 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_13";

	
globalMap.put("tHashOutput_13_NB_LINE", nb_line_tHashOutput_13);
 

ok_Hash.put("tHashOutput_13", true);
end_Hash.put("tHashOutput_13", System.currentTimeMillis());




/**
 * [tHashOutput_13 end ] stop
 */










	
	/**
	 * [tMap_26 end ] start
	 */

	

	
	
	currentComponent="tMap_26";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





 

ok_Hash.put("tMap_26", true);
end_Hash.put("tMap_26", System.currentTimeMillis());




/**
 * [tMap_26 end ] stop
 */

	
	/**
	 * [tUniqRow_23 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_23";

	

globalMap.put("tUniqRow_23_NB_UNIQUES",nb_uniques_tUniqRow_23);
globalMap.put("tUniqRow_23_NB_DUPLICATES",nb_duplicates_tUniqRow_23);

 

ok_Hash.put("tUniqRow_23", true);
end_Hash.put("tUniqRow_23", System.currentTimeMillis());




/**
 * [tUniqRow_23 end ] stop
 */

	
	/**
	 * [tFilterRow_7 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_7";

	
    globalMap.put("tFilterRow_7_NB_LINE", nb_line_tFilterRow_7);
    globalMap.put("tFilterRow_7_NB_LINE_OK", nb_line_ok_tFilterRow_7);
    globalMap.put("tFilterRow_7_NB_LINE_REJECT", nb_line_reject_tFilterRow_7);
    

 

ok_Hash.put("tFilterRow_7", true);
end_Hash.put("tFilterRow_7", System.currentTimeMillis());




/**
 * [tFilterRow_7 end ] stop
 */

	
	/**
	 * [tHashOutput_14 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_14";

	
globalMap.put("tHashOutput_14_NB_LINE", nb_line_tHashOutput_14);
 

ok_Hash.put("tHashOutput_14", true);
end_Hash.put("tHashOutput_14", System.currentTimeMillis());




/**
 * [tHashOutput_14 end ] stop
 */










	
	/**
	 * [tMap_27 end ] start
	 */

	

	
	
	currentComponent="tMap_27";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





 

ok_Hash.put("tMap_27", true);
end_Hash.put("tMap_27", System.currentTimeMillis());




/**
 * [tMap_27 end ] stop
 */

	
	/**
	 * [tUniqRow_24 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_24";

	

globalMap.put("tUniqRow_24_NB_UNIQUES",nb_uniques_tUniqRow_24);
globalMap.put("tUniqRow_24_NB_DUPLICATES",nb_duplicates_tUniqRow_24);

 

ok_Hash.put("tUniqRow_24", true);
end_Hash.put("tUniqRow_24", System.currentTimeMillis());




/**
 * [tUniqRow_24 end ] stop
 */

	
	/**
	 * [tFilterRow_8 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_8";

	
    globalMap.put("tFilterRow_8_NB_LINE", nb_line_tFilterRow_8);
    globalMap.put("tFilterRow_8_NB_LINE_OK", nb_line_ok_tFilterRow_8);
    globalMap.put("tFilterRow_8_NB_LINE_REJECT", nb_line_reject_tFilterRow_8);
    

 

ok_Hash.put("tFilterRow_8", true);
end_Hash.put("tFilterRow_8", System.currentTimeMillis());




/**
 * [tFilterRow_8 end ] stop
 */

	
	/**
	 * [tHashOutput_15 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_15";

	
globalMap.put("tHashOutput_15_NB_LINE", nb_line_tHashOutput_15);
 

ok_Hash.put("tHashOutput_15", true);
end_Hash.put("tHashOutput_15", System.currentTimeMillis());




/**
 * [tHashOutput_15 end ] stop
 */










	
	/**
	 * [tMap_28 end ] start
	 */

	

	
	
	currentComponent="tMap_28";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





 

ok_Hash.put("tMap_28", true);
end_Hash.put("tMap_28", System.currentTimeMillis());




/**
 * [tMap_28 end ] stop
 */

	
	/**
	 * [tUniqRow_25 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_25";

	

globalMap.put("tUniqRow_25_NB_UNIQUES",nb_uniques_tUniqRow_25);
globalMap.put("tUniqRow_25_NB_DUPLICATES",nb_duplicates_tUniqRow_25);

 

ok_Hash.put("tUniqRow_25", true);
end_Hash.put("tUniqRow_25", System.currentTimeMillis());




/**
 * [tUniqRow_25 end ] stop
 */

	
	/**
	 * [tFilterRow_9 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_9";

	
    globalMap.put("tFilterRow_9_NB_LINE", nb_line_tFilterRow_9);
    globalMap.put("tFilterRow_9_NB_LINE_OK", nb_line_ok_tFilterRow_9);
    globalMap.put("tFilterRow_9_NB_LINE_REJECT", nb_line_reject_tFilterRow_9);
    

 

ok_Hash.put("tFilterRow_9", true);
end_Hash.put("tFilterRow_9", System.currentTimeMillis());




/**
 * [tFilterRow_9 end ] stop
 */

	
	/**
	 * [tHashOutput_16 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_16";

	
globalMap.put("tHashOutput_16_NB_LINE", nb_line_tHashOutput_16);
 

ok_Hash.put("tHashOutput_16", true);
end_Hash.put("tHashOutput_16", System.currentTimeMillis());




/**
 * [tHashOutput_16 end ] stop
 */










	
	/**
	 * [tMap_29 end ] start
	 */

	

	
	
	currentComponent="tMap_29";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





 

ok_Hash.put("tMap_29", true);
end_Hash.put("tMap_29", System.currentTimeMillis());




/**
 * [tMap_29 end ] stop
 */

	
	/**
	 * [tUniqRow_26 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_26";

	

globalMap.put("tUniqRow_26_NB_UNIQUES",nb_uniques_tUniqRow_26);
globalMap.put("tUniqRow_26_NB_DUPLICATES",nb_duplicates_tUniqRow_26);

 

ok_Hash.put("tUniqRow_26", true);
end_Hash.put("tUniqRow_26", System.currentTimeMillis());




/**
 * [tUniqRow_26 end ] stop
 */

	
	/**
	 * [tFilterRow_10 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_10";

	
    globalMap.put("tFilterRow_10_NB_LINE", nb_line_tFilterRow_10);
    globalMap.put("tFilterRow_10_NB_LINE_OK", nb_line_ok_tFilterRow_10);
    globalMap.put("tFilterRow_10_NB_LINE_REJECT", nb_line_reject_tFilterRow_10);
    

 

ok_Hash.put("tFilterRow_10", true);
end_Hash.put("tFilterRow_10", System.currentTimeMillis());




/**
 * [tFilterRow_10 end ] stop
 */

	
	/**
	 * [tHashOutput_17 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_17";

	
globalMap.put("tHashOutput_17_NB_LINE", nb_line_tHashOutput_17);
 

ok_Hash.put("tHashOutput_17", true);
end_Hash.put("tHashOutput_17", System.currentTimeMillis());




/**
 * [tHashOutput_17 end ] stop
 */










	
	/**
	 * [tMap_30 end ] start
	 */

	

	
	
	currentComponent="tMap_30";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





 

ok_Hash.put("tMap_30", true);
end_Hash.put("tMap_30", System.currentTimeMillis());




/**
 * [tMap_30 end ] stop
 */

	
	/**
	 * [tUniqRow_27 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_27";

	

globalMap.put("tUniqRow_27_NB_UNIQUES",nb_uniques_tUniqRow_27);
globalMap.put("tUniqRow_27_NB_DUPLICATES",nb_duplicates_tUniqRow_27);

 

ok_Hash.put("tUniqRow_27", true);
end_Hash.put("tUniqRow_27", System.currentTimeMillis());




/**
 * [tUniqRow_27 end ] stop
 */

	
	/**
	 * [tFilterRow_11 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_11";

	
    globalMap.put("tFilterRow_11_NB_LINE", nb_line_tFilterRow_11);
    globalMap.put("tFilterRow_11_NB_LINE_OK", nb_line_ok_tFilterRow_11);
    globalMap.put("tFilterRow_11_NB_LINE_REJECT", nb_line_reject_tFilterRow_11);
    

 

ok_Hash.put("tFilterRow_11", true);
end_Hash.put("tFilterRow_11", System.currentTimeMillis());




/**
 * [tFilterRow_11 end ] stop
 */

	
	/**
	 * [tHashOutput_18 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_18";

	
globalMap.put("tHashOutput_18_NB_LINE", nb_line_tHashOutput_18);
 

ok_Hash.put("tHashOutput_18", true);
end_Hash.put("tHashOutput_18", System.currentTimeMillis());




/**
 * [tHashOutput_18 end ] stop
 */










	
	/**
	 * [tMap_31 end ] start
	 */

	

	
	
	currentComponent="tMap_31";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





 

ok_Hash.put("tMap_31", true);
end_Hash.put("tMap_31", System.currentTimeMillis());




/**
 * [tMap_31 end ] stop
 */

	
	/**
	 * [tUniqRow_28 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_28";

	

globalMap.put("tUniqRow_28_NB_UNIQUES",nb_uniques_tUniqRow_28);
globalMap.put("tUniqRow_28_NB_DUPLICATES",nb_duplicates_tUniqRow_28);

 

ok_Hash.put("tUniqRow_28", true);
end_Hash.put("tUniqRow_28", System.currentTimeMillis());




/**
 * [tUniqRow_28 end ] stop
 */

	
	/**
	 * [tFilterRow_12 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_12";

	
    globalMap.put("tFilterRow_12_NB_LINE", nb_line_tFilterRow_12);
    globalMap.put("tFilterRow_12_NB_LINE_OK", nb_line_ok_tFilterRow_12);
    globalMap.put("tFilterRow_12_NB_LINE_REJECT", nb_line_reject_tFilterRow_12);
    

 

ok_Hash.put("tFilterRow_12", true);
end_Hash.put("tFilterRow_12", System.currentTimeMillis());




/**
 * [tFilterRow_12 end ] stop
 */

	
	/**
	 * [tHashOutput_19 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_19";

	
globalMap.put("tHashOutput_19_NB_LINE", nb_line_tHashOutput_19);
 

ok_Hash.put("tHashOutput_19", true);
end_Hash.put("tHashOutput_19", System.currentTimeMillis());




/**
 * [tHashOutput_19 end ] stop
 */










	
	/**
	 * [tMap_32 end ] start
	 */

	

	
	
	currentComponent="tMap_32";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





 

ok_Hash.put("tMap_32", true);
end_Hash.put("tMap_32", System.currentTimeMillis());




/**
 * [tMap_32 end ] stop
 */

	
	/**
	 * [tUniqRow_29 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_29";

	

globalMap.put("tUniqRow_29_NB_UNIQUES",nb_uniques_tUniqRow_29);
globalMap.put("tUniqRow_29_NB_DUPLICATES",nb_duplicates_tUniqRow_29);

 

ok_Hash.put("tUniqRow_29", true);
end_Hash.put("tUniqRow_29", System.currentTimeMillis());




/**
 * [tUniqRow_29 end ] stop
 */

	
	/**
	 * [tFilterRow_13 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_13";

	
    globalMap.put("tFilterRow_13_NB_LINE", nb_line_tFilterRow_13);
    globalMap.put("tFilterRow_13_NB_LINE_OK", nb_line_ok_tFilterRow_13);
    globalMap.put("tFilterRow_13_NB_LINE_REJECT", nb_line_reject_tFilterRow_13);
    

 

ok_Hash.put("tFilterRow_13", true);
end_Hash.put("tFilterRow_13", System.currentTimeMillis());




/**
 * [tFilterRow_13 end ] stop
 */

	
	/**
	 * [tHashOutput_20 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_20";

	
globalMap.put("tHashOutput_20_NB_LINE", nb_line_tHashOutput_20);
 

ok_Hash.put("tHashOutput_20", true);
end_Hash.put("tHashOutput_20", System.currentTimeMillis());




/**
 * [tHashOutput_20 end ] stop
 */










	
	/**
	 * [tMap_33 end ] start
	 */

	

	
	
	currentComponent="tMap_33";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





 

ok_Hash.put("tMap_33", true);
end_Hash.put("tMap_33", System.currentTimeMillis());




/**
 * [tMap_33 end ] stop
 */

	
	/**
	 * [tUniqRow_30 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_30";

	

globalMap.put("tUniqRow_30_NB_UNIQUES",nb_uniques_tUniqRow_30);
globalMap.put("tUniqRow_30_NB_DUPLICATES",nb_duplicates_tUniqRow_30);

 

ok_Hash.put("tUniqRow_30", true);
end_Hash.put("tUniqRow_30", System.currentTimeMillis());




/**
 * [tUniqRow_30 end ] stop
 */

	
	/**
	 * [tFilterRow_14 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_14";

	
    globalMap.put("tFilterRow_14_NB_LINE", nb_line_tFilterRow_14);
    globalMap.put("tFilterRow_14_NB_LINE_OK", nb_line_ok_tFilterRow_14);
    globalMap.put("tFilterRow_14_NB_LINE_REJECT", nb_line_reject_tFilterRow_14);
    

 

ok_Hash.put("tFilterRow_14", true);
end_Hash.put("tFilterRow_14", System.currentTimeMillis());




/**
 * [tFilterRow_14 end ] stop
 */

	
	/**
	 * [tHashOutput_21 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_21";

	
globalMap.put("tHashOutput_21_NB_LINE", nb_line_tHashOutput_21);
 

ok_Hash.put("tHashOutput_21", true);
end_Hash.put("tHashOutput_21", System.currentTimeMillis());




/**
 * [tHashOutput_21 end ] stop
 */










	
	/**
	 * [tMap_34 end ] start
	 */

	

	
	
	currentComponent="tMap_34";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





 

ok_Hash.put("tMap_34", true);
end_Hash.put("tMap_34", System.currentTimeMillis());




/**
 * [tMap_34 end ] stop
 */

	
	/**
	 * [tUniqRow_31 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_31";

	

globalMap.put("tUniqRow_31_NB_UNIQUES",nb_uniques_tUniqRow_31);
globalMap.put("tUniqRow_31_NB_DUPLICATES",nb_duplicates_tUniqRow_31);

 

ok_Hash.put("tUniqRow_31", true);
end_Hash.put("tUniqRow_31", System.currentTimeMillis());




/**
 * [tUniqRow_31 end ] stop
 */

	
	/**
	 * [tFilterRow_15 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_15";

	
    globalMap.put("tFilterRow_15_NB_LINE", nb_line_tFilterRow_15);
    globalMap.put("tFilterRow_15_NB_LINE_OK", nb_line_ok_tFilterRow_15);
    globalMap.put("tFilterRow_15_NB_LINE_REJECT", nb_line_reject_tFilterRow_15);
    

 

ok_Hash.put("tFilterRow_15", true);
end_Hash.put("tFilterRow_15", System.currentTimeMillis());




/**
 * [tFilterRow_15 end ] stop
 */

	
	/**
	 * [tHashOutput_22 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_22";

	
globalMap.put("tHashOutput_22_NB_LINE", nb_line_tHashOutput_22);
 

ok_Hash.put("tHashOutput_22", true);
end_Hash.put("tHashOutput_22", System.currentTimeMillis());




/**
 * [tHashOutput_22 end ] stop
 */

























































				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_5:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
							tHashInput_9Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_20"
					     			globalMap.remove("tHash_Lookup_copyOfcopyOfsortie_fashion"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_5 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tFilterRow_1 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

 



/**
 * [tFilterRow_1 finally ] stop
 */

	
	/**
	 * [tMap_20 finally ] start
	 */

	

	
	
	currentComponent="tMap_20";

	

 



/**
 * [tMap_20 finally ] stop
 */

	
	/**
	 * [tUniqRow_18 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_18";

	

 



/**
 * [tUniqRow_18 finally ] stop
 */

	
	/**
	 * [tFilterRow_2 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";

	

 



/**
 * [tFilterRow_2 finally ] stop
 */

	
	/**
	 * [tHashOutput_9 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_9";

	

 



/**
 * [tHashOutput_9 finally ] stop
 */










	
	/**
	 * [tMap_21 finally ] start
	 */

	

	
	
	currentComponent="tMap_21";

	

 



/**
 * [tMap_21 finally ] stop
 */

	
	/**
	 * [tUniqRow_19 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_19";

	

 



/**
 * [tUniqRow_19 finally ] stop
 */

	
	/**
	 * [tFilterRow_3 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_3";

	

 



/**
 * [tFilterRow_3 finally ] stop
 */

	
	/**
	 * [tHashOutput_10 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_10";

	

 



/**
 * [tHashOutput_10 finally ] stop
 */










	
	/**
	 * [tMap_23 finally ] start
	 */

	

	
	
	currentComponent="tMap_23";

	

 



/**
 * [tMap_23 finally ] stop
 */

	
	/**
	 * [tUniqRow_20 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_20";

	

 



/**
 * [tUniqRow_20 finally ] stop
 */

	
	/**
	 * [tFilterRow_4 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_4";

	

 



/**
 * [tFilterRow_4 finally ] stop
 */

	
	/**
	 * [tHashOutput_11 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_11";

	

 



/**
 * [tHashOutput_11 finally ] stop
 */










	
	/**
	 * [tMap_24 finally ] start
	 */

	

	
	
	currentComponent="tMap_24";

	

 



/**
 * [tMap_24 finally ] stop
 */

	
	/**
	 * [tUniqRow_21 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_21";

	

 



/**
 * [tUniqRow_21 finally ] stop
 */

	
	/**
	 * [tFilterRow_5 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_5";

	

 



/**
 * [tFilterRow_5 finally ] stop
 */

	
	/**
	 * [tHashOutput_12 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_12";

	

 



/**
 * [tHashOutput_12 finally ] stop
 */










	
	/**
	 * [tMap_25 finally ] start
	 */

	

	
	
	currentComponent="tMap_25";

	

 



/**
 * [tMap_25 finally ] stop
 */

	
	/**
	 * [tUniqRow_22 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_22";

	

 



/**
 * [tUniqRow_22 finally ] stop
 */

	
	/**
	 * [tFilterRow_6 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_6";

	

 



/**
 * [tFilterRow_6 finally ] stop
 */

	
	/**
	 * [tHashOutput_13 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_13";

	

 



/**
 * [tHashOutput_13 finally ] stop
 */










	
	/**
	 * [tMap_26 finally ] start
	 */

	

	
	
	currentComponent="tMap_26";

	

 



/**
 * [tMap_26 finally ] stop
 */

	
	/**
	 * [tUniqRow_23 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_23";

	

 



/**
 * [tUniqRow_23 finally ] stop
 */

	
	/**
	 * [tFilterRow_7 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_7";

	

 



/**
 * [tFilterRow_7 finally ] stop
 */

	
	/**
	 * [tHashOutput_14 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_14";

	

 



/**
 * [tHashOutput_14 finally ] stop
 */










	
	/**
	 * [tMap_27 finally ] start
	 */

	

	
	
	currentComponent="tMap_27";

	

 



/**
 * [tMap_27 finally ] stop
 */

	
	/**
	 * [tUniqRow_24 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_24";

	

 



/**
 * [tUniqRow_24 finally ] stop
 */

	
	/**
	 * [tFilterRow_8 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_8";

	

 



/**
 * [tFilterRow_8 finally ] stop
 */

	
	/**
	 * [tHashOutput_15 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_15";

	

 



/**
 * [tHashOutput_15 finally ] stop
 */










	
	/**
	 * [tMap_28 finally ] start
	 */

	

	
	
	currentComponent="tMap_28";

	

 



/**
 * [tMap_28 finally ] stop
 */

	
	/**
	 * [tUniqRow_25 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_25";

	

 



/**
 * [tUniqRow_25 finally ] stop
 */

	
	/**
	 * [tFilterRow_9 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_9";

	

 



/**
 * [tFilterRow_9 finally ] stop
 */

	
	/**
	 * [tHashOutput_16 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_16";

	

 



/**
 * [tHashOutput_16 finally ] stop
 */










	
	/**
	 * [tMap_29 finally ] start
	 */

	

	
	
	currentComponent="tMap_29";

	

 



/**
 * [tMap_29 finally ] stop
 */

	
	/**
	 * [tUniqRow_26 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_26";

	

 



/**
 * [tUniqRow_26 finally ] stop
 */

	
	/**
	 * [tFilterRow_10 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_10";

	

 



/**
 * [tFilterRow_10 finally ] stop
 */

	
	/**
	 * [tHashOutput_17 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_17";

	

 



/**
 * [tHashOutput_17 finally ] stop
 */










	
	/**
	 * [tMap_30 finally ] start
	 */

	

	
	
	currentComponent="tMap_30";

	

 



/**
 * [tMap_30 finally ] stop
 */

	
	/**
	 * [tUniqRow_27 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_27";

	

 



/**
 * [tUniqRow_27 finally ] stop
 */

	
	/**
	 * [tFilterRow_11 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_11";

	

 



/**
 * [tFilterRow_11 finally ] stop
 */

	
	/**
	 * [tHashOutput_18 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_18";

	

 



/**
 * [tHashOutput_18 finally ] stop
 */










	
	/**
	 * [tMap_31 finally ] start
	 */

	

	
	
	currentComponent="tMap_31";

	

 



/**
 * [tMap_31 finally ] stop
 */

	
	/**
	 * [tUniqRow_28 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_28";

	

 



/**
 * [tUniqRow_28 finally ] stop
 */

	
	/**
	 * [tFilterRow_12 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_12";

	

 



/**
 * [tFilterRow_12 finally ] stop
 */

	
	/**
	 * [tHashOutput_19 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_19";

	

 



/**
 * [tHashOutput_19 finally ] stop
 */










	
	/**
	 * [tMap_32 finally ] start
	 */

	

	
	
	currentComponent="tMap_32";

	

 



/**
 * [tMap_32 finally ] stop
 */

	
	/**
	 * [tUniqRow_29 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_29";

	

 



/**
 * [tUniqRow_29 finally ] stop
 */

	
	/**
	 * [tFilterRow_13 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_13";

	

 



/**
 * [tFilterRow_13 finally ] stop
 */

	
	/**
	 * [tHashOutput_20 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_20";

	

 



/**
 * [tHashOutput_20 finally ] stop
 */










	
	/**
	 * [tMap_33 finally ] start
	 */

	

	
	
	currentComponent="tMap_33";

	

 



/**
 * [tMap_33 finally ] stop
 */

	
	/**
	 * [tUniqRow_30 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_30";

	

 



/**
 * [tUniqRow_30 finally ] stop
 */

	
	/**
	 * [tFilterRow_14 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_14";

	

 



/**
 * [tFilterRow_14 finally ] stop
 */

	
	/**
	 * [tHashOutput_21 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_21";

	

 



/**
 * [tHashOutput_21 finally ] stop
 */










	
	/**
	 * [tMap_34 finally ] start
	 */

	

	
	
	currentComponent="tMap_34";

	

 



/**
 * [tMap_34 finally ] stop
 */

	
	/**
	 * [tUniqRow_31 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_31";

	

 



/**
 * [tUniqRow_31 finally ] stop
 */

	
	/**
	 * [tFilterRow_15 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_15";

	

 



/**
 * [tFilterRow_15 finally ] stop
 */

	
	/**
	 * [tHashOutput_22 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_22";

	

 



/**
 * [tHashOutput_22 finally ] stop
 */

























































				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 1);
	}
	

public void tWarn_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWarn_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tWarn_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tWarn_1", false);
		start_Hash.put("tWarn_1", System.currentTimeMillis());
		
	
	currentComponent="tWarn_1";

	
		int tos_count_tWarn_1 = 0;
		

 



/**
 * [tWarn_1 begin ] stop
 */
	
	/**
	 * [tWarn_1 main ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

		
try {
	
	resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_1", "", Thread.currentThread().getId() + "", "INFO","","Nb line found :" + ((Integer)globalMap.get("tDBInput_5_NB_LINE")),"", "");
	talendLogs_LOGS.addMessage("tWarn", "tWarn_1", 3, "Nb line found :" + ((Integer)globalMap.get("tDBInput_5_NB_LINE")), 3);
	talendLogs_LOGSProcess(globalMap);
	globalMap.put("tWarn_1_WARN_MESSAGES", "Nb line found :" + ((Integer)globalMap.get("tDBInput_5_NB_LINE"))); 
	globalMap.put("tWarn_1_WARN_PRIORITY", 3);
	globalMap.put("tWarn_1_WARN_CODE", 3);
	
} catch (Exception e_tWarn_1) {
	logIgnoredError(String.format("tWarn_1 - tWarn failed to log message due to internal error: %s", e_tWarn_1), e_tWarn_1);
}


 


	tos_count_tWarn_1++;

/**
 * [tWarn_1 main ] stop
 */
	
	/**
	 * [tWarn_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

 



/**
 * [tWarn_1 process_data_begin ] stop
 */
	
	/**
	 * [tWarn_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

 



/**
 * [tWarn_1 process_data_end ] stop
 */
	
	/**
	 * [tWarn_1 end ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

 

ok_Hash.put("tWarn_1", true);
end_Hash.put("tWarn_1", System.currentTimeMillis());




/**
 * [tWarn_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWarn_1 finally ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

 



/**
 * [tWarn_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWarn_1_SUBPROCESS_STATE", 1);
	}
	


public static class copyOfcopyOfsortie_fashionStruct implements routines.system.IPersistableComparableLookupRow<copyOfcopyOfsortie_fashionStruct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String CODE;

				public String getCODE () {
					return this.CODE;
				}
				
			    public String LABEL;

				public String getLABEL () {
					return this.LABEL;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CODE == null) ? 0 : this.CODE.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final copyOfcopyOfsortie_fashionStruct other = (copyOfcopyOfsortie_fashionStruct) obj;
		
						if (this.CODE == null) {
							if (other.CODE != null)
								return false;
						
						} else if (!this.CODE.equals(other.CODE))
						
							return false;
					

		return true;
    }

	public void copyDataTo(copyOfcopyOfsortie_fashionStruct other) {

		other.CODE = this.CODE;
	            other.LABEL = this.LABEL;
	            
	}

	public void copyKeysDataTo(copyOfcopyOfsortie_fashionStruct other) {

		other.CODE = this.CODE;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.CODE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CODE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.LABEL = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.LABEL, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CODE="+CODE);
		sb.append(",LABEL="+LABEL);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfsortie_fashionStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CODE, other.CODE);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row24Struct implements routines.system.IPersistableRow<row24Struct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public String Label_Code;

				public String getLabel_Code () {
					return this.Label_Code;
				}
				
			    public String Label_D365;

				public String getLabel_D365 () {
					return this.Label_D365;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.Label_Code = readString(dis);
					
					this.Label_D365 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Label_Code,dos);
					
					// String
				
						writeString(this.Label_D365,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Label_Code="+Label_Code);
		sb.append(",Label_D365="+Label_D365);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row24Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row24Struct row24 = new row24Struct();
copyOfcopyOfsortie_fashionStruct copyOfcopyOfsortie_fashion = new copyOfcopyOfsortie_fashionStruct();





	
	/**
	 * [tAdvancedHash_copyOfcopyOfsortie_fashion begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_copyOfcopyOfsortie_fashion", false);
		start_Hash.put("tAdvancedHash_copyOfcopyOfsortie_fashion", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_copyOfcopyOfsortie_fashion";

	
		int tos_count_tAdvancedHash_copyOfcopyOfsortie_fashion = 0;
		

			   		// connection name:copyOfcopyOfsortie_fashion
			   		// source node:tMap_7 - inputs:(row24) outputs:(copyOfcopyOfsortie_fashion,copyOfcopyOfsortie_fashion) | target node:tAdvancedHash_copyOfcopyOfsortie_fashion - inputs:(copyOfcopyOfsortie_fashion) outputs:()
			   		// linked node: tMap_20 - inputs:(sortie_Excel,copyOfcopyOfsortie_fashion) outputs:(sortie_EUR_WSP,sortie_full_eur_wsp)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_copyOfcopyOfsortie_fashion = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<copyOfcopyOfsortie_fashionStruct> tHash_Lookup_copyOfcopyOfsortie_fashion =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<copyOfcopyOfsortie_fashionStruct>getLookup(matchingModeEnum_copyOfcopyOfsortie_fashion);
	   						   
		   	   	   globalMap.put("tHash_Lookup_copyOfcopyOfsortie_fashion", tHash_Lookup_copyOfcopyOfsortie_fashion);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_copyOfcopyOfsortie_fashion begin ] stop
 */



	
	/**
	 * [tMap_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_7", false);
		start_Hash.put("tMap_7", System.currentTimeMillis());
		
	
	currentComponent="tMap_7";

	
		int tos_count_tMap_7 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_7__Struct  {
}
Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfcopyOfsortie_fashionStruct copyOfcopyOfsortie_fashion_tmp = new copyOfcopyOfsortie_fashionStruct();
// ###############################

        
        



        









 



/**
 * [tMap_7 begin ] stop
 */



	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_2";

	
		int tos_count_tDBInput_2 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_2 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_2 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_2  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_2, talendToDBArray_tDBInput_2); 
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
				String driverClass_tDBInput_2 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
			    java.lang.Class jdbcclazz_tDBInput_2 = java.lang.Class.forName(driverClass_tDBInput_2);
					String dbUser_tDBInput_2 = context.SQLSERVER_Login;
					
					
					
	final String decryptedPassword_tDBInput_2 = context.SQLSERVER_Password; 
					
					String dbPwd_tDBInput_2 = decryptedPassword_tDBInput_2;
				
		    String port_tDBInput_2 = context.SQLSERVER_Port;
		    String dbname_tDBInput_2 = context.SQLSERVER_Database ;		    
		    String url_tDBInput_2 = "jdbc:sqlserver://" + context.SQLSERVER_Server ;
		    if (!"".equals(port_tDBInput_2)) {
		    	url_tDBInput_2 += ":" + context.SQLSERVER_Port;
		    }
		    if (!"".equals(dbname_tDBInput_2)) {		    
		    	url_tDBInput_2 += ";databaseName=" + context.SQLSERVER_Database; 
		    }
		    url_tDBInput_2 += ";appName=" + projectName + ";" + context.SQLSERVER_AdditionalParams;
		    String dbschema_tDBInput_2 = context.SQLSERVER_Schema;
				
				conn_tDBInput_2 = java.sql.DriverManager.getConnection(url_tDBInput_2,dbUser_tDBInput_2,dbPwd_tDBInput_2);
		        
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

		    String dbquery_tDBInput_2 = "\nselect LABELCODE as [Label Code], LABELD365 as [Label D365] from  data.D365_Labels\nunion \nselect 'SMS', 'SMS'\n";
			

            	globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);
		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
							if(colQtyInRs_tDBInput_2 < 1) {
								row24.Label_Code = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(1);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		row24.Label_Code = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row24.Label_Code = tmpContent_tDBInput_2;
                }
            } else {
                row24.Label_Code = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 2) {
								row24.Label_D365 = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(2);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		row24.Label_D365 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row24.Label_D365 = tmpContent_tDBInput_2;
                }
            } else {
                row24.Label_D365 = null;
            }
		                    }
					





 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_7 main ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_7 = false;
		  boolean mainRowRejected_tMap_7 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_7__Struct Var = Var__tMap_7;// ###############################
        // ###############################
        // # Output tables

copyOfcopyOfsortie_fashion = null;


// # Output table : 'copyOfcopyOfsortie_fashion'
copyOfcopyOfsortie_fashion_tmp.CODE = StringHandling.DOWNCASE(row24.Label_Code) ;
copyOfcopyOfsortie_fashion_tmp.LABEL = row24.Label_D365 ;
copyOfcopyOfsortie_fashion = copyOfcopyOfsortie_fashion_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_7 = false;










 


	tos_count_tMap_7++;

/**
 * [tMap_7 main ] stop
 */
	
	/**
	 * [tMap_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 process_data_begin ] stop
 */
// Start of branch "copyOfcopyOfsortie_fashion"
if(copyOfcopyOfsortie_fashion != null) { 



	
	/**
	 * [tAdvancedHash_copyOfcopyOfsortie_fashion main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_copyOfcopyOfsortie_fashion";

	


			   
			   

					copyOfcopyOfsortie_fashionStruct copyOfcopyOfsortie_fashion_HashRow = new copyOfcopyOfsortie_fashionStruct();
		   	   	   
				
				copyOfcopyOfsortie_fashion_HashRow.CODE = copyOfcopyOfsortie_fashion.CODE;
				
				copyOfcopyOfsortie_fashion_HashRow.LABEL = copyOfcopyOfsortie_fashion.LABEL;
				
			tHash_Lookup_copyOfcopyOfsortie_fashion.put(copyOfcopyOfsortie_fashion_HashRow);
			
            




 


	tos_count_tAdvancedHash_copyOfcopyOfsortie_fashion++;

/**
 * [tAdvancedHash_copyOfcopyOfsortie_fashion main ] stop
 */
	
	/**
	 * [tAdvancedHash_copyOfcopyOfsortie_fashion process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_copyOfcopyOfsortie_fashion";

	

 



/**
 * [tAdvancedHash_copyOfcopyOfsortie_fashion process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_copyOfcopyOfsortie_fashion process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_copyOfcopyOfsortie_fashion";

	

 



/**
 * [tAdvancedHash_copyOfcopyOfsortie_fashion process_data_end ] stop
 */

} // End of branch "copyOfcopyOfsortie_fashion"




	
	/**
	 * [tMap_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

	}
}finally{
	if (rs_tDBInput_2 != null) {
		rs_tDBInput_2.close();
	}
	if (stmt_tDBInput_2 != null) {
		stmt_tDBInput_2.close();
	}
		if(conn_tDBInput_2 != null && !conn_tDBInput_2.isClosed()) {
			
			conn_tDBInput_2.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);

 

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());




/**
 * [tDBInput_2 end ] stop
 */

	
	/**
	 * [tMap_7 end ] start
	 */

	

	
	
	currentComponent="tMap_7";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





 

ok_Hash.put("tMap_7", true);
end_Hash.put("tMap_7", System.currentTimeMillis());




/**
 * [tMap_7 end ] stop
 */

	
	/**
	 * [tAdvancedHash_copyOfcopyOfsortie_fashion end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_copyOfcopyOfsortie_fashion";

	

tHash_Lookup_copyOfcopyOfsortie_fashion.endPut();

 

ok_Hash.put("tAdvancedHash_copyOfcopyOfsortie_fashion", true);
end_Hash.put("tAdvancedHash_copyOfcopyOfsortie_fashion", System.currentTimeMillis());




/**
 * [tAdvancedHash_copyOfcopyOfsortie_fashion end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 finally ] stop
 */

	
	/**
	 * [tMap_7 finally ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_copyOfcopyOfsortie_fashion finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_copyOfcopyOfsortie_fashion";

	

 



/**
 * [tAdvancedHash_copyOfcopyOfsortie_fashion finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	

public void connectionStatsLogs_CommitProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("connectionStatsLogs_Commit_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [connectionStatsLogs_Commit begin ] start
	 */

	

	
		
		ok_Hash.put("connectionStatsLogs_Commit", false);
		start_Hash.put("connectionStatsLogs_Commit", System.currentTimeMillis());
		
	
	currentComponent="connectionStatsLogs_Commit";

	
		int tos_count_connectionStatsLogs_Commit = 0;
		

 



/**
 * [connectionStatsLogs_Commit begin ] stop
 */
	
	/**
	 * [connectionStatsLogs_Commit main ] start
	 */

	

	
	
	currentComponent="connectionStatsLogs_Commit";

	

	java.sql.Connection conn_connectionStatsLogs_Commit = (java.sql.Connection)globalMap.get("conn_connectionStatsLogs");
	if(conn_connectionStatsLogs_Commit != null && !conn_connectionStatsLogs_Commit.isClosed())
	{
	
			
			conn_connectionStatsLogs_Commit.commit();
			
	
	}

 


	tos_count_connectionStatsLogs_Commit++;

/**
 * [connectionStatsLogs_Commit main ] stop
 */
	
	/**
	 * [connectionStatsLogs_Commit process_data_begin ] start
	 */

	

	
	
	currentComponent="connectionStatsLogs_Commit";

	

 



/**
 * [connectionStatsLogs_Commit process_data_begin ] stop
 */
	
	/**
	 * [connectionStatsLogs_Commit process_data_end ] start
	 */

	

	
	
	currentComponent="connectionStatsLogs_Commit";

	

 



/**
 * [connectionStatsLogs_Commit process_data_end ] stop
 */
	
	/**
	 * [connectionStatsLogs_Commit end ] start
	 */

	

	
	
	currentComponent="connectionStatsLogs_Commit";

	

 

ok_Hash.put("connectionStatsLogs_Commit", true);
end_Hash.put("connectionStatsLogs_Commit", System.currentTimeMillis());




/**
 * [connectionStatsLogs_Commit end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [connectionStatsLogs_Commit finally ] start
	 */

	

	
	
	currentComponent="connectionStatsLogs_Commit";

	

 



/**
 * [connectionStatsLogs_Commit finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("connectionStatsLogs_Commit_SUBPROCESS_STATE", 1);
	}
	

public void connectionStatsLogsProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("connectionStatsLogs_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [connectionStatsLogs begin ] start
	 */

	

	
		
		ok_Hash.put("connectionStatsLogs", false);
		start_Hash.put("connectionStatsLogs", System.currentTimeMillis());
		
	
	currentComponent="connectionStatsLogs";

	
		int tos_count_connectionStatsLogs = 0;
		
	

			    
		    String url_connectionStatsLogs = "jdbc:sqlserver://" + context.SQLSERVER_LOG_Server ;
		String port_connectionStatsLogs = context.SQLSERVER_LOG_Port;
		String dbname_connectionStatsLogs = context.SQLSERVER_LOG_Database ;
    	if (!"".equals(port_connectionStatsLogs)) {
    		url_connectionStatsLogs += ":" + context.SQLSERVER_LOG_Port;
    	}
    	if (!"".equals(dbname_connectionStatsLogs)) {
    				    
		    	url_connectionStatsLogs += ";databaseName=" + context.SQLSERVER_LOG_Database; 
    	}
		url_connectionStatsLogs += ";appName=" + projectName + ";" + context.SQLSERVER_LOG_AdditionalParams;  
		String dbUser_connectionStatsLogs = context.SQLSERVER_LOG_Login;
		
		
			
	final String decryptedPassword_connectionStatsLogs = context.SQLSERVER_LOG_Password; 
			String dbPwd_connectionStatsLogs = decryptedPassword_connectionStatsLogs;
		
	java.sql.Connection conn_connectionStatsLogs = null;
	
	
			String sharedConnectionName_connectionStatsLogs = "jdbc:sqlserver://"+context.SQLSERVER_LOG_Server+":"+context.SQLSERVER_LOG_Port+";DatabaseName="+context.SQLSERVER_LOG_Schema+";"+context.SQLSERVER_LOG_AdditionalParams+""+"_StatsAndLog_Shared_Connection";
			conn_connectionStatsLogs = SharedDBConnection.getDBConnection("com.microsoft.sqlserver.jdbc.SQLServerDriver",url_connectionStatsLogs,dbUser_connectionStatsLogs , dbPwd_connectionStatsLogs , sharedConnectionName_connectionStatsLogs);
	if (null != conn_connectionStatsLogs) {
		
			conn_connectionStatsLogs.setAutoCommit(false);
	}

	globalMap.put("dbschema_connectionStatsLogs", context.SQLSERVER_LOG_Schema);

	globalMap.put("db_connectionStatsLogs",  context.SQLSERVER_LOG_Database);

	globalMap.put("conn_connectionStatsLogs",conn_connectionStatsLogs);
	
	globalMap.put("shareIdentitySetting_connectionStatsLogs",  false);

 



/**
 * [connectionStatsLogs begin ] stop
 */
	
	/**
	 * [connectionStatsLogs main ] start
	 */

	

	
	
	currentComponent="connectionStatsLogs";

	

 


	tos_count_connectionStatsLogs++;

/**
 * [connectionStatsLogs main ] stop
 */
	
	/**
	 * [connectionStatsLogs process_data_begin ] start
	 */

	

	
	
	currentComponent="connectionStatsLogs";

	

 



/**
 * [connectionStatsLogs process_data_begin ] stop
 */
	
	/**
	 * [connectionStatsLogs process_data_end ] start
	 */

	

	
	
	currentComponent="connectionStatsLogs";

	

 



/**
 * [connectionStatsLogs process_data_end ] stop
 */
	
	/**
	 * [connectionStatsLogs end ] start
	 */

	

	
	
	currentComponent="connectionStatsLogs";

	

 

ok_Hash.put("connectionStatsLogs", true);
end_Hash.put("connectionStatsLogs", System.currentTimeMillis());




/**
 * [connectionStatsLogs end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [connectionStatsLogs finally ] start
	 */

	

	
	
	currentComponent="connectionStatsLogs";

	

 



/**
 * [connectionStatsLogs finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("connectionStatsLogs_SUBPROCESS_STATE", 1);
	}
	


public static class row_talendLogs_LOGSStruct implements routines.system.IPersistableRow<row_talendLogs_LOGSStruct> {
    final static byte[] commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];
    static byte[] commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}
				
			    public String pid;

				public String getPid () {
					return this.pid;
				}
				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}
				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}
				
			    public String project;

				public String getProject () {
					return this.project;
				}
				
			    public String job;

				public String getJob () {
					return this.job;
				}
				
			    public String context;

				public String getContext () {
					return this.context;
				}
				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String message;

				public String getMessage () {
					return this.message;
				}
				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length) {
				if(length < 1024 && commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1.length == 0) {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[1024];
				} else {
   					commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length);
			strReturn = new String(commonByteArray_DEV_MASTERFILE_EXTRACT_PRICES_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_DEV_MASTERFILE_EXTRACT_PRICES_1) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row_talendLogs_LOGSStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void talendLogs_LOGSProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("talendLogs_LOGS_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row_talendLogs_LOGSStruct row_talendLogs_LOGS = new row_talendLogs_LOGSStruct();




	
	/**
	 * [talendLogs_DB begin ] start
	 */

	

	
		
		ok_Hash.put("talendLogs_DB", false);
		start_Hash.put("talendLogs_DB", System.currentTimeMillis());
		
	
		currentVirtualComponent = "talendLogs_DB";
	
	currentComponent="talendLogs_DB";

	
		int tos_count_talendLogs_DB = 0;
		



int nb_line_talendLogs_DB = 0;
int nb_line_update_talendLogs_DB = 0;
int nb_line_inserted_talendLogs_DB = 0;
int nb_line_deleted_talendLogs_DB = 0;
int nb_line_rejected_talendLogs_DB = 0;

int deletedCount_talendLogs_DB=0;
int updatedCount_talendLogs_DB=0;
int insertedCount_talendLogs_DB=0;
int rejectedCount_talendLogs_DB=0;
String dbschema_talendLogs_DB = null;
String tableName_talendLogs_DB = null;
boolean whetherReject_talendLogs_DB = false;

java.util.Calendar calendar_talendLogs_DB = java.util.Calendar.getInstance();
long year1_talendLogs_DB = TalendDate.parseDate("yyyy-MM-dd","0001-01-01").getTime();
long year2_talendLogs_DB = TalendDate.parseDate("yyyy-MM-dd","1753-01-01").getTime();
long year10000_talendLogs_DB = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss","9999-12-31 24:00:00").getTime();
long date_talendLogs_DB;

java.util.Calendar calendar_datetimeoffset_talendLogs_DB = java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone("UTC"));

	
java.sql.Connection conn_talendLogs_DB = null;
String dbUser_talendLogs_DB = null;
	dbschema_talendLogs_DB = (String)globalMap.get("dbschema_connectionStatsLogs");
	conn_talendLogs_DB = (java.sql.Connection)globalMap.get("conn_connectionStatsLogs");
	
   int batchSize_talendLogs_DB = 10000;
   int batchSizeCounter_talendLogs_DB=0;

if(dbschema_talendLogs_DB == null || dbschema_talendLogs_DB.trim().length() == 0) {
    tableName_talendLogs_DB = "Log";
} else {
    tableName_talendLogs_DB = dbschema_talendLogs_DB + "].[" + "Log";
}
	int count_talendLogs_DB=0;


                    // [%connection%][checktable][tableName]
                    String keyCheckTable_talendLogs_DB = conn_talendLogs_DB + "[checktable]" + "[" + "Log" + "]";

                if(GlobalResource.resourceMap.get(keyCheckTable_talendLogs_DB)== null){//}

                    synchronized (GlobalResource.resourceLockMap.get(keyCheckTable_talendLogs_DB)) {//}
                        if(GlobalResource.resourceMap.get(keyCheckTable_talendLogs_DB)== null){//}
                                boolean whetherExist_talendLogs_DB = false;
                                try (java.sql.Statement isExistStmt_talendLogs_DB = conn_talendLogs_DB.createStatement()) {
                                    try {
                                        isExistStmt_talendLogs_DB.execute("SELECT TOP 1 1 FROM [" + tableName_talendLogs_DB + "]" );
                                        whetherExist_talendLogs_DB = true;
                                    } catch (java.lang.Exception e){
                                        whetherExist_talendLogs_DB = false;
                                    }
                                }
                                if(!whetherExist_talendLogs_DB) {
                                    try (java.sql.Statement stmtCreate_talendLogs_DB = conn_talendLogs_DB.createStatement()) {
                                        stmtCreate_talendLogs_DB.execute("CREATE TABLE [" + tableName_talendLogs_DB + "]([moment] DATETIME ,[pid] VARCHAR(20)  ,[root_pid] VARCHAR(20)  ,[father_pid] VARCHAR(20)  ,[project] VARCHAR(50)  ,[job] VARCHAR(255)  ,[context] VARCHAR(50)  ,[priority] INT ,[type] VARCHAR(255)  ,[origin] VARCHAR(255)  ,[message] VARCHAR(255)  ,[code] INT )");
                                    }
                                }
                            GlobalResource.resourceMap.put(keyCheckTable_talendLogs_DB, true);
            //{{{
                        } // end of if
                    } // end synchronized
                }
        String insert_talendLogs_DB = "INSERT INTO [" + tableName_talendLogs_DB + "] ([moment],[pid],[root_pid],[father_pid],[project],[job],[context],[priority],[type],[origin],[message],[code]) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)";

        java.sql.PreparedStatement pstmt_talendLogs_DB = null;
        String keyPsmt_talendLogs_DB = conn_talendLogs_DB + "[psmt]" + "[" + "Log" + "]";
        pstmt_talendLogs_DB = SharedDBPreparedStatement.getSharedPreparedStatement(conn_talendLogs_DB,insert_talendLogs_DB,keyPsmt_talendLogs_DB);
        resourceMap.put("pstmt_talendLogs_DB", pstmt_talendLogs_DB);
 	boolean isShareIdentity_talendLogs_DB = globalMap.get("shareIdentitySetting_connectionStatsLogs") != null && (Boolean)globalMap.get("shareIdentitySetting_connectionStatsLogs") == true;

 



/**
 * [talendLogs_DB begin ] stop
 */



	
	/**
	 * [talendLogs_LOGS begin ] start
	 */

	

	
		
		ok_Hash.put("talendLogs_LOGS", false);
		start_Hash.put("talendLogs_LOGS", System.currentTimeMillis());
		
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	
		int tos_count_talendLogs_LOGS = 0;
		

try {
	for (LogCatcherUtils.LogCatcherMessage lcm : talendLogs_LOGS.getMessages()) {
		row_talendLogs_LOGS.type = lcm.getType();
		row_talendLogs_LOGS.origin = (lcm.getOrigin()==null || lcm.getOrigin().length()<1 ? null : lcm.getOrigin());
		row_talendLogs_LOGS.priority = lcm.getPriority();
		row_talendLogs_LOGS.message = lcm.getMessage();
		row_talendLogs_LOGS.code = lcm.getCode();
		
		row_talendLogs_LOGS.moment = java.util.Calendar.getInstance().getTime();
	
    	row_talendLogs_LOGS.pid = pid;
		row_talendLogs_LOGS.root_pid = rootPid;
		row_talendLogs_LOGS.father_pid = fatherPid;
	
    	row_talendLogs_LOGS.project = projectName;
    	row_talendLogs_LOGS.job = jobName;
    	row_talendLogs_LOGS.context = contextStr;
    		
 



/**
 * [talendLogs_LOGS begin ] stop
 */
	
	/**
	 * [talendLogs_LOGS main ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	

 


	tos_count_talendLogs_LOGS++;

/**
 * [talendLogs_LOGS main ] stop
 */
	
	/**
	 * [talendLogs_LOGS process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	

 



/**
 * [talendLogs_LOGS process_data_begin ] stop
 */

	
	/**
	 * [talendLogs_DB main ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_DB";
	
	currentComponent="talendLogs_DB";

	



        whetherReject_talendLogs_DB = false;
                    if(row_talendLogs_LOGS.moment != null) {
pstmt_talendLogs_DB.setTimestamp(1, new java.sql.Timestamp(row_talendLogs_LOGS.moment.getTime()));
} else {
pstmt_talendLogs_DB.setNull(1, java.sql.Types.DATE);
}

                    if(row_talendLogs_LOGS.pid == null) {
pstmt_talendLogs_DB.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_talendLogs_DB.setString(2, row_talendLogs_LOGS.pid);
}

                    if(row_talendLogs_LOGS.root_pid == null) {
pstmt_talendLogs_DB.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_talendLogs_DB.setString(3, row_talendLogs_LOGS.root_pid);
}

                    if(row_talendLogs_LOGS.father_pid == null) {
pstmt_talendLogs_DB.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_talendLogs_DB.setString(4, row_talendLogs_LOGS.father_pid);
}

                    if(row_talendLogs_LOGS.project == null) {
pstmt_talendLogs_DB.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_talendLogs_DB.setString(5, row_talendLogs_LOGS.project);
}

                    if(row_talendLogs_LOGS.job == null) {
pstmt_talendLogs_DB.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_talendLogs_DB.setString(6, row_talendLogs_LOGS.job);
}

                    if(row_talendLogs_LOGS.context == null) {
pstmt_talendLogs_DB.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_talendLogs_DB.setString(7, row_talendLogs_LOGS.context);
}

                    if(row_talendLogs_LOGS.priority == null) {
pstmt_talendLogs_DB.setNull(8, java.sql.Types.INTEGER);
} else {pstmt_talendLogs_DB.setInt(8, row_talendLogs_LOGS.priority);
}

                    if(row_talendLogs_LOGS.type == null) {
pstmt_talendLogs_DB.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_talendLogs_DB.setString(9, row_talendLogs_LOGS.type);
}

                    if(row_talendLogs_LOGS.origin == null) {
pstmt_talendLogs_DB.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_talendLogs_DB.setString(10, row_talendLogs_LOGS.origin);
}

                    if(row_talendLogs_LOGS.message == null) {
pstmt_talendLogs_DB.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_talendLogs_DB.setString(11, row_talendLogs_LOGS.message);
}

                    if(row_talendLogs_LOGS.code == null) {
pstmt_talendLogs_DB.setNull(12, java.sql.Types.INTEGER);
} else {pstmt_talendLogs_DB.setInt(12, row_talendLogs_LOGS.code);
}


        		pstmt_talendLogs_DB.addBatch();
        		nb_line_talendLogs_DB++;
    		 
    		  batchSizeCounter_talendLogs_DB++;
    		
            	//////////batch execute by batch size///////
            	class LimitBytesHelper_talendLogs_DB{
            		public int limitBytePart1(int counter,java.sql.PreparedStatement pstmt_talendLogs_DB) throws Exception {
                try {
						
						for(int countEach_talendLogs_DB: pstmt_talendLogs_DB.executeBatch()) {
							if(countEach_talendLogs_DB == -2 || countEach_talendLogs_DB == -3) {
								break;
							}
							counter += countEach_talendLogs_DB;
						}
						
                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_talendLogs_DB = 0;
					for(int countEach_talendLogs_DB: e.getUpdateCounts()) {
						counter += (countEach_talendLogs_DB < 0 ? 0 : countEach_talendLogs_DB);
					}
				
            	    	
                		System.err.println(e.getMessage());
                	
               			 }
    				return counter;
            	}
            	
            	public int limitBytePart2(int counter,java.sql.PreparedStatement pstmt_talendLogs_DB) throws Exception {
                try {
                		
						for(int countEach_talendLogs_DB: pstmt_talendLogs_DB.executeBatch()) {
							if(countEach_talendLogs_DB == -2 || countEach_talendLogs_DB == -3) {
								break;
							}
							counter += countEach_talendLogs_DB;
						}
						
                }catch (java.sql.BatchUpdateException e){
                	
                	
					for(int countEach_talendLogs_DB: e.getUpdateCounts()) {
						counter += (countEach_talendLogs_DB < 0 ? 0 : countEach_talendLogs_DB);
					}
					
            	    	
                        System.err.println(e.getMessage());
                	
                		}	
                	return counter;	
            	}
            }
    		if ((batchSize_talendLogs_DB > 0) && (batchSize_talendLogs_DB <= batchSizeCounter_talendLogs_DB)) {
    		
    		            
            	    		insertedCount_talendLogs_DB = new LimitBytesHelper_talendLogs_DB().limitBytePart1(insertedCount_talendLogs_DB,pstmt_talendLogs_DB);
            	    	
    			
			    batchSizeCounter_talendLogs_DB = 0;
			}
    		

    	////////////commit every////////////
    			

 


	tos_count_talendLogs_DB++;

/**
 * [talendLogs_DB main ] stop
 */
	
	/**
	 * [talendLogs_DB process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_DB";
	
	currentComponent="talendLogs_DB";

	

 



/**
 * [talendLogs_DB process_data_begin ] stop
 */
	
	/**
	 * [talendLogs_DB process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_DB";
	
	currentComponent="talendLogs_DB";

	

 



/**
 * [talendLogs_DB process_data_end ] stop
 */



	
	/**
	 * [talendLogs_LOGS process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	

 



/**
 * [talendLogs_LOGS process_data_end ] stop
 */
	
	/**
	 * [talendLogs_LOGS end ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	
	}
} catch (Exception e_talendLogs_LOGS) {
	logIgnoredError(String.format("talendLogs_LOGS - tLogCatcher failed to process log message(s) due to internal error: %s", e_talendLogs_LOGS), e_talendLogs_LOGS);
}

 

ok_Hash.put("talendLogs_LOGS", true);
end_Hash.put("talendLogs_LOGS", System.currentTimeMillis());




/**
 * [talendLogs_LOGS end ] stop
 */

	
	/**
	 * [talendLogs_DB end ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_DB";
	
	currentComponent="talendLogs_DB";

	



                try {
						int countSum_talendLogs_DB = 0;
						if (pstmt_talendLogs_DB != null && batchSizeCounter_talendLogs_DB > 0) {
							
							for(int countEach_talendLogs_DB: pstmt_talendLogs_DB.executeBatch()) {
								if(countEach_talendLogs_DB == -2 || countEach_talendLogs_DB == -3) {
									break;
								}
								countSum_talendLogs_DB += countEach_talendLogs_DB;
							}
							
						}
            	    	
            	    		insertedCount_talendLogs_DB += countSum_talendLogs_DB;
            	    	
                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_talendLogs_DB = 0;
					for(int countEach_talendLogs_DB: e.getUpdateCounts()) {
						countSum_talendLogs_DB += (countEach_talendLogs_DB < 0 ? 0 : countEach_talendLogs_DB);
					}
					
            	    		insertedCount_talendLogs_DB += countSum_talendLogs_DB;
            	    	
                		System.err.println(e.getMessage());
                	
            	}
        if(pstmt_talendLogs_DB != null) {
			
				SharedDBPreparedStatement.releasePreparedStatement(keyPsmt_talendLogs_DB);
			
        }
    resourceMap.put("statementClosed_talendLogs_DB", true);

	nb_line_deleted_talendLogs_DB=nb_line_deleted_talendLogs_DB+ deletedCount_talendLogs_DB;
	nb_line_update_talendLogs_DB=nb_line_update_talendLogs_DB + updatedCount_talendLogs_DB;
	nb_line_inserted_talendLogs_DB=nb_line_inserted_talendLogs_DB + insertedCount_talendLogs_DB;
	nb_line_rejected_talendLogs_DB=nb_line_rejected_talendLogs_DB + rejectedCount_talendLogs_DB;
	
        globalMap.put("talendLogs_DB_NB_LINE",nb_line_talendLogs_DB);
        globalMap.put("talendLogs_DB_NB_LINE_UPDATED",nb_line_update_talendLogs_DB);
        globalMap.put("talendLogs_DB_NB_LINE_INSERTED",nb_line_inserted_talendLogs_DB);
        globalMap.put("talendLogs_DB_NB_LINE_DELETED",nb_line_deleted_talendLogs_DB);
        globalMap.put("talendLogs_DB_NB_LINE_REJECTED", nb_line_rejected_talendLogs_DB);
    
	

 

ok_Hash.put("talendLogs_DB", true);
end_Hash.put("talendLogs_DB", System.currentTimeMillis());




/**
 * [talendLogs_DB end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:talendLogs_LOGS:sub_ok_talendLogs_connectionStatsLogs_Commit", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
							connectionStatsLogs_CommitProcess(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [talendLogs_LOGS finally ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_LOGS";
	
	currentComponent="talendLogs_LOGS";

	

 



/**
 * [talendLogs_LOGS finally ] stop
 */

	
	/**
	 * [talendLogs_DB finally ] start
	 */

	

	
	
		currentVirtualComponent = "talendLogs_DB";
	
	currentComponent="talendLogs_DB";

	



    if (resourceMap.get("statementClosed_talendLogs_DB") == null) {
                java.sql.PreparedStatement pstmtToClose_talendLogs_DB = null;
                if ((pstmtToClose_talendLogs_DB = (java.sql.PreparedStatement) resourceMap.remove("pstmt_talendLogs_DB")) != null) {
                    pstmtToClose_talendLogs_DB.close();
                }
    }
 



/**
 * [talendLogs_DB finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("talendLogs_LOGS_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final MASTERFILE_EXTRACT_PRICES_1 MASTERFILE_EXTRACT_PRICES_1Class = new MASTERFILE_EXTRACT_PRICES_1();

        int exitCode = MASTERFILE_EXTRACT_PRICES_1Class.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }


        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = MASTERFILE_EXTRACT_PRICES_1.class.getClassLoader().getResourceAsStream("dev/masterfile_extract_prices_1_0_13/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = MASTERFILE_EXTRACT_PRICES_1.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("ErrorHeader", "id_String");
                            context.ErrorHeader=(String) context.getProperty("ErrorHeader");
                        context.setContextType("hasErrorHeader", "id_Boolean");
                            try{
                                context.hasErrorHeader=routines.system.ParserUtils.parseTo_Boolean (context.getProperty("hasErrorHeader"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "hasErrorHeader", e.getMessage()));
                                context.hasErrorHeader=null;
                            }
                        context.setContextType("dateValidation", "id_String");
                            context.dateValidation=(String) context.getProperty("dateValidation");
                        context.setContextType("timeValidation", "id_String");
                            context.timeValidation=(String) context.getProperty("timeValidation");
                        context.setContextType("ReferentielPath", "id_String");
                            context.ReferentielPath=(String) context.getProperty("ReferentielPath");
                        context.setContextType("IntegrationExcelPath", "id_String");
                            context.IntegrationExcelPath=(String) context.getProperty("IntegrationExcelPath");
                        context.setContextType("ExcelFileName", "id_String");
                            context.ExcelFileName=(String) context.getProperty("ExcelFileName");
                        context.setContextType("LogPath", "id_String");
                            context.LogPath=(String) context.getProperty("LogPath");
                        context.setContextType("isNike", "id_Boolean");
                            try{
                                context.isNike=routines.system.ParserUtils.parseTo_Boolean (context.getProperty("isNike"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "isNike", e.getMessage()));
                                context.isNike=null;
                            }
                        context.setContextType("ExtractPath", "id_String");
                            context.ExtractPath=(String) context.getProperty("ExtractPath");
                        context.setContextType("ExtractPathPrice", "id_String");
                            context.ExtractPathPrice=(String) context.getProperty("ExtractPathPrice");
                        context.setContextType("excelSheetName", "id_String");
                            context.excelSheetName=(String) context.getProperty("excelSheetName");
                        context.setContextType("errorFile", "id_String");
                            context.errorFile=(String) context.getProperty("errorFile");
                        context.setContextType("CreationDate", "id_String");
                            context.CreationDate=(String) context.getProperty("CreationDate");
                        context.setContextType("SQLSERVER_Server", "id_String");
                            context.SQLSERVER_Server=(String) context.getProperty("SQLSERVER_Server");
                        context.setContextType("SQLSERVER_Password", "id_Password");
                            String pwd_SQLSERVER_Password_value = context.getProperty("SQLSERVER_Password");
                            context.SQLSERVER_Password = null;
                            if(pwd_SQLSERVER_Password_value!=null) {
                                if(context_param.containsKey("SQLSERVER_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.SQLSERVER_Password = pwd_SQLSERVER_Password_value;
                                } else if (!pwd_SQLSERVER_Password_value.isEmpty()) {
                                    try {
                                        context.SQLSERVER_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_SQLSERVER_Password_value);
                                        context.put("SQLSERVER_Password",context.SQLSERVER_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        context.setContextType("SQLSERVER_AdditionalParams", "id_String");
                            context.SQLSERVER_AdditionalParams=(String) context.getProperty("SQLSERVER_AdditionalParams");
                        context.setContextType("SQLSERVER_Database", "id_String");
                            context.SQLSERVER_Database=(String) context.getProperty("SQLSERVER_Database");
                        context.setContextType("SQLSERVER_Port", "id_String");
                            context.SQLSERVER_Port=(String) context.getProperty("SQLSERVER_Port");
                        context.setContextType("SQLSERVER_Schema", "id_String");
                            context.SQLSERVER_Schema=(String) context.getProperty("SQLSERVER_Schema");
                        context.setContextType("SQLSERVER_Login", "id_String");
                            context.SQLSERVER_Login=(String) context.getProperty("SQLSERVER_Login");
                        context.setContextType("SQLSERVER_LOG_Schema", "id_String");
                            context.SQLSERVER_LOG_Schema=(String) context.getProperty("SQLSERVER_LOG_Schema");
                        context.setContextType("SQLSERVER_LOG_Server", "id_String");
                            context.SQLSERVER_LOG_Server=(String) context.getProperty("SQLSERVER_LOG_Server");
                        context.setContextType("SQLSERVER_LOG_AdditionalParams", "id_String");
                            context.SQLSERVER_LOG_AdditionalParams=(String) context.getProperty("SQLSERVER_LOG_AdditionalParams");
                        context.setContextType("SQLSERVER_LOG_Login", "id_String");
                            context.SQLSERVER_LOG_Login=(String) context.getProperty("SQLSERVER_LOG_Login");
                        context.setContextType("SQLSERVER_LOG_Port", "id_String");
                            context.SQLSERVER_LOG_Port=(String) context.getProperty("SQLSERVER_LOG_Port");
                        context.setContextType("SQLSERVER_LOG_Database", "id_String");
                            context.SQLSERVER_LOG_Database=(String) context.getProperty("SQLSERVER_LOG_Database");
                        context.setContextType("SQLSERVER_LOG_Password", "id_Password");
                            String pwd_SQLSERVER_LOG_Password_value = context.getProperty("SQLSERVER_LOG_Password");
                            context.SQLSERVER_LOG_Password = null;
                            if(pwd_SQLSERVER_LOG_Password_value!=null) {
                                if(context_param.containsKey("SQLSERVER_LOG_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.SQLSERVER_LOG_Password = pwd_SQLSERVER_LOG_Password_value;
                                } else if (!pwd_SQLSERVER_LOG_Password_value.isEmpty()) {
                                    try {
                                        context.SQLSERVER_LOG_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_SQLSERVER_LOG_Password_value);
                                        context.put("SQLSERVER_LOG_Password",context.SQLSERVER_LOG_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("ErrorHeader")) {
                context.ErrorHeader = (String) parentContextMap.get("ErrorHeader");
            }if (parentContextMap.containsKey("hasErrorHeader")) {
                context.hasErrorHeader = (Boolean) parentContextMap.get("hasErrorHeader");
            }if (parentContextMap.containsKey("dateValidation")) {
                context.dateValidation = (String) parentContextMap.get("dateValidation");
            }if (parentContextMap.containsKey("timeValidation")) {
                context.timeValidation = (String) parentContextMap.get("timeValidation");
            }if (parentContextMap.containsKey("ReferentielPath")) {
                context.ReferentielPath = (String) parentContextMap.get("ReferentielPath");
            }if (parentContextMap.containsKey("IntegrationExcelPath")) {
                context.IntegrationExcelPath = (String) parentContextMap.get("IntegrationExcelPath");
            }if (parentContextMap.containsKey("ExcelFileName")) {
                context.ExcelFileName = (String) parentContextMap.get("ExcelFileName");
            }if (parentContextMap.containsKey("LogPath")) {
                context.LogPath = (String) parentContextMap.get("LogPath");
            }if (parentContextMap.containsKey("isNike")) {
                context.isNike = (Boolean) parentContextMap.get("isNike");
            }if (parentContextMap.containsKey("ExtractPath")) {
                context.ExtractPath = (String) parentContextMap.get("ExtractPath");
            }if (parentContextMap.containsKey("ExtractPathPrice")) {
                context.ExtractPathPrice = (String) parentContextMap.get("ExtractPathPrice");
            }if (parentContextMap.containsKey("excelSheetName")) {
                context.excelSheetName = (String) parentContextMap.get("excelSheetName");
            }if (parentContextMap.containsKey("errorFile")) {
                context.errorFile = (String) parentContextMap.get("errorFile");
            }if (parentContextMap.containsKey("CreationDate")) {
                context.CreationDate = (String) parentContextMap.get("CreationDate");
            }if (parentContextMap.containsKey("SQLSERVER_Server")) {
                context.SQLSERVER_Server = (String) parentContextMap.get("SQLSERVER_Server");
            }if (parentContextMap.containsKey("SQLSERVER_Password")) {
                context.SQLSERVER_Password = (java.lang.String) parentContextMap.get("SQLSERVER_Password");
            }if (parentContextMap.containsKey("SQLSERVER_AdditionalParams")) {
                context.SQLSERVER_AdditionalParams = (String) parentContextMap.get("SQLSERVER_AdditionalParams");
            }if (parentContextMap.containsKey("SQLSERVER_Database")) {
                context.SQLSERVER_Database = (String) parentContextMap.get("SQLSERVER_Database");
            }if (parentContextMap.containsKey("SQLSERVER_Port")) {
                context.SQLSERVER_Port = (String) parentContextMap.get("SQLSERVER_Port");
            }if (parentContextMap.containsKey("SQLSERVER_Schema")) {
                context.SQLSERVER_Schema = (String) parentContextMap.get("SQLSERVER_Schema");
            }if (parentContextMap.containsKey("SQLSERVER_Login")) {
                context.SQLSERVER_Login = (String) parentContextMap.get("SQLSERVER_Login");
            }if (parentContextMap.containsKey("SQLSERVER_LOG_Schema")) {
                context.SQLSERVER_LOG_Schema = (String) parentContextMap.get("SQLSERVER_LOG_Schema");
            }if (parentContextMap.containsKey("SQLSERVER_LOG_Server")) {
                context.SQLSERVER_LOG_Server = (String) parentContextMap.get("SQLSERVER_LOG_Server");
            }if (parentContextMap.containsKey("SQLSERVER_LOG_AdditionalParams")) {
                context.SQLSERVER_LOG_AdditionalParams = (String) parentContextMap.get("SQLSERVER_LOG_AdditionalParams");
            }if (parentContextMap.containsKey("SQLSERVER_LOG_Login")) {
                context.SQLSERVER_LOG_Login = (String) parentContextMap.get("SQLSERVER_LOG_Login");
            }if (parentContextMap.containsKey("SQLSERVER_LOG_Port")) {
                context.SQLSERVER_LOG_Port = (String) parentContextMap.get("SQLSERVER_LOG_Port");
            }if (parentContextMap.containsKey("SQLSERVER_LOG_Database")) {
                context.SQLSERVER_LOG_Database = (String) parentContextMap.get("SQLSERVER_LOG_Database");
            }if (parentContextMap.containsKey("SQLSERVER_LOG_Password")) {
                context.SQLSERVER_LOG_Password = (java.lang.String) parentContextMap.get("SQLSERVER_LOG_Password");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("SQLSERVER_Password");
			parametersToEncrypt.add("SQLSERVER_LOG_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));




	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;preStaLogConProcess(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_preStaLogCon) {
globalMap.put("preStaLogCon_SUBPROCESS_STATE", -1);

e_preStaLogCon.printStackTrace();

}
try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}



this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tDBInput_5Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_5) {
globalMap.put("tDBInput_5_SUBPROCESS_STATE", -1);

e_tDBInput_5.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : MASTERFILE_EXTRACT_PRICES_1");
        }



    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_connectionStatsLogs");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_connectionStatsLogs", globalMap.get("conn_connectionStatsLogs"));







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     1837615 characters generated by Talend Open Studio for Data Integration 
 *     on the 29 décembre 2023 11:09:05 GMT
 ************************************************************************************************/